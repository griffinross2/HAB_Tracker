
HAB_Tracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d9c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08002f84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08002f84  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012986  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258d  00000000  00000000  000329bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00034f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  000365c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6fe  00000000  00000000  00037b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015042  00000000  00000000  00054236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b63c7  00000000  00000000  00069278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f63f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff4  00000000  00000000  0011f690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002ebc 	.word	0x08002ebc

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002ebc 	.word	0x08002ebc

08000178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800018c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4313      	orrs	r3, r2
 800019a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800019c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4013      	ands	r3, r2
 80001a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a8:	68fb      	ldr	r3, [r7, #12]
}
 80001aa:	bf00      	nop
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f000 fb48 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f810 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f9d2 	bl	8000568 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c4:	f000 f86e 	bl	80002a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80001c8:	f000 f8ac 	bl	8000324 <MX_I2C2_Init>
  MX_SPI1_Init();
 80001cc:	f000 f8ea 	bl	80003a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001d0:	f000 f926 	bl	8000420 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001d4:	f000 f978 	bl	80004c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80001d8:	2001      	movs	r0, #1
 80001da:	f000 ff3b 	bl	8001054 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001de:	e7fe      	b.n	80001de <main+0x2a>

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b09a      	sub	sp, #104	; 0x68
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0320 	add.w	r3, r7, #32
 80001ea:	2248      	movs	r2, #72	; 0x48
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fe5c 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]
 8000202:	615a      	str	r2, [r3, #20]
 8000204:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <SystemClock_Config+0xc0>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800020e:	4a24      	ldr	r2, [pc, #144]	; (80002a0 <SystemClock_Config+0xc0>)
 8000210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000214:	6013      	str	r3, [r2, #0]
 8000216:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <SystemClock_Config+0xc0>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000222:	2301      	movs	r3, #1
 8000224:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000226:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800022a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	2303      	movs	r3, #3
 8000236:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000238:	2310      	movs	r3, #16
 800023a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 800023c:	2306      	movs	r3, #6
 800023e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000244:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000246:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800024a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800024c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000250:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0320 	add.w	r3, r7, #32
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f9a8 	bl	80015ac <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000262:	f000 f98b 	bl	800057c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000266:	236f      	movs	r3, #111	; 0x6f
 8000268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2303      	movs	r3, #3
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fd12 	bl	8001cb0 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000292:	f000 f973 	bl	800057c <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3768      	adds	r7, #104	; 0x68
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	58000400 	.word	0x58000400

080002a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <MX_I2C1_Init+0x74>)
 80002aa:	4a1c      	ldr	r2, [pc, #112]	; (800031c <MX_I2C1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <MX_I2C1_Init+0x74>)
 80002b0:	4a1b      	ldr	r2, [pc, #108]	; (8000320 <MX_I2C1_Init+0x7c>)
 80002b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MX_I2C1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <MX_I2C1_Init+0x74>)
 80002bc:	2201      	movs	r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <MX_I2C1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_I2C1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_I2C1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002de:	480e      	ldr	r0, [pc, #56]	; (8000318 <MX_I2C1_Init+0x74>)
 80002e0:	f000 fd6c 	bl	8000dbc <HAL_I2C_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002ea:	f000 f947 	bl	800057c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <MX_I2C1_Init+0x74>)
 80002f2:	f000 fdf2 	bl	8000eda <HAL_I2CEx_ConfigAnalogFilter>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002fc:	f000 f93e 	bl	800057c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000300:	2100      	movs	r1, #0
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_I2C1_Init+0x74>)
 8000304:	f000 fe33 	bl	8000f6e <HAL_I2CEx_ConfigDigitalFilter>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800030e:	f000 f935 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028
 800031c:	40005400 	.word	0x40005400
 8000320:	20303e5d 	.word	0x20303e5d

08000324 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_I2C2_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_I2C2_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_I2C2_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <MX_I2C2_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_I2C2_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_I2C2_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_I2C2_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_I2C2_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C2_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C2_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C2_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800035e:	480e      	ldr	r0, [pc, #56]	; (8000398 <MX_I2C2_Init+0x74>)
 8000360:	f000 fd2c 	bl	8000dbc <HAL_I2C_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 f907 	bl	800057c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	2100      	movs	r1, #0
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <MX_I2C2_Init+0x74>)
 8000372:	f000 fdb2 	bl	8000eda <HAL_I2CEx_ConfigAnalogFilter>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 f8fe 	bl	800057c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000380:	2100      	movs	r1, #0
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_I2C2_Init+0x74>)
 8000384:	f000 fdf3 	bl	8000f6e <HAL_I2CEx_ConfigDigitalFilter>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f8f5 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000007c 	.word	0x2000007c
 800039c:	40005800 	.word	0x40005800
 80003a0:	20303e5d 	.word	0x20303e5d

080003a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_SPI1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <MX_SPI1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_SPI1_Init+0x74>)
 80003be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_SPI1_Init+0x74>)
 80003d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_SPI1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f2:	2207      	movs	r2, #7
 80003f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_SPI1_Init+0x74>)
 80003fe:	2208      	movs	r2, #8
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_SPI1_Init+0x74>)
 8000404:	f002 f90a 	bl	800261c <HAL_SPI_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 f8b5 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000d0 	.word	0x200000d0
 800041c:	40013000 	.word	0x40013000

08000420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800043e:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <MX_TIM1_Init+0xa0>)
 8000440:	4a20      	ldr	r2, [pc, #128]	; (80004c4 <MX_TIM1_Init+0xa4>)
 8000442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_TIM1_Init+0xa0>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_TIM1_Init+0xa0>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <MX_TIM1_Init+0xa0>)
 8000452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000456:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <MX_TIM1_Init+0xa0>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_TIM1_Init+0xa0>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_TIM1_Init+0xa0>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800046a:	4815      	ldr	r0, [pc, #84]	; (80004c0 <MX_TIM1_Init+0xa0>)
 800046c:	f002 f9aa 	bl	80027c4 <HAL_TIM_Base_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000476:	f000 f881 	bl	800057c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	480e      	ldr	r0, [pc, #56]	; (80004c0 <MX_TIM1_Init+0xa0>)
 8000488:	f002 f9f3 	bl	8002872 <HAL_TIM_ConfigClockSource>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000492:	f000 f873 	bl	800057c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <MX_TIM1_Init+0xa0>)
 80004a8:	f002 fc7e 	bl	8002da8 <HAL_TIMEx_MasterConfigSynchronization>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004b2:	f000 f863 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000134 	.word	0x20000134
 80004c4:	40012c00 	.word	0x40012c00

080004c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_TIM2_Init+0x9c>)
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_TIM2_Init+0x9c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_TIM2_Init+0x9c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_TIM2_Init+0x9c>)
 80004fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_TIM2_Init+0x9c>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_TIM2_Init+0x9c>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000510:	4814      	ldr	r0, [pc, #80]	; (8000564 <MX_TIM2_Init+0x9c>)
 8000512:	f002 f957 	bl	80027c4 <HAL_TIM_Base_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800051c:	f000 f82e 	bl	800057c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000520:	2307      	movs	r3, #7
 8000522:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	4619      	mov	r1, r3
 800052e:	480d      	ldr	r0, [pc, #52]	; (8000564 <MX_TIM2_Init+0x9c>)
 8000530:	f002 fa68 	bl	8002a04 <HAL_TIM_SlaveConfigSynchro>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800053a:	f000 f81f 	bl	800057c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800053e:	2300      	movs	r3, #0
 8000540:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4619      	mov	r1, r3
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <MX_TIM2_Init+0x9c>)
 800054c:	f002 fc2c 	bl	8002da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000556:	f000 f811 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	3720      	adds	r7, #32
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000180 	.word	0x20000180

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	2002      	movs	r0, #2
 800056e:	f7ff fe09 	bl	8000184 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff fe06 	bl	8000184 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>

08000586 <LL_AHB2_GRP1_EnableClock>:
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4313      	orrs	r3, r2
 800059c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80005c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4013      	ands	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000602:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
	...

08000624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b096      	sub	sp, #88	; 0x58
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2238      	movs	r2, #56	; 0x38
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fc31 	bl	8002eac <memset>
  if(hi2c->Instance==I2C1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <HAL_I2C_MspInit+0xe0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d126      	bne.n	80006a2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000654:	2340      	movs	r3, #64	; 0x40
 8000656:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000658:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800065c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fec0 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800066e:	f7ff ff85 	bl	800057c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2002      	movs	r0, #2
 8000674:	f7ff ff87 	bl	8000586 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000678:	23c0      	movs	r3, #192	; 0xc0
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067c:	2312      	movs	r3, #18
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000688:	2304      	movs	r3, #4
 800068a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000690:	4619      	mov	r1, r3
 8000692:	481d      	ldr	r0, [pc, #116]	; (8000708 <HAL_I2C_MspInit+0xe4>)
 8000694:	f000 fa32 	bl	8000afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000698:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800069c:	f7ff ff8b 	bl	80005b6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80006a0:	e02c      	b.n	80006fc <HAL_I2C_MspInit+0xd8>
  else if(hi2c->Instance==I2C2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a19      	ldr	r2, [pc, #100]	; (800070c <HAL_I2C_MspInit+0xe8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d127      	bne.n	80006fc <HAL_I2C_MspInit+0xd8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006b0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fe94 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 80006c6:	f7ff ff59 	bl	800057c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ff5b 	bl	8000586 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d6:	2312      	movs	r3, #18
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006e2:	2304      	movs	r3, #4
 80006e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 fa04 	bl	8000afc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80006f8:	f7ff ff5d 	bl	80005b6 <LL_APB1_GRP1_EnableClock>
}
 80006fc:	bf00      	nop
 80006fe:	3758      	adds	r7, #88	; 0x58
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40005400 	.word	0x40005400
 8000708:	48000400 	.word	0x48000400
 800070c:	40005800 	.word	0x40005800

08000710 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_SPI_MspInit+0x58>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d116      	bne.n	8000760 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000732:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000736:	f7ff ff56 	bl	80005e6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff ff23 	bl	8000586 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000740:	2338      	movs	r3, #56	; 0x38
 8000742:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000750:	2305      	movs	r3, #5
 8000752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <HAL_SPI_MspInit+0x5c>)
 800075c:	f000 f9ce 	bl	8000afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40013000 	.word	0x40013000
 800076c:	48000400 	.word	0x48000400

08000770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <HAL_TIM_Base_MspInit+0x34>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d104      	bne.n	800078c <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000782:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000786:	f7ff ff2e 	bl	80005e6 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800078a:	e007      	b.n	800079c <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000794:	d102      	bne.n	800079c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff ff0d 	bl	80005b6 <LL_APB1_GRP1_EnableClock>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 f887 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007fc:	f7ff fcbc 	bl	8000178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	; (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000826:	f002 fb1d 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fcc3 	bl	80001b4 <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   r0, =_estack
 8000830:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800083c:	08002f78 	.word	0x08002f78
  ldr r2, =_sbss
 8000840:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000844:	200001d0 	.word	0x200001d0

08000848 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000856:	2003      	movs	r0, #3
 8000858:	f000 f91e 	bl	8000a98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800085c:	f001 fc0a 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8000860:	4603      	mov	r3, r0
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <HAL_Init+0x3c>)
 8000864:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f810 	bl	800088c <HAL_InitTick>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	e001      	b.n	800087c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000878:	f7ff fecd 	bl	8000616 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087c:	79fb      	ldrb	r3, [r7, #7]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000000 	.word	0x20000000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_InitTick+0x6c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d024      	beq.n	80008ea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a0:	f001 fbe8 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_InitTick+0x6c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f912 	bl	8000ae2 <HAL_SYSTICK_Config>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d10f      	bne.n	80008e4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	d809      	bhi.n	80008de <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ca:	2200      	movs	r2, #0
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	f04f 30ff 	mov.w	r0, #4294967295
 80008d2:	f000 f8ec 	bl	8000aae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d6:	4a09      	ldr	r2, [pc, #36]	; (80008fc <HAL_InitTick+0x70>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	e007      	b.n	80008ee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e004      	b.n	80008ee <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	e001      	b.n	80008ee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000008 	.word	0x20000008
 8000920:	200001cc 	.word	0x200001cc

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	200001cc 	.word	0x200001cc

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a64:	d301      	bcc.n	8000a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00f      	b.n	8000a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <SysTick_Config+0x40>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a72:	210f      	movs	r1, #15
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f7ff ff90 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SysTick_Config+0x40>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Config+0x40>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff49 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000abc:	f7ff ff60 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	f7ff ff92 	bl	80009f0 <NVIC_EncodePriority>
 8000acc:	4602      	mov	r2, r0
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff61 	bl	800099c <__NVIC_SetPriority>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffb2 	bl	8000a54 <SysTick_Config>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e140      	b.n	8000d8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8132 	beq.w	8000d88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d005      	beq.n	8000b3c <HAL_GPIO_Init+0x40>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d130      	bne.n	8000b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b72:	2201      	movs	r2, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	f003 0201 	and.w	r2, r3, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d017      	beq.n	8000bda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d123      	bne.n	8000c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	08da      	lsrs	r2, r3, #3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3208      	adds	r2, #8
 8000bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	6939      	ldr	r1, [r7, #16]
 8000c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0203 	and.w	r2, r3, #3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 808c 	beq.w	8000d88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c70:	4a4e      	ldr	r2, [pc, #312]	; (8000dac <HAL_GPIO_Init+0x2b0>)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	2207      	movs	r2, #7
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c9a:	d00d      	beq.n	8000cb8 <HAL_GPIO_Init+0x1bc>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <HAL_GPIO_Init+0x2b4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d007      	beq.n	8000cb4 <HAL_GPIO_Init+0x1b8>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a43      	ldr	r2, [pc, #268]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d101      	bne.n	8000cb0 <HAL_GPIO_Init+0x1b4>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e004      	b.n	8000cba <HAL_GPIO_Init+0x1be>
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x1be>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <HAL_GPIO_Init+0x1be>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	f002 0203 	and.w	r2, r2, #3
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cca:	4938      	ldr	r1, [pc, #224]	; (8000dac <HAL_GPIO_Init+0x2b0>)
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cd8:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cfc:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d26:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d32:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d60:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa22 f303 	lsr.w	r3, r2, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f47f aeb7 	bne.w	8000b0c <HAL_GPIO_Init+0x10>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40010000 	.word	0x40010000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000800 	.word	0x48000800
 8000db8:	58000800 	.word	0x58000800

08000dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e081      	b.n	8000ed2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d106      	bne.n	8000de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fc1e 	bl	8000624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2224      	movs	r2, #36	; 0x24
 8000dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d107      	bne.n	8000e36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	e006      	b.n	8000e44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d104      	bne.n	8000e56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69d9      	ldr	r1, [r3, #28]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1a      	ldr	r2, [r3, #32]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b20      	cmp	r3, #32
 8000eee:	d138      	bne.n	8000f62 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e032      	b.n	8000f64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2224      	movs	r2, #36	; 0x24
 8000f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0201 	bic.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0201 	orr.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f62:	2302      	movs	r3, #2
  }
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	d139      	bne.n	8000ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e033      	b.n	8000ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2224      	movs	r2, #36	; 0x24
 8000f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e000      	b.n	8000ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ff8:	2302      	movs	r3, #2
  }
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_PWR_EnableBkUpAccess+0x18>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_PWR_EnableBkUpAccess+0x18>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	58000400 	.word	0x58000400

08001020 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <LL_PWR_EnableBootC2+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <LL_PWR_EnableBootC2+0x18>)
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	58000400 	.word	0x58000400

0800103c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_PWREx_GetVoltageRange+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	58000400 	.word	0x58000400

08001054 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 800105c:	f7ff ffe0 	bl	8001020 <LL_PWR_EnableBootC2>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001078:	d101      	bne.n	800107e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	58000400 	.word	0x58000400

0800108c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010d6:	d101      	bne.n	80010dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80010ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001130:	d101      	bne.n	8001136 <LL_RCC_HSE_IsReady+0x18>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <LL_RCC_HSE_IsReady+0x1a>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800116a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118a:	d101      	bne.n	8001190 <LL_RCC_HSI_IsReady+0x18>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <LL_RCC_HSI_IsReady+0x1a>
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80011a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	061b      	lsls	r3, r3, #24
 80011b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80011c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d101      	bne.n	80011da <LL_RCC_LSE_IsReady+0x18>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <LL_RCC_LSE_IsReady+0x1a>
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b02      	cmp	r3, #2
 8001236:	d101      	bne.n	800123c <LL_RCC_LSI_IsReady+0x18>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <LL_RCC_LSI_IsReady+0x1a>
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800124a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6013      	str	r3, [r2, #0]
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b02      	cmp	r3, #2
 800128e:	d101      	bne.n	8001294 <LL_RCC_MSI_IsReady+0x16>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <LL_RCC_MSI_IsReady+0x18>
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d101      	bne.n	80012b4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800131c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f023 0203 	bic.w	r2, r3, #3
 8001326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800133e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001382:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001386:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800138a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4313      	orrs	r3, r2
 8001392:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013b0:	f023 020f 	bic.w	r2, r3, #15
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013bc:	4313      	orrs	r3, r2
 80013be:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4313      	orrs	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001436:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001492:	d101      	bne.n	8001498 <LL_RCC_PLL_IsReady+0x18>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <LL_RCC_PLL_IsReady+0x1a>
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80014be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f003 0303 	and.w	r3, r3, #3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d101      	bne.n	8001514 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001532:	d101      	bne.n	8001538 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001556:	d101      	bne.n	800155c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001578:	d101      	bne.n	800157e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800159a:	d101      	bne.n	80015a0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e36f      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015be:	f7ff febc 	bl	800133a <LL_RCC_GetSysClkSource>
 80015c2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c4:	f7ff ff8f 	bl	80014e6 <LL_RCC_PLL_GetMainSource>
 80015c8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80c4 	beq.w	8001760 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x3e>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d176      	bne.n	80016d2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d173      	bne.n	80016d2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e353      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x68>
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001612:	e006      	b.n	8001622 <HAL_RCC_OscConfig+0x76>
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001622:	4293      	cmp	r3, r2
 8001624:	d222      	bcs.n	800166c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fd36 	bl	800209c <RCC_SetFlashLatencyFromMSIRange>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e331      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe41 	bl	80012ec <LL_RCC_MSI_SetCalibTrimming>
 800166a:	e021      	b.n	80016b0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe28 	bl	80012ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fcfb 	bl	800209c <RCC_SetFlashLatencyFromMSIRange>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e2f6      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80016b0:	f000 fce0 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4aa7      	ldr	r2, [pc, #668]	; (8001954 <HAL_RCC_OscConfig+0x3a8>)
 80016b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80016ba:	4ba7      	ldr	r3, [pc, #668]	; (8001958 <HAL_RCC_OscConfig+0x3ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f8e4 	bl	800088c <HAL_InitTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80016c8:	7cfb      	ldrb	r3, [r7, #19]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d047      	beq.n	800175e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80016ce:	7cfb      	ldrb	r3, [r7, #19]
 80016d0:	e2e5      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d02c      	beq.n	8001734 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016da:	f7ff fdb4 	bl	8001246 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016de:	f7ff f921 	bl	8000924 <HAL_GetTick>
 80016e2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e6:	f7ff f91d 	bl	8000924 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e2d2      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80016f8:	f7ff fdc1 	bl	800127e <LL_RCC_MSI_IsReady>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f1      	beq.n	80016e6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fddd 	bl	80012ec <LL_RCC_MSI_SetCalibTrimming>
 8001732:	e015      	b.n	8001760 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001734:	f7ff fd95 	bl	8001262 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001738:	f7ff f8f4 	bl	8000924 <HAL_GetTick>
 800173c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001740:	f7ff f8f0 	bl	8000924 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e2a5      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001752:	f7ff fd94 	bl	800127e <LL_RCC_MSI_IsReady>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f1      	bne.n	8001740 <HAL_RCC_OscConfig+0x194>
 800175c:	e000      	b.n	8001760 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800175e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d058      	beq.n	800181e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b08      	cmp	r3, #8
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x1d2>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d108      	bne.n	800178a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d14b      	bne.n	800181e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e289      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x204>
 80017aa:	f7ff fc9c 	bl	80010e6 <LL_RCC_HSE_Enable>
 80017ae:	e00d      	b.n	80017cc <HAL_RCC_OscConfig+0x220>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80017b8:	d104      	bne.n	80017c4 <HAL_RCC_OscConfig+0x218>
 80017ba:	f7ff fc67 	bl	800108c <LL_RCC_HSE_EnableTcxo>
 80017be:	f7ff fc92 	bl	80010e6 <LL_RCC_HSE_Enable>
 80017c2:	e003      	b.n	80017cc <HAL_RCC_OscConfig+0x220>
 80017c4:	f7ff fc9d 	bl	8001102 <LL_RCC_HSE_Disable>
 80017c8:	f7ff fc6e 	bl	80010a8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d012      	beq.n	80017fa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f8a6 	bl	8000924 <HAL_GetTick>
 80017d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f8a2 	bl	8000924 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e257      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80017ee:	f7ff fc96 	bl	800111e <LL_RCC_HSE_IsReady>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f1      	beq.n	80017dc <HAL_RCC_OscConfig+0x230>
 80017f8:	e011      	b.n	800181e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff f893 	bl	8000924 <HAL_GetTick>
 80017fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001802:	f7ff f88f 	bl	8000924 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e244      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001814:	f7ff fc83 	bl	800111e <LL_RCC_HSE_IsReady>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f1      	bne.n	8001802 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d046      	beq.n	80018b8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d005      	beq.n	800183c <HAL_RCC_OscConfig+0x290>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d10e      	bne.n	8001854 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d10b      	bne.n	8001854 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e22a      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fca4 	bl	800119a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001852:	e031      	b.n	80018b8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d019      	beq.n	8001890 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	f7ff fc70 	bl	8001140 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f860 	bl	8000924 <HAL_GetTick>
 8001864:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff f85c 	bl	8000924 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e211      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800187a:	f7ff fc7d 	bl	8001178 <LL_RCC_HSI_IsReady>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f1      	beq.n	8001868 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fc86 	bl	800119a <LL_RCC_HSI_SetCalibTrimming>
 800188e:	e013      	b.n	80018b8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001890:	f7ff fc64 	bl	800115c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff f846 	bl	8000924 <HAL_GetTick>
 8001898:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff f842 	bl	8000924 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1f7      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80018ae:	f7ff fc63 	bl	8001178 <LL_RCC_HSI_IsReady>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f1      	bne.n	800189c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d06e      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d056      	beq.n	800197a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d031      	beq.n	8001948 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e1d0      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d013      	beq.n	800192e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001906:	f7ff fc7d 	bl	8001204 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800190a:	f7ff f80b 	bl	8000924 <HAL_GetTick>
 800190e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff f807 	bl	8000924 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b11      	cmp	r3, #17
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1bc      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001924:	f7ff fc7e 	bl	8001224 <LL_RCC_LSI_IsReady>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001936:	f023 0210 	bic.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001942:	4313      	orrs	r3, r2
 8001944:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001948:	f7ff fc4c 	bl	80011e4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7fe ffea 	bl	8000924 <HAL_GetTick>
 8001950:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001952:	e00c      	b.n	800196e <HAL_RCC_OscConfig+0x3c2>
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7fe ffe2 	bl	8000924 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b11      	cmp	r3, #17
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e197      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800196e:	f7ff fc59 	bl	8001224 <LL_RCC_LSI_IsReady>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f1      	beq.n	800195c <HAL_RCC_OscConfig+0x3b0>
 8001978:	e013      	b.n	80019a2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197a:	f7ff fc43 	bl	8001204 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7fe ffd1 	bl	8000924 <HAL_GetTick>
 8001982:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7fe ffcd 	bl	8000924 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b11      	cmp	r3, #17
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e182      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001998:	f7ff fc44 	bl	8001224 <LL_RCC_LSI_IsReady>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f1      	bne.n	8001986 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80d8 	beq.w	8001b60 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80019b0:	f7ff fb5a 	bl	8001068 <LL_PWR_IsEnabledBkUpAccess>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d113      	bne.n	80019e2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80019ba:	f7ff fb23 	bl	8001004 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7fe ffb1 	bl	8000924 <HAL_GetTick>
 80019c2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7fe ffad 	bl	8000924 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e162      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80019d8:	f7ff fb46 	bl	8001068 <LL_PWR_IsEnabledBkUpAccess>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f1      	beq.n	80019c6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d07b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b85      	cmp	r3, #133	; 0x85
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7fe ff89 	bl	8000924 <HAL_GetTick>
 8001a12:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7fe ff7b 	bl	8000924 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e12e      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a40:	f7ff fbbf 	bl	80011c2 <LL_RCC_LSE_IsReady>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0ef      	beq.n	8001a2a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b81      	cmp	r3, #129	; 0x81
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b85      	cmp	r3, #133	; 0x85
 8001a58:	d121      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7fe ff63 	bl	8000924 <HAL_GetTick>
 8001a5e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe ff55 	bl	8000924 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e108      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ec      	beq.n	8001a76 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001a9c:	e060      	b.n	8001b60 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7fe ff41 	bl	8000924 <HAL_GetTick>
 8001aa2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7fe ff33 	bl	8000924 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0e6      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ec      	bne.n	8001aba <HAL_RCC_OscConfig+0x50e>
 8001ae0:	e03e      	b.n	8001b60 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7fe ff1f 	bl	8000924 <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7fe ff11 	bl	8000924 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0c4      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1ec      	bne.n	8001afe <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7fe fefe 	bl	8000924 <HAL_GetTick>
 8001b28:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7fe fef0 	bl	8000924 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0a3      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001b56:	f7ff fb34 	bl	80011c2 <LL_RCC_LSE_IsReady>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ef      	bne.n	8001b40 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8099 	beq.w	8001c9c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d06c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d14b      	bne.n	8001c10 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	f7ff fc74 	bl	8001464 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fed2 	bl	8000924 <HAL_GetTick>
 8001b80:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe fece 	bl	8000924 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b0a      	cmp	r3, #10
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e083      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b96:	f7ff fc73 	bl	8001480 <LL_RCC_PLL_IsReady>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f1      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_RCC_OscConfig+0x6fc>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb8:	0212      	lsls	r2, r2, #8
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd6:	f7ff fc37 	bl	8001448 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe fe9b 	bl	8000924 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe fe97 	bl	8000924 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b0a      	cmp	r3, #10
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e04c      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001c04:	f7ff fc3c 	bl	8001480 <LL_RCC_PLL_IsReady>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f1      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x646>
 8001c0e:	e045      	b.n	8001c9c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c10:	f7ff fc28 	bl	8001464 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe fe86 	bl	8000924 <HAL_GetTick>
 8001c18:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe fe82 	bl	8000924 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e037      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c2e:	f7ff fc27 	bl	8001480 <LL_RCC_PLL_IsReady>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f1      	bne.n	8001c1c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_RCC_OscConfig+0x700>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
 8001c48:	e028      	b.n	8001c9c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e023      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d115      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d10e      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	11c1808c 	.word	0x11c1808c
 8001cac:	eefefffc 	.word	0xeefefffc

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e12c      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b98      	ldr	r3, [pc, #608]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d91b      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b95      	ldr	r3, [pc, #596]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4993      	ldr	r1, [pc, #588]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce2:	f7fe fe1f 	bl	8000924 <HAL_GetTick>
 8001ce6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001cea:	f7fe fe1b 	bl	8000924 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e110      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfc:	4b8a      	ldr	r3, [pc, #552]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d1ef      	bne.n	8001cea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d016      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fb18 	bl	8001350 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d20:	f7fe fe00 	bl	8000924 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d28:	f7fe fdfc 	bl	8000924 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0f1      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d3a:	f7ff fbdf 	bl	80014fc <LL_RCC_IsActiveFlag_HPRE>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f1      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d016      	beq.n	8001d7e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fb0e 	bl	8001376 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d5a:	f7fe fde3 	bl	8000924 <HAL_GetTick>
 8001d5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d62:	f7fe fddf 	bl	8000924 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0d4      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d74:	f7ff fbd3 	bl	800151e <LL_RCC_IsActiveFlag_C2HPRE>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f1      	beq.n	8001d62 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fb06 	bl	80013a0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d94:	f7fe fdc6 	bl	8000924 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d9c:	f7fe fdc2 	bl	8000924 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0b7      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001dae:	f7ff fbc8 	bl	8001542 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f1      	beq.n	8001d9c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d016      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff faff 	bl	80013cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dce:	f7fe fda9 	bl	8000924 <HAL_GetTick>
 8001dd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dd6:	f7fe fda5 	bl	8000924 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e09a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001de8:	f7ff fbbd 	bl	8001566 <LL_RCC_IsActiveFlag_PPRE1>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f1      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d017      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff faf4 	bl	80013f2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e0a:	f7fe fd8b 	bl	8000924 <HAL_GetTick>
 8001e0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e12:	f7fe fd87 	bl	8000924 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e07c      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e24:	f7ff fbb0 	bl	8001588 <LL_RCC_IsActiveFlag_PPRE2>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f1      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d043      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001e42:	f7ff f96c 	bl	800111e <LL_RCC_HSE_IsReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d11e      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e066      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001e58:	f7ff fb12 	bl	8001480 <LL_RCC_PLL_IsReady>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d113      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e05b      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001e6e:	f7ff fa06 	bl	800127e <LL_RCC_MSI_IsReady>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d108      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e050      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001e7c:	f7ff f97c 	bl	8001178 <LL_RCC_HSI_IsReady>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e049      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fa40 	bl	8001314 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fd46 	bl	8000924 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7fe fd42 	bl	8000924 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e035      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	f7ff fa42 	bl	800133a <LL_RCC_GetSysClkSource>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d1ec      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d21b      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 0207 	bic.w	r2, r3, #7
 8001ed8:	4913      	ldr	r1, [pc, #76]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fd20 	bl	8000924 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ee8:	f7fe fd1c 	bl	8000924 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e011      	b.n	8001f1e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_ClockConfig+0x278>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1ef      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f08:	f000 f8b4 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_RCC_ClockConfig+0x27c>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCC_ClockConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fcb8 	bl	800088c <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	58004000 	.word	0x58004000
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	f7ff f9fa 	bl	800133a <LL_RCC_GetSysClkSource>
 8001f46:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f48:	f7ff facd 	bl	80014e6 <LL_RCC_PLL_GetMainSource>
 8001f4c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x2c>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d139      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d136      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001f60:	f7ff f99d 	bl	800129e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x62>
 8001f6a:	f7ff f998 	bl	800129e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x4e>
 8001f74:	f7ff f9a3 	bl	80012be <LL_RCC_MSI_GetRange>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	e005      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x5a>
 8001f82:	f7ff f9a7 	bl	80012d4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f86:	4603      	mov	r3, r0
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	4a36      	ldr	r2, [pc, #216]	; (8002068 <HAL_RCC_GetSysClockFreq+0x134>)
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	e014      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x8c>
 8001f96:	f7ff f982 	bl	800129e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_GetSysClockFreq+0x7a>
 8001fa0:	f7ff f98d 	bl	80012be <LL_RCC_MSI_GetRange>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	e005      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x86>
 8001fae:	f7ff f991 	bl	80012d4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_RCC_GetSysClockFreq+0x134>)
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d115      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fcc:	e012      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_RCC_GetSysClockFreq+0x138>)
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e00c      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d109      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001fe0:	f7ff f870 	bl	80010c4 <LL_RCC_HSE_IsEnabledDiv2>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_GetSysClockFreq+0x138>)
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e001      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ff2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff4:	f7ff f9a1 	bl	800133a <LL_RCC_GetSysClkSource>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d12f      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001ffe:	f7ff fa72 	bl	80014e6 <LL_RCC_PLL_GetMainSource>
 8002002:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0xde>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d003      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0xe4>
 8002010:	e00d      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_GetSysClockFreq+0x138>)
 8002014:	60fb      	str	r3, [r7, #12]
        break;
 8002016:	e00d      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002018:	f7ff f854 	bl	80010c4 <LL_RCC_HSE_IsEnabledDiv2>
 800201c:	4603      	mov	r3, r0
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_RCC_GetSysClockFreq+0x138>)
 8002024:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002026:	e005      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_GetSysClockFreq+0x13c>)
 800202a:	60fb      	str	r3, [r7, #12]
        break;
 800202c:	e002      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	60fb      	str	r3, [r7, #12]
        break;
 8002032:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002034:	f7ff fa35 	bl	80014a2 <LL_RCC_PLL_GetN>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	fb03 f402 	mul.w	r4, r3, r2
 8002040:	f7ff fa46 	bl	80014d0 <LL_RCC_PLL_GetDivider>
 8002044:	4603      	mov	r3, r0
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	3301      	adds	r3, #1
 800204a:	fbb4 f4f3 	udiv	r4, r4, r3
 800204e:	f7ff fa34 	bl	80014ba <LL_RCC_PLL_GetR>
 8002052:	4603      	mov	r3, r0
 8002054:	0f5b      	lsrs	r3, r3, #29
 8002056:	3301      	adds	r3, #1
 8002058:	fbb4 f3f3 	udiv	r3, r4, r3
 800205c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800205e:	697b      	ldr	r3, [r7, #20]
}
 8002060:	4618      	mov	r0, r3
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	08002f30 	.word	0x08002f30
 800206c:	00f42400 	.word	0x00f42400
 8002070:	01e84800 	.word	0x01e84800

08002074 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b598      	push	{r3, r4, r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002078:	f7ff ff5c 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 800207c:	4604      	mov	r4, r0
 800207e:	f7ff f9cb 	bl	8001418 <LL_RCC_GetAHBPrescaler>
 8002082:	4603      	mov	r3, r0
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_RCC_GetHCLKFreq+0x24>)
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd98      	pop	{r3, r4, r7, pc}
 8002098:	08002ef0 	.word	0x08002ef0

0800209c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80020b4:	f7ff f9bb 	bl	800142e <LL_RCC_GetAHB3Prescaler>
 80020b8:	4603      	mov	r3, r0
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9c      	lsrs	r4, r3, #18
 80020d8:	f7fe ffb0 	bl	800103c <HAL_PWREx_GetVoltageRange>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4620      	mov	r0, r4
 80020e2:	f000 f80b 	bl	80020fc <RCC_SetFlashLatency>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	08002f30 	.word	0x08002f30
 80020f4:	08002ef0 	.word	0x08002ef0
 80020f8:	431bde83 	.word	0x431bde83

080020fc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002106:	4a3a      	ldr	r2, [pc, #232]	; (80021f0 <RCC_SetFlashLatency+0xf4>)
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002110:	6018      	str	r0, [r3, #0]
 8002112:	3304      	adds	r3, #4
 8002114:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002116:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <RCC_SetFlashLatency+0xf8>)
 8002118:	f107 0318 	add.w	r3, r7, #24
 800211c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002120:	6018      	str	r0, [r3, #0]
 8002122:	3304      	adds	r3, #4
 8002124:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002126:	4a34      	ldr	r2, [pc, #208]	; (80021f8 <RCC_SetFlashLatency+0xfc>)
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	ca07      	ldmia	r2, {r0, r1, r2}
 800212e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213c:	d11b      	bne.n	8002176 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800213e:	2300      	movs	r3, #0
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
 8002142:	e014      	b.n	800216e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	3338      	adds	r3, #56	; 0x38
 800214a:	443b      	add	r3, r7
 800214c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002150:	461a      	mov	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4293      	cmp	r3, r2
 8002156:	d807      	bhi.n	8002168 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	443b      	add	r3, r7
 8002160:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002166:	e021      	b.n	80021ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	3301      	adds	r3, #1
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	2b02      	cmp	r3, #2
 8002172:	d9e7      	bls.n	8002144 <RCC_SetFlashLatency+0x48>
 8002174:	e01a      	b.n	80021ac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002176:	2300      	movs	r3, #0
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800217a:	e014      	b.n	80021a6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	3338      	adds	r3, #56	; 0x38
 8002182:	443b      	add	r3, r7
 8002184:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4293      	cmp	r3, r2
 800218e:	d807      	bhi.n	80021a0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	3338      	adds	r3, #56	; 0x38
 8002196:	443b      	add	r3, r7
 8002198:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800219e:	e005      	b.n	80021ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	3301      	adds	r3, #1
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d9e7      	bls.n	800217c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <RCC_SetFlashLatency+0x100>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 0207 	bic.w	r2, r3, #7
 80021b4:	4911      	ldr	r1, [pc, #68]	; (80021fc <RCC_SetFlashLatency+0x100>)
 80021b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80021bc:	f7fe fbb2 	bl	8000924 <HAL_GetTick>
 80021c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80021c2:	e008      	b.n	80021d6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021c4:	f7fe fbae 	bl	8000924 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e007      	b.n	80021e6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <RCC_SetFlashLatency+0x100>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1ef      	bne.n	80021c4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3738      	adds	r7, #56	; 0x38
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	08002ed4 	.word	0x08002ed4
 80021f4:	08002edc 	.word	0x08002edc
 80021f8:	08002ee4 	.word	0x08002ee4
 80021fc:	58004000 	.word	0x58004000

08002200 <LL_RCC_LSE_IsReady>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b02      	cmp	r3, #2
 8002212:	d101      	bne.n	8002218 <LL_RCC_LSE_IsReady+0x18>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <LL_RCC_LSE_IsReady+0x1a>
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <LL_RCC_SetUSARTClockSource>:
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	43db      	mvns	r3, r3
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <LL_RCC_SetI2SClockSource>:
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <LL_RCC_SetLPUARTClockSource>:
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <LL_RCC_SetI2CClockSource>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022be:	43db      	mvns	r3, r3
 80022c0:	401a      	ands	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <LL_RCC_SetLPTIMClockSource>:
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <LL_RCC_SetRNGClockSource>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <LL_RCC_SetADCClockSource>:
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800234e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <LL_RCC_SetRTCClockSource>:
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <LL_RCC_GetRTCClockSource>:
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <LL_RCC_ForceBackupDomainReset>:
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80023f4:	2300      	movs	r3, #0
 80023f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d058      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002408:	f7fe fdfc 	bl	8001004 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240c:	f7fe fa8a 	bl	8000924 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002412:	e009      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7fe fa86 	bl	8000924 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d902      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	74fb      	strb	r3, [r7, #19]
        break;
 8002426:	e006      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002428:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002434:	d1ee      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d13c      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800243c:	f7ff ffa7 	bl	800238e <LL_RCC_GetRTCClockSource>
 8002440:	4602      	mov	r2, r0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	429a      	cmp	r2, r3
 8002448:	d00f      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800244a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002456:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002458:	f7ff ffa5 	bl	80023a6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800245c:	f7ff ffb3 	bl	80023c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d014      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fa56 	bl	8000924 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800247a:	e00b      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fa52 	bl	8000924 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d902      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	74fb      	strb	r3, [r7, #19]
            break;
 8002492:	e004      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002494:	f7ff feb4 	bl	8002200 <LL_RCC_LSE_IsReady>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d1ee      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5b 	bl	8002364 <LL_RCC_SetRTCClockSource>
 80024ae:	e004      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
 80024b4:	e001      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fea9 	bl	8002222 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fe9e 	bl	8002222 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fec0 	bl	800227c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fee6 	bl	80022de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fedb 	bl	80022de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fed0 	bl	80022de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fea9 	bl	80022a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fe9e 	bl	80022a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d004      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fe93 	bl	80022a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d011      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fe5e 	bl	8002252 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259e:	d107      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d010      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fea5 	bl	8002310 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fea3 	bl	800233a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025fc:	d107      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800260e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	58000400 	.word	0x58000400

0800261c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0c6      	b.n	80027bc <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800263e:	d009      	beq.n	8002654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
 8002646:	e005      	b.n	8002654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe f851 	bl	8000710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002684:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800268e:	d902      	bls.n	8002696 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e002      	b.n	800269c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80026a4:	d007      	beq.n	80026b6 <HAL_SPI_Init+0x9a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026ae:	d002      	beq.n	80026b6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002714:	d11b      	bne.n	800274e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002726:	d903      	bls.n	8002730 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
 800272e:	e002      	b.n	8002736 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	f003 0204 	and.w	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002774:	ea42 0103 	orr.w	r1, r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278e:	d105      	bne.n	800279c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b292      	uxth	r2, r2
 800279a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e049      	b.n	800286a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fd ffc0 	bl	8000770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f000 f940 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_TIM_ConfigClockSource+0x1c>
 800288a:	2302      	movs	r3, #2
 800288c:	e0b6      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x18a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80028ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ca:	d03e      	beq.n	800294a <HAL_TIM_ConfigClockSource+0xd8>
 80028cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d0:	f200 8087 	bhi.w	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d8:	f000 8086 	beq.w	80029e8 <HAL_TIM_ConfigClockSource+0x176>
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d87f      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 80028e2:	2b70      	cmp	r3, #112	; 0x70
 80028e4:	d01a      	beq.n	800291c <HAL_TIM_ConfigClockSource+0xaa>
 80028e6:	2b70      	cmp	r3, #112	; 0x70
 80028e8:	d87b      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 80028ea:	2b60      	cmp	r3, #96	; 0x60
 80028ec:	d050      	beq.n	8002990 <HAL_TIM_ConfigClockSource+0x11e>
 80028ee:	2b60      	cmp	r3, #96	; 0x60
 80028f0:	d877      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 80028f2:	2b50      	cmp	r3, #80	; 0x50
 80028f4:	d03c      	beq.n	8002970 <HAL_TIM_ConfigClockSource+0xfe>
 80028f6:	2b50      	cmp	r3, #80	; 0x50
 80028f8:	d873      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d058      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x13e>
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d86f      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 8002902:	2b30      	cmp	r3, #48	; 0x30
 8002904:	d064      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x15e>
 8002906:	2b30      	cmp	r3, #48	; 0x30
 8002908:	d86b      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 800290a:	2b20      	cmp	r3, #32
 800290c:	d060      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x15e>
 800290e:	2b20      	cmp	r3, #32
 8002910:	d867      	bhi.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d05c      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x15e>
 8002916:	2b10      	cmp	r3, #16
 8002918:	d05a      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x15e>
 800291a:	e062      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f000 fa1c 	bl	8002d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800293e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]
      break;
 8002948:	e04f      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f000 fa05 	bl	8002d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800296c:	609a      	str	r2, [r3, #8]
      break;
 800296e:	e03c      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	461a      	mov	r2, r3
 800297e:	f000 f97a 	bl	8002c76 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2150      	movs	r1, #80	; 0x50
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f9d1 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 800298e:	e02c      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	461a      	mov	r2, r3
 800299e:	f000 f998 	bl	8002cd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2160      	movs	r1, #96	; 0x60
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f9c1 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 80029ae:	e01c      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	461a      	mov	r2, r3
 80029be:	f000 f95a 	bl	8002c76 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2140      	movs	r1, #64	; 0x40
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f9b1 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 80029ce:	e00c      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f000 f9a8 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e003      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      break;
 80029e6:	e000      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80029e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e031      	b.n	8002a80 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f88c 	bl	8002b4c <TIM_SlaveTimer_SetConfig>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e018      	b.n	8002a80 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a6c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <TIM_Base_SetConfig+0xb8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <TIM_Base_SetConfig+0x20>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d108      	bne.n	8002aba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <TIM_Base_SetConfig+0xb8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0x52>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x52>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <TIM_Base_SetConfig+0xbc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x52>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <TIM_Base_SetConfig+0xc0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <TIM_Base_SetConfig+0xb8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0xa0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <TIM_Base_SetConfig+0xbc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0xa0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <TIM_Base_SetConfig+0xc0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d103      	bne.n	8002b30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	615a      	str	r2, [r3, #20]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40014400 	.word	0x40014400
 8002b48:	40014800 	.word	0x40014800

08002b4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	f023 0307 	bic.w	r3, r3, #7
 8002b82:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b70      	cmp	r3, #112	; 0x70
 8002b9c:	d01a      	beq.n	8002bd4 <TIM_SlaveTimer_SetConfig+0x88>
 8002b9e:	2b70      	cmp	r3, #112	; 0x70
 8002ba0:	d860      	bhi.n	8002c64 <TIM_SlaveTimer_SetConfig+0x118>
 8002ba2:	2b60      	cmp	r3, #96	; 0x60
 8002ba4:	d054      	beq.n	8002c50 <TIM_SlaveTimer_SetConfig+0x104>
 8002ba6:	2b60      	cmp	r3, #96	; 0x60
 8002ba8:	d85c      	bhi.n	8002c64 <TIM_SlaveTimer_SetConfig+0x118>
 8002baa:	2b50      	cmp	r3, #80	; 0x50
 8002bac:	d046      	beq.n	8002c3c <TIM_SlaveTimer_SetConfig+0xf0>
 8002bae:	2b50      	cmp	r3, #80	; 0x50
 8002bb0:	d858      	bhi.n	8002c64 <TIM_SlaveTimer_SetConfig+0x118>
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d019      	beq.n	8002bea <TIM_SlaveTimer_SetConfig+0x9e>
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d854      	bhi.n	8002c64 <TIM_SlaveTimer_SetConfig+0x118>
 8002bba:	2b30      	cmp	r3, #48	; 0x30
 8002bbc:	d055      	beq.n	8002c6a <TIM_SlaveTimer_SetConfig+0x11e>
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	d850      	bhi.n	8002c64 <TIM_SlaveTimer_SetConfig+0x118>
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d051      	beq.n	8002c6a <TIM_SlaveTimer_SetConfig+0x11e>
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d84c      	bhi.n	8002c64 <TIM_SlaveTimer_SetConfig+0x118>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04d      	beq.n	8002c6a <TIM_SlaveTimer_SetConfig+0x11e>
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d04b      	beq.n	8002c6a <TIM_SlaveTimer_SetConfig+0x11e>
 8002bd2:	e047      	b.n	8002c64 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68d9      	ldr	r1, [r3, #12]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f000 f8c0 	bl	8002d68 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002be8:	e040      	b.n	8002c6c <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d101      	bne.n	8002bf6 <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e03b      	b.n	8002c6e <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	621a      	str	r2, [r3, #32]
      break;
 8002c3a:	e017      	b.n	8002c6c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f000 f814 	bl	8002c76 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002c4e:	e00d      	b.n	8002c6c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f000 f838 	bl	8002cd2 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002c62:	e003      	b.n	8002c6c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	75fb      	strb	r3, [r7, #23]
      break;
 8002c68:	e000      	b.n	8002c6c <TIM_SlaveTimer_SetConfig+0x120>
      break;
 8002c6a:	bf00      	nop
  }

  return status;
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f023 0201 	bic.w	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 030a 	bic.w	r3, r3, #10
 8002cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b087      	sub	sp, #28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0210 	bic.w	r2, r3, #16
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	031b      	lsls	r3, r3, #12
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f043 0307 	orr.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	609a      	str	r2, [r3, #8]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	021a      	lsls	r2, r3, #8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e04a      	b.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d108      	bne.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002df0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d10c      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4d0d      	ldr	r5, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2600      	movs	r6, #0
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4d0b      	ldr	r5, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 f820 	bl	8002ebc <_init>
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2600      	movs	r6, #0
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002f70 	.word	0x08002f70
 8002ea0:	08002f70 	.word	0x08002f70
 8002ea4:	08002f70 	.word	0x08002f70
 8002ea8:	08002f74 	.word	0x08002f74

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <_init>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr

08002ec8 <_fini>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr
