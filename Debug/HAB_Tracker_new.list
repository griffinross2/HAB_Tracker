
HAB_Tracker_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f660  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800f798  0800f798  0001f798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd34  0800fd34  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd34  0800fd34  0001fd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd3c  0800fd3c  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd3c  0800fd3c  0001fd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd40  0800fd40  0001fd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800fd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001360  2000026c  0800ffb0  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  0800ffb0  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000387f4  00000000  00000000  00020296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071ef  00000000  00000000  00058a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd8  00000000  00000000  0005fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b10  00000000  00000000  00062a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002351d  00000000  00000000  00065568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032d93  00000000  00000000  00088a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c11f8  00000000  00000000  000bb818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ca10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c188  00000000  00000000  0017ca60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000026c 	.word	0x2000026c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800f780 	.word	0x0800f780

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000270 	.word	0x20000270
 8000174:	0800f780 	.word	0x0800f780

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	; 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	3c01      	subs	r4, #1
 80002b4:	bf28      	it	cs
 80002b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ba:	d2e9      	bcs.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000462:	bf08      	it	eq
 8000464:	4770      	bxeq	lr
 8000466:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046a:	bf04      	itt	eq
 800046c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e71c      	b.n	80002bc <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aed8 	beq.w	800026a <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6bd      	b.n	800026a <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__gedf2>:
 80004f0:	f04f 3cff 	mov.w	ip, #4294967295
 80004f4:	e006      	b.n	8000504 <__cmpdf2+0x4>
 80004f6:	bf00      	nop

080004f8 <__ledf2>:
 80004f8:	f04f 0c01 	mov.w	ip, #1
 80004fc:	e002      	b.n	8000504 <__cmpdf2+0x4>
 80004fe:	bf00      	nop

08000500 <__cmpdf2>:
 8000500:	f04f 0c01 	mov.w	ip, #1
 8000504:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000508:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800050c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000510:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000514:	bf18      	it	ne
 8000516:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800051a:	d01b      	beq.n	8000554 <__cmpdf2+0x54>
 800051c:	b001      	add	sp, #4
 800051e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000522:	bf0c      	ite	eq
 8000524:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000528:	ea91 0f03 	teqne	r1, r3
 800052c:	bf02      	ittt	eq
 800052e:	ea90 0f02 	teqeq	r0, r2
 8000532:	2000      	moveq	r0, #0
 8000534:	4770      	bxeq	lr
 8000536:	f110 0f00 	cmn.w	r0, #0
 800053a:	ea91 0f03 	teq	r1, r3
 800053e:	bf58      	it	pl
 8000540:	4299      	cmppl	r1, r3
 8000542:	bf08      	it	eq
 8000544:	4290      	cmpeq	r0, r2
 8000546:	bf2c      	ite	cs
 8000548:	17d8      	asrcs	r0, r3, #31
 800054a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800054e:	f040 0001 	orr.w	r0, r0, #1
 8000552:	4770      	bx	lr
 8000554:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800055c:	d102      	bne.n	8000564 <__cmpdf2+0x64>
 800055e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000562:	d107      	bne.n	8000574 <__cmpdf2+0x74>
 8000564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d1d6      	bne.n	800051c <__cmpdf2+0x1c>
 800056e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000572:	d0d3      	beq.n	800051c <__cmpdf2+0x1c>
 8000574:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__aeabi_cdrcmple>:
 800057c:	4684      	mov	ip, r0
 800057e:	4610      	mov	r0, r2
 8000580:	4662      	mov	r2, ip
 8000582:	468c      	mov	ip, r1
 8000584:	4619      	mov	r1, r3
 8000586:	4663      	mov	r3, ip
 8000588:	e000      	b.n	800058c <__aeabi_cdcmpeq>
 800058a:	bf00      	nop

0800058c <__aeabi_cdcmpeq>:
 800058c:	b501      	push	{r0, lr}
 800058e:	f7ff ffb7 	bl	8000500 <__cmpdf2>
 8000592:	2800      	cmp	r0, #0
 8000594:	bf48      	it	mi
 8000596:	f110 0f00 	cmnmi.w	r0, #0
 800059a:	bd01      	pop	{r0, pc}

0800059c <__aeabi_dcmpeq>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff fff4 	bl	800058c <__aeabi_cdcmpeq>
 80005a4:	bf0c      	ite	eq
 80005a6:	2001      	moveq	r0, #1
 80005a8:	2000      	movne	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmplt>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffea 	bl	800058c <__aeabi_cdcmpeq>
 80005b8:	bf34      	ite	cc
 80005ba:	2001      	movcc	r0, #1
 80005bc:	2000      	movcs	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmple>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffe0 	bl	800058c <__aeabi_cdcmpeq>
 80005cc:	bf94      	ite	ls
 80005ce:	2001      	movls	r0, #1
 80005d0:	2000      	movhi	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_dcmpge>:
 80005d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005dc:	f7ff ffce 	bl	800057c <__aeabi_cdrcmple>
 80005e0:	bf94      	ite	ls
 80005e2:	2001      	movls	r0, #1
 80005e4:	2000      	movhi	r0, #0
 80005e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ea:	bf00      	nop

080005ec <__aeabi_dcmpgt>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff ffc4 	bl	800057c <__aeabi_cdrcmple>
 80005f4:	bf34      	ite	cc
 80005f6:	2001      	movcc	r0, #1
 80005f8:	2000      	movcs	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_d2iz>:
 8000600:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000604:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000608:	d215      	bcs.n	8000636 <__aeabi_d2iz+0x36>
 800060a:	d511      	bpl.n	8000630 <__aeabi_d2iz+0x30>
 800060c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000610:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000614:	d912      	bls.n	800063c <__aeabi_d2iz+0x3c>
 8000616:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800061a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800061e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000626:	fa23 f002 	lsr.w	r0, r3, r2
 800062a:	bf18      	it	ne
 800062c:	4240      	negne	r0, r0
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d105      	bne.n	8000648 <__aeabi_d2iz+0x48>
 800063c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <__aeabi_frsub>:
 8000650:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000654:	e002      	b.n	800065c <__addsf3>
 8000656:	bf00      	nop

08000658 <__aeabi_fsub>:
 8000658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800065c <__addsf3>:
 800065c:	0042      	lsls	r2, r0, #1
 800065e:	bf1f      	itttt	ne
 8000660:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000664:	ea92 0f03 	teqne	r2, r3
 8000668:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800066c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000670:	d06a      	beq.n	8000748 <__addsf3+0xec>
 8000672:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000676:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800067a:	bfc1      	itttt	gt
 800067c:	18d2      	addgt	r2, r2, r3
 800067e:	4041      	eorgt	r1, r0
 8000680:	4048      	eorgt	r0, r1
 8000682:	4041      	eorgt	r1, r0
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
 8000688:	2b19      	cmp	r3, #25
 800068a:	bf88      	it	hi
 800068c:	4770      	bxhi	lr
 800068e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000692:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800069a:	bf18      	it	ne
 800069c:	4240      	negne	r0, r0
 800069e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4249      	negne	r1, r1
 80006ae:	ea92 0f03 	teq	r2, r3
 80006b2:	d03f      	beq.n	8000734 <__addsf3+0xd8>
 80006b4:	f1a2 0201 	sub.w	r2, r2, #1
 80006b8:	fa41 fc03 	asr.w	ip, r1, r3
 80006bc:	eb10 000c 	adds.w	r0, r0, ip
 80006c0:	f1c3 0320 	rsb	r3, r3, #32
 80006c4:	fa01 f103 	lsl.w	r1, r1, r3
 80006c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	d502      	bpl.n	80006d4 <__addsf3+0x78>
 80006ce:	4249      	negs	r1, r1
 80006d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006d8:	d313      	bcc.n	8000702 <__addsf3+0xa6>
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006de:	d306      	bcc.n	80006ee <__addsf3+0x92>
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006e6:	f102 0201 	add.w	r2, r2, #1
 80006ea:	2afe      	cmp	r2, #254	; 0xfe
 80006ec:	d251      	bcs.n	8000792 <__addsf3+0x136>
 80006ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f6:	bf08      	it	eq
 80006f8:	f020 0001 	biceq.w	r0, r0, #1
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	4770      	bx	lr
 8000702:	0049      	lsls	r1, r1, #1
 8000704:	eb40 0000 	adc.w	r0, r0, r0
 8000708:	3a01      	subs	r2, #1
 800070a:	bf28      	it	cs
 800070c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000710:	d2ed      	bcs.n	80006ee <__addsf3+0x92>
 8000712:	fab0 fc80 	clz	ip, r0
 8000716:	f1ac 0c08 	sub.w	ip, ip, #8
 800071a:	ebb2 020c 	subs.w	r2, r2, ip
 800071e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000722:	bfaa      	itet	ge
 8000724:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000728:	4252      	neglt	r2, r2
 800072a:	4318      	orrge	r0, r3
 800072c:	bfbc      	itt	lt
 800072e:	40d0      	lsrlt	r0, r2
 8000730:	4318      	orrlt	r0, r3
 8000732:	4770      	bx	lr
 8000734:	f092 0f00 	teq	r2, #0
 8000738:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800073c:	bf06      	itte	eq
 800073e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000742:	3201      	addeq	r2, #1
 8000744:	3b01      	subne	r3, #1
 8000746:	e7b5      	b.n	80006b4 <__addsf3+0x58>
 8000748:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800074c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000750:	bf18      	it	ne
 8000752:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000756:	d021      	beq.n	800079c <__addsf3+0x140>
 8000758:	ea92 0f03 	teq	r2, r3
 800075c:	d004      	beq.n	8000768 <__addsf3+0x10c>
 800075e:	f092 0f00 	teq	r2, #0
 8000762:	bf08      	it	eq
 8000764:	4608      	moveq	r0, r1
 8000766:	4770      	bx	lr
 8000768:	ea90 0f01 	teq	r0, r1
 800076c:	bf1c      	itt	ne
 800076e:	2000      	movne	r0, #0
 8000770:	4770      	bxne	lr
 8000772:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000776:	d104      	bne.n	8000782 <__addsf3+0x126>
 8000778:	0040      	lsls	r0, r0, #1
 800077a:	bf28      	it	cs
 800077c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000780:	4770      	bx	lr
 8000782:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000786:	bf3c      	itt	cc
 8000788:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800078c:	4770      	bxcc	lr
 800078e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000792:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000796:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800079a:	4770      	bx	lr
 800079c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007a0:	bf16      	itet	ne
 80007a2:	4608      	movne	r0, r1
 80007a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a8:	4601      	movne	r1, r0
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	bf06      	itte	eq
 80007ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007b2:	ea90 0f01 	teqeq	r0, r1
 80007b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ba:	4770      	bx	lr

080007bc <__aeabi_ui2f>:
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e004      	b.n	80007cc <__aeabi_i2f+0x8>
 80007c2:	bf00      	nop

080007c4 <__aeabi_i2f>:
 80007c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	ea5f 0c00 	movs.w	ip, r0
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007d8:	4601      	mov	r1, r0
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	e01c      	b.n	800081a <__aeabi_l2f+0x2a>

080007e0 <__aeabi_ul2f>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	e00a      	b.n	8000804 <__aeabi_l2f+0x14>
 80007ee:	bf00      	nop

080007f0 <__aeabi_l2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007fc:	d502      	bpl.n	8000804 <__aeabi_l2f+0x14>
 80007fe:	4240      	negs	r0, r0
 8000800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000804:	ea5f 0c01 	movs.w	ip, r1
 8000808:	bf02      	ittt	eq
 800080a:	4684      	moveq	ip, r0
 800080c:	4601      	moveq	r1, r0
 800080e:	2000      	moveq	r0, #0
 8000810:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000814:	bf08      	it	eq
 8000816:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800081a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800081e:	fabc f28c 	clz	r2, ip
 8000822:	3a08      	subs	r2, #8
 8000824:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000828:	db10      	blt.n	800084c <__aeabi_l2f+0x5c>
 800082a:	fa01 fc02 	lsl.w	ip, r1, r2
 800082e:	4463      	add	r3, ip
 8000830:	fa00 fc02 	lsl.w	ip, r0, r2
 8000834:	f1c2 0220 	rsb	r2, r2, #32
 8000838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800083c:	fa20 f202 	lsr.w	r2, r0, r2
 8000840:	eb43 0002 	adc.w	r0, r3, r2
 8000844:	bf08      	it	eq
 8000846:	f020 0001 	biceq.w	r0, r0, #1
 800084a:	4770      	bx	lr
 800084c:	f102 0220 	add.w	r2, r2, #32
 8000850:	fa01 fc02 	lsl.w	ip, r1, r2
 8000854:	f1c2 0220 	rsb	r2, r2, #32
 8000858:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800085c:	fa21 f202 	lsr.w	r2, r1, r2
 8000860:	eb43 0002 	adc.w	r0, r3, r2
 8000864:	bf08      	it	eq
 8000866:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800086a:	4770      	bx	lr

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b974 	b.w	8000b6c <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9e08      	ldr	r6, [sp, #32]
 80008a2:	460d      	mov	r5, r1
 80008a4:	4604      	mov	r4, r0
 80008a6:	4688      	mov	r8, r1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d14d      	bne.n	8000948 <__udivmoddi4+0xac>
 80008ac:	428a      	cmp	r2, r1
 80008ae:	4694      	mov	ip, r2
 80008b0:	d968      	bls.n	8000984 <__udivmoddi4+0xe8>
 80008b2:	fab2 f282 	clz	r2, r2
 80008b6:	b152      	cbz	r2, 80008ce <__udivmoddi4+0x32>
 80008b8:	fa01 f302 	lsl.w	r3, r1, r2
 80008bc:	f1c2 0120 	rsb	r1, r2, #32
 80008c0:	fa20 f101 	lsr.w	r1, r0, r1
 80008c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c8:	ea41 0803 	orr.w	r8, r1, r3
 80008cc:	4094      	lsls	r4, r2
 80008ce:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80008d2:	0c21      	lsrs	r1, r4, #16
 80008d4:	fbb8 fef5 	udiv	lr, r8, r5
 80008d8:	fa1f f78c 	uxth.w	r7, ip
 80008dc:	fb05 831e 	mls	r3, r5, lr, r8
 80008e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008e4:	fb0e f107 	mul.w	r1, lr, r7
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d90b      	bls.n	8000904 <__udivmoddi4+0x68>
 80008ec:	eb1c 0303 	adds.w	r3, ip, r3
 80008f0:	f10e 30ff 	add.w	r0, lr, #4294967295
 80008f4:	f080 811e 	bcs.w	8000b34 <__udivmoddi4+0x298>
 80008f8:	4299      	cmp	r1, r3
 80008fa:	f240 811b 	bls.w	8000b34 <__udivmoddi4+0x298>
 80008fe:	f1ae 0e02 	sub.w	lr, lr, #2
 8000902:	4463      	add	r3, ip
 8000904:	1a5b      	subs	r3, r3, r1
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb3 f0f5 	udiv	r0, r3, r5
 800090c:	fb05 3310 	mls	r3, r5, r0, r3
 8000910:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000914:	fb00 f707 	mul.w	r7, r0, r7
 8000918:	42a7      	cmp	r7, r4
 800091a:	d90a      	bls.n	8000932 <__udivmoddi4+0x96>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 33ff 	add.w	r3, r0, #4294967295
 8000924:	f080 8108 	bcs.w	8000b38 <__udivmoddi4+0x29c>
 8000928:	42a7      	cmp	r7, r4
 800092a:	f240 8105 	bls.w	8000b38 <__udivmoddi4+0x29c>
 800092e:	4464      	add	r4, ip
 8000930:	3802      	subs	r0, #2
 8000932:	1be4      	subs	r4, r4, r7
 8000934:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000938:	2100      	movs	r1, #0
 800093a:	b11e      	cbz	r6, 8000944 <__udivmoddi4+0xa8>
 800093c:	40d4      	lsrs	r4, r2
 800093e:	2300      	movs	r3, #0
 8000940:	e9c6 4300 	strd	r4, r3, [r6]
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	428b      	cmp	r3, r1
 800094a:	d908      	bls.n	800095e <__udivmoddi4+0xc2>
 800094c:	2e00      	cmp	r6, #0
 800094e:	f000 80ee 	beq.w	8000b2e <__udivmoddi4+0x292>
 8000952:	2100      	movs	r1, #0
 8000954:	e9c6 0500 	strd	r0, r5, [r6]
 8000958:	4608      	mov	r0, r1
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f183 	clz	r1, r3
 8000962:	2900      	cmp	r1, #0
 8000964:	d14a      	bne.n	80009fc <__udivmoddi4+0x160>
 8000966:	42ab      	cmp	r3, r5
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd4>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80f9 	bhi.w	8000b62 <__udivmoddi4+0x2c6>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb65 0303 	sbc.w	r3, r5, r3
 8000976:	2001      	movs	r0, #1
 8000978:	4698      	mov	r8, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d0e2      	beq.n	8000944 <__udivmoddi4+0xa8>
 800097e:	e9c6 4800 	strd	r4, r8, [r6]
 8000982:	e7df      	b.n	8000944 <__udivmoddi4+0xa8>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xec>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8091 	bne.w	8000ab4 <__udivmoddi4+0x218>
 8000992:	eba1 050c 	sub.w	r5, r1, ip
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb5 f3f7 	udiv	r3, r5, r7
 80009a4:	fb07 5013 	mls	r0, r7, r3, r5
 80009a8:	0c25      	lsrs	r5, r4, #16
 80009aa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80009ae:	fb0e f003 	mul.w	r0, lr, r3
 80009b2:	42a8      	cmp	r0, r5
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x12c>
 80009b6:	eb1c 0505 	adds.w	r5, ip, r5
 80009ba:	f103 38ff 	add.w	r8, r3, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x12a>
 80009c0:	42a8      	cmp	r0, r5
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2c0>
 80009c6:	4643      	mov	r3, r8
 80009c8:	1a2d      	subs	r5, r5, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb5 f0f7 	udiv	r0, r5, r7
 80009d0:	fb07 5510 	mls	r5, r7, r0, r5
 80009d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x156>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x154>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2ca>
 80009f0:	4628      	mov	r0, r5
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009fa:	e79e      	b.n	800093a <__udivmoddi4+0x9e>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a0e:	fa05 f301 	lsl.w	r3, r5, r1
 8000a12:	431c      	orrs	r4, r3
 8000a14:	40fd      	lsrs	r5, r7
 8000a16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a1a:	fa00 f301 	lsl.w	r3, r0, r1
 8000a1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a22:	0c20      	lsrs	r0, r4, #16
 8000a24:	fa1f fe8c 	uxth.w	lr, ip
 8000a28:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000a30:	fb08 f00e 	mul.w	r0, r8, lr
 8000a34:	42a8      	cmp	r0, r5
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b8>
 8000a3c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2bc>
 8000a48:	42a8      	cmp	r0, r5
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2bc>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4465      	add	r5, ip
 8000a54:	1a2d      	subs	r5, r5, r0
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb5 f0f9 	udiv	r0, r5, r9
 8000a5c:	fb09 5510 	mls	r5, r9, r0, r5
 8000a60:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	45ae      	cmp	lr, r5
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1e2>
 8000a6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2b4>
 8000a76:	45ae      	cmp	lr, r5
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2b4>
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	4465      	add	r5, ip
 8000a7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a82:	fba0 9402 	umull	r9, r4, r0, r2
 8000a86:	eba5 050e 	sub.w	r5, r5, lr
 8000a8a:	42a5      	cmp	r5, r4
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46a6      	mov	lr, r4
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x2a4>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x2a0>
 8000a94:	b15e      	cbz	r6, 8000aae <__udivmoddi4+0x212>
 8000a96:	ebb3 0208 	subs.w	r2, r3, r8
 8000a9a:	eb65 050e 	sbc.w	r5, r5, lr
 8000a9e:	fa05 f707 	lsl.w	r7, r5, r7
 8000aa2:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa6:	40cd      	lsrs	r5, r1
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	e9c6 7500 	strd	r7, r5, [r6]
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c2 0320 	rsb	r3, r2, #32
 8000ab8:	fa20 f103 	lsr.w	r1, r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	fa25 f303 	lsr.w	r3, r5, r3
 8000ac4:	4095      	lsls	r5, r2
 8000ac6:	430d      	orrs	r5, r1
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ad4:	fb07 3011 	mls	r0, r7, r1, r3
 8000ad8:	0c2b      	lsrs	r3, r5, #16
 8000ada:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ade:	fb01 f00e 	mul.w	r0, r1, lr
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x260>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f101 38ff 	add.w	r8, r1, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b8>
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b8>
 8000af8:	3902      	subs	r1, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1a1b      	subs	r3, r3, r0
 8000afe:	b2ad      	uxth	r5, r5
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3310 	mls	r3, r7, r0, r3
 8000b08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b0c:	fb00 f30e 	mul.w	r3, r0, lr
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x28a>
 8000b14:	eb1c 0505 	adds.w	r5, ip, r5
 8000b18:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2b0>
 8000b1e:	42ab      	cmp	r3, r5
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2b0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4465      	add	r5, ip
 8000b26:	1aed      	subs	r5, r5, r3
 8000b28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0x104>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e707      	b.n	8000944 <__udivmoddi4+0xa8>
 8000b34:	4686      	mov	lr, r0
 8000b36:	e6e5      	b.n	8000904 <__udivmoddi4+0x68>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fa      	b.n	8000932 <__udivmoddi4+0x96>
 8000b3c:	454b      	cmp	r3, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f8>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f8>
 8000b4c:	4640      	mov	r0, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x28a>
 8000b50:	4620      	mov	r0, r4
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1e2>
 8000b54:	4641      	mov	r1, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x260>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b8>
 8000b5c:	3b02      	subs	r3, #2
 8000b5e:	4465      	add	r5, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x12c>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e709      	b.n	800097a <__udivmoddi4+0xde>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x156>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <gpio_write>:
    };
    HAL_GPIO_Init(base, &conf);
    return STATUS_OK;
}

Status gpio_write(uint8_t pin, GpioValue value) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_pin = GPIO_PIN_TO_NUM[pin];
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <gpio_write+0x64>)
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_TypeDef *base = GPIO_PIN_TO_BASE[pin];
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <gpio_write+0x68>)
 8000b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitTypeDef conf = {
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pin = gpio_pin,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(base, &conf);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6a38      	ldr	r0, [r7, #32]
 8000bb8:	f001 f8ba 	bl	8001d30 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(base, gpio_pin, value);
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	79ba      	ldrb	r2, [r7, #6]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6a38      	ldr	r0, [r7, #32]
 8000bc6:	f001 fa13 	bl	8001ff0 <HAL_GPIO_WritePin>
    return STATUS_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000c0 	.word	0x200000c0
 8000bd8:	20000000 	.word	0x20000000

08000bdc <hab_program>:
#include <lib/sensors/lsm6dsox/lsm6dsox.h>
#include <lib/sensors/ms5637/ms5637.h>
#include "main.h"

void hab_program()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	gpio_write(PIN_PB4, GPIO_HIGH);
 8000be0:	2101      	movs	r1, #1
 8000be2:	2014      	movs	r0, #20
 8000be4:	f7ff ffc4 	bl	8000b70 <gpio_write>
	DELAY(500);
 8000be8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bec:	f000 f845 	bl	8000c7a <DELAY>
	gpio_write(PIN_PB4, GPIO_LOW);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2014      	movs	r0, #20
 8000bf4:	f7ff ffbc 	bl	8000b70 <gpio_write>
	DELAY(500);
 8000bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfc:	f000 f83d 	bl	8000c7a <DELAY>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <MICROS>:

    HAL_TIM_Base_Start(&tim2_handle);
    HAL_TIM_Base_Start(&tim1_handle);
};

uint64_t MICROS() {
 8000c04:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
    uint64_t tim1_count = __HAL_TIM_GET_COUNTER(&tim1_handle);
 8000c0c:	4e11      	ldr	r6, [pc, #68]	; (8000c54 <MICROS+0x50>)
 8000c0e:	6836      	ldr	r6, [r6, #0]
 8000c10:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000c12:	f04f 0c00 	mov.w	ip, #0
 8000c16:	46b0      	mov	r8, r6
 8000c18:	46e1      	mov	r9, ip
 8000c1a:	e9c7 8902 	strd	r8, r9, [r7, #8]
    uint64_t tim2_count = __HAL_TIM_GET_COUNTER(&tim2_handle);
 8000c1e:	4e0e      	ldr	r6, [pc, #56]	; (8000c58 <MICROS+0x54>)
 8000c20:	6836      	ldr	r6, [r6, #0]
 8000c22:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000c24:	f04f 0c00 	mov.w	ip, #0
 8000c28:	4630      	mov	r0, r6
 8000c2a:	4661      	mov	r1, ip
 8000c2c:	e9c7 0100 	strd	r0, r1, [r7]
    return (tim2_count << 16) + tim1_count;
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	0c0b      	lsrs	r3, r1, #16
 8000c34:	6839      	ldr	r1, [r7, #0]
 8000c36:	040a      	lsls	r2, r1, #16
 8000c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c3c:	1814      	adds	r4, r2, r0
 8000c3e:	eb43 0501 	adc.w	r5, r3, r1
 8000c42:	4622      	mov	r2, r4
 8000c44:	462b      	mov	r3, r5
}
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000c52:	4770      	bx	lr
 8000c54:	20000288 	.word	0x20000288
 8000c58:	200002d4 	.word	0x200002d4

08000c5c <MILLIS>:

uint64_t MILLIS() { 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    return MICROS() / 1000;
 8000c60:	f7ff ffd0 	bl	8000c04 <MICROS>
 8000c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	f7ff fdfe 	bl	800086c <__aeabi_uldivmod>
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
}
 8000c74:	4610      	mov	r0, r2
 8000c76:	4619      	mov	r1, r3
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <DELAY>:

void DELAY(uint16_t mS) {
 8000c7a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
    uint64_t start = MILLIS();
 8000c86:	f7ff ffe9 	bl	8000c5c <MILLIS>
 8000c8a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    while(MILLIS() - start < mS);
 8000c8e:	bf00      	nop
 8000c90:	f7ff ffe4 	bl	8000c5c <MILLIS>
 8000c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0503 	sbc.w	r5, r1, r3
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4698      	mov	r8, r3
 8000ca4:	4691      	mov	r9, r2
 8000ca6:	4544      	cmp	r4, r8
 8000ca8:	eb75 0309 	sbcs.w	r3, r5, r9
 8000cac:	d3f0      	bcc.n	8000c90 <DELAY+0x16>
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000cba <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f000 fd97 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 f815 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf6:	f000 fa1f 	bl	8001138 <MX_GPIO_Init>
  MX_DAC_Init();
 8000cfa:	f000 f877 	bl	8000dec <MX_DAC_Init>
  MX_I2C1_Init();
 8000cfe:	f000 f8a7 	bl	8000e50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d02:	f000 f8e5 	bl	8000ed0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000d06:	f000 f923 	bl	8000f50 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d0a:	f000 f971 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d0e:	f000 f9c3 	bl	8001098 <MX_TIM2_Init>
  MX_LoRaWAN_Init();
 8000d12:	f003 fdb7 	bl	8004884 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 2 */
  hab_program();
 8000d16:	f7ff ff61 	bl	8000bdc <hab_program>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8000d1a:	f003 fdbb 	bl	8004894 <MX_LoRaWAN_Process>
 8000d1e:	e7fc      	b.n	8000d1a <main+0x30>

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b09a      	sub	sp, #104	; 0x68
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	2248      	movs	r2, #72	; 0x48
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00e fc9e 	bl	800f670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <SystemClock_Config+0xc8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d4e:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <SystemClock_Config+0xc8>)
 8000d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <SystemClock_Config+0xc8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d82:	2310      	movs	r3, #16
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8000d86:	2306      	movs	r3, #6
 8000d88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d90:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d9a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fcf5 	bl	8002790 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dac:	f000 f9d1 	bl	8001152 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000db0:	234f      	movs	r3, #79	; 0x4f
 8000db2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2303      	movs	r3, #3
 8000db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 f860 	bl	8002e94 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000dda:	f000 f9ba 	bl	8001152 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3768      	adds	r7, #104	; 0x68
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	58000400 	.word	0x58000400

08000dec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2224      	movs	r2, #36	; 0x24
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00e fc39 	bl	800f670 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_DAC_Init+0x5c>)
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <MX_DAC_Init+0x60>)
 8000e02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_DAC_Init+0x5c>)
 8000e06:	f000 fe76 	bl	8001af6 <HAL_DAC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_DAC_Init+0x28>
  {
    Error_Handler();
 8000e10:	f000 f99f 	bl	8001152 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_DAC_Init+0x5c>)
 8000e30:	f000 fe83 	bl	8001b3a <HAL_DAC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_DAC_Init+0x52>
  {
    Error_Handler();
 8000e3a:	f000 f98a 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000320 	.word	0x20000320
 8000e4c:	40007400 	.word	0x40007400

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <MX_I2C1_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <MX_I2C1_Init+0x7c>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e8c:	f001 f8c7 	bl	800201e <HAL_I2C_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e96:	f000 f95c 	bl	8001152 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e9e:	f001 f94d 	bl	800213c <HAL_I2CEx_ConfigAnalogFilter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea8:	f000 f953 	bl	8001152 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000eb0:	f001 f98e 	bl	80021d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 f94a 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000334 	.word	0x20000334
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	00303d5b 	.word	0x00303d5b

08000ed0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_I2C2_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <MX_I2C2_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f0a:	480e      	ldr	r0, [pc, #56]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000f0c:	f001 f887 	bl	800201e <HAL_I2C_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f16:	f000 f91c 	bl	8001152 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000f1e:	f001 f90d 	bl	800213c <HAL_I2CEx_ConfigAnalogFilter>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f000 f913 	bl	8001152 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_I2C2_Init+0x74>)
 8000f30:	f001 f94e 	bl	80021d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 f90a 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000388 	.word	0x20000388
 8000f48:	40005800 	.word	0x40005800
 8000f4c:	00303d5b 	.word	0x00303d5b

08000f50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <MX_SPI1_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000fb0:	f002 fc08 	bl	80037c4 <HAL_SPI_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 f8ca 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200003dc 	.word	0x200003dc
 8000fc8:	40013000 	.word	0x40013000

08000fcc <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SUBGHZ_Init+0x20>)
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_SUBGHZ_Init+0x20>)
 8000fd8:	f002 fd62 	bl	8003aa0 <HAL_SUBGHZ_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000fe2:	f000 f8b6 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000440 	.word	0x20000440

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001010:	4a20      	ldr	r2, [pc, #128]	; (8001094 <MX_TIM1_Init+0xa4>)
 8001012:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM1_Init+0xa0>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_TIM1_Init+0xa0>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103a:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_TIM1_Init+0xa0>)
 800103c:	f003 f8d2 	bl	80041e4 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001046:	f000 f884 	bl	8001152 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001058:	f003 f91b 	bl	8004292 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001062:	f000 f876 	bl	8001152 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001078:	f003 fba6 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001082:	f000 f866 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000044c 	.word	0x2000044c
 8001094:	40012c00 	.word	0x40012c00

08001098 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_TIM2_Init+0x9c>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_TIM2_Init+0x9c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_TIM2_Init+0x9c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_TIM2_Init+0x9c>)
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_TIM2_Init+0x9c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_TIM2_Init+0x9c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e0:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_TIM2_Init+0x9c>)
 80010e2:	f003 f87f 	bl	80041e4 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80010ec:	f000 f831 	bl	8001152 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80010f0:	2307      	movs	r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_TIM2_Init+0x9c>)
 8001100:	f003 f990 	bl	8004424 <HAL_TIM_SlaveConfigSynchro>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800110a:	f000 f822 	bl	8001152 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_TIM2_Init+0x9c>)
 800111c:	f003 fb54 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001126:	f000 f814 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000498 	.word	0x20000498

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	2002      	movs	r0, #2
 800113e:	f7ff fdbc 	bl	8000cba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff fdb9 	bl	8000cba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	2004      	movs	r0, #4
 800114a:	f7ff fdb6 	bl	8000cba <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}

08001152 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001156:	b672      	cpsid	i
}
 8001158:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115a:	e7fe      	b.n	800115a <Error_Handler+0x8>

0800115c <LL_AHB2_GRP1_EnableClock>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800116a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800119a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e0:	68fb      	ldr	r3, [r7, #12]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_DAC_MspInit+0x54>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d114      	bne.n	8001274 <HAL_DAC_MspInit+0x4c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800124a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800124e:	f7ff ff9d 	bl	800118c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff ff82 	bl	800115c <LL_AHB2_GRP1_EnableClock>
    /**DAC GPIO Configuration
    PA10     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f000 fd5e 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40007400 	.word	0x40007400

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2238      	movs	r2, #56	; 0x38
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00e f9e5 	bl	800f670 <memset>
  if(hi2c->Instance==I2C1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a2c      	ldr	r2, [pc, #176]	; (800135c <HAL_I2C_MspInit+0xdc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d125      	bne.n	80012fc <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_I2C_MspInit+0xe0>)
 80012b6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 f967 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012c8:	f7ff ff43 	bl	8001152 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff ff45 	bl	800115c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d2:	23c0      	movs	r3, #192	; 0xc0
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d6:	2312      	movs	r3, #18
 80012d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e2:	2304      	movs	r3, #4
 80012e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ea:	4619      	mov	r1, r3
 80012ec:	481d      	ldr	r0, [pc, #116]	; (8001364 <HAL_I2C_MspInit+0xe4>)
 80012ee:	f000 fd1f 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012f6:	f7ff ff49 	bl	800118c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012fa:	e02b      	b.n	8001354 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_I2C_MspInit+0xe8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d126      	bne.n	8001354 <HAL_I2C_MspInit+0xd4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_I2C_MspInit+0xec>)
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4618      	mov	r0, r3
 8001314:	f002 f93c 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_MspInit+0xa2>
      Error_Handler();
 800131e:	f7ff ff18 	bl	8001152 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ff1a 	bl	800115c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001328:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132e:	2312      	movs	r3, #18
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800133a:	2304      	movs	r3, #4
 800133c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f000 fcf2 	bl	8001d30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800134c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001350:	f7ff ff1c 	bl	800118c <LL_APB1_GRP1_EnableClock>
}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	00030200 	.word	0x00030200
 8001364:	48000400 	.word	0x48000400
 8001368:	40005800 	.word	0x40005800
 800136c:	000c0800 	.word	0x000c0800

08001370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_SPI_MspInit+0x58>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d116      	bne.n	80013c0 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001392:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001396:	f7ff ff11 	bl	80011bc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff fede 	bl	800115c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013a0:	2338      	movs	r3, #56	; 0x38
 80013a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013b0:	2305      	movs	r3, #5
 80013b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	4619      	mov	r1, r3
 80013ba:	4804      	ldr	r0, [pc, #16]	; (80013cc <HAL_SPI_MspInit+0x5c>)
 80013bc:	f000 fcb8 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013000 	.word	0x40013000
 80013cc:	48000400 	.word	0x48000400

080013d0 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff ff07 	bl	80011ec <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_TIM_Base_MspInit+0x34>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d104      	bne.n	8001404 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013fe:	f7ff fedd 	bl	80011bc <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001402:	e007      	b.n	8001414 <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d102      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff febc 	bl	800118c <LL_APB1_GRP1_EnableClock>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40012c00 	.word	0x40012c00

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 fa35 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <LL_FLASH_GetUDN+0x10>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	1fff7580 	.word	0x1fff7580

08001484 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <LL_FLASH_GetDeviceID+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	1fff7584 	.word	0x1fff7584

0800149c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <LL_FLASH_GetSTCompanyID+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0a1b      	lsrs	r3, r3, #8
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	1fff7584 	.word	0x1fff7584

080014b4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80014ca:	79fb      	ldrb	r3, [r7, #7]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80014fa:	f7ff ffb9 	bl	8001470 <LL_FLASH_GetUDN>
 80014fe:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001506:	d138      	bne.n	800157a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001508:	f000 f9f6 	bl	80018f8 <HAL_GetUIDw0>
 800150c:	4604      	mov	r4, r0
 800150e:	f000 fa07 	bl	8001920 <HAL_GetUIDw2>
 8001512:	4603      	mov	r3, r0
 8001514:	4423      	add	r3, r4
 8001516:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001518:	f000 f9f8 	bl	800190c <HAL_GetUIDw1>
 800151c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	0e1a      	lsrs	r2, r3, #24
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3307      	adds	r3, #7
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	0c1a      	lsrs	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3306      	adds	r3, #6
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	0a1a      	lsrs	r2, r3, #8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3305      	adds	r3, #5
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	0e1a      	lsrs	r2, r3, #24
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3303      	adds	r3, #3
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	0c1a      	lsrs	r2, r3, #16
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3302      	adds	r3, #2
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	0a1a      	lsrs	r2, r3, #8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3301      	adds	r3, #1
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001578:	e031      	b.n	80015de <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3307      	adds	r3, #7
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	0a1a      	lsrs	r2, r3, #8
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3306      	adds	r3, #6
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	0c1a      	lsrs	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3305      	adds	r3, #5
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	0e1a      	lsrs	r2, r3, #24
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3304      	adds	r3, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80015a8:	f7ff ff6c 	bl	8001484 <LL_FLASH_GetDeviceID>
 80015ac:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3303      	adds	r3, #3
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80015b8:	f7ff ff70 	bl	800149c <LL_FLASH_GetSTCompanyID>
 80015bc:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3302      	adds	r3, #2
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	0a1a      	lsrs	r2, r3, #8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	0c1b      	lsrs	r3, r3, #16
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}

080015e6 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80015e6:	b590      	push	{r4, r7, lr}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80015ee:	f7ff ff3f 	bl	8001470 <LL_FLASH_GetUDN>
 80015f2:	4602      	mov	r2, r0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d10d      	bne.n	800161e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001602:	f000 f979 	bl	80018f8 <HAL_GetUIDw0>
 8001606:	4604      	mov	r4, r0
 8001608:	f000 f980 	bl	800190c <HAL_GetUIDw1>
 800160c:	4603      	mov	r3, r0
 800160e:	405c      	eors	r4, r3
 8001610:	f000 f986 	bl	8001920 <HAL_GetUIDw2>
 8001614:	4603      	mov	r3, r0
 8001616:	ea84 0203 	eor.w	r2, r4, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
	...

08001628 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_GetTick+0x24>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800163a:	f000 f85c 	bl	80016f6 <TIMER_IF_GetTimerValue>
 800163e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200004e4 	.word	0x200004e4

08001650 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f879 	bl	8001752 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 800167e:	79fb      	ldrb	r3, [r7, #7]
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <TIMER_IF_SetTimerContext+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	200004e8 	.word	0x200004e8

080016cc <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <TIMER_IF_GetTimerContext+0x10>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	200004e8 	.word	0x200004e8

080016e0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  return seconds;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return ret;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return ret;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d0:	f7ff ff4a 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	; (800180c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <LoopForever+0xe>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	; (8001818 <LoopForever+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017fa:	f00d ff15 	bl	800f628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017fe:	f7ff fa74 	bl	8000cea <main>

08001802 <LoopForever>:

LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
  ldr   r0, =_estack
 8001804:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8001810:	0800fd44 	.word	0x0800fd44
  ldr r2, =_sbss
 8001814:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8001818:	200015cc 	.word	0x200015cc

0800181c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182a:	2003      	movs	r0, #3
 800182c:	f000 f932 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001830:	f001 fcf4 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8001834:	4603      	mov	r3, r0
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_Init+0x3c>)
 8001838:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f810 	bl	8001860 <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e001      	b.n	8001850 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184c:	f7ff fce6 	bl	800121c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001850:	79fb      	ldrb	r3, [r7, #7]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000180 	.word	0x20000180

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_InitTick+0x6c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d024      	beq.n	80018be <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001874:	f001 fcd2 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_InitTick+0x6c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001884:	fbb3 f3f1 	udiv	r3, r3, r1
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f926 	bl	8001ade <HAL_SYSTICK_Config>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	d809      	bhi.n	80018b2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189e:	2200      	movs	r2, #0
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
 80018a6:	f000 f900 	bl	8001aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_InitTick+0x70>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e007      	b.n	80018c2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e004      	b.n	80018c2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e001      	b.n	80018c2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000188 	.word	0x20000188
 80018d0:	20000184 	.word	0x20000184

080018d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_IncTick+0x1c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_IncTick+0x20>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <HAL_IncTick+0x20>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000188 	.word	0x20000188
 80018f4:	200004ec 	.word	0x200004ec

080018f8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <HAL_GetUIDw0+0x10>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	1fff7590 	.word	0x1fff7590

0800190c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetUIDw1+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	1fff7594 	.word	0x1fff7594

08001920 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001924:	4b02      	ldr	r3, [pc, #8]	; (8001930 <HAL_GetUIDw2+0x10>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	1fff7598 	.word	0x1fff7598

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff90 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff49 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff60 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff92 	bl	80019ec <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff61 	bl	8001998 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb2 	bl	8001a50 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e014      	b.n	8001b32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fb85 	bl	8001228 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b088      	sub	sp, #32
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	77fb      	strb	r3, [r7, #31]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	795b      	ldrb	r3, [r3, #5]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_DAC_ConfigChannel+0x1c>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0e8      	b.n	8001d28 <HAL_DAC_ConfigChannel+0x1ee>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d155      	bne.n	8001c16 <HAL_DAC_ConfigChannel+0xdc>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b6a:	f7ff fd5d 	bl	8001628 <HAL_GetTick>
 8001b6e:	61b8      	str	r0, [r7, #24]

    /* SHSR1 can be written when BWST1 is cleared */
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b70:	e018      	b.n	8001ba4 <HAL_DAC_ConfigChannel+0x6a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b72:	f7ff fd59 	bl	8001628 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d911      	bls.n	8001ba4 <HAL_DAC_ConfigChannel+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_DAC_ConfigChannel+0x6a>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f043 0208 	orr.w	r2, r3, #8
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0c1      	b.n	8001d28 <HAL_DAC_ConfigChannel+0x1ee>
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1df      	bne.n	8001b72 <HAL_DAC_ConfigChannel+0x38>
        }
      }
    }
    hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	6992      	ldr	r2, [r2, #24]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	ea02 0103 	and.w	r1, r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	21ff      	movs	r1, #255	; 0xff
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	ea02 0103 	and.w	r1, r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d11d      	bne.n	8001c5a <HAL_DAC_ConfigChannel+0x120>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	221f      	movs	r2, #31
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4013      	ands	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c60:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2207      	movs	r2, #7
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4013      	ands	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	22c0      	movs	r2, #192	; 0xc0
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43da      	mvns	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	400a      	ands	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e140      	b.n	8001fc2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8132 	beq.w	8001fbc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d005      	beq.n	8001d70 <HAL_GPIO_Init+0x40>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d130      	bne.n	8001dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da6:	2201      	movs	r2, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d017      	beq.n	8001e0e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d123      	bne.n	8001e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	6939      	ldr	r1, [r7, #16]
 8001e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0203 	and.w	r2, r3, #3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 808c 	beq.w	8001fbc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	2207      	movs	r2, #7
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ece:	d00d      	beq.n	8001eec <HAL_GPIO_Init+0x1bc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a44      	ldr	r2, [pc, #272]	; (8001fe4 <HAL_GPIO_Init+0x2b4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <HAL_GPIO_Init+0x1b8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a43      	ldr	r2, [pc, #268]	; (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_GPIO_Init+0x1b4>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e004      	b.n	8001eee <HAL_GPIO_Init+0x1be>
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0x1be>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_GPIO_Init+0x1be>
 8001eec:	2300      	movs	r3, #0
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	f002 0203 	and.w	r2, r2, #3
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	4093      	lsls	r3, r2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001efe:	4938      	ldr	r1, [pc, #224]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f5a:	4a24      	ldr	r2, [pc, #144]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f66:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f94:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f aeb7 	bne.w	8001d40 <HAL_GPIO_Init+0x10>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	58000800 	.word	0x58000800

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e081      	b.n	8002134 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff f91b 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2224      	movs	r2, #36	; 0x24
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800206e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	e006      	b.n	80020a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d104      	bne.n	80020b8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69d9      	ldr	r1, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b20      	cmp	r3, #32
 8002150:	d138      	bne.n	80021c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800215c:	2302      	movs	r3, #2
 800215e:	e032      	b.n	80021c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800218e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d139      	bne.n	800225a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e033      	b.n	800225c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2224      	movs	r2, #36	; 0x24
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002222:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800225a:	2302      	movs	r3, #2
  }
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <HAL_PWR_EnableBkUpAccess+0x18>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	58000400 	.word	0x58000400

08002284 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_PWREx_GetVoltageRange+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	58000400 	.word	0x58000400

0800229c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ac:	d101      	bne.n	80022b2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	58000400 	.word	0x58000400

080022c0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800230a:	d101      	bne.n	8002310 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002364:	d101      	bne.n	800236a <LL_RCC_HSE_IsReady+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_RCC_HSE_IsReady+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800239e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d101      	bne.n	80023c4 <LL_RCC_HSI_IsReady+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_RCC_HSI_IsReady+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	061b      	lsls	r3, r3, #24
 80023e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d101      	bne.n	800240e <LL_RCC_LSE_IsReady+0x18>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <LL_RCC_LSE_IsReady+0x1a>
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d101      	bne.n	8002470 <LL_RCC_LSI_IsReady+0x18>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <LL_RCC_LSI_IsReady+0x1a>
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6013      	str	r3, [r2, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d101      	bne.n	80024c8 <LL_RCC_MSI_IsReady+0x16>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <LL_RCC_MSI_IsReady+0x18>
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d101      	bne.n	80024e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002514:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025ba:	f023 020f 	bic.w	r2, r3, #15
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800260e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002640:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002664:	6013      	str	r3, [r2, #0]
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269c:	d101      	bne.n	80026a2 <LL_RCC_PLL_IsReady+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_RCC_PLL_IsReady+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d101      	bne.n	800271e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d101      	bne.n	8002742 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800275e:	d101      	bne.n	8002764 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002780:	d101      	bne.n	8002786 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e36f      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a2:	f7ff fee4 	bl	800256e <LL_RCC_GetSysClkSource>
 80027a6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a8:	f7ff ffa2 	bl	80026f0 <LL_RCC_PLL_GetMainSource>
 80027ac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80c4 	beq.w	8002944 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x3e>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d176      	bne.n	80028b6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d173      	bne.n	80028b6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e353      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x68>
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f6:	e006      	b.n	8002806 <HAL_RCC_OscConfig+0x76>
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002806:	4293      	cmp	r3, r2
 8002808:	d222      	bcs.n	8002850 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd18 	bl	8003244 <RCC_SetFlashLatencyFromMSIRange>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e331      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fe69 	bl	8002520 <LL_RCC_MSI_SetCalibTrimming>
 800284e:	e021      	b.n	8002894 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fe50 	bl	8002520 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fcdd 	bl	8003244 <RCC_SetFlashLatencyFromMSIRange>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e2f6      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002894:	f000 fcc2 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8002898:	4603      	mov	r3, r0
 800289a:	4aa7      	ldr	r2, [pc, #668]	; (8002b38 <HAL_RCC_OscConfig+0x3a8>)
 800289c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800289e:	4ba7      	ldr	r3, [pc, #668]	; (8002b3c <HAL_RCC_OscConfig+0x3ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe ffdc 	bl	8001860 <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d047      	beq.n	8002942 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	e2e5      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028be:	f7ff fddc 	bl	800247a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c2:	f7fe feb1 	bl	8001628 <HAL_GetTick>
 80028c6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ca:	f7fe fead 	bl	8001628 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e2d2      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80028dc:	f7ff fde9 	bl	80024b2 <LL_RCC_MSI_IsReady>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f1      	beq.n	80028ca <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fe05 	bl	8002520 <LL_RCC_MSI_SetCalibTrimming>
 8002916:	e015      	b.n	8002944 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002918:	f7ff fdbd 	bl	8002496 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800291c:	f7fe fe84 	bl	8001628 <HAL_GetTick>
 8002920:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002924:	f7fe fe80 	bl	8001628 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e2a5      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002936:	f7ff fdbc 	bl	80024b2 <LL_RCC_MSI_IsReady>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f1      	bne.n	8002924 <HAL_RCC_OscConfig+0x194>
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002942:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d058      	beq.n	8002a02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b08      	cmp	r3, #8
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x1d2>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d108      	bne.n	800296e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d105      	bne.n	800296e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d14b      	bne.n	8002a02 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e289      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d102      	bne.n	8002994 <HAL_RCC_OscConfig+0x204>
 800298e:	f7ff fcc4 	bl	800231a <LL_RCC_HSE_Enable>
 8002992:	e00d      	b.n	80029b0 <HAL_RCC_OscConfig+0x220>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800299c:	d104      	bne.n	80029a8 <HAL_RCC_OscConfig+0x218>
 800299e:	f7ff fc8f 	bl	80022c0 <LL_RCC_HSE_EnableTcxo>
 80029a2:	f7ff fcba 	bl	800231a <LL_RCC_HSE_Enable>
 80029a6:	e003      	b.n	80029b0 <HAL_RCC_OscConfig+0x220>
 80029a8:	f7ff fcc5 	bl	8002336 <LL_RCC_HSE_Disable>
 80029ac:	f7ff fc96 	bl	80022dc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe fe36 	bl	8001628 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fe32 	bl	8001628 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e257      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80029d2:	f7ff fcbe 	bl	8002352 <LL_RCC_HSE_IsReady>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f1      	beq.n	80029c0 <HAL_RCC_OscConfig+0x230>
 80029dc:	e011      	b.n	8002a02 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe fe23 	bl	8001628 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e6:	f7fe fe1f 	bl	8001628 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e244      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80029f8:	f7ff fcab 	bl	8002352 <LL_RCC_HSE_IsReady>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f1      	bne.n	80029e6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d046      	beq.n	8002a9c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_OscConfig+0x290>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d10e      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d10b      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e22a      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fccc 	bl	80023ce <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a36:	e031      	b.n	8002a9c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d019      	beq.n	8002a74 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a40:	f7ff fc98 	bl	8002374 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fdf0 	bl	8001628 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fdec 	bl	8001628 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e211      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a5e:	f7ff fca5 	bl	80023ac <LL_RCC_HSI_IsReady>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f1      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fcae 	bl	80023ce <LL_RCC_HSI_SetCalibTrimming>
 8002a72:	e013      	b.n	8002a9c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a74:	f7ff fc8c 	bl	8002390 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fdd6 	bl	8001628 <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe fdd2 	bl	8001628 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1f7      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002a92:	f7ff fc8b 	bl	80023ac <LL_RCC_HSI_IsReady>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f1      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d06e      	beq.n	8002b86 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d056      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d031      	beq.n	8002b2c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e1d0      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d013      	beq.n	8002b12 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002aea:	f7ff fca5 	bl	8002438 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aee:	f7fe fd9b 	bl	8001628 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe fd97 	bl	8001628 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b11      	cmp	r3, #17
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1bc      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002b08:	f7ff fca6 	bl	8002458 <LL_RCC_LSI_IsReady>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f1      	bne.n	8002af6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	f023 0210 	bic.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2c:	f7ff fc74 	bl	8002418 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b30:	f7fe fd7a 	bl	8001628 <HAL_GetTick>
 8002b34:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002b36:	e00c      	b.n	8002b52 <HAL_RCC_OscConfig+0x3c2>
 8002b38:	20000180 	.word	0x20000180
 8002b3c:	20000184 	.word	0x20000184
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fd72 	bl	8001628 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b11      	cmp	r3, #17
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e197      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002b52:	f7ff fc81 	bl	8002458 <LL_RCC_LSI_IsReady>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f1      	beq.n	8002b40 <HAL_RCC_OscConfig+0x3b0>
 8002b5c:	e013      	b.n	8002b86 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	f7ff fc6b 	bl	8002438 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fe fd61 	bl	8001628 <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7fe fd5d 	bl	8001628 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b11      	cmp	r3, #17
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e182      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002b7c:	f7ff fc6c 	bl	8002458 <LL_RCC_LSI_IsReady>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f1      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80d8 	beq.w	8002d44 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b94:	f7ff fb82 	bl	800229c <LL_PWR_IsEnabledBkUpAccess>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d113      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b9e:	f7ff fb63 	bl	8002268 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fd41 	bl	8001628 <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe fd3d 	bl	8001628 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e162      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002bbc:	f7ff fb6e 	bl	800229c <LL_PWR_IsEnabledBkUpAccess>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f1      	beq.n	8002baa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d07b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b85      	cmp	r3, #133	; 0x85
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fd19 	bl	8001628 <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fd0b 	bl	8001628 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e12e      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c24:	f7ff fbe7 	bl	80023f6 <LL_RCC_LSE_IsReady>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ef      	beq.n	8002c0e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b81      	cmp	r3, #129	; 0x81
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b85      	cmp	r3, #133	; 0x85
 8002c3c:	d121      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fcf3 	bl	8001628 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fce5 	bl	8001628 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e108      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ec      	beq.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002c80:	e060      	b.n	8002d44 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe fcd1 	bl	8001628 <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe fcc3 	bl	8001628 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0e6      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ec      	bne.n	8002c9e <HAL_RCC_OscConfig+0x50e>
 8002cc4:	e03e      	b.n	8002d44 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fcaf 	bl	8001628 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe fca1 	bl	8001628 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0c4      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ec      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7fe fc8e 	bl	8001628 <HAL_GetTick>
 8002d0c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7fe fc80 	bl	8001628 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0a3      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d3a:	f7ff fb5c 	bl	80023f6 <LL_RCC_LSE_IsReady>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ef      	bne.n	8002d24 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8099 	beq.w	8002e80 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d06c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d14b      	bne.n	8002df4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	f7ff fc87 	bl	800266e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fc62 	bl	8001628 <HAL_GetTick>
 8002d64:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe fc5e 	bl	8001628 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b0a      	cmp	r3, #10
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e083      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d7a:	f7ff fc86 	bl	800268a <LL_RCC_PLL_IsReady>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f1      	bne.n	8002d68 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCC_OscConfig+0x6fc>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9c:	0212      	lsls	r2, r2, #8
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002da4:	4311      	orrs	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002db0:	430a      	orrs	r2, r1
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dba:	f7ff fc4a 	bl	8002652 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fc2b 	bl	8001628 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fc27 	bl	8001628 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b0a      	cmp	r3, #10
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e04c      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002de8:	f7ff fc4f 	bl	800268a <LL_RCC_PLL_IsReady>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f1      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x646>
 8002df2:	e045      	b.n	8002e80 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	f7ff fc3b 	bl	800266e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe fc16 	bl	8001628 <HAL_GetTick>
 8002dfc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fc12 	bl	8001628 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b0a      	cmp	r3, #10
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e037      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e12:	f7ff fc3a 	bl	800268a <LL_RCC_PLL_IsReady>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f1      	bne.n	8002e00 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_RCC_OscConfig+0x700>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
 8002e2c:	e028      	b.n	8002e80 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e023      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d115      	bne.n	8002e7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10e      	bne.n	8002e7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	11c1808c 	.word	0x11c1808c
 8002e90:	eefefffc 	.word	0xeefefffc

08002e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e10f      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d91b      	bls.n	8002eee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b86      	ldr	r3, [pc, #536]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	4984      	ldr	r1, [pc, #528]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fbaf 	bl	8001628 <HAL_GetTick>
 8002eca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ece:	f7fe fbab 	bl	8001628 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0f3      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee0:	4b7b      	ldr	r3, [pc, #492]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d1ef      	bne.n	8002ece <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fb40 	bl	8002584 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f04:	f7fe fb90 	bl	8001628 <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f0c:	f7fe fb8c 	bl	8001628 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0d4      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f1e:	f7ff fbf2 	bl	8002706 <LL_RCC_IsActiveFlag_HPRE>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f1      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fb36 	bl	80025aa <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f3e:	f7fe fb73 	bl	8001628 <HAL_GetTick>
 8002f42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f46:	f7fe fb6f 	bl	8001628 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0b7      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f58:	f7ff fbe6 	bl	8002728 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f1      	beq.n	8002f46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fb2f 	bl	80025d6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fb56 	bl	8001628 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f80:	f7fe fb52 	bl	8001628 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e09a      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f92:	f7ff fbdb 	bl	800274c <LL_RCC_IsActiveFlag_PPRE1>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f1      	beq.n	8002f80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fb24 	bl	80025fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fb38 	bl	8001628 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fbc:	f7fe fb34 	bl	8001628 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e07c      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fce:	f7ff fbce 	bl	800276e <LL_RCC_IsActiveFlag_PPRE2>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f1      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d043      	beq.n	800306c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002fec:	f7ff f9b1 	bl	8002352 <LL_RCC_HSE_IsReady>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11e      	bne.n	8003034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e066      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d106      	bne.n	8003010 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003002:	f7ff fb42 	bl	800268a <LL_RCC_PLL_IsReady>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d113      	bne.n	8003034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e05b      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003018:	f7ff fa4b 	bl	80024b2 <LL_RCC_MSI_IsReady>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e050      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003026:	f7ff f9c1 	bl	80023ac <LL_RCC_HSI_IsReady>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e049      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fa85 	bl	8002548 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303e:	f7fe faf3 	bl	8001628 <HAL_GetTick>
 8003042:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003044:	e00a      	b.n	800305c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fe faef 	bl	8001628 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e035      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305c:	f7ff fa87 	bl	800256e <LL_RCC_GetSysClkSource>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1ec      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d21b      	bcs.n	80030b2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 0207 	bic.w	r2, r3, #7
 8003082:	4913      	ldr	r1, [pc, #76]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308a:	f7fe facd 	bl	8001628 <HAL_GetTick>
 800308e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003092:	f7fe fac9 	bl	8001628 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e011      	b.n	80030c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x23c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030b2:	f000 f8b3 	bl	800321c <HAL_RCC_GetHCLKFreq>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <HAL_RCC_ClockConfig+0x240>)
 80030ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fbcd 	bl	8001860 <HAL_InitTick>
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	58004000 	.word	0x58004000
 80030d4:	20000180 	.word	0x20000180
 80030d8:	20000184 	.word	0x20000184

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ea:	f7ff fa40 	bl	800256e <LL_RCC_GetSysClkSource>
 80030ee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f0:	f7ff fafe 	bl	80026f0 <LL_RCC_PLL_GetMainSource>
 80030f4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x2c>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d139      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d136      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003108:	f7ff f9e3 	bl	80024d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d115      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x62>
 8003112:	f7ff f9de 	bl	80024d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003116:	4603      	mov	r3, r0
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x4e>
 800311c:	f7ff f9e9 	bl	80024f2 <LL_RCC_MSI_GetRange>
 8003120:	4603      	mov	r3, r0
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	e005      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x5a>
 800312a:	f7ff f9ed 	bl	8002508 <LL_RCC_MSI_GetRangeAfterStandby>
 800312e:	4603      	mov	r3, r0
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	4a36      	ldr	r2, [pc, #216]	; (8003210 <HAL_RCC_GetSysClockFreq+0x134>)
 8003138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313c:	e014      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x8c>
 800313e:	f7ff f9c8 	bl	80024d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x7a>
 8003148:	f7ff f9d3 	bl	80024f2 <LL_RCC_MSI_GetRange>
 800314c:	4603      	mov	r3, r0
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	e005      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x86>
 8003156:	f7ff f9d7 	bl	8002508 <LL_RCC_MSI_GetRangeAfterStandby>
 800315a:	4603      	mov	r3, r0
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <HAL_RCC_GetSysClockFreq+0x134>)
 8003164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003168:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003174:	e012      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d102      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800317c:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_RCC_GetSysClockFreq+0x138>)
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e00c      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003188:	f7ff f8b6 	bl	80022f8 <LL_RCC_HSE_IsEnabledDiv2>
 800318c:	4603      	mov	r3, r0
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_GetSysClockFreq+0x138>)
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e001      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <HAL_RCC_GetSysClockFreq+0x13c>)
 800319a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319c:	f7ff f9e7 	bl	800256e <LL_RCC_GetSysClkSource>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d12f      	bne.n	8003206 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80031a6:	f7ff faa3 	bl	80026f0 <LL_RCC_PLL_GetMainSource>
 80031aa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0xde>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d003      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xe4>
 80031b8:	e00d      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <HAL_RCC_GetSysClockFreq+0x138>)
 80031bc:	60fb      	str	r3, [r7, #12]
        break;
 80031be:	e00d      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80031c0:	f7ff f89a 	bl	80022f8 <LL_RCC_HSE_IsEnabledDiv2>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_GetSysClockFreq+0x138>)
 80031cc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCC_GetSysClockFreq+0x13c>)
 80031d2:	60fb      	str	r3, [r7, #12]
        break;
 80031d4:	e002      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	60fb      	str	r3, [r7, #12]
        break;
 80031da:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80031dc:	f7ff fa66 	bl	80026ac <LL_RCC_PLL_GetN>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	fb03 f402 	mul.w	r4, r3, r2
 80031e8:	f7ff fa77 	bl	80026da <LL_RCC_PLL_GetDivider>
 80031ec:	4603      	mov	r3, r0
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	3301      	adds	r3, #1
 80031f2:	fbb4 f4f3 	udiv	r4, r4, r3
 80031f6:	f7ff fa65 	bl	80026c4 <LL_RCC_PLL_GetR>
 80031fa:	4603      	mov	r3, r0
 80031fc:	0f5b      	lsrs	r3, r3, #29
 80031fe:	3301      	adds	r3, #1
 8003200:	fbb4 f3f3 	udiv	r3, r4, r3
 8003204:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003206:	697b      	ldr	r3, [r7, #20]
}
 8003208:	4618      	mov	r0, r3
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	0800f83c 	.word	0x0800f83c
 8003214:	00f42400 	.word	0x00f42400
 8003218:	01e84800 	.word	0x01e84800

0800321c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800321c:	b598      	push	{r3, r4, r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003220:	f7ff ff5c 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8003224:	4604      	mov	r4, r0
 8003226:	f7ff f9fc 	bl	8002622 <LL_RCC_GetAHBPrescaler>
 800322a:	4603      	mov	r3, r0
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	4a03      	ldr	r2, [pc, #12]	; (8003240 <HAL_RCC_GetHCLKFreq+0x24>)
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd98      	pop	{r3, r4, r7, pc}
 8003240:	0800f7fc 	.word	0x0800f7fc

08003244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	4a10      	ldr	r2, [pc, #64]	; (8003298 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800325c:	f7ff f9ec 	bl	8002638 <LL_RCC_GetAHB3Prescaler>
 8003260:	4603      	mov	r3, r0
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	4a0c      	ldr	r2, [pc, #48]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9c      	lsrs	r4, r3, #18
 8003280:	f7ff f800 	bl	8002284 <HAL_PWREx_GetVoltageRange>
 8003284:	4603      	mov	r3, r0
 8003286:	4619      	mov	r1, r3
 8003288:	4620      	mov	r0, r4
 800328a:	f000 f80b 	bl	80032a4 <RCC_SetFlashLatency>
 800328e:	4603      	mov	r3, r0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	0800f83c 	.word	0x0800f83c
 800329c:	0800f7fc 	.word	0x0800f7fc
 80032a0:	431bde83 	.word	0x431bde83

080032a4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08e      	sub	sp, #56	; 0x38
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80032ae:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <RCC_SetFlashLatency+0xf4>)
 80032b0:	f107 0320 	add.w	r3, r7, #32
 80032b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032b8:	6018      	str	r0, [r3, #0]
 80032ba:	3304      	adds	r3, #4
 80032bc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80032be:	4a37      	ldr	r2, [pc, #220]	; (800339c <RCC_SetFlashLatency+0xf8>)
 80032c0:	f107 0318 	add.w	r3, r7, #24
 80032c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032c8:	6018      	str	r0, [r3, #0]
 80032ca:	3304      	adds	r3, #4
 80032cc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80032ce:	4a34      	ldr	r2, [pc, #208]	; (80033a0 <RCC_SetFlashLatency+0xfc>)
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d11b      	bne.n	800331e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ea:	e014      	b.n	8003316 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	3338      	adds	r3, #56	; 0x38
 80032f2:	443b      	add	r3, r7
 80032f4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d807      	bhi.n	8003310 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	3338      	adds	r3, #56	; 0x38
 8003306:	443b      	add	r3, r7
 8003308:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800330e:	e021      	b.n	8003354 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	3301      	adds	r3, #1
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	2b02      	cmp	r3, #2
 800331a:	d9e7      	bls.n	80032ec <RCC_SetFlashLatency+0x48>
 800331c:	e01a      	b.n	8003354 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800331e:	2300      	movs	r3, #0
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003322:	e014      	b.n	800334e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	3338      	adds	r3, #56	; 0x38
 800332a:	443b      	add	r3, r7
 800332c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4293      	cmp	r3, r2
 8003336:	d807      	bhi.n	8003348 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	3338      	adds	r3, #56	; 0x38
 800333e:	443b      	add	r3, r7
 8003340:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003346:	e005      	b.n	8003354 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	3301      	adds	r3, #1
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	2b02      	cmp	r3, #2
 8003352:	d9e7      	bls.n	8003324 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <RCC_SetFlashLatency+0x100>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 0207 	bic.w	r2, r3, #7
 800335c:	4911      	ldr	r1, [pc, #68]	; (80033a4 <RCC_SetFlashLatency+0x100>)
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003364:	f7fe f960 	bl	8001628 <HAL_GetTick>
 8003368:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800336a:	e008      	b.n	800337e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800336c:	f7fe f95c 	bl	8001628 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e007      	b.n	800338e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <RCC_SetFlashLatency+0x100>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003388:	429a      	cmp	r2, r3
 800338a:	d1ef      	bne.n	800336c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3738      	adds	r7, #56	; 0x38
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	0800f798 	.word	0x0800f798
 800339c:	0800f7a0 	.word	0x0800f7a0
 80033a0:	0800f7a8 	.word	0x0800f7a8
 80033a4:	58004000 	.word	0x58004000

080033a8 <LL_RCC_LSE_IsReady>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d101      	bne.n	80033c0 <LL_RCC_LSE_IsReady+0x18>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <LL_RCC_LSE_IsReady+0x1a>
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <LL_RCC_SetUSARTClockSource>:
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	43db      	mvns	r3, r3
 80033e0:	401a      	ands	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <LL_RCC_SetI2SClockSource>:
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800340e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <LL_RCC_SetLPUARTClockSource>:
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <LL_RCC_SetI2CClockSource>:
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003466:	43db      	mvns	r3, r3
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <LL_RCC_SetLPTIMClockSource>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003492:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <LL_RCC_SetRNGClockSource>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80034cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <LL_RCC_SetADCClockSource>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <LL_RCC_SetRTCClockSource>:
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <LL_RCC_GetRTCClockSource>:
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <LL_RCC_ForceBackupDomainReset>:
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <LL_RCC_ReleaseBackupDomainReset>:
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800357e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
	...

08003590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800359c:	2300      	movs	r3, #0
 800359e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80035a0:	2300      	movs	r3, #0
 80035a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d058      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80035b0:	f7fe fe5a 	bl	8002268 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035b4:	f7fe f838 	bl	8001628 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80035ba:	e009      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035bc:	f7fe f834 	bl	8001628 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d902      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	74fb      	strb	r3, [r7, #19]
        break;
 80035ce:	e006      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80035d0:	4b7b      	ldr	r3, [pc, #492]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d1ee      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d13c      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80035e4:	f7ff ffa7 	bl	8003536 <LL_RCC_GetRTCClockSource>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d00f      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003600:	f7ff ffa5 	bl	800354e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003604:	f7ff ffb3 	bl	800356e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d014      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe f804 	bl	8001628 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003622:	e00b      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe f800 	bl	8001628 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d902      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	74fb      	strb	r3, [r7, #19]
            break;
 800363a:	e004      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800363c:	f7ff feb4 	bl	80033a8 <LL_RCC_LSE_IsReady>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d1ee      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff5b 	bl	800350c <LL_RCC_SetRTCClockSource>
 8003656:	e004      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	74bb      	strb	r3, [r7, #18]
 800365c:	e001      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fea9 	bl	80033ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fe9e 	bl	80033ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fec0 	bl	8003424 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fee6 	bl	8003486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fedb 	bl	8003486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fed0 	bl	8003486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fea9 	bl	800344e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fe9e 	bl	800344e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fe93 	bl	800344e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d011      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fe5e 	bl	80033fa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003746:	d107      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003756:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fea5 	bl	80034b8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d107      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003784:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d011      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fea3 	bl	80034e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a4:	d107      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80037b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	58000400 	.word	0x58000400

080037c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0c6      	b.n	8003964 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e6:	d009      	beq.n	80037fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
 80037ee:	e005      	b.n	80037fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fd fdad 	bl	8001370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003836:	d902      	bls.n	800383e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e002      	b.n	8003844 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800383e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003842:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800384c:	d007      	beq.n	800385e <HAL_SPI_Init+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003856:	d002      	beq.n	800385e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	ea42 0103 	orr.w	r1, r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	d11b      	bne.n	80038f6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038ce:	d903      	bls.n	80038d8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
 80038d6:	e002      	b.n	80038de <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d107      	bne.n	80038f6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	f003 0204 	and.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d105      	bne.n	8003944 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b292      	uxth	r2, r2
 8003942:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003952:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	58000400 	.word	0x58000400

08003994 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80039a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	58000400 	.word	0x58000400

080039b4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80039c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	58000400 	.word	0x58000400

080039d4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80039da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039de:	619a      	str	r2, [r3, #24]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	58000400 	.word	0x58000400

080039ec <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d101      	bne.n	8003a00 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	58000400 	.word	0x58000400

08003a10 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d101      	bne.n	8003a24 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	58000400 	.word	0x58000400

08003a34 <LL_RCC_RF_DisableReset>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <LL_RCC_IsRFUnderReset>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a68:	d101      	bne.n	8003a6e <LL_RCC_IsRFUnderReset+0x1a>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <LL_RCC_IsRFUnderReset+0x1c>
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <LL_EXTI_EnableIT_32_63+0x24>)
 8003a82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a86:	4905      	ldr	r1, [pc, #20]	; (8003a9c <LL_EXTI_EnableIT_32_63+0x24>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	58000800 	.word	0x58000800

08003aa0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
    return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	e052      	b.n	8003b5c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	799b      	ldrb	r3, [r3, #6]
 8003abe:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_SUBGHZ_Init+0x2c>
 8003ac6:	7bbb      	ldrb	r3, [r7, #14]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d109      	bne.n	8003ae0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd fc7c 	bl	80013d0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003ad8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003adc:	f7ff ffcc 	bl	8003a78 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d126      	bne.n	8003b34 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003aec:	f7ff ffa2 	bl	8003a34 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_SUBGHZ_Init+0xc4>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	0cdb      	lsrs	r3, r3, #19
 8003afe:	2264      	movs	r2, #100	; 0x64
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	609a      	str	r2, [r3, #8]
        break;
 8003b16:	e007      	b.n	8003b28 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003b1e:	f7ff ff99 	bl	8003a54 <LL_RCC_IsRFUnderReset>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b28:	f7ff ff34 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003b2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b30:	f7ff ff1c 	bl	800396c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003b34:	f7ff ff4e 	bl	80039d4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fa2e 	bl	8003fa4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	719a      	strb	r2, [r3, #6]

  return status;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000180 	.word	0x20000180

08003b68 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	461a      	mov	r2, r3
 8003b74:	460b      	mov	r3, r1
 8003b76:	817b      	strh	r3, [r7, #10]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	799b      	ldrb	r3, [r3, #6]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d14a      	bne.n	8003c1c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	795b      	ldrb	r3, [r3, #5]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e045      	b.n	8003c1e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 face 	bl	8004140 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ba4:	f7ff ff06 	bl	80039b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003ba8:	210d      	movs	r1, #13
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa1a 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003bb0:	897b      	ldrh	r3, [r7, #10]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fa12 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003bc0:	897b      	ldrh	r3, [r7, #10]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa0c 	bl	8003fe4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	82bb      	strh	r3, [r7, #20]
 8003bd0:	e00a      	b.n	8003be8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003bd2:	8abb      	ldrh	r3, [r7, #20]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fa01 	bl	8003fe4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003be2:	8abb      	ldrh	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	82bb      	strh	r3, [r7, #20]
 8003be8:	8aba      	ldrh	r2, [r7, #20]
 8003bea:	893b      	ldrh	r3, [r7, #8]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d3f0      	bcc.n	8003bd2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bf0:	f7ff fed0 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fac7 	bl	8004188 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
 8003c06:	e001      	b.n	8003c0c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	715a      	strb	r2, [r3, #5]

    return status;
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	e000      	b.n	8003c1e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b088      	sub	sp, #32
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	461a      	mov	r2, r3
 8003c32:	460b      	mov	r3, r1
 8003c34:	817b      	strh	r3, [r7, #10]
 8003c36:	4613      	mov	r3, r2
 8003c38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	799b      	ldrb	r3, [r3, #6]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d14a      	bne.n	8003cde <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	795b      	ldrb	r3, [r3, #5]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e045      	b.n	8003ce0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa70 	bl	8004140 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c60:	f7ff fea8 	bl	80039b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003c64:	211d      	movs	r1, #29
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f9bc 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003c6c:	897b      	ldrh	r3, [r7, #10]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f9b4 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003c7c:	897b      	ldrh	r3, [r7, #10]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4619      	mov	r1, r3
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f9ae 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003c88:	2100      	movs	r1, #0
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f9aa 	bl	8003fe4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	82fb      	strh	r3, [r7, #22]
 8003c94:	e009      	b.n	8003caa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f9f9 	bl	8004090 <SUBGHZSPI_Receive>
      pData++;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003ca4:	8afb      	ldrh	r3, [r7, #22]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	82fb      	strh	r3, [r7, #22]
 8003caa:	8afa      	ldrh	r2, [r7, #22]
 8003cac:	893b      	ldrh	r3, [r7, #8]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3f1      	bcc.n	8003c96 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003cb2:	f7ff fe6f 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa66 	bl	8004188 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e001      	b.n	8003cce <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	715a      	strb	r2, [r3, #5]

    return status;
 8003cda:	7ffb      	ldrb	r3, [r7, #31]
 8003cdc:	e000      	b.n	8003ce0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	72fb      	strb	r3, [r7, #11]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	799b      	ldrb	r3, [r3, #6]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d14a      	bne.n	8003d9c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	795b      	ldrb	r3, [r3, #5]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e045      	b.n	8003d9e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 fa11 	bl	8004140 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	2b84      	cmp	r3, #132	; 0x84
 8003d22:	d002      	beq.n	8003d2a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	2b94      	cmp	r3, #148	; 0x94
 8003d28:	d103      	bne.n	8003d32 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	711a      	strb	r2, [r3, #4]
 8003d30:	e002      	b.n	8003d38 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d38:	f7ff fe3c 	bl	80039b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f94f 	bl	8003fe4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	82bb      	strh	r3, [r7, #20]
 8003d4a:	e00a      	b.n	8003d62 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d4c:	8abb      	ldrh	r3, [r7, #20]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f944 	bl	8003fe4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d5c:	8abb      	ldrh	r3, [r7, #20]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	82bb      	strh	r3, [r7, #20]
 8003d62:	8aba      	ldrh	r2, [r7, #20]
 8003d64:	893b      	ldrh	r3, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3f0      	bcc.n	8003d4c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d6a:	f7ff fe13 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	2b84      	cmp	r3, #132	; 0x84
 8003d72:	d002      	beq.n	8003d7a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fa07 	bl	8004188 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
 8003d86:	e001      	b.n	8003d8c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	715a      	strb	r2, [r3, #5]

    return status;
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	e000      	b.n	8003d9e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b088      	sub	sp, #32
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	461a      	mov	r2, r3
 8003db2:	460b      	mov	r3, r1
 8003db4:	72fb      	strb	r3, [r7, #11]
 8003db6:	4613      	mov	r3, r2
 8003db8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	799b      	ldrb	r3, [r3, #6]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d13d      	bne.n	8003e44 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	795b      	ldrb	r3, [r3, #5]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e038      	b.n	8003e46 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f9b0 	bl	8004140 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003de0:	f7ff fde8 	bl	80039b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003de4:	7afb      	ldrb	r3, [r7, #11]
 8003de6:	4619      	mov	r1, r3
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f8fb 	bl	8003fe4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003dee:	2100      	movs	r1, #0
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f8f7 	bl	8003fe4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	82fb      	strh	r3, [r7, #22]
 8003dfa:	e009      	b.n	8003e10 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f946 	bl	8004090 <SUBGHZSPI_Receive>
      pData++;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	3301      	adds	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003e0a:	8afb      	ldrh	r3, [r7, #22]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	82fb      	strh	r3, [r7, #22]
 8003e10:	8afa      	ldrh	r2, [r7, #22]
 8003e12:	893b      	ldrh	r3, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d3f1      	bcc.n	8003dfc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e18:	f7ff fdbc 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f9b3 	bl	8004188 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e001      	b.n	8003e34 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	715a      	strb	r2, [r3, #5]

    return status;
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	e000      	b.n	8003e46 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	72fb      	strb	r3, [r7, #11]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	799b      	ldrb	r3, [r3, #6]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d13e      	bne.n	8003eea <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	795b      	ldrb	r3, [r3, #5]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e039      	b.n	8003eec <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f95e 	bl	8004140 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e84:	f7ff fd96 	bl	80039b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003e88:	210e      	movs	r1, #14
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f8aa 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	4619      	mov	r1, r3
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f8a5 	bl	8003fe4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	82bb      	strh	r3, [r7, #20]
 8003e9e:	e00a      	b.n	8003eb6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ea0:	8abb      	ldrh	r3, [r7, #20]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f89a 	bl	8003fe4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003eb0:	8abb      	ldrh	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	82bb      	strh	r3, [r7, #20]
 8003eb6:	8aba      	ldrh	r2, [r7, #20]
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3f0      	bcc.n	8003ea0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ebe:	f7ff fd69 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f960 	bl	8004188 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
 8003ed4:	e001      	b.n	8003eda <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	715a      	strb	r2, [r3, #5]

    return status;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	e000      	b.n	8003eec <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	461a      	mov	r2, r3
 8003f00:	460b      	mov	r3, r1
 8003f02:	72fb      	strb	r3, [r7, #11]
 8003f04:	4613      	mov	r3, r2
 8003f06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	799b      	ldrb	r3, [r3, #6]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d141      	bne.n	8003f9a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	795b      	ldrb	r3, [r3, #5]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e03c      	b.n	8003f9c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f909 	bl	8004140 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f2e:	f7ff fd41 	bl	80039b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003f32:	211e      	movs	r1, #30
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f855 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f850 	bl	8003fe4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003f44:	2100      	movs	r1, #0
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f84c 	bl	8003fe4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	82fb      	strh	r3, [r7, #22]
 8003f50:	e009      	b.n	8003f66 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f89b 	bl	8004090 <SUBGHZSPI_Receive>
      pData++;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003f60:	8afb      	ldrh	r3, [r7, #22]
 8003f62:	3301      	adds	r3, #1
 8003f64:	82fb      	strh	r3, [r7, #22]
 8003f66:	8afa      	ldrh	r2, [r7, #22]
 8003f68:	893b      	ldrh	r3, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3f1      	bcc.n	8003f52 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f6e:	f7ff fd11 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f908 	bl	8004188 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e001      	b.n	8003f8a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	715a      	strb	r2, [r3, #5]

    return status;
 8003f96:	7ffb      	ldrb	r3, [r7, #31]
 8003f98:	e000      	b.n	8003f9c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <SUBGHZSPI_Init+0x3c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0b      	ldr	r2, [pc, #44]	; (8003fe0 <SUBGHZSPI_Init+0x3c>)
 8003fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <SUBGHZSPI_Init+0x3c>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003fc0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <SUBGHZSPI_Init+0x3c>)
 8003fc4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003fc8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <SUBGHZSPI_Init+0x3c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <SUBGHZSPI_Init+0x3c>)
 8003fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd4:	6013      	str	r3, [r2, #0]
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	58010000 	.word	0x58010000

08003fe4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <SUBGHZSPI_Transmit+0xa0>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	0cdb      	lsrs	r3, r3, #19
 8004002:	2264      	movs	r2, #100	; 0x64
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	609a      	str	r2, [r3, #8]
      break;
 800401a:	e008      	b.n	800402e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b01      	subs	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <SUBGHZSPI_Transmit+0xa4>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d1ed      	bne.n	800400a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <SUBGHZSPI_Transmit+0xa8>)
 8004030:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <SUBGHZSPI_Transmit+0xa0>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	0cdb      	lsrs	r3, r3, #19
 8004046:	2264      	movs	r2, #100	; 0x64
 8004048:	fb02 f303 	mul.w	r3, r2, r3
 800404c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	609a      	str	r2, [r3, #8]
      break;
 800405e:	e008      	b.n	8004072 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3b01      	subs	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <SUBGHZSPI_Transmit+0xa4>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d1ed      	bne.n	800404e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <SUBGHZSPI_Transmit+0xa4>)
 8004074:	68db      	ldr	r3, [r3, #12]

  return status;
 8004076:	7dfb      	ldrb	r3, [r7, #23]
}
 8004078:	4618      	mov	r0, r3
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000180 	.word	0x20000180
 8004088:	58010000 	.word	0x58010000
 800408c:	5801000c 	.word	0x5801000c

08004090 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <SUBGHZSPI_Receive+0xa4>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	0cdb      	lsrs	r3, r3, #19
 80040ac:	2264      	movs	r2, #100	; 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	609a      	str	r2, [r3, #8]
      break;
 80040c4:	e008      	b.n	80040d8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <SUBGHZSPI_Receive+0xa8>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d1ed      	bne.n	80040b4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80040d8:	4b18      	ldr	r3, [pc, #96]	; (800413c <SUBGHZSPI_Receive+0xac>)
 80040da:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	22ff      	movs	r2, #255	; 0xff
 80040e0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <SUBGHZSPI_Receive+0xa4>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	0cdb      	lsrs	r3, r3, #19
 80040f0:	2264      	movs	r2, #100	; 0x64
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	609a      	str	r2, [r3, #8]
      break;
 8004108:	e008      	b.n	800411c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b01      	subs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <SUBGHZSPI_Receive+0xa8>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d1ed      	bne.n	80040f8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <SUBGHZSPI_Receive+0xa8>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	701a      	strb	r2, [r3, #0]

  return status;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000180 	.word	0x20000180
 8004138:	58010000 	.word	0x58010000
 800413c:	5801000c 	.word	0x5801000c

08004140 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	791b      	ldrb	r3, [r3, #4]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d111      	bne.n	8004174 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <SUBGHZ_CheckDeviceReady+0x44>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004160:	f7ff fc28 	bl	80039b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3b01      	subs	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f9      	bne.n	8004164 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004170:	f7ff fc10 	bl	8003994 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f807 	bl	8004188 <SUBGHZ_WaitOnBusy>
 800417a:	4603      	mov	r3, r0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000180 	.word	0x20000180

08004188 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <SUBGHZ_WaitOnBusy+0x58>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	0d1b      	lsrs	r3, r3, #20
 80041a2:	2264      	movs	r2, #100	; 0x64
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80041aa:	f7ff fc31 	bl	8003a10 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80041ae:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	609a      	str	r2, [r3, #8]
      break;
 80041c0:	e009      	b.n	80041d6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80041c8:	f7ff fc10 	bl	80039ec <LL_PWR_IsActiveFlag_RFBUSYS>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d0e9      	beq.n	80041aa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000180 	.word	0x20000180

080041e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e049      	b.n	800428a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd f8ec 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 f940 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_ConfigClockSource+0x1c>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0b6      	b.n	800441c <HAL_TIM_ConfigClockSource+0x18a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80042cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	d03e      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xd8>
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	f200 8087 	bhi.w	8004402 <HAL_TIM_ConfigClockSource+0x170>
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	f000 8086 	beq.w	8004408 <HAL_TIM_ConfigClockSource+0x176>
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d87f      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004302:	2b70      	cmp	r3, #112	; 0x70
 8004304:	d01a      	beq.n	800433c <HAL_TIM_ConfigClockSource+0xaa>
 8004306:	2b70      	cmp	r3, #112	; 0x70
 8004308:	d87b      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 800430a:	2b60      	cmp	r3, #96	; 0x60
 800430c:	d050      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x11e>
 800430e:	2b60      	cmp	r3, #96	; 0x60
 8004310:	d877      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004312:	2b50      	cmp	r3, #80	; 0x50
 8004314:	d03c      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0xfe>
 8004316:	2b50      	cmp	r3, #80	; 0x50
 8004318:	d873      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d058      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x13e>
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d86f      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	d064      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 8004326:	2b30      	cmp	r3, #48	; 0x30
 8004328:	d86b      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 800432a:	2b20      	cmp	r3, #32
 800432c:	d060      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 800432e:	2b20      	cmp	r3, #32
 8004330:	d867      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d05c      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 8004336:	2b10      	cmp	r3, #16
 8004338:	d05a      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 800433a:	e062      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f000 fa1c 	bl	8004788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800435e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
      break;
 8004368:	e04f      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f000 fa05 	bl	8004788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438c:	609a      	str	r2, [r3, #8]
      break;
 800438e:	e03c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f97a 	bl	8004696 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2150      	movs	r1, #80	; 0x50
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f9d1 	bl	8004750 <TIM_ITRx_SetConfig>
      break;
 80043ae:	e02c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	f000 f998 	bl	80046f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2160      	movs	r1, #96	; 0x60
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f9c1 	bl	8004750 <TIM_ITRx_SetConfig>
      break;
 80043ce:	e01c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	461a      	mov	r2, r3
 80043de:	f000 f95a 	bl	8004696 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2140      	movs	r1, #64	; 0x40
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f9b1 	bl	8004750 <TIM_ITRx_SetConfig>
      break;
 80043ee:	e00c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f000 f9a8 	bl	8004750 <TIM_ITRx_SetConfig>
      break;
 8004400:	e003      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      break;
 8004406:	e000      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004408:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004438:	2302      	movs	r3, #2
 800443a:	e031      	b.n	80044a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f88c 	bl	800456c <TIM_SlaveTimer_SetConfig>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e018      	b.n	80044a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800448c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a29      	ldr	r2, [pc, #164]	; (8004560 <TIM_Base_SetConfig+0xb8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0x20>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d108      	bne.n	80044da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <TIM_Base_SetConfig+0xb8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <TIM_Base_SetConfig+0x52>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d007      	beq.n	80044fa <TIM_Base_SetConfig+0x52>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <TIM_Base_SetConfig+0xbc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_Base_SetConfig+0x52>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <TIM_Base_SetConfig+0xc0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d108      	bne.n	800450c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <TIM_Base_SetConfig+0xb8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <TIM_Base_SetConfig+0xa0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <TIM_Base_SetConfig+0xbc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_Base_SetConfig+0xa0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a09      	ldr	r2, [pc, #36]	; (8004568 <TIM_Base_SetConfig+0xc0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	615a      	str	r2, [r3, #20]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800

0800456c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b70      	cmp	r3, #112	; 0x70
 80045bc:	d01a      	beq.n	80045f4 <TIM_SlaveTimer_SetConfig+0x88>
 80045be:	2b70      	cmp	r3, #112	; 0x70
 80045c0:	d860      	bhi.n	8004684 <TIM_SlaveTimer_SetConfig+0x118>
 80045c2:	2b60      	cmp	r3, #96	; 0x60
 80045c4:	d054      	beq.n	8004670 <TIM_SlaveTimer_SetConfig+0x104>
 80045c6:	2b60      	cmp	r3, #96	; 0x60
 80045c8:	d85c      	bhi.n	8004684 <TIM_SlaveTimer_SetConfig+0x118>
 80045ca:	2b50      	cmp	r3, #80	; 0x50
 80045cc:	d046      	beq.n	800465c <TIM_SlaveTimer_SetConfig+0xf0>
 80045ce:	2b50      	cmp	r3, #80	; 0x50
 80045d0:	d858      	bhi.n	8004684 <TIM_SlaveTimer_SetConfig+0x118>
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d019      	beq.n	800460a <TIM_SlaveTimer_SetConfig+0x9e>
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d854      	bhi.n	8004684 <TIM_SlaveTimer_SetConfig+0x118>
 80045da:	2b30      	cmp	r3, #48	; 0x30
 80045dc:	d055      	beq.n	800468a <TIM_SlaveTimer_SetConfig+0x11e>
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d850      	bhi.n	8004684 <TIM_SlaveTimer_SetConfig+0x118>
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d051      	beq.n	800468a <TIM_SlaveTimer_SetConfig+0x11e>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d84c      	bhi.n	8004684 <TIM_SlaveTimer_SetConfig+0x118>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d04d      	beq.n	800468a <TIM_SlaveTimer_SetConfig+0x11e>
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d04b      	beq.n	800468a <TIM_SlaveTimer_SetConfig+0x11e>
 80045f2:	e047      	b.n	8004684 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68d9      	ldr	r1, [r3, #12]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f000 f8c0 	bl	8004788 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004608:	e040      	b.n	800468c <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b05      	cmp	r3, #5
 8004610:	d101      	bne.n	8004616 <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e03b      	b.n	800468e <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
      break;
 800465a:	e017      	b.n	800468c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6899      	ldr	r1, [r3, #8]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	461a      	mov	r2, r3
 800466a:	f000 f814 	bl	8004696 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800466e:	e00d      	b.n	800468c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6899      	ldr	r1, [r3, #8]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	461a      	mov	r2, r3
 800467e:	f000 f838 	bl	80046f2 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004682:	e003      	b.n	800468c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	75fb      	strb	r3, [r7, #23]
      break;
 8004688:	e000      	b.n	800468c <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800468a:	bf00      	nop
  }

  return status;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004696:	b480      	push	{r7}
 8004698:	b087      	sub	sp, #28
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f023 0201 	bic.w	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 030a 	bic.w	r3, r3, #10
 80046d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b087      	sub	sp, #28
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f023 0210 	bic.w	r2, r3, #16
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800471c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	031b      	lsls	r3, r3, #12
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800472e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	f043 0307 	orr.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	021a      	lsls	r2, r3, #8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047dc:	2302      	movs	r3, #2
 80047de:	e04a      	b.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004810:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a11      	ldr	r2, [pc, #68]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d10c      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	40012c00 	.word	0x40012c00

08004884 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8004888:	f7fc fe14 	bl	80014b4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800488c:	f000 f808 	bl	80048a0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}

08004894 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0

  /* USER CODE END MX_LoRaWAN_Process_1 */
  /* USER CODE BEGIN MX_LoRaWAN_Process_OS */

  /* USER CODE END MX_LoRaWAN_Process_OS */
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80048a4:	4902      	ldr	r1, [pc, #8]	; (80048b0 <LoRaWAN_Init+0x10>)
 80048a6:	4803      	ldr	r0, [pc, #12]	; (80048b4 <LoRaWAN_Init+0x14>)
 80048a8:	f001 fb40 	bl	8005f2c <LmHandlerInit>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 80048ac:	bf00      	nop
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	01030000 	.word	0x01030000
 80048b4:	2000018c 	.word	0x2000018c

080048b8 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <OnSystemReset>:

static void OnSystemReset(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
}
 800496c:	bf00      	nop
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800497e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8004998:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80049aa:	2302      	movs	r3, #2
 80049ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 80049ae:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 80049c0:	2301      	movs	r3, #1
 80049c2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 80049c4:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80049d6:	2301      	movs	r3, #1
 80049d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 80049da:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	4603      	mov	r3, r0
 80049ee:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 80049fa:	230f      	movs	r3, #15
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e001      	b.n	8004a04 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8004a00:	2316      	movs	r3, #22
 8004a02:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8004a04:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	33f1      	adds	r3, #241	; 0xf1
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f007 f973 	bl	800bd0c <memset1>
    ctx->M_n = 0;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	22f0      	movs	r2, #240	; 0xf0
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f007 f969 	bl	800bd0c <memset1>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2110      	movs	r1, #16
 8004a52:	6838      	ldr	r0, [r7, #0]
 8004a54:	f000 fe5c 	bl	8005710 <lorawan_aes_set_key>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	; 0x30
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80a1 	beq.w	8004bba <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004a7e:	f1c3 0310 	rsb	r3, r3, #16
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4293      	cmp	r3, r2
 8004a86:	bf28      	it	cs
 8004a88:	4613      	movcs	r3, r2
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f203 1201 	addw	r2, r3, #257	; 0x101
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004a98:	4413      	add	r3, r2
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9c:	b292      	uxth	r2, r2
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f007 f8f8 	bl	800bc96 <memcpy1>
        ctx->M_n += mlen;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	f240 808d 	bls.w	8004bdc <AES_CMAC_Update+0x17c>
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	f000 8088 	beq.w	8004bdc <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad0:	e015      	b.n	8004afe <AES_CMAC_Update+0x9e>
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	4413      	add	r3, r2
 8004ad8:	33f1      	adds	r3, #241	; 0xf1
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	440b      	add	r3, r1
 8004ae2:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	4053      	eors	r3, r2
 8004aea:	b2d9      	uxtb	r1, r3
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	4413      	add	r3, r2
 8004af2:	33f1      	adds	r3, #241	; 0xf1
 8004af4:	460a      	mov	r2, r1
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	3301      	adds	r3, #1
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	dde6      	ble.n	8004ad2 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8004b0a:	f107 0314 	add.w	r3, r7, #20
 8004b0e:	2210      	movs	r2, #16
 8004b10:	4618      	mov	r0, r3
 8004b12:	f007 f8c0 	bl	800bc96 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f107 0114 	add.w	r1, r7, #20
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fed3 	bl	80058cc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	33f1      	adds	r3, #241	; 0xf1
 8004b2a:	f107 0114 	add.w	r1, r7, #20
 8004b2e:	2210      	movs	r2, #16
 8004b30:	4618      	mov	r0, r3
 8004b32:	f007 f8b0 	bl	800bc96 <memcpy1>

        data += mlen;
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8004b46:	e038      	b.n	8004bba <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4c:	e013      	b.n	8004b76 <AES_CMAC_Update+0x116>
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	4413      	add	r3, r2
 8004b54:	33f1      	adds	r3, #241	; 0xf1
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	440b      	add	r3, r1
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	4053      	eors	r3, r2
 8004b62:	b2d9      	uxtb	r1, r3
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	4413      	add	r3, r2
 8004b6a:	33f1      	adds	r3, #241	; 0xf1
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	3301      	adds	r3, #1
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	2b0f      	cmp	r3, #15
 8004b7a:	dde8      	ble.n	8004b4e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	2210      	movs	r2, #16
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f007 f884 	bl	800bc96 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f107 0114 	add.w	r1, r7, #20
 8004b94:	f107 0314 	add.w	r3, r7, #20
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fe97 	bl	80058cc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	33f1      	adds	r3, #241	; 0xf1
 8004ba2:	f107 0114 	add.w	r1, r7, #20
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f007 f874 	bl	800bc96 <memcpy1>

        data += 16;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3b10      	subs	r3, #16
 8004bb8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d8c3      	bhi.n	8004b48 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f007 f862 	bl	800bc96 <memcpy1>
    ctx->M_n = len;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004bda:	e000      	b.n	8004bde <AES_CMAC_Update+0x17e>
            return;
 8004bdc:	bf00      	nop
}
 8004bde:	3730      	adds	r7, #48	; 0x30
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b092      	sub	sp, #72	; 0x48
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8004bee:	f107 031c 	add.w	r3, r7, #28
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f007 f888 	bl	800bd0c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	f107 011c 	add.w	r1, r7, #28
 8004c02:	f107 031c 	add.w	r3, r7, #28
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fe60 	bl	80058cc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8004c0c:	7f3b      	ldrb	r3, [r7, #28]
 8004c0e:	b25b      	sxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	da30      	bge.n	8004c76 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 8004c14:	2300      	movs	r3, #0
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44
 8004c18:	e01b      	b.n	8004c52 <AES_CMAC_Final+0x6e>
 8004c1a:	f107 021c 	add.w	r2, r7, #28
 8004c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c20:	4413      	add	r3, r2
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	b25a      	sxtb	r2, r3
 8004c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	3348      	adds	r3, #72	; 0x48
 8004c2e:	443b      	add	r3, r7
 8004c30:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004c34:	09db      	lsrs	r3, r3, #7
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b25b      	sxtb	r3, r3
 8004c3e:	b2d9      	uxtb	r1, r3
 8004c40:	f107 021c 	add.w	r2, r7, #28
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c46:	4413      	add	r3, r2
 8004c48:	460a      	mov	r2, r1
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4e:	3301      	adds	r3, #1
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
 8004c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c54:	2b0e      	cmp	r3, #14
 8004c56:	dde0      	ble.n	8004c1a <AES_CMAC_Final+0x36>
 8004c58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8004c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c68:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c74:	e027      	b.n	8004cc6 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 8004c76:	2300      	movs	r3, #0
 8004c78:	643b      	str	r3, [r7, #64]	; 0x40
 8004c7a:	e01b      	b.n	8004cb4 <AES_CMAC_Final+0xd0>
 8004c7c:	f107 021c 	add.w	r2, r7, #28
 8004c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c82:	4413      	add	r3, r2
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	b25a      	sxtb	r2, r3
 8004c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	3348      	adds	r3, #72	; 0x48
 8004c90:	443b      	add	r3, r7
 8004c92:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004c96:	09db      	lsrs	r3, r3, #7
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b25b      	sxtb	r3, r3
 8004ca0:	b2d9      	uxtb	r1, r3
 8004ca2:	f107 021c 	add.w	r2, r7, #28
 8004ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca8:	4413      	add	r3, r2
 8004caa:	460a      	mov	r2, r1
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb6:	2b0e      	cmp	r3, #14
 8004cb8:	dde0      	ble.n	8004c7c <AES_CMAC_Final+0x98>
 8004cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d11d      	bne.n	8004d0c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd4:	e016      	b.n	8004d04 <AES_CMAC_Final+0x120>
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	f107 011c 	add.w	r1, r7, #28
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	440b      	add	r3, r1
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4053      	eors	r3, r2
 8004cee:	b2d9      	uxtb	r1, r3
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	3301      	adds	r3, #1
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	dde5      	ble.n	8004cd6 <AES_CMAC_Final+0xf2>
 8004d0a:	e096      	b.n	8004e3a <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8004d0c:	7f3b      	ldrb	r3, [r7, #28]
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	da30      	bge.n	8004d76 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 8004d14:	2300      	movs	r3, #0
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d18:	e01b      	b.n	8004d52 <AES_CMAC_Final+0x16e>
 8004d1a:	f107 021c 	add.w	r2, r7, #28
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	4413      	add	r3, r2
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	b25a      	sxtb	r2, r3
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	3348      	adds	r3, #72	; 0x48
 8004d2e:	443b      	add	r3, r7
 8004d30:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004d34:	09db      	lsrs	r3, r3, #7
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	b25b      	sxtb	r3, r3
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	b25b      	sxtb	r3, r3
 8004d3e:	b2d9      	uxtb	r1, r3
 8004d40:	f107 021c 	add.w	r2, r7, #28
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	4413      	add	r3, r2
 8004d48:	460a      	mov	r2, r1
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	3301      	adds	r3, #1
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b0e      	cmp	r3, #14
 8004d56:	dde0      	ble.n	8004d1a <AES_CMAC_Final+0x136>
 8004d58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 8004d64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d68:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d74:	e027      	b.n	8004dc6 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7a:	e01b      	b.n	8004db4 <AES_CMAC_Final+0x1d0>
 8004d7c:	f107 021c 	add.w	r2, r7, #28
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	4413      	add	r3, r2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	b25a      	sxtb	r2, r3
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	3348      	adds	r3, #72	; 0x48
 8004d90:	443b      	add	r3, r7
 8004d92:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004d96:	09db      	lsrs	r3, r3, #7
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	b25b      	sxtb	r3, r3
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	b2d9      	uxtb	r1, r3
 8004da2:	f107 021c 	add.w	r2, r7, #28
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	4413      	add	r3, r2
 8004daa:	460a      	mov	r2, r1
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	3301      	adds	r3, #1
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	2b0e      	cmp	r3, #14
 8004db8:	dde0      	ble.n	8004d7c <AES_CMAC_Final+0x198>
 8004dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	4413      	add	r3, r2
 8004dd0:	2280      	movs	r2, #128	; 0x80
 8004dd2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8004dd6:	e007      	b.n	8004de8 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	4413      	add	r3, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004dfc:	2b0f      	cmp	r3, #15
 8004dfe:	d9eb      	bls.n	8004dd8 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 8004e00:	2300      	movs	r3, #0
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
 8004e04:	e016      	b.n	8004e34 <AES_CMAC_Final+0x250>
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	f107 011c 	add.w	r1, r7, #28
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	440b      	add	r3, r1
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	4053      	eors	r3, r2
 8004e1e:	b2d9      	uxtb	r1, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	4413      	add	r3, r2
 8004e26:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	3301      	adds	r3, #1
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	dde5      	ble.n	8004e06 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3e:	e015      	b.n	8004e6c <AES_CMAC_Final+0x288>
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	4413      	add	r3, r2
 8004e46:	33f1      	adds	r3, #241	; 0xf1
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	440b      	add	r3, r1
 8004e50:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	4053      	eors	r3, r2
 8004e58:	b2d9      	uxtb	r1, r3
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	4413      	add	r3, r2
 8004e60:	33f1      	adds	r3, #241	; 0xf1
 8004e62:	460a      	mov	r2, r1
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	3301      	adds	r3, #1
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	2b0f      	cmp	r3, #15
 8004e70:	dde6      	ble.n	8004e40 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8004e78:	f107 030c 	add.w	r3, r7, #12
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f006 ff09 	bl	800bc96 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	f107 030c 	add.w	r3, r7, #12
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fd1d 	bl	80058cc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8004e92:	f107 031c 	add.w	r3, r7, #28
 8004e96:	2210      	movs	r2, #16
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f006 ff36 	bl	800bd0c <memset1>
}
 8004ea0:	bf00      	nop
 8004ea2:	3748      	adds	r7, #72	; 0x48
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	7852      	ldrb	r2, [r2, #1]
 8004ec2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	7892      	ldrb	r2, [r2, #2]
 8004ecc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3303      	adds	r3, #3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	78d2      	ldrb	r2, [r2, #3]
 8004ed6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	7912      	ldrb	r2, [r2, #4]
 8004ee0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3305      	adds	r3, #5
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	7952      	ldrb	r2, [r2, #5]
 8004eea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3306      	adds	r3, #6
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	7992      	ldrb	r2, [r2, #6]
 8004ef4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3307      	adds	r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	79d2      	ldrb	r2, [r2, #7]
 8004efe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3308      	adds	r3, #8
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	7a12      	ldrb	r2, [r2, #8]
 8004f08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3309      	adds	r3, #9
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	7a52      	ldrb	r2, [r2, #9]
 8004f12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	330a      	adds	r3, #10
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	7a92      	ldrb	r2, [r2, #10]
 8004f1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	330b      	adds	r3, #11
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	7ad2      	ldrb	r2, [r2, #11]
 8004f26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	7b12      	ldrb	r2, [r2, #12]
 8004f30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	330d      	adds	r3, #13
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	7b52      	ldrb	r2, [r2, #13]
 8004f3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	330e      	adds	r3, #14
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	7b92      	ldrb	r2, [r2, #14]
 8004f44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	330f      	adds	r3, #15
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	7bd2      	ldrb	r2, [r2, #15]
 8004f4e:	701a      	strb	r2, [r3, #0]
#endif
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	4613      	mov	r3, r2
 8004f66:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 8004f68:	e007      	b.n	8004f7a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	1c53      	adds	r3, r2, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	60f9      	str	r1, [r7, #12]
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	1e5a      	subs	r2, r3, #1
 8004f7e:	71fa      	strb	r2, [r7, #7]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f2      	bne.n	8004f6a <copy_block_nn+0x10>
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	4053      	eors	r3, r2
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3301      	adds	r3, #1
 8004fae:	7819      	ldrb	r1, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	404a      	eors	r2, r1
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	7819      	ldrb	r1, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	3302      	adds	r3, #2
 8004fca:	781a      	ldrb	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3302      	adds	r3, #2
 8004fd0:	404a      	eors	r2, r1
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3303      	adds	r3, #3
 8004fda:	7819      	ldrb	r1, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	3303      	adds	r3, #3
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3303      	adds	r3, #3
 8004fe6:	404a      	eors	r2, r1
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	7819      	ldrb	r1, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	404a      	eors	r2, r1
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3305      	adds	r3, #5
 8005006:	7819      	ldrb	r1, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	3305      	adds	r3, #5
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3305      	adds	r3, #5
 8005012:	404a      	eors	r2, r1
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3306      	adds	r3, #6
 800501c:	7819      	ldrb	r1, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	3306      	adds	r3, #6
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3306      	adds	r3, #6
 8005028:	404a      	eors	r2, r1
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3307      	adds	r3, #7
 8005032:	7819      	ldrb	r1, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	3307      	adds	r3, #7
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3307      	adds	r3, #7
 800503e:	404a      	eors	r2, r1
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3308      	adds	r3, #8
 8005048:	7819      	ldrb	r1, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	3308      	adds	r3, #8
 800504e:	781a      	ldrb	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3308      	adds	r3, #8
 8005054:	404a      	eors	r2, r1
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3309      	adds	r3, #9
 800505e:	7819      	ldrb	r1, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	3309      	adds	r3, #9
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3309      	adds	r3, #9
 800506a:	404a      	eors	r2, r1
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	330a      	adds	r3, #10
 8005074:	7819      	ldrb	r1, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	330a      	adds	r3, #10
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	330a      	adds	r3, #10
 8005080:	404a      	eors	r2, r1
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	330b      	adds	r3, #11
 800508a:	7819      	ldrb	r1, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	330b      	adds	r3, #11
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	330b      	adds	r3, #11
 8005096:	404a      	eors	r2, r1
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	330c      	adds	r3, #12
 80050a0:	7819      	ldrb	r1, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	781a      	ldrb	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	330c      	adds	r3, #12
 80050ac:	404a      	eors	r2, r1
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	330d      	adds	r3, #13
 80050b6:	7819      	ldrb	r1, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	330d      	adds	r3, #13
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	330d      	adds	r3, #13
 80050c2:	404a      	eors	r2, r1
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	330e      	adds	r3, #14
 80050cc:	7819      	ldrb	r1, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	330e      	adds	r3, #14
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	330e      	adds	r3, #14
 80050d8:	404a      	eors	r2, r1
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	330f      	adds	r3, #15
 80050e2:	7819      	ldrb	r1, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	330f      	adds	r3, #15
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	330f      	adds	r3, #15
 80050ee:	404a      	eors	r2, r1
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]
#endif
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	4053      	eors	r3, r2
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3301      	adds	r3, #1
 800511e:	7819      	ldrb	r1, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3301      	adds	r3, #1
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3301      	adds	r3, #1
 800512a:	404a      	eors	r2, r1
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	3302      	adds	r3, #2
 8005134:	7819      	ldrb	r1, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3302      	adds	r3, #2
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3302      	adds	r3, #2
 8005140:	404a      	eors	r2, r1
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	3303      	adds	r3, #3
 800514a:	7819      	ldrb	r1, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3303      	adds	r3, #3
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3303      	adds	r3, #3
 8005156:	404a      	eors	r2, r1
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	3304      	adds	r3, #4
 8005160:	7819      	ldrb	r1, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3304      	adds	r3, #4
 800516c:	404a      	eors	r2, r1
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	3305      	adds	r3, #5
 8005176:	7819      	ldrb	r1, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3305      	adds	r3, #5
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3305      	adds	r3, #5
 8005182:	404a      	eors	r2, r1
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3306      	adds	r3, #6
 800518c:	7819      	ldrb	r1, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3306      	adds	r3, #6
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3306      	adds	r3, #6
 8005198:	404a      	eors	r2, r1
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3307      	adds	r3, #7
 80051a2:	7819      	ldrb	r1, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3307      	adds	r3, #7
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3307      	adds	r3, #7
 80051ae:	404a      	eors	r2, r1
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	3308      	adds	r3, #8
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3308      	adds	r3, #8
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3308      	adds	r3, #8
 80051c4:	404a      	eors	r2, r1
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3309      	adds	r3, #9
 80051ce:	7819      	ldrb	r1, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3309      	adds	r3, #9
 80051d4:	781a      	ldrb	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3309      	adds	r3, #9
 80051da:	404a      	eors	r2, r1
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	330a      	adds	r3, #10
 80051e4:	7819      	ldrb	r1, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	330a      	adds	r3, #10
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	330a      	adds	r3, #10
 80051f0:	404a      	eors	r2, r1
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	330b      	adds	r3, #11
 80051fa:	7819      	ldrb	r1, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	330b      	adds	r3, #11
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	330b      	adds	r3, #11
 8005206:	404a      	eors	r2, r1
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	330c      	adds	r3, #12
 8005210:	7819      	ldrb	r1, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	330c      	adds	r3, #12
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	330c      	adds	r3, #12
 800521c:	404a      	eors	r2, r1
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	330d      	adds	r3, #13
 8005226:	7819      	ldrb	r1, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	330d      	adds	r3, #13
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	330d      	adds	r3, #13
 8005232:	404a      	eors	r2, r1
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	330e      	adds	r3, #14
 800523c:	7819      	ldrb	r1, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	330e      	adds	r3, #14
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	330e      	adds	r3, #14
 8005248:	404a      	eors	r2, r1
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	330f      	adds	r3, #15
 8005252:	7819      	ldrb	r1, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	330f      	adds	r3, #15
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	330f      	adds	r3, #15
 800525e:	404a      	eors	r2, r1
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr

0800526e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fe88 	bl	8004f90 <xor_block>
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	4b48      	ldr	r3, [pc, #288]	; (80053b8 <shift_sub_rows+0x130>)
 8005298:	5c9a      	ldrb	r2, [r3, r2]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	4619      	mov	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4a43      	ldr	r2, [pc, #268]	; (80053b8 <shift_sub_rows+0x130>)
 80052ac:	5c52      	ldrb	r2, [r2, r1]
 80052ae:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3308      	adds	r3, #8
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	4619      	mov	r1, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3308      	adds	r3, #8
 80052bc:	4a3e      	ldr	r2, [pc, #248]	; (80053b8 <shift_sub_rows+0x130>)
 80052be:	5c52      	ldrb	r2, [r2, r1]
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	330c      	adds	r3, #12
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	4619      	mov	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	330c      	adds	r3, #12
 80052ce:	4a3a      	ldr	r2, [pc, #232]	; (80053b8 <shift_sub_rows+0x130>)
 80052d0:	5c52      	ldrb	r2, [r2, r1]
 80052d2:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	73fb      	strb	r3, [r7, #15]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3305      	adds	r3, #5
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3301      	adds	r3, #1
 80052e6:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <shift_sub_rows+0x130>)
 80052e8:	5c52      	ldrb	r2, [r2, r1]
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3309      	adds	r3, #9
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	4619      	mov	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3305      	adds	r3, #5
 80052f8:	4a2f      	ldr	r2, [pc, #188]	; (80053b8 <shift_sub_rows+0x130>)
 80052fa:	5c52      	ldrb	r2, [r2, r1]
 80052fc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	330d      	adds	r3, #13
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	4619      	mov	r1, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3309      	adds	r3, #9
 800530a:	4a2b      	ldr	r2, [pc, #172]	; (80053b8 <shift_sub_rows+0x130>)
 800530c:	5c52      	ldrb	r2, [r2, r1]
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	330d      	adds	r3, #13
 8005316:	4928      	ldr	r1, [pc, #160]	; (80053b8 <shift_sub_rows+0x130>)
 8005318:	5c8a      	ldrb	r2, [r1, r2]
 800531a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	789b      	ldrb	r3, [r3, #2]
 8005320:	73fb      	strb	r3, [r7, #15]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	330a      	adds	r3, #10
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3302      	adds	r3, #2
 800532e:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <shift_sub_rows+0x130>)
 8005330:	5c52      	ldrb	r2, [r2, r1]
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	330a      	adds	r3, #10
 800533a:	491f      	ldr	r1, [pc, #124]	; (80053b8 <shift_sub_rows+0x130>)
 800533c:	5c8a      	ldrb	r2, [r1, r2]
 800533e:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	799b      	ldrb	r3, [r3, #6]
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	330e      	adds	r3, #14
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	4619      	mov	r1, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3306      	adds	r3, #6
 8005352:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <shift_sub_rows+0x130>)
 8005354:	5c52      	ldrb	r2, [r2, r1]
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	330e      	adds	r3, #14
 800535e:	4916      	ldr	r1, [pc, #88]	; (80053b8 <shift_sub_rows+0x130>)
 8005360:	5c8a      	ldrb	r2, [r1, r2]
 8005362:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7bdb      	ldrb	r3, [r3, #15]
 8005368:	73fb      	strb	r3, [r7, #15]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	330b      	adds	r3, #11
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	4619      	mov	r1, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	330f      	adds	r3, #15
 8005376:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <shift_sub_rows+0x130>)
 8005378:	5c52      	ldrb	r2, [r2, r1]
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3307      	adds	r3, #7
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	330b      	adds	r3, #11
 8005388:	4a0b      	ldr	r2, [pc, #44]	; (80053b8 <shift_sub_rows+0x130>)
 800538a:	5c52      	ldrb	r2, [r2, r1]
 800538c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3303      	adds	r3, #3
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3307      	adds	r3, #7
 800539a:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <shift_sub_rows+0x130>)
 800539c:	5c52      	ldrb	r2, [r2, r1]
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3303      	adds	r3, #3
 80053a6:	4904      	ldr	r1, [pc, #16]	; (80053b8 <shift_sub_rows+0x130>)
 80053a8:	5c8a      	ldrb	r2, [r1, r2]
 80053aa:	701a      	strb	r2, [r3, #0]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	0800f8bc 	.word	0x0800f8bc

080053bc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fd6c 	bl	8004ea8 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80053d0:	7a3b      	ldrb	r3, [r7, #8]
 80053d2:	461a      	mov	r2, r3
 80053d4:	4b9a      	ldr	r3, [pc, #616]	; (8005640 <mix_sub_columns+0x284>)
 80053d6:	5c9a      	ldrb	r2, [r3, r2]
 80053d8:	7b7b      	ldrb	r3, [r7, #13]
 80053da:	4619      	mov	r1, r3
 80053dc:	4b99      	ldr	r3, [pc, #612]	; (8005644 <mix_sub_columns+0x288>)
 80053de:	5c5b      	ldrb	r3, [r3, r1]
 80053e0:	4053      	eors	r3, r2
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	7cbb      	ldrb	r3, [r7, #18]
 80053e6:	4619      	mov	r1, r3
 80053e8:	4b97      	ldr	r3, [pc, #604]	; (8005648 <mix_sub_columns+0x28c>)
 80053ea:	5c5b      	ldrb	r3, [r3, r1]
 80053ec:	4053      	eors	r3, r2
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	4619      	mov	r1, r3
 80053f4:	4b94      	ldr	r3, [pc, #592]	; (8005648 <mix_sub_columns+0x28c>)
 80053f6:	5c5b      	ldrb	r3, [r3, r1]
 80053f8:	4053      	eors	r3, r2
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8005400:	7a3b      	ldrb	r3, [r7, #8]
 8005402:	461a      	mov	r2, r3
 8005404:	4b90      	ldr	r3, [pc, #576]	; (8005648 <mix_sub_columns+0x28c>)
 8005406:	5c9a      	ldrb	r2, [r3, r2]
 8005408:	7b7b      	ldrb	r3, [r7, #13]
 800540a:	4619      	mov	r1, r3
 800540c:	4b8c      	ldr	r3, [pc, #560]	; (8005640 <mix_sub_columns+0x284>)
 800540e:	5c5b      	ldrb	r3, [r3, r1]
 8005410:	4053      	eors	r3, r2
 8005412:	b2da      	uxtb	r2, r3
 8005414:	7cbb      	ldrb	r3, [r7, #18]
 8005416:	4619      	mov	r1, r3
 8005418:	4b8a      	ldr	r3, [pc, #552]	; (8005644 <mix_sub_columns+0x288>)
 800541a:	5c5b      	ldrb	r3, [r3, r1]
 800541c:	4053      	eors	r3, r2
 800541e:	b2d9      	uxtb	r1, r3
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	461a      	mov	r2, r3
 8005424:	4b88      	ldr	r3, [pc, #544]	; (8005648 <mix_sub_columns+0x28c>)
 8005426:	5c9a      	ldrb	r2, [r3, r2]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3301      	adds	r3, #1
 800542c:	404a      	eors	r2, r1
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8005432:	7a3b      	ldrb	r3, [r7, #8]
 8005434:	461a      	mov	r2, r3
 8005436:	4b84      	ldr	r3, [pc, #528]	; (8005648 <mix_sub_columns+0x28c>)
 8005438:	5c9a      	ldrb	r2, [r3, r2]
 800543a:	7b7b      	ldrb	r3, [r7, #13]
 800543c:	4619      	mov	r1, r3
 800543e:	4b82      	ldr	r3, [pc, #520]	; (8005648 <mix_sub_columns+0x28c>)
 8005440:	5c5b      	ldrb	r3, [r3, r1]
 8005442:	4053      	eors	r3, r2
 8005444:	b2da      	uxtb	r2, r3
 8005446:	7cbb      	ldrb	r3, [r7, #18]
 8005448:	4619      	mov	r1, r3
 800544a:	4b7d      	ldr	r3, [pc, #500]	; (8005640 <mix_sub_columns+0x284>)
 800544c:	5c5b      	ldrb	r3, [r3, r1]
 800544e:	4053      	eors	r3, r2
 8005450:	b2d9      	uxtb	r1, r3
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	461a      	mov	r2, r3
 8005456:	4b7b      	ldr	r3, [pc, #492]	; (8005644 <mix_sub_columns+0x288>)
 8005458:	5c9a      	ldrb	r2, [r3, r2]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3302      	adds	r3, #2
 800545e:	404a      	eors	r2, r1
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8005464:	7a3b      	ldrb	r3, [r7, #8]
 8005466:	461a      	mov	r2, r3
 8005468:	4b76      	ldr	r3, [pc, #472]	; (8005644 <mix_sub_columns+0x288>)
 800546a:	5c9a      	ldrb	r2, [r3, r2]
 800546c:	7b7b      	ldrb	r3, [r7, #13]
 800546e:	4619      	mov	r1, r3
 8005470:	4b75      	ldr	r3, [pc, #468]	; (8005648 <mix_sub_columns+0x28c>)
 8005472:	5c5b      	ldrb	r3, [r3, r1]
 8005474:	4053      	eors	r3, r2
 8005476:	b2da      	uxtb	r2, r3
 8005478:	7cbb      	ldrb	r3, [r7, #18]
 800547a:	4619      	mov	r1, r3
 800547c:	4b72      	ldr	r3, [pc, #456]	; (8005648 <mix_sub_columns+0x28c>)
 800547e:	5c5b      	ldrb	r3, [r3, r1]
 8005480:	4053      	eors	r3, r2
 8005482:	b2d9      	uxtb	r1, r3
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	461a      	mov	r2, r3
 8005488:	4b6d      	ldr	r3, [pc, #436]	; (8005640 <mix_sub_columns+0x284>)
 800548a:	5c9a      	ldrb	r2, [r3, r2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3303      	adds	r3, #3
 8005490:	404a      	eors	r2, r1
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8005496:	7b3b      	ldrb	r3, [r7, #12]
 8005498:	461a      	mov	r2, r3
 800549a:	4b69      	ldr	r3, [pc, #420]	; (8005640 <mix_sub_columns+0x284>)
 800549c:	5c9a      	ldrb	r2, [r3, r2]
 800549e:	7c7b      	ldrb	r3, [r7, #17]
 80054a0:	4619      	mov	r1, r3
 80054a2:	4b68      	ldr	r3, [pc, #416]	; (8005644 <mix_sub_columns+0x288>)
 80054a4:	5c5b      	ldrb	r3, [r3, r1]
 80054a6:	4053      	eors	r3, r2
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	7dbb      	ldrb	r3, [r7, #22]
 80054ac:	4619      	mov	r1, r3
 80054ae:	4b66      	ldr	r3, [pc, #408]	; (8005648 <mix_sub_columns+0x28c>)
 80054b0:	5c5b      	ldrb	r3, [r3, r1]
 80054b2:	4053      	eors	r3, r2
 80054b4:	b2d9      	uxtb	r1, r3
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	461a      	mov	r2, r3
 80054ba:	4b63      	ldr	r3, [pc, #396]	; (8005648 <mix_sub_columns+0x28c>)
 80054bc:	5c9a      	ldrb	r2, [r3, r2]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	404a      	eors	r2, r1
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80054c8:	7b3b      	ldrb	r3, [r7, #12]
 80054ca:	461a      	mov	r2, r3
 80054cc:	4b5e      	ldr	r3, [pc, #376]	; (8005648 <mix_sub_columns+0x28c>)
 80054ce:	5c9a      	ldrb	r2, [r3, r2]
 80054d0:	7c7b      	ldrb	r3, [r7, #17]
 80054d2:	4619      	mov	r1, r3
 80054d4:	4b5a      	ldr	r3, [pc, #360]	; (8005640 <mix_sub_columns+0x284>)
 80054d6:	5c5b      	ldrb	r3, [r3, r1]
 80054d8:	4053      	eors	r3, r2
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	7dbb      	ldrb	r3, [r7, #22]
 80054de:	4619      	mov	r1, r3
 80054e0:	4b58      	ldr	r3, [pc, #352]	; (8005644 <mix_sub_columns+0x288>)
 80054e2:	5c5b      	ldrb	r3, [r3, r1]
 80054e4:	4053      	eors	r3, r2
 80054e6:	b2d9      	uxtb	r1, r3
 80054e8:	7afb      	ldrb	r3, [r7, #11]
 80054ea:	461a      	mov	r2, r3
 80054ec:	4b56      	ldr	r3, [pc, #344]	; (8005648 <mix_sub_columns+0x28c>)
 80054ee:	5c9a      	ldrb	r2, [r3, r2]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3305      	adds	r3, #5
 80054f4:	404a      	eors	r2, r1
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80054fa:	7b3b      	ldrb	r3, [r7, #12]
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b52      	ldr	r3, [pc, #328]	; (8005648 <mix_sub_columns+0x28c>)
 8005500:	5c9a      	ldrb	r2, [r3, r2]
 8005502:	7c7b      	ldrb	r3, [r7, #17]
 8005504:	4619      	mov	r1, r3
 8005506:	4b50      	ldr	r3, [pc, #320]	; (8005648 <mix_sub_columns+0x28c>)
 8005508:	5c5b      	ldrb	r3, [r3, r1]
 800550a:	4053      	eors	r3, r2
 800550c:	b2da      	uxtb	r2, r3
 800550e:	7dbb      	ldrb	r3, [r7, #22]
 8005510:	4619      	mov	r1, r3
 8005512:	4b4b      	ldr	r3, [pc, #300]	; (8005640 <mix_sub_columns+0x284>)
 8005514:	5c5b      	ldrb	r3, [r3, r1]
 8005516:	4053      	eors	r3, r2
 8005518:	b2d9      	uxtb	r1, r3
 800551a:	7afb      	ldrb	r3, [r7, #11]
 800551c:	461a      	mov	r2, r3
 800551e:	4b49      	ldr	r3, [pc, #292]	; (8005644 <mix_sub_columns+0x288>)
 8005520:	5c9a      	ldrb	r2, [r3, r2]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3306      	adds	r3, #6
 8005526:	404a      	eors	r2, r1
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800552c:	7b3b      	ldrb	r3, [r7, #12]
 800552e:	461a      	mov	r2, r3
 8005530:	4b44      	ldr	r3, [pc, #272]	; (8005644 <mix_sub_columns+0x288>)
 8005532:	5c9a      	ldrb	r2, [r3, r2]
 8005534:	7c7b      	ldrb	r3, [r7, #17]
 8005536:	4619      	mov	r1, r3
 8005538:	4b43      	ldr	r3, [pc, #268]	; (8005648 <mix_sub_columns+0x28c>)
 800553a:	5c5b      	ldrb	r3, [r3, r1]
 800553c:	4053      	eors	r3, r2
 800553e:	b2da      	uxtb	r2, r3
 8005540:	7dbb      	ldrb	r3, [r7, #22]
 8005542:	4619      	mov	r1, r3
 8005544:	4b40      	ldr	r3, [pc, #256]	; (8005648 <mix_sub_columns+0x28c>)
 8005546:	5c5b      	ldrb	r3, [r3, r1]
 8005548:	4053      	eors	r3, r2
 800554a:	b2d9      	uxtb	r1, r3
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	461a      	mov	r2, r3
 8005550:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <mix_sub_columns+0x284>)
 8005552:	5c9a      	ldrb	r2, [r3, r2]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3307      	adds	r3, #7
 8005558:	404a      	eors	r2, r1
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800555e:	7c3b      	ldrb	r3, [r7, #16]
 8005560:	461a      	mov	r2, r3
 8005562:	4b37      	ldr	r3, [pc, #220]	; (8005640 <mix_sub_columns+0x284>)
 8005564:	5c9a      	ldrb	r2, [r3, r2]
 8005566:	7d7b      	ldrb	r3, [r7, #21]
 8005568:	4619      	mov	r1, r3
 800556a:	4b36      	ldr	r3, [pc, #216]	; (8005644 <mix_sub_columns+0x288>)
 800556c:	5c5b      	ldrb	r3, [r3, r1]
 800556e:	4053      	eors	r3, r2
 8005570:	b2da      	uxtb	r2, r3
 8005572:	7abb      	ldrb	r3, [r7, #10]
 8005574:	4619      	mov	r1, r3
 8005576:	4b34      	ldr	r3, [pc, #208]	; (8005648 <mix_sub_columns+0x28c>)
 8005578:	5c5b      	ldrb	r3, [r3, r1]
 800557a:	4053      	eors	r3, r2
 800557c:	b2d9      	uxtb	r1, r3
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	461a      	mov	r2, r3
 8005582:	4b31      	ldr	r3, [pc, #196]	; (8005648 <mix_sub_columns+0x28c>)
 8005584:	5c9a      	ldrb	r2, [r3, r2]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3308      	adds	r3, #8
 800558a:	404a      	eors	r2, r1
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8005590:	7c3b      	ldrb	r3, [r7, #16]
 8005592:	461a      	mov	r2, r3
 8005594:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <mix_sub_columns+0x28c>)
 8005596:	5c9a      	ldrb	r2, [r3, r2]
 8005598:	7d7b      	ldrb	r3, [r7, #21]
 800559a:	4619      	mov	r1, r3
 800559c:	4b28      	ldr	r3, [pc, #160]	; (8005640 <mix_sub_columns+0x284>)
 800559e:	5c5b      	ldrb	r3, [r3, r1]
 80055a0:	4053      	eors	r3, r2
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	7abb      	ldrb	r3, [r7, #10]
 80055a6:	4619      	mov	r1, r3
 80055a8:	4b26      	ldr	r3, [pc, #152]	; (8005644 <mix_sub_columns+0x288>)
 80055aa:	5c5b      	ldrb	r3, [r3, r1]
 80055ac:	4053      	eors	r3, r2
 80055ae:	b2d9      	uxtb	r1, r3
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	461a      	mov	r2, r3
 80055b4:	4b24      	ldr	r3, [pc, #144]	; (8005648 <mix_sub_columns+0x28c>)
 80055b6:	5c9a      	ldrb	r2, [r3, r2]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3309      	adds	r3, #9
 80055bc:	404a      	eors	r2, r1
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80055c2:	7c3b      	ldrb	r3, [r7, #16]
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b20      	ldr	r3, [pc, #128]	; (8005648 <mix_sub_columns+0x28c>)
 80055c8:	5c9a      	ldrb	r2, [r3, r2]
 80055ca:	7d7b      	ldrb	r3, [r7, #21]
 80055cc:	4619      	mov	r1, r3
 80055ce:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <mix_sub_columns+0x28c>)
 80055d0:	5c5b      	ldrb	r3, [r3, r1]
 80055d2:	4053      	eors	r3, r2
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	7abb      	ldrb	r3, [r7, #10]
 80055d8:	4619      	mov	r1, r3
 80055da:	4b19      	ldr	r3, [pc, #100]	; (8005640 <mix_sub_columns+0x284>)
 80055dc:	5c5b      	ldrb	r3, [r3, r1]
 80055de:	4053      	eors	r3, r2
 80055e0:	b2d9      	uxtb	r1, r3
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <mix_sub_columns+0x288>)
 80055e8:	5c9a      	ldrb	r2, [r3, r2]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	330a      	adds	r3, #10
 80055ee:	404a      	eors	r2, r1
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80055f4:	7c3b      	ldrb	r3, [r7, #16]
 80055f6:	461a      	mov	r2, r3
 80055f8:	4b12      	ldr	r3, [pc, #72]	; (8005644 <mix_sub_columns+0x288>)
 80055fa:	5c9a      	ldrb	r2, [r3, r2]
 80055fc:	7d7b      	ldrb	r3, [r7, #21]
 80055fe:	4619      	mov	r1, r3
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <mix_sub_columns+0x28c>)
 8005602:	5c5b      	ldrb	r3, [r3, r1]
 8005604:	4053      	eors	r3, r2
 8005606:	b2da      	uxtb	r2, r3
 8005608:	7abb      	ldrb	r3, [r7, #10]
 800560a:	4619      	mov	r1, r3
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <mix_sub_columns+0x28c>)
 800560e:	5c5b      	ldrb	r3, [r3, r1]
 8005610:	4053      	eors	r3, r2
 8005612:	b2d9      	uxtb	r1, r3
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	461a      	mov	r2, r3
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <mix_sub_columns+0x284>)
 800561a:	5c9a      	ldrb	r2, [r3, r2]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	330b      	adds	r3, #11
 8005620:	404a      	eors	r2, r1
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8005626:	7d3b      	ldrb	r3, [r7, #20]
 8005628:	461a      	mov	r2, r3
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <mix_sub_columns+0x284>)
 800562c:	5c9a      	ldrb	r2, [r3, r2]
 800562e:	7a7b      	ldrb	r3, [r7, #9]
 8005630:	4619      	mov	r1, r3
 8005632:	4b04      	ldr	r3, [pc, #16]	; (8005644 <mix_sub_columns+0x288>)
 8005634:	5c5b      	ldrb	r3, [r3, r1]
 8005636:	4053      	eors	r3, r2
 8005638:	b2da      	uxtb	r2, r3
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	4619      	mov	r1, r3
 800563e:	e005      	b.n	800564c <mix_sub_columns+0x290>
 8005640:	0800f9bc 	.word	0x0800f9bc
 8005644:	0800fabc 	.word	0x0800fabc
 8005648:	0800f8bc 	.word	0x0800f8bc
 800564c:	4b2d      	ldr	r3, [pc, #180]	; (8005704 <mix_sub_columns+0x348>)
 800564e:	5c5b      	ldrb	r3, [r3, r1]
 8005650:	4053      	eors	r3, r2
 8005652:	b2d9      	uxtb	r1, r3
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	461a      	mov	r2, r3
 8005658:	4b2a      	ldr	r3, [pc, #168]	; (8005704 <mix_sub_columns+0x348>)
 800565a:	5c9a      	ldrb	r2, [r3, r2]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	330c      	adds	r3, #12
 8005660:	404a      	eors	r2, r1
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8005666:	7d3b      	ldrb	r3, [r7, #20]
 8005668:	461a      	mov	r2, r3
 800566a:	4b26      	ldr	r3, [pc, #152]	; (8005704 <mix_sub_columns+0x348>)
 800566c:	5c9a      	ldrb	r2, [r3, r2]
 800566e:	7a7b      	ldrb	r3, [r7, #9]
 8005670:	4619      	mov	r1, r3
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <mix_sub_columns+0x34c>)
 8005674:	5c5b      	ldrb	r3, [r3, r1]
 8005676:	4053      	eors	r3, r2
 8005678:	b2da      	uxtb	r2, r3
 800567a:	7bbb      	ldrb	r3, [r7, #14]
 800567c:	4619      	mov	r1, r3
 800567e:	4b23      	ldr	r3, [pc, #140]	; (800570c <mix_sub_columns+0x350>)
 8005680:	5c5b      	ldrb	r3, [r3, r1]
 8005682:	4053      	eors	r3, r2
 8005684:	b2d9      	uxtb	r1, r3
 8005686:	7cfb      	ldrb	r3, [r7, #19]
 8005688:	461a      	mov	r2, r3
 800568a:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <mix_sub_columns+0x348>)
 800568c:	5c9a      	ldrb	r2, [r3, r2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	330d      	adds	r3, #13
 8005692:	404a      	eors	r2, r1
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8005698:	7d3b      	ldrb	r3, [r7, #20]
 800569a:	461a      	mov	r2, r3
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <mix_sub_columns+0x348>)
 800569e:	5c9a      	ldrb	r2, [r3, r2]
 80056a0:	7a7b      	ldrb	r3, [r7, #9]
 80056a2:	4619      	mov	r1, r3
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <mix_sub_columns+0x348>)
 80056a6:	5c5b      	ldrb	r3, [r3, r1]
 80056a8:	4053      	eors	r3, r2
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	4619      	mov	r1, r3
 80056b0:	4b15      	ldr	r3, [pc, #84]	; (8005708 <mix_sub_columns+0x34c>)
 80056b2:	5c5b      	ldrb	r3, [r3, r1]
 80056b4:	4053      	eors	r3, r2
 80056b6:	b2d9      	uxtb	r1, r3
 80056b8:	7cfb      	ldrb	r3, [r7, #19]
 80056ba:	461a      	mov	r2, r3
 80056bc:	4b13      	ldr	r3, [pc, #76]	; (800570c <mix_sub_columns+0x350>)
 80056be:	5c9a      	ldrb	r2, [r3, r2]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	330e      	adds	r3, #14
 80056c4:	404a      	eors	r2, r1
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80056ca:	7d3b      	ldrb	r3, [r7, #20]
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b0f      	ldr	r3, [pc, #60]	; (800570c <mix_sub_columns+0x350>)
 80056d0:	5c9a      	ldrb	r2, [r3, r2]
 80056d2:	7a7b      	ldrb	r3, [r7, #9]
 80056d4:	4619      	mov	r1, r3
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <mix_sub_columns+0x348>)
 80056d8:	5c5b      	ldrb	r3, [r3, r1]
 80056da:	4053      	eors	r3, r2
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	7bbb      	ldrb	r3, [r7, #14]
 80056e0:	4619      	mov	r1, r3
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <mix_sub_columns+0x348>)
 80056e4:	5c5b      	ldrb	r3, [r3, r1]
 80056e6:	4053      	eors	r3, r2
 80056e8:	b2d9      	uxtb	r1, r3
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
 80056ec:	461a      	mov	r2, r3
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <mix_sub_columns+0x34c>)
 80056f0:	5c9a      	ldrb	r2, [r3, r2]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	330f      	adds	r3, #15
 80056f6:	404a      	eors	r2, r1
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
  }
 80056fc:	bf00      	nop
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	0800f8bc 	.word	0x0800f8bc
 8005708:	0800f9bc 	.word	0x0800f9bc
 800570c:	0800fabc 	.word	0x0800fabc

08005710 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	460b      	mov	r3, r1
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800571e:	7afb      	ldrb	r3, [r7, #11]
 8005720:	3b10      	subs	r3, #16
 8005722:	2b10      	cmp	r3, #16
 8005724:	bf8c      	ite	hi
 8005726:	2201      	movhi	r2, #1
 8005728:	2200      	movls	r2, #0
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	2a00      	cmp	r2, #0
 800572e:	d10d      	bne.n	800574c <lorawan_aes_set_key+0x3c>
 8005730:	2201      	movs	r2, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800573a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 8005754:	23ff      	movs	r3, #255	; 0xff
 8005756:	e0b2      	b.n	80058be <lorawan_aes_set_key+0x1ae>
        break;
 8005758:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7afa      	ldrb	r2, [r7, #11]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fbfa 	bl	8004f5a <copy_block_nn>
    hi = (keylen + 28) << 2;
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	331c      	adds	r3, #28
 800576a:	b2db      	uxtb	r3, r3
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 8005770:	7c7b      	ldrb	r3, [r7, #17]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	b2db      	uxtb	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b2da      	uxtb	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8005780:	7afb      	ldrb	r3, [r7, #11]
 8005782:	75fb      	strb	r3, [r7, #23]
 8005784:	2301      	movs	r3, #1
 8005786:	75bb      	strb	r3, [r7, #22]
 8005788:	e093      	b.n	80058b2 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	3b04      	subs	r3, #4
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	5cd3      	ldrb	r3, [r2, r3]
 8005792:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	3b03      	subs	r3, #3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	5cd3      	ldrb	r3, [r2, r3]
 800579c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	3b02      	subs	r3, #2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	5cd3      	ldrb	r3, [r2, r3]
 80057a6:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	5cd3      	ldrb	r3, [r2, r3]
 80057b0:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	7afa      	ldrb	r2, [r7, #11]
 80057b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80057ba:	fb01 f202 	mul.w	r2, r1, r2
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d127      	bne.n	8005816 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 80057c6:	7d7b      	ldrb	r3, [r7, #21]
 80057c8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 80057ca:	7d3b      	ldrb	r3, [r7, #20]
 80057cc:	4a3e      	ldr	r2, [pc, #248]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 80057ce:	5cd2      	ldrb	r2, [r2, r3]
 80057d0:	7dbb      	ldrb	r3, [r7, #22]
 80057d2:	4053      	eors	r3, r2
 80057d4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	4a3b      	ldr	r2, [pc, #236]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 80057da:	5cd3      	ldrb	r3, [r2, r3]
 80057dc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 80057de:	7cbb      	ldrb	r3, [r7, #18]
 80057e0:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 80057e2:	5cd3      	ldrb	r3, [r2, r3]
 80057e4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 80057e6:	7c3b      	ldrb	r3, [r7, #16]
 80057e8:	4a37      	ldr	r2, [pc, #220]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 80057ea:	5cd3      	ldrb	r3, [r2, r3]
 80057ec:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 80057ee:	7dbb      	ldrb	r3, [r7, #22]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	b25a      	sxtb	r2, r3
 80057f4:	7dbb      	ldrb	r3, [r7, #22]
 80057f6:	09db      	lsrs	r3, r3, #7
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	4619      	mov	r1, r3
 80057fc:	0049      	lsls	r1, r1, #1
 80057fe:	440b      	add	r3, r1
 8005800:	4619      	mov	r1, r3
 8005802:	00c8      	lsls	r0, r1, #3
 8005804:	4619      	mov	r1, r3
 8005806:	4603      	mov	r3, r0
 8005808:	440b      	add	r3, r1
 800580a:	b2db      	uxtb	r3, r3
 800580c:	b25b      	sxtb	r3, r3
 800580e:	4053      	eors	r3, r2
 8005810:	b25b      	sxtb	r3, r3
 8005812:	75bb      	strb	r3, [r7, #22]
 8005814:	e01c      	b.n	8005850 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	2b18      	cmp	r3, #24
 800581a:	d919      	bls.n	8005850 <lorawan_aes_set_key+0x140>
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	7afa      	ldrb	r2, [r7, #11]
 8005820:	fbb3 f1f2 	udiv	r1, r3, r2
 8005824:	fb01 f202 	mul.w	r2, r1, r2
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b10      	cmp	r3, #16
 800582e:	d10f      	bne.n	8005850 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 8005830:	7d7b      	ldrb	r3, [r7, #21]
 8005832:	4a25      	ldr	r2, [pc, #148]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 8005834:	5cd3      	ldrb	r3, [r2, r3]
 8005836:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 8005838:	7d3b      	ldrb	r3, [r7, #20]
 800583a:	4a23      	ldr	r2, [pc, #140]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 800583c:	5cd3      	ldrb	r3, [r2, r3]
 800583e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	4a21      	ldr	r2, [pc, #132]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 8005844:	5cd3      	ldrb	r3, [r2, r3]
 8005846:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 8005848:	7cbb      	ldrb	r3, [r7, #18]
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <lorawan_aes_set_key+0x1b8>)
 800584c:	5cd3      	ldrb	r3, [r2, r3]
 800584e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 8005850:	7dfa      	ldrb	r2, [r7, #23]
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8005858:	7c3b      	ldrb	r3, [r7, #16]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	5cd1      	ldrb	r1, [r2, r3]
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	7d7a      	ldrb	r2, [r7, #21]
 8005862:	404a      	eors	r2, r1
 8005864:	b2d1      	uxtb	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800586a:	7c3b      	ldrb	r3, [r7, #16]
 800586c:	3301      	adds	r3, #1
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	5cd1      	ldrb	r1, [r2, r3]
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	3301      	adds	r3, #1
 8005876:	7d3a      	ldrb	r2, [r7, #20]
 8005878:	404a      	eors	r2, r1
 800587a:	b2d1      	uxtb	r1, r2
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8005880:	7c3b      	ldrb	r3, [r7, #16]
 8005882:	3302      	adds	r3, #2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	5cd1      	ldrb	r1, [r2, r3]
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	3302      	adds	r3, #2
 800588c:	7cfa      	ldrb	r2, [r7, #19]
 800588e:	404a      	eors	r2, r1
 8005890:	b2d1      	uxtb	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8005896:	7c3b      	ldrb	r3, [r7, #16]
 8005898:	3303      	adds	r3, #3
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	5cd1      	ldrb	r1, [r2, r3]
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	3303      	adds	r3, #3
 80058a2:	7cba      	ldrb	r2, [r7, #18]
 80058a4:	404a      	eors	r2, r1
 80058a6:	b2d1      	uxtb	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	3304      	adds	r3, #4
 80058b0:	75fb      	strb	r3, [r7, #23]
 80058b2:	7dfa      	ldrb	r2, [r7, #23]
 80058b4:	7c7b      	ldrb	r3, [r7, #17]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	f4ff af67 	bcc.w	800578a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	0800f8bc 	.word	0x0800f8bc

080058cc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d038      	beq.n	8005954 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fc07 	bl	80050fe <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058f6:	e014      	b.n	8005922 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80058f8:	f107 0314 	add.w	r3, r7, #20
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fd5d 	bl	80053bc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005908:	0112      	lsls	r2, r2, #4
 800590a:	441a      	add	r2, r3
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	4611      	mov	r1, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fcab 	bl	800526e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8005918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800591c:	3301      	adds	r3, #1
 800591e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005928:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800592c:	429a      	cmp	r2, r3
 800592e:	d3e3      	bcc.n	80058f8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8005930:	f107 0314 	add.w	r3, r7, #20
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fca7 	bl	8005288 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005940:	0112      	lsls	r2, r2, #4
 8005942:	441a      	add	r2, r3
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4619      	mov	r1, r3
 800594a:	68b8      	ldr	r0, [r7, #8]
 800594c:	f7ff fbd7 	bl	80050fe <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8005954:	23ff      	movs	r3, #255	; 0xff
}
 8005956:	4618      	mov	r0, r3
 8005958:	3728      	adds	r7, #40	; 0x28
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	4603      	mov	r3, r0
 8005966:	71fb      	strb	r3, [r7, #7]
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr

08005972 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b088      	sub	sp, #32
 8005976:	af00      	add	r7, sp, #0
 8005978:	4603      	mov	r3, r0
 800597a:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 8005980:	f107 0310 	add.w	r3, r7, #16
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fa4d 	bl	8005e24 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );

    SecureElementGetJoinEui( joinEui );
 800598a:	f107 0318 	add.w	r3, r7, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fa78 	bl	8005e84 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );

    SecureElementGetDevAddr( mode, &devAddr );
 8005994:	f107 020c 	add.w	r2, r7, #12
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f000 faa3 	bl	8005ee8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 80059a2:	bf00      	nop
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	6039      	str	r1, [r7, #0]
 80059b6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	e01a      	b.n	80059f4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <GetKeyByID+0x5c>)
 80059c0:	6819      	ldr	r1, [r3, #0]
 80059c2:	7bfa      	ldrb	r2, [r7, #15]
 80059c4:	4613      	mov	r3, r2
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	4413      	add	r3, r2
 80059ca:	440b      	add	r3, r1
 80059cc:	3318      	adds	r3, #24
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	79fa      	ldrb	r2, [r7, #7]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d10b      	bne.n	80059ee <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <GetKeyByID+0x5c>)
 80059d8:	6819      	ldr	r1, [r3, #0]
 80059da:	7bfa      	ldrb	r2, [r7, #15]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	4413      	add	r3, r2
 80059e2:	3318      	adds	r3, #24
 80059e4:	18ca      	adds	r2, r1, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e006      	b.n	80059fc <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	3301      	adds	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b0a      	cmp	r3, #10
 80059f8:	d9e1      	bls.n	80059be <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80059fa:	2303      	movs	r3, #3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	200004f0 	.word	0x200004f0

08005a0c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b0d1      	sub	sp, #324	; 0x144
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8005a16:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 8005a1a:	6020      	str	r0, [r4, #0]
 8005a1c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8005a20:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005a24:	6001      	str	r1, [r0, #0]
 8005a26:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005a2a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8005a2e:	600a      	str	r2, [r1, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a36:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8005a3a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8005a3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a40:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <ComputeCmac+0x46>
 8005a4a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005a52:	2302      	movs	r3, #2
 8005a54:	e05d      	b.n	8005b12 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8005a56:	f107 0314 	add.w	r3, r7, #20
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe ffd8 	bl	8004a10 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8005a60:	f107 0210 	add.w	r2, r7, #16
 8005a64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a68:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ff9b 	bl	80059ac <GetKeyByID>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8005a7c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d144      	bne.n	8005b0e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8005a84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe ffd3 	bl	8004a42 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8005a9c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aa0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8005aaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005ab2:	f107 0014 	add.w	r0, r7, #20
 8005ab6:	2210      	movs	r2, #16
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	f7fe ffd1 	bl	8004a60 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8005abe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ac2:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8005ac6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005ace:	f107 0014 	add.w	r0, r7, #20
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	f7fe ffc3 	bl	8004a60 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8005ada:	f107 0214 	add.w	r2, r7, #20
 8005ade:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff f87d 	bl	8004be4 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8005aea:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8005aee:	461a      	mov	r2, r3
 8005af0:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	431a      	orrs	r2, r3
 8005af8:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	431a      	orrs	r2, r3
 8005b00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b04:	061b      	lsls	r3, r3, #24
 8005b06:	431a      	orrs	r2, r3
 8005b08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005b0c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8005b0e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd90      	pop	{r4, r7, pc}

08005b1c <SecureElementPrintSessionKeys>:

    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 8005b26:	200b      	movs	r0, #11
 8005b28:	f7ff ff19 	bl	800595e <PrintKey>
    PrintKey( MC_KE_KEY );
 8005b2c:	200c      	movs	r0, #12
 8005b2e:	f7ff ff16 	bl	800595e <PrintKey>
    PrintKey( APP_S_KEY );
 8005b32:	2009      	movs	r0, #9
 8005b34:	f7ff ff13 	bl	800595e <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8005b38:	2008      	movs	r0, #8
 8005b3a:	f7ff ff10 	bl	800595e <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 8005b3e:	200a      	movs	r0, #10
 8005b40:	f7ff ff0d 	bl	800595e <PrintKey>
    PrintIds( mode );
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff ff13 	bl	8005972 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	6039      	str	r1, [r7, #0]
 8005b62:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e04c      	b.n	8005c08 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8005b6e:	2300      	movs	r3, #0
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e045      	b.n	8005c00 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8005b74:	4b26      	ldr	r3, [pc, #152]	; (8005c10 <SecureElementSetKey+0xb8>)
 8005b76:	6819      	ldr	r1, [r3, #0]
 8005b78:	7ffa      	ldrb	r2, [r7, #31]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	4413      	add	r3, r2
 8005b80:	440b      	add	r3, r1
 8005b82:	3318      	adds	r3, #24
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	79fa      	ldrb	r2, [r7, #7]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d136      	bne.n	8005bfa <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	2b0d      	cmp	r3, #13
 8005b90:	d123      	bne.n	8005bda <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8005b92:	2306      	movs	r3, #6
 8005b94:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	f107 0310 	add.w	r3, r7, #16
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8005ba6:	f107 030c 	add.w	r3, r7, #12
 8005baa:	220c      	movs	r2, #12
 8005bac:	2110      	movs	r1, #16
 8005bae:	6838      	ldr	r0, [r7, #0]
 8005bb0:	f000 f84a 	bl	8005c48 <SecureElementAesEncrypt>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8005bb8:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <SecureElementSetKey+0xb8>)
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	7ffa      	ldrb	r2, [r7, #31]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3318      	adds	r3, #24
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f107 010c 	add.w	r1, r7, #12
 8005bce:	2210      	movs	r2, #16
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f006 f860 	bl	800bc96 <memcpy1>
                return retval;
 8005bd6:	7fbb      	ldrb	r3, [r7, #30]
 8005bd8:	e016      	b.n	8005c08 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <SecureElementSetKey+0xb8>)
 8005bdc:	6819      	ldr	r1, [r3, #0]
 8005bde:	7ffa      	ldrb	r2, [r7, #31]
 8005be0:	4613      	mov	r3, r2
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	4413      	add	r3, r2
 8005be6:	3318      	adds	r3, #24
 8005be8:	440b      	add	r3, r1
 8005bea:	3301      	adds	r3, #1
 8005bec:	2210      	movs	r2, #16
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f006 f850 	bl	800bc96 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e006      	b.n	8005c08 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8005bfa:	7ffb      	ldrb	r3, [r7, #31]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	7ffb      	ldrb	r3, [r7, #31]
 8005c02:	2b0a      	cmp	r3, #10
 8005c04:	d9b6      	bls.n	8005b74 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8005c06:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200004f0 	.word	0x200004f0

08005c14 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	2b0b      	cmp	r3, #11
 8005c26:	d901      	bls.n	8005c2c <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e009      	b.n	8005c40 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8005c2c:	78fa      	ldrb	r2, [r7, #3]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fee7 	bl	8005a0c <ComputeCmac>
 8005c3e:	4603      	mov	r3, r0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b0c2      	sub	sp, #264	; 0x108
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c54:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8005c58:	6001      	str	r1, [r0, #0]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005c60:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8005c6e:	460a      	mov	r2, r1
 8005c70:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d006      	beq.n	8005c86 <SecureElementAesEncrypt+0x3e>
 8005c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005c86:	2302      	movs	r3, #2
 8005c88:	e059      	b.n	8005d3e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8005c9c:	2305      	movs	r3, #5
 8005c9e:	e04e      	b.n	8005d3e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	22f0      	movs	r2, #240	; 0xf0
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f006 f82f 	bl	800bd0c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8005cae:	f107 0210 	add.w	r2, r7, #16
 8005cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fe74 	bl	80059ac <GetKeyByID>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 8005cca:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d133      	bne.n	8005d3a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	f107 0214 	add.w	r2, r7, #20
 8005cda:	2110      	movs	r1, #16
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fd17 	bl	8005710 <lorawan_aes_set_key>

        uint8_t block = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 8005ce8:	e020      	b.n	8005d2c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8005cea:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	18d0      	adds	r0, r2, r3
 8005cf2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005cf6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005cfa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4413      	add	r3, r2
 8005d02:	f107 0214 	add.w	r2, r7, #20
 8005d06:	4619      	mov	r1, r3
 8005d08:	f7ff fde0 	bl	80058cc <lorawan_aes_encrypt>
            block = block + 16;
 8005d0c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005d10:	3310      	adds	r3, #16
 8005d12:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 8005d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d1e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005d22:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	3a10      	subs	r2, #16
 8005d2a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8005d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1d7      	bne.n	8005cea <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8005d3a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
 8005d54:	4613      	mov	r3, r2
 8005d56:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e02e      	b.n	8005dc0 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 8005d62:	2306      	movs	r3, #6
 8005d64:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8005d66:	78bb      	ldrb	r3, [r7, #2]
 8005d68:	2b0c      	cmp	r3, #12
 8005d6a:	d104      	bne.n	8005d76 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	2b0b      	cmp	r3, #11
 8005d70:	d001      	beq.n	8005d76 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e024      	b.n	8005dc0 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	f107 0310 	add.w	r3, r7, #16
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	2110      	movs	r1, #16
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ff5a 	bl	8005c48 <SecureElementAesEncrypt>
 8005d94:	4603      	mov	r3, r0
 8005d96:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8005d98:	7ffb      	ldrb	r3, [r7, #31]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 8005d9e:	7ffb      	ldrb	r3, [r7, #31]
 8005da0:	e00e      	b.n	8005dc0 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 8005da2:	f107 020c 	add.w	r2, r7, #12
 8005da6:	78bb      	ldrb	r3, [r7, #2]
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fed4 	bl	8005b58 <SecureElementSetKey>
 8005db0:	4603      	mov	r3, r0
 8005db2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 8005dba:	7ffb      	ldrb	r3, [r7, #31]
 8005dbc:	e000      	b.n	8005dc0 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 8005dbe:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3720      	adds	r7, #32
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <SecureElementRandomNumber>:
    return SECURE_ELEMENT_SUCCESS;
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e006      	b.n	8005de8 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <SecureElementRandomNumber+0x28>)
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	4798      	blx	r3
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	0800fbf4 	.word	0x0800fbf4

08005df4 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005e02:	2302      	movs	r3, #2
 8005e04:	e007      	b.n	8005e16 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <SecureElementSetDevEui+0x2c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f005 ff41 	bl	800bc96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8005e14:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200004f0 	.word	0x200004f0

08005e24 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005e32:	2302      	movs	r3, #2
 8005e34:	e007      	b.n	8005e46 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8005e36:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <SecureElementGetDevEui+0x2c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f005 ff29 	bl	800bc96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8005e44:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	200004f0 	.word	0x200004f0

08005e54 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005e62:	2302      	movs	r3, #2
 8005e64:	e008      	b.n	8005e78 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <SecureElementSetJoinEui+0x2c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f005 ff10 	bl	800bc96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8005e76:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200004f0 	.word	0x200004f0

08005e84 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005e92:	2302      	movs	r3, #2
 8005e94:	e008      	b.n	8005ea8 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <SecureElementGetJoinEui+0x2c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f005 fef8 	bl	800bc96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8005ea6:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	200004f0 	.word	0x200004f0

08005eb4 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d104      	bne.n	8005ed0 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <SecureElementSetDevAddr+0x30>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	611a      	str	r2, [r3, #16]
 8005ece:	e003      	b.n	8005ed8 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <SecureElementSetDevAddr+0x30>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 8005ed8:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	200004f0 	.word	0x200004f0

08005ee8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005efa:	2302      	movs	r3, #2
 8005efc:	e00e      	b.n	8005f1c <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d105      	bne.n	8005f10 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <SecureElementGetDevAddr+0x40>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e004      	b.n	8005f1a <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <SecureElementGetDevAddr+0x40>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8005f1a:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	200004f0 	.word	0x200004f0

08005f2c <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 8005f36:	4a22      	ldr	r2, [pc, #136]	; (8005fc0 <LmHandlerInit+0x94>)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8005f3c:	4b21      	ldr	r3, [pc, #132]	; (8005fc4 <LmHandlerInit+0x98>)
 8005f3e:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <LmHandlerInit+0x9c>)
 8005f40:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8005f42:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <LmHandlerInit+0x98>)
 8005f44:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <LmHandlerInit+0xa0>)
 8005f46:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8005f48:	4b1e      	ldr	r3, [pc, #120]	; (8005fc4 <LmHandlerInit+0x98>)
 8005f4a:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <LmHandlerInit+0xa4>)
 8005f4c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8005f4e:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <LmHandlerInit+0x98>)
 8005f50:	4a20      	ldr	r2, [pc, #128]	; (8005fd4 <LmHandlerInit+0xa8>)
 8005f52:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8005f54:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <LmHandlerInit+0x94>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <LmHandlerInit+0xac>)
 8005f5c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <LmHandlerInit+0x94>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <LmHandlerInit+0xac>)
 8005f66:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <LmHandlerInit+0x94>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <LmHandlerInit+0xac>)
 8005f70:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8005f72:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <LmHandlerInit+0x94>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <LmHandlerInit+0xac>)
 8005f7a:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <LmHandlerInit+0xac>)
 8005f7e:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <LmHandlerInit+0xb0>)
 8005f80:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <LmHandlerInit+0x94>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	4a13      	ldr	r2, [pc, #76]	; (8005fd8 <LmHandlerInit+0xac>)
 8005f8a:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8005f8c:	4914      	ldr	r1, [pc, #80]	; (8005fe0 <LmHandlerInit+0xb4>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f000 fc60 	bl	8006854 <LmHandlerPackageRegister>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	e00a      	b.n	8005fb6 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 f888 	bl	80070b8 <LmhpPackagesRegistrationInit>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb2:	e000      	b.n	8005fb6 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000538 	.word	0x20000538
 8005fc4:	2000053c 	.word	0x2000053c
 8005fc8:	08006519 	.word	0x08006519
 8005fcc:	0800658d 	.word	0x0800658d
 8005fd0:	0800666d 	.word	0x0800666d
 8005fd4:	080067c1 	.word	0x080067c1
 8005fd8:	2000054c 	.word	0x2000054c
 8005fdc:	08006a8d 	.word	0x08006a8d
 8005fe0:	200001d8 	.word	0x200001d8

08005fe4 <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b092      	sub	sp, #72	; 0x48
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	460a      	mov	r2, r1
 8005fee:	71fb      	strb	r3, [r7, #7]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8005ffa:	4b47      	ldr	r3, [pc, #284]	; (8006118 <LmHandlerJoin+0x134>)
 8005ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8006006:	4b44      	ldr	r3, [pc, #272]	; (8006118 <LmHandlerJoin+0x134>)
 8006008:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800600c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d110      	bne.n	8006038 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006016:	2302      	movs	r3, #2
 8006018:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800601c:	4b3f      	ldr	r3, [pc, #252]	; (800611c <LmHandlerJoin+0x138>)
 800601e:	2202      	movs	r2, #2
 8006020:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8006022:	4a3e      	ldr	r2, [pc, #248]	; (800611c <LmHandlerJoin+0x138>)
 8006024:	79bb      	ldrb	r3, [r7, #6]
 8006026:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 8006028:	f002 f8a6 	bl	8008178 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800602c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006030:	4618      	mov	r0, r3
 8006032:	f002 fe7f 	bl	8008d34 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 8006036:	e06b      	b.n	8006110 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800603e:	4b37      	ldr	r3, [pc, #220]	; (800611c <LmHandlerJoin+0x138>)
 8006040:	2201      	movs	r2, #1
 8006042:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006044:	4b34      	ldr	r3, [pc, #208]	; (8006118 <LmHandlerJoin+0x134>)
 8006046:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800604a:	4b34      	ldr	r3, [pc, #208]	; (800611c <LmHandlerJoin+0x138>)
 800604c:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800604e:	4b32      	ldr	r3, [pc, #200]	; (8006118 <LmHandlerJoin+0x134>)
 8006050:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8006054:	4b31      	ldr	r3, [pc, #196]	; (800611c <LmHandlerJoin+0x138>)
 8006056:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006058:	4b30      	ldr	r3, [pc, #192]	; (800611c <LmHandlerJoin+0x138>)
 800605a:	2200      	movs	r2, #0
 800605c:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800605e:	4a2f      	ldr	r2, [pc, #188]	; (800611c <LmHandlerJoin+0x138>)
 8006060:	79bb      	ldrb	r3, [r7, #6]
 8006062:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 8006064:	4b2e      	ldr	r3, [pc, #184]	; (8006120 <LmHandlerJoin+0x13c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d034      	beq.n	80060dc <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8006072:	231e      	movs	r3, #30
 8006074:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8006076:	4b28      	ldr	r3, [pc, #160]	; (8006118 <LmHandlerJoin+0x134>)
 8006078:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800607c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800607e:	f107 030c 	add.w	r3, r7, #12
 8006082:	4618      	mov	r0, r3
 8006084:	f002 fac2 	bl	800860c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8006088:	231f      	movs	r3, #31
 800608a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800608c:	4b22      	ldr	r3, [pc, #136]	; (8006118 <LmHandlerJoin+0x134>)
 800608e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006092:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006094:	f107 030c 	add.w	r3, r7, #12
 8006098:	4618      	mov	r0, r3
 800609a:	f002 fab7 	bl	800860c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800609e:	2321      	movs	r3, #33	; 0x21
 80060a0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <LmHandlerJoin+0x134>)
 80060a4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80060a8:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80060aa:	f107 030c 	add.w	r3, r7, #12
 80060ae:	4618      	mov	r0, r3
 80060b0:	f002 faac 	bl	800860c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 80060b4:	2320      	movs	r3, #32
 80060b6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 80060b8:	4b17      	ldr	r3, [pc, #92]	; (8006118 <LmHandlerJoin+0x134>)
 80060ba:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80060be:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	4618      	mov	r0, r3
 80060c6:	f002 faa1 	bl	800860c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80060ca:	2328      	movs	r3, #40	; 0x28
 80060cc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80060ce:	4b15      	ldr	r3, [pc, #84]	; (8006124 <LmHandlerJoin+0x140>)
 80060d0:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80060d2:	f107 030c 	add.w	r3, r7, #12
 80060d6:	4618      	mov	r0, r3
 80060d8:	f002 fa98 	bl	800860c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 80060dc:	f002 f84c 	bl	8008178 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80060e0:	2301      	movs	r3, #1
 80060e2:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80060e4:	2301      	movs	r3, #1
 80060e6:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4618      	mov	r0, r3
 80060ee:	f002 fa8d 	bl	800860c <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <LmHandlerJoin+0x144>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d004      	beq.n	8006106 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <LmHandlerJoin+0x144>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	4806      	ldr	r0, [pc, #24]	; (800611c <LmHandlerJoin+0x138>)
 8006104:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8006106:	4b04      	ldr	r3, [pc, #16]	; (8006118 <LmHandlerJoin+0x134>)
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f932 	bl	8006374 <LmHandlerRequestClass>
}
 8006110:	bf00      	nop
 8006112:	3748      	adds	r7, #72	; 0x48
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000520 	.word	0x20000520
 800611c:	200001e4 	.word	0x200001e4
 8006120:	2000065a 	.word	0x2000065a
 8006124:	01000300 	.word	0x01000300
 8006128:	20000538 	.word	0x20000538

0800612c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	; 0x30
 8006130:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006132:	2301      	movs	r3, #1
 8006134:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	4618      	mov	r0, r3
 800613a:	f002 f8b1 	bl	80082a0 <LoRaMacMibGetRequestConfirm>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 8006144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800614c:	7a3b      	ldrb	r3, [r7, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8006152:	2300      	movs	r3, #0
 8006154:	e002      	b.n	800615c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800615a:	2300      	movs	r3, #0
    }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3730      	adds	r7, #48	; 0x30
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
 8006170:	4613      	mov	r3, r2
 8006172:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8006174:	23ff      	movs	r3, #255	; 0xff
 8006176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800617a:	f000 ffcd 	bl	8007118 <LoRaMacIsBusy>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006184:	f06f 0301 	mvn.w	r3, #1
 8006188:	e0be      	b.n	8006308 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800618a:	f000 ffe1 	bl	8007150 <LoRaMacIsStopped>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006194:	f06f 0302 	mvn.w	r3, #2
 8006198:	e0b6      	b.n	8006308 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800619a:	f7ff ffc7 	bl	800612c <LmHandlerJoinStatus>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d00a      	beq.n	80061ba <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80061a4:	4b5a      	ldr	r3, [pc, #360]	; (8006310 <LmHandlerSend+0x1ac>)
 80061a6:	79db      	ldrb	r3, [r3, #7]
 80061a8:	4a59      	ldr	r2, [pc, #356]	; (8006310 <LmHandlerSend+0x1ac>)
 80061aa:	7a12      	ldrb	r2, [r2, #8]
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ff18 	bl	8005fe4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80061b4:	f06f 0302 	mvn.w	r3, #2
 80061b8:	e0a6      	b.n	8006308 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 80061ba:	4b56      	ldr	r3, [pc, #344]	; (8006314 <LmHandlerSend+0x1b0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4798      	blx	r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	4b51      	ldr	r3, [pc, #324]	; (8006314 <LmHandlerSend+0x1b0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d006      	beq.n	80061e4 <LmHandlerSend+0x80>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80061de:	f06f 0303 	mvn.w	r3, #3
 80061e2:	e091      	b.n	8006308 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 80061e4:	4a4c      	ldr	r2, [pc, #304]	; (8006318 <LmHandlerSend+0x1b4>)
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80061f8:	4b48      	ldr	r3, [pc, #288]	; (800631c <LmHandlerSend+0x1b8>)
 80061fa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80061fe:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	f107 020c 	add.w	r2, r7, #12
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f001 ffc2 	bl	8008194 <LoRaMacQueryTxPossible>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006216:	2300      	movs	r3, #0
 8006218:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8006222:	23f9      	movs	r3, #249	; 0xf9
 8006224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006228:	e009      	b.n	800623e <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	b29b      	uxth	r3, r3
 8006236:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <LmHandlerSend+0x1b4>)
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	3310      	adds	r3, #16
 8006244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006248:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800624c:	4b33      	ldr	r3, [pc, #204]	; (800631c <LmHandlerSend+0x1b8>)
 800624e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8006252:	4b31      	ldr	r3, [pc, #196]	; (8006318 <LmHandlerSend+0x1b4>)
 8006254:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8006256:	78ba      	ldrb	r2, [r7, #2]
 8006258:	f107 0310 	add.w	r3, r7, #16
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f002 feba 	bl	8008fd8 <LoRaMacMcpsRequest>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	4a2c      	ldr	r2, [pc, #176]	; (8006320 <LmHandlerSend+0x1bc>)
 800626e:	6013      	str	r3, [r2, #0]

    switch( status )
 8006270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006274:	2b11      	cmp	r3, #17
 8006276:	d840      	bhi.n	80062fa <LmHandlerSend+0x196>
 8006278:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <LmHandlerSend+0x11c>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	080062c9 	.word	0x080062c9
 8006284:	080062db 	.word	0x080062db
 8006288:	080062fb 	.word	0x080062fb
 800628c:	080062fb 	.word	0x080062fb
 8006290:	080062fb 	.word	0x080062fb
 8006294:	080062fb 	.word	0x080062fb
 8006298:	080062fb 	.word	0x080062fb
 800629c:	080062e3 	.word	0x080062e3
 80062a0:	080062fb 	.word	0x080062fb
 80062a4:	080062fb 	.word	0x080062fb
 80062a8:	080062fb 	.word	0x080062fb
 80062ac:	080062f3 	.word	0x080062f3
 80062b0:	080062fb 	.word	0x080062fb
 80062b4:	080062fb 	.word	0x080062fb
 80062b8:	080062db 	.word	0x080062db
 80062bc:	080062db 	.word	0x080062db
 80062c0:	080062db 	.word	0x080062db
 80062c4:	080062eb 	.word	0x080062eb
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 80062c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062cc:	f113 0f07 	cmn.w	r3, #7
 80062d0:	d017      	beq.n	8006302 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80062d8:	e013      	b.n	8006302 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 80062da:	23fe      	movs	r3, #254	; 0xfe
 80062dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80062e0:	e010      	b.n	8006304 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80062e2:	23fd      	movs	r3, #253	; 0xfd
 80062e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80062e8:	e00c      	b.n	8006304 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80062ea:	23fb      	movs	r3, #251	; 0xfb
 80062ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80062f0:	e008      	b.n	8006304 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80062f2:	23fa      	movs	r3, #250	; 0xfa
 80062f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80062f8:	e004      	b.n	8006304 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80062fa:	23ff      	movs	r3, #255	; 0xff
 80062fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8006300:	e000      	b.n	8006304 <LmHandlerSend+0x1a0>
            break;
 8006302:	bf00      	nop
    }

    return lmhStatus;
 8006304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	; 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	200001e4 	.word	0x200001e4
 8006314:	2000050c 	.word	0x2000050c
 8006318:	200001f0 	.word	0x200001f0
 800631c:	20000520 	.word	0x20000520
 8006320:	20000564 	.word	0x20000564

08006324 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800632a:	230a      	movs	r3, #10
 800632c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800632e:	463b      	mov	r3, r7
 8006330:	4618      	mov	r0, r3
 8006332:	f002 fcff 	bl	8008d34 <LoRaMacMlmeRequest>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4a06      	ldr	r2, [pc, #24]	; (8006358 <LmHandlerDeviceTimeReq+0x34>)
 800633e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8006346:	2300      	movs	r3, #0
 8006348:	e001      	b.n	800634e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800634a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000564 	.word	0x20000564

0800635c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08e      	sub	sp, #56	; 0x38
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800637e:	2300      	movs	r3, #0
 8006380:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 8006384:	f000 fec8 	bl	8007118 <LoRaMacIsBusy>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800638e:	f06f 0301 	mvn.w	r3, #1
 8006392:	e073      	b.n	800647c <LmHandlerRequestClass+0x108>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8006394:	f7ff feca 	bl	800612c <LmHandlerJoinStatus>
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d002      	beq.n	80063a4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800639e:	f06f 0302 	mvn.w	r3, #2
 80063a2:	e06b      	b.n	800647c <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 80063a4:	2300      	movs	r3, #0
 80063a6:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80063a8:	f107 030c 	add.w	r3, r7, #12
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 ff77 	bl	80082a0 <LoRaMacMibGetRequestConfirm>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	e05e      	b.n	800647c <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 80063be:	7c3b      	ldrb	r3, [r7, #16]
 80063c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 80063c4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d04d      	beq.n	800646a <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d028      	beq.n	8006426 <LmHandlerRequestClass+0xb2>
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	dc4a      	bgt.n	800646e <LmHandlerRequestClass+0xfa>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <LmHandlerRequestClass+0x6e>
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d01e      	beq.n	800641e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 80063e0:	e045      	b.n	800646e <LmHandlerRequestClass+0xfa>
                    if( currentClass != CLASS_A )
 80063e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d043      	beq.n	8006472 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80063ee:	f107 030c 	add.w	r3, r7, #12
 80063f2:	4618      	mov	r0, r3
 80063f4:	f002 f90a 	bl	800860c <LoRaMacMibSetRequestConfirm>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80063fe:	4b21      	ldr	r3, [pc, #132]	; (8006484 <LmHandlerRequestClass+0x110>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d034      	beq.n	8006472 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <LmHandlerRequestClass+0x110>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	79fa      	ldrb	r2, [r7, #7]
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
                break;
 8006414:	e02d      	b.n	8006472 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8006416:	23ff      	movs	r3, #255	; 0xff
 8006418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800641c:	e029      	b.n	8006472 <LmHandlerRequestClass+0xfe>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800641e:	23ff      	movs	r3, #255	; 0xff
 8006420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8006424:	e028      	b.n	8006478 <LmHandlerRequestClass+0x104>
                    if( currentClass != CLASS_A )
 8006426:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800642e:	23ff      	movs	r3, #255	; 0xff
 8006430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8006434:	e01f      	b.n	8006476 <LmHandlerRequestClass+0x102>
                        mibReq.Param.Class = newClass;
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800643a:	f107 030c 	add.w	r3, r7, #12
 800643e:	4618      	mov	r0, r3
 8006440:	f002 f8e4 	bl	800860c <LoRaMacMibSetRequestConfirm>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800644a:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <LmHandlerRequestClass+0x110>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d010      	beq.n	8006476 <LmHandlerRequestClass+0x102>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <LmHandlerRequestClass+0x110>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	79fa      	ldrb	r2, [r7, #7]
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
                break;
 8006460:	e009      	b.n	8006476 <LmHandlerRequestClass+0x102>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8006462:	23ff      	movs	r3, #255	; 0xff
 8006464:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8006468:	e005      	b.n	8006476 <LmHandlerRequestClass+0x102>
        }
    }
 800646a:	bf00      	nop
 800646c:	e004      	b.n	8006478 <LmHandlerRequestClass+0x104>
                break;
 800646e:	bf00      	nop
 8006470:	e002      	b.n	8006478 <LmHandlerRequestClass+0x104>
                break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <LmHandlerRequestClass+0x104>
                break;
 8006476:	bf00      	nop
    return errorStatus;
 8006478:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800647c:	4618      	mov	r0, r3
 800647e:	3738      	adds	r7, #56	; 0x38
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000538 	.word	0x20000538

08006488 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295
 800649a:	e010      	b.n	80064be <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800649c:	2300      	movs	r3, #0
 800649e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80064a0:	f107 0308 	add.w	r3, r7, #8
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fefb 	bl	80082a0 <LoRaMacMibGetRequestConfirm>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
 80064b4:	e003      	b.n	80064be <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 80064b6:	7b3a      	ldrb	r2, [r7, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3730      	adds	r7, #48	; 0x30
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08c      	sub	sp, #48	; 0x30
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295
 80064da:	e016      	b.n	800650a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 80064dc:	231f      	movs	r3, #31
 80064de:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 80064e0:	f107 0308 	add.w	r3, r7, #8
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fedb 	bl	80082a0 <LoRaMacMibGetRequestConfirm>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
 80064f4:	e009      	b.n	800650a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 80064f6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f993 2000 	ldrsb.w	r2, [r3]
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <LmHandlerGetTxDatarate+0x4c>)
 8006506:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3730      	adds	r7, #48	; 0x30
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000520 	.word	0x20000520

08006518 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8006520:	4b18      	ldr	r3, [pc, #96]	; (8006584 <McpsConfirm+0x6c>)
 8006522:	2201      	movs	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	785a      	ldrb	r2, [r3, #1]
 800652a:	4b16      	ldr	r3, [pc, #88]	; (8006584 <McpsConfirm+0x6c>)
 800652c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	789b      	ldrb	r3, [r3, #2]
 8006532:	b25a      	sxtb	r2, r3
 8006534:	4b13      	ldr	r3, [pc, #76]	; (8006584 <McpsConfirm+0x6c>)
 8006536:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4a11      	ldr	r2, [pc, #68]	; (8006584 <McpsConfirm+0x6c>)
 800653e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8006546:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <McpsConfirm+0x6c>)
 8006548:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <McpsConfirm+0x6c>)
 8006552:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	791b      	ldrb	r3, [r3, #4]
 8006558:	461a      	mov	r2, r3
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <McpsConfirm+0x6c>)
 800655c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <McpsConfirm+0x70>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <McpsConfirm+0x70>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	4805      	ldr	r0, [pc, #20]	; (8006584 <McpsConfirm+0x6c>)
 8006570:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	2000      	movs	r0, #0
 8006576:	f000 f9cd 	bl	8006914 <LmHandlerPackagesNotify>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	200001f0 	.word	0x200001f0
 8006588:	20000538 	.word	0x20000538

0800658c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800659a:	4b32      	ldr	r3, [pc, #200]	; (8006664 <McpsIndication+0xd8>)
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	785a      	ldrb	r2, [r3, #1]
 80065a4:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <McpsIndication+0xd8>)
 80065a6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80065a8:	4b2e      	ldr	r3, [pc, #184]	; (8006664 <McpsIndication+0xd8>)
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d155      	bne.n	800665c <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	791b      	ldrb	r3, [r3, #4]
 80065b4:	b25a      	sxtb	r2, r3
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <McpsIndication+0xd8>)
 80065b8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065c0:	b25a      	sxtb	r2, r3
 80065c2:	4b28      	ldr	r3, [pc, #160]	; (8006664 <McpsIndication+0xd8>)
 80065c4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80065cc:	4b25      	ldr	r3, [pc, #148]	; (8006664 <McpsIndication+0xd8>)
 80065ce:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	78da      	ldrb	r2, [r3, #3]
 80065d4:	4b23      	ldr	r3, [pc, #140]	; (8006664 <McpsIndication+0xd8>)
 80065d6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	4a21      	ldr	r2, [pc, #132]	; (8006664 <McpsIndication+0xd8>)
 80065de:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7b1b      	ldrb	r3, [r3, #12]
 80065ea:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 80065f2:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <McpsIndication+0xdc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80065fc:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <McpsIndication+0xdc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	f107 0218 	add.w	r2, r7, #24
 8006606:	4917      	ldr	r1, [pc, #92]	; (8006664 <McpsIndication+0xd8>)
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800660c:	4b16      	ldr	r3, [pc, #88]	; (8006668 <McpsIndication+0xdc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <McpsIndication+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7e1b      	ldrb	r3, [r3, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <McpsIndication+0xdc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	2001      	movs	r0, #1
 800662a:	f000 f973 	bl	8006914 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800662e:	f107 0317 	add.w	r3, r7, #23
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff ff28 	bl	8006488 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	795b      	ldrb	r3, [r3, #5]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00e      	beq.n	800665e <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 8006640:	2300      	movs	r3, #0
 8006642:	733b      	strb	r3, [r7, #12]
 8006644:	2300      	movs	r3, #0
 8006646:	737b      	strb	r3, [r7, #13]
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800664c:	f107 030c 	add.w	r3, r7, #12
 8006650:	2201      	movs	r2, #1
 8006652:	2100      	movs	r1, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fd85 	bl	8006164 <LmHandlerSend>
 800665a:	e000      	b.n	800665e <McpsIndication+0xd2>
        return;
 800665c:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800665e:	3720      	adds	r7, #32
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	2000020c 	.word	0x2000020c
 8006668:	20000538 	.word	0x20000538

0800666c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	; 0x30
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8006674:	4b4a      	ldr	r3, [pc, #296]	; (80067a0 <MlmeConfirm+0x134>)
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	785a      	ldrb	r2, [r3, #1]
 800667e:	4b48      	ldr	r3, [pc, #288]	; (80067a0 <MlmeConfirm+0x134>)
 8006680:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8006682:	4b48      	ldr	r3, [pc, #288]	; (80067a4 <MlmeConfirm+0x138>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800668c:	4b45      	ldr	r3, [pc, #276]	; (80067a4 <MlmeConfirm+0x138>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	4843      	ldr	r0, [pc, #268]	; (80067a0 <MlmeConfirm+0x134>)
 8006694:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	2002      	movs	r0, #2
 800669a:	f000 f93b 	bl	8006914 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	2b0c      	cmp	r3, #12
 80066a6:	d874      	bhi.n	8006792 <MlmeConfirm+0x126>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <MlmeConfirm+0x44>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	08006793 	.word	0x08006793
 80066b8:	08006793 	.word	0x08006793
 80066bc:	08006793 	.word	0x08006793
 80066c0:	08006761 	.word	0x08006761
 80066c4:	08006793 	.word	0x08006793
 80066c8:	08006793 	.word	0x08006793
 80066cc:	08006793 	.word	0x08006793
 80066d0:	08006793 	.word	0x08006793
 80066d4:	08006793 	.word	0x08006793
 80066d8:	08006793 	.word	0x08006793
 80066dc:	08006779 	.word	0x08006779
 80066e0:	08006793 	.word	0x08006793
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 80066e4:	2306      	movs	r3, #6
 80066e6:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80066e8:	f107 0308 	add.w	r3, r7, #8
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 fdd7 	bl	80082a0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80066f2:	4b2d      	ldr	r3, [pc, #180]	; (80067a8 <MlmeConfirm+0x13c>)
 80066f4:	79db      	ldrb	r3, [r3, #7]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff fbda 	bl	8005eb4 <SecureElementSetDevAddr>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4a28      	ldr	r2, [pc, #160]	; (80067ac <MlmeConfirm+0x140>)
 800670a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800670c:	4828      	ldr	r0, [pc, #160]	; (80067b0 <MlmeConfirm+0x144>)
 800670e:	f7ff fedb 	bl	80064c8 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8006712:	4828      	ldr	r0, [pc, #160]	; (80067b4 <MlmeConfirm+0x148>)
 8006714:	f000 f992 	bl	8006a3c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8006718:	4b21      	ldr	r3, [pc, #132]	; (80067a0 <MlmeConfirm+0x134>)
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d108      	bne.n	8006732 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006720:	4b21      	ldr	r3, [pc, #132]	; (80067a8 <MlmeConfirm+0x13c>)
 8006722:	2200      	movs	r2, #0
 8006724:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8006726:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <MlmeConfirm+0x14c>)
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fe22 	bl	8006374 <LmHandlerRequestClass>
 8006730:	e002      	b.n	8006738 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8006732:	4b1d      	ldr	r3, [pc, #116]	; (80067a8 <MlmeConfirm+0x13c>)
 8006734:	22ff      	movs	r2, #255	; 0xff
 8006736:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8006738:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <MlmeConfirm+0x138>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006742:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <MlmeConfirm+0x138>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	4817      	ldr	r0, [pc, #92]	; (80067a8 <MlmeConfirm+0x13c>)
 800674a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800674c:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <MlmeConfirm+0x134>)
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d120      	bne.n	8006796 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8006754:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <MlmeConfirm+0x13c>)
 8006756:	79db      	ldrb	r3, [r3, #7]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff f9df 	bl	8005b1c <SecureElementPrintSessionKeys>
                }
            }
            break;
 800675e:	e01a      	b.n	8006796 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8006760:	4b16      	ldr	r3, [pc, #88]	; (80067bc <MlmeConfirm+0x150>)
 8006762:	2201      	movs	r2, #1
 8006764:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7a1a      	ldrb	r2, [r3, #8]
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <MlmeConfirm+0x150>)
 800676c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	7a5a      	ldrb	r2, [r3, #9]
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <MlmeConfirm+0x150>)
 8006774:	74da      	strb	r2, [r3, #19]
            }
            break;
 8006776:	e00f      	b.n	8006798 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <MlmeConfirm+0x14c>)
 8006782:	7c1b      	ldrb	r3, [r3, #16]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fde9 	bl	800635c <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800678a:	e005      	b.n	8006798 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800678c:	f7ff fdca 	bl	8006324 <LmHandlerDeviceTimeReq>
            break;
 8006790:	e002      	b.n	8006798 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <MlmeConfirm+0x12c>
            break;
 8006796:	bf00      	nop
    }
}
 8006798:	bf00      	nop
 800679a:	3730      	adds	r7, #48	; 0x30
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200001f0 	.word	0x200001f0
 80067a4:	20000538 	.word	0x20000538
 80067a8:	200001e4 	.word	0x200001e4
 80067ac:	200004f4 	.word	0x200004f4
 80067b0:	200001e8 	.word	0x200001e8
 80067b4:	200001e9 	.word	0x200001e9
 80067b8:	20000520 	.word	0x20000520
 80067bc:	2000020c 	.word	0x2000020c

080067c0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <MlmeIndication+0x8c>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	785a      	ldrb	r2, [r3, #1]
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <MlmeIndication+0x8c>)
 80067d6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	789b      	ldrb	r3, [r3, #2]
 80067dc:	b25a      	sxtb	r2, r3
 80067de:	4b1b      	ldr	r3, [pc, #108]	; (800684c <MlmeIndication+0x8c>)
 80067e0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067e8:	b25a      	sxtb	r2, r3
 80067ea:	4b18      	ldr	r3, [pc, #96]	; (800684c <MlmeIndication+0x8c>)
 80067ec:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80067f4:	4b15      	ldr	r3, [pc, #84]	; (800684c <MlmeIndication+0x8c>)
 80067f6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	78da      	ldrb	r2, [r3, #3]
 80067fc:	4b13      	ldr	r3, [pc, #76]	; (800684c <MlmeIndication+0x8c>)
 80067fe:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a11      	ldr	r2, [pc, #68]	; (800684c <MlmeIndication+0x8c>)
 8006806:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8006808:	4b11      	ldr	r3, [pc, #68]	; (8006850 <MlmeIndication+0x90>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <MlmeIndication+0x6e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b0b      	cmp	r3, #11
 8006818:	d009      	beq.n	800682e <MlmeIndication+0x6e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b0f      	cmp	r3, #15
 8006820:	d005      	beq.n	800682e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <MlmeIndication+0x90>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	4908      	ldr	r1, [pc, #32]	; (800684c <MlmeIndication+0x8c>)
 800682a:	2000      	movs	r0, #0
 800682c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	2003      	movs	r0, #3
 8006832:	f000 f86f 	bl	8006914 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b0b      	cmp	r3, #11
 800683c:	d001      	beq.n	8006842 <MlmeIndication+0x82>
 800683e:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8006840:	e000      	b.n	8006844 <MlmeIndication+0x84>
            break;
 8006842:	bf00      	nop
    }
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	2000020c 	.word	0x2000020c
 8006850:	20000538 	.word	0x20000538

08006854 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
    switch( id )
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800686a:	f000 f919 	bl	8006aa0 <LmhpCompliancePackageFactory>
 800686e:	4603      	mov	r3, r0
 8006870:	60fb      	str	r3, [r7, #12]
                break;
 8006872:	e00d      	b.n	8006890 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8006874:	f107 020c 	add.w	r2, r7, #12
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fc25 	bl	80070cc <LmhpPackagesRegister>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8006888:	f04f 33ff 	mov.w	r3, #4294967295
 800688c:	e031      	b.n	80068f2 <LmHandlerPackageRegister+0x9e>
                }
                break;
 800688e:	bf00      	nop
            }
    }
    if( package != NULL )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02b      	beq.n	80068ee <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4918      	ldr	r1, [pc, #96]	; (80068fc <LmHandlerPackageRegister+0xa8>)
 800689c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	4a16      	ldr	r2, [pc, #88]	; (80068fc <LmHandlerPackageRegister+0xa8>)
 80068a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <LmHandlerPackageRegister+0xac>)
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	4a13      	ldr	r2, [pc, #76]	; (80068fc <LmHandlerPackageRegister+0xa8>)
 80068b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b4:	4a13      	ldr	r2, [pc, #76]	; (8006904 <LmHandlerPackageRegister+0xb0>)
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	4a10      	ldr	r2, [pc, #64]	; (80068fc <LmHandlerPackageRegister+0xa8>)
 80068bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c0:	4a11      	ldr	r2, [pc, #68]	; (8006908 <LmHandlerPackageRegister+0xb4>)
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80068c4:	4b11      	ldr	r3, [pc, #68]	; (800690c <LmHandlerPackageRegister+0xb8>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	490c      	ldr	r1, [pc, #48]	; (80068fc <LmHandlerPackageRegister+0xa8>)
 80068cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068d0:	6992      	ldr	r2, [r2, #24]
 80068d2:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <LmHandlerPackageRegister+0xa8>)
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4a0c      	ldr	r2, [pc, #48]	; (8006910 <LmHandlerPackageRegister+0xbc>)
 80068e0:	6851      	ldr	r1, [r2, #4]
 80068e2:	4a0b      	ldr	r2, [pc, #44]	; (8006910 <LmHandlerPackageRegister+0xbc>)
 80068e4:	7852      	ldrb	r2, [r2, #1]
 80068e6:	6838      	ldr	r0, [r7, #0]
 80068e8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e001      	b.n	80068f2 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	2000050c 	.word	0x2000050c
 8006900:	08005fe5 	.word	0x08005fe5
 8006904:	08006165 	.word	0x08006165
 8006908:	08006325 	.word	0x08006325
 800690c:	20000538 	.word	0x20000538
 8006910:	20000220 	.word	0x20000220

08006914 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
 8006924:	e07e      	b.n	8006a24 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 8006926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692a:	4a43      	ldr	r2, [pc, #268]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 800692c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d066      	beq.n	8006a02 <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	2b03      	cmp	r3, #3
 8006938:	d865      	bhi.n	8006a06 <LmHandlerPackagesNotify+0xf2>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <LmHandlerPackagesNotify+0x2c>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006951 	.word	0x08006951
 8006944:	08006973 	.word	0x08006973
 8006948:	080069bf 	.word	0x080069bf
 800694c:	080069e1 	.word	0x080069e1
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006954:	4a38      	ldr	r2, [pc, #224]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 8006956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d054      	beq.n	8006a0a <LmHandlerPackagesNotify+0xf6>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8006960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006964:	4a34      	ldr	r2, [pc, #208]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 8006966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	6838      	ldr	r0, [r7, #0]
 800696e:	4798      	blx	r3
                        }
                        break;
 8006970:	e04b      	b.n	8006a0a <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006976:	4a30      	ldr	r2, [pc, #192]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d045      	beq.n	8006a0e <LmHandlerPackagesNotify+0xfa>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006986:	4a2c      	ldr	r2, [pc, #176]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 8006988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800698c:	781a      	ldrb	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006992:	429a      	cmp	r2, r3
 8006994:	d00a      	beq.n	80069ac <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d137      	bne.n	8006a0e <LmHandlerPackagesNotify+0xfa>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800699e:	4b26      	ldr	r3, [pc, #152]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d030      	beq.n	8006a0e <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 80069ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b0:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 80069b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	6838      	ldr	r0, [r7, #0]
 80069ba:	4798      	blx	r3
                        }
                        break;
 80069bc:	e027      	b.n	8006a0e <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 80069c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d021      	beq.n	8006a12 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80069ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d2:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	6838      	ldr	r0, [r7, #0]
 80069dc:	4798      	blx	r3
                        }
                        break;
 80069de:	e018      	b.n	8006a12 <LmHandlerPackagesNotify+0xfe>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80069e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069e4:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 80069e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d012      	beq.n	8006a16 <LmHandlerPackagesNotify+0x102>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80069f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f4:	4a10      	ldr	r2, [pc, #64]	; (8006a38 <LmHandlerPackagesNotify+0x124>)
 80069f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	6838      	ldr	r0, [r7, #0]
 80069fe:	4798      	blx	r3
                        }
                        break;
 8006a00:	e009      	b.n	8006a16 <LmHandlerPackagesNotify+0x102>
                default:
                    {
                        break;
                    }
            }
        }
 8006a02:	bf00      	nop
 8006a04:	e008      	b.n	8006a18 <LmHandlerPackagesNotify+0x104>
                        break;
 8006a06:	bf00      	nop
 8006a08:	e006      	b.n	8006a18 <LmHandlerPackagesNotify+0x104>
                        break;
 8006a0a:	bf00      	nop
 8006a0c:	e004      	b.n	8006a18 <LmHandlerPackagesNotify+0x104>
                        break;
 8006a0e:	bf00      	nop
 8006a10:	e002      	b.n	8006a18 <LmHandlerPackagesNotify+0x104>
                        break;
 8006a12:	bf00      	nop
 8006a14:	e000      	b.n	8006a18 <LmHandlerPackagesNotify+0x104>
                        break;
 8006a16:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	3301      	adds	r3, #1
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	73fb      	strb	r3, [r7, #15]
 8006a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	f77f af7c 	ble.w	8006926 <LmHandlerPackagesNotify+0x12>
    }
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	2000050c 	.word	0x2000050c

08006a3c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	e016      	b.n	8006a7e <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8006a50:	2320      	movs	r3, #32
 8006a52:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fc21 	bl	80082a0 <LoRaMacMibGetRequestConfirm>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8006a64:	f04f 33ff 	mov.w	r3, #4294967295
 8006a68:	e009      	b.n	8006a7e <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8006a6a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f993 2000 	ldrsb.w	r2, [r3]
 8006a78:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <LmHandlerGetTxPower+0x4c>)
 8006a7a:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3730      	adds	r7, #48	; 0x30
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000520 	.word	0x20000520

08006a8c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8006aa4:	4b02      	ldr	r3, [pc, #8]	; (8006ab0 <LmhpCompliancePackageFactory+0x10>)
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000228 	.word	0x20000228

08006ab4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00f      	beq.n	8006ae8 <LmhpComplianceInit+0x34>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <LmhpComplianceInit+0x4c>)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8006ad4:	4a0b      	ldr	r2, [pc, #44]	; (8006b04 <LmhpComplianceInit+0x50>)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8006ada:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <LmhpComplianceInit+0x50>)
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8006ae0:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <LmhpComplianceInit+0x50>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e006      	b.n	8006af6 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <LmhpComplianceInit+0x4c>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <LmhpComplianceInit+0x50>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
    }
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr
 8006b00:	20000688 	.word	0x20000688
 8006b04:	20000674 	.word	0x20000674

08006b08 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8006b0c:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <LmhpComplianceIsInitialized+0x10>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	20000674 	.word	0x20000674

08006b1c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <LmhpComplianceIsRunning+0x24>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f083 0301 	eor.w	r3, r3, #1
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e001      	b.n	8006b36 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 8006b32:	4b03      	ldr	r3, [pc, #12]	; (8006b40 <LmhpComplianceIsRunning+0x24>)
 8006b34:	785b      	ldrb	r3, [r3, #1]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000674 	.word	0x20000674

08006b44 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <LmhpComplianceOnMcpsConfirm+0x48>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f083 0301 	eor.w	r3, r3, #1
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d112      	bne.n	8006b80 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <LmhpComplianceOnMcpsConfirm+0x48>)
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00f      	beq.n	8006b82 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d10b      	bne.n	8006b82 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <LmhpComplianceOnMcpsConfirm+0x48>)
 8006b74:	899b      	ldrh	r3, [r3, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <LmhpComplianceOnMcpsConfirm+0x48>)
 8006b7c:	819a      	strh	r2, [r3, #12]
 8006b7e:	e000      	b.n	8006b82 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8006b80:	bf00      	nop
    }
}
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20000674 	.word	0x20000674

08006b90 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8006b98:	4b12      	ldr	r3, [pc, #72]	; (8006be4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f083 0301 	eor.w	r3, r3, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d116      	bne.n	8006bd4 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	f083 0301 	eor.w	r3, r3, #1
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d111      	bne.n	8006bd8 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d10e      	bne.n	8006bda <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8006bbc:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7a1a      	ldrb	r2, [r3, #8]
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8006bc8:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7a5a      	ldrb	r2, [r3, #9]
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8006bd0:	741a      	strb	r2, [r3, #16]
 8006bd2:	e002      	b.n	8006bda <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8006bd8:	bf00      	nop
    }
}
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000674 	.word	0x20000674

08006be8 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8006bee:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	f083 0301 	eor.w	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006c00:	e05e      	b.n	8006cc0 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 8006c02:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	f083 0301 	eor.w	r3, r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e055      	b.n	8006cc0 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 8006c14:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c16:	7b9b      	ldrb	r3, [r3, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d019      	beq.n	8006c50 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8006c1c:	4b2a      	ldr	r3, [pc, #168]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8006c22:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c24:	2203      	movs	r2, #3
 8006c26:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2205      	movs	r2, #5
 8006c2e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	3301      	adds	r3, #1
 8006c36:	4a24      	ldr	r2, [pc, #144]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c38:	7bd2      	ldrb	r2, [r2, #15]
 8006c3a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8006c3c:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	3302      	adds	r3, #2
 8006c42:	4a21      	ldr	r2, [pc, #132]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c44:	7c12      	ldrb	r2, [r2, #16]
 8006c46:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8006c48:	4b1f      	ldr	r3, [pc, #124]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	709a      	strb	r2, [r3, #2]
 8006c4e:	e01c      	b.n	8006c8a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8006c50:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c52:	789b      	ldrb	r3, [r3, #2]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d005      	beq.n	8006c64 <LmhpComplianceTxProcess+0x7c>
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d116      	bne.n	8006c8a <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	709a      	strb	r2, [r3, #2]
                break;
 8006c62:	e012      	b.n	8006c8a <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 8006c64:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c66:	2202      	movs	r2, #2
 8006c68:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8006c6a:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c6c:	899b      	ldrh	r3, [r3, #12]
 8006c6e:	0a1b      	lsrs	r3, r3, #8
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8006c7a:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c7c:	899a      	ldrh	r2, [r3, #12]
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	3301      	adds	r3, #1
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]
                break;
 8006c88:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8006c8a:	23e0      	movs	r3, #224	; 0xe0
 8006c8c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c90:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8006c92:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006c96:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8006c98:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 8006c9a:	480c      	ldr	r0, [pc, #48]	; (8006ccc <LmhpComplianceTxProcess+0xe4>)
 8006c9c:	f008 fafa 	bl	800f294 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <LmhpComplianceTxProcess+0xe8>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cac:	e008      	b.n	8006cc0 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 8006cae:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <LmhpComplianceTxProcess+0xe8>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	4a05      	ldr	r2, [pc, #20]	; (8006cc8 <LmhpComplianceTxProcess+0xe0>)
 8006cb4:	78d2      	ldrb	r2, [r2, #3]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4638      	mov	r0, r7
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4798      	blx	r3
 8006cbe:	4603      	mov	r3, r0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000674 	.word	0x20000674
 8006ccc:	2000065c 	.word	0x2000065c
 8006cd0:	20000228 	.word	0x20000228

08006cd4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b0a4      	sub	sp, #144	; 0x90
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8006cdc:	4ba5      	ldr	r3, [pc, #660]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f083 0301 	eor.w	r3, r3, #1
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f040 81c6 	bne.w	8007078 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	7b5b      	ldrb	r3, [r3, #13]
 8006cf0:	f083 0301 	eor.w	r3, r3, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 81c0 	bne.w	800707c <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8006cfc:	4b9d      	ldr	r3, [pc, #628]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00c      	beq.n	8006d1e <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	7b9b      	ldrb	r3, [r3, #14]
 8006d08:	f083 0301 	eor.w	r3, r3, #1
 8006d0c:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8006d12:	4b98      	ldr	r3, [pc, #608]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d14:	899b      	ldrh	r3, [r3, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	4b96      	ldr	r3, [pc, #600]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d1c:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	78db      	ldrb	r3, [r3, #3]
 8006d22:	2be0      	cmp	r3, #224	; 0xe0
 8006d24:	f040 81ac 	bne.w	8007080 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8006d28:	4b92      	ldr	r3, [pc, #584]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	f083 0301 	eor.w	r3, r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d060      	beq.n	8006df8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7b1b      	ldrb	r3, [r3, #12]
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	f040 81a7 	bne.w	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	f040 81a1 	bne.w	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	3301      	adds	r3, #1
 8006d52:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	f040 819a 	bne.w	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	3302      	adds	r3, #2
 8006d60:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	f040 8193 	bne.w	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	3303      	adds	r3, #3
 8006d6e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	f040 818c 	bne.w	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 8006d76:	4b7f      	ldr	r3, [pc, #508]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8006d7c:	4b7d      	ldr	r3, [pc, #500]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d7e:	22e0      	movs	r2, #224	; 0xe0
 8006d80:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8006d82:	4b7c      	ldr	r3, [pc, #496]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d84:	2202      	movs	r2, #2
 8006d86:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8006d88:	4b7a      	ldr	r3, [pc, #488]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8006d8e:	4b79      	ldr	r3, [pc, #484]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8006d94:	4b77      	ldr	r3, [pc, #476]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8006d9a:	4b76      	ldr	r3, [pc, #472]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8006da0:	4b74      	ldr	r3, [pc, #464]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8006da6:	4b73      	ldr	r3, [pc, #460]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 8006dac:	2304      	movs	r3, #4
 8006dae:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 8006db0:	2301      	movs	r3, #1
 8006db2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fc27 	bl	800860c <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f002 fa00 	bl	80091c4 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8006dc4:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 8006dce:	4b6a      	ldr	r3, [pc, #424]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	4b68      	ldr	r3, [pc, #416]	; (8006f7c <LmhpComplianceOnMcpsIndication+0x2a8>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f04f 31ff 	mov.w	r1, #4294967295
 8006de2:	4867      	ldr	r0, [pc, #412]	; (8006f80 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8006de4:	f008 fa20 	bl	800f228 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006de8:	f241 3188 	movw	r1, #5000	; 0x1388
 8006dec:	4864      	ldr	r0, [pc, #400]	; (8006f80 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8006dee:	f008 fb2f 	bl	800f450 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 8006df2:	f7ff fef9 	bl	8006be8 <LmhpComplianceTxProcess>
 8006df6:	e14a      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	4b5d      	ldr	r3, [pc, #372]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006e00:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 8006e02:	4b5c      	ldr	r3, [pc, #368]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006e04:	789b      	ldrb	r3, [r3, #2]
 8006e06:	2b0a      	cmp	r3, #10
 8006e08:	f200 813c 	bhi.w	8007084 <LmhpComplianceOnMcpsIndication+0x3b0>
 8006e0c:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <LmhpComplianceOnMcpsIndication+0x140>)
 8006e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e12:	bf00      	nop
 8006e14:	08006e41 	.word	0x08006e41
 8006e18:	08006e8b 	.word	0x08006e8b
 8006e1c:	08006e93 	.word	0x08006e93
 8006e20:	08006ea1 	.word	0x08006ea1
 8006e24:	08006eaf 	.word	0x08006eaf
 8006e28:	08006f07 	.word	0x08006f07
 8006e2c:	08006f19 	.word	0x08006f19
 8006e30:	08006f89 	.word	0x08006f89
 8006e34:	08007031 	.word	0x08007031
 8006e38:	08007043 	.word	0x08007043
 8006e3c:	0800705d 	.word	0x0800705d
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8006e40:	484f      	ldr	r0, [pc, #316]	; (8006f80 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8006e42:	f008 fa95 	bl	800f370 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8006e46:	4b4b      	ldr	r3, [pc, #300]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8006e4c:	4b49      	ldr	r3, [pc, #292]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8006e52:	2304      	movs	r3, #4
 8006e54:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006e56:	4b48      	ldr	r3, [pc, #288]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fbd2 	bl	800860c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006e68:	4b43      	ldr	r3, [pc, #268]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f002 f9a8 	bl	80091c4 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8006e74:	4b40      	ldr	r3, [pc, #256]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8104 	beq.w	8007088 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8006e80:	4b3d      	ldr	r3, [pc, #244]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	4798      	blx	r3
                    }
                }
                break;
 8006e88:	e0fe      	b.n	8007088 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 8006e8a:	4b3a      	ldr	r3, [pc, #232]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	719a      	strb	r2, [r3, #6]
                break;
 8006e90:	e0fd      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 8006e92:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8006e98:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	709a      	strb	r2, [r3, #2]
                break;
 8006e9e:	e0f6      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 8006ea0:	4b34      	ldr	r3, [pc, #208]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8006ea6:	4b33      	ldr	r3, [pc, #204]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	709a      	strb	r2, [r3, #2]
                break;
 8006eac:	e0ef      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7b1a      	ldrb	r2, [r3, #12]
 8006eb2:	4b30      	ldr	r3, [pc, #192]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006eb4:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006ec4:	e012      	b.n	8006eec <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006ece:	4413      	add	r3, r2
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006ed4:	6899      	ldr	r1, [r3, #8]
 8006ed6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006eda:	440b      	add	r3, r1
 8006edc:	3201      	adds	r2, #1
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006ee2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006eec:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006eee:	795a      	ldrb	r2, [r3, #5]
 8006ef0:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006ef2:	799b      	ldrb	r3, [r3, #6]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	bf28      	it	cs
 8006ef8:	4613      	movcs	r3, r2
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d3e0      	bcc.n	8006ec6 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 8006f04:	e0c3      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 8006f06:	2305      	movs	r3, #5
 8006f08:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8006f0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 ff0f 	bl	8008d34 <LoRaMacMlmeRequest>
                }
                break;
 8006f16:	e0ba      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8006f18:	4819      	ldr	r0, [pc, #100]	; (8006f80 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8006f1a:	f008 fa29 	bl	800f370 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8006f1e:	4b15      	ldr	r3, [pc, #84]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8006f2a:	2304      	movs	r3, #4
 8006f2c:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8006f36:	f107 030c 	add.w	r3, r7, #12
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fb66 	bl	800860c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 f93c 	bl	80091c4 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8092 	beq.w	800708c <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	2002      	movs	r0, #2
 8006f70:	4798      	blx	r3
                    }
                }
                break;
 8006f72:	e08b      	b.n	800708c <LmhpComplianceOnMcpsIndication+0x3b8>
 8006f74:	20000674 	.word	0x20000674
 8006f78:	20000688 	.word	0x20000688
 8006f7c:	080070a5 	.word	0x080070a5
 8006f80:	2000065c 	.word	0x2000065c
 8006f84:	20000228 	.word	0x20000228
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	7b1b      	ldrb	r3, [r3, #12]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d113      	bne.n	8006fb8 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8006f90:	2306      	movs	r3, #6
 8006f92:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	b21a      	sxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	b21b      	sxth	r3, r3
 8006fac:	4313      	orrs	r3, r2
 8006fae:	b21b      	sxth	r3, r3
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8006fb6:	e032      	b.n	800701e <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	7b1b      	ldrb	r3, [r3, #12]
 8006fbc:	2b07      	cmp	r3, #7
 8006fbe:	d12e      	bne.n	800701e <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8006fc0:	2307      	movs	r3, #7
 8006fc2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b21a      	sxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b21b      	sxth	r3, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	b21b      	sxth	r3, r3
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	3303      	adds	r3, #3
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	041a      	lsls	r2, r3, #16
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6892      	ldr	r2, [r2, #8]
 8007000:	3205      	adds	r2, #5
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	4313      	orrs	r3, r2
 8007006:	461a      	mov	r2, r3
 8007008:	2364      	movs	r3, #100	; 0x64
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	3306      	adds	r3, #6
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b25b      	sxtb	r3, r3
 800701a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800701e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fe86 	bl	8008d34 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8007028:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <LmhpComplianceOnMcpsIndication+0x3c0>)
 800702a:	2201      	movs	r2, #1
 800702c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800702e:	e02e      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 8007030:	230a      	movs	r3, #10
 8007032:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8007036:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fe7a 	bl	8008d34 <LoRaMacMlmeRequest>
                }
                break;
 8007040:	e025      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8007042:	2300      	movs	r3, #0
 8007044:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	3301      	adds	r3, #1
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fad9 	bl	800860c <LoRaMacMibSetRequestConfirm>
                }
                break;
 800705a:	e018      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800705c:	230d      	movs	r3, #13
 800705e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800706c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007070:	4618      	mov	r0, r3
 8007072:	f001 fe5f 	bl	8008d34 <LoRaMacMlmeRequest>
                }
                break;
 8007076:	e00a      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8007078:	bf00      	nop
 800707a:	e008      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800707c:	bf00      	nop
 800707e:	e006      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800708c:	bf00      	nop
        }
    }
}
 800708e:	3788      	adds	r7, #136	; 0x88
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000674 	.word	0x20000674

08007098 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 80070ac:	f7ff fd9c 	bl	8006be8 <LmhpComplianceTxProcess>
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
	...

080070e8 <UpdateRxSlotIdleState>:
    OnMacProcessNotify( );
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80070ec:	4b08      	ldr	r3, [pc, #32]	; (8007110 <UpdateRxSlotIdleState+0x28>)
 80070ee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d004      	beq.n	8007100 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <UpdateRxSlotIdleState+0x2c>)
 80070f8:	2206      	movs	r2, #6
 80070fa:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80070fe:	e003      	b.n	8007108 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <UpdateRxSlotIdleState+0x2c>)
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8007108:	bf00      	nop
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	20000b94 	.word	0x20000b94
 8007114:	2000068c 	.word	0x2000068c

08007118 <LoRaMacIsBusy>:
        }
    }
}

bool LoRaMacIsBusy( void )
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <LoRaMacIsBusy+0x34>)
 800711e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <LoRaMacIsBusy+0x12>
    {
        return false;
 8007126:	2300      	movs	r3, #0
 8007128:	e00c      	b.n	8007144 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <LoRaMacIsBusy+0x34>)
 800712c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <LoRaMacIsBusy+0x34>)
 8007136:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <LoRaMacIsBusy+0x2a>
    {
        return false;
 800713e:	2300      	movs	r3, #0
 8007140:	e000      	b.n	8007144 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8007142:	2301      	movs	r3, #1
}
 8007144:	4618      	mov	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr
 800714c:	2000068c 	.word	0x2000068c

08007150 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <LoRaMacIsStopped+0x1c>)
 8007156:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <LoRaMacIsStopped+0x12>
    {
        return true;
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <LoRaMacIsStopped+0x14>
    }
    return false;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr
 800716c:	2000068c 	.word	0x2000068c

08007170 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8007170:	b5b0      	push	{r4, r5, r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800717a:	2303      	movs	r3, #3
 800717c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800717e:	4b6d      	ldr	r3, [pc, #436]	; (8007334 <SwitchClass+0x1c4>)
 8007180:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007184:	2b02      	cmp	r3, #2
 8007186:	f000 80b9 	beq.w	80072fc <SwitchClass+0x18c>
 800718a:	2b02      	cmp	r3, #2
 800718c:	f300 80cc 	bgt.w	8007328 <SwitchClass+0x1b8>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <SwitchClass+0x2c>
 8007194:	2b01      	cmp	r3, #1
 8007196:	f000 80a3 	beq.w	80072e0 <SwitchClass+0x170>
 800719a:	e0c5      	b.n	8007328 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80071a2:	4b64      	ldr	r3, [pc, #400]	; (8007334 <SwitchClass+0x1c4>)
 80071a4:	4a63      	ldr	r2, [pc, #396]	; (8007334 <SwitchClass+0x1c4>)
 80071a6:	3374      	adds	r3, #116	; 0x74
 80071a8:	326c      	adds	r2, #108	; 0x6c
 80071aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071ae:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d10c      	bne.n	80071d6 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	4618      	mov	r0, r3
 80071c0:	f002 f943 	bl	800944a <LoRaMacClassBSwitchClass>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80071ce:	4a59      	ldr	r2, [pc, #356]	; (8007334 <SwitchClass+0x1c4>)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	f040 80a0 	bne.w	800731e <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80071de:	4a55      	ldr	r2, [pc, #340]	; (8007334 <SwitchClass+0x1c4>)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80071e6:	4a54      	ldr	r2, [pc, #336]	; (8007338 <SwitchClass+0x1c8>)
 80071e8:	4b53      	ldr	r3, [pc, #332]	; (8007338 <SwitchClass+0x1c8>)
 80071ea:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80071ee:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80071f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071f6:	682b      	ldr	r3, [r5, #0]
 80071f8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80071fa:	4b4f      	ldr	r3, [pc, #316]	; (8007338 <SwitchClass+0x1c8>)
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007202:	2300      	movs	r3, #0
 8007204:	73bb      	strb	r3, [r7, #14]
 8007206:	e05b      	b.n	80072c0 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8007208:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800720c:	4949      	ldr	r1, [pc, #292]	; (8007334 <SwitchClass+0x1c4>)
 800720e:	4613      	mov	r3, r2
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4413      	add	r3, r2
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	440b      	add	r3, r1
 8007218:	33e9      	adds	r3, #233	; 0xe9
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d049      	beq.n	80072b4 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8007220:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007224:	4943      	ldr	r1, [pc, #268]	; (8007334 <SwitchClass+0x1c4>)
 8007226:	4613      	mov	r3, r2
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	4413      	add	r3, r2
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	440b      	add	r3, r1
 8007230:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007234:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8007236:	2b02      	cmp	r3, #2
 8007238:	d13c      	bne.n	80072b4 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800723a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800723e:	493d      	ldr	r1, [pc, #244]	; (8007334 <SwitchClass+0x1c4>)
 8007240:	4613      	mov	r3, r2
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	4413      	add	r3, r2
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	440b      	add	r3, r1
 800724a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a38      	ldr	r2, [pc, #224]	; (8007334 <SwitchClass+0x1c4>)
 8007252:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8007254:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007258:	4936      	ldr	r1, [pc, #216]	; (8007334 <SwitchClass+0x1c4>)
 800725a:	4613      	mov	r3, r2
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	4413      	add	r3, r2
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	440b      	add	r3, r1
 8007264:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8007268:	f993 3000 	ldrsb.w	r3, [r3]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	4b31      	ldr	r3, [pc, #196]	; (8007334 <SwitchClass+0x1c4>)
 8007270:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007274:	4b30      	ldr	r3, [pc, #192]	; (8007338 <SwitchClass+0x1c8>)
 8007276:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 800727a:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <SwitchClass+0x1c8>)
 800727c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007280:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <SwitchClass+0x1c4>)
 8007282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007284:	4a2c      	ldr	r2, [pc, #176]	; (8007338 <SwitchClass+0x1c8>)
 8007286:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800728a:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <SwitchClass+0x1c4>)
 800728c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8007290:	4b29      	ldr	r3, [pc, #164]	; (8007338 <SwitchClass+0x1c8>)
 8007292:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8007296:	4b27      	ldr	r3, [pc, #156]	; (8007334 <SwitchClass+0x1c4>)
 8007298:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800729c:	4b26      	ldr	r3, [pc, #152]	; (8007338 <SwitchClass+0x1c8>)
 800729e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80072a2:	4b25      	ldr	r3, [pc, #148]	; (8007338 <SwitchClass+0x1c8>)
 80072a4:	2203      	movs	r2, #3
 80072a6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80072aa:	4b23      	ldr	r3, [pc, #140]	; (8007338 <SwitchClass+0x1c8>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80072b2:	e009      	b.n	80072c8 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80072b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	3301      	adds	r3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	73bb      	strb	r3, [r7, #14]
 80072c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd9f      	ble.n	8007208 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80072c8:	4b1b      	ldr	r3, [pc, #108]	; (8007338 <SwitchClass+0x1c8>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80072d0:	4b1a      	ldr	r3, [pc, #104]	; (800733c <SwitchClass+0x1cc>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80072d6:	f000 fce9 	bl	8007cac <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80072de:	e01e      	b.n	800731e <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f002 f8b1 	bl	800944a <LoRaMacClassBSwitchClass>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d117      	bne.n	8007322 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80072f2:	4a10      	ldr	r2, [pc, #64]	; (8007334 <SwitchClass+0x1c4>)
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80072fa:	e012      	b.n	8007322 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d111      	bne.n	8007326 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8007302:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <SwitchClass+0x1c8>)
 8007304:	2206      	movs	r2, #6
 8007306:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800730a:	4a0a      	ldr	r2, [pc, #40]	; (8007334 <SwitchClass+0x1c4>)
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <SwitchClass+0x1cc>)
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800731c:	e003      	b.n	8007326 <SwitchClass+0x1b6>
            break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <SwitchClass+0x1b8>
            break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <SwitchClass+0x1b8>
            break;
 8007326:	bf00      	nop
        }
    }

    return status;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bdb0      	pop	{r4, r5, r7, pc}
 8007332:	bf00      	nop
 8007334:	20000b94 	.word	0x20000b94
 8007338:	2000068c 	.word	0x2000068c
 800733c:	0800fbf4 	.word	0x0800fbf4

08007340 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800734a:	4b10      	ldr	r3, [pc, #64]	; (800738c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800734c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007350:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007356:	230d      	movs	r3, #13
 8007358:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800735c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007364:	230e      	movs	r3, #14
 8007366:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007368:	4b08      	ldr	r3, [pc, #32]	; (800738c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800736a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800736e:	f107 0210 	add.w	r2, r7, #16
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f002 ff57 	bl	800a228 <RegionGetPhyParam>
 800737a:	4603      	mov	r3, r0
 800737c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	b2db      	uxtb	r3, r3
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000b94 	.word	0x20000b94

08007390 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	71fb      	strb	r3, [r7, #7]
 800739a:	460b      	mov	r3, r1
 800739c:	71bb      	strb	r3, [r7, #6]
 800739e:	4613      	mov	r3, r2
 80073a0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80073aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff ffc6 	bl	8007340 <GetMaxAppPayloadWithoutFOptsLength>
 80073b4:	4603      	mov	r3, r0
 80073b6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	797b      	ldrb	r3, [r7, #5]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4413      	add	r3, r2
 80073c2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80073c4:	89ba      	ldrh	r2, [r7, #12]
 80073c6:	89fb      	ldrh	r3, [r7, #14]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d804      	bhi.n	80073d6 <ValidatePayloadLength+0x46>
 80073cc:	89bb      	ldrh	r3, [r7, #12]
 80073ce:	2bff      	cmp	r3, #255	; 0xff
 80073d0:	d801      	bhi.n	80073d6 <ValidatePayloadLength+0x46>
    {
        return true;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <ValidatePayloadLength+0x48>
    }
    return false;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <Send>:
        }
    }
}

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08e      	sub	sp, #56	; 0x38
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	461a      	mov	r2, r3
 80073ec:	460b      	mov	r3, r1
 80073ee:	72fb      	strb	r3, [r7, #11]
 80073f0:	4613      	mov	r3, r2
 80073f2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80073f4:	2303      	movs	r3, #3
 80073f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80073fa:	4b65      	ldr	r3, [pc, #404]	; (8007590 <Send+0x1b0>)
 80073fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007400:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8007404:	4b62      	ldr	r3, [pc, #392]	; (8007590 <Send+0x1b0>)
 8007406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800740a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800740e:	4b60      	ldr	r3, [pc, #384]	; (8007590 <Send+0x1b0>)
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007414:	4b5e      	ldr	r3, [pc, #376]	; (8007590 <Send+0x1b0>)
 8007416:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800741e:	2307      	movs	r3, #7
 8007420:	e0b1      	b.n	8007586 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8007422:	4b5b      	ldr	r3, [pc, #364]	; (8007590 <Send+0x1b0>)
 8007424:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800742c:	4b58      	ldr	r3, [pc, #352]	; (8007590 <Send+0x1b0>)
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8007438:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800743c:	f36f 0303 	bfc	r3, #0, #4
 8007440:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8007444:	4b52      	ldr	r3, [pc, #328]	; (8007590 <Send+0x1b0>)
 8007446:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800744a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800744e:	f362 13c7 	bfi	r3, r2, #7, #1
 8007452:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007456:	4b4e      	ldr	r3, [pc, #312]	; (8007590 <Send+0x1b0>)
 8007458:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800745c:	2b01      	cmp	r3, #1
 800745e:	d106      	bne.n	800746e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8007460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007464:	f043 0310 	orr.w	r3, r3, #16
 8007468:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800746c:	e005      	b.n	800747a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800746e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007472:	f36f 1304 	bfc	r3, #4, #1
 8007476:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800747a:	4b45      	ldr	r3, [pc, #276]	; (8007590 <Send+0x1b0>)
 800747c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8007484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007488:	f043 0320 	orr.w	r3, r3, #32
 800748c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8007490:	2301      	movs	r3, #1
 8007492:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8007494:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007498:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bf14      	ite	ne
 80074a2:	2301      	movne	r3, #1
 80074a4:	2300      	moveq	r3, #0
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80074aa:	4b39      	ldr	r3, [pc, #228]	; (8007590 <Send+0x1b0>)
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80074b0:	4b37      	ldr	r3, [pc, #220]	; (8007590 <Send+0x1b0>)
 80074b2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80074b6:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80074b8:	4b35      	ldr	r3, [pc, #212]	; (8007590 <Send+0x1b0>)
 80074ba:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80074be:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80074c0:	4b33      	ldr	r3, [pc, #204]	; (8007590 <Send+0x1b0>)
 80074c2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80074c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80074ca:	4b31      	ldr	r3, [pc, #196]	; (8007590 <Send+0x1b0>)
 80074cc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80074d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80074d4:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <Send+0x1b0>)
 80074d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80074de:	4b2c      	ldr	r3, [pc, #176]	; (8007590 <Send+0x1b0>)
 80074e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80074e8:	4b29      	ldr	r3, [pc, #164]	; (8007590 <Send+0x1b0>)
 80074ea:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80074ee:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80074f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074f4:	f107 0014 	add.w	r0, r7, #20
 80074f8:	4a26      	ldr	r2, [pc, #152]	; (8007594 <Send+0x1b4>)
 80074fa:	4927      	ldr	r1, [pc, #156]	; (8007598 <Send+0x1b8>)
 80074fc:	f001 ff3c 	bl	8009378 <LoRaMacAdrCalcNext>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007508:	f362 1386 	bfi	r3, r2, #6, #1
 800750c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8007510:	7afa      	ldrb	r2, [r7, #11]
 8007512:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007516:	893b      	ldrh	r3, [r7, #8]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fc09 	bl	8007d34 <PrepareFrame>
 8007522:	4603      	mov	r3, r0
 8007524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8007528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <Send+0x158>
 8007530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007534:	2b0a      	cmp	r3, #10
 8007536:	d107      	bne.n	8007548 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8007538:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f961 	bl	8007804 <ScheduleTx>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8007548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8007550:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <Send+0x1b0>)
 8007552:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007556:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800755a:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <Send+0x1b0>)
 800755c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007560:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8007564:	e00d      	b.n	8007582 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <Send+0x1b0>)
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	4a07      	ldr	r2, [pc, #28]	; (8007590 <Send+0x1b0>)
 8007572:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8007574:	f002 f93a 	bl	80097ec <LoRaMacCommandsRemoveNoneStickyCmds>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800757e:	2313      	movs	r3, #19
 8007580:	e001      	b.n	8007586 <Send+0x1a6>
        }
    }
    return status;
 8007582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007586:	4618      	mov	r0, r3
 8007588:	3730      	adds	r7, #48	; 0x30
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000b94 	.word	0x20000b94
 8007594:	20000bcc 	.word	0x20000bcc
 8007598:	20000bcd 	.word	0x20000bcd

0800759c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	2bff      	cmp	r3, #255	; 0xff
 80075b6:	d11f      	bne.n	80075f8 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80075b8:	2000      	movs	r0, #0
 80075ba:	f7ff fdd9 	bl	8007170 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <SendReJoinReq+0x78>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <SendReJoinReq+0x78>)
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <SendReJoinReq+0x7c>)
 80075ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80075ce:	4b11      	ldr	r3, [pc, #68]	; (8007614 <SendReJoinReq+0x78>)
 80075d0:	22ff      	movs	r2, #255	; 0xff
 80075d2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80075d6:	7b3b      	ldrb	r3, [r7, #12]
 80075d8:	f36f 1347 	bfc	r3, #5, #3
 80075dc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80075de:	7b3a      	ldrb	r2, [r7, #12]
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <SendReJoinReq+0x78>)
 80075e2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80075e6:	480d      	ldr	r0, [pc, #52]	; (800761c <SendReJoinReq+0x80>)
 80075e8:	f7fe fc4c 	bl	8005e84 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80075ec:	480c      	ldr	r0, [pc, #48]	; (8007620 <SendReJoinReq+0x84>)
 80075ee:	f7fe fc19 	bl	8005e24 <SecureElementGetDevEui>

            allowDelayedTx = false;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]

            break;
 80075f6:	e002      	b.n	80075fe <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80075f8:	2302      	movs	r3, #2
 80075fa:	73bb      	strb	r3, [r7, #14]
            break;
 80075fc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f8ff 	bl	8007804 <ScheduleTx>
 8007606:	4603      	mov	r3, r0
 8007608:	73bb      	strb	r3, [r7, #14]
    return status;
 800760a:	7bbb      	ldrb	r3, [r7, #14]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	2000068c 	.word	0x2000068c
 8007618:	2000068e 	.word	0x2000068e
 800761c:	2000079a 	.word	0x2000079a
 8007620:	200007a2 	.word	0x200007a2

08007624 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007628:	f001 fee3 	bl	80093f2 <LoRaMacClassBIsBeaconExpected>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8007632:	230e      	movs	r3, #14
 8007634:	e013      	b.n	800765e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <CheckForClassBCollision+0x40>)
 8007638:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10d      	bne.n	800765c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007640:	f001 fede 	bl	8009400 <LoRaMacClassBIsPingExpected>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800764a:	230f      	movs	r3, #15
 800764c:	e007      	b.n	800765e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800764e:	f001 fede 	bl	800940e <LoRaMacClassBIsMulticastExpected>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007658:	230f      	movs	r3, #15
 800765a:	e000      	b.n	800765e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000b94 	.word	0x20000b94

08007668 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8007668:	b590      	push	{r4, r7, lr}
 800766a:	b083      	sub	sp, #12
 800766c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800766e:	4b2d      	ldr	r3, [pc, #180]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 8007670:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007674:	4b2b      	ldr	r3, [pc, #172]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 8007676:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800767a:	4b2a      	ldr	r3, [pc, #168]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 800767c:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 8007682:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007686:	4b27      	ldr	r3, [pc, #156]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 8007688:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800768c:	b25b      	sxtb	r3, r3
 800768e:	f002 fea9 	bl	800a3e4 <RegionApplyDrOffset>
 8007692:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007694:	b259      	sxtb	r1, r3
 8007696:	4b23      	ldr	r3, [pc, #140]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 8007698:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800769c:	4b21      	ldr	r3, [pc, #132]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 800769e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a0:	4821      	ldr	r0, [pc, #132]	; (8007728 <ComputeRxWindowParameters+0xc0>)
 80076a2:	9000      	str	r0, [sp, #0]
 80076a4:	4620      	mov	r0, r4
 80076a6:	f002 fe13 	bl	800a2d0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80076aa:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 80076ac:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80076b0:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 80076b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80076b6:	b259      	sxtb	r1, r3
 80076b8:	4b1a      	ldr	r3, [pc, #104]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 80076ba:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80076be:	4b19      	ldr	r3, [pc, #100]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 80076c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c2:	4c1a      	ldr	r4, [pc, #104]	; (800772c <ComputeRxWindowParameters+0xc4>)
 80076c4:	9400      	str	r4, [sp, #0]
 80076c6:	f002 fe03 	bl	800a2d0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80076ca:	4b16      	ldr	r3, [pc, #88]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ce:	4a18      	ldr	r2, [pc, #96]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 80076d0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80076d4:	4413      	add	r3, r2
 80076d6:	4a16      	ldr	r2, [pc, #88]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 80076d8:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 80076de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e0:	4a13      	ldr	r2, [pc, #76]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 80076e2:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80076e6:	4413      	add	r3, r2
 80076e8:	4a11      	ldr	r2, [pc, #68]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 80076ea:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80076ee:	4b10      	ldr	r3, [pc, #64]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 80076f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d011      	beq.n	800771c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 80076fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076fc:	4a0c      	ldr	r2, [pc, #48]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 80076fe:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8007702:	4413      	add	r3, r2
 8007704:	4a0a      	ldr	r2, [pc, #40]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 8007706:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <ComputeRxWindowParameters+0xbc>)
 800770c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770e:	4a08      	ldr	r2, [pc, #32]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 8007710:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8007714:	4413      	add	r3, r2
 8007716:	4a06      	ldr	r2, [pc, #24]	; (8007730 <ComputeRxWindowParameters+0xc8>)
 8007718:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800771c:	bf00      	nop
 800771e:	3704      	adds	r7, #4
 8007720:	46bd      	mov	sp, r7
 8007722:	bd90      	pop	{r4, r7, pc}
 8007724:	20000b94 	.word	0x20000b94
 8007728:	20000a44 	.word	0x20000a44
 800772c:	20000a58 	.word	0x20000a58
 8007730:	2000068c 	.word	0x2000068c

08007734 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <VerifyTxFrame+0x58>)
 8007740:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01b      	beq.n	8007780 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	4618      	mov	r0, r3
 800774c:	f002 f872 	bl	8009834 <LoRaMacCommandsGetSizeSerializedCmds>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007756:	2313      	movs	r3, #19
 8007758:	e013      	b.n	8007782 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <VerifyTxFrame+0x5c>)
 800775c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007760:	4a0a      	ldr	r2, [pc, #40]	; (800778c <VerifyTxFrame+0x58>)
 8007762:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fe10 	bl	8007390 <ValidatePayloadLength>
 8007770:	4603      	mov	r3, r0
 8007772:	f083 0301 	eor.w	r3, r3, #1
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800777c:	2308      	movs	r3, #8
 800777e:	e000      	b.n	8007782 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000b94 	.word	0x20000b94
 8007790:	2000068c 	.word	0x2000068c

08007794 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800779a:	4b18      	ldr	r3, [pc, #96]	; (80077fc <SerializeTxFrame+0x68>)
 800779c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <SerializeTxFrame+0x16>
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d011      	beq.n	80077cc <SerializeTxFrame+0x38>
 80077a8:	e021      	b.n	80077ee <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80077aa:	4815      	ldr	r0, [pc, #84]	; (8007800 <SerializeTxFrame+0x6c>)
 80077ac:	f002 fbc3 	bl	8009f36 <LoRaMacSerializerJoinRequest>
 80077b0:	4603      	mov	r3, r0
 80077b2:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80077ba:	2311      	movs	r3, #17
 80077bc:	e01a      	b.n	80077f4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <SerializeTxFrame+0x68>)
 80077c0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <SerializeTxFrame+0x68>)
 80077c8:	801a      	strh	r2, [r3, #0]
            break;
 80077ca:	e012      	b.n	80077f2 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80077cc:	480c      	ldr	r0, [pc, #48]	; (8007800 <SerializeTxFrame+0x6c>)
 80077ce:	f002 fc34 	bl	800a03a <LoRaMacSerializerData>
 80077d2:	4603      	mov	r3, r0
 80077d4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80077dc:	2311      	movs	r3, #17
 80077de:	e009      	b.n	80077f4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <SerializeTxFrame+0x68>)
 80077e2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <SerializeTxFrame+0x68>)
 80077ea:	801a      	strh	r2, [r3, #0]
            break;
 80077ec:	e001      	b.n	80077f2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e000      	b.n	80077f4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	2000068c 	.word	0x2000068c
 8007800:	20000794 	.word	0x20000794

08007804 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b090      	sub	sp, #64	; 0x40
 8007808:	af02      	add	r7, sp, #8
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800780e:	2303      	movs	r3, #3
 8007810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8007814:	f7ff ff06 	bl	8007624 <CheckForClassBCollision>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800781e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <ScheduleTx+0x28>
    {
        return status;
 8007826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800782a:	e092      	b.n	8007952 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800782c:	f000 f8fe 	bl	8007a2c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8007830:	f7ff ffb0 	bl	8007794 <SerializeTxFrame>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800783a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <ScheduleTx+0x44>
    {
        return status;
 8007842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007846:	e084      	b.n	8007952 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8007848:	4b44      	ldr	r3, [pc, #272]	; (800795c <ScheduleTx+0x158>)
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800784e:	4b43      	ldr	r3, [pc, #268]	; (800795c <ScheduleTx+0x158>)
 8007850:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007854:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007856:	4b41      	ldr	r3, [pc, #260]	; (800795c <ScheduleTx+0x158>)
 8007858:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800785c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800785e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007862:	4618      	mov	r0, r3
 8007864:	f007 fc5a 	bl	800f11c <SysTimeGetMcuTime>
 8007868:	4638      	mov	r0, r7
 800786a:	4b3c      	ldr	r3, [pc, #240]	; (800795c <ScheduleTx+0x158>)
 800786c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8007870:	9200      	str	r2, [sp, #0]
 8007872:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007876:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800787a:	ca06      	ldmia	r2, {r1, r2}
 800787c:	f007 fc16 	bl	800f0ac <SysTimeSub>
 8007880:	f107 0320 	add.w	r3, r7, #32
 8007884:	463a      	mov	r2, r7
 8007886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800788a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800788e:	4b33      	ldr	r3, [pc, #204]	; (800795c <ScheduleTx+0x158>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800789a:	2301      	movs	r3, #1
 800789c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800789e:	4b30      	ldr	r3, [pc, #192]	; (8007960 <ScheduleTx+0x15c>)
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80078a4:	4b2d      	ldr	r3, [pc, #180]	; (800795c <ScheduleTx+0x158>)
 80078a6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80078b4:	2300      	movs	r3, #0
 80078b6:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80078b8:	4b28      	ldr	r3, [pc, #160]	; (800795c <ScheduleTx+0x158>)
 80078ba:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80078be:	f107 0114 	add.w	r1, r7, #20
 80078c2:	4b28      	ldr	r3, [pc, #160]	; (8007964 <ScheduleTx+0x160>)
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	4b28      	ldr	r3, [pc, #160]	; (8007968 <ScheduleTx+0x164>)
 80078c8:	4a28      	ldr	r2, [pc, #160]	; (800796c <ScheduleTx+0x168>)
 80078ca:	f002 fd61 	bl	800a390 <RegionNextChannel>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80078d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d025      	beq.n	8007928 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80078dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078e0:	2b0b      	cmp	r3, #11
 80078e2:	d11e      	bne.n	8007922 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80078e4:	4b1e      	ldr	r3, [pc, #120]	; (8007960 <ScheduleTx+0x15c>)
 80078e6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01c      	beq.n	8007928 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d013      	beq.n	800791c <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80078f4:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <ScheduleTx+0x15c>)
 80078f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80078fa:	f043 0320 	orr.w	r3, r3, #32
 80078fe:	4a18      	ldr	r2, [pc, #96]	; (8007960 <ScheduleTx+0x15c>)
 8007900:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007904:	4b16      	ldr	r3, [pc, #88]	; (8007960 <ScheduleTx+0x15c>)
 8007906:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800790a:	4619      	mov	r1, r3
 800790c:	4818      	ldr	r0, [pc, #96]	; (8007970 <ScheduleTx+0x16c>)
 800790e:	f007 fd9f 	bl	800f450 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8007912:	4817      	ldr	r0, [pc, #92]	; (8007970 <ScheduleTx+0x16c>)
 8007914:	f007 fcbe 	bl	800f294 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	e01a      	b.n	8007952 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800791c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007920:	e017      	b.n	8007952 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8007922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007926:	e014      	b.n	8007952 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8007928:	f7ff fe9e 	bl	8007668 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800792c:	f7ff ff02 	bl	8007734 <VerifyTxFrame>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8007936:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <ScheduleTx+0x140>
    {
        return status;
 800793e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007942:	e006      	b.n	8007952 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <ScheduleTx+0x15c>)
 8007946:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fb0e 	bl	8007f6c <SendFrameOnChannel>
 8007950:	4603      	mov	r3, r0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3738      	adds	r7, #56	; 0x38
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000b94 	.word	0x20000b94
 8007960:	2000068c 	.word	0x2000068c
 8007964:	20000bc4 	.word	0x20000bc4
 8007968:	20000b10 	.word	0x20000b10
 800796c:	20000a9d 	.word	0x20000a9d
 8007970:	200009f4 	.word	0x200009f4

08007974 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	460a      	mov	r2, r1
 800797e:	71fb      	strb	r3, [r7, #7]
 8007980:	4613      	mov	r3, r2
 8007982:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8007984:	2313      	movs	r3, #19
 8007986:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800798c:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <SecureFrame+0xb0>)
 800798e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <SecureFrame+0x28>
 8007996:	2b04      	cmp	r3, #4
 8007998:	d011      	beq.n	80079be <SecureFrame+0x4a>
 800799a:	e03b      	b.n	8007a14 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800799c:	4822      	ldr	r0, [pc, #136]	; (8007a28 <SecureFrame+0xb4>)
 800799e:	f002 f9d3 	bl	8009d48 <LoRaMacCryptoPrepareJoinRequest>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80079ac:	2311      	movs	r3, #17
 80079ae:	e034      	b.n	8007a1a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80079b0:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <SecureFrame+0xb0>)
 80079b2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	4b1a      	ldr	r3, [pc, #104]	; (8007a24 <SecureFrame+0xb0>)
 80079ba:	801a      	strh	r2, [r3, #0]
            break;
 80079bc:	e02c      	b.n	8007a18 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80079be:	f107 0308 	add.w	r3, r7, #8
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 f970 	bl	8009ca8 <LoRaMacCryptoGetFCntUp>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80079ce:	2312      	movs	r3, #18
 80079d0:	e023      	b.n	8007a1a <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80079d2:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <SecureFrame+0xb0>)
 80079d4:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <SecureFrame+0x72>
 80079dc:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <SecureFrame+0xb0>)
 80079de:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d902      	bls.n	80079ec <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	79ba      	ldrb	r2, [r7, #6]
 80079f0:	79f9      	ldrb	r1, [r7, #7]
 80079f2:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <SecureFrame+0xb4>)
 80079f4:	f002 f9ec 	bl	8009dd0 <LoRaMacCryptoSecureMessage>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8007a02:	2311      	movs	r3, #17
 8007a04:	e009      	b.n	8007a1a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <SecureFrame+0xb0>)
 8007a08:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <SecureFrame+0xb0>)
 8007a10:	801a      	strh	r2, [r3, #0]
            break;
 8007a12:	e001      	b.n	8007a18 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e000      	b.n	8007a1a <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000068c 	.word	0x2000068c
 8007a28:	20000794 	.word	0x20000794

08007a2c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007a30:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <CalculateBackOff+0x2c>)
 8007a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007a38:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <CalculateBackOff+0x2c>)
 8007a3a:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	4a06      	ldr	r2, [pc, #24]	; (8007a5c <CalculateBackOff+0x30>)
 8007a42:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 8007a46:	fb02 f303 	mul.w	r3, r2, r3
 8007a4a:	4a03      	ldr	r2, [pc, #12]	; (8007a58 <CalculateBackOff+0x2c>)
 8007a4c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8007a4e:	bf00      	nop
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000b94 	.word	0x20000b94
 8007a5c:	2000068c 	.word	0x2000068c

08007a60 <ResetMacParameters>:
        }
    }
}

static void ResetMacParameters( bool isRejoin )
{
 8007a60:	b5b0      	push	{r4, r5, r7, lr}
 8007a62:	b090      	sub	sp, #64	; 0x40
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	f083 0301 	eor.w	r3, r3, #1
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007a76:	4b80      	ldr	r3, [pc, #512]	; (8007c78 <ResetMacParameters+0x218>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8007a7e:	4b7e      	ldr	r3, [pc, #504]	; (8007c78 <ResetMacParameters+0x218>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8007a84:	4b7d      	ldr	r3, [pc, #500]	; (8007c7c <ResetMacParameters+0x21c>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8007a8c:	4b7b      	ldr	r3, [pc, #492]	; (8007c7c <ResetMacParameters+0x21c>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8007a94:	4b79      	ldr	r3, [pc, #484]	; (8007c7c <ResetMacParameters+0x21c>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8007a9c:	4b77      	ldr	r3, [pc, #476]	; (8007c7c <ResetMacParameters+0x21c>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8007aa4:	4b74      	ldr	r3, [pc, #464]	; (8007c78 <ResetMacParameters+0x218>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007aac:	4b72      	ldr	r3, [pc, #456]	; (8007c78 <ResetMacParameters+0x218>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007ab4:	4b70      	ldr	r3, [pc, #448]	; (8007c78 <ResetMacParameters+0x218>)
 8007ab6:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8007aba:	4b6f      	ldr	r3, [pc, #444]	; (8007c78 <ResetMacParameters+0x218>)
 8007abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007ac0:	4b6d      	ldr	r3, [pc, #436]	; (8007c78 <ResetMacParameters+0x218>)
 8007ac2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8007ac6:	4b6c      	ldr	r3, [pc, #432]	; (8007c78 <ResetMacParameters+0x218>)
 8007ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007acc:	4b6a      	ldr	r3, [pc, #424]	; (8007c78 <ResetMacParameters+0x218>)
 8007ace:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8007ad2:	4b69      	ldr	r3, [pc, #420]	; (8007c78 <ResetMacParameters+0x218>)
 8007ad4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007ad8:	4b67      	ldr	r3, [pc, #412]	; (8007c78 <ResetMacParameters+0x218>)
 8007ada:	4a67      	ldr	r2, [pc, #412]	; (8007c78 <ResetMacParameters+0x218>)
 8007adc:	336c      	adds	r3, #108	; 0x6c
 8007ade:	32b4      	adds	r2, #180	; 0xb4
 8007ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ae4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007ae8:	4b63      	ldr	r3, [pc, #396]	; (8007c78 <ResetMacParameters+0x218>)
 8007aea:	4a63      	ldr	r2, [pc, #396]	; (8007c78 <ResetMacParameters+0x218>)
 8007aec:	3374      	adds	r3, #116	; 0x74
 8007aee:	32bc      	adds	r2, #188	; 0xbc
 8007af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007af4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8007af8:	4b5f      	ldr	r3, [pc, #380]	; (8007c78 <ResetMacParameters+0x218>)
 8007afa:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8007afe:	4b5e      	ldr	r3, [pc, #376]	; (8007c78 <ResetMacParameters+0x218>)
 8007b00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8007b04:	4b5c      	ldr	r3, [pc, #368]	; (8007c78 <ResetMacParameters+0x218>)
 8007b06:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8007b0a:	4b5b      	ldr	r3, [pc, #364]	; (8007c78 <ResetMacParameters+0x218>)
 8007b0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007b10:	4b59      	ldr	r3, [pc, #356]	; (8007c78 <ResetMacParameters+0x218>)
 8007b12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007b16:	4a58      	ldr	r2, [pc, #352]	; (8007c78 <ResetMacParameters+0x218>)
 8007b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007b1c:	4b56      	ldr	r3, [pc, #344]	; (8007c78 <ResetMacParameters+0x218>)
 8007b1e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8007b22:	4a55      	ldr	r2, [pc, #340]	; (8007c78 <ResetMacParameters+0x218>)
 8007b24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8007b28:	4b53      	ldr	r3, [pc, #332]	; (8007c78 <ResetMacParameters+0x218>)
 8007b2a:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8007b2e:	4b52      	ldr	r3, [pc, #328]	; (8007c78 <ResetMacParameters+0x218>)
 8007b30:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8007b34:	4b50      	ldr	r3, [pc, #320]	; (8007c78 <ResetMacParameters+0x218>)
 8007b36:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8007b3a:	4b4f      	ldr	r3, [pc, #316]	; (8007c78 <ResetMacParameters+0x218>)
 8007b3c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8007b40:	4b4e      	ldr	r3, [pc, #312]	; (8007c7c <ResetMacParameters+0x21c>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8007b48:	4b4b      	ldr	r3, [pc, #300]	; (8007c78 <ResetMacParameters+0x218>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8007b50:	4b49      	ldr	r3, [pc, #292]	; (8007c78 <ResetMacParameters+0x218>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8007b58:	4b47      	ldr	r3, [pc, #284]	; (8007c78 <ResetMacParameters+0x218>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 8007b60:	4b45      	ldr	r3, [pc, #276]	; (8007c78 <ResetMacParameters+0x218>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8007b68:	4b43      	ldr	r3, [pc, #268]	; (8007c78 <ResetMacParameters+0x218>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8007b70:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <ResetMacParameters+0x218>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8007b78:	4b3f      	ldr	r3, [pc, #252]	; (8007c78 <ResetMacParameters+0x218>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8007b80:	4b3d      	ldr	r3, [pc, #244]	; (8007c78 <ResetMacParameters+0x218>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8007b88:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <ResetMacParameters+0x218>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007b90:	2301      	movs	r3, #1
 8007b92:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007b94:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <ResetMacParameters+0x220>)
 8007b96:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007b98:	4b3a      	ldr	r3, [pc, #232]	; (8007c84 <ResetMacParameters+0x224>)
 8007b9a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007b9c:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <ResetMacParameters+0x218>)
 8007b9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007ba2:	f107 020c 	add.w	r2, r7, #12
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f002 fb55 	bl	800a258 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8007bae:	4b33      	ldr	r3, [pc, #204]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007bb6:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bb8:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8007bbc:	4b2f      	ldr	r3, [pc, #188]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bbe:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007bc2:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <ResetMacParameters+0x218>)
 8007bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc6:	4a2d      	ldr	r2, [pc, #180]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bc8:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007bcc:	4b2a      	ldr	r3, [pc, #168]	; (8007c78 <ResetMacParameters+0x218>)
 8007bce:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8007bd2:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bd4:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8007bd8:	4b27      	ldr	r3, [pc, #156]	; (8007c78 <ResetMacParameters+0x218>)
 8007bda:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8007bde:	4b27      	ldr	r3, [pc, #156]	; (8007c7c <ResetMacParameters+0x21c>)
 8007be0:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007be4:	4b25      	ldr	r3, [pc, #148]	; (8007c7c <ResetMacParameters+0x21c>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007bec:	4b23      	ldr	r3, [pc, #140]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007bf4:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <ResetMacParameters+0x21c>)
 8007bf8:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8007bfc:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8007c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007c08:	4b1c      	ldr	r3, [pc, #112]	; (8007c7c <ResetMacParameters+0x21c>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007c10:	4b1a      	ldr	r3, [pc, #104]	; (8007c7c <ResetMacParameters+0x21c>)
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8007c20:	4b16      	ldr	r3, [pc, #88]	; (8007c7c <ResetMacParameters+0x21c>)
 8007c22:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007c2a:	4b14      	ldr	r3, [pc, #80]	; (8007c7c <ResetMacParameters+0x21c>)
 8007c2c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007c34:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <ResetMacParameters+0x21c>)
 8007c36:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <ResetMacParameters+0x228>)
 8007c40:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007c42:	4b12      	ldr	r3, [pc, #72]	; (8007c8c <ResetMacParameters+0x22c>)
 8007c44:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <ResetMacParameters+0x230>)
 8007c48:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8007c4a:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <ResetMacParameters+0x234>)
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007c4e:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <ResetMacParameters+0x238>)
 8007c50:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <ResetMacParameters+0x23c>)
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8007c56:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <ResetMacParameters+0x240>)
 8007c58:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8007c5a:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <ResetMacParameters+0x244>)
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007c5e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	4a10      	ldr	r2, [pc, #64]	; (8007ca8 <ResetMacParameters+0x248>)
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 fb9d 	bl	80093a8 <LoRaMacClassBInit>
}
 8007c6e:	bf00      	nop
 8007c70:	3740      	adds	r7, #64	; 0x40
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bdb0      	pop	{r4, r5, r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000b94 	.word	0x20000b94
 8007c7c:	2000068c 	.word	0x2000068c
 8007c80:	20000db4 	.word	0x20000db4
 8007c84:	20000e48 	.word	0x20000e48
 8007c88:	20000ae8 	.word	0x20000ae8
 8007c8c:	20000aa4 	.word	0x20000aa4
 8007c90:	20000ad4 	.word	0x20000ad4
 8007c94:	20000b0d 	.word	0x20000b0d
 8007c98:	20000c78 	.word	0x20000c78
 8007c9c:	20000bdc 	.word	0x20000bdc
 8007ca0:	20000be0 	.word	0x20000be0
 8007ca4:	20000c7c 	.word	0x20000c7c
 8007ca8:	200012e4 	.word	0x200012e4

08007cac <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 8007cac:	b590      	push	{r4, r7, lr}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <OpenContinuousRxCWindow+0x74>)
 8007cb4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8007cb8:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <OpenContinuousRxCWindow+0x74>)
 8007cba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007cbe:	b259      	sxtb	r1, r3
 8007cc0:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <OpenContinuousRxCWindow+0x74>)
 8007cc2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007cc6:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <OpenContinuousRxCWindow+0x74>)
 8007cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cca:	4c16      	ldr	r4, [pc, #88]	; (8007d24 <OpenContinuousRxCWindow+0x78>)
 8007ccc:	9400      	str	r4, [sp, #0]
 8007cce:	f002 faff 	bl	800a2d0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <OpenContinuousRxCWindow+0x7c>)
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007cda:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <OpenContinuousRxCWindow+0x7c>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007ce2:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <OpenContinuousRxCWindow+0x74>)
 8007ce4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007ce8:	4a10      	ldr	r2, [pc, #64]	; (8007d2c <OpenContinuousRxCWindow+0x80>)
 8007cea:	490e      	ldr	r1, [pc, #56]	; (8007d24 <OpenContinuousRxCWindow+0x78>)
 8007cec:	4618      	mov	r0, r3
 8007cee:	f002 fb09 	bl	800a304 <RegionRxConfig>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00f      	beq.n	8007d18 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <OpenContinuousRxCWindow+0x7c>)
 8007cfa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <OpenContinuousRxCWindow+0x7c>)
 8007d00:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <OpenContinuousRxCWindow+0x84>)
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	2000      	movs	r0, #0
 8007d0a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <OpenContinuousRxCWindow+0x7c>)
 8007d0e:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <OpenContinuousRxCWindow+0x7c>)
 8007d14:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8007d18:	bf00      	nop
 8007d1a:	3704      	adds	r7, #4
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd90      	pop	{r4, r7, pc}
 8007d20:	20000b94 	.word	0x20000b94
 8007d24:	20000a6c 	.word	0x20000a6c
 8007d28:	2000068c 	.word	0x2000068c
 8007d2c:	20000aa8 	.word	0x20000aa8
 8007d30:	0800fbf4 	.word	0x0800fbf4

08007d34 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	4613      	mov	r3, r2
 8007d42:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8007d44:	4b82      	ldr	r3, [pc, #520]	; (8007f50 <PrepareFrame+0x21c>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8007d4a:	4b81      	ldr	r3, [pc, #516]	; (8007f50 <PrepareFrame+0x21c>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8007d68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	4879      	ldr	r0, [pc, #484]	; (8007f54 <PrepareFrame+0x220>)
 8007d70:	f003 ff91 	bl	800bc96 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8007d74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	4b75      	ldr	r3, [pc, #468]	; (8007f50 <PrepareFrame+0x21c>)
 8007d7a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	4b73      	ldr	r3, [pc, #460]	; (8007f50 <PrepareFrame+0x21c>)
 8007d84:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b07      	cmp	r3, #7
 8007d92:	f000 80b9 	beq.w	8007f08 <PrepareFrame+0x1d4>
 8007d96:	2b07      	cmp	r3, #7
 8007d98:	f300 80d0 	bgt.w	8007f3c <PrepareFrame+0x208>
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d006      	beq.n	8007dae <PrepareFrame+0x7a>
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	f040 80cb 	bne.w	8007f3c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8007da6:	4b6a      	ldr	r3, [pc, #424]	; (8007f50 <PrepareFrame+0x21c>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8007dae:	4b68      	ldr	r3, [pc, #416]	; (8007f50 <PrepareFrame+0x21c>)
 8007db0:	2204      	movs	r2, #4
 8007db2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8007db6:	4b66      	ldr	r3, [pc, #408]	; (8007f50 <PrepareFrame+0x21c>)
 8007db8:	4a67      	ldr	r2, [pc, #412]	; (8007f58 <PrepareFrame+0x224>)
 8007dba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8007dbe:	4b64      	ldr	r3, [pc, #400]	; (8007f50 <PrepareFrame+0x21c>)
 8007dc0:	22ff      	movs	r2, #255	; 0xff
 8007dc2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	4b61      	ldr	r3, [pc, #388]	; (8007f50 <PrepareFrame+0x21c>)
 8007dcc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8007dd0:	4a5f      	ldr	r2, [pc, #380]	; (8007f50 <PrepareFrame+0x21c>)
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8007dd8:	4b60      	ldr	r3, [pc, #384]	; (8007f5c <PrepareFrame+0x228>)
 8007dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007dde:	4a5c      	ldr	r2, [pc, #368]	; (8007f50 <PrepareFrame+0x21c>)
 8007de0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	4b59      	ldr	r3, [pc, #356]	; (8007f50 <PrepareFrame+0x21c>)
 8007dea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8007dee:	4b58      	ldr	r3, [pc, #352]	; (8007f50 <PrepareFrame+0x21c>)
 8007df0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8007df4:	4b56      	ldr	r3, [pc, #344]	; (8007f50 <PrepareFrame+0x21c>)
 8007df6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8007dfa:	4b55      	ldr	r3, [pc, #340]	; (8007f50 <PrepareFrame+0x21c>)
 8007dfc:	4a55      	ldr	r2, [pc, #340]	; (8007f54 <PrepareFrame+0x220>)
 8007dfe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007e02:	f107 0318 	add.w	r3, r7, #24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 ff4e 	bl	8009ca8 <LoRaMacCryptoGetFCntUp>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007e12:	2312      	movs	r3, #18
 8007e14:	e098      	b.n	8007f48 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	4b4d      	ldr	r3, [pc, #308]	; (8007f50 <PrepareFrame+0x21c>)
 8007e1c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8007e20:	4b4b      	ldr	r3, [pc, #300]	; (8007f50 <PrepareFrame+0x21c>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8007e28:	4b49      	ldr	r3, [pc, #292]	; (8007f50 <PrepareFrame+0x21c>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	4a47      	ldr	r2, [pc, #284]	; (8007f50 <PrepareFrame+0x21c>)
 8007e34:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007e38:	f107 0314 	add.w	r3, r7, #20
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 fcf9 	bl	8009834 <LoRaMacCommandsGetSizeSerializedCmds>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007e48:	2313      	movs	r3, #19
 8007e4a:	e07d      	b.n	8007f48 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d076      	beq.n	8007f40 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8007e52:	4b42      	ldr	r3, [pc, #264]	; (8007f5c <PrepareFrame+0x228>)
 8007e54:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff fa71 	bl	8007340 <GetMaxAppPayloadWithoutFOptsLength>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8007e62:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <PrepareFrame+0x21c>)
 8007e64:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01d      	beq.n	8007ea8 <PrepareFrame+0x174>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b0f      	cmp	r3, #15
 8007e70:	d81a      	bhi.n	8007ea8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8007e72:	f107 0314 	add.w	r3, r7, #20
 8007e76:	4a3a      	ldr	r2, [pc, #232]	; (8007f60 <PrepareFrame+0x22c>)
 8007e78:	4619      	mov	r1, r3
 8007e7a:	200f      	movs	r0, #15
 8007e7c:	f001 fcf0 	bl	8009860 <LoRaMacCommandsSerializeCmds>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007e86:	2313      	movs	r3, #19
 8007e88:	e05e      	b.n	8007f48 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	b2d9      	uxtb	r1, r3
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	7813      	ldrb	r3, [r2, #0]
 8007e96:	f361 0303 	bfi	r3, r1, #0, #4
 8007e9a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	4b2b      	ldr	r3, [pc, #172]	; (8007f50 <PrepareFrame+0x21c>)
 8007ea2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8007ea6:	e04b      	b.n	8007f40 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <PrepareFrame+0x21c>)
 8007eaa:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d010      	beq.n	8007ed4 <PrepareFrame+0x1a0>
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b0f      	cmp	r3, #15
 8007eb6:	d90d      	bls.n	8007ed4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8007eb8:	7ffb      	ldrb	r3, [r7, #31]
 8007eba:	f107 0114 	add.w	r1, r7, #20
 8007ebe:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <PrepareFrame+0x230>)
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fccd 	bl	8009860 <LoRaMacCommandsSerializeCmds>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007ecc:	2313      	movs	r3, #19
 8007ece:	e03b      	b.n	8007f48 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8007ed0:	230a      	movs	r3, #10
 8007ed2:	e039      	b.n	8007f48 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8007ed4:	7ffb      	ldrb	r3, [r7, #31]
 8007ed6:	f107 0114 	add.w	r1, r7, #20
 8007eda:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <PrepareFrame+0x230>)
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 fcbf 	bl	8009860 <LoRaMacCommandsSerializeCmds>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007ee8:	2313      	movs	r3, #19
 8007eea:	e02d      	b.n	8007f48 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8007eec:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <PrepareFrame+0x21c>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <PrepareFrame+0x21c>)
 8007ef6:	4a1b      	ldr	r2, [pc, #108]	; (8007f64 <PrepareFrame+0x230>)
 8007ef8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <PrepareFrame+0x21c>)
 8007f02:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8007f06:	e01b      	b.n	8007f40 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01a      	beq.n	8007f44 <PrepareFrame+0x210>
 8007f0e:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <PrepareFrame+0x21c>)
 8007f10:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d015      	beq.n	8007f44 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8007f18:	4813      	ldr	r0, [pc, #76]	; (8007f68 <PrepareFrame+0x234>)
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <PrepareFrame+0x21c>)
 8007f1c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	f003 feb6 	bl	800bc96 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <PrepareFrame+0x21c>)
 8007f2c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3301      	adds	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <PrepareFrame+0x21c>)
 8007f38:	801a      	strh	r2, [r3, #0]
            }
            break;
 8007f3a:	e003      	b.n	8007f44 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e003      	b.n	8007f48 <PrepareFrame+0x214>
            break;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <PrepareFrame+0x212>
            break;
 8007f44:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	2000068c 	.word	0x2000068c
 8007f54:	200007c4 	.word	0x200007c4
 8007f58:	2000068e 	.word	0x2000068e
 8007f5c:	20000b94 	.word	0x20000b94
 8007f60:	200007a4 	.word	0x200007a4
 8007f64:	20000b14 	.word	0x20000b14
 8007f68:	2000068f 	.word	0x2000068f

08007f6c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08a      	sub	sp, #40	; 0x28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f76:	2303      	movs	r3, #3
 8007f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007f84:	4b48      	ldr	r3, [pc, #288]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8007f86:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007f8a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007f8c:	4b46      	ldr	r3, [pc, #280]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8007f8e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8007f92:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007f94:	4b44      	ldr	r3, [pc, #272]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8007f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f9a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007f9c:	4b42      	ldr	r3, [pc, #264]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8007f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007fa4:	4b41      	ldr	r3, [pc, #260]	; (80080ac <SendFrameOnChannel+0x140>)
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007faa:	4b3f      	ldr	r3, [pc, #252]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8007fac:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8007fb0:	f107 020f 	add.w	r2, r7, #15
 8007fb4:	f107 0110 	add.w	r1, r7, #16
 8007fb8:	4b3d      	ldr	r3, [pc, #244]	; (80080b0 <SendFrameOnChannel+0x144>)
 8007fba:	f002 f9b8 	bl	800a32e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007fbe:	4b3b      	ldr	r3, [pc, #236]	; (80080ac <SendFrameOnChannel+0x140>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007fc6:	4b38      	ldr	r3, [pc, #224]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8007fc8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	4b37      	ldr	r3, [pc, #220]	; (80080ac <SendFrameOnChannel+0x140>)
 8007fd0:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8007fd4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007fd8:	4b34      	ldr	r3, [pc, #208]	; (80080ac <SendFrameOnChannel+0x140>)
 8007fda:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	4a32      	ldr	r2, [pc, #200]	; (80080ac <SendFrameOnChannel+0x140>)
 8007fe2:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007fe6:	4b31      	ldr	r3, [pc, #196]	; (80080ac <SendFrameOnChannel+0x140>)
 8007fe8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007fec:	4a2f      	ldr	r2, [pc, #188]	; (80080ac <SendFrameOnChannel+0x140>)
 8007fee:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <SendFrameOnChannel+0x140>)
 8007ff4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007ff8:	4a2c      	ldr	r2, [pc, #176]	; (80080ac <SendFrameOnChannel+0x140>)
 8007ffa:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8007ffe:	f001 fa0d 	bl	800941c <LoRaMacClassBIsBeaconModeActive>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008008:	4b28      	ldr	r3, [pc, #160]	; (80080ac <SendFrameOnChannel+0x140>)
 800800a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800800e:	4618      	mov	r0, r3
 8008010:	f001 fa3a 	bl	8009488 <LoRaMacClassBIsUplinkCollision>
 8008014:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800801c:	2310      	movs	r3, #16
 800801e:	e03e      	b.n	800809e <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008020:	4b21      	ldr	r3, [pc, #132]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8008022:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800802a:	f001 fa37 	bl	800949c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800802e:	f001 fa06 	bl	800943e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8008032:	4b1d      	ldr	r3, [pc, #116]	; (80080a8 <SendFrameOnChannel+0x13c>)
 8008034:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8008038:	b2db      	uxtb	r3, r3
 800803a:	4a1c      	ldr	r2, [pc, #112]	; (80080ac <SendFrameOnChannel+0x140>)
 800803c:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fc96 	bl	8007974 <SecureFrame>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800804e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <SendFrameOnChannel+0xf0>
    {
        return status;
 8008056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800805a:	e020      	b.n	800809e <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800805c:	4b13      	ldr	r3, [pc, #76]	; (80080ac <SendFrameOnChannel+0x140>)
 800805e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008062:	f043 0302 	orr.w	r3, r3, #2
 8008066:	4a11      	ldr	r2, [pc, #68]	; (80080ac <SendFrameOnChannel+0x140>)
 8008068:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <SendFrameOnChannel+0x140>)
 800806e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008072:	f083 0301 	eor.w	r3, r3, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 800807c:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <SendFrameOnChannel+0x140>)
 800807e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8008082:	3301      	adds	r3, #1
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <SendFrameOnChannel+0x140>)
 8008088:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <SendFrameOnChannel+0x148>)
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	4a06      	ldr	r2, [pc, #24]	; (80080ac <SendFrameOnChannel+0x140>)
 8008092:	8812      	ldrh	r2, [r2, #0]
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	4611      	mov	r1, r2
 8008098:	4807      	ldr	r0, [pc, #28]	; (80080b8 <SendFrameOnChannel+0x14c>)
 800809a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3728      	adds	r7, #40	; 0x28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000b94 	.word	0x20000b94
 80080ac:	2000068c 	.word	0x2000068c
 80080b0:	20000aa0 	.word	0x20000aa0
 80080b4:	0800fbf4 	.word	0x0800fbf4
 80080b8:	2000068e 	.word	0x2000068e

080080bc <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80080c6:	4b16      	ldr	r3, [pc, #88]	; (8008120 <SetTxContinuousWave+0x64>)
 80080c8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80080cc:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80080ce:	4b15      	ldr	r3, [pc, #84]	; (8008124 <SetTxContinuousWave+0x68>)
 80080d0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80080d4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80080d6:	4b13      	ldr	r3, [pc, #76]	; (8008124 <SetTxContinuousWave+0x68>)
 80080d8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80080dc:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80080de:	4b11      	ldr	r3, [pc, #68]	; (8008124 <SetTxContinuousWave+0x68>)
 80080e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e4:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <SetTxContinuousWave+0x68>)
 80080e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ec:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <SetTxContinuousWave+0x68>)
 80080f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080f8:	f107 0208 	add.w	r2, r7, #8
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f002 f95e 	bl	800a3c0 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <SetTxContinuousWave+0x64>)
 8008106:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800810a:	f043 0302 	orr.w	r3, r3, #2
 800810e:	4a04      	ldr	r2, [pc, #16]	; (8008120 <SetTxContinuousWave+0x64>)
 8008110:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	2000068c 	.word	0x2000068c
 8008124:	20000b94 	.word	0x20000b94

08008128 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	6039      	str	r1, [r7, #0]
 8008132:	80fb      	strh	r3, [r7, #6]
 8008134:	4613      	mov	r3, r2
 8008136:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008138:	4b09      	ldr	r3, [pc, #36]	; (8008160 <SetTxContinuousWave1+0x38>)
 800813a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8008140:	88fa      	ldrh	r2, [r7, #6]
 8008142:	6838      	ldr	r0, [r7, #0]
 8008144:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008146:	4b07      	ldr	r3, [pc, #28]	; (8008164 <SetTxContinuousWave1+0x3c>)
 8008148:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800814c:	f043 0302 	orr.w	r3, r3, #2
 8008150:	4a04      	ldr	r2, [pc, #16]	; (8008164 <SetTxContinuousWave1+0x3c>)
 8008152:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	0800fbf4 	.word	0x0800fbf4
 8008164:	2000068c 	.word	0x2000068c

08008168 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
	...

08008178 <LoRaMacStart>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacStart( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800817c:	4b04      	ldr	r3, [pc, #16]	; (8008190 <LoRaMacStart+0x18>)
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8008184:	f7fe ffb0 	bl	80070e8 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	2000068c 	.word	0x2000068c

08008194 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	; 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80081a0:	4b3e      	ldr	r3, [pc, #248]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80081a6:	4b3d      	ldr	r3, [pc, #244]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081a8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80081ac:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80081ae:	4b3b      	ldr	r3, [pc, #236]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081b0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80081b4:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e066      	b.n	8008292 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80081c4:	4b35      	ldr	r3, [pc, #212]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081c6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80081ca:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80081cc:	2300      	movs	r3, #0
 80081ce:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80081d0:	4b32      	ldr	r3, [pc, #200]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081d2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80081d6:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80081d8:	4b30      	ldr	r3, [pc, #192]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80081de:	4b2f      	ldr	r3, [pc, #188]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081e0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80081e4:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80081e6:	4b2d      	ldr	r3, [pc, #180]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081e8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80081ec:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80081ee:	4b2b      	ldr	r3, [pc, #172]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081f0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80081f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80081f8:	4b28      	ldr	r3, [pc, #160]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 80081fa:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80081fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 8008204:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <LoRaMacQueryTxPossible+0x108>)
 800820e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8008216:	f107 0310 	add.w	r3, r7, #16
 800821a:	f107 020e 	add.w	r2, r7, #14
 800821e:	f107 010f 	add.w	r1, r7, #15
 8008222:	f107 0014 	add.w	r0, r7, #20
 8008226:	f001 f8a7 	bl	8009378 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800822a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff f886 	bl	8007340 <GetMaxAppPayloadWithoutFOptsLength>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800823c:	f107 0308 	add.w	r3, r7, #8
 8008240:	4618      	mov	r0, r3
 8008242:	f001 faf7 	bl	8009834 <LoRaMacCommandsGetSizeSerializedCmds>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800824c:	2313      	movs	r3, #19
 800824e:	e020      	b.n	8008292 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b0f      	cmp	r3, #15
 8008254:	d819      	bhi.n	800828a <LoRaMacQueryTxPossible+0xf6>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	461a      	mov	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	429a      	cmp	r2, r3
 8008260:	d313      	bcc.n	800828a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	785a      	ldrb	r2, [r3, #1]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	4619      	mov	r1, r3
 8008278:	79fa      	ldrb	r2, [r7, #7]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	4299      	cmp	r1, r3
 8008280:	d301      	bcc.n	8008286 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e005      	b.n	8008292 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8008286:	2308      	movs	r3, #8
 8008288:	e003      	b.n	8008292 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8008290:	2308      	movs	r3, #8
    }
}
 8008292:	4618      	mov	r0, r3
 8008294:	3728      	adds	r7, #40	; 0x28
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000b94 	.word	0x20000b94

080082a0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80082a0:	b590      	push	{r4, r7, lr}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e1a4      	b.n	8008600 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b3f      	cmp	r3, #63	; 0x3f
 80082bc:	f200 8199 	bhi.w	80085f2 <LoRaMacMibGetRequestConfirm+0x352>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <LoRaMacMibGetRequestConfirm+0x28>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080083c9 	.word	0x080083c9
 80082cc:	080083d5 	.word	0x080083d5
 80082d0:	080083e1 	.word	0x080083e1
 80082d4:	080083ed 	.word	0x080083ed
 80082d8:	080083f9 	.word	0x080083f9
 80082dc:	08008405 	.word	0x08008405
 80082e0:	08008411 	.word	0x08008411
 80082e4:	080085f3 	.word	0x080085f3
 80082e8:	080085f3 	.word	0x080085f3
 80082ec:	080085f3 	.word	0x080085f3
 80082f0:	080085f3 	.word	0x080085f3
 80082f4:	080085f3 	.word	0x080085f3
 80082f8:	080085f3 	.word	0x080085f3
 80082fc:	080085f3 	.word	0x080085f3
 8008300:	080085f3 	.word	0x080085f3
 8008304:	08008425 	.word	0x08008425
 8008308:	08008431 	.word	0x08008431
 800830c:	0800843d 	.word	0x0800843d
 8008310:	0800845f 	.word	0x0800845f
 8008314:	08008471 	.word	0x08008471
 8008318:	08008483 	.word	0x08008483
 800831c:	08008495 	.word	0x08008495
 8008320:	080084c9 	.word	0x080084c9
 8008324:	080084a7 	.word	0x080084a7
 8008328:	080084eb 	.word	0x080084eb
 800832c:	080084f7 	.word	0x080084f7
 8008330:	08008501 	.word	0x08008501
 8008334:	0800850b 	.word	0x0800850b
 8008338:	08008515 	.word	0x08008515
 800833c:	0800851f 	.word	0x0800851f
 8008340:	08008529 	.word	0x08008529
 8008344:	08008535 	.word	0x08008535
 8008348:	0800854d 	.word	0x0800854d
 800834c:	08008541 	.word	0x08008541
 8008350:	08008559 	.word	0x08008559
 8008354:	08008563 	.word	0x08008563
 8008358:	0800856f 	.word	0x0800856f
 800835c:	0800858b 	.word	0x0800858b
 8008360:	0800857b 	.word	0x0800857b
 8008364:	08008583 	.word	0x08008583
 8008368:	080085f3 	.word	0x080085f3
 800836c:	08008597 	.word	0x08008597
 8008370:	080085f3 	.word	0x080085f3
 8008374:	080085f3 	.word	0x080085f3
 8008378:	080085f3 	.word	0x080085f3
 800837c:	080085f3 	.word	0x080085f3
 8008380:	080085f3 	.word	0x080085f3
 8008384:	080085f3 	.word	0x080085f3
 8008388:	080085f3 	.word	0x080085f3
 800838c:	080085f3 	.word	0x080085f3
 8008390:	080085f3 	.word	0x080085f3
 8008394:	080085f3 	.word	0x080085f3
 8008398:	080085f3 	.word	0x080085f3
 800839c:	080085f3 	.word	0x080085f3
 80083a0:	080085f3 	.word	0x080085f3
 80083a4:	080085f3 	.word	0x080085f3
 80083a8:	080085f3 	.word	0x080085f3
 80083ac:	080085ab 	.word	0x080085ab
 80083b0:	080085b7 	.word	0x080085b7
 80083b4:	080085c3 	.word	0x080085c3
 80083b8:	080085cf 	.word	0x080085cf
 80083bc:	080085db 	.word	0x080085db
 80083c0:	080085e7 	.word	0x080085e7
 80083c4:	080085ed 	.word	0x080085ed
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80083c8:	4b8f      	ldr	r3, [pc, #572]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80083ca:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	711a      	strb	r2, [r3, #4]
            break;
 80083d2:	e114      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80083d4:	4b8c      	ldr	r3, [pc, #560]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80083d6:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	711a      	strb	r2, [r3, #4]
            break;
 80083de:	e10e      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd fd1d 	bl	8005e24 <SecureElementGetDevEui>
            break;
 80083ea:	e108      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fd fd47 	bl	8005e84 <SecureElementGetJoinEui>
            break;
 80083f6:	e102      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80083f8:	4b83      	ldr	r3, [pc, #524]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80083fa:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	711a      	strb	r2, [r3, #4]
            break;
 8008402:	e0fc      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8008404:	4b80      	ldr	r3, [pc, #512]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008406:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	605a      	str	r2, [r3, #4]
            break;
 800840e:	e0f6      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8008410:	4b7d      	ldr	r3, [pc, #500]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008412:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3304      	adds	r3, #4
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f7fd fd63 	bl	8005ee8 <SecureElementGetDevAddr>
            break;
 8008422:	e0ec      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8008424:	4b78      	ldr	r3, [pc, #480]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008426:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	711a      	strb	r2, [r3, #4]
            break;
 800842e:	e0e6      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8008430:	4b75      	ldr	r3, [pc, #468]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008432:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	711a      	strb	r2, [r3, #4]
            break;
 800843a:	e0e0      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800843c:	231d      	movs	r3, #29
 800843e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008440:	4b71      	ldr	r3, [pc, #452]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008442:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008446:	f107 0210 	add.w	r2, r7, #16
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f001 feeb 	bl	800a228 <RegionGetPhyParam>
 8008452:	4603      	mov	r3, r0
 8008454:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	605a      	str	r2, [r3, #4]
            break;
 800845c:	e0cf      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a69      	ldr	r2, [pc, #420]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008462:	3304      	adds	r3, #4
 8008464:	326c      	adds	r2, #108	; 0x6c
 8008466:	e892 0003 	ldmia.w	r2, {r0, r1}
 800846a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800846e:	e0c6      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a65      	ldr	r2, [pc, #404]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008474:	3304      	adds	r3, #4
 8008476:	32b4      	adds	r2, #180	; 0xb4
 8008478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800847c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8008480:	e0bd      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a60      	ldr	r2, [pc, #384]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008486:	3304      	adds	r3, #4
 8008488:	3274      	adds	r2, #116	; 0x74
 800848a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800848e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8008492:	e0b4      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a5c      	ldr	r2, [pc, #368]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008498:	3304      	adds	r3, #4
 800849a:	32bc      	adds	r2, #188	; 0xbc
 800849c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084a0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80084a4:	e0ab      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80084a6:	231b      	movs	r3, #27
 80084a8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084aa:	4b57      	ldr	r3, [pc, #348]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80084ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80084b0:	f107 0210 	add.w	r2, r7, #16
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 feb6 	bl	800a228 <RegionGetPhyParam>
 80084bc:	4603      	mov	r3, r0
 80084be:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	605a      	str	r2, [r3, #4]
            break;
 80084c6:	e09a      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80084c8:	231a      	movs	r3, #26
 80084ca:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084cc:	4b4e      	ldr	r3, [pc, #312]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80084ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80084d2:	f107 0210 	add.w	r2, r7, #16
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 fea5 	bl	800a228 <RegionGetPhyParam>
 80084de:	4603      	mov	r3, r0
 80084e0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	605a      	str	r2, [r3, #4]
            break;
 80084e8:	e089      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80084ea:	4b47      	ldr	r3, [pc, #284]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80084ec:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	711a      	strb	r2, [r3, #4]
            break;
 80084f4:	e083      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80084f6:	4b44      	ldr	r3, [pc, #272]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80084f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	605a      	str	r2, [r3, #4]
            break;
 80084fe:	e07e      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8008500:	4b41      	ldr	r3, [pc, #260]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008502:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	605a      	str	r2, [r3, #4]
            break;
 8008508:	e079      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800850a:	4b3f      	ldr	r3, [pc, #252]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 800850c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	605a      	str	r2, [r3, #4]
            break;
 8008512:	e074      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8008514:	4b3c      	ldr	r3, [pc, #240]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008516:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	605a      	str	r2, [r3, #4]
            break;
 800851c:	e06f      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800851e:	4b3a      	ldr	r3, [pc, #232]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008520:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	605a      	str	r2, [r3, #4]
            break;
 8008526:	e06a      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008528:	4b37      	ldr	r3, [pc, #220]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 800852a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	711a      	strb	r2, [r3, #4]
            break;
 8008532:	e064      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008534:	4b34      	ldr	r3, [pc, #208]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008536:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	711a      	strb	r2, [r3, #4]
            break;
 800853e:	e05e      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008540:	4b31      	ldr	r3, [pc, #196]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008542:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	711a      	strb	r2, [r3, #4]
            break;
 800854a:	e058      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800854c:	4b2e      	ldr	r3, [pc, #184]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 800854e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	711a      	strb	r2, [r3, #4]
            break;
 8008556:	e052      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8008558:	4b2b      	ldr	r3, [pc, #172]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 800855a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	605a      	str	r2, [r3, #4]
            break;
 8008560:	e04d      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8008562:	4b29      	ldr	r3, [pc, #164]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008564:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	711a      	strb	r2, [r3, #4]
            break;
 800856c:	e047      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800856e:	4b26      	ldr	r3, [pc, #152]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 8008570:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	605a      	str	r2, [r3, #4]
            break;
 8008578:	e041      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a22      	ldr	r2, [pc, #136]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 800857e:	605a      	str	r2, [r3, #4]
            break;
 8008580:	e03d      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8008588:	e039      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800858a:	4b1f      	ldr	r3, [pc, #124]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 800858c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]
            break;
 8008594:	e033      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a1b      	ldr	r2, [pc, #108]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 800859a:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 800859e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80085a0:	687c      	ldr	r4, [r7, #4]
 80085a2:	f001 ff41 	bl	800a428 <RegionGetVersion>
 80085a6:	60a0      	str	r0, [r4, #8]
            break;
 80085a8:	e029      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80085aa:	4b17      	ldr	r3, [pc, #92]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80085ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	605a      	str	r2, [r3, #4]
            break;
 80085b4:	e023      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80085b6:	4b14      	ldr	r3, [pc, #80]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80085b8:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	809a      	strh	r2, [r3, #4]
            break;
 80085c0:	e01d      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80085c2:	4b11      	ldr	r3, [pc, #68]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80085c4:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	809a      	strh	r2, [r3, #4]
            break;
 80085cc:	e017      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80085ce:	4b0e      	ldr	r3, [pc, #56]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80085d0:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	809a      	strh	r2, [r3, #4]
            break;
 80085d8:	e011      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <LoRaMacMibGetRequestConfirm+0x368>)
 80085dc:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	809a      	strh	r2, [r3, #4]
            break;
 80085e4:	e00b      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80085e6:	2318      	movs	r3, #24
 80085e8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80085ea:	e008      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80085ec:	2318      	movs	r3, #24
 80085ee:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80085f0:	e005      	b.n	80085fe <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 ff34 	bl	8009460 <LoRaMacClassBMibGetRequestConfirm>
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]
            break;
 80085fc:	bf00      	nop
        }
    }
    return status;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	bd90      	pop	{r4, r7, pc}
 8008608:	20000b94 	.word	0x20000b94

0800860c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800861e:	2303      	movs	r3, #3
 8008620:	e382      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8008622:	4bbb      	ldr	r3, [pc, #748]	; (8008910 <LoRaMacMibSetRequestConfirm+0x304>)
 8008624:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8008630:	2301      	movs	r3, #1
 8008632:	e379      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b3f      	cmp	r3, #63	; 0x3f
 800863a:	f200 8353 	bhi.w	8008ce4 <LoRaMacMibSetRequestConfirm+0x6d8>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <LoRaMacMibSetRequestConfirm+0x38>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008745 	.word	0x08008745
 8008648:	08008755 	.word	0x08008755
 800864c:	0800876f 	.word	0x0800876f
 8008650:	08008787 	.word	0x08008787
 8008654:	0800879f 	.word	0x0800879f
 8008658:	080087ab 	.word	0x080087ab
 800865c:	080087b7 	.word	0x080087b7
 8008660:	080087e1 	.word	0x080087e1
 8008664:	08008807 	.word	0x08008807
 8008668:	0800882d 	.word	0x0800882d
 800866c:	08008853 	.word	0x08008853
 8008670:	08008879 	.word	0x08008879
 8008674:	0800889f 	.word	0x0800889f
 8008678:	080088c5 	.word	0x080088c5
 800867c:	080088eb 	.word	0x080088eb
 8008680:	08008919 	.word	0x08008919
 8008684:	08008939 	.word	0x08008939
 8008688:	08008ce5 	.word	0x08008ce5
 800868c:	08008945 	.word	0x08008945
 8008690:	080089b5 	.word	0x080089b5
 8008694:	080089f5 	.word	0x080089f5
 8008698:	08008a57 	.word	0x08008a57
 800869c:	08008ac7 	.word	0x08008ac7
 80086a0:	08008a97 	.word	0x08008a97
 80086a4:	08008af7 	.word	0x08008af7
 80086a8:	08008b19 	.word	0x08008b19
 80086ac:	08008b23 	.word	0x08008b23
 80086b0:	08008b2d 	.word	0x08008b2d
 80086b4:	08008b37 	.word	0x08008b37
 80086b8:	08008b41 	.word	0x08008b41
 80086bc:	08008b4b 	.word	0x08008b4b
 80086c0:	08008b7d 	.word	0x08008b7d
 80086c4:	08008bf1 	.word	0x08008bf1
 80086c8:	08008bb7 	.word	0x08008bb7
 80086cc:	08008c23 	.word	0x08008c23
 80086d0:	08008c39 	.word	0x08008c39
 80086d4:	08008c51 	.word	0x08008c51
 80086d8:	08008c5d 	.word	0x08008c5d
 80086dc:	08008c69 	.word	0x08008c69
 80086e0:	08008ce5 	.word	0x08008ce5
 80086e4:	08008c73 	.word	0x08008c73
 80086e8:	08008ce5 	.word	0x08008ce5
 80086ec:	08008ce5 	.word	0x08008ce5
 80086f0:	08008ce5 	.word	0x08008ce5
 80086f4:	08008ce5 	.word	0x08008ce5
 80086f8:	08008ce5 	.word	0x08008ce5
 80086fc:	08008ce5 	.word	0x08008ce5
 8008700:	08008ce5 	.word	0x08008ce5
 8008704:	08008ce5 	.word	0x08008ce5
 8008708:	08008ce5 	.word	0x08008ce5
 800870c:	08008ce5 	.word	0x08008ce5
 8008710:	08008ce5 	.word	0x08008ce5
 8008714:	08008ce5 	.word	0x08008ce5
 8008718:	08008ce5 	.word	0x08008ce5
 800871c:	08008ce5 	.word	0x08008ce5
 8008720:	08008ce5 	.word	0x08008ce5
 8008724:	08008ce5 	.word	0x08008ce5
 8008728:	08008c9d 	.word	0x08008c9d
 800872c:	08008ca9 	.word	0x08008ca9
 8008730:	08008cb5 	.word	0x08008cb5
 8008734:	08008cc1 	.word	0x08008cc1
 8008738:	08008ccd 	.word	0x08008ccd
 800873c:	08008cd9 	.word	0x08008cd9
 8008740:	08008cdf 	.word	0x08008cdf
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	791b      	ldrb	r3, [r3, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe fd11 	bl	8007170 <SwitchClass>
 800874e:	4603      	mov	r3, r0
 8008750:	75fb      	strb	r3, [r7, #23]
            break;
 8008752:	e2e8      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d005      	beq.n	8008768 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	791a      	ldrb	r2, [r3, #4]
 8008760:	4b6c      	ldr	r3, [pc, #432]	; (8008914 <LoRaMacMibSetRequestConfirm+0x308>)
 8008762:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008766:	e2de      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008768:	2303      	movs	r3, #3
 800876a:	75fb      	strb	r3, [r7, #23]
            break;
 800876c:	e2db      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd fb3e 	bl	8005df4 <SecureElementSetDevEui>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 82b8 	beq.w	8008cf0 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008780:	2303      	movs	r3, #3
 8008782:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008784:	e2b4      	b.n	8008cf0 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd fb62 	bl	8005e54 <SecureElementSetJoinEui>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 82ae 	beq.w	8008cf4 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008798:	2303      	movs	r3, #3
 800879a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800879c:	e2aa      	b.n	8008cf4 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	791a      	ldrb	r2, [r3, #4]
 80087a2:	4b5c      	ldr	r3, [pc, #368]	; (8008914 <LoRaMacMibSetRequestConfirm+0x308>)
 80087a4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 80087a8:	e2bd      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4a59      	ldr	r2, [pc, #356]	; (8008914 <LoRaMacMibSetRequestConfirm+0x308>)
 80087b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80087b4:	e2b7      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80087b6:	4b57      	ldr	r3, [pc, #348]	; (8008914 <LoRaMacMibSetRequestConfirm+0x308>)
 80087b8:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f7fd fb76 	bl	8005eb4 <SecureElementSetDevAddr>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80087ce:	2303      	movs	r3, #3
 80087d0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80087d2:	e2a8      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4a4e      	ldr	r2, [pc, #312]	; (8008914 <LoRaMacMibSetRequestConfirm+0x308>)
 80087da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80087de:	e2a2      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	4619      	mov	r1, r3
 80087ee:	2000      	movs	r0, #0
 80087f0:	f001 fa72 	bl	8009cd8 <LoRaMacCryptoSetKey>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 827e 	beq.w	8008cf8 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80087fc:	2311      	movs	r3, #17
 80087fe:	e293      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008800:	2303      	movs	r3, #3
 8008802:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008804:	e278      	b.n	8008cf8 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00b      	beq.n	8008826 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	4619      	mov	r1, r3
 8008814:	2001      	movs	r0, #1
 8008816:	f001 fa5f 	bl	8009cd8 <LoRaMacCryptoSetKey>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 826d 	beq.w	8008cfc <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008822:	2311      	movs	r3, #17
 8008824:	e280      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008826:	2303      	movs	r3, #3
 8008828:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800882a:	e267      	b.n	8008cfc <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4619      	mov	r1, r3
 800883a:	2008      	movs	r0, #8
 800883c:	f001 fa4c 	bl	8009cd8 <LoRaMacCryptoSetKey>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 825c 	beq.w	8008d00 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008848:	2311      	movs	r3, #17
 800884a:	e26d      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800884c:	2303      	movs	r3, #3
 800884e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008850:	e256      	b.n	8008d00 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	4619      	mov	r1, r3
 8008860:	2009      	movs	r0, #9
 8008862:	f001 fa39 	bl	8009cd8 <LoRaMacCryptoSetKey>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 824b 	beq.w	8008d04 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800886e:	2311      	movs	r3, #17
 8008870:	e25a      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008872:	2303      	movs	r3, #3
 8008874:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008876:	e245      	b.n	8008d04 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4619      	mov	r1, r3
 8008886:	200c      	movs	r0, #12
 8008888:	f001 fa26 	bl	8009cd8 <LoRaMacCryptoSetKey>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 823a 	beq.w	8008d08 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008894:	2311      	movs	r3, #17
 8008896:	e247      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008898:	2303      	movs	r3, #3
 800889a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800889c:	e234      	b.n	8008d08 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00b      	beq.n	80088be <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	4619      	mov	r1, r3
 80088ac:	200d      	movs	r0, #13
 80088ae:	f001 fa13 	bl	8009cd8 <LoRaMacCryptoSetKey>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 8229 	beq.w	8008d0c <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80088ba:	2311      	movs	r3, #17
 80088bc:	e234      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80088be:	2303      	movs	r3, #3
 80088c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80088c2:	e223      	b.n	8008d0c <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	4619      	mov	r1, r3
 80088d2:	200e      	movs	r0, #14
 80088d4:	f001 fa00 	bl	8009cd8 <LoRaMacCryptoSetKey>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8218 	beq.w	8008d10 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80088e0:	2311      	movs	r3, #17
 80088e2:	e221      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80088e4:	2303      	movs	r3, #3
 80088e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80088e8:	e212      	b.n	8008d10 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	4619      	mov	r1, r3
 80088f8:	200f      	movs	r0, #15
 80088fa:	f001 f9ed 	bl	8009cd8 <LoRaMacCryptoSetKey>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8207 	beq.w	8008d14 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008906:	2311      	movs	r3, #17
 8008908:	e20e      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800890a:	2303      	movs	r3, #3
 800890c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800890e:	e201      	b.n	8008d14 <LoRaMacMibSetRequestConfirm+0x708>
 8008910:	2000068c 	.word	0x2000068c
 8008914:	20000b94 	.word	0x20000b94
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	791a      	ldrb	r2, [r3, #4]
 800891c:	4bb2      	ldr	r3, [pc, #712]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800891e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8008922:	4bb2      	ldr	r3, [pc, #712]	; (8008bec <LoRaMacMibSetRequestConfirm+0x5e0>)
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	4ab0      	ldr	r2, [pc, #704]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008928:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 800892c:	4610      	mov	r0, r2
 800892e:	4798      	blx	r3
            Radio.Sleep( );
 8008930:	4bae      	ldr	r3, [pc, #696]	; (8008bec <LoRaMacMibSetRequestConfirm+0x5e0>)
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	4798      	blx	r3
            break;
 8008936:	e1f6      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	791a      	ldrb	r2, [r3, #4]
 800893c:	4baa      	ldr	r3, [pc, #680]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800893e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8008942:	e1f0      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7a1b      	ldrb	r3, [r3, #8]
 8008948:	b25b      	sxtb	r3, r3
 800894a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800894c:	4ba6      	ldr	r3, [pc, #664]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800894e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008952:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8008954:	4ba4      	ldr	r3, [pc, #656]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008956:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800895a:	f107 0108 	add.w	r1, r7, #8
 800895e:	2207      	movs	r2, #7
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fc8b 	bl	800a27c <RegionVerify>
 8008966:	4603      	mov	r3, r0
 8008968:	f083 0301 	eor.w	r3, r3, #1
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008972:	2303      	movs	r3, #3
 8008974:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8008976:	e1d6      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800897e:	4b9a      	ldr	r3, [pc, #616]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008980:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	2200      	movs	r2, #0
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fc76 	bl	800a27c <RegionVerify>
 8008990:	4603      	mov	r3, r0
 8008992:	f083 0301 	eor.w	r3, r3, #1
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800899c:	2303      	movs	r3, #3
 800899e:	75fb      	strb	r3, [r7, #23]
            break;
 80089a0:	e1c1      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80089a2:	4b91      	ldr	r3, [pc, #580]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	336c      	adds	r3, #108	; 0x6c
 80089a8:	3204      	adds	r2, #4
 80089aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089ae:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80089b2:	e1b8      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7a1b      	ldrb	r3, [r3, #8]
 80089b8:	b25b      	sxtb	r3, r3
 80089ba:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80089bc:	4b8a      	ldr	r3, [pc, #552]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80089be:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80089c2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80089c4:	4b88      	ldr	r3, [pc, #544]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80089c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80089ca:	f107 0108 	add.w	r1, r7, #8
 80089ce:	2207      	movs	r2, #7
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fc53 	bl	800a27c <RegionVerify>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80089dc:	4b82      	ldr	r3, [pc, #520]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	33b4      	adds	r3, #180	; 0xb4
 80089e2:	3204      	adds	r2, #4
 80089e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089e8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80089ec:	e19b      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80089ee:	2303      	movs	r3, #3
 80089f0:	75fb      	strb	r3, [r7, #23]
            break;
 80089f2:	e198      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7a1b      	ldrb	r3, [r3, #8]
 80089f8:	b25b      	sxtb	r3, r3
 80089fa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80089fc:	4b7a      	ldr	r3, [pc, #488]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80089fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a02:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008a04:	4b78      	ldr	r3, [pc, #480]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008a06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008a0a:	f107 0108 	add.w	r1, r7, #8
 8008a0e:	2207      	movs	r2, #7
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 fc33 	bl	800a27c <RegionVerify>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d019      	beq.n	8008a50 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8008a1c:	4b72      	ldr	r3, [pc, #456]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	3374      	adds	r3, #116	; 0x74
 8008a22:	3204      	adds	r2, #4
 8008a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a28:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8008a2c:	4b6e      	ldr	r3, [pc, #440]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008a2e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	f040 8170 	bne.w	8008d18 <LoRaMacMibSetRequestConfirm+0x70c>
 8008a38:	4b6b      	ldr	r3, [pc, #428]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008a3a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 816a 	beq.w	8008d18 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8008a44:	4b69      	ldr	r3, [pc, #420]	; (8008bec <LoRaMacMibSetRequestConfirm+0x5e0>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8008a4a:	f7ff f92f 	bl	8007cac <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008a4e:	e163      	b.n	8008d18 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008a50:	2303      	movs	r3, #3
 8008a52:	75fb      	strb	r3, [r7, #23]
            break;
 8008a54:	e160      	b.n	8008d18 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7a1b      	ldrb	r3, [r3, #8]
 8008a5a:	b25b      	sxtb	r3, r3
 8008a5c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008a5e:	4b62      	ldr	r3, [pc, #392]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008a60:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a64:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008a66:	4b60      	ldr	r3, [pc, #384]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008a68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	2207      	movs	r2, #7
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 fc02 	bl	800a27c <RegionVerify>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d008      	beq.n	8008a90 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8008a7e:	4b5a      	ldr	r3, [pc, #360]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	33bc      	adds	r3, #188	; 0xbc
 8008a84:	3204      	adds	r2, #4
 8008a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a8a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008a8e:	e14a      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008a90:	2303      	movs	r3, #3
 8008a92:	75fb      	strb	r3, [r7, #23]
            break;
 8008a94:	e147      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8008aa0:	4b51      	ldr	r3, [pc, #324]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008aa6:	f107 020c 	add.w	r2, r7, #12
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 fbfc 	bl	800a2aa <RegionChanMaskSet>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f083 0301 	eor.w	r3, r3, #1
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 812e 	beq.w	8008d1c <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008ac4:	e12a      	b.n	8008d1c <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8008ad0:	4b45      	ldr	r3, [pc, #276]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008ad2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008ad6:	f107 020c 	add.w	r2, r7, #12
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 fbe4 	bl	800a2aa <RegionChanMaskSet>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f083 0301 	eor.w	r3, r3, #1
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8118 	beq.w	8008d20 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008af0:	2303      	movs	r3, #3
 8008af2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008af4:	e114      	b.n	8008d20 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	791b      	ldrb	r3, [r3, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8008b02:	2b0f      	cmp	r3, #15
 8008b04:	d805      	bhi.n	8008b12 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	791a      	ldrb	r2, [r3, #4]
 8008b0a:	4b37      	ldr	r3, [pc, #220]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008b10:	e109      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008b12:	2303      	movs	r3, #3
 8008b14:	75fb      	strb	r3, [r7, #23]
            break;
 8008b16:	e106      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	4a32      	ldr	r2, [pc, #200]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b1e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8008b20:	e101      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4a30      	ldr	r2, [pc, #192]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b28:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8008b2a:	e0fc      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	4a2d      	ldr	r2, [pc, #180]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b32:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8008b34:	e0f7      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4a2b      	ldr	r2, [pc, #172]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b3c:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8008b3e:	e0f2      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	4a28      	ldr	r2, [pc, #160]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b46:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8008b48:	e0ed      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008b50:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8008b52:	4b25      	ldr	r3, [pc, #148]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 fb8c 	bl	800a27c <RegionVerify>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8008b6a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008b6e:	4b1e      	ldr	r3, [pc, #120]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b70:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008b74:	e0d7      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008b76:	2303      	movs	r3, #3
 8008b78:	75fb      	strb	r3, [r7, #23]
            break;
 8008b7a:	e0d4      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008b82:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008b84:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b8a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8008b8c:	4b16      	ldr	r3, [pc, #88]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008b8e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008b92:	f107 0108 	add.w	r1, r7, #8
 8008b96:	2205      	movs	r2, #5
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f001 fb6f 	bl	800a27c <RegionVerify>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008ba4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008bae:	e0ba      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	75fb      	strb	r3, [r7, #23]
            break;
 8008bb4:	e0b7      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008bbc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008bc0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008bc4:	f107 0108 	add.w	r1, r7, #8
 8008bc8:	220a      	movs	r2, #10
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 fb56 	bl	800a27c <RegionVerify>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8008bd6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008bda:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008bdc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008be0:	e0a1      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008be2:	2303      	movs	r3, #3
 8008be4:	75fb      	strb	r3, [r7, #23]
            break;
 8008be6:	e09e      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
 8008be8:	20000b94 	.word	0x20000b94
 8008bec:	0800fbf4 	.word	0x0800fbf4
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008bf6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8008bf8:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008bfa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008bfe:	f107 0108 	add.w	r1, r7, #8
 8008c02:	2209      	movs	r2, #9
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 fb39 	bl	800a27c <RegionVerify>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8008c10:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008c14:	4b46      	ldr	r3, [pc, #280]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008c1a:	e084      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8008c20:	e081      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4a42      	ldr	r2, [pc, #264]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008c2c:	4b40      	ldr	r3, [pc, #256]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c32:	4a3f      	ldr	r2, [pc, #252]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c34:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8008c36:	e076      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	791a      	ldrb	r2, [r3, #4]
 8008c3c:	4b3c      	ldr	r3, [pc, #240]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8008c42:	4b3b      	ldr	r3, [pc, #236]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c44:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8008c48:	4b39      	ldr	r3, [pc, #228]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8008c4e:	e06a      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	4a36      	ldr	r2, [pc, #216]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8008c5a:	e064      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	4a33      	ldr	r2, [pc, #204]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c62:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8008c66:	e05e      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8008c68:	f7ff fa7e 	bl	8008168 <RestoreNvmData>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75fb      	strb	r3, [r7, #23]
            break;
 8008c70:	e059      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	799b      	ldrb	r3, [r3, #6]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d80d      	bhi.n	8008c96 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8008c7a:	4a2d      	ldr	r2, [pc, #180]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6858      	ldr	r0, [r3, #4]
 8008c88:	f000 fffe 	bl	8009c88 <LoRaMacCryptoSetLrWanVersion>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d048      	beq.n	8008d24 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008c92:	2311      	movs	r3, #17
 8008c94:	e048      	b.n	8008d28 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008c96:	2303      	movs	r3, #3
 8008c98:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008c9a:	e043      	b.n	8008d24 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a23      	ldr	r2, [pc, #140]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8008ca6:	e03e      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	889a      	ldrh	r2, [r3, #4]
 8008cac:	4b20      	ldr	r3, [pc, #128]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008cae:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8008cb2:	e038      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	889a      	ldrh	r2, [r3, #4]
 8008cb8:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008cba:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8008cbe:	e032      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	889a      	ldrh	r2, [r3, #4]
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008cc6:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8008cca:	e02c      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	889a      	ldrh	r2, [r3, #4]
 8008cd0:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <LoRaMacMibSetRequestConfirm+0x724>)
 8008cd2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8008cd6:	e026      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8008cd8:	2318      	movs	r3, #24
 8008cda:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8008cdc:	e023      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8008cde:	2318      	movs	r3, #24
 8008ce0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8008ce2:	e020      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fbc5 	bl	8009474 <LoRaMacMibClassBSetRequestConfirm>
 8008cea:	4603      	mov	r3, r0
 8008cec:	75fb      	strb	r3, [r7, #23]
            break;
 8008cee:	e01a      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008cf0:	bf00      	nop
 8008cf2:	e018      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008cf4:	bf00      	nop
 8008cf6:	e016      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008cf8:	bf00      	nop
 8008cfa:	e014      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008cfc:	bf00      	nop
 8008cfe:	e012      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d00:	bf00      	nop
 8008d02:	e010      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d04:	bf00      	nop
 8008d06:	e00e      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d08:	bf00      	nop
 8008d0a:	e00c      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d0c:	bf00      	nop
 8008d0e:	e00a      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d10:	bf00      	nop
 8008d12:	e008      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d14:	bf00      	nop
 8008d16:	e006      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d18:	bf00      	nop
 8008d1a:	e004      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d1c:	bf00      	nop
 8008d1e:	e002      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d20:	bf00      	nop
 8008d22:	e000      	b.n	8008d26 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8008d24:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000b94 	.word	0x20000b94

08008d34 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008d40:	2300      	movs	r3, #0
 8008d42:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e13a      	b.n	8008fc4 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8008d4e:	f7fe f9e3 	bl	8007118 <LoRaMacIsBusy>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e133      	b.n	8008fc4 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8008d5c:	f000 fe42 	bl	80099e4 <LoRaMacConfirmQueueIsFull>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e12c      	b.n	8008fc4 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8008d6a:	f000 fe2f 	bl	80099cc <LoRaMacConfirmQueueGetCnt>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d104      	bne.n	8008d7e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8008d74:	2214      	movs	r2, #20
 8008d76:	2100      	movs	r1, #0
 8008d78:	4894      	ldr	r0, [pc, #592]	; (8008fcc <LoRaMacMlmeRequest+0x298>)
 8008d7a:	f002 ffc7 	bl	800bd0c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d7e:	4b94      	ldr	r3, [pc, #592]	; (8008fd0 <LoRaMacMlmeRequest+0x29c>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008d86:	4a92      	ldr	r2, [pc, #584]	; (8008fd0 <LoRaMacMlmeRequest+0x29c>)
 8008d88:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008d8c:	f043 0304 	orr.w	r3, r3, #4
 8008d90:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	2b0d      	cmp	r3, #13
 8008daa:	f200 80e1 	bhi.w	8008f70 <LoRaMacMlmeRequest+0x23c>
 8008dae:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <LoRaMacMlmeRequest+0x80>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008ded 	.word	0x08008ded
 8008db8:	08008f71 	.word	0x08008f71
 8008dbc:	08008f71 	.word	0x08008f71
 8008dc0:	08008f71 	.word	0x08008f71
 8008dc4:	08008e65 	.word	0x08008e65
 8008dc8:	08008e83 	.word	0x08008e83
 8008dcc:	08008e93 	.word	0x08008e93
 8008dd0:	08008f71 	.word	0x08008f71
 8008dd4:	08008f71 	.word	0x08008f71
 8008dd8:	08008eaf 	.word	0x08008eaf
 8008ddc:	08008f71 	.word	0x08008f71
 8008de0:	08008f45 	.word	0x08008f45
 8008de4:	08008ee5 	.word	0x08008ee5
 8008de8:	08008f27 	.word	0x08008f27
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8008dec:	4b78      	ldr	r3, [pc, #480]	; (8008fd0 <LoRaMacMlmeRequest+0x29c>)
 8008dee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e0e2      	b.n	8008fc4 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8008dfe:	2000      	movs	r0, #0
 8008e00:	f7fe fe2e 	bl	8007a60 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8008e04:	4b73      	ldr	r3, [pc, #460]	; (8008fd4 <LoRaMacMlmeRequest+0x2a0>)
 8008e06:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	795b      	ldrb	r3, [r3, #5]
 8008e0e:	b25b      	sxtb	r3, r3
 8008e10:	2200      	movs	r2, #0
 8008e12:	4619      	mov	r1, r3
 8008e14:	f001 faa2 	bl	800a35c <RegionAlternateDr>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4b6d      	ldr	r3, [pc, #436]	; (8008fd4 <LoRaMacMlmeRequest+0x2a0>)
 8008e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8008e28:	4b6a      	ldr	r3, [pc, #424]	; (8008fd4 <LoRaMacMlmeRequest+0x2a0>)
 8008e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8008e2e:	2307      	movs	r3, #7
 8008e30:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8008e32:	20ff      	movs	r0, #255	; 0xff
 8008e34:	f7fe fbb2 	bl	800759c <SendReJoinReq>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 8098 	beq.w	8008f74 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8008e44:	4b63      	ldr	r3, [pc, #396]	; (8008fd4 <LoRaMacMlmeRequest+0x2a0>)
 8008e46:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	795b      	ldrb	r3, [r3, #5]
 8008e4e:	b25b      	sxtb	r3, r3
 8008e50:	2201      	movs	r2, #1
 8008e52:	4619      	mov	r1, r3
 8008e54:	f001 fa82 	bl	800a35c <RegionAlternateDr>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	4b5d      	ldr	r3, [pc, #372]	; (8008fd4 <LoRaMacMlmeRequest+0x2a0>)
 8008e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8008e62:	e087      	b.n	8008f74 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008e68:	f107 030c 	add.w	r3, r7, #12
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4619      	mov	r1, r3
 8008e70:	2002      	movs	r0, #2
 8008e72:	f000 fc15 	bl	80096a0 <LoRaMacCommandsAddCmd>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d07d      	beq.n	8008f78 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008e7c:	2313      	movs	r3, #19
 8008e7e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008e80:	e07a      	b.n	8008f78 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	889b      	ldrh	r3, [r3, #4]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7ff f918 	bl	80080bc <SetTxContinuousWave>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8008e90:	e079      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8898      	ldrh	r0, [r3, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6899      	ldr	r1, [r3, #8]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f7ff f940 	bl	8008128 <SetTxContinuousWave1>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	75fb      	strb	r3, [r7, #23]
            break;
 8008eac:	e06b      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8008eb2:	f107 0308 	add.w	r3, r7, #8
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	200d      	movs	r0, #13
 8008eba:	f000 fc71 	bl	80097a0 <LoRaMacCommandsGetCmd>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8008ec8:	e058      	b.n	8008f7c <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008eca:	f107 030c 	add.w	r3, r7, #12
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	200d      	movs	r0, #13
 8008ed4:	f000 fbe4 	bl	80096a0 <LoRaMacCommandsAddCmd>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d04e      	beq.n	8008f7c <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ede:	2313      	movs	r3, #19
 8008ee0:	75fb      	strb	r3, [r7, #23]
            break;
 8008ee2:	e04b      	b.n	8008f7c <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8008ee4:	4b3b      	ldr	r3, [pc, #236]	; (8008fd4 <LoRaMacMlmeRequest+0x2a0>)
 8008ee6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d148      	bne.n	8008f80 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	791b      	ldrb	r3, [r3, #4]
 8008ef2:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	791b      	ldrb	r3, [r3, #4]
 8008ef8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fa93 	bl	800942a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8008f04:	7dbb      	ldrb	r3, [r7, #22]
 8008f06:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8008f0c:	f107 030c 	add.w	r3, r7, #12
 8008f10:	2201      	movs	r2, #1
 8008f12:	4619      	mov	r1, r3
 8008f14:	2010      	movs	r0, #16
 8008f16:	f000 fbc3 	bl	80096a0 <LoRaMacCommandsAddCmd>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d02f      	beq.n	8008f80 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008f20:	2313      	movs	r3, #19
 8008f22:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8008f24:	e02c      	b.n	8008f80 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008f2a:	f107 030c 	add.w	r3, r7, #12
 8008f2e:	2200      	movs	r2, #0
 8008f30:	4619      	mov	r1, r3
 8008f32:	2012      	movs	r0, #18
 8008f34:	f000 fbb4 	bl	80096a0 <LoRaMacCommandsAddCmd>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d022      	beq.n	8008f84 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008f3e:	2313      	movs	r3, #19
 8008f40:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008f42:	e01f      	b.n	8008f84 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8008f44:	2301      	movs	r3, #1
 8008f46:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8008f48:	f000 fa43 	bl	80093d2 <LoRaMacClassBIsAcquisitionInProgress>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f083 0301 	eor.w	r3, r3, #1
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d008      	beq.n	8008f6a <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8008f58:	2000      	movs	r0, #0
 8008f5a:	f000 fa30 	bl	80093be <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f000 fa3e 	bl	80093e0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8008f68:	e00d      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
            break;
 8008f6e:	e00a      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8008f70:	bf00      	nop
 8008f72:	e008      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
            break;
 8008f74:	bf00      	nop
 8008f76:	e006      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
            break;
 8008f78:	bf00      	nop
 8008f7a:	e004      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
            break;
 8008f7c:	bf00      	nop
 8008f7e:	e002      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
            break;
 8008f80:	bf00      	nop
 8008f82:	e000      	b.n	8008f86 <LoRaMacMlmeRequest+0x252>
            break;
 8008f84:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8008f86:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <LoRaMacMlmeRequest+0x29c>)
 8008f88:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d010      	beq.n	8008fb8 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8008f96:	f000 fd19 	bl	80099cc <LoRaMacConfirmQueueGetCnt>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d110      	bne.n	8008fc2 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	; (8008fd0 <LoRaMacMlmeRequest+0x29c>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008fa8:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <LoRaMacMlmeRequest+0x29c>)
 8008faa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008fae:	f36f 0382 	bfc	r3, #2, #1
 8008fb2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8008fb6:	e004      	b.n	8008fc2 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8008fb8:	f107 0310 	add.w	r3, r7, #16
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fccb 	bl	8009958 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000ad4 	.word	0x20000ad4
 8008fd0:	2000068c 	.word	0x2000068c
 8008fd4:	20000b94 	.word	0x20000b94

08008fd8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08c      	sub	sp, #48	; 0x30
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009002:	2303      	movs	r3, #3
 8009004:	e0d4      	b.n	80091b0 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8009006:	f7fe f887 	bl	8007118 <LoRaMacIsBusy>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8009010:	2301      	movs	r3, #1
 8009012:	e0cd      	b.n	80091b0 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009018:	2214      	movs	r2, #20
 800901a:	2100      	movs	r1, #0
 800901c:	4866      	ldr	r0, [pc, #408]	; (80091b8 <LoRaMacMcpsRequest+0x1e0>)
 800901e:	f002 fe75 	bl	800bd0c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009022:	4b66      	ldr	r3, [pc, #408]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 800902a:	4b64      	ldr	r3, [pc, #400]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 800902c:	2201      	movs	r2, #1
 800902e:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b03      	cmp	r3, #3
 8009038:	d03d      	beq.n	80090b6 <LoRaMacMcpsRequest+0xde>
 800903a:	2b03      	cmp	r3, #3
 800903c:	dc4f      	bgt.n	80090de <LoRaMacMcpsRequest+0x106>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <LoRaMacMcpsRequest+0x70>
 8009042:	2b01      	cmp	r3, #1
 8009044:	d019      	beq.n	800907a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8009046:	e04a      	b.n	80090de <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8009048:	2301      	movs	r3, #1
 800904a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 800904c:	4b5b      	ldr	r3, [pc, #364]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 800904e:	2201      	movs	r2, #1
 8009050:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009054:	7b3b      	ldrb	r3, [r7, #12]
 8009056:	2202      	movs	r2, #2
 8009058:	f362 1347 	bfi	r3, r2, #5, #3
 800905c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	791b      	ldrb	r3, [r3, #4]
 8009062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	899b      	ldrh	r3, [r3, #12]
 8009070:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7b9b      	ldrb	r3, [r3, #14]
 8009076:	777b      	strb	r3, [r7, #29]
            break;
 8009078:	e032      	b.n	80090e0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 800907a:	2301      	movs	r3, #1
 800907c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7bdb      	ldrb	r3, [r3, #15]
 8009082:	2b08      	cmp	r3, #8
 8009084:	bf28      	it	cs
 8009086:	2308      	movcs	r3, #8
 8009088:	b2da      	uxtb	r2, r3
 800908a:	4b4c      	ldr	r3, [pc, #304]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 800908c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009090:	7b3b      	ldrb	r3, [r7, #12]
 8009092:	2204      	movs	r2, #4
 8009094:	f362 1347 	bfi	r3, r2, #5, #3
 8009098:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	791b      	ldrb	r3, [r3, #4]
 800909e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	899b      	ldrh	r3, [r3, #12]
 80090ac:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	7b9b      	ldrb	r3, [r3, #14]
 80090b2:	777b      	strb	r3, [r7, #29]
            break;
 80090b4:	e014      	b.n	80090e0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80090b6:	2301      	movs	r3, #1
 80090b8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80090ba:	4b40      	ldr	r3, [pc, #256]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80090c2:	7b3b      	ldrb	r3, [r7, #12]
 80090c4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80090c8:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	891b      	ldrh	r3, [r3, #8]
 80090d4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7a9b      	ldrb	r3, [r3, #10]
 80090da:	777b      	strb	r3, [r7, #29]
            break;
 80090dc:	e000      	b.n	80090e0 <LoRaMacMcpsRequest+0x108>
            break;
 80090de:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80090e0:	2302      	movs	r3, #2
 80090e2:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80090e4:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <LoRaMacMcpsRequest+0x1e8>)
 80090e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80090ea:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090ec:	4b34      	ldr	r3, [pc, #208]	; (80091c0 <LoRaMacMcpsRequest+0x1e8>)
 80090ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80090f2:	f107 0214 	add.w	r2, r7, #20
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 f895 	bl	800a228 <RegionGetPhyParam>
 80090fe:	4603      	mov	r3, r0
 8009100:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	b25b      	sxtb	r3, r3
 8009106:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800910a:	4293      	cmp	r3, r2
 800910c:	bfb8      	it	lt
 800910e:	4613      	movlt	r3, r2
 8009110:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8009112:	7f3b      	ldrb	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d044      	beq.n	80091a2 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8009118:	4b29      	ldr	r3, [pc, #164]	; (80091c0 <LoRaMacMcpsRequest+0x1e8>)
 800911a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800911e:	f083 0301 	eor.w	r3, r3, #1
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d019      	beq.n	800915c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8009128:	7f7b      	ldrb	r3, [r7, #29]
 800912a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800912c:	4b24      	ldr	r3, [pc, #144]	; (80091c0 <LoRaMacMcpsRequest+0x1e8>)
 800912e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009132:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009134:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <LoRaMacMcpsRequest+0x1e8>)
 8009136:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800913a:	f107 0108 	add.w	r1, r7, #8
 800913e:	2205      	movs	r2, #5
 8009140:	4618      	mov	r0, r3
 8009142:	f001 f89b 	bl	800a27c <RegionVerify>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800914c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8009150:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <LoRaMacMcpsRequest+0x1e8>)
 8009152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009156:	e001      	b.n	800915c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8009158:	2303      	movs	r3, #3
 800915a:	e029      	b.n	80091b0 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800915c:	8bfa      	ldrh	r2, [r7, #30]
 800915e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009162:	f107 000c 	add.w	r0, r7, #12
 8009166:	78fb      	ldrb	r3, [r7, #3]
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4613      	mov	r3, r2
 800916c:	6a3a      	ldr	r2, [r7, #32]
 800916e:	f7fe f937 	bl	80073e0 <Send>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8009178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10c      	bne.n	800919a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	781a      	ldrb	r2, [r3, #0]
 8009184:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 8009186:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800918a:	4a0c      	ldr	r2, [pc, #48]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 800918c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009190:	f043 0301 	orr.w	r3, r3, #1
 8009194:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8009198:	e003      	b.n	80091a2 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800919a:	4b08      	ldr	r3, [pc, #32]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80091a2:	4b06      	ldr	r3, [pc, #24]	; (80091bc <LoRaMacMcpsRequest+0x1e4>)
 80091a4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	611a      	str	r2, [r3, #16]

    return status;
 80091ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3728      	adds	r7, #40	; 0x28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20000ac0 	.word	0x20000ac0
 80091bc:	2000068c 	.word	0x2000068c
 80091c0:	20000b94 	.word	0x20000b94

080091c4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80091d2:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <LoRaMacTestSetDutyCycleOn+0x44>)
 80091d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80091d8:	f107 010c 	add.w	r1, r7, #12
 80091dc:	220f      	movs	r2, #15
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 f84c 	bl	800a27c <RegionVerify>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80091ea:	4a07      	ldr	r2, [pc, #28]	; (8009208 <LoRaMacTestSetDutyCycleOn+0x44>)
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80091f2:	4a06      	ldr	r2, [pc, #24]	; (800920c <LoRaMacTestSetDutyCycleOn+0x48>)
 80091f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80091f8:	f043 0320 	orr.w	r3, r3, #32
 80091fc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8009200:	bf00      	nop
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20000b94 	.word	0x20000b94
 800920c:	2000068c 	.word	0x2000068c

08009210 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08c      	sub	sp, #48	; 0x30
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800921e:	2300      	movs	r3, #0
 8009220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	7c1b      	ldrb	r3, [r3, #16]
 8009228:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	7c5b      	ldrb	r3, [r3, #17]
 8009230:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	795b      	ldrb	r3, [r3, #5]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 808b 	beq.w	800935c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8009246:	2302      	movs	r3, #2
 8009248:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	7c9b      	ldrb	r3, [r3, #18]
 8009250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	7cdb      	ldrb	r3, [r3, #19]
 8009258:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f000 ffe2 	bl	800a228 <RegionGetPhyParam>
 8009264:	4603      	mov	r3, r0
 8009266:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 800926e:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8009272:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8009276:	4293      	cmp	r3, r2
 8009278:	bfb8      	it	lt
 800927a:	4613      	movlt	r3, r2
 800927c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8009280:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8009284:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8009288:	429a      	cmp	r2, r3
 800928a:	d106      	bne.n	800929a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8009292:	2300      	movs	r3, #0
 8009294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009298:	e060      	b.n	800935c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	8992      	ldrh	r2, [r2, #12]
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d303      	bcc.n	80092ae <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80092ac:	e002      	b.n	80092b4 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80092ae:	2300      	movs	r3, #0
 80092b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	8992      	ldrh	r2, [r2, #12]
 80092bc:	4611      	mov	r1, r2
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	89d2      	ldrh	r2, [r2, #14]
 80092c2:	440a      	add	r2, r1
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d349      	bcc.n	800935c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80092c8:	2308      	movs	r3, #8
 80092ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	7cdb      	ldrb	r3, [r3, #19]
 80092d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 ffa5 	bl	800a228 <RegionGetPhyParam>
 80092de:	4603      	mov	r3, r0
 80092e0:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	89d2      	ldrh	r2, [r2, #14]
 80092f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80092f4:	fb01 f202 	mul.w	r2, r1, r2
 80092f8:	1a9b      	subs	r3, r3, r2
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d12e      	bne.n	800935c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80092fe:	2322      	movs	r3, #34	; 0x22
 8009300:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8009304:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009308:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	7c9b      	ldrb	r3, [r3, #18]
 8009310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	7cdb      	ldrb	r3, [r3, #19]
 8009318:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f000 ff82 	bl	800a228 <RegionGetPhyParam>
 8009324:	4603      	mov	r3, r0
 8009326:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 800932e:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8009332:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8009336:	429a      	cmp	r2, r3
 8009338:	d110      	bne.n	800935c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800933a:	2300      	movs	r3, #0
 800933c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	791b      	ldrb	r3, [r3, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009348:	2302      	movs	r3, #2
 800934a:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	7cdb      	ldrb	r3, [r3, #19]
 8009350:	f107 0214 	add.w	r2, r7, #20
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f000 ff7e 	bl	800a258 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009362:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800936a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800936c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009370:	4618      	mov	r0, r3
 8009372:	3730      	adds	r7, #48	; 0x30
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	789b      	ldrb	r3, [r3, #2]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d107      	bne.n	800939e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f7ff ff3b 	bl	8009210 <CalcNextV10X>
 800939a:	4603      	mov	r3, r0
 800939c:	e000      	b.n	80093a0 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80093b4:	bf00      	nop
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr

080093be <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	4603      	mov	r3, r0
 80093c6:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc80      	pop	{r7}
 80093d0:	4770      	bx	lr

080093d2 <LoRaMacClassBIsAcquisitionInProgress>:
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80093d2:	b480      	push	{r7}
 80093d4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80093d6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80093d8:	4618      	mov	r0, r3
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr

080093f2 <LoRaMacClassBIsBeaconExpected>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconExpected( void )
{
 80093f2:	b480      	push	{r7}
 80093f4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80093f6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr

08009400 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8009404:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009406:	4618      	mov	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr

0800940e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800940e:	b480      	push	{r7}
 8009410:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8009412:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009414:	4618      	mov	r0, r3
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8009420:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009422:	4618      	mov	r0, r3
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr

0800942a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	4603      	mov	r3, r0
 8009432:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	bc80      	pop	{r7}
 800943c:	4770      	bx	lr

0800943e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800943e:	b480      	push	{r7}
 8009440:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009442:	bf00      	nop
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr

0800944a <LoRaMacClassBSwitchClass>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	4603      	mov	r3, r0
 8009452:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009454:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr

08009460 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009468:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	bc80      	pop	{r7}
 8009472:	4770      	bx	lr

08009474 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800947c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr

08009488 <LoRaMacClassBIsUplinkCollision>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8009490:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009492:	4618      	mov	r0, r3
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	bc80      	pop	{r7}
 800949a:	4770      	bx	lr

0800949c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr

080094a8 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80094b4:	2300      	movs	r3, #0
 80094b6:	81fb      	strh	r3, [r7, #14]
 80094b8:	e00a      	b.n	80094d0 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80094ba:	89fb      	ldrh	r3, [r7, #14]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	4413      	add	r3, r2
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <IsSlotFree+0x22>
        {
            return false;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e006      	b.n	80094d8 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80094ca:	89fb      	ldrh	r3, [r7, #14]
 80094cc:	3301      	adds	r3, #1
 80094ce:	81fb      	strh	r3, [r7, #14]
 80094d0:	89fb      	ldrh	r3, [r7, #14]
 80094d2:	2b0f      	cmp	r3, #15
 80094d4:	d9f1      	bls.n	80094ba <IsSlotFree+0x12>
        }
    }
    return true;
 80094d6:	2301      	movs	r3, #1
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
	...

080094e4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80094ee:	e007      	b.n	8009500 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	3301      	adds	r3, #1
 80094f4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	2b0f      	cmp	r3, #15
 80094fa:	d101      	bne.n	8009500 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80094fc:	2300      	movs	r3, #0
 80094fe:	e012      	b.n	8009526 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	3308      	adds	r3, #8
 8009506:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <MallocNewMacCommandSlot+0x4c>)
 8009508:	4413      	add	r3, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff ffcc 	bl	80094a8 <IsSlotFree>
 8009510:	4603      	mov	r3, r0
 8009512:	f083 0301 	eor.w	r3, r3, #1
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e9      	bne.n	80094f0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	3308      	adds	r3, #8
 8009522:	4a03      	ldr	r2, [pc, #12]	; (8009530 <MallocNewMacCommandSlot+0x4c>)
 8009524:	4413      	add	r3, r2
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200012fc 	.word	0x200012fc

08009534 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <FreeMacCommandSlot+0x12>
    {
        return false;
 8009542:	2300      	movs	r3, #0
 8009544:	e005      	b.n	8009552 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8009546:	2210      	movs	r2, #16
 8009548:	2100      	movs	r1, #0
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f002 fbde 	bl	800bd0c <memset1>

    return true;
 8009550:	2301      	movs	r3, #1
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <LinkedListAdd+0x16>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <LinkedListAdd+0x1a>
    {
        return false;
 8009570:	2300      	movs	r3, #0
 8009572:	e015      	b.n	80095a0 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <LinkedListAdd+0x28>
    {
        list->First = element;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	605a      	str	r2, [r3, #4]

    return true;
 800959e:	2301      	movs	r3, #1
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr

080095aa <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80095aa:	b480      	push	{r7}
 80095ac:	b085      	sub	sp, #20
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <LinkedListGetPrevious+0x16>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	e016      	b.n	80095f2 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d00c      	beq.n	80095ec <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80095d2:	e002      	b.n	80095da <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <LinkedListGetPrevious+0x46>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d1f4      	bne.n	80095d4 <LinkedListGetPrevious+0x2a>
 80095ea:	e001      	b.n	80095f0 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr

080095fc <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <LinkedListRemove+0x16>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <LinkedListRemove+0x1a>
    {
        return false;
 8009612:	2300      	movs	r3, #0
 8009614:	e020      	b.n	8009658 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff ffc6 	bl	80095aa <LinkedListGetPrevious>
 800961e:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d103      	bne.n	8009632 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d102      	bne.n	8009642 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]

    return true;
 8009656:	2301      	movs	r3, #1
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	2b05      	cmp	r3, #5
 800966e:	d004      	beq.n	800967a <IsSticky+0x1a>
 8009670:	2b05      	cmp	r3, #5
 8009672:	db04      	blt.n	800967e <IsSticky+0x1e>
 8009674:	3b08      	subs	r3, #8
 8009676:	2b02      	cmp	r3, #2
 8009678:	d801      	bhi.n	800967e <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 800967a:	2301      	movs	r3, #1
 800967c:	e000      	b.n	8009680 <IsSticky+0x20>
        default:
            return false;
 800967e:	2300      	movs	r3, #0
    }
}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr

0800968a <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	4603      	mov	r3, r0
 8009692:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8009694:	2300      	movs	r3, #0
    }
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <LoRaMacCommandsAddCmd>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e03b      	b.n	8009730 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80096b8:	f7ff ff14 	bl	80094e4 <MallocNewMacCommandSlot>
 80096bc:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80096c4:	2302      	movs	r3, #2
 80096c6:	e033      	b.n	8009730 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80096c8:	6979      	ldr	r1, [r7, #20]
 80096ca:	481b      	ldr	r0, [pc, #108]	; (8009738 <LoRaMacCommandsAddCmd+0x98>)
 80096cc:	f7ff ff45 	bl	800955a <LinkedListAdd>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f083 0301 	eor.w	r3, r3, #1
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80096dc:	2305      	movs	r3, #5
 80096de:	e027      	b.n	8009730 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	7bfa      	ldrb	r2, [r7, #15]
 80096e4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	3305      	adds	r3, #5
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	b292      	uxth	r2, r2
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f002 facd 	bl	800bc96 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff ffae 	bl	8009660 <IsSticky>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff ffbb 	bl	800968a <IsConfirmationRequired>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800971c:	4b06      	ldr	r3, [pc, #24]	; (8009738 <LoRaMacCommandsAddCmd+0x98>)
 800971e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4413      	add	r3, r2
 8009726:	3301      	adds	r3, #1
 8009728:	4a03      	ldr	r2, [pc, #12]	; (8009738 <LoRaMacCommandsAddCmd+0x98>)
 800972a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200012fc 	.word	0x200012fc

0800973c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800974a:	2301      	movs	r3, #1
 800974c:	e021      	b.n	8009792 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4812      	ldr	r0, [pc, #72]	; (800979c <LoRaMacCommandsRemoveCmd+0x60>)
 8009752:	f7ff ff53 	bl	80095fc <LinkedListRemove>
 8009756:	4603      	mov	r3, r0
 8009758:	f083 0301 	eor.w	r3, r3, #1
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8009762:	2303      	movs	r3, #3
 8009764:	e015      	b.n	8009792 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8009766:	4b0d      	ldr	r3, [pc, #52]	; (800979c <LoRaMacCommandsRemoveCmd+0x60>)
 8009768:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	3b01      	subs	r3, #1
 8009774:	4a09      	ldr	r2, [pc, #36]	; (800979c <LoRaMacCommandsRemoveCmd+0x60>)
 8009776:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff feda 	bl	8009534 <FreeMacCommandSlot>
 8009780:	4603      	mov	r3, r0
 8009782:	f083 0301 	eor.w	r3, r3, #1
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 800978c:	2305      	movs	r3, #5
 800978e:	e000      	b.n	8009792 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	200012fc 	.word	0x200012fc

080097a0 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	6039      	str	r1, [r7, #0]
 80097aa:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80097ac:	4b0e      	ldr	r3, [pc, #56]	; (80097e8 <LoRaMacCommandsGetCmd+0x48>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80097b2:	e002      	b.n	80097ba <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <LoRaMacCommandsGetCmd+0x2a>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	791b      	ldrb	r3, [r3, #4]
 80097c4:	79fa      	ldrb	r2, [r7, #7]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d1f4      	bne.n	80097b4 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e000      	b.n	80097dc <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bc80      	pop	{r7}
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	200012fc 	.word	0x200012fc

080097ec <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80097f2:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80097f8:	e012      	b.n	8009820 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	7b1b      	ldrb	r3, [r3, #12]
 80097fe:	f083 0301 	eor.w	r3, r3, #1
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d008      	beq.n	800981a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff ff94 	bl	800973c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	607b      	str	r3, [r7, #4]
 8009818:	e002      	b.n	8009820 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e9      	bne.n	80097fa <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	200012fc 	.word	0x200012fc

08009834 <LoRaMacCommandsGetSizeSerializedCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8009842:	2301      	movs	r3, #1
 8009844:	e005      	b.n	8009852 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8009848:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	bc80      	pop	{r7}
 800985a:	4770      	bx	lr
 800985c:	200012fc 	.word	0x200012fc

08009860 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800986c:	4b25      	ldr	r3, [pc, #148]	; (8009904 <LoRaMacCommandsSerializeCmds+0xa4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <LoRaMacCommandsSerializeCmds+0x22>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d126      	bne.n	80098d0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8009882:	2301      	movs	r3, #1
 8009884:	e039      	b.n	80098fa <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8009886:	7efb      	ldrb	r3, [r7, #27]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	1ad2      	subs	r2, r2, r3
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	3301      	adds	r3, #1
 8009892:	429a      	cmp	r2, r3
 8009894:	d320      	bcc.n	80098d8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8009896:	7efb      	ldrb	r3, [r7, #27]
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	76fa      	strb	r2, [r7, #27]
 800989c:	461a      	mov	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4413      	add	r3, r2
 80098a2:	69fa      	ldr	r2, [r7, #28]
 80098a4:	7912      	ldrb	r2, [r2, #4]
 80098a6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80098a8:	7efb      	ldrb	r3, [r7, #27]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	18d0      	adds	r0, r2, r3
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	1d59      	adds	r1, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	f002 f9ec 	bl	800bc96 <memcpy1>
            itr += curElement->PayloadSize;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	7efb      	ldrb	r3, [r7, #27]
 80098c6:	4413      	add	r3, r2
 80098c8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1d7      	bne.n	8009886 <LoRaMacCommandsSerializeCmds+0x26>
 80098d6:	e009      	b.n	80098ec <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80098d8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80098da:	e007      	b.n	80098ec <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80098e2:	69f8      	ldr	r0, [r7, #28]
 80098e4:	f7ff ff2a 	bl	800973c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f4      	bne.n	80098dc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80098f2:	68b8      	ldr	r0, [r7, #8]
 80098f4:	f7ff ff9e 	bl	8009834 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	200012fc 	.word	0x200012fc

08009908 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a07      	ldr	r2, [pc, #28]	; (8009930 <IncreaseBufferPointer+0x28>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d102      	bne.n	800991e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8009918:	4b06      	ldr	r3, [pc, #24]	; (8009934 <IncreaseBufferPointer+0x2c>)
 800991a:	607b      	str	r3, [r7, #4]
 800991c:	e002      	b.n	8009924 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3304      	adds	r3, #4
 8009922:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8009924:	687b      	ldr	r3, [r7, #4]
}
 8009926:	4618      	mov	r0, r3
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	bc80      	pop	{r7}
 800992e:	4770      	bx	lr
 8009930:	20001414 	.word	0x20001414
 8009934:	20001404 	.word	0x20001404

08009938 <IsListFull>:
    }
    return false;
}

static bool IsListFull( uint8_t count )
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b04      	cmp	r3, #4
 8009946:	d901      	bls.n	800994c <IsListFull+0x14>
    {
        return true;
 8009948:	2301      	movs	r3, #1
 800994a:	e000      	b.n	800994e <IsListFull+0x16>
    }
    return false;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	bc80      	pop	{r7}
 8009956:	4770      	bx	lr

08009958 <LoRaMacConfirmQueueAdd>:
    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8009960:	4b19      	ldr	r3, [pc, #100]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 8009962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff ffe6 	bl	8009938 <IsListFull>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8009972:	2300      	movs	r3, #0
 8009974:	e023      	b.n	80099be <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8009980:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	7852      	ldrb	r2, [r2, #1]
 8009988:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800998a:	4b0f      	ldr	r3, [pc, #60]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	78d2      	ldrb	r2, [r2, #3]
 8009992:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2200      	movs	r2, #0
 800999a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 800999e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099a2:	3301      	adds	r3, #1
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	4b08      	ldr	r3, [pc, #32]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 80099a8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff ffa9 	bl	8009908 <IncreaseBufferPointer>
 80099b6:	4603      	mov	r3, r0
 80099b8:	4a03      	ldr	r2, [pc, #12]	; (80099c8 <LoRaMacConfirmQueueAdd+0x70>)
 80099ba:	6093      	str	r3, [r2, #8]

    return true;
 80099bc:	2301      	movs	r3, #1
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200013f8 	.word	0x200013f8

080099cc <LoRaMacConfirmQueueGetCnt>:
        }
    }
}

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80099d0:	4b03      	ldr	r3, [pc, #12]	; (80099e0 <LoRaMacConfirmQueueGetCnt+0x14>)
 80099d2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	46bd      	mov	sp, r7
 80099da:	bc80      	pop	{r7}
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	200013f8 	.word	0x200013f8

080099e4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <LoRaMacConfirmQueueIsFull+0x20>)
 80099ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7ff ffa2 	bl	8009938 <IsListFull>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e000      	b.n	8009a00 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80099fe:	2300      	movs	r3, #0
    }
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	200013f8 	.word	0x200013f8

08009a08 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08e      	sub	sp, #56	; 0x38
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	817b      	strh	r3, [r7, #10]
 8009a16:	4613      	mov	r3, r2
 8009a18:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009a20:	230a      	movs	r3, #10
 8009a22:	e086      	b.n	8009b32 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8009a2e:	2300      	movs	r3, #0
 8009a30:	623b      	str	r3, [r7, #32]
 8009a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	605a      	str	r2, [r3, #4]
 8009a3c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8009a3e:	2300      	movs	r3, #0
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	f107 0314 	add.w	r3, r7, #20
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	605a      	str	r2, [r3, #4]
 8009a4c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8009a52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009a56:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	0a1b      	lsrs	r3, r3, #8
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	0c1b      	lsrs	r3, r3, #16
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	0e1b      	lsrs	r3, r3, #24
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8009a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8009a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a7e:	0a1b      	lsrs	r3, r3, #8
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8009a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8009a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a8e:	0e1b      	lsrs	r3, r3, #24
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8009a94:	e048      	b.n	8009b28 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8009a96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8009a9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8009aa2:	f107 0320 	add.w	r3, r7, #32
 8009aa6:	7a7a      	ldrb	r2, [r7, #9]
 8009aa8:	f107 0010 	add.w	r0, r7, #16
 8009aac:	2110      	movs	r1, #16
 8009aae:	f7fc f8cb 	bl	8005c48 <SecureElementAesEncrypt>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009ab8:	230f      	movs	r3, #15
 8009aba:	e03a      	b.n	8009b32 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009abc:	2300      	movs	r3, #0
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac2:	e01e      	b.n	8009b02 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009ac4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009acc:	4413      	add	r3, r2
 8009ace:	461a      	mov	r2, r3
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	7819      	ldrb	r1, [r3, #0]
 8009ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ada:	3338      	adds	r3, #56	; 0x38
 8009adc:	443b      	add	r3, r7
 8009ade:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8009ae2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8009ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aea:	4403      	add	r3, r0
 8009aec:	4618      	mov	r0, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4403      	add	r3, r0
 8009af2:	404a      	eors	r2, r1
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009afc:	3301      	adds	r3, #1
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b06:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009b0a:	2a10      	cmp	r2, #16
 8009b0c:	bfa8      	it	ge
 8009b0e:	2210      	movge	r2, #16
 8009b10:	b212      	sxth	r2, r2
 8009b12:	4293      	cmp	r3, r2
 8009b14:	dbd6      	blt.n	8009ac4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8009b16:	897b      	ldrh	r3, [r7, #10]
 8009b18:	3b10      	subs	r3, #16
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8009b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b22:	3310      	adds	r3, #16
 8009b24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8009b28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dcb2      	bgt.n	8009a96 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3738      	adds	r7, #56	; 0x38
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8009b3a:	b490      	push	{r4, r7}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	4604      	mov	r4, r0
 8009b42:	4608      	mov	r0, r1
 8009b44:	4611      	mov	r1, r2
 8009b46:	461a      	mov	r2, r3
 8009b48:	4623      	mov	r3, r4
 8009b4a:	80fb      	strh	r3, [r7, #6]
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	717b      	strb	r3, [r7, #5]
 8009b50:	460b      	mov	r3, r1
 8009b52:	713b      	strb	r3, [r7, #4]
 8009b54:	4613      	mov	r3, r2
 8009b56:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009b5e:	230a      	movs	r3, #10
 8009b60:	e04e      	b.n	8009c00 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	2249      	movs	r2, #73	; 0x49
 8009b66:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	3302      	adds	r3, #2
 8009b74:	2200      	movs	r2, #0
 8009b76:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	3303      	adds	r3, #3
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	3304      	adds	r3, #4
 8009b84:	2200      	movs	r2, #0
 8009b86:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	3305      	adds	r3, #5
 8009b8c:	78fa      	ldrb	r2, [r7, #3]
 8009b8e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	3306      	adds	r3, #6
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	0a1a      	lsrs	r2, r3, #8
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	3307      	adds	r3, #7
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	0c1a      	lsrs	r2, r3, #16
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	3308      	adds	r3, #8
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	0e1a      	lsrs	r2, r3, #24
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	3309      	adds	r3, #9
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	330a      	adds	r3, #10
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	0a1a      	lsrs	r2, r3, #8
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	330b      	adds	r3, #11
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	0c1a      	lsrs	r2, r3, #16
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	330c      	adds	r3, #12
 8009bdc:	b2d2      	uxtb	r2, r2
 8009bde:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	0e1a      	lsrs	r2, r3, #24
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	330d      	adds	r3, #13
 8009be8:	b2d2      	uxtb	r2, r2
 8009bea:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	330e      	adds	r3, #14
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	330f      	adds	r3, #15
 8009bf8:	88fa      	ldrh	r2, [r7, #6]
 8009bfa:	b2d2      	uxtb	r2, r2
 8009bfc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bc90      	pop	{r4, r7}
 8009c08:	4770      	bx	lr

08009c0a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8009c0a:	b590      	push	{r4, r7, lr}
 8009c0c:	b08b      	sub	sp, #44	; 0x2c
 8009c0e:	af04      	add	r7, sp, #16
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	4608      	mov	r0, r1
 8009c14:	4611      	mov	r1, r2
 8009c16:	461a      	mov	r2, r3
 8009c18:	4603      	mov	r3, r0
 8009c1a:	807b      	strh	r3, [r7, #2]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	707b      	strb	r3, [r7, #1]
 8009c20:	4613      	mov	r3, r2
 8009c22:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <ComputeCmacB0+0x26>
 8009c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009c30:	230a      	movs	r3, #10
 8009c32:	e024      	b.n	8009c7e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8009c34:	887b      	ldrh	r3, [r7, #2]
 8009c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c3a:	d901      	bls.n	8009c40 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8009c3c:	230e      	movs	r3, #14
 8009c3e:	e01e      	b.n	8009c7e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8009c40:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8009c44:	783a      	ldrb	r2, [r7, #0]
 8009c46:	7879      	ldrb	r1, [r7, #1]
 8009c48:	8878      	ldrh	r0, [r7, #2]
 8009c4a:	f107 0308 	add.w	r3, r7, #8
 8009c4e:	9302      	str	r3, [sp, #8]
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	4623      	mov	r3, r4
 8009c5a:	f7ff ff6e 	bl	8009b3a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8009c5e:	887a      	ldrh	r2, [r7, #2]
 8009c60:	7879      	ldrb	r1, [r7, #1]
 8009c62:	f107 0008 	add.w	r0, r7, #8
 8009c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	f7fb ffd1 	bl	8005c14 <SecureElementComputeAesCmac>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009c78:	230f      	movs	r3, #15
 8009c7a:	e000      	b.n	8009c7e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd90      	pop	{r4, r7, pc}
	...

08009c88 <LoRaMacCryptoSetLrWanVersion>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr
 8009ca4:	2000141c 	.word	0x2000141c

08009ca8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	e006      	b.n	8009cc8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <LoRaMacCryptoGetFCntUp+0x2c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bc80      	pop	{r7}
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	2000141c 	.word	0x2000141c

08009cd8 <LoRaMacCryptoSetKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fb ff35 	bl	8005b58 <SecureElementSetKey>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009cf4:	230f      	movs	r3, #15
 8009cf6:	e021      	b.n	8009d3c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d11d      	bne.n	8009d3a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8009cfe:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <LoRaMacCryptoSetKey+0x6c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	789b      	ldrb	r3, [r3, #2]
 8009d04:	210b      	movs	r1, #11
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f8da 	bl	8009ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009d12:	230f      	movs	r3, #15
 8009d14:	e012      	b.n	8009d3c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8009d16:	210c      	movs	r1, #12
 8009d18:	2000      	movs	r0, #0
 8009d1a:	f000 f8d1 	bl	8009ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009d24:	230f      	movs	r3, #15
 8009d26:	e009      	b.n	8009d3c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8009d28:	210a      	movs	r1, #10
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	f000 f8c8 	bl	8009ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009d36:	230f      	movs	r3, #15
 8009d38:	e000      	b.n	8009d3c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	2000141c 	.word	0x2000141c

08009d48 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009d56:	230a      	movs	r3, #10
 8009d58:	e033      	b.n	8009dc2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fc f82e 	bl	8005dc8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	4b17      	ldr	r3, [pc, #92]	; (8009dcc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	b292      	uxth	r2, r2
 8009d74:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8009d76:	4b15      	ldr	r3, [pc, #84]	; (8009dcc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	889a      	ldrh	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f8d8 	bl	8009f36 <LoRaMacSerializerJoinRequest>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009d8c:	2311      	movs	r3, #17
 8009d8e:	e018      	b.n	8009dc2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3318      	adds	r3, #24
 8009d98:	7bfa      	ldrb	r2, [r7, #15]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	2213      	movs	r2, #19
 8009da0:	2000      	movs	r0, #0
 8009da2:	f7fb ff37 	bl	8005c14 <SecureElementComputeAesCmac>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009dac:	230f      	movs	r3, #15
 8009dae:	e008      	b.n	8009dc2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f8c0 	bl	8009f36 <LoRaMacSerializerJoinRequest>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009dbc:	2311      	movs	r3, #17
 8009dbe:	e000      	b.n	8009dc2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000141c 	.word	0x2000141c

08009dd0 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b08b      	sub	sp, #44	; 0x2c
 8009dd4:	af04      	add	r7, sp, #16
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	72fb      	strb	r3, [r7, #11]
 8009dde:	4613      	mov	r3, r2
 8009de0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8009de2:	2313      	movs	r3, #19
 8009de4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8009de6:	2309      	movs	r3, #9
 8009de8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009df0:	230a      	movs	r3, #10
 8009df2:	e05f      	b.n	8009eb4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8009df4:	4b31      	ldr	r3, [pc, #196]	; (8009ebc <LoRaMacCryptoSecureMessage+0xec>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d201      	bcs.n	8009e04 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8009e00:	2306      	movs	r3, #6
 8009e02:	e057      	b.n	8009eb4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8009e0e:	2308      	movs	r3, #8
 8009e10:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8009e12:	4b2a      	ldr	r3, [pc, #168]	; (8009ebc <LoRaMacCryptoSecureMessage+0xec>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d916      	bls.n	8009e4c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e28:	b219      	sxth	r1, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689c      	ldr	r4, [r3, #8]
 8009e2e:	7dfa      	ldrb	r2, [r7, #23]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	2300      	movs	r3, #0
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4623      	mov	r3, r4
 8009e3a:	f7ff fde5 	bl	8009a08 <PayloadEncrypt>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009e42:	7dbb      	ldrb	r3, [r7, #22]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8009e48:	7dbb      	ldrb	r3, [r7, #22]
 8009e4a:	e033      	b.n	8009eb4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f8f4 	bl	800a03a <LoRaMacSerializerData>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009e58:	2311      	movs	r3, #17
 8009e5a:	e02b      	b.n	8009eb4 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	791b      	ldrb	r3, [r3, #4]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	3b04      	subs	r3, #4
 8009e6c:	b299      	uxth	r1, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	322c      	adds	r2, #44	; 0x2c
 8009e76:	7dfc      	ldrb	r4, [r7, #23]
 8009e78:	9203      	str	r2, [sp, #12]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	9202      	str	r2, [sp, #8]
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	2300      	movs	r3, #0
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	4622      	mov	r2, r4
 8009e88:	f7ff febf 	bl	8009c0a <ComputeCmacB0>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009e90:	7dbb      	ldrb	r3, [r7, #22]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8009e96:	7dbb      	ldrb	r3, [r7, #22]
 8009e98:	e00c      	b.n	8009eb4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f8cd 	bl	800a03a <LoRaMacSerializerData>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009ea6:	2311      	movs	r3, #17
 8009ea8:	e004      	b.n	8009eb4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8009eaa:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <LoRaMacCryptoSecureMessage+0xec>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	371c      	adds	r7, #28
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd90      	pop	{r4, r7, pc}
 8009ebc:	2000141c 	.word	0x2000141c

08009ec0 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	460a      	mov	r2, r1
 8009eca:	71fb      	strb	r3, [r7, #7]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	f107 0310 	add.w	r3, r7, #16
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	605a      	str	r2, [r3, #4]
 8009ede:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8009ee4:	79bb      	ldrb	r3, [r7, #6]
 8009ee6:	2b0c      	cmp	r3, #12
 8009ee8:	d00b      	beq.n	8009f02 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8009eea:	2b0c      	cmp	r3, #12
 8009eec:	dc0f      	bgt.n	8009f0e <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8009eee:	2b0a      	cmp	r3, #10
 8009ef0:	d00a      	beq.n	8009f08 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8009ef2:	2b0b      	cmp	r3, #11
 8009ef4:	d10b      	bne.n	8009f0e <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d10a      	bne.n	8009f12 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8009efc:	2320      	movs	r3, #32
 8009efe:	733b      	strb	r3, [r7, #12]
            }
            break;
 8009f00:	e007      	b.n	8009f12 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8009f02:	230b      	movs	r3, #11
 8009f04:	77fb      	strb	r3, [r7, #31]
            break;
 8009f06:	e005      	b.n	8009f14 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8009f08:	2330      	movs	r3, #48	; 0x30
 8009f0a:	733b      	strb	r3, [r7, #12]
            break;
 8009f0c:	e002      	b.n	8009f14 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8009f0e:	230b      	movs	r3, #11
 8009f10:	e00d      	b.n	8009f2e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8009f12:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8009f14:	79ba      	ldrb	r2, [r7, #6]
 8009f16:	7ff9      	ldrb	r1, [r7, #31]
 8009f18:	f107 030c 	add.w	r3, r7, #12
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fb ff13 	bl	8005d48 <SecureElementDeriveAndStoreKey>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009f28:	230f      	movs	r3, #15
 8009f2a:	e000      	b.n	8009f2e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <LoRaMacSerializerJoinRequest+0x16>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e070      	b.n	800a032 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	791b      	ldrb	r3, [r3, #4]
 8009f58:	2b16      	cmp	r3, #22
 8009f5a:	d801      	bhi.n	8009f60 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e068      	b.n	800a032 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	89fb      	ldrh	r3, [r7, #14]
 8009f66:	1c59      	adds	r1, r3, #1
 8009f68:	81f9      	strh	r1, [r7, #14]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	7952      	ldrb	r2, [r2, #5]
 8009f70:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	89fb      	ldrh	r3, [r7, #14]
 8009f78:	18d0      	adds	r0, r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3306      	adds	r3, #6
 8009f7e:	2208      	movs	r2, #8
 8009f80:	4619      	mov	r1, r3
 8009f82:	f001 fea3 	bl	800bccc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8009f86:	89fb      	ldrh	r3, [r7, #14]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	89fb      	ldrh	r3, [r7, #14]
 8009f92:	18d0      	adds	r0, r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	330e      	adds	r3, #14
 8009f98:	2208      	movs	r2, #8
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	f001 fe96 	bl	800bccc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8009fa0:	89fb      	ldrh	r3, [r7, #14]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	8ad9      	ldrh	r1, [r3, #22]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	89fb      	ldrh	r3, [r7, #14]
 8009fb0:	1c58      	adds	r0, r3, #1
 8009fb2:	81f8      	strh	r0, [r7, #14]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	b2ca      	uxtb	r2, r1
 8009fb8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	8adb      	ldrh	r3, [r3, #22]
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	b299      	uxth	r1, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	89fb      	ldrh	r3, [r7, #14]
 8009fc8:	1c58      	adds	r0, r3, #1
 8009fca:	81f8      	strh	r0, [r7, #14]
 8009fcc:	4413      	add	r3, r2
 8009fce:	b2ca      	uxtb	r2, r1
 8009fd0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6999      	ldr	r1, [r3, #24]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	89fb      	ldrh	r3, [r7, #14]
 8009fdc:	1c58      	adds	r0, r3, #1
 8009fde:	81f8      	strh	r0, [r7, #14]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	b2ca      	uxtb	r2, r1
 8009fe4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	0a19      	lsrs	r1, r3, #8
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	89fb      	ldrh	r3, [r7, #14]
 8009ff2:	1c58      	adds	r0, r3, #1
 8009ff4:	81f8      	strh	r0, [r7, #14]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	b2ca      	uxtb	r2, r1
 8009ffa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	0c19      	lsrs	r1, r3, #16
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	89fb      	ldrh	r3, [r7, #14]
 800a008:	1c58      	adds	r0, r3, #1
 800a00a:	81f8      	strh	r0, [r7, #14]
 800a00c:	4413      	add	r3, r2
 800a00e:	b2ca      	uxtb	r2, r1
 800a010:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	0e19      	lsrs	r1, r3, #24
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	89fb      	ldrh	r3, [r7, #14]
 800a01e:	1c58      	adds	r0, r3, #1
 800a020:	81f8      	strh	r0, [r7, #14]
 800a022:	4413      	add	r3, r2
 800a024:	b2ca      	uxtb	r2, r1
 800a026:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800a028:	89fb      	ldrh	r3, [r7, #14]
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <LoRaMacSerializerData+0x16>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800a050:	2301      	movs	r3, #1
 800a052:	e0e5      	b.n	800a220 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 800a058:	2308      	movs	r3, #8
 800a05a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7b1b      	ldrb	r3, [r3, #12]
 800a060:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a064:	b2db      	uxtb	r3, r3
 800a066:	b29a      	uxth	r2, r3
 800a068:	89bb      	ldrh	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800a078:	89bb      	ldrh	r3, [r7, #12]
 800a07a:	3301      	adds	r3, #1
 800a07c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a084:	b29a      	uxth	r2, r3
 800a086:	89bb      	ldrh	r3, [r7, #12]
 800a088:	4413      	add	r3, r2
 800a08a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800a08c:	89bb      	ldrh	r3, [r7, #12]
 800a08e:	3304      	adds	r3, #4
 800a090:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	791b      	ldrb	r3, [r3, #4]
 800a096:	b29b      	uxth	r3, r3
 800a098:	89ba      	ldrh	r2, [r7, #12]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d901      	bls.n	800a0a2 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800a09e:	2302      	movs	r3, #2
 800a0a0:	e0be      	b.n	800a220 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	89fb      	ldrh	r3, [r7, #14]
 800a0a8:	1c59      	adds	r1, r3, #1
 800a0aa:	81f9      	strh	r1, [r7, #14]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	7952      	ldrb	r2, [r2, #5]
 800a0b2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6899      	ldr	r1, [r3, #8]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	89fb      	ldrh	r3, [r7, #14]
 800a0be:	1c58      	adds	r0, r3, #1
 800a0c0:	81f8      	strh	r0, [r7, #14]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	b2ca      	uxtb	r2, r1
 800a0c6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	0a19      	lsrs	r1, r3, #8
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	89fb      	ldrh	r3, [r7, #14]
 800a0d4:	1c58      	adds	r0, r3, #1
 800a0d6:	81f8      	strh	r0, [r7, #14]
 800a0d8:	4413      	add	r3, r2
 800a0da:	b2ca      	uxtb	r2, r1
 800a0dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	0c19      	lsrs	r1, r3, #16
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	89fb      	ldrh	r3, [r7, #14]
 800a0ea:	1c58      	adds	r0, r3, #1
 800a0ec:	81f8      	strh	r0, [r7, #14]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	b2ca      	uxtb	r2, r1
 800a0f2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	0e19      	lsrs	r1, r3, #24
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	89fb      	ldrh	r3, [r7, #14]
 800a100:	1c58      	adds	r0, r3, #1
 800a102:	81f8      	strh	r0, [r7, #14]
 800a104:	4413      	add	r3, r2
 800a106:	b2ca      	uxtb	r2, r1
 800a108:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	89fb      	ldrh	r3, [r7, #14]
 800a110:	1c59      	adds	r1, r3, #1
 800a112:	81f9      	strh	r1, [r7, #14]
 800a114:	4413      	add	r3, r2
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	7b12      	ldrb	r2, [r2, #12]
 800a11a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	89d9      	ldrh	r1, [r3, #14]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	89fb      	ldrh	r3, [r7, #14]
 800a126:	1c58      	adds	r0, r3, #1
 800a128:	81f8      	strh	r0, [r7, #14]
 800a12a:	4413      	add	r3, r2
 800a12c:	b2ca      	uxtb	r2, r1
 800a12e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	89db      	ldrh	r3, [r3, #14]
 800a134:	0a1b      	lsrs	r3, r3, #8
 800a136:	b299      	uxth	r1, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	89fb      	ldrh	r3, [r7, #14]
 800a13e:	1c58      	adds	r0, r3, #1
 800a140:	81f8      	strh	r0, [r7, #14]
 800a142:	4413      	add	r3, r2
 800a144:	b2ca      	uxtb	r2, r1
 800a146:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	89fb      	ldrh	r3, [r7, #14]
 800a14e:	18d0      	adds	r0, r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f103 0110 	add.w	r1, r3, #16
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	7b1b      	ldrb	r3, [r3, #12]
 800a15a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	b29b      	uxth	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	f001 fd97 	bl	800bc96 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	7b1b      	ldrb	r3, [r3, #12]
 800a16c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a170:	b2db      	uxtb	r3, r3
 800a172:	b29a      	uxth	r2, r3
 800a174:	89fb      	ldrh	r3, [r7, #14]
 800a176:	4413      	add	r3, r2
 800a178:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a180:	2b00      	cmp	r3, #0
 800a182:	d009      	beq.n	800a198 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	89fb      	ldrh	r3, [r7, #14]
 800a18a:	1c59      	adds	r1, r3, #1
 800a18c:	81f9      	strh	r1, [r7, #14]
 800a18e:	4413      	add	r3, r2
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a196:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	89fb      	ldrh	r3, [r7, #14]
 800a19e:	18d0      	adds	r0, r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f001 fd72 	bl	800bc96 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	89fb      	ldrh	r3, [r7, #14]
 800a1bc:	4413      	add	r3, r2
 800a1be:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	89fb      	ldrh	r3, [r7, #14]
 800a1ca:	1c58      	adds	r0, r3, #1
 800a1cc:	81f8      	strh	r0, [r7, #14]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	b2ca      	uxtb	r2, r1
 800a1d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d8:	0a19      	lsrs	r1, r3, #8
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	89fb      	ldrh	r3, [r7, #14]
 800a1e0:	1c58      	adds	r0, r3, #1
 800a1e2:	81f8      	strh	r0, [r7, #14]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	b2ca      	uxtb	r2, r1
 800a1e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	0c19      	lsrs	r1, r3, #16
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	89fb      	ldrh	r3, [r7, #14]
 800a1f6:	1c58      	adds	r0, r3, #1
 800a1f8:	81f8      	strh	r0, [r7, #14]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	b2ca      	uxtb	r2, r1
 800a1fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	0e19      	lsrs	r1, r3, #24
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	89fb      	ldrh	r3, [r7, #14]
 800a20c:	1c58      	adds	r0, r3, #1
 800a20e:	81f8      	strh	r0, [r7, #14]
 800a210:	4413      	add	r3, r2
 800a212:	b2ca      	uxtb	r2, r1
 800a214:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800a216:	89fb      	ldrh	r3, [r7, #14]
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <RegionGetPhyParam>:
        }
    }
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	6039      	str	r1, [r7, #0]
 800a232:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 800a234:	2300      	movs	r3, #0
 800a236:	60bb      	str	r3, [r7, #8]
    switch( region )
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d105      	bne.n	800a24a <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
 800a23e:	6838      	ldr	r0, [r7, #0]
 800a240:	f000 ff4e 	bl	800b0e0 <RegionEU433GetPhyParam>
 800a244:	4603      	mov	r3, r0
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	e001      	b.n	800a24e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <RegionInitDefaults>:
        }
    }
}

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	2b04      	cmp	r3, #4
 800a268:	d103      	bne.n	800a272 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
 800a26a:	6838      	ldr	r0, [r7, #0]
 800a26c:	f001 f886 	bl	800b37c <RegionEU433InitDefaults>
 800a270:	e000      	b.n	800a274 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 800a272:	bf00      	nop
        }
    }
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	6039      	str	r1, [r7, #0]
 800a286:	71fb      	strb	r3, [r7, #7]
 800a288:	4613      	mov	r3, r2
 800a28a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	2b04      	cmp	r3, #4
 800a290:	d106      	bne.n	800a2a0 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
 800a292:	79bb      	ldrb	r3, [r7, #6]
 800a294:	4619      	mov	r1, r3
 800a296:	6838      	ldr	r0, [r7, #0]
 800a298:	f001 f904 	bl	800b4a4 <RegionEU433Verify>
 800a29c:	4603      	mov	r3, r0
 800a29e:	e000      	b.n	800a2a2 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800a2a0:	2300      	movs	r3, #0
        }
    }
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <RegionChanMaskSet>:
        }
    }
}

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	6039      	str	r1, [r7, #0]
 800a2b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d104      	bne.n	800a2c6 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
 800a2bc:	6838      	ldr	r0, [r7, #0]
 800a2be:	f001 f967 	bl	800b590 <RegionEU433ChanMaskSet>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	e000      	b.n	800a2c8 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800a2c6:	2300      	movs	r3, #0
        }
    }
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	4603      	mov	r3, r0
 800a2da:	71fb      	strb	r3, [r7, #7]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	71bb      	strb	r3, [r7, #6]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	717b      	strb	r3, [r7, #5]
    switch( region )
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d107      	bne.n	800a2fa <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800a2ea:	7979      	ldrb	r1, [r7, #5]
 800a2ec:	f997 0006 	ldrsb.w	r0, [r7, #6]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	f001 f976 	bl	800b5e4 <RegionEU433ComputeRxWindowParameters>
 800a2f8:	e000      	b.n	800a2fc <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 800a2fa:	bf00      	nop
        }
    }
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d105      	bne.n	800a324 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	68b8      	ldr	r0, [r7, #8]
 800a31c:	f001 f9bc 	bl	800b698 <RegionEU433RxConfig>
 800a320:	4603      	mov	r3, r0
 800a322:	e000      	b.n	800a326 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800a324:	2300      	movs	r3, #0
        }
    }
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
 800a33a:	4603      	mov	r3, r0
 800a33c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
 800a340:	2b04      	cmp	r3, #4
 800a342:	d106      	bne.n	800a352 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	68b8      	ldr	r0, [r7, #8]
 800a34a:	f001 fa75 	bl	800b838 <RegionEU433TxConfig>
 800a34e:	4603      	mov	r3, r0
 800a350:	e000      	b.n	800a354 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800a352:	2300      	movs	r3, #0
        }
    }
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <RegionAlternateDr>:
        }
    }
}

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	71fb      	strb	r3, [r7, #7]
 800a366:	460b      	mov	r3, r1
 800a368:	71bb      	strb	r3, [r7, #6]
 800a36a:	4613      	mov	r3, r2
 800a36c:	717b      	strb	r3, [r7, #5]
    switch( region )
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	2b04      	cmp	r3, #4
 800a372:	d108      	bne.n	800a386 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
 800a374:	797a      	ldrb	r2, [r7, #5]
 800a376:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a37a:	4611      	mov	r1, r2
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 fb2b 	bl	800b9d8 <RegionEU433AlternateDr>
 800a382:	4603      	mov	r3, r0
 800a384:	e000      	b.n	800a388 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800a386:	2300      	movs	r3, #0
        }
    }
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	4603      	mov	r3, r0
 800a39e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d107      	bne.n	800a3b6 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	68b8      	ldr	r0, [r7, #8]
 800a3ae:	f001 fb23 	bl	800b9f8 <RegionEU433NextChannel>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	e000      	b.n	800a3b8 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a3b6:	2309      	movs	r3, #9
        }
    }
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	6039      	str	r1, [r7, #0]
 800a3ca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d103      	bne.n	800a3da <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
 800a3d2:	6838      	ldr	r0, [r7, #0]
 800a3d4:	f001 fbbe 	bl	800bb54 <RegionEU433SetContinuousWave>
 800a3d8:	e000      	b.n	800a3dc <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 800a3da:	bf00      	nop
        }
    }
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800a3e4:	b590      	push	{r4, r7, lr}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	71fb      	strb	r3, [r7, #7]
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	71bb      	strb	r3, [r7, #6]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	717b      	strb	r3, [r7, #5]
 800a3fe:	4613      	mov	r3, r2
 800a400:	713b      	strb	r3, [r7, #4]
    switch( region )
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	2b04      	cmp	r3, #4
 800a406:	d109      	bne.n	800a41c <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
 800a408:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800a40c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800a410:	79bb      	ldrb	r3, [r7, #6]
 800a412:	4618      	mov	r0, r3
 800a414:	f001 fbec 	bl	800bbf0 <RegionEU433ApplyDrOffset>
 800a418:	4603      	mov	r3, r0
 800a41a:	e000      	b.n	800a41e <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800a41c:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	bd90      	pop	{r4, r7, pc}
	...

0800a428 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 800a42e:	4b04      	ldr	r3, [pc, #16]	; (800a440 <RegionGetVersion+0x18>)
 800a430:	607b      	str	r3, [r7, #4]

    return version;
 800a432:	687b      	ldr	r3, [r7, #4]
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	01010003 	.word	0x01010003

0800a444 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	4608      	mov	r0, r1
 800a44e:	4639      	mov	r1, r7
 800a450:	e881 000c 	stmia.w	r1, {r2, r3}
 800a454:	4603      	mov	r3, r0
 800a456:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 800a45e:	7afb      	ldrb	r3, [r7, #11]
 800a460:	f083 0301 	eor.w	r3, r3, #1
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d01b      	beq.n	800a4a2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 800a46a:	f242 7310 	movw	r3, #10000	; 0x2710
 800a46e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800a476:	d202      	bcs.n	800a47e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800a478:	2364      	movs	r3, #100	; 0x64
 800a47a:	82bb      	strh	r3, [r7, #20]
 800a47c:	e00b      	b.n	800a496 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800a484:	4293      	cmp	r3, r2
 800a486:	d803      	bhi.n	800a490 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800a488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a48c:	82bb      	strh	r3, [r7, #20]
 800a48e:	e002      	b.n	800a496 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800a490:	f242 7310 	movw	r3, #10000	; 0x2710
 800a494:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800a496:	8aba      	ldrh	r2, [r7, #20]
 800a498:	8afb      	ldrh	r3, [r7, #22]
 800a49a:	4293      	cmp	r3, r2
 800a49c:	bf38      	it	cc
 800a49e:	4613      	movcc	r3, r2
 800a4a0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800a4a2:	8afb      	ldrh	r3, [r7, #22]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 800a4ac:	8afb      	ldrh	r3, [r7, #22]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	371c      	adds	r7, #28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08e      	sub	sp, #56	; 0x38
 800a4bc:	af02      	add	r7, sp, #8
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	e881 000c 	stmia.w	r1, {r2, r3}
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800a4d2:	4b4b      	ldr	r3, [pc, #300]	; (800a600 <SetMaxTimeCredits+0x148>)
 800a4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a4dc:	f004 fe3e 	bl	800f15c <SysTimeToMs>
 800a4e0:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 800a4e2:	f107 0314 	add.w	r3, r7, #20
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800a4ec:	7af9      	ldrb	r1, [r7, #11]
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	cb0c      	ldmia	r3, {r2, r3}
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7ff ffa6 	bl	800a444 <GetDutyCycle>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	f083 0301 	eor.w	r3, r3, #1
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d062      	beq.n	800a5ce <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800a508:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a50a:	2b64      	cmp	r3, #100	; 0x64
 800a50c:	d105      	bne.n	800a51a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800a50e:	4b3c      	ldr	r3, [pc, #240]	; (800a600 <SetMaxTimeCredits+0x148>)
 800a510:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a516:	609a      	str	r2, [r3, #8]
 800a518:	e00b      	b.n	800a532 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800a51a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a51c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a520:	d105      	bne.n	800a52e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800a522:	4b38      	ldr	r3, [pc, #224]	; (800a604 <SetMaxTimeCredits+0x14c>)
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52a:	609a      	str	r2, [r3, #8]
 800a52c:	e001      	b.n	800a532 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800a52e:	4b36      	ldr	r3, [pc, #216]	; (800a608 <SetMaxTimeCredits+0x150>)
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	f107 031c 	add.w	r3, r7, #28
 800a53a:	4611      	mov	r1, r2
 800a53c:	4618      	mov	r0, r3
 800a53e:	f004 fe35 	bl	800f1ac <SysTimeFromMs>
 800a542:	f107 0014 	add.w	r0, r7, #20
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	463a      	mov	r2, r7
 800a54e:	ca06      	ldmia	r2, {r1, r2}
 800a550:	f004 fdac 	bl	800f0ac <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800a554:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a558:	f083 0301 	eor.w	r3, r3, #1
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d006      	beq.n	800a570 <SetMaxTimeCredits+0xb8>
 800a562:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a566:	f083 0301 	eor.w	r3, r3, #1
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d108      	bne.n	800a582 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800a574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a576:	429a      	cmp	r2, r3
 800a578:	d103      	bne.n	800a582 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 800a57a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 800a57c:	4a23      	ldr	r2, [pc, #140]	; (800a60c <SetMaxTimeCredits+0x154>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d92f      	bls.n	800a5e2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a586:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	4a21      	ldr	r2, [pc, #132]	; (800a610 <SetMaxTimeCredits+0x158>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d928      	bls.n	800a5e2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800a596:	3b30      	subs	r3, #48	; 0x30
 800a598:	4a1e      	ldr	r2, [pc, #120]	; (800a614 <SetMaxTimeCredits+0x15c>)
 800a59a:	fba2 2303 	umull	r2, r3, r2, r3
 800a59e:	0c1b      	lsrs	r3, r3, #16
 800a5a0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	4a1c      	ldr	r2, [pc, #112]	; (800a618 <SetMaxTimeCredits+0x160>)
 800a5a6:	fb02 f303 	mul.w	r3, r2, r3
 800a5aa:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800a5b2:	3330      	adds	r3, #48	; 0x30
 800a5b4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800a5ba:	f107 0314 	add.w	r3, r7, #20
 800a5be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a5c2:	f004 fdcb 	bl	800f15c <SysTimeToMs>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	609a      	str	r2, [r3, #8]
 800a5cc:	e009      	b.n	800a5e2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 800a5ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a5d2:	f083 0301 	eor.w	r3, r3, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5e0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ee:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 800a5f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3730      	adds	r7, #48	; 0x30
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	001b7740 	.word	0x001b7740
 800a604:	0112a880 	.word	0x0112a880
 800a608:	02932e00 	.word	0x02932e00
 800a60c:	0001517f 	.word	0x0001517f
 800a610:	0001ec2f 	.word	0x0001ec2f
 800a614:	c22e4507 	.word	0xc22e4507
 800a618:	00015180 	.word	0x00015180

0800a61c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af02      	add	r7, sp, #8
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	4608      	mov	r0, r1
 800a626:	4611      	mov	r1, r2
 800a628:	461a      	mov	r2, r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	70fb      	strb	r3, [r7, #3]
 800a62e:	460b      	mov	r3, r1
 800a630:	70bb      	strb	r3, [r7, #2]
 800a632:	4613      	mov	r3, r2
 800a634:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800a636:	78f9      	ldrb	r1, [r7, #3]
 800a638:	787b      	ldrb	r3, [r7, #1]
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	78bb      	ldrb	r3, [r7, #2]
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	f107 0318 	add.w	r3, r7, #24
 800a644:	cb0c      	ldmia	r3, {r2, r3}
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff ff36 	bl	800a4b8 <SetMaxTimeCredits>
 800a64c:	4603      	mov	r3, r0
 800a64e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f004 ff34 	bl	800f4c8 <UTIL_TIMER_GetElapsedTime>
 800a660:	4602      	mov	r2, r0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	441a      	add	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	429a      	cmp	r2, r3
 800a676:	d903      	bls.n	800a680 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691a      	ldr	r2, [r3, #16]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 800a686:	89fb      	ldrh	r3, [r7, #14]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	460a      	mov	r2, r1
 800a69a:	80fb      	strh	r3, [r7, #6]
 800a69c:	4613      	mov	r3, r2
 800a69e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73bb      	strb	r3, [r7, #14]
 800a6a8:	e011      	b.n	800a6ce <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800a6aa:	88fa      	ldrh	r2, [r7, #6]
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b4:	401a      	ands	r2, r3
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d102      	bne.n	800a6c8 <CountChannels+0x38>
        {
            nbActiveBits++;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	73bb      	strb	r3, [r7, #14]
 800a6ce:	7bba      	ldrb	r2, [r7, #14]
 800a6d0:	797b      	ldrb	r3, [r7, #5]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d3e9      	bcc.n	800a6aa <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bc80      	pop	{r7}
 800a6e0:	4770      	bx	lr

0800a6e2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	71fb      	strb	r3, [r7, #7]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	71bb      	strb	r3, [r7, #6]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800a6fa:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800a6fe:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800a702:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 f85d 	bl	800a7c6 <RegionCommonValueInRange>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 800a712:	2300      	movs	r3, #0
 800a714:	e053      	b.n	800a7be <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
 800a71a:	2300      	movs	r3, #0
 800a71c:	73bb      	strb	r3, [r7, #14]
 800a71e:	e049      	b.n	800a7b4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800a720:	2300      	movs	r3, #0
 800a722:	737b      	strb	r3, [r7, #13]
 800a724:	e03d      	b.n	800a7a2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	4413      	add	r3, r2
 800a72e:	881b      	ldrh	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	7b7b      	ldrb	r3, [r7, #13]
 800a734:	fa42 f303 	asr.w	r3, r2, r3
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02d      	beq.n	800a79c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a740:	7bfa      	ldrb	r2, [r7, #15]
 800a742:	7b7b      	ldrb	r3, [r7, #13]
 800a744:	4413      	add	r3, r2
 800a746:	461a      	mov	r2, r3
 800a748:	4613      	mov	r3, r2
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	4413      	add	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	461a      	mov	r2, r3
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	4413      	add	r3, r2
 800a756:	7a1b      	ldrb	r3, [r3, #8]
 800a758:	f343 0303 	sbfx	r3, r3, #0, #4
 800a75c:	b25b      	sxtb	r3, r3
 800a75e:	f003 030f 	and.w	r3, r3, #15
 800a762:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800a764:	7bfa      	ldrb	r2, [r7, #15]
 800a766:	7b7b      	ldrb	r3, [r7, #13]
 800a768:	4413      	add	r3, r2
 800a76a:	461a      	mov	r2, r3
 800a76c:	4613      	mov	r3, r2
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	4413      	add	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	461a      	mov	r2, r3
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	4413      	add	r3, r2
 800a77a:	7a1b      	ldrb	r3, [r3, #8]
 800a77c:	f343 1303 	sbfx	r3, r3, #4, #4
 800a780:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a782:	f003 030f 	and.w	r3, r3, #15
 800a786:	b25a      	sxtb	r2, r3
 800a788:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 f81a 	bl	800a7c6 <RegionCommonValueInRange>
 800a792:	4603      	mov	r3, r0
 800a794:	2b01      	cmp	r3, #1
 800a796:	d101      	bne.n	800a79c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800a798:	2301      	movs	r3, #1
 800a79a:	e010      	b.n	800a7be <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 800a79c:	7b7b      	ldrb	r3, [r7, #13]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	737b      	strb	r3, [r7, #13]
 800a7a2:	7b7b      	ldrb	r3, [r7, #13]
 800a7a4:	2b0f      	cmp	r3, #15
 800a7a6:	d9be      	bls.n	800a726 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	3310      	adds	r3, #16
 800a7ac:	73fb      	strb	r3, [r7, #15]
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	73bb      	strb	r3, [r7, #14]
 800a7b4:	7bfa      	ldrb	r2, [r7, #15]
 800a7b6:	79fb      	ldrb	r3, [r7, #7]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d3b1      	bcc.n	800a720 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	71fb      	strb	r3, [r7, #7]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	71bb      	strb	r3, [r7, #6]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 800a7d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a7dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	db07      	blt.n	800a7f4 <RegionCommonValueInRange+0x2e>
 800a7e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a7e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	dc01      	bgt.n	800a7f4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bc80      	pop	{r7}
 800a7fe:	4770      	bx	lr

0800a800 <RegionCommonCountChannels>:

    return true;
}

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
 800a80c:	4613      	mov	r3, r2
 800a80e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e018      	b.n	800a850 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	73bb      	strb	r3, [r7, #14]
 800a822:	e010      	b.n	800a846 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	4413      	add	r3, r2
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	2110      	movs	r1, #16
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff ff2d 	bl	800a690 <CountChannels>
 800a836:	4603      	mov	r3, r0
 800a838:	461a      	mov	r2, r3
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
 800a83c:	4413      	add	r3, r2
 800a83e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a840:	7bbb      	ldrb	r3, [r7, #14]
 800a842:	3301      	adds	r3, #1
 800a844:	73bb      	strb	r3, [r7, #14]
 800a846:	7bba      	ldrb	r2, [r7, #14]
 800a848:	78bb      	ldrb	r3, [r7, #2]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d3ea      	bcc.n	800a824 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4613      	mov	r3, r2
 800a864:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d016      	beq.n	800a89a <RegionCommonChanMaskCopy+0x42>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d013      	beq.n	800a89a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800a872:	2300      	movs	r3, #0
 800a874:	75fb      	strb	r3, [r7, #23]
 800a876:	e00c      	b.n	800a892 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800a878:	7dfb      	ldrb	r3, [r7, #23]
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	441a      	add	r2, r3
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	440b      	add	r3, r1
 800a888:	8812      	ldrh	r2, [r2, #0]
 800a88a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	3301      	adds	r3, #1
 800a890:	75fb      	strb	r3, [r7, #23]
 800a892:	7dfa      	ldrb	r2, [r7, #23]
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	429a      	cmp	r2, r3
 800a898:	d3ee      	bcc.n	800a878 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800a89a:	bf00      	nop
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a6:	b08f      	sub	sp, #60	; 0x3c
 800a8a8:	af04      	add	r7, sp, #16
 800a8aa:	6039      	str	r1, [r7, #0]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	71fb      	strb	r3, [r7, #7]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	71bb      	strb	r3, [r7, #6]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800a8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800a8c2:	f004 fdef 	bl	800f4a4 <UTIL_TIMER_GetCurrentTime>
 800a8c6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a8dc:	e0ba      	b.n	800aa54 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800a8de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	4413      	add	r3, r2
 800a8e8:	00db      	lsls	r3, r3, #3
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	189c      	adds	r4, r3, r2
 800a8f0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 800a8f4:	797a      	ldrb	r2, [r7, #5]
 800a8f6:	79fd      	ldrb	r5, [r7, #7]
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	9302      	str	r3, [sp, #8]
 800a8fc:	46ec      	mov	ip, sp
 800a8fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a902:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a906:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a90a:	4633      	mov	r3, r6
 800a90c:	4629      	mov	r1, r5
 800a90e:	4620      	mov	r0, r4
 800a910:	f7ff fe84 	bl	800a61c <UpdateTimeCredits>
 800a914:	4603      	mov	r3, r0
 800a916:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 800a918:	8afa      	ldrh	r2, [r7, #22]
 800a91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a91c:	fb02 f303 	mul.w	r3, r2, r3
 800a920:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800a922:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a926:	4613      	mov	r3, r2
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	4413      	add	r3, r2
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	461a      	mov	r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	4413      	add	r3, r2
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d908      	bls.n	800a94e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800a93c:	797b      	ldrb	r3, [r7, #5]
 800a93e:	f083 0301 	eor.w	r3, r3, #1
 800a942:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800a944:	2b00      	cmp	r3, #0
 800a946:	d013      	beq.n	800a970 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d010      	beq.n	800a970 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 800a94e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a952:	4613      	mov	r3, r2
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	4413      	add	r3, r2
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	461a      	mov	r2, r3
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	4413      	add	r3, r2
 800a960:	2201      	movs	r2, #1
 800a962:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800a964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a968:	3301      	adds	r3, #1
 800a96a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a96e:	e06c      	b.n	800aa4a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800a970:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a974:	4613      	mov	r3, r2
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	4413      	add	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	461a      	mov	r2, r3
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	4413      	add	r3, r2
 800a982:	2200      	movs	r2, #0
 800a984:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800a986:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a98a:	4613      	mov	r3, r2
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	461a      	mov	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	4413      	add	r3, r2
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d815      	bhi.n	800a9cc <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800a9a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	4413      	add	r3, r2
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	bf28      	it	cs
 800a9be:	4613      	movcs	r3, r2
 800a9c0:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800a9c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	f083 0301 	eor.w	r3, r3, #1
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d038      	beq.n	800aa4a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800a9e0:	8afb      	ldrh	r3, [r7, #22]
 800a9e2:	2b64      	cmp	r3, #100	; 0x64
 800a9e4:	d103      	bne.n	800a9ee <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800a9e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	e009      	b.n	800aa02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800a9ee:	8afb      	ldrh	r3, [r7, #22]
 800a9f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9f4:	d103      	bne.n	800a9fe <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800a9f6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	e001      	b.n	800aa02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800a9fe:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 800aa00:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800aa02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa04:	4a1c      	ldr	r2, [pc, #112]	; (800aa78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d90e      	bls.n	800aa28 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa0e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800aa12:	3b30      	subs	r3, #48	; 0x30
 800aa14:	4919      	ldr	r1, [pc, #100]	; (800aa7c <RegionCommonUpdateBandTimeOff+0x1d8>)
 800aa16:	fba1 1303 	umull	r1, r3, r1, r3
 800aa1a:	0c1b      	lsrs	r3, r3, #16
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	4918      	ldr	r1, [pc, #96]	; (800aa80 <RegionCommonUpdateBandTimeOff+0x1dc>)
 800aa20:	fb01 f303 	mul.w	r3, r1, r3
 800aa24:	4413      	add	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800aa28:	f107 000c 	add.w	r0, r7, #12
 800aa2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa32:	f107 020c 	add.w	r2, r7, #12
 800aa36:	ca06      	ldmia	r2, {r1, r2}
 800aa38:	f004 fb38 	bl	800f0ac <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800aa3c:	f107 030c 	add.w	r3, r7, #12
 800aa40:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa44:	f004 fb8a 	bl	800f15c <SysTimeToMs>
 800aa48:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 800aa4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aa4e:	3301      	adds	r3, #1
 800aa50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800aa54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aa58:	79bb      	ldrb	r3, [r7, #6]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	f4ff af3f 	bcc.w	800a8de <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 800aa60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800aa68:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6c:	e000      	b.n	800aa70 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	372c      	adds	r7, #44	; 0x2c
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa78:	0001ec30 	.word	0x0001ec30
 800aa7c:	c22e4507 	.word	0xc22e4507
 800aa80:	00015180 	.word	0x00015180

0800aa84 <RegionCommonComputeSymbolTimeLoRa>:

    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800aa90:	79fb      	ldrb	r3, [r7, #7]
 800aa92:	4a06      	ldr	r2, [pc, #24]	; (800aaac <RegionCommonComputeSymbolTimeLoRa+0x28>)
 800aa94:	fa02 f303 	lsl.w	r3, r2, r3
 800aa98:	461a      	mov	r2, r3
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bc80      	pop	{r7}
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	000f4240 	.word	0x000f4240

0800aab0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800aac0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bc80      	pop	{r7}
 800aacc:	4770      	bx	lr
	...

0800aad0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	607a      	str	r2, [r7, #4]
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	460b      	mov	r3, r1
 800aade:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800aae0:	7afa      	ldrb	r2, [r7, #11]
 800aae2:	7afb      	ldrb	r3, [r7, #11]
 800aae4:	3b04      	subs	r3, #4
 800aae6:	4619      	mov	r1, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	fb03 f101 	mul.w	r1, r3, r1
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aaf4:	fb00 f303 	mul.w	r3, r0, r3
 800aaf8:	440b      	add	r3, r1
 800aafa:	005b      	lsls	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d013      	beq.n	800ab28 <RegionCommonComputeRxWindowParameters+0x58>
 800ab00:	7afb      	ldrb	r3, [r7, #11]
 800ab02:	3b04      	subs	r3, #4
 800ab04:	4619      	mov	r1, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	fb03 f101 	mul.w	r1, r3, r1
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab12:	fb00 f303 	mul.w	r3, r0, r3
 800ab16:	440b      	add	r3, r1
 800ab18:	0059      	lsls	r1, r3, #1
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	440b      	add	r3, r1
 800ab1e:	1e59      	subs	r1, r3, #1
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab26:	e00f      	b.n	800ab48 <RegionCommonComputeRxWindowParameters+0x78>
 800ab28:	7afb      	ldrb	r3, [r7, #11]
 800ab2a:	3b04      	subs	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	fb03 f101 	mul.w	r1, r3, r1
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab3a:	fb00 f303 	mul.w	r3, r0, r3
 800ab3e:	440b      	add	r3, r1
 800ab40:	0059      	lsls	r1, r3, #1
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	bf38      	it	cc
 800ab4c:	461a      	movcc	r2, r3
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4619      	mov	r1, r3
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	fb02 f303 	mul.w	r3, r2, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d007      	beq.n	800ab76 <RegionCommonComputeRxWindowParameters+0xa6>
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	fb02 f303 	mul.w	r3, r2, r3
 800ab70:	3301      	adds	r3, #1
 800ab72:	085b      	lsrs	r3, r3, #1
 800ab74:	e005      	b.n	800ab82 <RegionCommonComputeRxWindowParameters+0xb2>
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	fb02 f303 	mul.w	r3, r2, r3
 800ab80:	085b      	lsrs	r3, r3, #1
 800ab82:	1acb      	subs	r3, r1, r3
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab8a:	fb01 f202 	mul.w	r2, r1, r2
 800ab8e:	1a9b      	subs	r3, r3, r2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	dd27      	ble.n	800abe4 <RegionCommonComputeRxWindowParameters+0x114>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4619      	mov	r1, r3
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	fb02 f303 	mul.w	r3, r2, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d007      	beq.n	800abb8 <RegionCommonComputeRxWindowParameters+0xe8>
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	fb02 f303 	mul.w	r3, r2, r3
 800abb2:	3301      	adds	r3, #1
 800abb4:	085b      	lsrs	r3, r3, #1
 800abb6:	e005      	b.n	800abc4 <RegionCommonComputeRxWindowParameters+0xf4>
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	fb02 f303 	mul.w	r3, r2, r3
 800abc2:	085b      	lsrs	r3, r3, #1
 800abc4:	1acb      	subs	r3, r1, r3
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800abcc:	fb01 f202 	mul.w	r2, r1, r2
 800abd0:	1a9b      	subs	r3, r3, r2
 800abd2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800abd6:	4a19      	ldr	r2, [pc, #100]	; (800ac3c <RegionCommonComputeRxWindowParameters+0x16c>)
 800abd8:	fb82 1203 	smull	r1, r2, r2, r3
 800abdc:	1192      	asrs	r2, r2, #6
 800abde:	17db      	asrs	r3, r3, #31
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	e024      	b.n	800ac2e <RegionCommonComputeRxWindowParameters+0x15e>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4619      	mov	r1, r3
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	fb02 f303 	mul.w	r3, r2, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d007      	beq.n	800ac08 <RegionCommonComputeRxWindowParameters+0x138>
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	fb02 f303 	mul.w	r3, r2, r3
 800ac02:	3301      	adds	r3, #1
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	e005      	b.n	800ac14 <RegionCommonComputeRxWindowParameters+0x144>
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	fb02 f303 	mul.w	r3, r2, r3
 800ac12:	085b      	lsrs	r3, r3, #1
 800ac14:	1acb      	subs	r3, r1, r3
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac1c:	fb01 f202 	mul.w	r2, r1, r2
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	4a06      	ldr	r2, [pc, #24]	; (800ac3c <RegionCommonComputeRxWindowParameters+0x16c>)
 800ac24:	fb82 1203 	smull	r1, r2, r2, r3
 800ac28:	1192      	asrs	r2, r2, #6
 800ac2a:	17db      	asrs	r3, r3, #31
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	69fa      	ldr	r2, [r7, #28]
 800ac30:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ac32:	bf00      	nop
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bc80      	pop	{r7}
 800ac3a:	4770      	bx	lr
 800ac3c:	10624dd3 	.word	0x10624dd3

0800ac40 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800ac52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f5 fdaf 	bl	80007bc <__aeabi_ui2f>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4619      	mov	r1, r3
 800ac62:	68b8      	ldr	r0, [r7, #8]
 800ac64:	f7f5 fcf8 	bl	8000658 <__aeabi_fsub>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	6879      	ldr	r1, [r7, #4]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f5 fcf3 	bl	8000658 <__aeabi_fsub>
 800ac72:	4603      	mov	r3, r0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f5 fbe3 	bl	8000440 <__aeabi_f2d>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4610      	mov	r0, r2
 800ac80:	4619      	mov	r1, r3
 800ac82:	f004 fcfd 	bl	800f680 <floor>
 800ac86:	4602      	mov	r2, r0
 800ac88:	460b      	mov	r3, r1
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f7f5 fcb7 	bl	8000600 <__aeabi_d2iz>
 800ac92:	4603      	mov	r3, r0
 800ac94:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 800ac96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800aca2:	b590      	push	{r4, r7, lr}
 800aca4:	b087      	sub	sp, #28
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	607a      	str	r2, [r7, #4]
 800acae:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800acb8:	2300      	movs	r3, #0
 800acba:	757b      	strb	r3, [r7, #21]
 800acbc:	2300      	movs	r3, #0
 800acbe:	753b      	strb	r3, [r7, #20]
 800acc0:	e09c      	b.n	800adfc <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800acc2:	2300      	movs	r3, #0
 800acc4:	74fb      	strb	r3, [r7, #19]
 800acc6:	e08f      	b.n	800ade8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	7d3b      	ldrb	r3, [r7, #20]
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	4413      	add	r3, r2
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	461a      	mov	r2, r3
 800acd6:	7cfb      	ldrb	r3, [r7, #19]
 800acd8:	fa42 f303 	asr.w	r3, r2, r3
 800acdc:	f003 0301 	and.w	r3, r3, #1
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d07e      	beq.n	800ade2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	7d79      	ldrb	r1, [r7, #21]
 800acea:	7cfb      	ldrb	r3, [r7, #19]
 800acec:	440b      	add	r3, r1
 800acee:	4619      	mov	r1, r3
 800acf0:	460b      	mov	r3, r1
 800acf2:	005b      	lsls	r3, r3, #1
 800acf4:	440b      	add	r3, r1
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d06b      	beq.n	800add8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	f083 0301 	eor.w	r3, r3, #1
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d011      	beq.n	800ad32 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00d      	beq.n	800ad32 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	695a      	ldr	r2, [r3, #20]
 800ad1a:	7d3b      	ldrb	r3, [r7, #20]
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	4413      	add	r3, r2
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	7cfb      	ldrb	r3, [r7, #19]
 800ad26:	fa42 f303 	asr.w	r3, r2, r3
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d054      	beq.n	800addc <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	785b      	ldrb	r3, [r3, #1]
 800ad36:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	7d79      	ldrb	r1, [r7, #21]
 800ad3e:	7cfb      	ldrb	r3, [r7, #19]
 800ad40:	440b      	add	r3, r1
 800ad42:	4619      	mov	r1, r3
 800ad44:	460b      	mov	r3, r1
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	440b      	add	r3, r1
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	7a1b      	ldrb	r3, [r3, #8]
 800ad50:	f343 0303 	sbfx	r3, r3, #0, #4
 800ad54:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ad56:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	7d79      	ldrb	r1, [r7, #21]
 800ad5e:	7cfb      	ldrb	r3, [r7, #19]
 800ad60:	440b      	add	r3, r1
 800ad62:	4619      	mov	r1, r3
 800ad64:	460b      	mov	r3, r1
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	440b      	add	r3, r1
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	7a1b      	ldrb	r3, [r3, #8]
 800ad70:	f343 1303 	sbfx	r3, r3, #4, #4
 800ad74:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ad76:	461a      	mov	r2, r3
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f7ff fd24 	bl	800a7c6 <RegionCommonValueInRange>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d02d      	beq.n	800ade0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68da      	ldr	r2, [r3, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6899      	ldr	r1, [r3, #8]
 800ad8c:	7d78      	ldrb	r0, [r7, #21]
 800ad8e:	7cfb      	ldrb	r3, [r7, #19]
 800ad90:	4403      	add	r3, r0
 800ad92:	4618      	mov	r0, r3
 800ad94:	4603      	mov	r3, r0
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	4403      	add	r3, r0
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	7a5b      	ldrb	r3, [r3, #9]
 800ada0:	4619      	mov	r1, r3
 800ada2:	460b      	mov	r3, r1
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	440b      	add	r3, r1
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	4413      	add	r3, r2
 800adac:	7d1b      	ldrb	r3, [r3, #20]
 800adae:	f083 0301 	eor.w	r3, r3, #1
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d003      	beq.n	800adc0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 800adb8:	7dbb      	ldrb	r3, [r7, #22]
 800adba:	3301      	adds	r3, #1
 800adbc:	75bb      	strb	r3, [r7, #22]
                    continue;
 800adbe:	e010      	b.n	800ade2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	75fa      	strb	r2, [r7, #23]
 800adc6:	461a      	mov	r2, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	4413      	add	r3, r2
 800adcc:	7d79      	ldrb	r1, [r7, #21]
 800adce:	7cfa      	ldrb	r2, [r7, #19]
 800add0:	440a      	add	r2, r1
 800add2:	b2d2      	uxtb	r2, r2
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	e004      	b.n	800ade2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800add8:	bf00      	nop
 800adda:	e002      	b.n	800ade2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 800addc:	bf00      	nop
 800adde:	e000      	b.n	800ade2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800ade0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 800ade2:	7cfb      	ldrb	r3, [r7, #19]
 800ade4:	3301      	adds	r3, #1
 800ade6:	74fb      	strb	r3, [r7, #19]
 800ade8:	7cfb      	ldrb	r3, [r7, #19]
 800adea:	2b0f      	cmp	r3, #15
 800adec:	f67f af6c 	bls.w	800acc8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800adf0:	7d7b      	ldrb	r3, [r7, #21]
 800adf2:	3310      	adds	r3, #16
 800adf4:	757b      	strb	r3, [r7, #21]
 800adf6:	7d3b      	ldrb	r3, [r7, #20]
 800adf8:	3301      	adds	r3, #1
 800adfa:	753b      	strb	r3, [r7, #20]
 800adfc:	7d7b      	ldrb	r3, [r7, #21]
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	8a1b      	ldrh	r3, [r3, #16]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	f4ff af5c 	bcc.w	800acc2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	7dfa      	ldrb	r2, [r7, #23]
 800ae0e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	7dba      	ldrb	r2, [r7, #22]
 800ae14:	701a      	strb	r2, [r3, #0]
}
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd90      	pop	{r4, r7, pc}

0800ae1e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800ae1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae20:	b08b      	sub	sp, #44	; 0x2c
 800ae22:	af04      	add	r7, sp, #16
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	607a      	str	r2, [r7, #4]
 800ae2a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f004 fb49 	bl	800f4c8 <UTIL_TIMER_GetElapsedTime>
 800ae36:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae42:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d32b      	bcc.n	800aeba <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	69db      	ldr	r3, [r3, #28]
 800ae6c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800ae72:	68dd      	ldr	r5, [r3, #12]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	7a5e      	ldrb	r6, [r3, #9]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f893 c008 	ldrb.w	ip, [r3, #8]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	7d1b      	ldrb	r3, [r3, #20]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	6992      	ldr	r2, [r2, #24]
 800ae86:	9203      	str	r2, [sp, #12]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	f10d 0e04 	add.w	lr, sp, #4
 800ae8e:	320c      	adds	r2, #12
 800ae90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae94:	e88e 0003 	stmia.w	lr, {r0, r1}
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	4663      	mov	r3, ip
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4620      	mov	r0, r4
 800aea2:	f7ff fcff 	bl	800a8a4 <RegionCommonUpdateBandTimeOff>
 800aea6:	4602      	mov	r2, r0
 800aea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeaa:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	69d8      	ldr	r0, [r3, #28]
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	f7ff fef4 	bl	800aca2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d004      	beq.n	800aecc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 800aec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec4:	2200      	movs	r2, #0
 800aec6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	e006      	b.n	800aeda <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800aed4:	230b      	movs	r3, #11
 800aed6:	e000      	b.n	800aeda <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800aed8:	230c      	movs	r3, #12
    }
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	371c      	adds	r7, #28
 800aede:	46bd      	mov	sp, r7
 800aee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aee2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800aee2:	b5b0      	push	{r4, r5, r7, lr}
 800aee4:	b086      	sub	sp, #24
 800aee6:	af02      	add	r7, sp, #8
 800aee8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f993 2000 	ldrsb.w	r2, [r3]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d103      	bne.n	800af08 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800af06:	e026      	b.n	800af56 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800af16:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d019      	beq.n	800af52 <RegionCommonGetNextLowerTxDr+0x70>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	78d8      	ldrb	r0, [r3, #3]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6859      	ldr	r1, [r3, #4]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f993 5002 	ldrsb.w	r5, [r3, #2]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	6892      	ldr	r2, [r2, #8]
 800af36:	f997 400f 	ldrsb.w	r4, [r7, #15]
 800af3a:	9201      	str	r2, [sp, #4]
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	462b      	mov	r3, r5
 800af40:	4622      	mov	r2, r4
 800af42:	f7ff fbce 	bl	800a6e2 <RegionCommonChanVerifyDr>
 800af46:	4603      	mov	r3, r0
 800af48:	f083 0301 	eor.w	r3, r3, #1
 800af4c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1da      	bne.n	800af08 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 800af52:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bdb0      	pop	{r4, r5, r7, pc}

0800af5e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	4603      	mov	r3, r0
 800af66:	460a      	mov	r2, r1
 800af68:	71fb      	strb	r3, [r7, #7]
 800af6a:	4613      	mov	r3, r2
 800af6c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800af6e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800af72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af76:	4293      	cmp	r3, r2
 800af78:	bfb8      	it	lt
 800af7a:	4613      	movlt	r3, r2
 800af7c:	b25b      	sxtb	r3, r3
}
 800af7e:	4618      	mov	r0, r3
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	bc80      	pop	{r7}
 800af86:	4770      	bx	lr

0800af88 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4413      	add	r3, r2
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a07      	ldr	r2, [pc, #28]	; (800afbc <RegionCommonGetBandwidth+0x34>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d004      	beq.n	800afac <RegionCommonGetBandwidth+0x24>
 800afa2:	4a07      	ldr	r2, [pc, #28]	; (800afc0 <RegionCommonGetBandwidth+0x38>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d003      	beq.n	800afb0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	e002      	b.n	800afb2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 800afb0:	2302      	movs	r3, #2
    }
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr
 800afbc:	0003d090 	.word	0x0003d090
 800afc0:	0007a120 	.word	0x0007a120

0800afc4 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	6039      	str	r1, [r7, #0]
 800afce:	71fb      	strb	r3, [r7, #7]
 800afd0:	4613      	mov	r3, r2
 800afd2:	71bb      	strb	r3, [r7, #6]
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	bc80      	pop	{r7}
 800afdc:	4770      	bx	lr

0800afde <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	460b      	mov	r3, r1
 800afe8:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 800afea:	bf00      	nop
 800afec:	370c      	adds	r7, #12
 800afee:	46bd      	mov	sp, r7
 800aff0:	bc80      	pop	{r7}
 800aff2:	4770      	bx	lr

0800aff4 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800affc:	4b0d      	ldr	r3, [pc, #52]	; (800b034 <VerifyRfFreq+0x40>)
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	4798      	blx	r3
 800b004:	4603      	mov	r3, r0
 800b006:	f083 0301 	eor.w	r3, r3, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <VerifyRfFreq+0x20>
    {
        return false;
 800b010:	2300      	movs	r3, #0
 800b012:	e00a      	b.n	800b02a <VerifyRfFreq+0x36>
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a08      	ldr	r2, [pc, #32]	; (800b038 <VerifyRfFreq+0x44>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d903      	bls.n	800b024 <VerifyRfFreq+0x30>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a07      	ldr	r2, [pc, #28]	; (800b03c <VerifyRfFreq+0x48>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d901      	bls.n	800b028 <VerifyRfFreq+0x34>
    {
        return false;
 800b024:	2300      	movs	r3, #0
 800b026:	e000      	b.n	800b02a <VerifyRfFreq+0x36>
    }
    return true;
 800b028:	2301      	movs	r3, #1
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	0800fbf4 	.word	0x0800fbf4
 800b038:	19d1b9d7 	.word	0x19d1b9d7
 800b03c:	19e87628 	.word	0x19e87628

0800b040 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800b040:	b590      	push	{r4, r7, lr}
 800b042:	b08b      	sub	sp, #44	; 0x2c
 800b044:	af04      	add	r7, sp, #16
 800b046:	4603      	mov	r3, r0
 800b048:	460a      	mov	r2, r1
 800b04a:	71fb      	strb	r3, [r7, #7]
 800b04c:	4613      	mov	r3, r2
 800b04e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU433[datarate];
 800b050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b054:	4a1f      	ldr	r2, [pc, #124]	; (800b0d4 <GetTimeOnAir+0x94>)
 800b056:	5cd3      	ldrb	r3, [r2, r3]
 800b058:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU433 );
 800b05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b05e:	491e      	ldr	r1, [pc, #120]	; (800b0d8 <GetTimeOnAir+0x98>)
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff ff91 	bl	800af88 <RegionCommonGetBandwidth>
 800b066:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 800b06c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b070:	2b07      	cmp	r3, #7
 800b072:	d118      	bne.n	800b0a6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b074:	4b19      	ldr	r3, [pc, #100]	; (800b0dc <GetTimeOnAir+0x9c>)
 800b076:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b078:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b07c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b080:	fb02 f303 	mul.w	r3, r2, r3
 800b084:	4619      	mov	r1, r3
 800b086:	88bb      	ldrh	r3, [r7, #4]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2201      	movs	r2, #1
 800b08c:	9203      	str	r2, [sp, #12]
 800b08e:	9302      	str	r3, [sp, #8]
 800b090:	2300      	movs	r3, #0
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	2305      	movs	r3, #5
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	2300      	movs	r3, #0
 800b09a:	460a      	mov	r2, r1
 800b09c:	68f9      	ldr	r1, [r7, #12]
 800b09e:	2000      	movs	r0, #0
 800b0a0:	47a0      	blx	r4
 800b0a2:	6178      	str	r0, [r7, #20]
 800b0a4:	e011      	b.n	800b0ca <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b0a6:	4b0d      	ldr	r3, [pc, #52]	; (800b0dc <GetTimeOnAir+0x9c>)
 800b0a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b0aa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b0ae:	88bb      	ldrh	r3, [r7, #4]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	9103      	str	r1, [sp, #12]
 800b0b6:	9302      	str	r3, [sp, #8]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	2308      	movs	r3, #8
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	68f9      	ldr	r1, [r7, #12]
 800b0c4:	2001      	movs	r0, #1
 800b0c6:	47a0      	blx	r4
 800b0c8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 800b0ca:	697b      	ldr	r3, [r7, #20]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	371c      	adds	r7, #28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd90      	pop	{r4, r7, pc}
 800b0d4:	0800fbbc 	.word	0x0800fbbc
 800b0d8:	0800fbc4 	.word	0x0800fbc4
 800b0dc:	0800fbf4 	.word	0x0800fbf4

0800b0e0 <RegionEU433GetPhyParam>:
#endif /* REGION_EU433 */

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU433 )
    switch( getPhy->Attribute )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	2b38      	cmp	r3, #56	; 0x38
 800b0f4:	f200 8127 	bhi.w	800b346 <RegionEU433GetPhyParam+0x266>
 800b0f8:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <RegionEU433GetPhyParam+0x20>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b1e5 	.word	0x0800b1e5
 800b104:	0800b1eb 	.word	0x0800b1eb
 800b108:	0800b347 	.word	0x0800b347
 800b10c:	0800b347 	.word	0x0800b347
 800b110:	0800b347 	.word	0x0800b347
 800b114:	0800b1f1 	.word	0x0800b1f1
 800b118:	0800b347 	.word	0x0800b347
 800b11c:	0800b22b 	.word	0x0800b22b
 800b120:	0800b347 	.word	0x0800b347
 800b124:	0800b231 	.word	0x0800b231
 800b128:	0800b237 	.word	0x0800b237
 800b12c:	0800b23d 	.word	0x0800b23d
 800b130:	0800b243 	.word	0x0800b243
 800b134:	0800b253 	.word	0x0800b253
 800b138:	0800b263 	.word	0x0800b263
 800b13c:	0800b269 	.word	0x0800b269
 800b140:	0800b271 	.word	0x0800b271
 800b144:	0800b279 	.word	0x0800b279
 800b148:	0800b281 	.word	0x0800b281
 800b14c:	0800b289 	.word	0x0800b289
 800b150:	0800b291 	.word	0x0800b291
 800b154:	0800b299 	.word	0x0800b299
 800b158:	0800b2ad 	.word	0x0800b2ad
 800b15c:	0800b2b3 	.word	0x0800b2b3
 800b160:	0800b2b9 	.word	0x0800b2b9
 800b164:	0800b2bf 	.word	0x0800b2bf
 800b168:	0800b2cb 	.word	0x0800b2cb
 800b16c:	0800b2d7 	.word	0x0800b2d7
 800b170:	0800b2dd 	.word	0x0800b2dd
 800b174:	0800b2e5 	.word	0x0800b2e5
 800b178:	0800b2eb 	.word	0x0800b2eb
 800b17c:	0800b2f1 	.word	0x0800b2f1
 800b180:	0800b2f7 	.word	0x0800b2f7
 800b184:	0800b1f7 	.word	0x0800b1f7
 800b188:	0800b347 	.word	0x0800b347
 800b18c:	0800b347 	.word	0x0800b347
 800b190:	0800b347 	.word	0x0800b347
 800b194:	0800b347 	.word	0x0800b347
 800b198:	0800b347 	.word	0x0800b347
 800b19c:	0800b347 	.word	0x0800b347
 800b1a0:	0800b347 	.word	0x0800b347
 800b1a4:	0800b347 	.word	0x0800b347
 800b1a8:	0800b347 	.word	0x0800b347
 800b1ac:	0800b347 	.word	0x0800b347
 800b1b0:	0800b347 	.word	0x0800b347
 800b1b4:	0800b347 	.word	0x0800b347
 800b1b8:	0800b347 	.word	0x0800b347
 800b1bc:	0800b2fd 	.word	0x0800b2fd
 800b1c0:	0800b303 	.word	0x0800b303
 800b1c4:	0800b311 	.word	0x0800b311
 800b1c8:	0800b347 	.word	0x0800b347
 800b1cc:	0800b347 	.word	0x0800b347
 800b1d0:	0800b317 	.word	0x0800b317
 800b1d4:	0800b31d 	.word	0x0800b31d
 800b1d8:	0800b347 	.word	0x0800b347
 800b1dc:	0800b323 	.word	0x0800b323
 800b1e0:	0800b333 	.word	0x0800b333
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU433_RX_MIN_DATARATE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	61bb      	str	r3, [r7, #24]
            break;
 800b1e8:	e0ae      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU433_TX_MIN_DATARATE;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61bb      	str	r3, [r7, #24]
            break;
 800b1ee:	e0ab      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU433_DEFAULT_DATARATE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61bb      	str	r3, [r7, #24]
            break;
 800b1f4:	e0a8      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b1fc:	733b      	strb	r3, [r7, #12]
 800b1fe:	2307      	movs	r3, #7
 800b200:	737b      	strb	r3, [r7, #13]
 800b202:	2300      	movs	r3, #0
 800b204:	73bb      	strb	r3, [r7, #14]
 800b206:	2310      	movs	r3, #16
 800b208:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU433_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU433_TX_MIN_DATARATE,
                .NbChannels = EU433_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800b20a:	4b53      	ldr	r3, [pc, #332]	; (800b358 <RegionEU433GetPhyParam+0x278>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b212:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 800b214:	4b50      	ldr	r3, [pc, #320]	; (800b358 <RegionEU433GetPhyParam+0x278>)
 800b216:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b218:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800b21a:	f107 030c 	add.w	r3, r7, #12
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff fe5f 	bl	800aee2 <RegionCommonGetNextLowerTxDr>
 800b224:	4603      	mov	r3, r0
 800b226:	61bb      	str	r3, [r7, #24]
            break;
 800b228:	e08e      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU433_MAX_TX_POWER;
 800b22a:	2300      	movs	r3, #0
 800b22c:	61bb      	str	r3, [r7, #24]
            break;
 800b22e:	e08b      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU433_DEFAULT_TX_POWER;
 800b230:	2300      	movs	r3, #0
 800b232:	61bb      	str	r3, [r7, #24]
            break;
 800b234:	e088      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800b236:	2340      	movs	r3, #64	; 0x40
 800b238:	61bb      	str	r3, [r7, #24]
            break;
 800b23a:	e085      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800b23c:	2320      	movs	r3, #32
 800b23e:	61bb      	str	r3, [r7, #24]
            break;
 800b240:	e082      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b248:	461a      	mov	r2, r3
 800b24a:	4b44      	ldr	r3, [pc, #272]	; (800b35c <RegionEU433GetPhyParam+0x27c>)
 800b24c:	5c9b      	ldrb	r3, [r3, r2]
 800b24e:	61bb      	str	r3, [r7, #24]
            break;
 800b250:	e07a      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b258:	461a      	mov	r2, r3
 800b25a:	4b41      	ldr	r3, [pc, #260]	; (800b360 <RegionEU433GetPhyParam+0x280>)
 800b25c:	5c9b      	ldrb	r3, [r3, r2]
 800b25e:	61bb      	str	r3, [r7, #24]
            break;
 800b260:	e072      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 800b262:	2301      	movs	r3, #1
 800b264:	61bb      	str	r3, [r7, #24]
            break;
 800b266:	e06f      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU433_MAX_RX_WINDOW;
 800b268:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b26c:	61bb      	str	r3, [r7, #24]
            break;
 800b26e:	e06b      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800b270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b274:	61bb      	str	r3, [r7, #24]
            break;
 800b276:	e067      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800b278:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b27c:	61bb      	str	r3, [r7, #24]
            break;
 800b27e:	e063      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800b280:	f241 3388 	movw	r3, #5000	; 0x1388
 800b284:	61bb      	str	r3, [r7, #24]
            break;
 800b286:	e05f      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800b288:	f241 7370 	movw	r3, #6000	; 0x1770
 800b28c:	61bb      	str	r3, [r7, #24]
            break;
 800b28e:	e05b      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800b290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b294:	61bb      	str	r3, [r7, #24]
            break;
 800b296:	e057      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800b298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b29c:	4831      	ldr	r0, [pc, #196]	; (800b364 <RegionEU433GetPhyParam+0x284>)
 800b29e:	f000 fce3 	bl	800bc68 <randr>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b2a8:	61bb      	str	r3, [r7, #24]
            break;
 800b2aa:	e04d      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61bb      	str	r3, [r7, #24]
            break;
 800b2b0:	e04a      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU433_RX_WND_2_FREQ;
 800b2b2:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <RegionEU433GetPhyParam+0x288>)
 800b2b4:	61bb      	str	r3, [r7, #24]
            break;
 800b2b6:	e047      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU433_RX_WND_2_DR;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	61bb      	str	r3, [r7, #24]
            break;
 800b2bc:	e044      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800b2be:	4b26      	ldr	r3, [pc, #152]	; (800b358 <RegionEU433GetPhyParam+0x278>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800b2c6:	61bb      	str	r3, [r7, #24]
            break;
 800b2c8:	e03e      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800b2ca:	4b23      	ldr	r3, [pc, #140]	; (800b358 <RegionEU433GetPhyParam+0x278>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800b2d2:	61bb      	str	r3, [r7, #24]
            break;
 800b2d4:	e038      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 800b2d6:	2310      	movs	r3, #16
 800b2d8:	61bb      	str	r3, [r7, #24]
            break;
 800b2da:	e035      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 800b2dc:	4b1e      	ldr	r3, [pc, #120]	; (800b358 <RegionEU433GetPhyParam+0x278>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	61bb      	str	r3, [r7, #24]
            break;
 800b2e2:	e031      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU433_DEFAULT_UPLINK_DWELL_TIME;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61bb      	str	r3, [r7, #24]
            break;
 800b2e8:	e02e      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61bb      	str	r3, [r7, #24]
            break;
 800b2ee:	e02b      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 800b2f0:	4b1e      	ldr	r3, [pc, #120]	; (800b36c <RegionEU433GetPhyParam+0x28c>)
 800b2f2:	61bb      	str	r3, [r7, #24]
            break;
 800b2f4:	e028      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 800b2f6:	4b1e      	ldr	r3, [pc, #120]	; (800b370 <RegionEU433GetPhyParam+0x290>)
 800b2f8:	61bb      	str	r3, [r7, #24]
            break;
 800b2fa:	e025      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <RegionEU433GetPhyParam+0x288>)
 800b2fe:	61bb      	str	r3, [r7, #24]
            break;
 800b300:	e022      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 800b302:	2311      	movs	r3, #17
 800b304:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 800b306:	2302      	movs	r3, #2
 800b308:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU433_RFU2_SIZE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	76bb      	strb	r3, [r7, #26]
            break;
 800b30e:	e01b      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 800b310:	2303      	movs	r3, #3
 800b312:	61bb      	str	r3, [r7, #24]
            break;
 800b314:	e018      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU433_PING_SLOT_CHANNEL_FREQ;
 800b316:	4b14      	ldr	r3, [pc, #80]	; (800b368 <RegionEU433GetPhyParam+0x288>)
 800b318:	61bb      	str	r3, [r7, #24]
            break;
 800b31a:	e015      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 800b31c:	2303      	movs	r3, #3
 800b31e:	61bb      	str	r3, [r7, #24]
            break;
 800b320:	e012      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU433[getPhy->Datarate];
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b328:	461a      	mov	r2, r3
 800b32a:	4b12      	ldr	r3, [pc, #72]	; (800b374 <RegionEU433GetPhyParam+0x294>)
 800b32c:	5c9b      	ldrb	r3, [r3, r2]
 800b32e:	61bb      	str	r3, [r7, #24]
            break;
 800b330:	e00a      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU433 );
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b338:	490f      	ldr	r1, [pc, #60]	; (800b378 <RegionEU433GetPhyParam+0x298>)
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff fe24 	bl	800af88 <RegionCommonGetBandwidth>
 800b340:	4603      	mov	r3, r0
 800b342:	61bb      	str	r3, [r7, #24]
            break;
 800b344:	e000      	b.n	800b348 <RegionEU433GetPhyParam+0x268>
        }
        default:
        {
            break;
 800b346:	bf00      	nop
        }
    }

#endif /* REGION_EU433 */
    return phyParam;
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	61fb      	str	r3, [r7, #28]
 800b34c:	69fb      	ldr	r3, [r7, #28]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3720      	adds	r7, #32
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20001424 	.word	0x20001424
 800b35c:	0800fbe4 	.word	0x0800fbe4
 800b360:	0800fbec 	.word	0x0800fbec
 800b364:	fffffc18 	.word	0xfffffc18
 800b368:	19e87628 	.word	0x19e87628
 800b36c:	41426666 	.word	0x41426666
 800b370:	4009999a 	.word	0x4009999a
 800b374:	0800fbbc 	.word	0x0800fbbc
 800b378:	0800fbc4 	.word	0x0800fbc4

0800b37c <RegionEU433InitDefaults>:
#endif /* REGION_VERSION */
#endif /* REGION_EU433 */
}

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b092      	sub	sp, #72	; 0x48
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU433 )
    Band_t bands[EU433_MAX_NB_BANDS] =
 800b384:	2364      	movs	r3, #100	; 0x64
 800b386:	863b      	strh	r3, [r7, #48]	; 0x30
 800b388:	2300      	movs	r3, #0
 800b38a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b38e:	2300      	movs	r3, #0
 800b390:	637b      	str	r3, [r7, #52]	; 0x34
 800b392:	2300      	movs	r3, #0
 800b394:	63bb      	str	r3, [r7, #56]	; 0x38
 800b396:	2300      	movs	r3, #0
 800b398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b39a:	2300      	movs	r3, #0
 800b39c:	643b      	str	r3, [r7, #64]	; 0x40
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    {
        EU433_BAND0
    };

    switch( params->Type )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	7a1b      	ldrb	r3, [r3, #8]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d05e      	beq.n	800b46a <RegionEU433InitDefaults+0xee>
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	dc6b      	bgt.n	800b488 <RegionEU433InitDefaults+0x10c>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <RegionEU433InitDefaults+0x3e>
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d03f      	beq.n	800b438 <RegionEU433InitDefaults+0xbc>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 800b3b8:	e066      	b.n	800b488 <RegionEU433InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d063      	beq.n	800b48a <RegionEU433InitDefaults+0x10e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d05f      	beq.n	800b48a <RegionEU433InitDefaults+0x10e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a30      	ldr	r2, [pc, #192]	; (800b490 <RegionEU433InitDefaults+0x114>)
 800b3d0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	4a2f      	ldr	r2, [pc, #188]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b3d8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 800b3da:	4b2d      	ldr	r3, [pc, #180]	; (800b490 <RegionEU433InitDefaults+0x114>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b3e4:	2218      	movs	r2, #24
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	f000 fc55 	bl	800bc96 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU433_LC1;
 800b3ec:	4b29      	ldr	r3, [pc, #164]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a29      	ldr	r2, [pc, #164]	; (800b498 <RegionEU433InitDefaults+0x11c>)
 800b3f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b3f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU433_LC2;
 800b3f8:	4b26      	ldr	r3, [pc, #152]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a27      	ldr	r2, [pc, #156]	; (800b49c <RegionEU433InitDefaults+0x120>)
 800b3fe:	330c      	adds	r3, #12
 800b400:	ca07      	ldmia	r2, {r0, r1, r2}
 800b402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU433_LC3;
 800b406:	4b23      	ldr	r3, [pc, #140]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a25      	ldr	r2, [pc, #148]	; (800b4a0 <RegionEU433InitDefaults+0x124>)
 800b40c:	3318      	adds	r3, #24
 800b40e:	ca07      	ldmia	r2, {r0, r1, r2}
 800b410:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800b414:	4b1f      	ldr	r3, [pc, #124]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2207      	movs	r2, #7
 800b41a:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b41e:	4b1d      	ldr	r3, [pc, #116]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800b426:	4b1b      	ldr	r3, [pc, #108]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800b42e:	2201      	movs	r2, #1
 800b430:	4619      	mov	r1, r3
 800b432:	f7ff fa11 	bl	800a858 <RegionCommonChanMaskCopy>
 800b436:	e028      	b.n	800b48a <RegionEU433InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800b438:	4b16      	ldr	r3, [pc, #88]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2200      	movs	r2, #0
 800b43e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800b440:	4b14      	ldr	r3, [pc, #80]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2200      	movs	r2, #0
 800b446:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800b448:	4b12      	ldr	r3, [pc, #72]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2200      	movs	r2, #0
 800b44e:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b450:	4b10      	ldr	r3, [pc, #64]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800b458:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800b460:	2201      	movs	r2, #1
 800b462:	4619      	mov	r1, r3
 800b464:	f7ff f9f8 	bl	800a858 <RegionCommonChanMaskCopy>
            break;
 800b468:	e00f      	b.n	800b48a <RegionEU433InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800b472:	4b08      	ldr	r3, [pc, #32]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800b47a:	4b06      	ldr	r3, [pc, #24]	; (800b494 <RegionEU433InitDefaults+0x118>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	b292      	uxth	r2, r2
 800b482:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800b486:	e000      	b.n	800b48a <RegionEU433InitDefaults+0x10e>
            break;
 800b488:	bf00      	nop
        }
    }
#endif /* REGION_EU433 */
}
 800b48a:	3748      	adds	r7, #72	; 0x48
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20001420 	.word	0x20001420
 800b494:	20001424 	.word	0x20001424
 800b498:	0800f7b4 	.word	0x0800f7b4
 800b49c:	0800f7c0 	.word	0x0800f7c0
 800b4a0:	0800f7cc 	.word	0x0800f7cc

0800b4a4 <RegionEU433Verify>:

bool RegionEU433Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU433 )
    switch( phyAttribute )
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	2b0f      	cmp	r3, #15
 800b4b4:	d867      	bhi.n	800b586 <RegionEU433Verify+0xe2>
 800b4b6:	a201      	add	r2, pc, #4	; (adr r2, 800b4bc <RegionEU433Verify+0x18>)
 800b4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4bc:	0800b4fd 	.word	0x0800b4fd
 800b4c0:	0800b587 	.word	0x0800b587
 800b4c4:	0800b587 	.word	0x0800b587
 800b4c8:	0800b587 	.word	0x0800b587
 800b4cc:	0800b587 	.word	0x0800b587
 800b4d0:	0800b50b 	.word	0x0800b50b
 800b4d4:	0800b529 	.word	0x0800b529
 800b4d8:	0800b547 	.word	0x0800b547
 800b4dc:	0800b587 	.word	0x0800b587
 800b4e0:	0800b565 	.word	0x0800b565
 800b4e4:	0800b565 	.word	0x0800b565
 800b4e8:	0800b587 	.word	0x0800b587
 800b4ec:	0800b587 	.word	0x0800b587
 800b4f0:	0800b587 	.word	0x0800b587
 800b4f4:	0800b587 	.word	0x0800b587
 800b4f8:	0800b583 	.word	0x0800b583
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff fd77 	bl	800aff4 <VerifyRfFreq>
 800b506:	4603      	mov	r3, r0
 800b508:	e03e      	b.n	800b588 <RegionEU433Verify+0xe4>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f993 3000 	ldrsb.w	r3, [r3]
 800b510:	2207      	movs	r2, #7
 800b512:	2100      	movs	r1, #0
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff f956 	bl	800a7c6 <RegionCommonValueInRange>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bf14      	ite	ne
 800b520:	2301      	movne	r3, #1
 800b522:	2300      	moveq	r3, #0
 800b524:	b2db      	uxtb	r3, r3
 800b526:	e02f      	b.n	800b588 <RegionEU433Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f993 3000 	ldrsb.w	r3, [r3]
 800b52e:	2205      	movs	r2, #5
 800b530:	2100      	movs	r1, #0
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff f947 	bl	800a7c6 <RegionCommonValueInRange>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bf14      	ite	ne
 800b53e:	2301      	movne	r3, #1
 800b540:	2300      	moveq	r3, #0
 800b542:	b2db      	uxtb	r3, r3
 800b544:	e020      	b.n	800b588 <RegionEU433Verify+0xe4>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE );
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f993 3000 	ldrsb.w	r3, [r3]
 800b54c:	2207      	movs	r2, #7
 800b54e:	2100      	movs	r1, #0
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff f938 	bl	800a7c6 <RegionCommonValueInRange>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bf14      	ite	ne
 800b55c:	2301      	movne	r3, #1
 800b55e:	2300      	moveq	r3, #0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	e011      	b.n	800b588 <RegionEU433Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER );
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f993 3000 	ldrsb.w	r3, [r3]
 800b56a:	2205      	movs	r2, #5
 800b56c:	2100      	movs	r1, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff f929 	bl	800a7c6 <RegionCommonValueInRange>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	bf14      	ite	ne
 800b57a:	2301      	movne	r3, #1
 800b57c:	2300      	moveq	r3, #0
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	e002      	b.n	800b588 <RegionEU433Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU433_DUTY_CYCLE_ENABLED;
 800b582:	2301      	movs	r3, #1
 800b584:	e000      	b.n	800b588 <RegionEU433Verify+0xe4>
        }
        default:
            return false;
 800b586:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU433 */
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <RegionEU433ChanMaskSet>:
    }
#endif /* REGION_EU433 */
}

bool RegionEU433ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU433 )
    switch( chanMaskSet->ChannelsMaskType )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	791b      	ldrb	r3, [r3, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <RegionEU433ChanMaskSet+0x16>
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d00b      	beq.n	800b5bc <RegionEU433ChanMaskSet+0x2c>
 800b5a4:	e015      	b.n	800b5d2 <RegionEU433ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b5a6:	4b0e      	ldr	r3, [pc, #56]	; (800b5e0 <RegionEU433ChanMaskSet+0x50>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	f7ff f94f 	bl	800a858 <RegionCommonChanMaskCopy>
            break;
 800b5ba:	e00c      	b.n	800b5d6 <RegionEU433ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b5bc:	4b08      	ldr	r3, [pc, #32]	; (800b5e0 <RegionEU433ChanMaskSet+0x50>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	f7ff f944 	bl	800a858 <RegionCommonChanMaskCopy>
            break;
 800b5d0:	e001      	b.n	800b5d6 <RegionEU433ChanMaskSet+0x46>
        }
        default:
            return false;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e000      	b.n	800b5d8 <RegionEU433ChanMaskSet+0x48>
    }
    return true;
 800b5d6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20001424 	.word	0x20001424

0800b5e4 <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	60ba      	str	r2, [r7, #8]
 800b5ec:	607b      	str	r3, [r7, #4]
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU433 )
    uint32_t tSymbolInUs = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 800b5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fe:	2b07      	cmp	r3, #7
 800b600:	bfa8      	it	ge
 800b602:	2307      	movge	r3, #7
 800b604:	b25a      	sxtb	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU433 );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b610:	491e      	ldr	r1, [pc, #120]	; (800b68c <RegionEU433ComputeRxWindowParameters+0xa8>)
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff fcb8 	bl	800af88 <RegionCommonGetBandwidth>
 800b618:	4603      	mov	r3, r0
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b626:	2b07      	cmp	r3, #7
 800b628:	d10a      	bne.n	800b640 <RegionEU433ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b630:	461a      	mov	r2, r3
 800b632:	4b17      	ldr	r3, [pc, #92]	; (800b690 <RegionEU433ComputeRxWindowParameters+0xac>)
 800b634:	5c9b      	ldrb	r3, [r3, r2]
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fa3a 	bl	800aab0 <RegionCommonComputeSymbolTimeFsk>
 800b63c:	6178      	str	r0, [r7, #20]
 800b63e:	e011      	b.n	800b664 <RegionEU433ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b646:	461a      	mov	r2, r3
 800b648:	4b11      	ldr	r3, [pc, #68]	; (800b690 <RegionEU433ComputeRxWindowParameters+0xac>)
 800b64a:	5c9a      	ldrb	r2, [r3, r2]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b652:	4619      	mov	r1, r3
 800b654:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <RegionEU433ComputeRxWindowParameters+0xa8>)
 800b656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b65a:	4619      	mov	r1, r3
 800b65c:	4610      	mov	r0, r2
 800b65e:	f7ff fa11 	bl	800aa84 <RegionCommonComputeSymbolTimeLoRa>
 800b662:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b664:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <RegionEU433ComputeRxWindowParameters+0xb0>)
 800b666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b668:	4798      	blx	r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3308      	adds	r3, #8
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	320c      	adds	r2, #12
 800b672:	7bb9      	ldrb	r1, [r7, #14]
 800b674:	9201      	str	r2, [sp, #4]
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	4603      	mov	r3, r0
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	6978      	ldr	r0, [r7, #20]
 800b67e:	f7ff fa27 	bl	800aad0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU433 */
}
 800b682:	bf00      	nop
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	0800fbc4 	.word	0x0800fbc4
 800b690:	0800fbbc 	.word	0x0800fbbc
 800b694:	0800fbf4 	.word	0x0800fbf4

0800b698 <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b698:	b5b0      	push	{r4, r5, r7, lr}
 800b69a:	b090      	sub	sp, #64	; 0x40
 800b69c:	af0a      	add	r7, sp, #40	; 0x28
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	785b      	ldrb	r3, [r3, #1]
 800b6a6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800b6b6:	4b5a      	ldr	r3, [pc, #360]	; (800b820 <RegionEU433RxConfig+0x188>)
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	4798      	blx	r3
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <RegionEU433RxConfig+0x2e>
    {
        return false;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e0a8      	b.n	800b818 <RegionEU433RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	7cdb      	ldrb	r3, [r3, #19]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d126      	bne.n	800b71c <RegionEU433RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800b6ce:	4b55      	ldr	r3, [pc, #340]	; (800b824 <RegionEU433RxConfig+0x18c>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	460b      	mov	r3, r1
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	440b      	add	r3, r1
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800b6e6:	4b4f      	ldr	r3, [pc, #316]	; (800b824 <RegionEU433RxConfig+0x18c>)
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	440b      	add	r3, r1
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4413      	add	r3, r2
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00c      	beq.n	800b71c <RegionEU433RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 800b702:	4b48      	ldr	r3, [pc, #288]	; (800b824 <RegionEU433RxConfig+0x18c>)
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	4619      	mov	r1, r3
 800b70c:	460b      	mov	r3, r1
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	440b      	add	r3, r1
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4413      	add	r3, r2
 800b716:	3304      	adds	r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 800b71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b720:	4a41      	ldr	r2, [pc, #260]	; (800b828 <RegionEU433RxConfig+0x190>)
 800b722:	5cd3      	ldrb	r3, [r2, r3]
 800b724:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 800b726:	4b3e      	ldr	r3, [pc, #248]	; (800b820 <RegionEU433RxConfig+0x188>)
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	6938      	ldr	r0, [r7, #16]
 800b72c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800b72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b732:	2b07      	cmp	r3, #7
 800b734:	d128      	bne.n	800b788 <RegionEU433RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800b73a:	4b39      	ldr	r3, [pc, #228]	; (800b820 <RegionEU433RxConfig+0x188>)
 800b73c:	699c      	ldr	r4, [r3, #24]
 800b73e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b746:	fb02 f303 	mul.w	r3, r2, r3
 800b74a:	4619      	mov	r1, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	b29b      	uxth	r3, r3
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	7c92      	ldrb	r2, [r2, #18]
 800b756:	7df8      	ldrb	r0, [r7, #23]
 800b758:	9209      	str	r2, [sp, #36]	; 0x24
 800b75a:	2200      	movs	r2, #0
 800b75c:	9208      	str	r2, [sp, #32]
 800b75e:	2200      	movs	r2, #0
 800b760:	9207      	str	r2, [sp, #28]
 800b762:	2200      	movs	r2, #0
 800b764:	9206      	str	r2, [sp, #24]
 800b766:	2201      	movs	r2, #1
 800b768:	9205      	str	r2, [sp, #20]
 800b76a:	2200      	movs	r2, #0
 800b76c:	9204      	str	r2, [sp, #16]
 800b76e:	2200      	movs	r2, #0
 800b770:	9203      	str	r2, [sp, #12]
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	2305      	movs	r3, #5
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	4b2c      	ldr	r3, [pc, #176]	; (800b82c <RegionEU433RxConfig+0x194>)
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	2300      	movs	r3, #0
 800b77e:	460a      	mov	r2, r1
 800b780:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b784:	47a0      	blx	r4
 800b786:	e024      	b.n	800b7d2 <RegionEU433RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 800b788:	2301      	movs	r3, #1
 800b78a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b78c:	4b24      	ldr	r3, [pc, #144]	; (800b820 <RegionEU433RxConfig+0x188>)
 800b78e:	699c      	ldr	r4, [r3, #24]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	789b      	ldrb	r3, [r3, #2]
 800b794:	461d      	mov	r5, r3
 800b796:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	7c92      	ldrb	r2, [r2, #18]
 800b7a4:	7df8      	ldrb	r0, [r7, #23]
 800b7a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	9208      	str	r2, [sp, #32]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	9207      	str	r2, [sp, #28]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	9206      	str	r2, [sp, #24]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	9205      	str	r2, [sp, #20]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	9204      	str	r2, [sp, #16]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	9203      	str	r2, [sp, #12]
 800b7c0:	9302      	str	r3, [sp, #8]
 800b7c2:	2308      	movs	r3, #8
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	460a      	mov	r2, r1
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7c5b      	ldrb	r3, [r3, #17]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d005      	beq.n	800b7e6 <RegionEU433RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 800b7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7de:	4a14      	ldr	r2, [pc, #80]	; (800b830 <RegionEU433RxConfig+0x198>)
 800b7e0:	5cd3      	ldrb	r3, [r2, r3]
 800b7e2:	75bb      	strb	r3, [r7, #22]
 800b7e4:	e004      	b.n	800b7f0 <RegionEU433RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 800b7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ea:	4a12      	ldr	r2, [pc, #72]	; (800b834 <RegionEU433RxConfig+0x19c>)
 800b7ec:	5cd3      	ldrb	r3, [r2, r3]
 800b7ee:	75bb      	strb	r3, [r7, #22]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800b7f0:	4b0b      	ldr	r3, [pc, #44]	; (800b820 <RegionEU433RxConfig+0x188>)
 800b7f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f4:	7dba      	ldrb	r2, [r7, #22]
 800b7f6:	320d      	adds	r2, #13
 800b7f8:	b2d1      	uxtb	r1, r2
 800b7fa:	7dfa      	ldrb	r2, [r7, #23]
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	7cdb      	ldrb	r3, [r3, #19]
 800b804:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b808:	6939      	ldr	r1, [r7, #16]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fbda 	bl	800afc4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	7bfa      	ldrb	r2, [r7, #15]
 800b814:	701a      	strb	r2, [r3, #0]
    return true;
 800b816:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bdb0      	pop	{r4, r5, r7, pc}
 800b820:	0800fbf4 	.word	0x0800fbf4
 800b824:	20001424 	.word	0x20001424
 800b828:	0800fbbc 	.word	0x0800fbbc
 800b82c:	00014585 	.word	0x00014585
 800b830:	0800fbec 	.word	0x0800fbec
 800b834:	0800fbe4 	.word	0x0800fbe4

0800b838 <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b093      	sub	sp, #76	; 0x4c
 800b83c:	af0a      	add	r7, sp, #40	; 0x28
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b84a:	461a      	mov	r2, r3
 800b84c:	4b5d      	ldr	r3, [pc, #372]	; (800b9c4 <RegionEU433TxConfig+0x18c>)
 800b84e:	5c9b      	ldrb	r3, [r3, r2]
 800b850:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800b858:	4b5b      	ldr	r3, [pc, #364]	; (800b9c8 <RegionEU433TxConfig+0x190>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	4b5b      	ldr	r3, [pc, #364]	; (800b9cc <RegionEU433TxConfig+0x194>)
 800b85e:	6819      	ldr	r1, [r3, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	461c      	mov	r4, r3
 800b866:	4623      	mov	r3, r4
 800b868:	005b      	lsls	r3, r3, #1
 800b86a:	4423      	add	r3, r4
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	440b      	add	r3, r1
 800b870:	3309      	adds	r3, #9
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	4619      	mov	r1, r3
 800b876:	460b      	mov	r3, r1
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	440b      	add	r3, r1
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	4413      	add	r3, r2
 800b880:	3302      	adds	r3, #2
 800b882:	f993 3000 	ldrsb.w	r3, [r3]
 800b886:	4619      	mov	r1, r3
 800b888:	f7ff fb69 	bl	800af5e <RegionCommonLimitTxPower>
 800b88c:	4603      	mov	r3, r0
 800b88e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU433 );
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b896:	494e      	ldr	r1, [pc, #312]	; (800b9d0 <RegionEU433TxConfig+0x198>)
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff fb75 	bl	800af88 <RegionCommonGetBandwidth>
 800b89e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6859      	ldr	r1, [r3, #4]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	689a      	ldr	r2, [r3, #8]
 800b8ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7ff f9c5 	bl	800ac40 <RegionCommonComputeTxPower>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b8ba:	4b46      	ldr	r3, [pc, #280]	; (800b9d4 <RegionEU433TxConfig+0x19c>)
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	4b43      	ldr	r3, [pc, #268]	; (800b9cc <RegionEU433TxConfig+0x194>)
 800b8c0:	6819      	ldr	r1, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	4403      	add	r3, r0
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	440b      	add	r3, r1
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b8de:	2b07      	cmp	r3, #7
 800b8e0:	d124      	bne.n	800b92c <RegionEU433TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b8e6:	4b3b      	ldr	r3, [pc, #236]	; (800b9d4 <RegionEU433TxConfig+0x19c>)
 800b8e8:	69dc      	ldr	r4, [r3, #28]
 800b8ea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b8ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8f2:	fb02 f303 	mul.w	r3, r2, r3
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800b8fc:	7ff8      	ldrb	r0, [r7, #31]
 800b8fe:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b902:	9308      	str	r3, [sp, #32]
 800b904:	2300      	movs	r3, #0
 800b906:	9307      	str	r3, [sp, #28]
 800b908:	2300      	movs	r3, #0
 800b90a:	9306      	str	r3, [sp, #24]
 800b90c:	2300      	movs	r3, #0
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	2301      	movs	r3, #1
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	2300      	movs	r3, #0
 800b916:	9303      	str	r3, [sp, #12]
 800b918:	2305      	movs	r3, #5
 800b91a:	9302      	str	r3, [sp, #8]
 800b91c:	2300      	movs	r3, #0
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	9200      	str	r2, [sp, #0]
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b928:	47a0      	blx	r4
 800b92a:	e01d      	b.n	800b968 <RegionEU433TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 800b92c:	2301      	movs	r3, #1
 800b92e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b930:	4b28      	ldr	r3, [pc, #160]	; (800b9d4 <RegionEU433TxConfig+0x19c>)
 800b932:	69dc      	ldr	r4, [r3, #28]
 800b934:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b938:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800b93c:	7ff8      	ldrb	r0, [r7, #31]
 800b93e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b942:	9208      	str	r2, [sp, #32]
 800b944:	2200      	movs	r2, #0
 800b946:	9207      	str	r2, [sp, #28]
 800b948:	2200      	movs	r2, #0
 800b94a:	9206      	str	r2, [sp, #24]
 800b94c:	2200      	movs	r2, #0
 800b94e:	9205      	str	r2, [sp, #20]
 800b950:	2201      	movs	r2, #1
 800b952:	9204      	str	r2, [sp, #16]
 800b954:	2200      	movs	r2, #0
 800b956:	9203      	str	r2, [sp, #12]
 800b958:	2208      	movs	r2, #8
 800b95a:	9202      	str	r2, [sp, #8]
 800b95c:	2201      	movs	r2, #1
 800b95e:	9201      	str	r2, [sp, #4]
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	2200      	movs	r2, #0
 800b966:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800b968:	4b18      	ldr	r3, [pc, #96]	; (800b9cc <RegionEU433TxConfig+0x194>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	4619      	mov	r1, r3
 800b972:	460b      	mov	r3, r1
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	440b      	add	r3, r1
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b984:	4619      	mov	r1, r3
 800b986:	4610      	mov	r0, r2
 800b988:	f7ff fb29 	bl	800afde <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	899b      	ldrh	r3, [r3, #12]
 800b996:	4619      	mov	r1, r3
 800b998:	4610      	mov	r0, r2
 800b99a:	f7ff fb51 	bl	800b040 <GetTimeOnAir>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800b9a4:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <RegionEU433TxConfig+0x19c>)
 800b9a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	8992      	ldrh	r2, [r2, #12]
 800b9ac:	b2d1      	uxtb	r1, r2
 800b9ae:	7ffa      	ldrb	r2, [r7, #31]
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3

    *txPower = txPowerLimited;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	7f7a      	ldrb	r2, [r7, #29]
 800b9b8:	701a      	strb	r2, [r3, #0]
    return true;
 800b9ba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3724      	adds	r7, #36	; 0x24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd90      	pop	{r4, r7, pc}
 800b9c4:	0800fbbc 	.word	0x0800fbbc
 800b9c8:	20001420 	.word	0x20001420
 800b9cc:	20001424 	.word	0x20001424
 800b9d0:	0800fbc4 	.word	0x0800fbc4
 800b9d4:	0800fbf4 	.word	0x0800fbf4

0800b9d8 <RegionEU433AlternateDr>:
#endif /* REGION_EU433 */
    return status;
}

int8_t RegionEU433AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	460a      	mov	r2, r1
 800b9e2:	71fb      	strb	r3, [r7, #7]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU433 )
    return currentDr;
 800b9e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU433 */
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bc80      	pop	{r7}
 800b9f4:	4770      	bx	lr
	...

0800b9f8 <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b09a      	sub	sp, #104	; 0x68
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU433 )
    uint8_t nbEnabledChannels = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 800ba12:	2300      	movs	r3, #0
 800ba14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	605a      	str	r2, [r3, #4]
 800ba20:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800ba22:	230c      	movs	r3, #12
 800ba24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU433_JOIN_CHANNELS;
 800ba28:	2307      	movs	r3, #7
 800ba2a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800ba2c:	4b47      	ldr	r3, [pc, #284]	; (800bb4c <RegionEU433NextChannel+0x154>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ba34:	2201      	movs	r2, #1
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fe fee1 	bl	800a800 <RegionCommonCountChannels>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10a      	bne.n	800ba5a <RegionEU433NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ba44:	4b41      	ldr	r3, [pc, #260]	; (800bb4c <RegionEU433NextChannel+0x154>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800ba4c:	4b3f      	ldr	r3, [pc, #252]	; (800bb4c <RegionEU433NextChannel+0x154>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f042 0207 	orr.w	r2, r2, #7
 800ba54:	b292      	uxth	r2, r2
 800ba56:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	7a5b      	ldrb	r3, [r3, #9]
 800ba5e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ba6a:	4b38      	ldr	r3, [pc, #224]	; (800bb4c <RegionEU433NextChannel+0x154>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ba72:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800ba74:	4b35      	ldr	r3, [pc, #212]	; (800bb4c <RegionEU433NextChannel+0x154>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800ba7a:	4b35      	ldr	r3, [pc, #212]	; (800bb50 <RegionEU433NextChannel+0x158>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU433_MAX_NB_CHANNELS;
 800ba80:	2310      	movs	r3, #16
 800ba82:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 800ba84:	f107 0312 	add.w	r3, r7, #18
 800ba88:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	7a9b      	ldrb	r3, [r3, #10]
 800ba9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU433_MAX_NB_BANDS;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800baaa:	320c      	adds	r2, #12
 800baac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bab0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	7d1b      	ldrb	r3, [r3, #20]
 800bab8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	8adb      	ldrh	r3, [r3, #22]
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7ff fab9 	bl	800b040 <GetTimeOnAir>
 800bace:	4603      	mov	r3, r0
 800bad0:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800bad2:	f107 0314 	add.w	r3, r7, #20
 800bad6:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800bad8:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 800badc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800bae0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	460b      	mov	r3, r1
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	f7ff f994 	bl	800ae1e <RegionCommonIdentifyChannels>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800bafc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10e      	bne.n	800bb22 <RegionEU433NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800bb04:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	f000 f8ab 	bl	800bc68 <randr>
 800bb12:	4603      	mov	r3, r0
 800bb14:	3360      	adds	r3, #96	; 0x60
 800bb16:	443b      	add	r3, r7
 800bb18:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	701a      	strb	r2, [r3, #0]
 800bb20:	e00e      	b.n	800bb40 <RegionEU433NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800bb22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb26:	2b0c      	cmp	r3, #12
 800bb28:	d10a      	bne.n	800bb40 <RegionEU433NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800bb2a:	4b08      	ldr	r3, [pc, #32]	; (800bb4c <RegionEU433NextChannel+0x154>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800bb32:	4b06      	ldr	r3, [pc, #24]	; (800bb4c <RegionEU433NextChannel+0x154>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f042 0207 	orr.w	r2, r2, #7
 800bb3a:	b292      	uxth	r2, r2
 800bb3c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 800bb40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3760      	adds	r7, #96	; 0x60
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20001424 	.word	0x20001424
 800bb50:	20001420 	.word	0x20001420

0800bb54 <RegionEU433SetContinuousWave>:
#endif /* REGION_EU433 */
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU433SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800bb54:	b590      	push	{r4, r7, lr}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU433 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800bb62:	4b20      	ldr	r3, [pc, #128]	; (800bbe4 <RegionEU433SetContinuousWave+0x90>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b20      	ldr	r3, [pc, #128]	; (800bbe8 <RegionEU433SetContinuousWave+0x94>)
 800bb68:	6819      	ldr	r1, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	461c      	mov	r4, r3
 800bb70:	4623      	mov	r3, r4
 800bb72:	005b      	lsls	r3, r3, #1
 800bb74:	4423      	add	r3, r4
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	440b      	add	r3, r1
 800bb7a:	3309      	adds	r3, #9
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	460b      	mov	r3, r1
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	440b      	add	r3, r1
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	4413      	add	r3, r2
 800bb8a:	3302      	adds	r3, #2
 800bb8c:	f993 3000 	ldrsb.w	r3, [r3]
 800bb90:	4619      	mov	r1, r3
 800bb92:	f7ff f9e4 	bl	800af5e <RegionCommonLimitTxPower>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800bb9e:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <RegionEU433SetContinuousWave+0x94>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	4619      	mov	r1, r3
 800bba8:	460b      	mov	r3, r1
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	440b      	add	r3, r1
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6859      	ldr	r1, [r3, #4]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	689a      	ldr	r2, [r3, #8]
 800bbbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff f83c 	bl	800ac40 <RegionCommonComputeTxPower>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800bbcc:	4b07      	ldr	r3, [pc, #28]	; (800bbec <RegionEU433SetContinuousWave+0x98>)
 800bbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	8992      	ldrh	r2, [r2, #12]
 800bbd4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800bbd8:	68b8      	ldr	r0, [r7, #8]
 800bbda:	4798      	blx	r3
#endif /* REGION_EU433 */
}
 800bbdc:	bf00      	nop
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd90      	pop	{r4, r7, pc}
 800bbe4:	20001420 	.word	0x20001420
 800bbe8:	20001424 	.word	0x20001424
 800bbec:	0800fbf4 	.word	0x0800fbf4

0800bbf0 <RegionEU433ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	71fb      	strb	r3, [r7, #7]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	71bb      	strb	r3, [r7, #6]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU433 )
    int8_t datarate = dr - drOffset;
 800bc02:	79ba      	ldrb	r2, [r7, #6]
 800bc04:	797b      	ldrb	r3, [r7, #5]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 800bc0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da01      	bge.n	800bc18 <RegionEU433ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU433 */
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bc80      	pop	{r7}
 800bc22:	4770      	bx	lr

0800bc24 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800bc28:	4b0d      	ldr	r3, [pc, #52]	; (800bc60 <rand1+0x3c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a0d      	ldr	r2, [pc, #52]	; (800bc64 <rand1+0x40>)
 800bc2e:	fb02 f303 	mul.w	r3, r2, r3
 800bc32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800bc36:	3339      	adds	r3, #57	; 0x39
 800bc38:	4a09      	ldr	r2, [pc, #36]	; (800bc60 <rand1+0x3c>)
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	4b08      	ldr	r3, [pc, #32]	; (800bc60 <rand1+0x3c>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	2303      	movs	r3, #3
 800bc42:	fba3 1302 	umull	r1, r3, r3, r2
 800bc46:	1ad1      	subs	r1, r2, r3
 800bc48:	0849      	lsrs	r1, r1, #1
 800bc4a:	440b      	add	r3, r1
 800bc4c:	0f99      	lsrs	r1, r3, #30
 800bc4e:	460b      	mov	r3, r1
 800bc50:	07db      	lsls	r3, r3, #31
 800bc52:	1a5b      	subs	r3, r3, r1
 800bc54:	1ad1      	subs	r1, r2, r3
 800bc56:	460b      	mov	r3, r1
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bc80      	pop	{r7}
 800bc5e:	4770      	bx	lr
 800bc60:	20000264 	.word	0x20000264
 800bc64:	41c64e6d 	.word	0x41c64e6d

0800bc68 <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800bc72:	f7ff ffd7 	bl	800bc24 <rand1>
 800bc76:	4602      	mov	r2, r0
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	1acb      	subs	r3, r1, r3
 800bc7e:	3301      	adds	r3, #1
 800bc80:	fb92 f1f3 	sdiv	r1, r2, r3
 800bc84:	fb01 f303 	mul.w	r3, r1, r3
 800bc88:	1ad2      	subs	r2, r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4413      	add	r3, r2
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	4613      	mov	r3, r2
 800bca2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800bca4:	e007      	b.n	800bcb6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	1c53      	adds	r3, r2, #1
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	1c59      	adds	r1, r3, #1
 800bcb0:	60f9      	str	r1, [r7, #12]
 800bcb2:	7812      	ldrb	r2, [r2, #0]
 800bcb4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	1e5a      	subs	r2, r3, #1
 800bcba:	80fa      	strh	r2, [r7, #6]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1f2      	bne.n	800bca6 <memcpy1+0x10>
    }
}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bc80      	pop	{r7}
 800bcca:	4770      	bx	lr

0800bccc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 800bcda:	88fb      	ldrh	r3, [r7, #6]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4413      	add	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 800bce4:	e007      	b.n	800bcf6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	1c53      	adds	r3, r2, #1
 800bcea:	60bb      	str	r3, [r7, #8]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	1e59      	subs	r1, r3, #1
 800bcf0:	60f9      	str	r1, [r7, #12]
 800bcf2:	7812      	ldrb	r2, [r2, #0]
 800bcf4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800bcf6:	88fb      	ldrh	r3, [r7, #6]
 800bcf8:	1e5a      	subs	r2, r3, #1
 800bcfa:	80fa      	strh	r2, [r7, #6]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1f2      	bne.n	800bce6 <memcpyr+0x1a>
    }
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bc80      	pop	{r7}
 800bd0a:	4770      	bx	lr

0800bd0c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70fb      	strb	r3, [r7, #3]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 800bd1c:	e004      	b.n	800bd28 <memset1+0x1c>
    {
        *dst++ = value;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	1c5a      	adds	r2, r3, #1
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	78fa      	ldrb	r2, [r7, #3]
 800bd26:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800bd28:	883b      	ldrh	r3, [r7, #0]
 800bd2a:	1e5a      	subs	r2, r3, #1
 800bd2c:	803a      	strh	r2, [r7, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1f5      	bne.n	800bd1e <memset1+0x12>
    }
}
 800bd32:	bf00      	nop
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bc80      	pop	{r7}
 800bd3c:	4770      	bx	lr
	...

0800bd40 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800bd48:	4a24      	ldr	r2, [pc, #144]	; (800bddc <RadioInit+0x9c>)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800bd4e:	4b24      	ldr	r3, [pc, #144]	; (800bde0 <RadioInit+0xa0>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800bd54:	4b22      	ldr	r3, [pc, #136]	; (800bde0 <RadioInit+0xa0>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800bd5a:	4b21      	ldr	r3, [pc, #132]	; (800bde0 <RadioInit+0xa0>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800bd60:	4b1f      	ldr	r3, [pc, #124]	; (800bde0 <RadioInit+0xa0>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800bd66:	481f      	ldr	r0, [pc, #124]	; (800bde4 <RadioInit+0xa4>)
 800bd68:	f001 ff86 	bl	800dc78 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800bd6c:	4b1c      	ldr	r3, [pc, #112]	; (800bde0 <RadioInit+0xa0>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800bd72:	4b1b      	ldr	r3, [pc, #108]	; (800bde0 <RadioInit+0xa0>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800bd78:	f002 fa1a 	bl	800e1b0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	2000      	movs	r0, #0
 800bd80:	f002 fde6 	bl	800e950 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800bd84:	2204      	movs	r2, #4
 800bd86:	2100      	movs	r1, #0
 800bd88:	2001      	movs	r0, #1
 800bd8a:	f002 fba3 	bl	800e4d4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800bd8e:	2300      	movs	r3, #0
 800bd90:	2200      	movs	r2, #0
 800bd92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bd96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bd9a:	f002 fad3 	bl	800e344 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800bd9e:	f000 fe91 	bl	800cac4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800bda2:	2300      	movs	r3, #0
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4b10      	ldr	r3, [pc, #64]	; (800bde8 <RadioInit+0xa8>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f04f 31ff 	mov.w	r1, #4294967295
 800bdae:	480f      	ldr	r0, [pc, #60]	; (800bdec <RadioInit+0xac>)
 800bdb0:	f003 fa3a 	bl	800f228 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <RadioInit+0xb0>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f04f 31ff 	mov.w	r1, #4294967295
 800bdc0:	480c      	ldr	r0, [pc, #48]	; (800bdf4 <RadioInit+0xb4>)
 800bdc2:	f003 fa31 	bl	800f228 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800bdc6:	4809      	ldr	r0, [pc, #36]	; (800bdec <RadioInit+0xac>)
 800bdc8:	f003 fad2 	bl	800f370 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800bdcc:	4809      	ldr	r0, [pc, #36]	; (800bdf4 <RadioInit+0xb4>)
 800bdce:	f003 facf 	bl	800f370 <UTIL_TIMER_Stop>
}
 800bdd2:	bf00      	nop
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20001528 	.word	0x20001528
 800bde0:	2000152c 	.word	0x2000152c
 800bde4:	0800cebd 	.word	0x0800cebd
 800bde8:	0800ce45 	.word	0x0800ce45
 800bdec:	20001588 	.word	0x20001588
 800bdf0:	0800ce59 	.word	0x0800ce59
 800bdf4:	200015a0 	.word	0x200015a0

0800bdf8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800bdfc:	f001 ff84 	bl	800dd08 <SUBGRF_GetOperatingMode>
 800be00:	4603      	mov	r3, r0
 800be02:	2b07      	cmp	r3, #7
 800be04:	d00a      	beq.n	800be1c <RadioGetStatus+0x24>
 800be06:	2b07      	cmp	r3, #7
 800be08:	dc0a      	bgt.n	800be20 <RadioGetStatus+0x28>
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d002      	beq.n	800be14 <RadioGetStatus+0x1c>
 800be0e:	2b05      	cmp	r3, #5
 800be10:	d002      	beq.n	800be18 <RadioGetStatus+0x20>
 800be12:	e005      	b.n	800be20 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800be14:	2302      	movs	r3, #2
 800be16:	e004      	b.n	800be22 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800be18:	2301      	movs	r3, #1
 800be1a:	e002      	b.n	800be22 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e000      	b.n	800be22 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800be20:	2300      	movs	r3, #0
    }
}
 800be22:	4618      	mov	r0, r3
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800be32:	4a2a      	ldr	r2, [pc, #168]	; (800bedc <RadioSetModem+0xb4>)
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f003 f8b9 	bl	800efb2 <RFW_SetRadioModem>
    switch( modem )
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	2b05      	cmp	r3, #5
 800be44:	d80e      	bhi.n	800be64 <RadioSetModem+0x3c>
 800be46:	a201      	add	r2, pc, #4	; (adr r2, 800be4c <RadioSetModem+0x24>)
 800be48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4c:	0800be73 	.word	0x0800be73
 800be50:	0800be81 	.word	0x0800be81
 800be54:	0800be65 	.word	0x0800be65
 800be58:	0800bea7 	.word	0x0800bea7
 800be5c:	0800beb5 	.word	0x0800beb5
 800be60:	0800bec3 	.word	0x0800bec3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800be64:	2003      	movs	r0, #3
 800be66:	f002 fb0f 	bl	800e488 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800be6a:	4b1c      	ldr	r3, [pc, #112]	; (800bedc <RadioSetModem+0xb4>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	735a      	strb	r2, [r3, #13]
        break;
 800be70:	e02f      	b.n	800bed2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800be72:	2000      	movs	r0, #0
 800be74:	f002 fb08 	bl	800e488 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800be78:	4b18      	ldr	r3, [pc, #96]	; (800bedc <RadioSetModem+0xb4>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	735a      	strb	r2, [r3, #13]
        break;
 800be7e:	e028      	b.n	800bed2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800be80:	2001      	movs	r0, #1
 800be82:	f002 fb01 	bl	800e488 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800be86:	4b15      	ldr	r3, [pc, #84]	; (800bedc <RadioSetModem+0xb4>)
 800be88:	7b5a      	ldrb	r2, [r3, #13]
 800be8a:	4b14      	ldr	r3, [pc, #80]	; (800bedc <RadioSetModem+0xb4>)
 800be8c:	7b1b      	ldrb	r3, [r3, #12]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d01e      	beq.n	800bed0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800be92:	4b12      	ldr	r3, [pc, #72]	; (800bedc <RadioSetModem+0xb4>)
 800be94:	7b1a      	ldrb	r2, [r3, #12]
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <RadioSetModem+0xb4>)
 800be98:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800be9a:	4b10      	ldr	r3, [pc, #64]	; (800bedc <RadioSetModem+0xb4>)
 800be9c:	7b5b      	ldrb	r3, [r3, #13]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 ff9a 	bl	800cdd8 <RadioSetPublicNetwork>
        }
        break;
 800bea4:	e014      	b.n	800bed0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800bea6:	2002      	movs	r0, #2
 800bea8:	f002 faee 	bl	800e488 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800beac:	4b0b      	ldr	r3, [pc, #44]	; (800bedc <RadioSetModem+0xb4>)
 800beae:	2200      	movs	r2, #0
 800beb0:	735a      	strb	r2, [r3, #13]
        break;
 800beb2:	e00e      	b.n	800bed2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800beb4:	2002      	movs	r0, #2
 800beb6:	f002 fae7 	bl	800e488 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800beba:	4b08      	ldr	r3, [pc, #32]	; (800bedc <RadioSetModem+0xb4>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	735a      	strb	r2, [r3, #13]
        break;
 800bec0:	e007      	b.n	800bed2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800bec2:	2000      	movs	r0, #0
 800bec4:	f002 fae0 	bl	800e488 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800bec8:	4b04      	ldr	r3, [pc, #16]	; (800bedc <RadioSetModem+0xb4>)
 800beca:	2200      	movs	r2, #0
 800becc:	735a      	strb	r2, [r3, #13]
        break;
 800bece:	e000      	b.n	800bed2 <RadioSetModem+0xaa>
        break;
 800bed0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800bed2:	bf00      	nop
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	2000152c 	.word	0x2000152c

0800bee0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f002 fa87 	bl	800e3fc <SUBGRF_SetRfFrequency>
}
 800beee:	bf00      	nop
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b090      	sub	sp, #64	; 0x40
 800befa:	af0a      	add	r7, sp, #40	; 0x28
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	603b      	str	r3, [r7, #0]
 800bf02:	4613      	mov	r3, r2
 800bf04:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800bf06:	2301      	movs	r3, #1
 800bf08:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800bf12:	f000 fdea 	bl	800caea <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800bf16:	2000      	movs	r0, #0
 800bf18:	f7ff ff86 	bl	800be28 <RadioSetModem>

    RadioSetChannel( freq );
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f7ff ffdf 	bl	800bee0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800bf22:	2301      	movs	r3, #1
 800bf24:	9309      	str	r3, [sp, #36]	; 0x24
 800bf26:	2300      	movs	r3, #0
 800bf28:	9308      	str	r3, [sp, #32]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9307      	str	r3, [sp, #28]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9306      	str	r3, [sp, #24]
 800bf32:	2300      	movs	r3, #0
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	2300      	movs	r3, #0
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9303      	str	r3, [sp, #12]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	2303      	movs	r3, #3
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bf50:	68b9      	ldr	r1, [r7, #8]
 800bf52:	2000      	movs	r0, #0
 800bf54:	f000 f83c 	bl	800bfd0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800bf58:	2000      	movs	r0, #0
 800bf5a:	f000 fdcd 	bl	800caf8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800bf5e:	f000 ff69 	bl	800ce34 <RadioGetWakeupTime>
 800bf62:	4603      	mov	r3, r0
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f5 fb73 	bl	8001650 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800bf6a:	f003 fa9b 	bl	800f4a4 <UTIL_TIMER_GetCurrentTime>
 800bf6e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800bf70:	e00d      	b.n	800bf8e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800bf72:	2000      	movs	r0, #0
 800bf74:	f000 feae 	bl	800ccd4 <RadioRssi>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800bf7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800bf80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	dd02      	ble.n	800bf8e <RadioIsChannelFree+0x98>
        {
            status = false;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	75fb      	strb	r3, [r7, #23]
            break;
 800bf8c:	e006      	b.n	800bf9c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800bf8e:	6938      	ldr	r0, [r7, #16]
 800bf90:	f003 fa9a 	bl	800f4c8 <UTIL_TIMER_GetElapsedTime>
 800bf94:	4602      	mov	r2, r0
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d8ea      	bhi.n	800bf72 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800bf9c:	f000 fda5 	bl	800caea <RadioStandby>

    return status;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2100      	movs	r1, #0
 800bfba:	2000      	movs	r0, #0
 800bfbc:	f002 f9c2 	bl	800e344 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800bfc0:	f001 ff73 	bl	800deaa <SUBGRF_GetRandom>
 800bfc4:	6078      	str	r0, [r7, #4]

    return rnd;
 800bfc6:	687b      	ldr	r3, [r7, #4]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08a      	sub	sp, #40	; 0x28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60b9      	str	r1, [r7, #8]
 800bfd8:	607a      	str	r2, [r7, #4]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800bfe4:	4ab9      	ldr	r2, [pc, #740]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800bfe6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800bfea:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800bfec:	f002 ff9f 	bl	800ef2e <RFW_DeInit>
    if( rxContinuous == true )
 800bff0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800bffc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c000:	2b00      	cmp	r3, #0
 800c002:	d004      	beq.n	800c00e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800c004:	4ab2      	ldr	r2, [pc, #712]	; (800c2d0 <RadioSetRxConfig+0x300>)
 800c006:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c00a:	7013      	strb	r3, [r2, #0]
 800c00c:	e002      	b.n	800c014 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800c00e:	4bb0      	ldr	r3, [pc, #704]	; (800c2d0 <RadioSetRxConfig+0x300>)
 800c010:	22ff      	movs	r2, #255	; 0xff
 800c012:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800c014:	7bfb      	ldrb	r3, [r7, #15]
 800c016:	2b05      	cmp	r3, #5
 800c018:	d009      	beq.n	800c02e <RadioSetRxConfig+0x5e>
 800c01a:	2b05      	cmp	r3, #5
 800c01c:	f300 81d7 	bgt.w	800c3ce <RadioSetRxConfig+0x3fe>
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 80bf 	beq.w	800c1a4 <RadioSetRxConfig+0x1d4>
 800c026:	2b01      	cmp	r3, #1
 800c028:	f000 8124 	beq.w	800c274 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800c02c:	e1cf      	b.n	800c3ce <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800c02e:	2001      	movs	r0, #1
 800c030:	f002 f880 	bl	800e134 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800c034:	4ba5      	ldr	r3, [pc, #660]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800c03c:	4aa3      	ldr	r2, [pc, #652]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800c042:	4ba2      	ldr	r3, [pc, #648]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c044:	2209      	movs	r2, #9
 800c046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800c04a:	4ba0      	ldr	r3, [pc, #640]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c04c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c050:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800c052:	68b8      	ldr	r0, [r7, #8]
 800c054:	f002 fe9e 	bl	800ed94 <SUBGRF_GetFskBandwidthRegValue>
 800c058:	4603      	mov	r3, r0
 800c05a:	461a      	mov	r2, r3
 800c05c:	4b9b      	ldr	r3, [pc, #620]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800c062:	4b9a      	ldr	r3, [pc, #616]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c064:	2200      	movs	r2, #0
 800c066:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800c068:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	4b97      	ldr	r3, [pc, #604]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c070:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800c072:	4b96      	ldr	r3, [pc, #600]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c074:	2200      	movs	r2, #0
 800c076:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800c078:	4b94      	ldr	r3, [pc, #592]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c07a:	2210      	movs	r2, #16
 800c07c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800c07e:	4b93      	ldr	r3, [pc, #588]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c080:	2200      	movs	r2, #0
 800c082:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800c084:	4b91      	ldr	r3, [pc, #580]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c086:	2200      	movs	r2, #0
 800c088:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800c08a:	4b91      	ldr	r3, [pc, #580]	; (800c2d0 <RadioSetRxConfig+0x300>)
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	4b8f      	ldr	r3, [pc, #572]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c090:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800c092:	4b8e      	ldr	r3, [pc, #568]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c094:	2201      	movs	r2, #1
 800c096:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800c098:	4b8c      	ldr	r3, [pc, #560]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800c09e:	2005      	movs	r0, #5
 800c0a0:	f7ff fec2 	bl	800be28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c0a4:	488b      	ldr	r0, [pc, #556]	; (800c2d4 <RadioSetRxConfig+0x304>)
 800c0a6:	f002 fae3 	bl	800e670 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c0aa:	488b      	ldr	r0, [pc, #556]	; (800c2d8 <RadioSetRxConfig+0x308>)
 800c0ac:	f002 fbb2 	bl	800e814 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800c0b0:	4a8a      	ldr	r2, [pc, #552]	; (800c2dc <RadioSetRxConfig+0x30c>)
 800c0b2:	f107 031c 	add.w	r3, r7, #28
 800c0b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800c0be:	f107 031c 	add.w	r3, r7, #28
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f001 fe6f 	bl	800dda6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800c0c8:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c0cc:	f001 feba 	bl	800de44 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800c0d0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800c0d4:	f000 fe1d 	bl	800cd12 <RadioRead>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800c0de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e2:	f023 0310 	bic.w	r3, r3, #16
 800c0e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800c0ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800c0f4:	f000 fdfb 	bl	800ccee <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800c0f8:	2104      	movs	r1, #4
 800c0fa:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800c0fe:	f000 fdf6 	bl	800ccee <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800c102:	f640 009b 	movw	r0, #2203	; 0x89b
 800c106:	f000 fe04 	bl	800cd12 <RadioRead>
 800c10a:	4603      	mov	r3, r0
 800c10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800c110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c114:	f023 031c 	bic.w	r3, r3, #28
 800c118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800c11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c120:	f043 0308 	orr.w	r3, r3, #8
 800c124:	b2db      	uxtb	r3, r3
 800c126:	4619      	mov	r1, r3
 800c128:	f640 009b 	movw	r0, #2203	; 0x89b
 800c12c:	f000 fddf 	bl	800ccee <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800c130:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800c134:	f000 fded 	bl	800cd12 <RadioRead>
 800c138:	4603      	mov	r3, r0
 800c13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800c13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c142:	f023 0318 	bic.w	r3, r3, #24
 800c146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800c14a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c14e:	f043 0318 	orr.w	r3, r3, #24
 800c152:	b2db      	uxtb	r3, r3
 800c154:	4619      	mov	r1, r3
 800c156:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800c15a:	f000 fdc8 	bl	800ccee <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800c15e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800c162:	f000 fdd6 	bl	800cd12 <RadioRead>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800c16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800c178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c17c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800c180:	b2db      	uxtb	r3, r3
 800c182:	4619      	mov	r1, r3
 800c184:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800c188:	f000 fdb1 	bl	800ccee <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800c18c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c18e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c192:	fb02 f303 	mul.w	r3, r2, r3
 800c196:	461a      	mov	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c19e:	4a4b      	ldr	r2, [pc, #300]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1a0:	6093      	str	r3, [r2, #8]
            break;
 800c1a2:	e115      	b.n	800c3d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f001 ffc5 	bl	800e134 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800c1aa:	4b48      	ldr	r3, [pc, #288]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800c1b2:	4a46      	ldr	r2, [pc, #280]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800c1b8:	4b44      	ldr	r3, [pc, #272]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1ba:	220b      	movs	r2, #11
 800c1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800c1c0:	68b8      	ldr	r0, [r7, #8]
 800c1c2:	f002 fde7 	bl	800ed94 <SUBGRF_GetFskBandwidthRegValue>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4b40      	ldr	r3, [pc, #256]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800c1d0:	4b3e      	ldr	r3, [pc, #248]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800c1d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c1d8:	00db      	lsls	r3, r3, #3
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	4b3b      	ldr	r3, [pc, #236]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1de:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800c1e0:	4b3a      	ldr	r3, [pc, #232]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1e2:	2204      	movs	r2, #4
 800c1e4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800c1e6:	4b39      	ldr	r3, [pc, #228]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1e8:	2218      	movs	r2, #24
 800c1ea:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800c1ec:	4b37      	ldr	r3, [pc, #220]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800c1f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c1f6:	f083 0301 	eor.w	r3, r3, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	4b33      	ldr	r3, [pc, #204]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c200:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800c202:	4b33      	ldr	r3, [pc, #204]	; (800c2d0 <RadioSetRxConfig+0x300>)
 800c204:	781a      	ldrb	r2, [r3, #0]
 800c206:	4b31      	ldr	r3, [pc, #196]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c208:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800c20a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800c212:	4b2e      	ldr	r3, [pc, #184]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c214:	22f2      	movs	r2, #242	; 0xf2
 800c216:	75da      	strb	r2, [r3, #23]
 800c218:	e002      	b.n	800c220 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800c21a:	4b2c      	ldr	r3, [pc, #176]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c21c:	2201      	movs	r2, #1
 800c21e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800c220:	4b2a      	ldr	r3, [pc, #168]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c222:	2201      	movs	r2, #1
 800c224:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800c226:	f000 fc60 	bl	800caea <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800c22a:	2000      	movs	r0, #0
 800c22c:	f7ff fdfc 	bl	800be28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c230:	4828      	ldr	r0, [pc, #160]	; (800c2d4 <RadioSetRxConfig+0x304>)
 800c232:	f002 fa1d 	bl	800e670 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c236:	4828      	ldr	r0, [pc, #160]	; (800c2d8 <RadioSetRxConfig+0x308>)
 800c238:	f002 faec 	bl	800e814 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800c23c:	4a28      	ldr	r2, [pc, #160]	; (800c2e0 <RadioSetRxConfig+0x310>)
 800c23e:	f107 0314 	add.w	r3, r7, #20
 800c242:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c246:	e883 0003 	stmia.w	r3, {r0, r1}
 800c24a:	f107 0314 	add.w	r3, r7, #20
 800c24e:	4618      	mov	r0, r3
 800c250:	f001 fda9 	bl	800dda6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800c254:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c258:	f001 fdf4 	bl	800de44 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800c25c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c25e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c262:	fb02 f303 	mul.w	r3, r2, r3
 800c266:	461a      	mov	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c26e:	4a17      	ldr	r2, [pc, #92]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c270:	6093      	str	r3, [r2, #8]
            break;
 800c272:	e0ad      	b.n	800c3d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800c274:	2000      	movs	r0, #0
 800c276:	f001 ff5d 	bl	800e134 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800c27a:	4b14      	ldr	r3, [pc, #80]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	b2da      	uxtb	r2, r3
 800c286:	4b11      	ldr	r3, [pc, #68]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800c28c:	4a15      	ldr	r2, [pc, #84]	; (800c2e4 <RadioSetRxConfig+0x314>)
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	4413      	add	r3, r2
 800c292:	781a      	ldrb	r2, [r3, #0]
 800c294:	4b0d      	ldr	r3, [pc, #52]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800c29a:	4a0c      	ldr	r2, [pc, #48]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c29c:	7bbb      	ldrb	r3, [r7, #14]
 800c29e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d105      	bne.n	800c2b4 <RadioSetRxConfig+0x2e4>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b0b      	cmp	r3, #11
 800c2ac:	d008      	beq.n	800c2c0 <RadioSetRxConfig+0x2f0>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b0c      	cmp	r3, #12
 800c2b2:	d005      	beq.n	800c2c0 <RadioSetRxConfig+0x2f0>
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d116      	bne.n	800c2e8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b0c      	cmp	r3, #12
 800c2be:	d113      	bne.n	800c2e8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800c2c0:	4b02      	ldr	r3, [pc, #8]	; (800c2cc <RadioSetRxConfig+0x2fc>)
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c2c8:	e012      	b.n	800c2f0 <RadioSetRxConfig+0x320>
 800c2ca:	bf00      	nop
 800c2cc:	2000152c 	.word	0x2000152c
 800c2d0:	20000268 	.word	0x20000268
 800c2d4:	20001564 	.word	0x20001564
 800c2d8:	2000153a 	.word	0x2000153a
 800c2dc:	0800f7d8 	.word	0x0800f7d8
 800c2e0:	0800f7e0 	.word	0x0800f7e0
 800c2e4:	0800fc80 	.word	0x0800fc80
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800c2e8:	4b3b      	ldr	r3, [pc, #236]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800c2f0:	4b39      	ldr	r3, [pc, #228]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c2f6:	4b38      	ldr	r3, [pc, #224]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c2f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2fc:	2b05      	cmp	r3, #5
 800c2fe:	d004      	beq.n	800c30a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800c300:	4b35      	ldr	r3, [pc, #212]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c306:	2b06      	cmp	r3, #6
 800c308:	d10a      	bne.n	800c320 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800c30a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c30c:	2b0b      	cmp	r3, #11
 800c30e:	d803      	bhi.n	800c318 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800c310:	4b31      	ldr	r3, [pc, #196]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c312:	220c      	movs	r2, #12
 800c314:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800c316:	e006      	b.n	800c326 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c318:	4a2f      	ldr	r2, [pc, #188]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c31a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c31c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800c31e:	e002      	b.n	800c326 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c320:	4a2d      	ldr	r2, [pc, #180]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c322:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c324:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800c326:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800c32a:	4b2b      	ldr	r3, [pc, #172]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c32c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800c32e:	4b2b      	ldr	r3, [pc, #172]	; (800c3dc <RadioSetRxConfig+0x40c>)
 800c330:	781a      	ldrb	r2, [r3, #0]
 800c332:	4b29      	ldr	r3, [pc, #164]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c334:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800c336:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800c33a:	4b27      	ldr	r3, [pc, #156]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c33c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800c340:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800c344:	4b24      	ldr	r3, [pc, #144]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800c34a:	f000 fbce 	bl	800caea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800c34e:	2001      	movs	r0, #1
 800c350:	f7ff fd6a 	bl	800be28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c354:	4822      	ldr	r0, [pc, #136]	; (800c3e0 <RadioSetRxConfig+0x410>)
 800c356:	f002 f98b 	bl	800e670 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c35a:	4822      	ldr	r0, [pc, #136]	; (800c3e4 <RadioSetRxConfig+0x414>)
 800c35c:	f002 fa5a 	bl	800e814 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800c360:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c362:	b2db      	uxtb	r3, r3
 800c364:	4618      	mov	r0, r3
 800c366:	f001 fef4 	bl	800e152 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800c36a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800c36e:	f002 fbad 	bl	800eacc <SUBGRF_ReadRegister>
 800c372:	4603      	mov	r3, r0
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	4619      	mov	r1, r3
 800c37c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800c380:	f002 fb90 	bl	800eaa4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800c384:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c386:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d10d      	bne.n	800c3aa <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800c38e:	f240 7036 	movw	r0, #1846	; 0x736
 800c392:	f002 fb9b 	bl	800eacc <SUBGRF_ReadRegister>
 800c396:	4603      	mov	r3, r0
 800c398:	f023 0304 	bic.w	r3, r3, #4
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	4619      	mov	r1, r3
 800c3a0:	f240 7036 	movw	r0, #1846	; 0x736
 800c3a4:	f002 fb7e 	bl	800eaa4 <SUBGRF_WriteRegister>
 800c3a8:	e00c      	b.n	800c3c4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800c3aa:	f240 7036 	movw	r0, #1846	; 0x736
 800c3ae:	f002 fb8d 	bl	800eacc <SUBGRF_ReadRegister>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	f043 0304 	orr.w	r3, r3, #4
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	f240 7036 	movw	r0, #1846	; 0x736
 800c3c0:	f002 fb70 	bl	800eaa4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800c3c4:	4b04      	ldr	r3, [pc, #16]	; (800c3d8 <RadioSetRxConfig+0x408>)
 800c3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3ca:	609a      	str	r2, [r3, #8]
            break;
 800c3cc:	e000      	b.n	800c3d0 <RadioSetRxConfig+0x400>
            break;
 800c3ce:	bf00      	nop
    }
}
 800c3d0:	bf00      	nop
 800c3d2:	3728      	adds	r7, #40	; 0x28
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	2000152c 	.word	0x2000152c
 800c3dc:	20000268 	.word	0x20000268
 800c3e0:	20001564 	.word	0x20001564
 800c3e4:	2000153a 	.word	0x2000153a

0800c3e8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60ba      	str	r2, [r7, #8]
 800c3f0:	607b      	str	r3, [r7, #4]
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73fb      	strb	r3, [r7, #15]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800c3fa:	f002 fd98 	bl	800ef2e <RFW_DeInit>
    switch( modem )
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b04      	cmp	r3, #4
 800c402:	f000 80c7 	beq.w	800c594 <RadioSetTxConfig+0x1ac>
 800c406:	2b04      	cmp	r3, #4
 800c408:	f300 80d6 	bgt.w	800c5b8 <RadioSetTxConfig+0x1d0>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <RadioSetTxConfig+0x2e>
 800c410:	2b01      	cmp	r3, #1
 800c412:	d059      	beq.n	800c4c8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800c414:	e0d0      	b.n	800c5b8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800c416:	4b77      	ldr	r3, [pc, #476]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800c41e:	4a75      	ldr	r2, [pc, #468]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800c424:	4b73      	ldr	r3, [pc, #460]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c426:	220b      	movs	r2, #11
 800c428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f002 fcb1 	bl	800ed94 <SUBGRF_GetFskBandwidthRegValue>
 800c432:	4603      	mov	r3, r0
 800c434:	461a      	mov	r2, r3
 800c436:	4b6f      	ldr	r3, [pc, #444]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800c43c:	4a6d      	ldr	r2, [pc, #436]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800c442:	4b6c      	ldr	r3, [pc, #432]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c444:	2200      	movs	r2, #0
 800c446:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800c448:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c44a:	00db      	lsls	r3, r3, #3
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	4b69      	ldr	r3, [pc, #420]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c450:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800c452:	4b68      	ldr	r3, [pc, #416]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c454:	2204      	movs	r2, #4
 800c456:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800c458:	4b66      	ldr	r3, [pc, #408]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c45a:	2218      	movs	r2, #24
 800c45c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800c45e:	4b65      	ldr	r3, [pc, #404]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c460:	2200      	movs	r2, #0
 800c462:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800c464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c468:	f083 0301 	eor.w	r3, r3, #1
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	461a      	mov	r2, r3
 800c470:	4b60      	ldr	r3, [pc, #384]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c472:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800c474:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d003      	beq.n	800c484 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800c47c:	4b5d      	ldr	r3, [pc, #372]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c47e:	22f2      	movs	r2, #242	; 0xf2
 800c480:	75da      	strb	r2, [r3, #23]
 800c482:	e002      	b.n	800c48a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800c484:	4b5b      	ldr	r3, [pc, #364]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c486:	2201      	movs	r2, #1
 800c488:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800c48a:	4b5a      	ldr	r3, [pc, #360]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c48c:	2201      	movs	r2, #1
 800c48e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800c490:	f000 fb2b 	bl	800caea <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800c494:	2000      	movs	r0, #0
 800c496:	f7ff fcc7 	bl	800be28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c49a:	4857      	ldr	r0, [pc, #348]	; (800c5f8 <RadioSetTxConfig+0x210>)
 800c49c:	f002 f8e8 	bl	800e670 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c4a0:	4856      	ldr	r0, [pc, #344]	; (800c5fc <RadioSetTxConfig+0x214>)
 800c4a2:	f002 f9b7 	bl	800e814 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800c4a6:	4a56      	ldr	r2, [pc, #344]	; (800c600 <RadioSetTxConfig+0x218>)
 800c4a8:	f107 0310 	add.w	r3, r7, #16
 800c4ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c4b0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c4b4:	f107 0310 	add.w	r3, r7, #16
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 fc74 	bl	800dda6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800c4be:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c4c2:	f001 fcbf 	bl	800de44 <SUBGRF_SetWhiteningSeed>
            break;
 800c4c6:	e078      	b.n	800c5ba <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800c4c8:	4b4a      	ldr	r3, [pc, #296]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	4b47      	ldr	r3, [pc, #284]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c4d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800c4da:	4a4a      	ldr	r2, [pc, #296]	; (800c604 <RadioSetTxConfig+0x21c>)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4413      	add	r3, r2
 800c4e0:	781a      	ldrb	r2, [r3, #0]
 800c4e2:	4b44      	ldr	r3, [pc, #272]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c4e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800c4e8:	4a42      	ldr	r2, [pc, #264]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c4ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c4ee:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d105      	bne.n	800c504 <RadioSetTxConfig+0x11c>
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	2b0b      	cmp	r3, #11
 800c4fc:	d008      	beq.n	800c510 <RadioSetTxConfig+0x128>
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	2b0c      	cmp	r3, #12
 800c502:	d005      	beq.n	800c510 <RadioSetTxConfig+0x128>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d107      	bne.n	800c51a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	2b0c      	cmp	r3, #12
 800c50e:	d104      	bne.n	800c51a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800c510:	4b38      	ldr	r3, [pc, #224]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c512:	2201      	movs	r2, #1
 800c514:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c518:	e003      	b.n	800c522 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800c51a:	4b36      	ldr	r3, [pc, #216]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800c522:	4b34      	ldr	r3, [pc, #208]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c524:	2201      	movs	r2, #1
 800c526:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c528:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c52a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c52e:	2b05      	cmp	r3, #5
 800c530:	d004      	beq.n	800c53c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800c532:	4b30      	ldr	r3, [pc, #192]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c534:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c538:	2b06      	cmp	r3, #6
 800c53a:	d10a      	bne.n	800c552 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800c53c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c53e:	2b0b      	cmp	r3, #11
 800c540:	d803      	bhi.n	800c54a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800c542:	4b2c      	ldr	r3, [pc, #176]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c544:	220c      	movs	r2, #12
 800c546:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800c548:	e006      	b.n	800c558 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c54a:	4a2a      	ldr	r2, [pc, #168]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c54c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c54e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800c550:	e002      	b.n	800c558 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c552:	4a28      	ldr	r2, [pc, #160]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c554:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c556:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800c558:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c55c:	4b25      	ldr	r3, [pc, #148]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c55e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800c560:	4b29      	ldr	r3, [pc, #164]	; (800c608 <RadioSetTxConfig+0x220>)
 800c562:	781a      	ldrb	r2, [r3, #0]
 800c564:	4b23      	ldr	r3, [pc, #140]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c566:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800c568:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c56c:	4b21      	ldr	r3, [pc, #132]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c56e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800c572:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800c576:	4b1f      	ldr	r3, [pc, #124]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800c57c:	f000 fab5 	bl	800caea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800c580:	2001      	movs	r0, #1
 800c582:	f7ff fc51 	bl	800be28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c586:	481c      	ldr	r0, [pc, #112]	; (800c5f8 <RadioSetTxConfig+0x210>)
 800c588:	f002 f872 	bl	800e670 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c58c:	481b      	ldr	r0, [pc, #108]	; (800c5fc <RadioSetTxConfig+0x214>)
 800c58e:	f002 f941 	bl	800e814 <SUBGRF_SetPacketParams>
            break;
 800c592:	e012      	b.n	800c5ba <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800c594:	2004      	movs	r0, #4
 800c596:	f7ff fc47 	bl	800be28 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800c59a:	4b16      	ldr	r3, [pc, #88]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c59c:	2202      	movs	r2, #2
 800c59e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800c5a2:	4a14      	ldr	r2, [pc, #80]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800c5a8:	4b12      	ldr	r3, [pc, #72]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c5aa:	2216      	movs	r2, #22
 800c5ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c5b0:	4811      	ldr	r0, [pc, #68]	; (800c5f8 <RadioSetTxConfig+0x210>)
 800c5b2:	f002 f85d 	bl	800e670 <SUBGRF_SetModulationParams>
            break;
 800c5b6:	e000      	b.n	800c5ba <RadioSetTxConfig+0x1d2>
            break;
 800c5b8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800c5ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f002 fb8c 	bl	800ecdc <SUBGRF_SetRfTxPower>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c5ca:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800c5ce:	210e      	movs	r1, #14
 800c5d0:	f640 101f 	movw	r0, #2335	; 0x91f
 800c5d4:	f002 fa66 	bl	800eaa4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800c5d8:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c5da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f002 fcb9 	bl	800ef56 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800c5e4:	4a03      	ldr	r2, [pc, #12]	; (800c5f4 <RadioSetTxConfig+0x20c>)
 800c5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e8:	6053      	str	r3, [r2, #4]
}
 800c5ea:	bf00      	nop
 800c5ec:	3718      	adds	r7, #24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	2000152c 	.word	0x2000152c
 800c5f8:	20001564 	.word	0x20001564
 800c5fc:	2000153a 	.word	0x2000153a
 800c600:	0800f7e0 	.word	0x0800f7e0
 800c604:	0800fc80 	.word	0x0800fc80
 800c608:	20000268 	.word	0x20000268

0800c60c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
    return true;
 800c614:	2301      	movs	r3, #1
}
 800c616:	4618      	mov	r0, r3
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bc80      	pop	{r7}
 800c61e:	4770      	bx	lr

0800c620 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	2b0a      	cmp	r3, #10
 800c632:	d83e      	bhi.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
 800c634:	a201      	add	r2, pc, #4	; (adr r2, 800c63c <RadioGetLoRaBandwidthInHz+0x1c>)
 800c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63a:	bf00      	nop
 800c63c:	0800c669 	.word	0x0800c669
 800c640:	0800c679 	.word	0x0800c679
 800c644:	0800c689 	.word	0x0800c689
 800c648:	0800c699 	.word	0x0800c699
 800c64c:	0800c6a1 	.word	0x0800c6a1
 800c650:	0800c6a7 	.word	0x0800c6a7
 800c654:	0800c6ad 	.word	0x0800c6ad
 800c658:	0800c6b3 	.word	0x0800c6b3
 800c65c:	0800c671 	.word	0x0800c671
 800c660:	0800c681 	.word	0x0800c681
 800c664:	0800c691 	.word	0x0800c691
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800c668:	f641 6384 	movw	r3, #7812	; 0x1e84
 800c66c:	60fb      	str	r3, [r7, #12]
        break;
 800c66e:	e020      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800c670:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800c674:	60fb      	str	r3, [r7, #12]
        break;
 800c676:	e01c      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800c678:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c67c:	60fb      	str	r3, [r7, #12]
        break;
 800c67e:	e018      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800c680:	f245 1361 	movw	r3, #20833	; 0x5161
 800c684:	60fb      	str	r3, [r7, #12]
        break;
 800c686:	e014      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800c688:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c68c:	60fb      	str	r3, [r7, #12]
        break;
 800c68e:	e010      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800c690:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800c694:	60fb      	str	r3, [r7, #12]
        break;
 800c696:	e00c      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800c698:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c69c:	60fb      	str	r3, [r7, #12]
        break;
 800c69e:	e008      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <RadioGetLoRaBandwidthInHz+0xa0>)
 800c6a2:	60fb      	str	r3, [r7, #12]
        break;
 800c6a4:	e005      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800c6a6:	4b07      	ldr	r3, [pc, #28]	; (800c6c4 <RadioGetLoRaBandwidthInHz+0xa4>)
 800c6a8:	60fb      	str	r3, [r7, #12]
        break;
 800c6aa:	e002      	b.n	800c6b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800c6ac:	4b06      	ldr	r3, [pc, #24]	; (800c6c8 <RadioGetLoRaBandwidthInHz+0xa8>)
 800c6ae:	60fb      	str	r3, [r7, #12]
        break;
 800c6b0:	bf00      	nop
    }

    return bandwidthInHz;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bc80      	pop	{r7}
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	0001e848 	.word	0x0001e848
 800c6c4:	0003d090 	.word	0x0003d090
 800c6c8:	0007a120 	.word	0x0007a120

0800c6cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4603      	mov	r3, r0
 800c6dc:	70fb      	strb	r3, [r7, #3]
 800c6de:	460b      	mov	r3, r1
 800c6e0:	803b      	strh	r3, [r7, #0]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800c6e6:	883b      	ldrh	r3, [r7, #0]
 800c6e8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800c6ea:	78ba      	ldrb	r2, [r7, #2]
 800c6ec:	f082 0201 	eor.w	r2, r2, #1
 800c6f0:	b2d2      	uxtb	r2, r2
 800c6f2:	2a00      	cmp	r2, #0
 800c6f4:	d001      	beq.n	800c6fa <RadioGetGfskTimeOnAirNumerator+0x2e>
 800c6f6:	2208      	movs	r2, #8
 800c6f8:	e000      	b.n	800c6fc <RadioGetGfskTimeOnAirNumerator+0x30>
 800c6fa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800c6fc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800c6fe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800c702:	7c3b      	ldrb	r3, [r7, #16]
 800c704:	7d39      	ldrb	r1, [r7, #20]
 800c706:	2900      	cmp	r1, #0
 800c708:	d001      	beq.n	800c70e <RadioGetGfskTimeOnAirNumerator+0x42>
 800c70a:	2102      	movs	r1, #2
 800c70c:	e000      	b.n	800c710 <RadioGetGfskTimeOnAirNumerator+0x44>
 800c70e:	2100      	movs	r1, #0
 800c710:	440b      	add	r3, r1
 800c712:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800c714:	4413      	add	r3, r2
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bc80      	pop	{r7}
 800c71e:	4770      	bx	lr

0800c720 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800c720:	b480      	push	{r7}
 800c722:	b08b      	sub	sp, #44	; 0x2c
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	4611      	mov	r1, r2
 800c72c:	461a      	mov	r2, r3
 800c72e:	460b      	mov	r3, r1
 800c730:	71fb      	strb	r3, [r7, #7]
 800c732:	4613      	mov	r3, r2
 800c734:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800c736:	79fb      	ldrb	r3, [r7, #7]
 800c738:	3304      	adds	r3, #4
 800c73a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b05      	cmp	r3, #5
 800c746:	d002      	beq.n	800c74e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2b06      	cmp	r3, #6
 800c74c:	d104      	bne.n	800c758 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800c74e:	88bb      	ldrh	r3, [r7, #4]
 800c750:	2b0b      	cmp	r3, #11
 800c752:	d801      	bhi.n	800c758 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800c754:	230c      	movs	r3, #12
 800c756:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d105      	bne.n	800c76a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	2b0b      	cmp	r3, #11
 800c762:	d008      	beq.n	800c776 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2b0c      	cmp	r3, #12
 800c768:	d005      	beq.n	800c776 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d105      	bne.n	800c77c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b0c      	cmp	r3, #12
 800c774:	d102      	bne.n	800c77c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800c776:	2301      	movs	r3, #1
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c77c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c780:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800c782:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c786:	2a00      	cmp	r2, #0
 800c788:	d001      	beq.n	800c78e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800c78a:	2210      	movs	r2, #16
 800c78c:	e000      	b.n	800c790 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800c78e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c790:	4413      	add	r3, r2
 800c792:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800c798:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800c79a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	d001      	beq.n	800c7a6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	e000      	b.n	800c7a8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800c7a6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800c7a8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c7aa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b06      	cmp	r3, #6
 800c7b0:	d803      	bhi.n	800c7ba <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	623b      	str	r3, [r7, #32]
 800c7b8:	e00e      	b.n	800c7d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	3308      	adds	r3, #8
 800c7be:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800c7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d004      	beq.n	800c7d2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	3b02      	subs	r3, #2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	623b      	str	r3, [r7, #32]
 800c7d0:	e002      	b.n	800c7d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	da01      	bge.n	800c7e2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c7e2:	69fa      	ldr	r2, [r7, #28]
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	1e5a      	subs	r2, r3, #1
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	fb92 f3f3 	sdiv	r3, r2, r3
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	fb03 f202 	mul.w	r2, r3, r2
 800c7f6:	88bb      	ldrh	r3, [r7, #4]
 800c7f8:	4413      	add	r3, r2
    int32_t intermediate =
 800c7fa:	330c      	adds	r3, #12
 800c7fc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	2b06      	cmp	r3, #6
 800c802:	d802      	bhi.n	800c80a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	3302      	adds	r3, #2
 800c808:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	3b02      	subs	r3, #2
 800c814:	fa02 f303 	lsl.w	r3, r2, r3
}
 800c818:	4618      	mov	r0, r3
 800c81a:	372c      	adds	r7, #44	; 0x2c
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bc80      	pop	{r7}
 800c820:	4770      	bx	lr
	...

0800c824 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08a      	sub	sp, #40	; 0x28
 800c828:	af04      	add	r7, sp, #16
 800c82a:	60b9      	str	r1, [r7, #8]
 800c82c:	607a      	str	r2, [r7, #4]
 800c82e:	461a      	mov	r2, r3
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]
 800c834:	4613      	mov	r3, r2
 800c836:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800c83c:	2301      	movs	r3, #1
 800c83e:	613b      	str	r3, [r7, #16]

    switch( modem )
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d002      	beq.n	800c84c <RadioTimeOnAir+0x28>
 800c846:	2b01      	cmp	r3, #1
 800c848:	d017      	beq.n	800c87a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800c84a:	e035      	b.n	800c8b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800c84c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800c850:	8c3a      	ldrh	r2, [r7, #32]
 800c852:	7bb9      	ldrb	r1, [r7, #14]
 800c854:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	4603      	mov	r3, r0
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff ff32 	bl	800c6cc <RadioGetGfskTimeOnAirNumerator>
 800c868:	4603      	mov	r3, r0
 800c86a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c86e:	fb02 f303 	mul.w	r3, r2, r3
 800c872:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	613b      	str	r3, [r7, #16]
        break;
 800c878:	e01e      	b.n	800c8b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800c87a:	8c39      	ldrh	r1, [r7, #32]
 800c87c:	7bba      	ldrb	r2, [r7, #14]
 800c87e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c882:	9302      	str	r3, [sp, #8]
 800c884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	460b      	mov	r3, r1
 800c892:	6879      	ldr	r1, [r7, #4]
 800c894:	68b8      	ldr	r0, [r7, #8]
 800c896:	f7ff ff43 	bl	800c720 <RadioGetLoRaTimeOnAirNumerator>
 800c89a:	4603      	mov	r3, r0
 800c89c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8a0:	fb02 f303 	mul.w	r3, r2, r3
 800c8a4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800c8a6:	4a0a      	ldr	r2, [pc, #40]	; (800c8d0 <RadioTimeOnAir+0xac>)
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff feb6 	bl	800c620 <RadioGetLoRaBandwidthInHz>
 800c8b4:	6138      	str	r0, [r7, #16]
        break;
 800c8b6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	4413      	add	r3, r2
 800c8be:	1e5a      	subs	r2, r3, #1
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3718      	adds	r7, #24
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	0800fc80 	.word	0x0800fc80

0800c8d4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f240 2101 	movw	r1, #513	; 0x201
 800c8e8:	f240 2001 	movw	r0, #513	; 0x201
 800c8ec:	f001 fd2a 	bl	800e344 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800c8f0:	4b70      	ldr	r3, [pc, #448]	; (800cab4 <RadioSend+0x1e0>)
 800c8f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c8f6:	2101      	movs	r1, #1
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f002 f9c7 	bl	800ec8c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800c8fe:	4b6d      	ldr	r3, [pc, #436]	; (800cab4 <RadioSend+0x1e0>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d112      	bne.n	800c92c <RadioSend+0x58>
 800c906:	4b6b      	ldr	r3, [pc, #428]	; (800cab4 <RadioSend+0x1e0>)
 800c908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c90c:	2b06      	cmp	r3, #6
 800c90e:	d10d      	bne.n	800c92c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800c910:	f640 0089 	movw	r0, #2185	; 0x889
 800c914:	f002 f8da 	bl	800eacc <SUBGRF_ReadRegister>
 800c918:	4603      	mov	r3, r0
 800c91a:	f023 0304 	bic.w	r3, r3, #4
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	4619      	mov	r1, r3
 800c922:	f640 0089 	movw	r0, #2185	; 0x889
 800c926:	f002 f8bd 	bl	800eaa4 <SUBGRF_WriteRegister>
 800c92a:	e00c      	b.n	800c946 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800c92c:	f640 0089 	movw	r0, #2185	; 0x889
 800c930:	f002 f8cc 	bl	800eacc <SUBGRF_ReadRegister>
 800c934:	4603      	mov	r3, r0
 800c936:	f043 0304 	orr.w	r3, r3, #4
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	4619      	mov	r1, r3
 800c93e:	f640 0089 	movw	r0, #2185	; 0x889
 800c942:	f002 f8af 	bl	800eaa4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800c946:	4b5b      	ldr	r3, [pc, #364]	; (800cab4 <RadioSend+0x1e0>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	f200 80a2 	bhi.w	800ca94 <RadioSend+0x1c0>
 800c950:	a201      	add	r2, pc, #4	; (adr r2, 800c958 <RadioSend+0x84>)
 800c952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c956:	bf00      	nop
 800c958:	0800c987 	.word	0x0800c987
 800c95c:	0800c96d 	.word	0x0800c96d
 800c960:	0800c987 	.word	0x0800c987
 800c964:	0800c9dd 	.word	0x0800c9dd
 800c968:	0800c9fd 	.word	0x0800c9fd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800c96c:	4a51      	ldr	r2, [pc, #324]	; (800cab4 <RadioSend+0x1e0>)
 800c96e:	78fb      	ldrb	r3, [r7, #3]
 800c970:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c972:	4851      	ldr	r0, [pc, #324]	; (800cab8 <RadioSend+0x1e4>)
 800c974:	f001 ff4e 	bl	800e814 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800c978:	78fb      	ldrb	r3, [r7, #3]
 800c97a:	2200      	movs	r2, #0
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f001 f9fe 	bl	800dd80 <SUBGRF_SendPayload>
            break;
 800c984:	e087      	b.n	800ca96 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800c986:	f002 fad8 	bl	800ef3a <RFW_Is_Init>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d118      	bne.n	800c9c2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800c990:	f107 020d 	add.w	r2, r7, #13
 800c994:	78fb      	ldrb	r3, [r7, #3]
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f002 fae6 	bl	800ef6a <RFW_TransmitInit>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10c      	bne.n	800c9be <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800c9a4:	7b7a      	ldrb	r2, [r7, #13]
 800c9a6:	4b43      	ldr	r3, [pc, #268]	; (800cab4 <RadioSend+0x1e0>)
 800c9a8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c9aa:	4843      	ldr	r0, [pc, #268]	; (800cab8 <RadioSend+0x1e4>)
 800c9ac:	f001 ff32 	bl	800e814 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800c9b0:	7b7b      	ldrb	r3, [r7, #13]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f001 f9e2 	bl	800dd80 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800c9bc:	e06b      	b.n	800ca96 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e073      	b.n	800caaa <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800c9c2:	4a3c      	ldr	r2, [pc, #240]	; (800cab4 <RadioSend+0x1e0>)
 800c9c4:	78fb      	ldrb	r3, [r7, #3]
 800c9c6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c9c8:	483b      	ldr	r0, [pc, #236]	; (800cab8 <RadioSend+0x1e4>)
 800c9ca:	f001 ff23 	bl	800e814 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800c9ce:	78fb      	ldrb	r3, [r7, #3]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f001 f9d3 	bl	800dd80 <SUBGRF_SendPayload>
            break;
 800c9da:	e05c      	b.n	800ca96 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800c9dc:	4b35      	ldr	r3, [pc, #212]	; (800cab4 <RadioSend+0x1e0>)
 800c9de:	2202      	movs	r2, #2
 800c9e0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800c9e2:	4a34      	ldr	r2, [pc, #208]	; (800cab4 <RadioSend+0x1e0>)
 800c9e4:	78fb      	ldrb	r3, [r7, #3]
 800c9e6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c9e8:	4833      	ldr	r0, [pc, #204]	; (800cab8 <RadioSend+0x1e4>)
 800c9ea:	f001 ff13 	bl	800e814 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800c9ee:	78fb      	ldrb	r3, [r7, #3]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f001 f9c3 	bl	800dd80 <SUBGRF_SendPayload>
            break;
 800c9fa:	e04c      	b.n	800ca96 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	482e      	ldr	r0, [pc, #184]	; (800cabc <RadioSend+0x1e8>)
 800ca04:	f000 fc96 	bl	800d334 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ca08:	4b2a      	ldr	r3, [pc, #168]	; (800cab4 <RadioSend+0x1e0>)
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	3301      	adds	r3, #1
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	4b27      	ldr	r3, [pc, #156]	; (800cab4 <RadioSend+0x1e0>)
 800ca16:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ca18:	4827      	ldr	r0, [pc, #156]	; (800cab8 <RadioSend+0x1e4>)
 800ca1a:	f001 fefb 	bl	800e814 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800ca1e:	2100      	movs	r1, #0
 800ca20:	20f1      	movs	r0, #241	; 0xf1
 800ca22:	f000 f964 	bl	800ccee <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800ca26:	2100      	movs	r1, #0
 800ca28:	20f0      	movs	r0, #240	; 0xf0
 800ca2a:	f000 f960 	bl	800ccee <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800ca2e:	4b21      	ldr	r3, [pc, #132]	; (800cab4 <RadioSend+0x1e0>)
 800ca30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca32:	2b64      	cmp	r3, #100	; 0x64
 800ca34:	d108      	bne.n	800ca48 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800ca36:	2170      	movs	r1, #112	; 0x70
 800ca38:	20f3      	movs	r0, #243	; 0xf3
 800ca3a:	f000 f958 	bl	800ccee <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800ca3e:	211d      	movs	r1, #29
 800ca40:	20f2      	movs	r0, #242	; 0xf2
 800ca42:	f000 f954 	bl	800ccee <RadioWrite>
 800ca46:	e007      	b.n	800ca58 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800ca48:	21e1      	movs	r1, #225	; 0xe1
 800ca4a:	20f3      	movs	r0, #243	; 0xf3
 800ca4c:	f000 f94f 	bl	800ccee <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800ca50:	2104      	movs	r1, #4
 800ca52:	20f2      	movs	r0, #242	; 0xf2
 800ca54:	f000 f94b 	bl	800ccee <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800ca58:	78fb      	ldrb	r3, [r7, #3]
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	00db      	lsls	r3, r3, #3
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	3302      	adds	r3, #2
 800ca62:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800ca64:	89fb      	ldrh	r3, [r7, #14]
 800ca66:	0a1b      	lsrs	r3, r3, #8
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	20f4      	movs	r0, #244	; 0xf4
 800ca70:	f000 f93d 	bl	800ccee <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800ca74:	89fb      	ldrh	r3, [r7, #14]
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	4619      	mov	r1, r3
 800ca7a:	20f5      	movs	r0, #245	; 0xf5
 800ca7c:	f000 f937 	bl	800ccee <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800ca80:	78fb      	ldrb	r3, [r7, #3]
 800ca82:	3301      	adds	r3, #1
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	480b      	ldr	r0, [pc, #44]	; (800cabc <RadioSend+0x1e8>)
 800ca8e:	f001 f977 	bl	800dd80 <SUBGRF_SendPayload>
            break;
 800ca92:	e000      	b.n	800ca96 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800ca94:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ca96:	4b07      	ldr	r3, [pc, #28]	; (800cab4 <RadioSend+0x1e0>)
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	4808      	ldr	r0, [pc, #32]	; (800cac0 <RadioSend+0x1ec>)
 800ca9e:	f002 fcd7 	bl	800f450 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800caa2:	4807      	ldr	r0, [pc, #28]	; (800cac0 <RadioSend+0x1ec>)
 800caa4:	f002 fbf6 	bl	800f294 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	2000152c 	.word	0x2000152c
 800cab8:	2000153a 	.word	0x2000153a
 800cabc:	20001428 	.word	0x20001428
 800cac0:	20001588 	.word	0x20001588

0800cac4 <RadioSleep>:

static void RadioSleep( void )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800caca:	2300      	movs	r3, #0
 800cacc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800cace:	793b      	ldrb	r3, [r7, #4]
 800cad0:	f043 0304 	orr.w	r3, r3, #4
 800cad4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800cad6:	7938      	ldrb	r0, [r7, #4]
 800cad8:	f001 fa2e 	bl	800df38 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800cadc:	2002      	movs	r0, #2
 800cade:	f7f4 fdb7 	bl	8001650 <HAL_Delay>
}
 800cae2:	bf00      	nop
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <RadioStandby>:

static void RadioStandby( void )
{
 800caea:	b580      	push	{r7, lr}
 800caec:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800caee:	2000      	movs	r0, #0
 800caf0:	f001 fa54 	bl	800df9c <SUBGRF_SetStandby>
}
 800caf4:	bf00      	nop
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800cb00:	f002 fa1b 	bl	800ef3a <RFW_Is_Init>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d102      	bne.n	800cb10 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800cb0a:	f002 fa3e 	bl	800ef8a <RFW_ReceiveInit>
 800cb0e:	e007      	b.n	800cb20 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800cb10:	2300      	movs	r3, #0
 800cb12:	2200      	movs	r2, #0
 800cb14:	f240 2162 	movw	r1, #610	; 0x262
 800cb18:	f240 2062 	movw	r0, #610	; 0x262
 800cb1c:	f001 fc12 	bl	800e344 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d006      	beq.n	800cb34 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	4811      	ldr	r0, [pc, #68]	; (800cb70 <RadioRx+0x78>)
 800cb2a:	f002 fc91 	bl	800f450 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800cb2e:	4810      	ldr	r0, [pc, #64]	; (800cb70 <RadioRx+0x78>)
 800cb30:	f002 fbb0 	bl	800f294 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800cb34:	4b0f      	ldr	r3, [pc, #60]	; (800cb74 <RadioRx+0x7c>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800cb3a:	4b0e      	ldr	r3, [pc, #56]	; (800cb74 <RadioRx+0x7c>)
 800cb3c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cb40:	2100      	movs	r1, #0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f002 f8a2 	bl	800ec8c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800cb48:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <RadioRx+0x7c>)
 800cb4a:	785b      	ldrb	r3, [r3, #1]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d004      	beq.n	800cb5a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800cb50:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cb54:	f001 fa5e 	bl	800e014 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800cb58:	e005      	b.n	800cb66 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800cb5a:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <RadioRx+0x7c>)
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	019b      	lsls	r3, r3, #6
 800cb60:	4618      	mov	r0, r3
 800cb62:	f001 fa57 	bl	800e014 <SUBGRF_SetRx>
}
 800cb66:	bf00      	nop
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	200015a0 	.word	0x200015a0
 800cb74:	2000152c 	.word	0x2000152c

0800cb78 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800cb80:	f002 f9db 	bl	800ef3a <RFW_Is_Init>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d102      	bne.n	800cb90 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800cb8a:	f002 f9fe 	bl	800ef8a <RFW_ReceiveInit>
 800cb8e:	e007      	b.n	800cba0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800cb90:	2300      	movs	r3, #0
 800cb92:	2200      	movs	r2, #0
 800cb94:	f240 2162 	movw	r1, #610	; 0x262
 800cb98:	f240 2062 	movw	r0, #610	; 0x262
 800cb9c:	f001 fbd2 	bl	800e344 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d006      	beq.n	800cbb4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	4811      	ldr	r0, [pc, #68]	; (800cbf0 <RadioRxBoosted+0x78>)
 800cbaa:	f002 fc51 	bl	800f450 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800cbae:	4810      	ldr	r0, [pc, #64]	; (800cbf0 <RadioRxBoosted+0x78>)
 800cbb0:	f002 fb70 	bl	800f294 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800cbb4:	4b0f      	ldr	r3, [pc, #60]	; (800cbf4 <RadioRxBoosted+0x7c>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800cbba:	4b0e      	ldr	r3, [pc, #56]	; (800cbf4 <RadioRxBoosted+0x7c>)
 800cbbc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f002 f862 	bl	800ec8c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <RadioRxBoosted+0x7c>)
 800cbca:	785b      	ldrb	r3, [r3, #1]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d004      	beq.n	800cbda <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800cbd0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cbd4:	f001 fa3e 	bl	800e054 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800cbd8:	e005      	b.n	800cbe6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800cbda:	4b06      	ldr	r3, [pc, #24]	; (800cbf4 <RadioRxBoosted+0x7c>)
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	019b      	lsls	r3, r3, #6
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f001 fa37 	bl	800e054 <SUBGRF_SetRxBoosted>
}
 800cbe6:	bf00      	nop
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	200015a0 	.word	0x200015a0
 800cbf4:	2000152c 	.word	0x2000152c

0800cbf8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	005a      	lsls	r2, r3, #1
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	4413      	add	r3, r2
 800cc0a:	4a0c      	ldr	r2, [pc, #48]	; (800cc3c <RadioSetRxDutyCycle+0x44>)
 800cc0c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cc0e:	2300      	movs	r3, #0
 800cc10:	2200      	movs	r2, #0
 800cc12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cc1a:	f001 fb93 	bl	800e344 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800cc1e:	4b07      	ldr	r3, [pc, #28]	; (800cc3c <RadioSetRxDutyCycle+0x44>)
 800cc20:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cc24:	2100      	movs	r1, #0
 800cc26:	4618      	mov	r0, r3
 800cc28:	f002 f830 	bl	800ec8c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 fa34 	bl	800e09c <SUBGRF_SetRxDutyCycle>
}
 800cc34:	bf00      	nop
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	2000152c 	.word	0x2000152c

0800cc40 <RadioStartCad>:

static void RadioStartCad( void )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800cc44:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <RadioStartCad+0x2c>)
 800cc46:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f002 f81d 	bl	800ec8c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800cc52:	2300      	movs	r3, #0
 800cc54:	2200      	movs	r2, #0
 800cc56:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800cc5a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800cc5e:	f001 fb71 	bl	800e344 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800cc62:	f001 fa47 	bl	800e0f4 <SUBGRF_SetCad>
}
 800cc66:	bf00      	nop
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000152c 	.word	0x2000152c

0800cc70 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800cc80:	883b      	ldrh	r3, [r7, #0]
 800cc82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc86:	fb02 f303 	mul.w	r3, r2, r3
 800cc8a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f001 fbb5 	bl	800e3fc <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800cc92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f002 f820 	bl	800ecdc <SUBGRF_SetRfTxPower>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800cca0:	210e      	movs	r1, #14
 800cca2:	f640 101f 	movw	r0, #2335	; 0x91f
 800cca6:	f001 fefd 	bl	800eaa4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	2101      	movs	r1, #1
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f001 ffec 	bl	800ec8c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800ccb4:	f001 fa2c 	bl	800e110 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800ccb8:	68f9      	ldr	r1, [r7, #12]
 800ccba:	4805      	ldr	r0, [pc, #20]	; (800ccd0 <RadioSetTxContinuousWave+0x60>)
 800ccbc:	f002 fbc8 	bl	800f450 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ccc0:	4803      	ldr	r0, [pc, #12]	; (800ccd0 <RadioSetTxContinuousWave+0x60>)
 800ccc2:	f002 fae7 	bl	800f294 <UTIL_TIMER_Start>
}
 800ccc6:	bf00      	nop
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20001588 	.word	0x20001588

0800ccd4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800ccde:	f001 fe4e 	bl	800e97e <SUBGRF_GetRssiInst>
 800cce2:	4603      	mov	r3, r0
 800cce4:	b21b      	sxth	r3, r3
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	460a      	mov	r2, r1
 800ccf8:	80fb      	strh	r3, [r7, #6]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800ccfe:	797a      	ldrb	r2, [r7, #5]
 800cd00:	88fb      	ldrh	r3, [r7, #6]
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f001 fecd 	bl	800eaa4 <SUBGRF_WriteRegister>
}
 800cd0a:	bf00      	nop
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b082      	sub	sp, #8
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	4603      	mov	r3, r0
 800cd1a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800cd1c:	88fb      	ldrh	r3, [r7, #6]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f001 fed4 	bl	800eacc <SUBGRF_ReadRegister>
 800cd24:	4603      	mov	r3, r0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	4603      	mov	r3, r0
 800cd36:	6039      	str	r1, [r7, #0]
 800cd38:	80fb      	strh	r3, [r7, #6]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800cd3e:	797b      	ldrb	r3, [r7, #5]
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	88fb      	ldrh	r3, [r7, #6]
 800cd44:	6839      	ldr	r1, [r7, #0]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f001 fed4 	bl	800eaf4 <SUBGRF_WriteRegisters>
}
 800cd4c:	bf00      	nop
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	6039      	str	r1, [r7, #0]
 800cd5e:	80fb      	strh	r3, [r7, #6]
 800cd60:	4613      	mov	r3, r2
 800cd62:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800cd64:	797b      	ldrb	r3, [r7, #5]
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	88fb      	ldrh	r3, [r7, #6]
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f001 fee3 	bl	800eb38 <SUBGRF_ReadRegisters>
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	460a      	mov	r2, r1
 800cd86:	71fb      	strb	r3, [r7, #7]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d10a      	bne.n	800cda8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800cd92:	4a0e      	ldr	r2, [pc, #56]	; (800cdcc <RadioSetMaxPayloadLength+0x50>)
 800cd94:	79bb      	ldrb	r3, [r7, #6]
 800cd96:	7013      	strb	r3, [r2, #0]
 800cd98:	4b0c      	ldr	r3, [pc, #48]	; (800cdcc <RadioSetMaxPayloadLength+0x50>)
 800cd9a:	781a      	ldrb	r2, [r3, #0]
 800cd9c:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <RadioSetMaxPayloadLength+0x54>)
 800cd9e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cda0:	480c      	ldr	r0, [pc, #48]	; (800cdd4 <RadioSetMaxPayloadLength+0x58>)
 800cda2:	f001 fd37 	bl	800e814 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800cda6:	e00d      	b.n	800cdc4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800cda8:	4b09      	ldr	r3, [pc, #36]	; (800cdd0 <RadioSetMaxPayloadLength+0x54>)
 800cdaa:	7d5b      	ldrb	r3, [r3, #21]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d109      	bne.n	800cdc4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800cdb0:	4a06      	ldr	r2, [pc, #24]	; (800cdcc <RadioSetMaxPayloadLength+0x50>)
 800cdb2:	79bb      	ldrb	r3, [r7, #6]
 800cdb4:	7013      	strb	r3, [r2, #0]
 800cdb6:	4b05      	ldr	r3, [pc, #20]	; (800cdcc <RadioSetMaxPayloadLength+0x50>)
 800cdb8:	781a      	ldrb	r2, [r3, #0]
 800cdba:	4b05      	ldr	r3, [pc, #20]	; (800cdd0 <RadioSetMaxPayloadLength+0x54>)
 800cdbc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cdbe:	4805      	ldr	r0, [pc, #20]	; (800cdd4 <RadioSetMaxPayloadLength+0x58>)
 800cdc0:	f001 fd28 	bl	800e814 <SUBGRF_SetPacketParams>
}
 800cdc4:	bf00      	nop
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	20000268 	.word	0x20000268
 800cdd0:	2000152c 	.word	0x2000152c
 800cdd4:	2000153a 	.word	0x2000153a

0800cdd8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	4603      	mov	r3, r0
 800cde0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800cde2:	4a13      	ldr	r2, [pc, #76]	; (800ce30 <RadioSetPublicNetwork+0x58>)
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	7313      	strb	r3, [r2, #12]
 800cde8:	4b11      	ldr	r3, [pc, #68]	; (800ce30 <RadioSetPublicNetwork+0x58>)
 800cdea:	7b1a      	ldrb	r2, [r3, #12]
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <RadioSetPublicNetwork+0x58>)
 800cdee:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800cdf0:	2001      	movs	r0, #1
 800cdf2:	f7ff f819 	bl	800be28 <RadioSetModem>
    if( enable == true )
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00a      	beq.n	800ce12 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800cdfc:	2134      	movs	r1, #52	; 0x34
 800cdfe:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800ce02:	f001 fe4f 	bl	800eaa4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800ce06:	2144      	movs	r1, #68	; 0x44
 800ce08:	f240 7041 	movw	r0, #1857	; 0x741
 800ce0c:	f001 fe4a 	bl	800eaa4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800ce10:	e009      	b.n	800ce26 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800ce12:	2114      	movs	r1, #20
 800ce14:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800ce18:	f001 fe44 	bl	800eaa4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800ce1c:	2124      	movs	r1, #36	; 0x24
 800ce1e:	f240 7041 	movw	r0, #1857	; 0x741
 800ce22:	f001 fe3f 	bl	800eaa4 <SUBGRF_WriteRegister>
}
 800ce26:	bf00      	nop
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	2000152c 	.word	0x2000152c

0800ce34 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800ce38:	f001 ff84 	bl	800ed44 <SUBGRF_GetRadioWakeUpTime>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	3303      	adds	r3, #3
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800ce4c:	f000 f80e 	bl	800ce6c <RadioOnTxTimeoutProcess>
}
 800ce50:	bf00      	nop
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800ce60:	f000 f818 	bl	800ce94 <RadioOnRxTimeoutProcess>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ce70:	4b07      	ldr	r3, [pc, #28]	; (800ce90 <RadioOnTxTimeoutProcess+0x24>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d008      	beq.n	800ce8a <RadioOnTxTimeoutProcess+0x1e>
 800ce78:	4b05      	ldr	r3, [pc, #20]	; (800ce90 <RadioOnTxTimeoutProcess+0x24>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d003      	beq.n	800ce8a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800ce82:	4b03      	ldr	r3, [pc, #12]	; (800ce90 <RadioOnTxTimeoutProcess+0x24>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	4798      	blx	r3
    }
}
 800ce8a:	bf00      	nop
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20001528 	.word	0x20001528

0800ce94 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ce98:	4b07      	ldr	r3, [pc, #28]	; (800ceb8 <RadioOnRxTimeoutProcess+0x24>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d008      	beq.n	800ceb2 <RadioOnRxTimeoutProcess+0x1e>
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <RadioOnRxTimeoutProcess+0x24>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d003      	beq.n	800ceb2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800ceaa:	4b03      	ldr	r3, [pc, #12]	; (800ceb8 <RadioOnRxTimeoutProcess+0x24>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	4798      	blx	r3
    }
}
 800ceb2:	bf00      	nop
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20001528 	.word	0x20001528

0800cebc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800cec6:	4a05      	ldr	r2, [pc, #20]	; (800cedc <RadioOnDioIrq+0x20>)
 800cec8:	88fb      	ldrh	r3, [r7, #6]
 800ceca:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800cece:	f000 f807 	bl	800cee0 <RadioIrqProcess>
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	2000152c 	.word	0x2000152c

0800cee0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800cee0:	b590      	push	{r4, r7, lr}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800ceee:	4ba5      	ldr	r3, [pc, #660]	; (800d184 <RadioIrqProcess+0x2a4>)
 800cef0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cef8:	f000 810c 	beq.w	800d114 <RadioIrqProcess+0x234>
 800cefc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf00:	f300 81c0 	bgt.w	800d284 <RadioIrqProcess+0x3a4>
 800cf04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf08:	f000 80f0 	beq.w	800d0ec <RadioIrqProcess+0x20c>
 800cf0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf10:	f300 81b8 	bgt.w	800d284 <RadioIrqProcess+0x3a4>
 800cf14:	2b80      	cmp	r3, #128	; 0x80
 800cf16:	f000 80d5 	beq.w	800d0c4 <RadioIrqProcess+0x1e4>
 800cf1a:	2b80      	cmp	r3, #128	; 0x80
 800cf1c:	f300 81b2 	bgt.w	800d284 <RadioIrqProcess+0x3a4>
 800cf20:	2b20      	cmp	r3, #32
 800cf22:	dc49      	bgt.n	800cfb8 <RadioIrqProcess+0xd8>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f340 81ad 	ble.w	800d284 <RadioIrqProcess+0x3a4>
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	2b1f      	cmp	r3, #31
 800cf2e:	f200 81a9 	bhi.w	800d284 <RadioIrqProcess+0x3a4>
 800cf32:	a201      	add	r2, pc, #4	; (adr r2, 800cf38 <RadioIrqProcess+0x58>)
 800cf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf38:	0800cfc1 	.word	0x0800cfc1
 800cf3c:	0800cffb 	.word	0x0800cffb
 800cf40:	0800d285 	.word	0x0800d285
 800cf44:	0800d1a1 	.word	0x0800d1a1
 800cf48:	0800d285 	.word	0x0800d285
 800cf4c:	0800d285 	.word	0x0800d285
 800cf50:	0800d285 	.word	0x0800d285
 800cf54:	0800d20f 	.word	0x0800d20f
 800cf58:	0800d285 	.word	0x0800d285
 800cf5c:	0800d285 	.word	0x0800d285
 800cf60:	0800d285 	.word	0x0800d285
 800cf64:	0800d285 	.word	0x0800d285
 800cf68:	0800d285 	.word	0x0800d285
 800cf6c:	0800d285 	.word	0x0800d285
 800cf70:	0800d285 	.word	0x0800d285
 800cf74:	0800d285 	.word	0x0800d285
 800cf78:	0800d285 	.word	0x0800d285
 800cf7c:	0800d285 	.word	0x0800d285
 800cf80:	0800d285 	.word	0x0800d285
 800cf84:	0800d285 	.word	0x0800d285
 800cf88:	0800d285 	.word	0x0800d285
 800cf8c:	0800d285 	.word	0x0800d285
 800cf90:	0800d285 	.word	0x0800d285
 800cf94:	0800d285 	.word	0x0800d285
 800cf98:	0800d285 	.word	0x0800d285
 800cf9c:	0800d285 	.word	0x0800d285
 800cfa0:	0800d285 	.word	0x0800d285
 800cfa4:	0800d285 	.word	0x0800d285
 800cfa8:	0800d285 	.word	0x0800d285
 800cfac:	0800d285 	.word	0x0800d285
 800cfb0:	0800d285 	.word	0x0800d285
 800cfb4:	0800d21f 	.word	0x0800d21f
 800cfb8:	2b40      	cmp	r3, #64	; 0x40
 800cfba:	f000 814b 	beq.w	800d254 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800cfbe:	e161      	b.n	800d284 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800cfc0:	4871      	ldr	r0, [pc, #452]	; (800d188 <RadioIrqProcess+0x2a8>)
 800cfc2:	f002 f9d5 	bl	800f370 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	f000 ffe8 	bl	800df9c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800cfcc:	f001 ffbc 	bl	800ef48 <RFW_Is_LongPacketModeEnabled>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d101      	bne.n	800cfda <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800cfd6:	f001 ffe0 	bl	800ef9a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800cfda:	4b6c      	ldr	r3, [pc, #432]	; (800d18c <RadioIrqProcess+0x2ac>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 8152 	beq.w	800d288 <RadioIrqProcess+0x3a8>
 800cfe4:	4b69      	ldr	r3, [pc, #420]	; (800d18c <RadioIrqProcess+0x2ac>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f000 814c 	beq.w	800d288 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800cff0:	4b66      	ldr	r3, [pc, #408]	; (800d18c <RadioIrqProcess+0x2ac>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4798      	blx	r3
        break;
 800cff8:	e146      	b.n	800d288 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800cffa:	4865      	ldr	r0, [pc, #404]	; (800d190 <RadioIrqProcess+0x2b0>)
 800cffc:	f002 f9b8 	bl	800f370 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800d000:	4b60      	ldr	r3, [pc, #384]	; (800d184 <RadioIrqProcess+0x2a4>)
 800d002:	785b      	ldrb	r3, [r3, #1]
 800d004:	f083 0301 	eor.w	r3, r3, #1
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d014      	beq.n	800d038 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800d00e:	2000      	movs	r0, #0
 800d010:	f000 ffc4 	bl	800df9c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800d014:	2100      	movs	r1, #0
 800d016:	f640 1002 	movw	r0, #2306	; 0x902
 800d01a:	f001 fd43 	bl	800eaa4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800d01e:	f640 1044 	movw	r0, #2372	; 0x944
 800d022:	f001 fd53 	bl	800eacc <SUBGRF_ReadRegister>
 800d026:	4603      	mov	r3, r0
 800d028:	f043 0302 	orr.w	r3, r3, #2
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	4619      	mov	r1, r3
 800d030:	f640 1044 	movw	r0, #2372	; 0x944
 800d034:	f001 fd36 	bl	800eaa4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800d038:	1dfb      	adds	r3, r7, #7
 800d03a:	22ff      	movs	r2, #255	; 0xff
 800d03c:	4619      	mov	r1, r3
 800d03e:	4855      	ldr	r0, [pc, #340]	; (800d194 <RadioIrqProcess+0x2b4>)
 800d040:	f000 fe7c 	bl	800dd3c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800d044:	4854      	ldr	r0, [pc, #336]	; (800d198 <RadioIrqProcess+0x2b8>)
 800d046:	f001 fcdb 	bl	800ea00 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d04a:	4b50      	ldr	r3, [pc, #320]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d036      	beq.n	800d0c0 <RadioIrqProcess+0x1e0>
 800d052:	4b4e      	ldr	r3, [pc, #312]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d031      	beq.n	800d0c0 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 800d05c:	4b49      	ldr	r3, [pc, #292]	; (800d184 <RadioIrqProcess+0x2a4>)
 800d05e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d062:	2b01      	cmp	r3, #1
 800d064:	d10e      	bne.n	800d084 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800d066:	4b49      	ldr	r3, [pc, #292]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	689c      	ldr	r4, [r3, #8]
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	b299      	uxth	r1, r3
 800d070:	4b44      	ldr	r3, [pc, #272]	; (800d184 <RadioIrqProcess+0x2a4>)
 800d072:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800d076:	b21a      	sxth	r2, r3
 800d078:	4b42      	ldr	r3, [pc, #264]	; (800d184 <RadioIrqProcess+0x2a4>)
 800d07a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800d07e:	4845      	ldr	r0, [pc, #276]	; (800d194 <RadioIrqProcess+0x2b4>)
 800d080:	47a0      	blx	r4
                break;
 800d082:	e01e      	b.n	800d0c2 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800d084:	4b3f      	ldr	r3, [pc, #252]	; (800d184 <RadioIrqProcess+0x2a4>)
 800d086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d088:	463a      	mov	r2, r7
 800d08a:	4611      	mov	r1, r2
 800d08c:	4618      	mov	r0, r3
 800d08e:	f001 fea9 	bl	800ede4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800d092:	4b3e      	ldr	r3, [pc, #248]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	689c      	ldr	r4, [r3, #8]
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	b299      	uxth	r1, r3
 800d09c:	4b39      	ldr	r3, [pc, #228]	; (800d184 <RadioIrqProcess+0x2a4>)
 800d09e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800d0a2:	b218      	sxth	r0, r3
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d0aa:	4a3c      	ldr	r2, [pc, #240]	; (800d19c <RadioIrqProcess+0x2bc>)
 800d0ac:	fb82 c203 	smull	ip, r2, r2, r3
 800d0b0:	1192      	asrs	r2, r2, #6
 800d0b2:	17db      	asrs	r3, r3, #31
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	b25b      	sxtb	r3, r3
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	4836      	ldr	r0, [pc, #216]	; (800d194 <RadioIrqProcess+0x2b4>)
 800d0bc:	47a0      	blx	r4
                break;
 800d0be:	e000      	b.n	800d0c2 <RadioIrqProcess+0x1e2>
        }
 800d0c0:	bf00      	nop
        break;
 800d0c2:	e0f0      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        SUBGRF_SetStandby( STDBY_RC );
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f000 ff69 	bl	800df9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d0ca:	4b30      	ldr	r3, [pc, #192]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 80dc 	beq.w	800d28c <RadioIrqProcess+0x3ac>
 800d0d4:	4b2d      	ldr	r3, [pc, #180]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 80d6 	beq.w	800d28c <RadioIrqProcess+0x3ac>
            RadioEvents->CadDone( false );
 800d0e0:	4b2a      	ldr	r3, [pc, #168]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	4798      	blx	r3
        break;
 800d0ea:	e0cf      	b.n	800d28c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	f000 ff55 	bl	800df9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d0f2:	4b26      	ldr	r3, [pc, #152]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f000 80ca 	beq.w	800d290 <RadioIrqProcess+0x3b0>
 800d0fc:	4b23      	ldr	r3, [pc, #140]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	699b      	ldr	r3, [r3, #24]
 800d102:	2b00      	cmp	r3, #0
 800d104:	f000 80c4 	beq.w	800d290 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( true );
 800d108:	4b20      	ldr	r3, [pc, #128]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	2001      	movs	r0, #1
 800d110:	4798      	blx	r3
        break;
 800d112:	e0bd      	b.n	800d290 <RadioIrqProcess+0x3b0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800d114:	f000 fdf8 	bl	800dd08 <SUBGRF_GetOperatingMode>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b04      	cmp	r3, #4
 800d11c:	d115      	bne.n	800d14a <RadioIrqProcess+0x26a>
            TimerStop( &TxTimeoutTimer );
 800d11e:	481a      	ldr	r0, [pc, #104]	; (800d188 <RadioIrqProcess+0x2a8>)
 800d120:	f002 f926 	bl	800f370 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800d124:	2000      	movs	r0, #0
 800d126:	f000 ff39 	bl	800df9c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d12a:	4b18      	ldr	r3, [pc, #96]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 80b0 	beq.w	800d294 <RadioIrqProcess+0x3b4>
 800d134:	4b15      	ldr	r3, [pc, #84]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 80aa 	beq.w	800d294 <RadioIrqProcess+0x3b4>
                RadioEvents->TxTimeout( );
 800d140:	4b12      	ldr	r3, [pc, #72]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	4798      	blx	r3
        break;
 800d148:	e0a4      	b.n	800d294 <RadioIrqProcess+0x3b4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800d14a:	f000 fddd 	bl	800dd08 <SUBGRF_GetOperatingMode>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b05      	cmp	r3, #5
 800d152:	f040 809f 	bne.w	800d294 <RadioIrqProcess+0x3b4>
            TimerStop( &RxTimeoutTimer );
 800d156:	480e      	ldr	r0, [pc, #56]	; (800d190 <RadioIrqProcess+0x2b0>)
 800d158:	f002 f90a 	bl	800f370 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800d15c:	2000      	movs	r0, #0
 800d15e:	f000 ff1d 	bl	800df9c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d162:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 8094 	beq.w	800d294 <RadioIrqProcess+0x3b4>
 800d16c:	4b07      	ldr	r3, [pc, #28]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 808e 	beq.w	800d294 <RadioIrqProcess+0x3b4>
                RadioEvents->RxTimeout( );
 800d178:	4b04      	ldr	r3, [pc, #16]	; (800d18c <RadioIrqProcess+0x2ac>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	4798      	blx	r3
        break;
 800d180:	e088      	b.n	800d294 <RadioIrqProcess+0x3b4>
 800d182:	bf00      	nop
 800d184:	2000152c 	.word	0x2000152c
 800d188:	20001588 	.word	0x20001588
 800d18c:	20001528 	.word	0x20001528
 800d190:	200015a0 	.word	0x200015a0
 800d194:	20001428 	.word	0x20001428
 800d198:	20001550 	.word	0x20001550
 800d19c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800d1a0:	4b43      	ldr	r3, [pc, #268]	; (800d2b0 <RadioIrqProcess+0x3d0>)
 800d1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d077      	beq.n	800d298 <RadioIrqProcess+0x3b8>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800d1a8:	4a42      	ldr	r2, [pc, #264]	; (800d2b4 <RadioIrqProcess+0x3d4>)
 800d1aa:	4b41      	ldr	r3, [pc, #260]	; (800d2b0 <RadioIrqProcess+0x3d0>)
 800d1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ae:	0c1b      	lsrs	r3, r3, #16
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	f640 1003 	movw	r0, #2307	; 0x903
 800d1b8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800d1ba:	4a3e      	ldr	r2, [pc, #248]	; (800d2b4 <RadioIrqProcess+0x3d4>)
 800d1bc:	4b3c      	ldr	r3, [pc, #240]	; (800d2b0 <RadioIrqProcess+0x3d0>)
 800d1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1c0:	0a1b      	lsrs	r3, r3, #8
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	f640 1004 	movw	r0, #2308	; 0x904
 800d1ca:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800d1cc:	4a39      	ldr	r2, [pc, #228]	; (800d2b4 <RadioIrqProcess+0x3d4>)
 800d1ce:	4b38      	ldr	r3, [pc, #224]	; (800d2b0 <RadioIrqProcess+0x3d0>)
 800d1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	f640 1005 	movw	r0, #2309	; 0x905
 800d1da:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800d1dc:	4c35      	ldr	r4, [pc, #212]	; (800d2b4 <RadioIrqProcess+0x3d4>)
 800d1de:	4b36      	ldr	r3, [pc, #216]	; (800d2b8 <RadioIrqProcess+0x3d8>)
 800d1e0:	f640 1002 	movw	r0, #2306	; 0x902
 800d1e4:	4798      	blx	r3
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	f043 0301 	orr.w	r3, r3, #1
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	f640 1002 	movw	r0, #2306	; 0x902
 800d1f4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800d1f6:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <RadioIrqProcess+0x3d0>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	2200      	movs	r2, #0
 800d200:	f240 2162 	movw	r1, #610	; 0x262
 800d204:	f240 2062 	movw	r0, #610	; 0x262
 800d208:	f001 f89c 	bl	800e344 <SUBGRF_SetDioIrqParams>
        break;
 800d20c:	e044      	b.n	800d298 <RadioIrqProcess+0x3b8>
        if( 1UL == RFW_Is_Init( ) )
 800d20e:	f001 fe94 	bl	800ef3a <RFW_Is_Init>
 800d212:	4603      	mov	r3, r0
 800d214:	2b01      	cmp	r3, #1
 800d216:	d141      	bne.n	800d29c <RadioIrqProcess+0x3bc>
            RFW_ReceivePayload( );
 800d218:	f001 fec5 	bl	800efa6 <RFW_ReceivePayload>
        break;
 800d21c:	e03e      	b.n	800d29c <RadioIrqProcess+0x3bc>
        TimerStop( &RxTimeoutTimer );
 800d21e:	4827      	ldr	r0, [pc, #156]	; (800d2bc <RadioIrqProcess+0x3dc>)
 800d220:	f002 f8a6 	bl	800f370 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800d224:	4b22      	ldr	r3, [pc, #136]	; (800d2b0 <RadioIrqProcess+0x3d0>)
 800d226:	785b      	ldrb	r3, [r3, #1]
 800d228:	f083 0301 	eor.w	r3, r3, #1
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800d232:	2000      	movs	r0, #0
 800d234:	f000 feb2 	bl	800df9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d238:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <RadioIrqProcess+0x3e0>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d02f      	beq.n	800d2a0 <RadioIrqProcess+0x3c0>
 800d240:	4b1f      	ldr	r3, [pc, #124]	; (800d2c0 <RadioIrqProcess+0x3e0>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d02a      	beq.n	800d2a0 <RadioIrqProcess+0x3c0>
            RadioEvents->RxTimeout( );
 800d24a:	4b1d      	ldr	r3, [pc, #116]	; (800d2c0 <RadioIrqProcess+0x3e0>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	4798      	blx	r3
        break;
 800d252:	e025      	b.n	800d2a0 <RadioIrqProcess+0x3c0>
        if( SubgRf.RxContinuous == false )
 800d254:	4b16      	ldr	r3, [pc, #88]	; (800d2b0 <RadioIrqProcess+0x3d0>)
 800d256:	785b      	ldrb	r3, [r3, #1]
 800d258:	f083 0301 	eor.w	r3, r3, #1
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d002      	beq.n	800d268 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800d262:	2000      	movs	r0, #0
 800d264:	f000 fe9a 	bl	800df9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800d268:	4b15      	ldr	r3, [pc, #84]	; (800d2c0 <RadioIrqProcess+0x3e0>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d019      	beq.n	800d2a4 <RadioIrqProcess+0x3c4>
 800d270:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <RadioIrqProcess+0x3e0>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d014      	beq.n	800d2a4 <RadioIrqProcess+0x3c4>
            RadioEvents->RxError( );
 800d27a:	4b11      	ldr	r3, [pc, #68]	; (800d2c0 <RadioIrqProcess+0x3e0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	4798      	blx	r3
        break;
 800d282:	e00f      	b.n	800d2a4 <RadioIrqProcess+0x3c4>
        break;
 800d284:	bf00      	nop
 800d286:	e00e      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d288:	bf00      	nop
 800d28a:	e00c      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d28c:	bf00      	nop
 800d28e:	e00a      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d290:	bf00      	nop
 800d292:	e008      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d294:	bf00      	nop
 800d296:	e006      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d298:	bf00      	nop
 800d29a:	e004      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d29c:	bf00      	nop
 800d29e:	e002      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d2a0:	bf00      	nop
 800d2a2:	e000      	b.n	800d2a6 <RadioIrqProcess+0x3c6>
        break;
 800d2a4:	bf00      	nop
    }
}
 800d2a6:	bf00      	nop
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd90      	pop	{r4, r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	2000152c 	.word	0x2000152c
 800d2b4:	0800ccef 	.word	0x0800ccef
 800d2b8:	0800cd13 	.word	0x0800cd13
 800d2bc:	200015a0 	.word	0x200015a0
 800d2c0:	20001528 	.word	0x20001528

0800d2c4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800d2c8:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <RadioTxPrbs+0x2c>)
 800d2ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d2ce:	2101      	movs	r1, #1
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f001 fcdb 	bl	800ec8c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800d2d6:	4b07      	ldr	r3, [pc, #28]	; (800d2f4 <RadioTxPrbs+0x30>)
 800d2d8:	212d      	movs	r1, #45	; 0x2d
 800d2da:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800d2de:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800d2e0:	f000 ff1f 	bl	800e122 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800d2e4:	4804      	ldr	r0, [pc, #16]	; (800d2f8 <RadioTxPrbs+0x34>)
 800d2e6:	f000 fe75 	bl	800dfd4 <SUBGRF_SetTx>
}
 800d2ea:	bf00      	nop
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	2000152c 	.word	0x2000152c
 800d2f4:	0800ccef 	.word	0x0800ccef
 800d2f8:	000fffff 	.word	0x000fffff

0800d2fc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800d306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f001 fce6 	bl	800ecdc <SUBGRF_SetRfTxPower>
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800d314:	210e      	movs	r1, #14
 800d316:	f640 101f 	movw	r0, #2335	; 0x91f
 800d31a:	f001 fbc3 	bl	800eaa4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
 800d320:	2101      	movs	r1, #1
 800d322:	4618      	mov	r0, r3
 800d324:	f001 fcb2 	bl	800ec8c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800d328:	f000 fef2 	bl	800e110 <SUBGRF_SetTxContinuousWave>
}
 800d32c:	bf00      	nop
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800d334:	b480      	push	{r7}
 800d336:	b089      	sub	sp, #36	; 0x24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800d34a:	2300      	movs	r3, #0
 800d34c:	61bb      	str	r3, [r7, #24]
 800d34e:	e011      	b.n	800d374 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	4413      	add	r3, r2
 800d356:	781a      	ldrb	r2, [r3, #0]
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	68b9      	ldr	r1, [r7, #8]
 800d35c:	440b      	add	r3, r1
 800d35e:	43d2      	mvns	r2, r2
 800d360:	b2d2      	uxtb	r2, r2
 800d362:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	4413      	add	r3, r2
 800d36a:	2200      	movs	r2, #0
 800d36c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	3301      	adds	r3, #1
 800d372:	61bb      	str	r3, [r7, #24]
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	429a      	cmp	r2, r3
 800d37a:	dbe9      	blt.n	800d350 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800d37c:	2300      	movs	r3, #0
 800d37e:	61bb      	str	r3, [r7, #24]
 800d380:	e049      	b.n	800d416 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	425a      	negs	r2, r3
 800d386:	f003 0307 	and.w	r3, r3, #7
 800d38a:	f002 0207 	and.w	r2, r2, #7
 800d38e:	bf58      	it	pl
 800d390:	4253      	negpl	r3, r2
 800d392:	b2db      	uxtb	r3, r3
 800d394:	f1c3 0307 	rsb	r3, r3, #7
 800d398:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	da00      	bge.n	800d3a2 <payload_integration+0x6e>
 800d3a0:	3307      	adds	r3, #7
 800d3a2:	10db      	asrs	r3, r3, #3
 800d3a4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	425a      	negs	r2, r3
 800d3ac:	f003 0307 	and.w	r3, r3, #7
 800d3b0:	f002 0207 	and.w	r2, r2, #7
 800d3b4:	bf58      	it	pl
 800d3b6:	4253      	negpl	r3, r2
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	f1c3 0307 	rsb	r3, r3, #7
 800d3be:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	da00      	bge.n	800d3ca <payload_integration+0x96>
 800d3c8:	3307      	adds	r3, #7
 800d3ca:	10db      	asrs	r3, r3, #3
 800d3cc:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800d3ce:	7dbb      	ldrb	r3, [r7, #22]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	fa42 f303 	asr.w	r3, r2, r3
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	f003 0301 	and.w	r3, r3, #1
 800d3e4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800d3e6:	7ffa      	ldrb	r2, [r7, #31]
 800d3e8:	7cfb      	ldrb	r3, [r7, #19]
 800d3ea:	4053      	eors	r3, r2
 800d3ec:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800d3ee:	7d3b      	ldrb	r3, [r7, #20]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	b25a      	sxtb	r2, r3
 800d3f8:	7ff9      	ldrb	r1, [r7, #31]
 800d3fa:	7d7b      	ldrb	r3, [r7, #21]
 800d3fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d400:	b25b      	sxtb	r3, r3
 800d402:	4313      	orrs	r3, r2
 800d404:	b259      	sxtb	r1, r3
 800d406:	7d3b      	ldrb	r3, [r7, #20]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	4413      	add	r3, r2
 800d40c:	b2ca      	uxtb	r2, r1
 800d40e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	3301      	adds	r3, #1
 800d414:	61bb      	str	r3, [r7, #24]
 800d416:	79fb      	ldrb	r3, [r7, #7]
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	69ba      	ldr	r2, [r7, #24]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	dbb0      	blt.n	800d382 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800d420:	7ffb      	ldrb	r3, [r7, #31]
 800d422:	01db      	lsls	r3, r3, #7
 800d424:	b25a      	sxtb	r2, r3
 800d426:	7ffb      	ldrb	r3, [r7, #31]
 800d428:	019b      	lsls	r3, r3, #6
 800d42a:	b25b      	sxtb	r3, r3
 800d42c:	4313      	orrs	r3, r2
 800d42e:	b25b      	sxtb	r3, r3
 800d430:	7ffa      	ldrb	r2, [r7, #31]
 800d432:	2a00      	cmp	r2, #0
 800d434:	d101      	bne.n	800d43a <payload_integration+0x106>
 800d436:	2220      	movs	r2, #32
 800d438:	e000      	b.n	800d43c <payload_integration+0x108>
 800d43a:	2200      	movs	r2, #0
 800d43c:	4313      	orrs	r3, r2
 800d43e:	b259      	sxtb	r1, r3
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	4413      	add	r3, r2
 800d446:	b2ca      	uxtb	r2, r1
 800d448:	701a      	strb	r2, [r3, #0]
}
 800d44a:	bf00      	nop
 800d44c:	3724      	adds	r7, #36	; 0x24
 800d44e:	46bd      	mov	sp, r7
 800d450:	bc80      	pop	{r7}
 800d452:	4770      	bx	lr

0800d454 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08c      	sub	sp, #48	; 0x30
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	607a      	str	r2, [r7, #4]
 800d45e:	603b      	str	r3, [r7, #0]
 800d460:	4603      	mov	r3, r0
 800d462:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800d468:	2300      	movs	r3, #0
 800d46a:	623b      	str	r3, [r7, #32]
 800d46c:	2300      	movs	r3, #0
 800d46e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800d470:	f001 fd5d 	bl	800ef2e <RFW_DeInit>

    if( rxContinuous != 0 )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	bf14      	ite	ne
 800d484:	2301      	movne	r3, #1
 800d486:	2300      	moveq	r3, #0
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	4ba3      	ldr	r3, [pc, #652]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d48c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d003      	beq.n	800d49c <RadioSetRxGenericConfig+0x48>
 800d494:	2b01      	cmp	r3, #1
 800d496:	f000 80dc 	beq.w	800d652 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800d49a:	e194      	b.n	800d7c6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d003      	beq.n	800d4ac <RadioSetRxGenericConfig+0x58>
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800d4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b0:	e18a      	b.n	800d7c8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	7f9b      	ldrb	r3, [r3, #30]
 800d4b6:	2b08      	cmp	r3, #8
 800d4b8:	d902      	bls.n	800d4c0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800d4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d4be:	e183      	b.n	800d7c8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	6919      	ldr	r1, [r3, #16]
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	7f9b      	ldrb	r3, [r3, #30]
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	f107 0320 	add.w	r3, r7, #32
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f001 fd79 	bl	800efc6 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bf14      	ite	ne
 800d4dc:	2301      	movne	r3, #1
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 fe26 	bl	800e134 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800d4e8:	4b8b      	ldr	r3, [pc, #556]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	4a88      	ldr	r2, [pc, #544]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d4f6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d4fe:	4b86      	ldr	r3, [pc, #536]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	4618      	mov	r0, r3
 800d50a:	f001 fc43 	bl	800ed94 <SUBGRF_GetFskBandwidthRegValue>
 800d50e:	4603      	mov	r3, r0
 800d510:	461a      	mov	r2, r3
 800d512:	4b81      	ldr	r3, [pc, #516]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800d518:	4b7f      	ldr	r3, [pc, #508]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	b29b      	uxth	r3, r3
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	b29a      	uxth	r2, r3
 800d528:	4b7b      	ldr	r3, [pc, #492]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d52a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	7fda      	ldrb	r2, [r3, #31]
 800d530:	4b79      	ldr	r3, [pc, #484]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d532:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	7f9b      	ldrb	r3, [r3, #30]
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	4b76      	ldr	r3, [pc, #472]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d53e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d546:	4b74      	ldr	r3, [pc, #464]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d548:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d550:	2b00      	cmp	r3, #0
 800d552:	d105      	bne.n	800d560 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	695b      	ldr	r3, [r3, #20]
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	4b6f      	ldr	r3, [pc, #444]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d55c:	759a      	strb	r2, [r3, #22]
 800d55e:	e00b      	b.n	800d578 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d566:	2b02      	cmp	r3, #2
 800d568:	d103      	bne.n	800d572 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800d56a:	4b6b      	ldr	r3, [pc, #428]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d56c:	22ff      	movs	r2, #255	; 0xff
 800d56e:	759a      	strb	r2, [r3, #22]
 800d570:	e002      	b.n	800d578 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800d572:	4b69      	ldr	r3, [pc, #420]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d574:	22ff      	movs	r2, #255	; 0xff
 800d576:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d004      	beq.n	800d58c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d12d      	bne.n	800d5e8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d592:	2bf1      	cmp	r3, #241	; 0xf1
 800d594:	d00c      	beq.n	800d5b0 <RadioSetRxGenericConfig+0x15c>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d59c:	2bf2      	cmp	r3, #242	; 0xf2
 800d59e:	d007      	beq.n	800d5b0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d002      	beq.n	800d5b0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800d5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ae:	e10b      	b.n	800d7c8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800d5b8:	4b58      	ldr	r3, [pc, #352]	; (800d71c <RadioSetRxGenericConfig+0x2c8>)
 800d5ba:	6819      	ldr	r1, [r3, #0]
 800d5bc:	f107 0314 	add.w	r3, r7, #20
 800d5c0:	4a57      	ldr	r2, [pc, #348]	; (800d720 <RadioSetRxGenericConfig+0x2cc>)
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f001 fca6 	bl	800ef14 <RFW_Init>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <RadioSetRxGenericConfig+0x180>
                return -1;
 800d5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d2:	e0f9      	b.n	800d7c8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800d5d4:	4b50      	ldr	r3, [pc, #320]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800d5da:	4b4f      	ldr	r3, [pc, #316]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d5dc:	2201      	movs	r2, #1
 800d5de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800d5e0:	4b4d      	ldr	r3, [pc, #308]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	755a      	strb	r2, [r3, #21]
        {
 800d5e6:	e00e      	b.n	800d606 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800d5ee:	4b4a      	ldr	r3, [pc, #296]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d5f0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d5f8:	4b47      	ldr	r3, [pc, #284]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d5fa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d602:	4b45      	ldr	r3, [pc, #276]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d604:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800d606:	f7ff fa70 	bl	800caea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800d60a:	2000      	movs	r0, #0
 800d60c:	f7fe fc0c 	bl	800be28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d610:	4844      	ldr	r0, [pc, #272]	; (800d724 <RadioSetRxGenericConfig+0x2d0>)
 800d612:	f001 f82d 	bl	800e670 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d616:	4844      	ldr	r0, [pc, #272]	; (800d728 <RadioSetRxGenericConfig+0x2d4>)
 800d618:	f001 f8fc 	bl	800e814 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800d61c:	f107 0320 	add.w	r3, r7, #32
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fbc0 	bl	800dda6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	8b9b      	ldrh	r3, [r3, #28]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fc0a 	bl	800de44 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	8b1b      	ldrh	r3, [r3, #24]
 800d634:	4618      	mov	r0, r3
 800d636:	f000 fbe5 	bl	800de04 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d640:	fb03 f202 	mul.w	r2, r3, r2
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	fbb2 f3f3 	udiv	r3, r2, r3
 800d64c:	4a32      	ldr	r2, [pc, #200]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d64e:	6093      	str	r3, [r2, #8]
        break;
 800d650:	e0b9      	b.n	800d7c6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d656:	2b00      	cmp	r3, #0
 800d658:	d102      	bne.n	800d660 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800d65a:	f04f 33ff 	mov.w	r3, #4294967295
 800d65e:	e0b3      	b.n	800d7c8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d666:	2b01      	cmp	r3, #1
 800d668:	d104      	bne.n	800d674 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d672:	e002      	b.n	800d67a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800d674:	23ff      	movs	r3, #255	; 0xff
 800d676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bf14      	ite	ne
 800d682:	2301      	movne	r3, #1
 800d684:	2300      	moveq	r3, #0
 800d686:	b2db      	uxtb	r3, r3
 800d688:	4618      	mov	r0, r3
 800d68a:	f000 fd53 	bl	800e134 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	b2db      	uxtb	r3, r3
 800d692:	4618      	mov	r0, r3
 800d694:	f000 fd5d 	bl	800e152 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d698:	4b1f      	ldr	r3, [pc, #124]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d6a6:	4b1c      	ldr	r3, [pc, #112]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d6a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800d6b2:	4b19      	ldr	r3, [pc, #100]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800d6be:	4b16      	ldr	r3, [pc, #88]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d6c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d010      	beq.n	800d6f0 <RadioSetRxGenericConfig+0x29c>
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	dc2c      	bgt.n	800d72c <RadioSetRxGenericConfig+0x2d8>
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <RadioSetRxGenericConfig+0x288>
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d005      	beq.n	800d6e6 <RadioSetRxGenericConfig+0x292>
            break;
 800d6da:	e027      	b.n	800d72c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d6dc:	4b0e      	ldr	r3, [pc, #56]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d6e4:	e023      	b.n	800d72e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d6ee:	e01e      	b.n	800d72e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6f6:	2b0b      	cmp	r3, #11
 800d6f8:	d004      	beq.n	800d704 <RadioSetRxGenericConfig+0x2b0>
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d700:	2b0c      	cmp	r3, #12
 800d702:	d104      	bne.n	800d70e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d704:	4b04      	ldr	r3, [pc, #16]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d70c:	e00f      	b.n	800d72e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d70e:	4b02      	ldr	r3, [pc, #8]	; (800d718 <RadioSetRxGenericConfig+0x2c4>)
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d716:	e00a      	b.n	800d72e <RadioSetRxGenericConfig+0x2da>
 800d718:	2000152c 	.word	0x2000152c
 800d71c:	20001528 	.word	0x20001528
 800d720:	200015a0 	.word	0x200015a0
 800d724:	20001564 	.word	0x20001564
 800d728:	2000153a 	.word	0x2000153a
            break;
 800d72c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d72e:	4b28      	ldr	r3, [pc, #160]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d730:	2201      	movs	r2, #1
 800d732:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800d738:	4b25      	ldr	r3, [pc, #148]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d73a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800d742:	4b23      	ldr	r3, [pc, #140]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d744:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800d746:	4a22      	ldr	r2, [pc, #136]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d74c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d754:	4b1e      	ldr	r3, [pc, #120]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d756:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800d760:	4b1b      	ldr	r3, [pc, #108]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800d766:	f7ff f9c0 	bl	800caea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800d76a:	2001      	movs	r0, #1
 800d76c:	f7fe fb5c 	bl	800be28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d770:	4818      	ldr	r0, [pc, #96]	; (800d7d4 <RadioSetRxGenericConfig+0x380>)
 800d772:	f000 ff7d 	bl	800e670 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d776:	4818      	ldr	r0, [pc, #96]	; (800d7d8 <RadioSetRxGenericConfig+0x384>)
 800d778:	f001 f84c 	bl	800e814 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800d77c:	4b14      	ldr	r3, [pc, #80]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d77e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d782:	2b01      	cmp	r3, #1
 800d784:	d10d      	bne.n	800d7a2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800d786:	f240 7036 	movw	r0, #1846	; 0x736
 800d78a:	f001 f99f 	bl	800eacc <SUBGRF_ReadRegister>
 800d78e:	4603      	mov	r3, r0
 800d790:	f023 0304 	bic.w	r3, r3, #4
 800d794:	b2db      	uxtb	r3, r3
 800d796:	4619      	mov	r1, r3
 800d798:	f240 7036 	movw	r0, #1846	; 0x736
 800d79c:	f001 f982 	bl	800eaa4 <SUBGRF_WriteRegister>
 800d7a0:	e00c      	b.n	800d7bc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800d7a2:	f240 7036 	movw	r0, #1846	; 0x736
 800d7a6:	f001 f991 	bl	800eacc <SUBGRF_ReadRegister>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	f043 0304 	orr.w	r3, r3, #4
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f240 7036 	movw	r0, #1846	; 0x736
 800d7b8:	f001 f974 	bl	800eaa4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800d7bc:	4b04      	ldr	r3, [pc, #16]	; (800d7d0 <RadioSetRxGenericConfig+0x37c>)
 800d7be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7c2:	609a      	str	r2, [r3, #8]
        break;
 800d7c4:	bf00      	nop
    }
    return status;
 800d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3730      	adds	r7, #48	; 0x30
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	2000152c 	.word	0x2000152c
 800d7d4:	20001564 	.word	0x20001564
 800d7d8:	2000153a 	.word	0x2000153a

0800d7dc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08e      	sub	sp, #56	; 0x38
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60b9      	str	r1, [r7, #8]
 800d7e4:	607b      	str	r3, [r7, #4]
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	73fb      	strb	r3, [r7, #15]
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800d7f6:	f001 fb9a 	bl	800ef2e <RFW_DeInit>
    switch( modem )
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	f200 8204 	bhi.w	800dc0a <RadioSetTxGenericConfig+0x42e>
 800d802:	a201      	add	r2, pc, #4	; (adr r2, 800d808 <RadioSetTxGenericConfig+0x2c>)
 800d804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d808:	0800d98d 	.word	0x0800d98d
 800d80c:	0800dad5 	.word	0x0800dad5
 800d810:	0800dbcd 	.word	0x0800dbcd
 800d814:	0800d819 	.word	0x0800d819
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	7c9b      	ldrb	r3, [r3, #18]
 800d81c:	2b08      	cmp	r3, #8
 800d81e:	d902      	bls.n	800d826 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800d820:	f04f 33ff 	mov.w	r3, #4294967295
 800d824:	e206      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	6899      	ldr	r1, [r3, #8]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	7c9b      	ldrb	r3, [r3, #18]
 800d82e:	b29a      	uxth	r2, r3
 800d830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d834:	4618      	mov	r0, r3
 800d836:	f001 fbc6 	bl	800efc6 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d102      	bne.n	800d848 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800d842:	f04f 33ff 	mov.w	r3, #4294967295
 800d846:	e1f5      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f242 7210 	movw	r2, #10000	; 0x2710
 800d850:	4293      	cmp	r3, r2
 800d852:	d813      	bhi.n	800d87c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800d854:	2302      	movs	r3, #2
 800d856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800d85a:	4b99      	ldr	r3, [pc, #612]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d85c:	2203      	movs	r2, #3
 800d85e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800d860:	4b97      	ldr	r3, [pc, #604]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d862:	2203      	movs	r2, #3
 800d864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a94      	ldr	r2, [pc, #592]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d86e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	7cda      	ldrb	r2, [r3, #19]
 800d874:	4b92      	ldr	r3, [pc, #584]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d87a:	e017      	b.n	800d8ac <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800d882:	4b8f      	ldr	r3, [pc, #572]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d884:	2200      	movs	r2, #0
 800d886:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800d888:	4b8d      	ldr	r3, [pc, #564]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a8a      	ldr	r2, [pc, #552]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d896:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	7cda      	ldrb	r2, [r3, #19]
 800d89c:	4b88      	ldr	r3, [pc, #544]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d89e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	089b      	lsrs	r3, r3, #2
 800d8a8:	4a85      	ldr	r2, [pc, #532]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d8aa:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	4b82      	ldr	r3, [pc, #520]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d8b8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800d8ba:	4b81      	ldr	r3, [pc, #516]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d8bc:	2204      	movs	r2, #4
 800d8be:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	7c9b      	ldrb	r3, [r3, #18]
 800d8c4:	00db      	lsls	r3, r3, #3
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	4b7d      	ldr	r3, [pc, #500]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d8ca:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800d8cc:	4b7c      	ldr	r3, [pc, #496]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	7d9b      	ldrb	r3, [r3, #22]
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	d003      	beq.n	800d8e2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	7d1b      	ldrb	r3, [r3, #20]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d12b      	bne.n	800d93a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	7d5b      	ldrb	r3, [r3, #21]
 800d8e6:	2bf1      	cmp	r3, #241	; 0xf1
 800d8e8:	d00a      	beq.n	800d900 <RadioSetTxGenericConfig+0x124>
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	7d5b      	ldrb	r3, [r3, #21]
 800d8ee:	2bf2      	cmp	r3, #242	; 0xf2
 800d8f0:	d006      	beq.n	800d900 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	7d5b      	ldrb	r3, [r3, #21]
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d002      	beq.n	800d900 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800d8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fe:	e199      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800d904:	2301      	movs	r3, #1
 800d906:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800d90a:	4b6e      	ldr	r3, [pc, #440]	; (800dac4 <RadioSetTxGenericConfig+0x2e8>)
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	f107 0320 	add.w	r3, r7, #32
 800d912:	4a6d      	ldr	r2, [pc, #436]	; (800dac8 <RadioSetTxGenericConfig+0x2ec>)
 800d914:	4618      	mov	r0, r3
 800d916:	f001 fafd 	bl	800ef14 <RFW_Init>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800d920:	f04f 33ff 	mov.w	r3, #4294967295
 800d924:	e186      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800d926:	4b66      	ldr	r3, [pc, #408]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d928:	2200      	movs	r2, #0
 800d92a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800d92c:	4b64      	ldr	r3, [pc, #400]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d92e:	2201      	movs	r2, #1
 800d930:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800d932:	4b63      	ldr	r3, [pc, #396]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d934:	2200      	movs	r2, #0
 800d936:	755a      	strb	r2, [r3, #21]
        {
 800d938:	e00b      	b.n	800d952 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	7d5a      	ldrb	r2, [r3, #21]
 800d93e:	4b60      	ldr	r3, [pc, #384]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d940:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	7d9a      	ldrb	r2, [r3, #22]
 800d946:	4b5e      	ldr	r3, [pc, #376]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d948:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	7d1a      	ldrb	r2, [r3, #20]
 800d94e:	4b5c      	ldr	r3, [pc, #368]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d950:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800d952:	f7ff f8ca 	bl	800caea <RadioStandby>
        RadioSetModem( radio_modem );
 800d956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fe fa64 	bl	800be28 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d960:	485a      	ldr	r0, [pc, #360]	; (800dacc <RadioSetTxGenericConfig+0x2f0>)
 800d962:	f000 fe85 	bl	800e670 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d966:	485a      	ldr	r0, [pc, #360]	; (800dad0 <RadioSetTxGenericConfig+0x2f4>)
 800d968:	f000 ff54 	bl	800e814 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800d96c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d970:	4618      	mov	r0, r3
 800d972:	f000 fa18 	bl	800dda6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	8a1b      	ldrh	r3, [r3, #16]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 fa62 	bl	800de44 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	899b      	ldrh	r3, [r3, #12]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 fa3d 	bl	800de04 <SUBGRF_SetCrcPolynomial>
        break;
 800d98a:	e13f      	b.n	800dc0c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d102      	bne.n	800d99a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800d994:	f04f 33ff 	mov.w	r3, #4294967295
 800d998:	e14c      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	7c9b      	ldrb	r3, [r3, #18]
 800d99e:	2b08      	cmp	r3, #8
 800d9a0:	d902      	bls.n	800d9a8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800d9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9a6:	e145      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	6899      	ldr	r1, [r3, #8]
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	7c9b      	ldrb	r3, [r3, #18]
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 fb05 	bl	800efc6 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800d9bc:	4b40      	ldr	r3, [pc, #256]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a3d      	ldr	r2, [pc, #244]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d9ca:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	7cda      	ldrb	r2, [r3, #19]
 800d9d0:	4b3b      	ldr	r3, [pc, #236]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d9d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	699b      	ldr	r3, [r3, #24]
 800d9da:	4a39      	ldr	r2, [pc, #228]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d9dc:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800d9de:	4b38      	ldr	r3, [pc, #224]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	b29a      	uxth	r2, r3
 800d9ee:	4b34      	ldr	r3, [pc, #208]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d9f0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800d9f2:	4b33      	ldr	r3, [pc, #204]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800d9f4:	2204      	movs	r2, #4
 800d9f6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	7c9b      	ldrb	r3, [r3, #18]
 800d9fc:	00db      	lsls	r3, r3, #3
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	4b2f      	ldr	r3, [pc, #188]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da02:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800da04:	4b2e      	ldr	r3, [pc, #184]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da06:	2200      	movs	r2, #0
 800da08:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	7d9b      	ldrb	r3, [r3, #22]
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d003      	beq.n	800da1a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	7d1b      	ldrb	r3, [r3, #20]
 800da16:	2b02      	cmp	r3, #2
 800da18:	d12a      	bne.n	800da70 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	7d5b      	ldrb	r3, [r3, #21]
 800da1e:	2bf1      	cmp	r3, #241	; 0xf1
 800da20:	d00a      	beq.n	800da38 <RadioSetTxGenericConfig+0x25c>
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	7d5b      	ldrb	r3, [r3, #21]
 800da26:	2bf2      	cmp	r3, #242	; 0xf2
 800da28:	d006      	beq.n	800da38 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	7d5b      	ldrb	r3, [r3, #21]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d002      	beq.n	800da38 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800da32:	f04f 33ff 	mov.w	r3, #4294967295
 800da36:	e0fd      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800da38:	2301      	movs	r3, #1
 800da3a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800da40:	4b20      	ldr	r3, [pc, #128]	; (800dac4 <RadioSetTxGenericConfig+0x2e8>)
 800da42:	6819      	ldr	r1, [r3, #0]
 800da44:	f107 0314 	add.w	r3, r7, #20
 800da48:	4a1f      	ldr	r2, [pc, #124]	; (800dac8 <RadioSetTxGenericConfig+0x2ec>)
 800da4a:	4618      	mov	r0, r3
 800da4c:	f001 fa62 	bl	800ef14 <RFW_Init>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800da56:	f04f 33ff 	mov.w	r3, #4294967295
 800da5a:	e0eb      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800da5c:	4b18      	ldr	r3, [pc, #96]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da5e:	2200      	movs	r2, #0
 800da60:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800da62:	4b17      	ldr	r3, [pc, #92]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da64:	2201      	movs	r2, #1
 800da66:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800da68:	4b15      	ldr	r3, [pc, #84]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	755a      	strb	r2, [r3, #21]
        {
 800da6e:	e00b      	b.n	800da88 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	7d5a      	ldrb	r2, [r3, #21]
 800da74:	4b12      	ldr	r3, [pc, #72]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da76:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	7d9a      	ldrb	r2, [r3, #22]
 800da7c:	4b10      	ldr	r3, [pc, #64]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da7e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	7d1a      	ldrb	r2, [r3, #20]
 800da84:	4b0e      	ldr	r3, [pc, #56]	; (800dac0 <RadioSetTxGenericConfig+0x2e4>)
 800da86:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800da88:	f7ff f82f 	bl	800caea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800da8c:	2000      	movs	r0, #0
 800da8e:	f7fe f9cb 	bl	800be28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800da92:	480e      	ldr	r0, [pc, #56]	; (800dacc <RadioSetTxGenericConfig+0x2f0>)
 800da94:	f000 fdec 	bl	800e670 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800da98:	480d      	ldr	r0, [pc, #52]	; (800dad0 <RadioSetTxGenericConfig+0x2f4>)
 800da9a:	f000 febb 	bl	800e814 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800da9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800daa2:	4618      	mov	r0, r3
 800daa4:	f000 f97f 	bl	800dda6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	8a1b      	ldrh	r3, [r3, #16]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f9c9 	bl	800de44 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	899b      	ldrh	r3, [r3, #12]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 f9a4 	bl	800de04 <SUBGRF_SetCrcPolynomial>
        break;
 800dabc:	e0a6      	b.n	800dc0c <RadioSetTxGenericConfig+0x430>
 800dabe:	bf00      	nop
 800dac0:	2000152c 	.word	0x2000152c
 800dac4:	20001528 	.word	0x20001528
 800dac8:	20001588 	.word	0x20001588
 800dacc:	20001564 	.word	0x20001564
 800dad0:	2000153a 	.word	0x2000153a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dad4:	4b59      	ldr	r3, [pc, #356]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	781a      	ldrb	r2, [r3, #0]
 800dae0:	4b56      	ldr	r3, [pc, #344]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	785a      	ldrb	r2, [r3, #1]
 800daea:	4b54      	ldr	r3, [pc, #336]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800daec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	789a      	ldrb	r2, [r3, #2]
 800daf4:	4b51      	ldr	r3, [pc, #324]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800daf6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	78db      	ldrb	r3, [r3, #3]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d010      	beq.n	800db24 <RadioSetTxGenericConfig+0x348>
 800db02:	2b02      	cmp	r3, #2
 800db04:	dc20      	bgt.n	800db48 <RadioSetTxGenericConfig+0x36c>
 800db06:	2b00      	cmp	r3, #0
 800db08:	d002      	beq.n	800db10 <RadioSetTxGenericConfig+0x334>
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d005      	beq.n	800db1a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800db0e:	e01b      	b.n	800db48 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800db10:	4b4a      	ldr	r3, [pc, #296]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db12:	2200      	movs	r2, #0
 800db14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800db18:	e017      	b.n	800db4a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800db1a:	4b48      	ldr	r3, [pc, #288]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db1c:	2201      	movs	r2, #1
 800db1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800db22:	e012      	b.n	800db4a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b0b      	cmp	r3, #11
 800db2a:	d003      	beq.n	800db34 <RadioSetTxGenericConfig+0x358>
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b0c      	cmp	r3, #12
 800db32:	d104      	bne.n	800db3e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800db34:	4b41      	ldr	r3, [pc, #260]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db36:	2201      	movs	r2, #1
 800db38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800db3c:	e005      	b.n	800db4a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800db3e:	4b3f      	ldr	r3, [pc, #252]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800db46:	e000      	b.n	800db4a <RadioSetTxGenericConfig+0x36e>
            break;
 800db48:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800db4a:	4b3c      	ldr	r3, [pc, #240]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db4c:	2201      	movs	r2, #1
 800db4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	889a      	ldrh	r2, [r3, #4]
 800db54:	4b39      	ldr	r3, [pc, #228]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db56:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	799a      	ldrb	r2, [r3, #6]
 800db5c:	4b37      	ldr	r3, [pc, #220]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db5e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	79da      	ldrb	r2, [r3, #7]
 800db64:	4b35      	ldr	r3, [pc, #212]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db66:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	7a1a      	ldrb	r2, [r3, #8]
 800db6e:	4b33      	ldr	r3, [pc, #204]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800db74:	f7fe ffb9 	bl	800caea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800db78:	2001      	movs	r0, #1
 800db7a:	f7fe f955 	bl	800be28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800db7e:	4830      	ldr	r0, [pc, #192]	; (800dc40 <RadioSetTxGenericConfig+0x464>)
 800db80:	f000 fd76 	bl	800e670 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800db84:	482f      	ldr	r0, [pc, #188]	; (800dc44 <RadioSetTxGenericConfig+0x468>)
 800db86:	f000 fe45 	bl	800e814 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800db8a:	4b2c      	ldr	r3, [pc, #176]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800db8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db90:	2b06      	cmp	r3, #6
 800db92:	d10d      	bne.n	800dbb0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800db94:	f640 0089 	movw	r0, #2185	; 0x889
 800db98:	f000 ff98 	bl	800eacc <SUBGRF_ReadRegister>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f023 0304 	bic.w	r3, r3, #4
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	4619      	mov	r1, r3
 800dba6:	f640 0089 	movw	r0, #2185	; 0x889
 800dbaa:	f000 ff7b 	bl	800eaa4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800dbae:	e02d      	b.n	800dc0c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800dbb0:	f640 0089 	movw	r0, #2185	; 0x889
 800dbb4:	f000 ff8a 	bl	800eacc <SUBGRF_ReadRegister>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	f043 0304 	orr.w	r3, r3, #4
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	f640 0089 	movw	r0, #2185	; 0x889
 800dbc6:	f000 ff6d 	bl	800eaa4 <SUBGRF_WriteRegister>
        break;
 800dbca:	e01f      	b.n	800dc0c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d004      	beq.n	800dbde <RadioSetTxGenericConfig+0x402>
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbdc:	d902      	bls.n	800dbe4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800dbde:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe2:	e027      	b.n	800dc34 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800dbe4:	2003      	movs	r0, #3
 800dbe6:	f7fe f91f 	bl	800be28 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800dbea:	4b14      	ldr	r3, [pc, #80]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dbec:	2202      	movs	r2, #2
 800dbee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a11      	ldr	r2, [pc, #68]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dbf8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800dbfa:	4b10      	ldr	r3, [pc, #64]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dbfc:	2216      	movs	r2, #22
 800dbfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800dc02:	480f      	ldr	r0, [pc, #60]	; (800dc40 <RadioSetTxGenericConfig+0x464>)
 800dc04:	f000 fd34 	bl	800e670 <SUBGRF_SetModulationParams>
        break;
 800dc08:	e000      	b.n	800dc0c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800dc0a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800dc0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f001 f863 	bl	800ecdc <SUBGRF_SetRfTxPower>
 800dc16:	4603      	mov	r3, r0
 800dc18:	461a      	mov	r2, r3
 800dc1a:	4b08      	ldr	r3, [pc, #32]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dc1c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800dc20:	4b06      	ldr	r3, [pc, #24]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dc22:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800dc26:	4618      	mov	r0, r3
 800dc28:	f001 f995 	bl	800ef56 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800dc2c:	4a03      	ldr	r2, [pc, #12]	; (800dc3c <RadioSetTxGenericConfig+0x460>)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6053      	str	r3, [r2, #4]
    return 0;
 800dc32:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3738      	adds	r7, #56	; 0x38
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	2000152c 	.word	0x2000152c
 800dc40:	20001564 	.word	0x20001564
 800dc44:	2000153a 	.word	0x2000153a

0800dc48 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800dc50:	2301      	movs	r3, #1
 800dc52:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bc80      	pop	{r7}
 800dc5e:	4770      	bx	lr

0800dc60 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800dc6a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bc80      	pop	{r7}
 800dc74:	4770      	bx	lr
	...

0800dc78 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800dc86:	4a1d      	ldr	r2, [pc, #116]	; (800dcfc <SUBGRF_Init+0x84>)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800dc8c:	f7f3 f99e 	bl	8000fcc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800dc90:	2002      	movs	r0, #2
 800dc92:	f001 f85e 	bl	800ed52 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800dc96:	4b1a      	ldr	r3, [pc, #104]	; (800dd00 <SUBGRF_Init+0x88>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	f000 f97d 	bl	800df9c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800dca2:	f7f6 fe8a 	bl	80049ba <RBI_IsTCXO>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d10e      	bne.n	800dcca <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800dcac:	2140      	movs	r1, #64	; 0x40
 800dcae:	2001      	movs	r0, #1
 800dcb0:	f000 fb82 	bl	800e3b8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	f640 1011 	movw	r0, #2321	; 0x911
 800dcba:	f000 fef3 	bl	800eaa4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800dcbe:	237f      	movs	r3, #127	; 0x7f
 800dcc0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800dcc2:	7b38      	ldrb	r0, [r7, #12]
 800dcc4:	f000 fa8b 	bl	800e1de <SUBGRF_Calibrate>
 800dcc8:	e009      	b.n	800dcde <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800dcca:	2120      	movs	r1, #32
 800dccc:	f640 1011 	movw	r0, #2321	; 0x911
 800dcd0:	f000 fee8 	bl	800eaa4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800dcd4:	2120      	movs	r1, #32
 800dcd6:	f640 1012 	movw	r0, #2322	; 0x912
 800dcda:	f000 fee3 	bl	800eaa4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800dcde:	210e      	movs	r1, #14
 800dce0:	f640 101f 	movw	r0, #2335	; 0x91f
 800dce4:	f000 fede 	bl	800eaa4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800dce8:	f7f6 fe44 	bl	8004974 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800dcec:	4b05      	ldr	r3, [pc, #20]	; (800dd04 <SUBGRF_Init+0x8c>)
 800dcee:	2201      	movs	r2, #1
 800dcf0:	701a      	strb	r2, [r3, #0]
}
 800dcf2:	bf00      	nop
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200015c4 	.word	0x200015c4
 800dd00:	200015c0 	.word	0x200015c0
 800dd04:	200015b8 	.word	0x200015b8

0800dd08 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800dd08:	b480      	push	{r7}
 800dd0a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800dd0c:	4b02      	ldr	r3, [pc, #8]	; (800dd18 <SUBGRF_GetOperatingMode+0x10>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bc80      	pop	{r7}
 800dd16:	4770      	bx	lr
 800dd18:	200015b8 	.word	0x200015b8

0800dd1c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	460b      	mov	r3, r1
 800dd26:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800dd28:	78fb      	ldrb	r3, [r7, #3]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	6879      	ldr	r1, [r7, #4]
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f000 ff24 	bl	800eb7c <SUBGRF_WriteBuffer>
}
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4613      	mov	r3, r2
 800dd48:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800dd4e:	f107 0317 	add.w	r3, r7, #23
 800dd52:	4619      	mov	r1, r3
 800dd54:	68b8      	ldr	r0, [r7, #8]
 800dd56:	f000 fe27 	bl	800e9a8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	79fa      	ldrb	r2, [r7, #7]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d201      	bcs.n	800dd68 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800dd64:	2301      	movs	r3, #1
 800dd66:	e007      	b.n	800dd78 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800dd68:	7df8      	ldrb	r0, [r7, #23]
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	68f9      	ldr	r1, [r7, #12]
 800dd72:	f000 ff25 	bl	800ebc0 <SUBGRF_ReadBuffer>

    return 0;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800dd8e:	7afb      	ldrb	r3, [r7, #11]
 800dd90:	4619      	mov	r1, r3
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7ff ffc2 	bl	800dd1c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 f91b 	bl	800dfd4 <SUBGRF_SetTx>
}
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b082      	sub	sp, #8
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800ddae:	2208      	movs	r2, #8
 800ddb0:	6879      	ldr	r1, [r7, #4]
 800ddb2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800ddb6:	f000 fe9d 	bl	800eaf4 <SUBGRF_WriteRegisters>
    return 0;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	4603      	mov	r3, r0
 800ddcc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800ddce:	88fb      	ldrh	r3, [r7, #6]
 800ddd0:	0a1b      	lsrs	r3, r3, #8
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800ddd8:	88fb      	ldrh	r3, [r7, #6]
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800ddde:	f000 fb6f 	bl	800e4c0 <SUBGRF_GetPacketType>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d108      	bne.n	800ddfa <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800dde8:	f107 030c 	add.w	r3, r7, #12
 800ddec:	2202      	movs	r2, #2
 800ddee:	4619      	mov	r1, r3
 800ddf0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800ddf4:	f000 fe7e 	bl	800eaf4 <SUBGRF_WriteRegisters>
            break;
 800ddf8:	e000      	b.n	800ddfc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800ddfa:	bf00      	nop
    }
}
 800ddfc:	bf00      	nop
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800de0e:	88fb      	ldrh	r3, [r7, #6]
 800de10:	0a1b      	lsrs	r3, r3, #8
 800de12:	b29b      	uxth	r3, r3
 800de14:	b2db      	uxtb	r3, r3
 800de16:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800de18:	88fb      	ldrh	r3, [r7, #6]
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800de1e:	f000 fb4f 	bl	800e4c0 <SUBGRF_GetPacketType>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d108      	bne.n	800de3a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800de28:	f107 030c 	add.w	r3, r7, #12
 800de2c:	2202      	movs	r2, #2
 800de2e:	4619      	mov	r1, r3
 800de30:	f240 60be 	movw	r0, #1726	; 0x6be
 800de34:	f000 fe5e 	bl	800eaf4 <SUBGRF_WriteRegisters>
            break;
 800de38:	e000      	b.n	800de3c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800de3a:	bf00      	nop
    }
}
 800de3c:	bf00      	nop
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800de52:	f000 fb35 	bl	800e4c0 <SUBGRF_GetPacketType>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d121      	bne.n	800dea0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800de5c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800de60:	f000 fe34 	bl	800eacc <SUBGRF_ReadRegister>
 800de64:	4603      	mov	r3, r0
 800de66:	f023 0301 	bic.w	r3, r3, #1
 800de6a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800de6c:	88fb      	ldrh	r3, [r7, #6]
 800de6e:	0a1b      	lsrs	r3, r3, #8
 800de70:	b29b      	uxth	r3, r3
 800de72:	b25b      	sxtb	r3, r3
 800de74:	f003 0301 	and.w	r3, r3, #1
 800de78:	b25a      	sxtb	r2, r3
 800de7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de7e:	4313      	orrs	r3, r2
 800de80:	b25b      	sxtb	r3, r3
 800de82:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800de84:	7bfb      	ldrb	r3, [r7, #15]
 800de86:	4619      	mov	r1, r3
 800de88:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800de8c:	f000 fe0a 	bl	800eaa4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800de90:	88fb      	ldrh	r3, [r7, #6]
 800de92:	b2db      	uxtb	r3, r3
 800de94:	4619      	mov	r1, r3
 800de96:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800de9a:	f000 fe03 	bl	800eaa4 <SUBGRF_WriteRegister>
            break;
 800de9e:	e000      	b.n	800dea2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800dea0:	bf00      	nop
    }
}
 800dea2:	bf00      	nop
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800deb0:	2300      	movs	r3, #0
 800deb2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800deb4:	2300      	movs	r3, #0
 800deb6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800debc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800dec0:	f000 fe04 	bl	800eacc <SUBGRF_ReadRegister>
 800dec4:	4603      	mov	r3, r0
 800dec6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800dec8:	79fb      	ldrb	r3, [r7, #7]
 800deca:	f023 0301 	bic.w	r3, r3, #1
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	4619      	mov	r1, r3
 800ded2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800ded6:	f000 fde5 	bl	800eaa4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800deda:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800dede:	f000 fdf5 	bl	800eacc <SUBGRF_ReadRegister>
 800dee2:	4603      	mov	r3, r0
 800dee4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800dee6:	79bb      	ldrb	r3, [r7, #6]
 800dee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deec:	b2db      	uxtb	r3, r3
 800deee:	4619      	mov	r1, r3
 800def0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800def4:	f000 fdd6 	bl	800eaa4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800def8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800defc:	f000 f88a 	bl	800e014 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800df00:	463b      	mov	r3, r7
 800df02:	2204      	movs	r2, #4
 800df04:	4619      	mov	r1, r3
 800df06:	f640 0019 	movw	r0, #2073	; 0x819
 800df0a:	f000 fe15 	bl	800eb38 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800df0e:	2000      	movs	r0, #0
 800df10:	f000 f844 	bl	800df9c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800df14:	79fb      	ldrb	r3, [r7, #7]
 800df16:	4619      	mov	r1, r3
 800df18:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800df1c:	f000 fdc2 	bl	800eaa4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800df20:	79bb      	ldrb	r3, [r7, #6]
 800df22:	4619      	mov	r1, r3
 800df24:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800df28:	f000 fdbc 	bl	800eaa4 <SUBGRF_WriteRegister>

    return number;
 800df2c:	683b      	ldr	r3, [r7, #0]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800df40:	2000      	movs	r0, #0
 800df42:	f7f6 fd22 	bl	800498a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800df46:	2002      	movs	r0, #2
 800df48:	f000 ff03 	bl	800ed52 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800df4c:	793b      	ldrb	r3, [r7, #4]
 800df4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800df52:	b2db      	uxtb	r3, r3
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800df58:	793b      	ldrb	r3, [r7, #4]
 800df5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800df62:	b25b      	sxtb	r3, r3
 800df64:	4313      	orrs	r3, r2
 800df66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800df68:	793b      	ldrb	r3, [r7, #4]
 800df6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800df72:	4313      	orrs	r3, r2
 800df74:	b25b      	sxtb	r3, r3
 800df76:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800df78:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800df7a:	f107 030f 	add.w	r3, r7, #15
 800df7e:	2201      	movs	r2, #1
 800df80:	4619      	mov	r1, r3
 800df82:	2084      	movs	r0, #132	; 0x84
 800df84:	f000 fe3e 	bl	800ec04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800df88:	4b03      	ldr	r3, [pc, #12]	; (800df98 <SUBGRF_SetSleep+0x60>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	701a      	strb	r2, [r3, #0]
}
 800df8e:	bf00      	nop
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	200015b8 	.word	0x200015b8

0800df9c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800dfa6:	1dfb      	adds	r3, r7, #7
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	4619      	mov	r1, r3
 800dfac:	2080      	movs	r0, #128	; 0x80
 800dfae:	f000 fe29 	bl	800ec04 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800dfb2:	79fb      	ldrb	r3, [r7, #7]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d103      	bne.n	800dfc0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800dfb8:	4b05      	ldr	r3, [pc, #20]	; (800dfd0 <SUBGRF_SetStandby+0x34>)
 800dfba:	2201      	movs	r2, #1
 800dfbc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800dfbe:	e002      	b.n	800dfc6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800dfc0:	4b03      	ldr	r3, [pc, #12]	; (800dfd0 <SUBGRF_SetStandby+0x34>)
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	701a      	strb	r2, [r3, #0]
}
 800dfc6:	bf00      	nop
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	200015b8 	.word	0x200015b8

0800dfd4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800dfdc:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <SUBGRF_SetTx+0x3c>)
 800dfde:	2204      	movs	r2, #4
 800dfe0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	0c1b      	lsrs	r3, r3, #16
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	0a1b      	lsrs	r3, r3, #8
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800dff8:	f107 030c 	add.w	r3, r7, #12
 800dffc:	2203      	movs	r2, #3
 800dffe:	4619      	mov	r1, r3
 800e000:	2083      	movs	r0, #131	; 0x83
 800e002:	f000 fdff 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e006:	bf00      	nop
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	200015b8 	.word	0x200015b8

0800e014 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800e01c:	4b0c      	ldr	r3, [pc, #48]	; (800e050 <SUBGRF_SetRx+0x3c>)
 800e01e:	2205      	movs	r2, #5
 800e020:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	0c1b      	lsrs	r3, r3, #16
 800e026:	b2db      	uxtb	r3, r3
 800e028:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	0a1b      	lsrs	r3, r3, #8
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	b2db      	uxtb	r3, r3
 800e036:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800e038:	f107 030c 	add.w	r3, r7, #12
 800e03c:	2203      	movs	r2, #3
 800e03e:	4619      	mov	r1, r3
 800e040:	2082      	movs	r0, #130	; 0x82
 800e042:	f000 fddf 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e046:	bf00      	nop
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	200015b8 	.word	0x200015b8

0800e054 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800e05c:	4b0e      	ldr	r3, [pc, #56]	; (800e098 <SUBGRF_SetRxBoosted+0x44>)
 800e05e:	2205      	movs	r2, #5
 800e060:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800e062:	2197      	movs	r1, #151	; 0x97
 800e064:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800e068:	f000 fd1c 	bl	800eaa4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	0c1b      	lsrs	r3, r3, #16
 800e070:	b2db      	uxtb	r3, r3
 800e072:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	0a1b      	lsrs	r3, r3, #8
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800e082:	f107 030c 	add.w	r3, r7, #12
 800e086:	2203      	movs	r2, #3
 800e088:	4619      	mov	r1, r3
 800e08a:	2082      	movs	r0, #130	; 0x82
 800e08c:	f000 fdba 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e090:	bf00      	nop
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	200015b8 	.word	0x200015b8

0800e09c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	0c1b      	lsrs	r3, r3, #16
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	0a1b      	lsrs	r3, r3, #8
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	0c1b      	lsrs	r3, r3, #16
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	0a1b      	lsrs	r3, r3, #8
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800e0d2:	f107 0308 	add.w	r3, r7, #8
 800e0d6:	2206      	movs	r2, #6
 800e0d8:	4619      	mov	r1, r3
 800e0da:	2094      	movs	r0, #148	; 0x94
 800e0dc:	f000 fd92 	bl	800ec04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800e0e0:	4b03      	ldr	r3, [pc, #12]	; (800e0f0 <SUBGRF_SetRxDutyCycle+0x54>)
 800e0e2:	2206      	movs	r2, #6
 800e0e4:	701a      	strb	r2, [r3, #0]
}
 800e0e6:	bf00      	nop
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	200015b8 	.word	0x200015b8

0800e0f4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	20c5      	movs	r0, #197	; 0xc5
 800e0fe:	f000 fd81 	bl	800ec04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800e102:	4b02      	ldr	r3, [pc, #8]	; (800e10c <SUBGRF_SetCad+0x18>)
 800e104:	2207      	movs	r2, #7
 800e106:	701a      	strb	r2, [r3, #0]
}
 800e108:	bf00      	nop
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	200015b8 	.word	0x200015b8

0800e110 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800e114:	2200      	movs	r2, #0
 800e116:	2100      	movs	r1, #0
 800e118:	20d1      	movs	r0, #209	; 0xd1
 800e11a:	f000 fd73 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e11e:	bf00      	nop
 800e120:	bd80      	pop	{r7, pc}

0800e122 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800e122:	b580      	push	{r7, lr}
 800e124:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800e126:	2200      	movs	r2, #0
 800e128:	2100      	movs	r1, #0
 800e12a:	20d2      	movs	r0, #210	; 0xd2
 800e12c:	f000 fd6a 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e130:	bf00      	nop
 800e132:	bd80      	pop	{r7, pc}

0800e134 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	4603      	mov	r3, r0
 800e13c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800e13e:	1dfb      	adds	r3, r7, #7
 800e140:	2201      	movs	r2, #1
 800e142:	4619      	mov	r1, r3
 800e144:	209f      	movs	r0, #159	; 0x9f
 800e146:	f000 fd5d 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e14a:	bf00      	nop
 800e14c:	3708      	adds	r7, #8
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b084      	sub	sp, #16
 800e156:	af00      	add	r7, sp, #0
 800e158:	4603      	mov	r3, r0
 800e15a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800e15c:	1dfb      	adds	r3, r7, #7
 800e15e:	2201      	movs	r2, #1
 800e160:	4619      	mov	r1, r3
 800e162:	20a0      	movs	r0, #160	; 0xa0
 800e164:	f000 fd4e 	bl	800ec04 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800e168:	79fb      	ldrb	r3, [r7, #7]
 800e16a:	2b3f      	cmp	r3, #63	; 0x3f
 800e16c:	d91c      	bls.n	800e1a8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	085b      	lsrs	r3, r3, #1
 800e172:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800e17c:	e005      	b.n	800e18a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	089b      	lsrs	r3, r3, #2
 800e182:	73fb      	strb	r3, [r7, #15]
            exp++;
 800e184:	7bbb      	ldrb	r3, [r7, #14]
 800e186:	3301      	adds	r3, #1
 800e188:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
 800e18c:	2b1f      	cmp	r3, #31
 800e18e:	d8f6      	bhi.n	800e17e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	00db      	lsls	r3, r3, #3
 800e194:	b2da      	uxtb	r2, r3
 800e196:	7bbb      	ldrb	r3, [r7, #14]
 800e198:	4413      	add	r3, r2
 800e19a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800e19c:	7b7b      	ldrb	r3, [r7, #13]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	f240 7006 	movw	r0, #1798	; 0x706
 800e1a4:	f000 fc7e 	bl	800eaa4 <SUBGRF_WriteRegister>
    }
}
 800e1a8:	bf00      	nop
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800e1b6:	f7f6 fc0b 	bl	80049d0 <RBI_IsDCDC>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d102      	bne.n	800e1c6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	71fb      	strb	r3, [r7, #7]
 800e1c4:	e001      	b.n	800e1ca <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800e1ca:	1dfb      	adds	r3, r7, #7
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	2096      	movs	r0, #150	; 0x96
 800e1d2:	f000 fd17 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e1d6:	bf00      	nop
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b084      	sub	sp, #16
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800e1e6:	793b      	ldrb	r3, [r7, #4]
 800e1e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	019b      	lsls	r3, r3, #6
 800e1f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800e1f2:	793b      	ldrb	r3, [r7, #4]
 800e1f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800e1fc:	b25b      	sxtb	r3, r3
 800e1fe:	4313      	orrs	r3, r2
 800e200:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800e202:	793b      	ldrb	r3, [r7, #4]
 800e204:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800e20c:	b25b      	sxtb	r3, r3
 800e20e:	4313      	orrs	r3, r2
 800e210:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800e212:	793b      	ldrb	r3, [r7, #4]
 800e214:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800e21c:	b25b      	sxtb	r3, r3
 800e21e:	4313      	orrs	r3, r2
 800e220:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800e222:	793b      	ldrb	r3, [r7, #4]
 800e224:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800e22c:	b25b      	sxtb	r3, r3
 800e22e:	4313      	orrs	r3, r2
 800e230:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800e232:	793b      	ldrb	r3, [r7, #4]
 800e234:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800e23c:	b25b      	sxtb	r3, r3
 800e23e:	4313      	orrs	r3, r2
 800e240:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800e242:	793b      	ldrb	r3, [r7, #4]
 800e244:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800e24c:	4313      	orrs	r3, r2
 800e24e:	b25b      	sxtb	r3, r3
 800e250:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800e252:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800e254:	f107 030f 	add.w	r3, r7, #15
 800e258:	2201      	movs	r2, #1
 800e25a:	4619      	mov	r1, r3
 800e25c:	2089      	movs	r0, #137	; 0x89
 800e25e:	f000 fcd1 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e262:	bf00      	nop
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
	...

0800e26c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a1d      	ldr	r2, [pc, #116]	; (800e2ec <SUBGRF_CalibrateImage+0x80>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d904      	bls.n	800e286 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800e27c:	23e1      	movs	r3, #225	; 0xe1
 800e27e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800e280:	23e9      	movs	r3, #233	; 0xe9
 800e282:	737b      	strb	r3, [r7, #13]
 800e284:	e027      	b.n	800e2d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	4a19      	ldr	r2, [pc, #100]	; (800e2f0 <SUBGRF_CalibrateImage+0x84>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d904      	bls.n	800e298 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800e28e:	23d7      	movs	r3, #215	; 0xd7
 800e290:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800e292:	23db      	movs	r3, #219	; 0xdb
 800e294:	737b      	strb	r3, [r7, #13]
 800e296:	e01e      	b.n	800e2d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a16      	ldr	r2, [pc, #88]	; (800e2f4 <SUBGRF_CalibrateImage+0x88>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d904      	bls.n	800e2aa <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800e2a0:	23c1      	movs	r3, #193	; 0xc1
 800e2a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800e2a4:	23c5      	movs	r3, #197	; 0xc5
 800e2a6:	737b      	strb	r3, [r7, #13]
 800e2a8:	e015      	b.n	800e2d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4a12      	ldr	r2, [pc, #72]	; (800e2f8 <SUBGRF_CalibrateImage+0x8c>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d904      	bls.n	800e2bc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800e2b2:	2375      	movs	r3, #117	; 0x75
 800e2b4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800e2b6:	2381      	movs	r3, #129	; 0x81
 800e2b8:	737b      	strb	r3, [r7, #13]
 800e2ba:	e00c      	b.n	800e2d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a0f      	ldr	r2, [pc, #60]	; (800e2fc <SUBGRF_CalibrateImage+0x90>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d904      	bls.n	800e2ce <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800e2c4:	236b      	movs	r3, #107	; 0x6b
 800e2c6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800e2c8:	236f      	movs	r3, #111	; 0x6f
 800e2ca:	737b      	strb	r3, [r7, #13]
 800e2cc:	e003      	b.n	800e2d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800e2ce:	2329      	movs	r3, #41	; 0x29
 800e2d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800e2d2:	232b      	movs	r3, #43	; 0x2b
 800e2d4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800e2d6:	f107 030c 	add.w	r3, r7, #12
 800e2da:	2202      	movs	r2, #2
 800e2dc:	4619      	mov	r1, r3
 800e2de:	2098      	movs	r0, #152	; 0x98
 800e2e0:	f000 fc90 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	35a4e900 	.word	0x35a4e900
 800e2f0:	32a9f880 	.word	0x32a9f880
 800e2f4:	2de54480 	.word	0x2de54480
 800e2f8:	1b6b0b00 	.word	0x1b6b0b00
 800e2fc:	1954fc40 	.word	0x1954fc40

0800e300 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	4604      	mov	r4, r0
 800e308:	4608      	mov	r0, r1
 800e30a:	4611      	mov	r1, r2
 800e30c:	461a      	mov	r2, r3
 800e30e:	4623      	mov	r3, r4
 800e310:	71fb      	strb	r3, [r7, #7]
 800e312:	4603      	mov	r3, r0
 800e314:	71bb      	strb	r3, [r7, #6]
 800e316:	460b      	mov	r3, r1
 800e318:	717b      	strb	r3, [r7, #5]
 800e31a:	4613      	mov	r3, r2
 800e31c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800e31e:	79fb      	ldrb	r3, [r7, #7]
 800e320:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800e322:	79bb      	ldrb	r3, [r7, #6]
 800e324:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800e326:	797b      	ldrb	r3, [r7, #5]
 800e328:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800e32a:	793b      	ldrb	r3, [r7, #4]
 800e32c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800e32e:	f107 030c 	add.w	r3, r7, #12
 800e332:	2204      	movs	r2, #4
 800e334:	4619      	mov	r1, r3
 800e336:	2095      	movs	r0, #149	; 0x95
 800e338:	f000 fc64 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e33c:	bf00      	nop
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	bd90      	pop	{r4, r7, pc}

0800e344 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800e344:	b590      	push	{r4, r7, lr}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
 800e34a:	4604      	mov	r4, r0
 800e34c:	4608      	mov	r0, r1
 800e34e:	4611      	mov	r1, r2
 800e350:	461a      	mov	r2, r3
 800e352:	4623      	mov	r3, r4
 800e354:	80fb      	strh	r3, [r7, #6]
 800e356:	4603      	mov	r3, r0
 800e358:	80bb      	strh	r3, [r7, #4]
 800e35a:	460b      	mov	r3, r1
 800e35c:	807b      	strh	r3, [r7, #2]
 800e35e:	4613      	mov	r3, r2
 800e360:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800e362:	88fb      	ldrh	r3, [r7, #6]
 800e364:	0a1b      	lsrs	r3, r3, #8
 800e366:	b29b      	uxth	r3, r3
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800e36c:	88fb      	ldrh	r3, [r7, #6]
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800e372:	88bb      	ldrh	r3, [r7, #4]
 800e374:	0a1b      	lsrs	r3, r3, #8
 800e376:	b29b      	uxth	r3, r3
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800e37c:	88bb      	ldrh	r3, [r7, #4]
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800e382:	887b      	ldrh	r3, [r7, #2]
 800e384:	0a1b      	lsrs	r3, r3, #8
 800e386:	b29b      	uxth	r3, r3
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800e38c:	887b      	ldrh	r3, [r7, #2]
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800e392:	883b      	ldrh	r3, [r7, #0]
 800e394:	0a1b      	lsrs	r3, r3, #8
 800e396:	b29b      	uxth	r3, r3
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800e39c:	883b      	ldrh	r3, [r7, #0]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800e3a2:	f107 0308 	add.w	r3, r7, #8
 800e3a6:	2208      	movs	r2, #8
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	2008      	movs	r0, #8
 800e3ac:	f000 fc2a 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e3b0:	bf00      	nop
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd90      	pop	{r4, r7, pc}

0800e3b8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	6039      	str	r1, [r7, #0]
 800e3c2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800e3c4:	79fb      	ldrb	r3, [r7, #7]
 800e3c6:	f003 0307 	and.w	r3, r3, #7
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	0c1b      	lsrs	r3, r3, #16
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	0a1b      	lsrs	r3, r3, #8
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800e3e4:	f107 030c 	add.w	r3, r7, #12
 800e3e8:	2204      	movs	r2, #4
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	2097      	movs	r0, #151	; 0x97
 800e3ee:	f000 fc09 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e3f2:	bf00      	nop
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800e3fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e400:	b084      	sub	sp, #16
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800e406:	2300      	movs	r3, #0
 800e408:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800e40a:	4b1d      	ldr	r3, [pc, #116]	; (800e480 <SUBGRF_SetRfFrequency+0x84>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	f083 0301 	eor.w	r3, r3, #1
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	d005      	beq.n	800e424 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff ff27 	bl	800e26c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800e41e:	4b18      	ldr	r3, [pc, #96]	; (800e480 <SUBGRF_SetRfFrequency+0x84>)
 800e420:	2201      	movs	r2, #1
 800e422:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	461c      	mov	r4, r3
 800e42a:	4615      	mov	r5, r2
 800e42c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800e430:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800e434:	4a13      	ldr	r2, [pc, #76]	; (800e484 <SUBGRF_SetRfFrequency+0x88>)
 800e436:	f04f 0300 	mov.w	r3, #0
 800e43a:	4640      	mov	r0, r8
 800e43c:	4649      	mov	r1, r9
 800e43e:	f7f2 fa15 	bl	800086c <__aeabi_uldivmod>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	4613      	mov	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	0e1b      	lsrs	r3, r3, #24
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	0c1b      	lsrs	r3, r3, #16
 800e456:	b2db      	uxtb	r3, r3
 800e458:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	0a1b      	lsrs	r3, r3, #8
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	b2db      	uxtb	r3, r3
 800e466:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800e468:	f107 0308 	add.w	r3, r7, #8
 800e46c:	2204      	movs	r2, #4
 800e46e:	4619      	mov	r1, r3
 800e470:	2086      	movs	r0, #134	; 0x86
 800e472:	f000 fbc7 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e476:	bf00      	nop
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e480:	200015c0 	.word	0x200015c0
 800e484:	01e84800 	.word	0x01e84800

0800e488 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800e492:	79fa      	ldrb	r2, [r7, #7]
 800e494:	4b09      	ldr	r3, [pc, #36]	; (800e4bc <SUBGRF_SetPacketType+0x34>)
 800e496:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800e498:	79fb      	ldrb	r3, [r7, #7]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d104      	bne.n	800e4a8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800e49e:	2100      	movs	r1, #0
 800e4a0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800e4a4:	f000 fafe 	bl	800eaa4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800e4a8:	1dfb      	adds	r3, r7, #7
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	208a      	movs	r0, #138	; 0x8a
 800e4b0:	f000 fba8 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e4b4:	bf00      	nop
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	200015b9 	.word	0x200015b9

0800e4c0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	af00      	add	r7, sp, #0
    return PacketType;
 800e4c4:	4b02      	ldr	r3, [pc, #8]	; (800e4d0 <SUBGRF_GetPacketType+0x10>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bc80      	pop	{r7}
 800e4ce:	4770      	bx	lr
 800e4d0:	200015b9 	.word	0x200015b9

0800e4d4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	71fb      	strb	r3, [r7, #7]
 800e4de:	460b      	mov	r3, r1
 800e4e0:	71bb      	strb	r3, [r7, #6]
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800e4e6:	79fb      	ldrb	r3, [r7, #7]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d149      	bne.n	800e580 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	f7f6 fa7a 	bl	80049e6 <RBI_GetRFOMaxPowerConfig>
 800e4f2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800e4f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	da01      	bge.n	800e502 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b0e      	cmp	r3, #14
 800e506:	d10e      	bne.n	800e526 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800e508:	2301      	movs	r3, #1
 800e50a:	2201      	movs	r2, #1
 800e50c:	2100      	movs	r1, #0
 800e50e:	2004      	movs	r0, #4
 800e510:	f7ff fef6 	bl	800e300 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800e514:	79ba      	ldrb	r2, [r7, #6]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	1ad3      	subs	r3, r2, r3
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	330e      	adds	r3, #14
 800e520:	b2db      	uxtb	r3, r3
 800e522:	71bb      	strb	r3, [r7, #6]
 800e524:	e01f      	b.n	800e566 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2b0a      	cmp	r3, #10
 800e52a:	d10e      	bne.n	800e54a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800e52c:	2301      	movs	r3, #1
 800e52e:	2201      	movs	r2, #1
 800e530:	2100      	movs	r1, #0
 800e532:	2001      	movs	r0, #1
 800e534:	f7ff fee4 	bl	800e300 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800e538:	79ba      	ldrb	r2, [r7, #6]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	b2db      	uxtb	r3, r3
 800e542:	330d      	adds	r3, #13
 800e544:	b2db      	uxtb	r3, r3
 800e546:	71bb      	strb	r3, [r7, #6]
 800e548:	e00d      	b.n	800e566 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800e54a:	2301      	movs	r3, #1
 800e54c:	2201      	movs	r2, #1
 800e54e:	2100      	movs	r1, #0
 800e550:	2007      	movs	r0, #7
 800e552:	f7ff fed5 	bl	800e300 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800e556:	79ba      	ldrb	r2, [r7, #6]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	330e      	adds	r3, #14
 800e562:	b2db      	uxtb	r3, r3
 800e564:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800e566:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e56a:	f113 0f11 	cmn.w	r3, #17
 800e56e:	da01      	bge.n	800e574 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800e570:	23ef      	movs	r3, #239	; 0xef
 800e572:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800e574:	2118      	movs	r1, #24
 800e576:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800e57a:	f000 fa93 	bl	800eaa4 <SUBGRF_WriteRegister>
 800e57e:	e067      	b.n	800e650 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800e580:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800e584:	f000 faa2 	bl	800eacc <SUBGRF_ReadRegister>
 800e588:	4603      	mov	r3, r0
 800e58a:	f043 031e 	orr.w	r3, r3, #30
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	4619      	mov	r1, r3
 800e592:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800e596:	f000 fa85 	bl	800eaa4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800e59a:	2001      	movs	r0, #1
 800e59c:	f7f6 fa23 	bl	80049e6 <RBI_GetRFOMaxPowerConfig>
 800e5a0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800e5a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	da01      	bge.n	800e5b0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2b14      	cmp	r3, #20
 800e5b4:	d10e      	bne.n	800e5d4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	2105      	movs	r1, #5
 800e5bc:	2003      	movs	r0, #3
 800e5be:	f7ff fe9f 	bl	800e300 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800e5c2:	79ba      	ldrb	r2, [r7, #6]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	3316      	adds	r3, #22
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	71bb      	strb	r3, [r7, #6]
 800e5d2:	e031      	b.n	800e638 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b11      	cmp	r3, #17
 800e5d8:	d10e      	bne.n	800e5f8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800e5da:	2301      	movs	r3, #1
 800e5dc:	2200      	movs	r2, #0
 800e5de:	2103      	movs	r1, #3
 800e5e0:	2002      	movs	r0, #2
 800e5e2:	f7ff fe8d 	bl	800e300 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800e5e6:	79ba      	ldrb	r2, [r7, #6]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	3316      	adds	r3, #22
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	71bb      	strb	r3, [r7, #6]
 800e5f6:	e01f      	b.n	800e638 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b0e      	cmp	r3, #14
 800e5fc:	d10e      	bne.n	800e61c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800e5fe:	2301      	movs	r3, #1
 800e600:	2200      	movs	r2, #0
 800e602:	2102      	movs	r1, #2
 800e604:	2002      	movs	r0, #2
 800e606:	f7ff fe7b 	bl	800e300 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800e60a:	79ba      	ldrb	r2, [r7, #6]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	b2db      	uxtb	r3, r3
 800e614:	330e      	adds	r3, #14
 800e616:	b2db      	uxtb	r3, r3
 800e618:	71bb      	strb	r3, [r7, #6]
 800e61a:	e00d      	b.n	800e638 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800e61c:	2301      	movs	r3, #1
 800e61e:	2200      	movs	r2, #0
 800e620:	2107      	movs	r1, #7
 800e622:	2004      	movs	r0, #4
 800e624:	f7ff fe6c 	bl	800e300 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800e628:	79ba      	ldrb	r2, [r7, #6]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	b2db      	uxtb	r3, r3
 800e632:	3316      	adds	r3, #22
 800e634:	b2db      	uxtb	r3, r3
 800e636:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800e638:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e63c:	f113 0f09 	cmn.w	r3, #9
 800e640:	da01      	bge.n	800e646 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800e642:	23f7      	movs	r3, #247	; 0xf7
 800e644:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800e646:	2138      	movs	r1, #56	; 0x38
 800e648:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800e64c:	f000 fa2a 	bl	800eaa4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800e650:	79bb      	ldrb	r3, [r7, #6]
 800e652:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800e654:	797b      	ldrb	r3, [r7, #5]
 800e656:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800e658:	f107 0308 	add.w	r3, r7, #8
 800e65c:	2202      	movs	r2, #2
 800e65e:	4619      	mov	r1, r3
 800e660:	208e      	movs	r0, #142	; 0x8e
 800e662:	f000 facf 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e666:	bf00      	nop
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800e670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e674:	b086      	sub	sp, #24
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e67e:	4a61      	ldr	r2, [pc, #388]	; (800e804 <SUBGRF_SetModulationParams+0x194>)
 800e680:	f107 0308 	add.w	r3, r7, #8
 800e684:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e688:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	781a      	ldrb	r2, [r3, #0]
 800e690:	4b5d      	ldr	r3, [pc, #372]	; (800e808 <SUBGRF_SetModulationParams+0x198>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	429a      	cmp	r2, r3
 800e696:	d004      	beq.n	800e6a2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff fef3 	bl	800e488 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	f200 80a5 	bhi.w	800e7f6 <SUBGRF_SetModulationParams+0x186>
 800e6ac:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <SUBGRF_SetModulationParams+0x44>)
 800e6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b2:	bf00      	nop
 800e6b4:	0800e6c5 	.word	0x0800e6c5
 800e6b8:	0800e785 	.word	0x0800e785
 800e6bc:	0800e747 	.word	0x0800e747
 800e6c0:	0800e7b3 	.word	0x0800e7b3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800e6c4:	2308      	movs	r3, #8
 800e6c6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	4a4f      	ldr	r2, [pc, #316]	; (800e80c <SUBGRF_SetModulationParams+0x19c>)
 800e6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	0c1b      	lsrs	r3, r3, #16
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	0a1b      	lsrs	r3, r3, #8
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	7b1b      	ldrb	r3, [r3, #12]
 800e6ee:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	7b5b      	ldrb	r3, [r3, #13]
 800e6f4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	461c      	mov	r4, r3
 800e6fe:	4615      	mov	r5, r2
 800e700:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800e704:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800e708:	4a41      	ldr	r2, [pc, #260]	; (800e810 <SUBGRF_SetModulationParams+0x1a0>)
 800e70a:	f04f 0300 	mov.w	r3, #0
 800e70e:	4640      	mov	r0, r8
 800e710:	4649      	mov	r1, r9
 800e712:	f7f2 f8ab 	bl	800086c <__aeabi_uldivmod>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	4613      	mov	r3, r2
 800e71c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	0c1b      	lsrs	r3, r3, #16
 800e722:	b2db      	uxtb	r3, r3
 800e724:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	0a1b      	lsrs	r3, r3, #8
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	b2db      	uxtb	r3, r3
 800e732:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e734:	7cfb      	ldrb	r3, [r7, #19]
 800e736:	b29a      	uxth	r2, r3
 800e738:	f107 0308 	add.w	r3, r7, #8
 800e73c:	4619      	mov	r1, r3
 800e73e:	208b      	movs	r0, #139	; 0x8b
 800e740:	f000 fa60 	bl	800ec04 <SUBGRF_WriteCommand>
        break;
 800e744:	e058      	b.n	800e7f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800e746:	2304      	movs	r3, #4
 800e748:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	4a2f      	ldr	r2, [pc, #188]	; (800e80c <SUBGRF_SetModulationParams+0x19c>)
 800e750:	fbb2 f3f3 	udiv	r3, r2, r3
 800e754:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	0c1b      	lsrs	r3, r3, #16
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	0a1b      	lsrs	r3, r3, #8
 800e762:	b2db      	uxtb	r3, r3
 800e764:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	7d1b      	ldrb	r3, [r3, #20]
 800e770:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e772:	7cfb      	ldrb	r3, [r7, #19]
 800e774:	b29a      	uxth	r2, r3
 800e776:	f107 0308 	add.w	r3, r7, #8
 800e77a:	4619      	mov	r1, r3
 800e77c:	208b      	movs	r0, #139	; 0x8b
 800e77e:	f000 fa41 	bl	800ec04 <SUBGRF_WriteCommand>
        break;
 800e782:	e039      	b.n	800e7f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800e784:	2304      	movs	r3, #4
 800e786:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	7e1b      	ldrb	r3, [r3, #24]
 800e78c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7e5b      	ldrb	r3, [r3, #25]
 800e792:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7e9b      	ldrb	r3, [r3, #26]
 800e798:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	7edb      	ldrb	r3, [r3, #27]
 800e79e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e7a0:	7cfb      	ldrb	r3, [r7, #19]
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	f107 0308 	add.w	r3, r7, #8
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	208b      	movs	r0, #139	; 0x8b
 800e7ac:	f000 fa2a 	bl	800ec04 <SUBGRF_WriteCommand>

        break;
 800e7b0:	e022      	b.n	800e7f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800e7b2:	2305      	movs	r3, #5
 800e7b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	4a14      	ldr	r2, [pc, #80]	; (800e80c <SUBGRF_SetModulationParams+0x19c>)
 800e7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	0c1b      	lsrs	r3, r3, #16
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	0a1b      	lsrs	r3, r3, #8
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7b1b      	ldrb	r3, [r3, #12]
 800e7dc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7b5b      	ldrb	r3, [r3, #13]
 800e7e2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e7e4:	7cfb      	ldrb	r3, [r7, #19]
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	f107 0308 	add.w	r3, r7, #8
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	208b      	movs	r0, #139	; 0x8b
 800e7f0:	f000 fa08 	bl	800ec04 <SUBGRF_WriteCommand>
        break;
 800e7f4:	e000      	b.n	800e7f8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800e7f6:	bf00      	nop
    }
}
 800e7f8:	bf00      	nop
 800e7fa:	3718      	adds	r7, #24
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e802:	bf00      	nop
 800e804:	0800f7e8 	.word	0x0800f7e8
 800e808:	200015b9 	.word	0x200015b9
 800e80c:	3d090000 	.word	0x3d090000
 800e810:	01e84800 	.word	0x01e84800

0800e814 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e820:	4a48      	ldr	r2, [pc, #288]	; (800e944 <SUBGRF_SetPacketParams+0x130>)
 800e822:	f107 030c 	add.w	r3, r7, #12
 800e826:	ca07      	ldmia	r2, {r0, r1, r2}
 800e828:	c303      	stmia	r3!, {r0, r1}
 800e82a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	781a      	ldrb	r2, [r3, #0]
 800e830:	4b45      	ldr	r3, [pc, #276]	; (800e948 <SUBGRF_SetPacketParams+0x134>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	429a      	cmp	r2, r3
 800e836:	d004      	beq.n	800e842 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff fe23 	bl	800e488 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	2b03      	cmp	r3, #3
 800e848:	d878      	bhi.n	800e93c <SUBGRF_SetPacketParams+0x128>
 800e84a:	a201      	add	r2, pc, #4	; (adr r2, 800e850 <SUBGRF_SetPacketParams+0x3c>)
 800e84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e850:	0800e861 	.word	0x0800e861
 800e854:	0800e8f1 	.word	0x0800e8f1
 800e858:	0800e8e5 	.word	0x0800e8e5
 800e85c:	0800e861 	.word	0x0800e861
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	7a5b      	ldrb	r3, [r3, #9]
 800e864:	2bf1      	cmp	r3, #241	; 0xf1
 800e866:	d10a      	bne.n	800e87e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800e868:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e86c:	f7ff faaa 	bl	800ddc4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800e870:	f248 0005 	movw	r0, #32773	; 0x8005
 800e874:	f7ff fac6 	bl	800de04 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800e878:	2302      	movs	r3, #2
 800e87a:	75bb      	strb	r3, [r7, #22]
 800e87c:	e011      	b.n	800e8a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	7a5b      	ldrb	r3, [r3, #9]
 800e882:	2bf2      	cmp	r3, #242	; 0xf2
 800e884:	d10a      	bne.n	800e89c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800e886:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800e88a:	f7ff fa9b 	bl	800ddc4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800e88e:	f241 0021 	movw	r0, #4129	; 0x1021
 800e892:	f7ff fab7 	bl	800de04 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800e896:	2306      	movs	r3, #6
 800e898:	75bb      	strb	r3, [r7, #22]
 800e89a:	e002      	b.n	800e8a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	7a5b      	ldrb	r3, [r3, #9]
 800e8a0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800e8a2:	2309      	movs	r3, #9
 800e8a4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	885b      	ldrh	r3, [r3, #2]
 800e8aa:	0a1b      	lsrs	r3, r3, #8
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	885b      	ldrh	r3, [r3, #2]
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	791b      	ldrb	r3, [r3, #4]
 800e8be:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	795b      	ldrb	r3, [r3, #5]
 800e8c4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	799b      	ldrb	r3, [r3, #6]
 800e8ca:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	79db      	ldrb	r3, [r3, #7]
 800e8d0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	7a1b      	ldrb	r3, [r3, #8]
 800e8d6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800e8d8:	7dbb      	ldrb	r3, [r7, #22]
 800e8da:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7a9b      	ldrb	r3, [r3, #10]
 800e8e0:	753b      	strb	r3, [r7, #20]
        break;
 800e8e2:	e022      	b.n	800e92a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	7b1b      	ldrb	r3, [r3, #12]
 800e8ec:	733b      	strb	r3, [r7, #12]
        break;
 800e8ee:	e01c      	b.n	800e92a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800e8f0:	2306      	movs	r3, #6
 800e8f2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	89db      	ldrh	r3, [r3, #14]
 800e8f8:	0a1b      	lsrs	r3, r3, #8
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	89db      	ldrh	r3, [r3, #14]
 800e904:	b2db      	uxtb	r3, r3
 800e906:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	7c1a      	ldrb	r2, [r3, #16]
 800e90c:	4b0f      	ldr	r3, [pc, #60]	; (800e94c <SUBGRF_SetPacketParams+0x138>)
 800e90e:	4611      	mov	r1, r2
 800e910:	7019      	strb	r1, [r3, #0]
 800e912:	4613      	mov	r3, r2
 800e914:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	7c5b      	ldrb	r3, [r3, #17]
 800e91a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	7c9b      	ldrb	r3, [r3, #18]
 800e920:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	7cdb      	ldrb	r3, [r3, #19]
 800e926:	747b      	strb	r3, [r7, #17]
        break;
 800e928:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800e92a:	7dfb      	ldrb	r3, [r7, #23]
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	f107 030c 	add.w	r3, r7, #12
 800e932:	4619      	mov	r1, r3
 800e934:	208c      	movs	r0, #140	; 0x8c
 800e936:	f000 f965 	bl	800ec04 <SUBGRF_WriteCommand>
 800e93a:	e000      	b.n	800e93e <SUBGRF_SetPacketParams+0x12a>
        return;
 800e93c:	bf00      	nop
}
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	0800f7f0 	.word	0x0800f7f0
 800e948:	200015b9 	.word	0x200015b9
 800e94c:	200015ba 	.word	0x200015ba

0800e950 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	4603      	mov	r3, r0
 800e958:	460a      	mov	r2, r1
 800e95a:	71fb      	strb	r3, [r7, #7]
 800e95c:	4613      	mov	r3, r2
 800e95e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800e960:	79fb      	ldrb	r3, [r7, #7]
 800e962:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800e964:	79bb      	ldrb	r3, [r7, #6]
 800e966:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800e968:	f107 030c 	add.w	r3, r7, #12
 800e96c:	2202      	movs	r2, #2
 800e96e:	4619      	mov	r1, r3
 800e970:	208f      	movs	r0, #143	; 0x8f
 800e972:	f000 f947 	bl	800ec04 <SUBGRF_WriteCommand>
}
 800e976:	bf00      	nop
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b082      	sub	sp, #8
 800e982:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800e984:	2300      	movs	r3, #0
 800e986:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800e988:	1d3b      	adds	r3, r7, #4
 800e98a:	2201      	movs	r2, #1
 800e98c:	4619      	mov	r1, r3
 800e98e:	2015      	movs	r0, #21
 800e990:	f000 f95a 	bl	800ec48 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800e994:	793b      	ldrb	r3, [r7, #4]
 800e996:	425b      	negs	r3, r3
 800e998:	105b      	asrs	r3, r3, #1
 800e99a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800e99c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800e9b2:	f107 030c 	add.w	r3, r7, #12
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	2013      	movs	r0, #19
 800e9bc:	f000 f944 	bl	800ec48 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800e9c0:	f7ff fd7e 	bl	800e4c0 <SUBGRF_GetPacketType>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d10d      	bne.n	800e9e6 <SUBGRF_GetRxBufferStatus+0x3e>
 800e9ca:	4b0c      	ldr	r3, [pc, #48]	; (800e9fc <SUBGRF_GetRxBufferStatus+0x54>)
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d108      	bne.n	800e9e6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800e9d4:	f240 7002 	movw	r0, #1794	; 0x702
 800e9d8:	f000 f878 	bl	800eacc <SUBGRF_ReadRegister>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	461a      	mov	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	701a      	strb	r2, [r3, #0]
 800e9e4:	e002      	b.n	800e9ec <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800e9e6:	7b3a      	ldrb	r2, [r7, #12]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800e9ec:	7b7a      	ldrb	r2, [r7, #13]
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	701a      	strb	r2, [r3, #0]
}
 800e9f2:	bf00      	nop
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	200015ba 	.word	0x200015ba

0800ea00 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ea08:	f107 030c 	add.w	r3, r7, #12
 800ea0c:	2203      	movs	r2, #3
 800ea0e:	4619      	mov	r1, r3
 800ea10:	2014      	movs	r0, #20
 800ea12:	f000 f919 	bl	800ec48 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ea16:	f7ff fd53 	bl	800e4c0 <SUBGRF_GetPacketType>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d002      	beq.n	800ea30 <SUBGRF_GetPacketStatus+0x30>
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d013      	beq.n	800ea56 <SUBGRF_GetPacketStatus+0x56>
 800ea2e:	e02a      	b.n	800ea86 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ea30:	7b3a      	ldrb	r2, [r7, #12]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800ea36:	7b7b      	ldrb	r3, [r7, #13]
 800ea38:	425b      	negs	r3, r3
 800ea3a:	105b      	asrs	r3, r3, #1
 800ea3c:	b25a      	sxtb	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800ea42:	7bbb      	ldrb	r3, [r7, #14]
 800ea44:	425b      	negs	r3, r3
 800ea46:	105b      	asrs	r3, r3, #1
 800ea48:	b25a      	sxtb	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	609a      	str	r2, [r3, #8]
            break;
 800ea54:	e020      	b.n	800ea98 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ea56:	7b3b      	ldrb	r3, [r7, #12]
 800ea58:	425b      	negs	r3, r3
 800ea5a:	105b      	asrs	r3, r3, #1
 800ea5c:	b25a      	sxtb	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ea62:	7b7b      	ldrb	r3, [r7, #13]
 800ea64:	b25b      	sxtb	r3, r3
 800ea66:	3302      	adds	r3, #2
 800ea68:	109b      	asrs	r3, r3, #2
 800ea6a:	b25a      	sxtb	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ea70:	7bbb      	ldrb	r3, [r7, #14]
 800ea72:	425b      	negs	r3, r3
 800ea74:	105b      	asrs	r3, r3, #1
 800ea76:	b25a      	sxtb	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ea7c:	4b08      	ldr	r3, [pc, #32]	; (800eaa0 <SUBGRF_GetPacketStatus+0xa0>)
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	611a      	str	r2, [r3, #16]
            break;
 800ea84:	e008      	b.n	800ea98 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800ea86:	2214      	movs	r2, #20
 800ea88:	2100      	movs	r1, #0
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 faba 	bl	800f004 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	220f      	movs	r2, #15
 800ea94:	701a      	strb	r2, [r3, #0]
            break;
 800ea96:	bf00      	nop
    }
}
 800ea98:	bf00      	nop
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	200015bc 	.word	0x200015bc

0800eaa4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	460a      	mov	r2, r1
 800eaae:	80fb      	strh	r3, [r7, #6]
 800eab0:	4613      	mov	r3, r2
 800eab2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800eab4:	1d7a      	adds	r2, r7, #5
 800eab6:	88f9      	ldrh	r1, [r7, #6]
 800eab8:	2301      	movs	r3, #1
 800eaba:	4803      	ldr	r0, [pc, #12]	; (800eac8 <SUBGRF_WriteRegister+0x24>)
 800eabc:	f7f5 f854 	bl	8003b68 <HAL_SUBGHZ_WriteRegisters>
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	20000440 	.word	0x20000440

0800eacc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	4603      	mov	r3, r0
 800ead4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ead6:	f107 020f 	add.w	r2, r7, #15
 800eada:	88f9      	ldrh	r1, [r7, #6]
 800eadc:	2301      	movs	r3, #1
 800eade:	4804      	ldr	r0, [pc, #16]	; (800eaf0 <SUBGRF_ReadRegister+0x24>)
 800eae0:	f7f5 f8a1 	bl	8003c26 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20000440 	.word	0x20000440

0800eaf4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	4603      	mov	r3, r0
 800eafc:	6039      	str	r1, [r7, #0]
 800eafe:	80fb      	strh	r3, [r7, #6]
 800eb00:	4613      	mov	r3, r2
 800eb02:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb04:	f3ef 8310 	mrs	r3, PRIMASK
 800eb08:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800eb0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb0e:	b672      	cpsid	i
}
 800eb10:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800eb12:	88bb      	ldrh	r3, [r7, #4]
 800eb14:	88f9      	ldrh	r1, [r7, #6]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	4806      	ldr	r0, [pc, #24]	; (800eb34 <SUBGRF_WriteRegisters+0x40>)
 800eb1a:	f7f5 f825 	bl	8003b68 <HAL_SUBGHZ_WriteRegisters>
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	f383 8810 	msr	PRIMASK, r3
}
 800eb28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800eb2a:	bf00      	nop
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20000440 	.word	0x20000440

0800eb38 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	6039      	str	r1, [r7, #0]
 800eb42:	80fb      	strh	r3, [r7, #6]
 800eb44:	4613      	mov	r3, r2
 800eb46:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb48:	f3ef 8310 	mrs	r3, PRIMASK
 800eb4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800eb50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb52:	b672      	cpsid	i
}
 800eb54:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800eb56:	88bb      	ldrh	r3, [r7, #4]
 800eb58:	88f9      	ldrh	r1, [r7, #6]
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	4806      	ldr	r0, [pc, #24]	; (800eb78 <SUBGRF_ReadRegisters+0x40>)
 800eb5e:	f7f5 f862 	bl	8003c26 <HAL_SUBGHZ_ReadRegisters>
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	f383 8810 	msr	PRIMASK, r3
}
 800eb6c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800eb6e:	bf00      	nop
 800eb70:	3718      	adds	r7, #24
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	20000440 	.word	0x20000440

0800eb7c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	4603      	mov	r3, r0
 800eb84:	6039      	str	r1, [r7, #0]
 800eb86:	71fb      	strb	r3, [r7, #7]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb8c:	f3ef 8310 	mrs	r3, PRIMASK
 800eb90:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb92:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800eb94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb96:	b672      	cpsid	i
}
 800eb98:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800eb9a:	79bb      	ldrb	r3, [r7, #6]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	79f9      	ldrb	r1, [r7, #7]
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	4806      	ldr	r0, [pc, #24]	; (800ebbc <SUBGRF_WriteBuffer+0x40>)
 800eba4:	f7f5 f953 	bl	8003e4e <HAL_SUBGHZ_WriteBuffer>
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	f383 8810 	msr	PRIMASK, r3
}
 800ebb2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ebb4:	bf00      	nop
 800ebb6:	3718      	adds	r7, #24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	20000440 	.word	0x20000440

0800ebc0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	6039      	str	r1, [r7, #0]
 800ebca:	71fb      	strb	r3, [r7, #7]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebd0:	f3ef 8310 	mrs	r3, PRIMASK
 800ebd4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ebd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebda:	b672      	cpsid	i
}
 800ebdc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ebde:	79bb      	ldrb	r3, [r7, #6]
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	79f9      	ldrb	r1, [r7, #7]
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	4806      	ldr	r0, [pc, #24]	; (800ec00 <SUBGRF_ReadBuffer+0x40>)
 800ebe8:	f7f5 f984 	bl	8003ef4 <HAL_SUBGHZ_ReadBuffer>
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	f383 8810 	msr	PRIMASK, r3
}
 800ebf6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ebf8:	bf00      	nop
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	20000440 	.word	0x20000440

0800ec04 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	6039      	str	r1, [r7, #0]
 800ec0e:	71fb      	strb	r3, [r7, #7]
 800ec10:	4613      	mov	r3, r2
 800ec12:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec14:	f3ef 8310 	mrs	r3, PRIMASK
 800ec18:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ec1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec1e:	b672      	cpsid	i
}
 800ec20:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ec22:	88bb      	ldrh	r3, [r7, #4]
 800ec24:	79f9      	ldrb	r1, [r7, #7]
 800ec26:	683a      	ldr	r2, [r7, #0]
 800ec28:	4806      	ldr	r0, [pc, #24]	; (800ec44 <SUBGRF_WriteCommand+0x40>)
 800ec2a:	f7f5 f85d 	bl	8003ce8 <HAL_SUBGHZ_ExecSetCmd>
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	f383 8810 	msr	PRIMASK, r3
}
 800ec38:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ec3a:	bf00      	nop
 800ec3c:	3718      	adds	r7, #24
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	20000440 	.word	0x20000440

0800ec48 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	6039      	str	r1, [r7, #0]
 800ec52:	71fb      	strb	r3, [r7, #7]
 800ec54:	4613      	mov	r3, r2
 800ec56:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec58:	f3ef 8310 	mrs	r3, PRIMASK
 800ec5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ec60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec62:	b672      	cpsid	i
}
 800ec64:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800ec66:	88bb      	ldrh	r3, [r7, #4]
 800ec68:	79f9      	ldrb	r1, [r7, #7]
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	4806      	ldr	r0, [pc, #24]	; (800ec88 <SUBGRF_ReadCommand+0x40>)
 800ec6e:	f7f5 f89a 	bl	8003da6 <HAL_SUBGHZ_ExecGetCmd>
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	f383 8810 	msr	PRIMASK, r3
}
 800ec7c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ec7e:	bf00      	nop
 800ec80:	3718      	adds	r7, #24
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	20000440 	.word	0x20000440

0800ec8c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	460a      	mov	r2, r1
 800ec96:	71fb      	strb	r3, [r7, #7]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800eca0:	79bb      	ldrb	r3, [r7, #6]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d10d      	bne.n	800ecc2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800eca6:	79fb      	ldrb	r3, [r7, #7]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d104      	bne.n	800ecb6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800ecac:	2302      	movs	r3, #2
 800ecae:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ecb0:	2004      	movs	r0, #4
 800ecb2:	f000 f84e 	bl	800ed52 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d107      	bne.n	800eccc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	73fb      	strb	r3, [r7, #15]
 800ecc0:	e004      	b.n	800eccc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ecc2:	79bb      	ldrb	r3, [r7, #6]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d101      	bne.n	800eccc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7f5 fe5b 	bl	800498a <RBI_ConfigRFSwitch>
}
 800ecd4:	bf00      	nop
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	4603      	mov	r3, r0
 800ece4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ece6:	2301      	movs	r3, #1
 800ece8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ecea:	f7f5 fe5b 	bl	80049a4 <RBI_GetTxConfig>
 800ecee:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d016      	beq.n	800ed24 <SUBGRF_SetRfTxPower+0x48>
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	dc16      	bgt.n	800ed2a <SUBGRF_SetRfTxPower+0x4e>
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d003      	beq.n	800ed0a <SUBGRF_SetRfTxPower+0x2e>
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d00a      	beq.n	800ed1e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ed08:	e00f      	b.n	800ed2a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ed0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed0e:	2b0f      	cmp	r3, #15
 800ed10:	dd02      	ble.n	800ed18 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ed12:	2302      	movs	r3, #2
 800ed14:	73fb      	strb	r3, [r7, #15]
            break;
 800ed16:	e009      	b.n	800ed2c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	73fb      	strb	r3, [r7, #15]
            break;
 800ed1c:	e006      	b.n	800ed2c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	73fb      	strb	r3, [r7, #15]
            break;
 800ed22:	e003      	b.n	800ed2c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800ed24:	2302      	movs	r3, #2
 800ed26:	73fb      	strb	r3, [r7, #15]
            break;
 800ed28:	e000      	b.n	800ed2c <SUBGRF_SetRfTxPower+0x50>
            break;
 800ed2a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ed2c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
 800ed32:	2202      	movs	r2, #2
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7ff fbcd 	bl	800e4d4 <SUBGRF_SetTxParams>

    return paSelect;
 800ed3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800ed44:	b480      	push	{r7}
 800ed46:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800ed48:	2301      	movs	r3, #1
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bc80      	pop	{r7}
 800ed50:	4770      	bx	lr

0800ed52 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b084      	sub	sp, #16
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	4603      	mov	r3, r0
 800ed5a:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800ed5c:	f7f5 fe38 	bl	80049d0 <RBI_IsDCDC>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d112      	bne.n	800ed8c <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ed66:	f640 1023 	movw	r0, #2339	; 0x923
 800ed6a:	f7ff feaf 	bl	800eacc <SUBGRF_ReadRegister>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ed72:	7bfb      	ldrb	r3, [r7, #15]
 800ed74:	f023 0306 	bic.w	r3, r3, #6
 800ed78:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ed7a:	7bfa      	ldrb	r2, [r7, #15]
 800ed7c:	79fb      	ldrb	r3, [r7, #7]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	4619      	mov	r1, r3
 800ed84:	f640 1023 	movw	r0, #2339	; 0x923
 800ed88:	f7ff fe8c 	bl	800eaa4 <SUBGRF_WriteRegister>
  }
}
 800ed8c:	bf00      	nop
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d101      	bne.n	800eda6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800eda2:	231f      	movs	r3, #31
 800eda4:	e016      	b.n	800edd4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800eda6:	2300      	movs	r3, #0
 800eda8:	73fb      	strb	r3, [r7, #15]
 800edaa:	e00f      	b.n	800edcc <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800edac:	7bfb      	ldrb	r3, [r7, #15]
 800edae:	4a0c      	ldr	r2, [pc, #48]	; (800ede0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800edb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d205      	bcs.n	800edc6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800edba:	7bfb      	ldrb	r3, [r7, #15]
 800edbc:	4a08      	ldr	r2, [pc, #32]	; (800ede0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	4413      	add	r3, r2
 800edc2:	791b      	ldrb	r3, [r3, #4]
 800edc4:	e006      	b.n	800edd4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800edc6:	7bfb      	ldrb	r3, [r7, #15]
 800edc8:	3301      	adds	r3, #1
 800edca:	73fb      	strb	r3, [r7, #15]
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	2b15      	cmp	r3, #21
 800edd0:	d9ec      	bls.n	800edac <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800edd2:	e7fe      	b.n	800edd2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3714      	adds	r7, #20
 800edd8:	46bd      	mov	sp, r7
 800edda:	bc80      	pop	{r7}
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	0800fc84 	.word	0x0800fc84

0800ede4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08a      	sub	sp, #40	; 0x28
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800edee:	4b35      	ldr	r3, [pc, #212]	; (800eec4 <SUBGRF_GetCFO+0xe0>)
 800edf0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800edf2:	f640 0007 	movw	r0, #2055	; 0x807
 800edf6:	f7ff fe69 	bl	800eacc <SUBGRF_ReadRegister>
 800edfa:	4603      	mov	r3, r0
 800edfc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800edfe:	7ffb      	ldrb	r3, [r7, #31]
 800ee00:	08db      	lsrs	r3, r3, #3
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	f003 0303 	and.w	r3, r3, #3
 800ee08:	3328      	adds	r3, #40	; 0x28
 800ee0a:	443b      	add	r3, r7
 800ee0c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ee10:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800ee12:	7ffb      	ldrb	r3, [r7, #31]
 800ee14:	f003 0307 	and.w	r3, r3, #7
 800ee18:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800ee1a:	7fba      	ldrb	r2, [r7, #30]
 800ee1c:	7f7b      	ldrb	r3, [r7, #29]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	fa02 f303 	lsl.w	r3, r2, r3
 800ee24:	461a      	mov	r2, r3
 800ee26:	4b28      	ldr	r3, [pc, #160]	; (800eec8 <SUBGRF_GetCFO+0xe4>)
 800ee28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee2c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800ee2e:	69ba      	ldr	r2, [r7, #24]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee36:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800ee3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee42:	697a      	ldr	r2, [r7, #20]
 800ee44:	fb02 f303 	mul.w	r3, r2, r3
 800ee48:	2b07      	cmp	r3, #7
 800ee4a:	d802      	bhi.n	800ee52 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800ee52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	fb02 f303 	mul.w	r3, r2, r3
 800ee5c:	2b03      	cmp	r3, #3
 800ee5e:	d802      	bhi.n	800ee66 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800ee60:	2304      	movs	r3, #4
 800ee62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800ee66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	fb02 f303 	mul.w	r3, r2, r3
 800ee70:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800ee72:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800ee76:	f7ff fe29 	bl	800eacc <SUBGRF_ReadRegister>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	021b      	lsls	r3, r3, #8
 800ee7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ee82:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800ee84:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800ee88:	f7ff fe20 	bl	800eacc <SUBGRF_ReadRegister>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	461a      	mov	r2, r3
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	4313      	orrs	r3, r2
 800ee94:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d005      	beq.n	800eeac <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800eea6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800eeaa:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	095b      	lsrs	r3, r3, #5
 800eeb0:	6a3a      	ldr	r2, [r7, #32]
 800eeb2:	fb02 f303 	mul.w	r3, r2, r3
 800eeb6:	11da      	asrs	r2, r3, #7
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	601a      	str	r2, [r3, #0]
}
 800eebc:	bf00      	nop
 800eebe:	3728      	adds	r7, #40	; 0x28
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	0c0a0804 	.word	0x0c0a0804
 800eec8:	01e84800 	.word	0x01e84800

0800eecc <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800eecc:	b480      	push	{r7}
 800eece:	b087      	sub	sp, #28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800eede:	f04f 33ff 	mov.w	r3, #4294967295
 800eee2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800eee4:	697b      	ldr	r3, [r7, #20]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	371c      	adds	r7, #28
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bc80      	pop	{r7}
 800eeee:	4770      	bx	lr

0800eef0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800eef0:	b480      	push	{r7}
 800eef2:	b087      	sub	sp, #28
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	4603      	mov	r3, r0
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
 800eefc:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800ef02:	f04f 33ff 	mov.w	r3, #4294967295
 800ef06:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800ef08:	697b      	ldr	r3, [r7, #20]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	371c      	adds	r7, #28
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bc80      	pop	{r7}
 800ef12:	4770      	bx	lr

0800ef14 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800ef20:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bc80      	pop	{r7}
 800ef2c:	4770      	bx	lr

0800ef2e <RFW_DeInit>:

void RFW_DeInit( void )
{
 800ef2e:	b480      	push	{r7}
 800ef30:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800ef32:	bf00      	nop
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bc80      	pop	{r7}
 800ef38:	4770      	bx	lr

0800ef3a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800ef3a:	b480      	push	{r7}
 800ef3c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800ef3e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bc80      	pop	{r7}
 800ef46:	4770      	bx	lr

0800ef48 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800ef48:	b480      	push	{r7}
 800ef4a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800ef4c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bc80      	pop	{r7}
 800ef54:	4770      	bx	lr

0800ef56 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800ef56:	b480      	push	{r7}
 800ef58:	b083      	sub	sp, #12
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800ef60:	bf00      	nop
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bc80      	pop	{r7}
 800ef68:	4770      	bx	lr

0800ef6a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b087      	sub	sp, #28
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	60f8      	str	r0, [r7, #12]
 800ef72:	460b      	mov	r3, r1
 800ef74:	607a      	str	r2, [r7, #4]
 800ef76:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800ef78:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800ef7e:	697b      	ldr	r3, [r7, #20]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	371c      	adds	r7, #28
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bc80      	pop	{r7}
 800ef88:	4770      	bx	lr

0800ef8a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800ef8a:	b480      	push	{r7}
 800ef8c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800ef8e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bc80      	pop	{r7}
 800ef98:	4770      	bx	lr

0800ef9a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800ef9a:	b480      	push	{r7}
 800ef9c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800ef9e:	bf00      	nop
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bc80      	pop	{r7}
 800efa4:	4770      	bx	lr

0800efa6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800efa6:	b480      	push	{r7}
 800efa8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800efaa:	bf00      	nop
 800efac:	46bd      	mov	sp, r7
 800efae:	bc80      	pop	{r7}
 800efb0:	4770      	bx	lr

0800efb2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	4603      	mov	r3, r0
 800efba:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bc80      	pop	{r7}
 800efc4:	4770      	bx	lr

0800efc6 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800efc6:	b480      	push	{r7}
 800efc8:	b087      	sub	sp, #28
 800efca:	af00      	add	r7, sp, #0
 800efcc:	60f8      	str	r0, [r7, #12]
 800efce:	60b9      	str	r1, [r7, #8]
 800efd0:	4613      	mov	r3, r2
 800efd2:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	613b      	str	r3, [r7, #16]

  while( size-- )
 800efdc:	e007      	b.n	800efee <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800efde:	693a      	ldr	r2, [r7, #16]
 800efe0:	1c53      	adds	r3, r2, #1
 800efe2:	613b      	str	r3, [r7, #16]
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	1c59      	adds	r1, r3, #1
 800efe8:	6179      	str	r1, [r7, #20]
 800efea:	7812      	ldrb	r2, [r2, #0]
 800efec:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800efee:	88fb      	ldrh	r3, [r7, #6]
 800eff0:	1e5a      	subs	r2, r3, #1
 800eff2:	80fa      	strh	r2, [r7, #6]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1f2      	bne.n	800efde <UTIL_MEM_cpy_8+0x18>
    }
}
 800eff8:	bf00      	nop
 800effa:	bf00      	nop
 800effc:	371c      	adds	r7, #28
 800effe:	46bd      	mov	sp, r7
 800f000:	bc80      	pop	{r7}
 800f002:	4770      	bx	lr

0800f004 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	70fb      	strb	r3, [r7, #3]
 800f010:	4613      	mov	r3, r2
 800f012:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800f018:	e004      	b.n	800f024 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	1c5a      	adds	r2, r3, #1
 800f01e:	60fa      	str	r2, [r7, #12]
 800f020:	78fa      	ldrb	r2, [r7, #3]
 800f022:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800f024:	883b      	ldrh	r3, [r7, #0]
 800f026:	1e5a      	subs	r2, r3, #1
 800f028:	803a      	strh	r2, [r7, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1f5      	bne.n	800f01a <UTIL_MEM_set_8+0x16>
  }
}
 800f02e:	bf00      	nop
 800f030:	bf00      	nop
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	bc80      	pop	{r7}
 800f038:	4770      	bx	lr

0800f03a <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800f03a:	b082      	sub	sp, #8
 800f03c:	b480      	push	{r7}
 800f03e:	b087      	sub	sp, #28
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	1d38      	adds	r0, r7, #4
 800f046:	e880 0006 	stmia.w	r0, {r1, r2}
 800f04a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800f04c:	2300      	movs	r3, #0
 800f04e:	613b      	str	r3, [r7, #16]
 800f050:	2300      	movs	r3, #0
 800f052:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f058:	4413      	add	r3, r2
 800f05a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f05c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f060:	b29a      	uxth	r2, r3
 800f062:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f066:	b29b      	uxth	r3, r3
 800f068:	4413      	add	r3, r2
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	b21b      	sxth	r3, r3
 800f06e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800f070:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f078:	db0a      	blt.n	800f090 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	3301      	adds	r3, #1
 800f07e:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800f080:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f084:	b29b      	uxth	r3, r3
 800f086:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	b21b      	sxth	r3, r3
 800f08e:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	461a      	mov	r2, r3
 800f094:	f107 0310 	add.w	r3, r7, #16
 800f098:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f09c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	371c      	adds	r7, #28
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bc80      	pop	{r7}
 800f0a8:	b002      	add	sp, #8
 800f0aa:	4770      	bx	lr

0800f0ac <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800f0ac:	b082      	sub	sp, #8
 800f0ae:	b480      	push	{r7}
 800f0b0:	b087      	sub	sp, #28
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	60f8      	str	r0, [r7, #12]
 800f0b6:	1d38      	adds	r0, r7, #4
 800f0b8:	e880 0006 	stmia.w	r0, {r1, r2}
 800f0bc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 800f0be:	2300      	movs	r3, #0
 800f0c0:	613b      	str	r3, [r7, #16]
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f0ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	1ad3      	subs	r3, r2, r3
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	b21b      	sxth	r3, r3
 800f0e0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 800f0e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	da0a      	bge.n	800f100 <SysTimeSub+0x54>
  {
    c.Seconds--;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 800f0f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	b21b      	sxth	r3, r3
 800f0fe:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	461a      	mov	r2, r3
 800f104:	f107 0310 	add.w	r3, r7, #16
 800f108:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f10c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	371c      	adds	r7, #28
 800f114:	46bd      	mov	sp, r7
 800f116:	bc80      	pop	{r7}
 800f118:	b002      	add	sp, #8
 800f11a:	4770      	bx	lr

0800f11c <SysTimeGetMcuTime>:
  return sysTime;
}


SysTime_t SysTimeGetMcuTime( void )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f124:	2300      	movs	r3, #0
 800f126:	60bb      	str	r3, [r7, #8]
 800f128:	2300      	movs	r3, #0
 800f12a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f12c:	4b0a      	ldr	r3, [pc, #40]	; (800f158 <SysTimeGetMcuTime+0x3c>)
 800f12e:	691b      	ldr	r3, [r3, #16]
 800f130:	f107 0208 	add.w	r2, r7, #8
 800f134:	3204      	adds	r2, #4
 800f136:	4610      	mov	r0, r2
 800f138:	4798      	blx	r3
 800f13a:	4603      	mov	r3, r0
 800f13c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	461a      	mov	r2, r3
 800f142:	f107 0308 	add.w	r3, r7, #8
 800f146:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f14a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	0800f8a8 	.word	0x0800f8a8

0800f15c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b088      	sub	sp, #32
 800f160:	af02      	add	r7, sp, #8
 800f162:	463b      	mov	r3, r7
 800f164:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f168:	4b0f      	ldr	r3, [pc, #60]	; (800f1a8 <SysTimeToMs+0x4c>)
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	4798      	blx	r3
 800f16e:	4603      	mov	r3, r0
 800f170:	b21b      	sxth	r3, r3
 800f172:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f174:	4b0c      	ldr	r3, [pc, #48]	; (800f1a8 <SysTimeToMs+0x4c>)
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	4798      	blx	r3
 800f17a:	4603      	mov	r3, r0
 800f17c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 800f17e:	f107 0008 	add.w	r0, r7, #8
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	463a      	mov	r2, r7
 800f18a:	ca06      	ldmia	r2, {r1, r2}
 800f18c:	f7ff ff8e 	bl	800f0ac <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f196:	fb02 f303 	mul.w	r3, r2, r3
 800f19a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f19e:	4413      	add	r3, r2
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	0800f8a8 	.word	0x0800f8a8

0800f1ac <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	; 0x28
 800f1b0:	af02      	add	r7, sp, #8
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	4a19      	ldr	r2, [pc, #100]	; (800f220 <SysTimeFromMs+0x74>)
 800f1ba:	fba2 2303 	umull	r2, r3, r2, r3
 800f1be:	099b      	lsrs	r3, r3, #6
 800f1c0:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	617b      	str	r3, [r7, #20]
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	0149      	lsls	r1, r1, #5
 800f1d2:	1ac9      	subs	r1, r1, r3
 800f1d4:	0089      	lsls	r1, r1, #2
 800f1d6:	440b      	add	r3, r1
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	b21b      	sxth	r3, r3
 800f1e2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 800f1e4:	f107 030c 	add.w	r3, r7, #12
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	601a      	str	r2, [r3, #0]
 800f1ec:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f1ee:	4b0d      	ldr	r3, [pc, #52]	; (800f224 <SysTimeFromMs+0x78>)
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	4798      	blx	r3
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	b21b      	sxth	r3, r3
 800f1f8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f1fa:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <SysTimeFromMs+0x78>)
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	4798      	blx	r3
 800f200:	4603      	mov	r3, r0
 800f202:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f107 0214 	add.w	r2, r7, #20
 800f210:	ca06      	ldmia	r2, {r1, r2}
 800f212:	f7ff ff12 	bl	800f03a <SysTimeAdd>
}
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	3720      	adds	r7, #32
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	10624dd3 	.word	0x10624dd3
 800f224:	0800f8a8 	.word	0x0800f8a8

0800f228 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	603b      	str	r3, [r7, #0]
 800f234:	4613      	mov	r3, r2
 800f236:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d023      	beq.n	800f286 <UTIL_TIMER_Create+0x5e>
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d020      	beq.n	800f286 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f24a:	4b11      	ldr	r3, [pc, #68]	; (800f290 <UTIL_TIMER_Create+0x68>)
 800f24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24e:	68b8      	ldr	r0, [r7, #8]
 800f250:	4798      	blx	r3
 800f252:	4602      	mov	r2, r0
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2200      	movs	r2, #0
 800f25c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2200      	movs	r2, #0
 800f262:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	69ba      	ldr	r2, [r7, #24]
 800f274:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	79fa      	ldrb	r2, [r7, #7]
 800f27a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	e000      	b.n	800f288 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800f286:	2301      	movs	r3, #1
  }
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	0800f87c 	.word	0x0800f87c

0800f294 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b08a      	sub	sp, #40	; 0x28
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d056      	beq.n	800f356 <UTIL_TIMER_Start+0xc2>
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 f929 	bl	800f500 <TimerExists>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	f083 0301 	eor.w	r3, r3, #1
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d04d      	beq.n	800f356 <UTIL_TIMER_Start+0xc2>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	7a5b      	ldrb	r3, [r3, #9]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d149      	bne.n	800f356 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2c2:	f3ef 8310 	mrs	r3, PRIMASK
 800f2c6:	613b      	str	r3, [r7, #16]
  return(result);
 800f2c8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800f2ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2cc:	b672      	cpsid	i
}
 800f2ce:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800f2d6:	4b24      	ldr	r3, [pc, #144]	; (800f368 <UTIL_TIMER_Start+0xd4>)
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	4798      	blx	r3
 800f2dc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800f2de:	6a3a      	ldr	r2, [r7, #32]
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d201      	bcs.n	800f2ea <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6a3a      	ldr	r2, [r7, #32]
 800f2ee:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800f302:	4b1a      	ldr	r3, [pc, #104]	; (800f36c <UTIL_TIMER_Start+0xd8>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d106      	bne.n	800f318 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800f30a:	4b17      	ldr	r3, [pc, #92]	; (800f368 <UTIL_TIMER_Start+0xd4>)
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 f96b 	bl	800f5ec <TimerInsertNewHeadTimer>
 800f316:	e017      	b.n	800f348 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800f318:	4b13      	ldr	r3, [pc, #76]	; (800f368 <UTIL_TIMER_Start+0xd4>)
 800f31a:	699b      	ldr	r3, [r3, #24]
 800f31c:	4798      	blx	r3
 800f31e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	441a      	add	r2, r3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	4b0e      	ldr	r3, [pc, #56]	; (800f36c <UTIL_TIMER_Start+0xd8>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	429a      	cmp	r2, r3
 800f338:	d203      	bcs.n	800f342 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 f956 	bl	800f5ec <TimerInsertNewHeadTimer>
 800f340:	e002      	b.n	800f348 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f922 	bl	800f58c <TimerInsertTimer>
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f383 8810 	msr	PRIMASK, r3
}
 800f352:	bf00      	nop
  {
 800f354:	e002      	b.n	800f35c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800f356:	2301      	movs	r3, #1
 800f358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800f35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f360:	4618      	mov	r0, r3
 800f362:	3728      	adds	r7, #40	; 0x28
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	0800f87c 	.word	0x0800f87c
 800f36c:	200015c8 	.word	0x200015c8

0800f370 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b088      	sub	sp, #32
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f378:	2300      	movs	r3, #0
 800f37a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d05b      	beq.n	800f43a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f382:	f3ef 8310 	mrs	r3, PRIMASK
 800f386:	60fb      	str	r3, [r7, #12]
  return(result);
 800f388:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800f38a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f38c:	b672      	cpsid	i
}
 800f38e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800f390:	4b2d      	ldr	r3, [pc, #180]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800f396:	4b2c      	ldr	r3, [pc, #176]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800f3a2:	4b29      	ldr	r3, [pc, #164]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d041      	beq.n	800f42e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800f3b0:	4b25      	ldr	r3, [pc, #148]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d134      	bne.n	800f424 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800f3ba:	4b23      	ldr	r3, [pc, #140]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800f3c2:	4b21      	ldr	r3, [pc, #132]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	695b      	ldr	r3, [r3, #20]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00a      	beq.n	800f3e2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800f3cc:	4b1e      	ldr	r3, [pc, #120]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	695b      	ldr	r3, [r3, #20]
 800f3d2:	4a1d      	ldr	r2, [pc, #116]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3d4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800f3d6:	4b1c      	ldr	r3, [pc, #112]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f000 f8ac 	bl	800f538 <TimerSetTimeout>
 800f3e0:	e023      	b.n	800f42a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800f3e2:	4b1a      	ldr	r3, [pc, #104]	; (800f44c <UTIL_TIMER_Stop+0xdc>)
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	4798      	blx	r3
            TimerListHead = NULL;
 800f3e8:	4b17      	ldr	r3, [pc, #92]	; (800f448 <UTIL_TIMER_Stop+0xd8>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	e01c      	b.n	800f42a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800f3f0:	697a      	ldr	r2, [r7, #20]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d110      	bne.n	800f41a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	695b      	ldr	r3, [r3, #20]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d006      	beq.n	800f40e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	695b      	ldr	r3, [r3, #20]
 800f404:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	697a      	ldr	r2, [r7, #20]
 800f40a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800f40c:	e00d      	b.n	800f42a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800f40e:	2300      	movs	r3, #0
 800f410:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	615a      	str	r2, [r3, #20]
            break;
 800f418:	e007      	b.n	800f42a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	695b      	ldr	r3, [r3, #20]
 800f422:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e2      	bne.n	800f3f0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	77fb      	strb	r3, [r7, #31]
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	f383 8810 	msr	PRIMASK, r3
}
 800f438:	e001      	b.n	800f43e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800f43a:	2301      	movs	r3, #1
 800f43c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800f43e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3720      	adds	r7, #32
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	200015c8 	.word	0x200015c8
 800f44c:	0800f87c 	.word	0x0800f87c

0800f450 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d102      	bne.n	800f46a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800f464:	2301      	movs	r3, #1
 800f466:	73fb      	strb	r3, [r7, #15]
 800f468:	e014      	b.n	800f494 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800f46a:	4b0d      	ldr	r3, [pc, #52]	; (800f4a0 <UTIL_TIMER_SetPeriod+0x50>)
 800f46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46e:	6838      	ldr	r0, [r7, #0]
 800f470:	4798      	blx	r3
 800f472:	4602      	mov	r2, r0
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 f841 	bl	800f500 <TimerExists>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d007      	beq.n	800f494 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7ff ff73 	bl	800f370 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7ff ff02 	bl	800f294 <UTIL_TIMER_Start>
 800f490:	4603      	mov	r3, r0
 800f492:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800f494:	7bfb      	ldrb	r3, [r7, #15]
}
 800f496:	4618      	mov	r0, r3
 800f498:	3710      	adds	r7, #16
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	0800f87c 	.word	0x0800f87c

0800f4a4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800f4aa:	4b06      	ldr	r3, [pc, #24]	; (800f4c4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800f4ac:	69db      	ldr	r3, [r3, #28]
 800f4ae:	4798      	blx	r3
 800f4b0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800f4b2:	4b04      	ldr	r3, [pc, #16]	; (800f4c4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800f4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	4798      	blx	r3
 800f4ba:	4603      	mov	r3, r0
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	0800f87c 	.word	0x0800f87c

0800f4c8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f4d0:	4b0a      	ldr	r3, [pc, #40]	; (800f4fc <UTIL_TIMER_GetElapsedTime+0x34>)
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	4798      	blx	r3
 800f4d6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800f4d8:	4b08      	ldr	r3, [pc, #32]	; (800f4fc <UTIL_TIMER_GetElapsedTime+0x34>)
 800f4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	4798      	blx	r3
 800f4e0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800f4e2:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <UTIL_TIMER_GetElapsedTime+0x34>)
 800f4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e6:	68f9      	ldr	r1, [r7, #12]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	1a8a      	subs	r2, r1, r2
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	4798      	blx	r3
 800f4f0:	4603      	mov	r3, r0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	0800f87c 	.word	0x0800f87c

0800f500 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800f500:	b480      	push	{r7}
 800f502:	b085      	sub	sp, #20
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f508:	4b0a      	ldr	r3, [pc, #40]	; (800f534 <TimerExists+0x34>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800f50e:	e008      	b.n	800f522 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	429a      	cmp	r2, r3
 800f516:	d101      	bne.n	800f51c <TimerExists+0x1c>
    {
      return true;
 800f518:	2301      	movs	r3, #1
 800f51a:	e006      	b.n	800f52a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	695b      	ldr	r3, [r3, #20]
 800f520:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1f3      	bne.n	800f510 <TimerExists+0x10>
  }
  return false;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3714      	adds	r7, #20
 800f52e:	46bd      	mov	sp, r7
 800f530:	bc80      	pop	{r7}
 800f532:	4770      	bx	lr
 800f534:	200015c8 	.word	0x200015c8

0800f538 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800f538:	b590      	push	{r4, r7, lr}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f540:	4b11      	ldr	r3, [pc, #68]	; (800f588 <TimerSetTimeout+0x50>)
 800f542:	6a1b      	ldr	r3, [r3, #32]
 800f544:	4798      	blx	r3
 800f546:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681c      	ldr	r4, [r3, #0]
 800f552:	4b0d      	ldr	r3, [pc, #52]	; (800f588 <TimerSetTimeout+0x50>)
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	4798      	blx	r3
 800f558:	4602      	mov	r2, r0
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	4413      	add	r3, r2
 800f55e:	429c      	cmp	r4, r3
 800f560:	d207      	bcs.n	800f572 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800f562:	4b09      	ldr	r3, [pc, #36]	; (800f588 <TimerSetTimeout+0x50>)
 800f564:	699b      	ldr	r3, [r3, #24]
 800f566:	4798      	blx	r3
 800f568:	4602      	mov	r2, r0
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	441a      	add	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800f572:	4b05      	ldr	r3, [pc, #20]	; (800f588 <TimerSetTimeout+0x50>)
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	6812      	ldr	r2, [r2, #0]
 800f57a:	4610      	mov	r0, r2
 800f57c:	4798      	blx	r3
}
 800f57e:	bf00      	nop
 800f580:	3714      	adds	r7, #20
 800f582:	46bd      	mov	sp, r7
 800f584:	bd90      	pop	{r4, r7, pc}
 800f586:	bf00      	nop
 800f588:	0800f87c 	.word	0x0800f87c

0800f58c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f594:	4b14      	ldr	r3, [pc, #80]	; (800f5e8 <TimerInsertTimer+0x5c>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800f59a:	4b13      	ldr	r3, [pc, #76]	; (800f5e8 <TimerInsertTimer+0x5c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	695b      	ldr	r3, [r3, #20]
 800f5a0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800f5a2:	e012      	b.n	800f5ca <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d905      	bls.n	800f5bc <TimerInsertTimer+0x30>
    {
        cur = next;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	60bb      	str	r3, [r7, #8]
 800f5ba:	e006      	b.n	800f5ca <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	615a      	str	r2, [r3, #20]
        return;
 800f5c8:	e009      	b.n	800f5de <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	695b      	ldr	r3, [r3, #20]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d1e8      	bne.n	800f5a4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	615a      	str	r2, [r3, #20]
}
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bc80      	pop	{r7}
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	200015c8 	.word	0x200015c8

0800f5ec <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f5f4:	4b0b      	ldr	r3, [pc, #44]	; (800f624 <TimerInsertNewHeadTimer+0x38>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2200      	movs	r2, #0
 800f604:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800f60c:	4a05      	ldr	r2, [pc, #20]	; (800f624 <TimerInsertNewHeadTimer+0x38>)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800f612:	4b04      	ldr	r3, [pc, #16]	; (800f624 <TimerInsertNewHeadTimer+0x38>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	4618      	mov	r0, r3
 800f618:	f7ff ff8e 	bl	800f538 <TimerSetTimeout>
}
 800f61c:	bf00      	nop
 800f61e:	3710      	adds	r7, #16
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	200015c8 	.word	0x200015c8

0800f628 <__libc_init_array>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	4d0d      	ldr	r5, [pc, #52]	; (800f660 <__libc_init_array+0x38>)
 800f62c:	4c0d      	ldr	r4, [pc, #52]	; (800f664 <__libc_init_array+0x3c>)
 800f62e:	1b64      	subs	r4, r4, r5
 800f630:	10a4      	asrs	r4, r4, #2
 800f632:	2600      	movs	r6, #0
 800f634:	42a6      	cmp	r6, r4
 800f636:	d109      	bne.n	800f64c <__libc_init_array+0x24>
 800f638:	4d0b      	ldr	r5, [pc, #44]	; (800f668 <__libc_init_array+0x40>)
 800f63a:	4c0c      	ldr	r4, [pc, #48]	; (800f66c <__libc_init_array+0x44>)
 800f63c:	f000 f8a0 	bl	800f780 <_init>
 800f640:	1b64      	subs	r4, r4, r5
 800f642:	10a4      	asrs	r4, r4, #2
 800f644:	2600      	movs	r6, #0
 800f646:	42a6      	cmp	r6, r4
 800f648:	d105      	bne.n	800f656 <__libc_init_array+0x2e>
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
 800f64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f650:	4798      	blx	r3
 800f652:	3601      	adds	r6, #1
 800f654:	e7ee      	b.n	800f634 <__libc_init_array+0xc>
 800f656:	f855 3b04 	ldr.w	r3, [r5], #4
 800f65a:	4798      	blx	r3
 800f65c:	3601      	adds	r6, #1
 800f65e:	e7f2      	b.n	800f646 <__libc_init_array+0x1e>
 800f660:	0800fd3c 	.word	0x0800fd3c
 800f664:	0800fd3c 	.word	0x0800fd3c
 800f668:	0800fd3c 	.word	0x0800fd3c
 800f66c:	0800fd40 	.word	0x0800fd40

0800f670 <memset>:
 800f670:	4402      	add	r2, r0
 800f672:	4603      	mov	r3, r0
 800f674:	4293      	cmp	r3, r2
 800f676:	d100      	bne.n	800f67a <memset+0xa>
 800f678:	4770      	bx	lr
 800f67a:	f803 1b01 	strb.w	r1, [r3], #1
 800f67e:	e7f9      	b.n	800f674 <memset+0x4>

0800f680 <floor>:
 800f680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f684:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f688:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f68c:	2e13      	cmp	r6, #19
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	4607      	mov	r7, r0
 800f694:	460c      	mov	r4, r1
 800f696:	4605      	mov	r5, r0
 800f698:	dc33      	bgt.n	800f702 <floor+0x82>
 800f69a:	2e00      	cmp	r6, #0
 800f69c:	da14      	bge.n	800f6c8 <floor+0x48>
 800f69e:	a334      	add	r3, pc, #208	; (adr r3, 800f770 <floor+0xf0>)
 800f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a4:	f7f0 fd6e 	bl	8000184 <__adddf3>
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f7f0 ff9e 	bl	80005ec <__aeabi_dcmpgt>
 800f6b0:	b138      	cbz	r0, 800f6c2 <floor+0x42>
 800f6b2:	2c00      	cmp	r4, #0
 800f6b4:	da58      	bge.n	800f768 <floor+0xe8>
 800f6b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f6ba:	431d      	orrs	r5, r3
 800f6bc:	d001      	beq.n	800f6c2 <floor+0x42>
 800f6be:	4c2e      	ldr	r4, [pc, #184]	; (800f778 <floor+0xf8>)
 800f6c0:	2500      	movs	r5, #0
 800f6c2:	4623      	mov	r3, r4
 800f6c4:	462f      	mov	r7, r5
 800f6c6:	e025      	b.n	800f714 <floor+0x94>
 800f6c8:	4a2c      	ldr	r2, [pc, #176]	; (800f77c <floor+0xfc>)
 800f6ca:	fa42 f806 	asr.w	r8, r2, r6
 800f6ce:	ea01 0208 	and.w	r2, r1, r8
 800f6d2:	4302      	orrs	r2, r0
 800f6d4:	d01e      	beq.n	800f714 <floor+0x94>
 800f6d6:	a326      	add	r3, pc, #152	; (adr r3, 800f770 <floor+0xf0>)
 800f6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6dc:	f7f0 fd52 	bl	8000184 <__adddf3>
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f7f0 ff82 	bl	80005ec <__aeabi_dcmpgt>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d0ea      	beq.n	800f6c2 <floor+0x42>
 800f6ec:	2c00      	cmp	r4, #0
 800f6ee:	bfbe      	ittt	lt
 800f6f0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f6f4:	fa43 f606 	asrlt.w	r6, r3, r6
 800f6f8:	19a4      	addlt	r4, r4, r6
 800f6fa:	ea24 0408 	bic.w	r4, r4, r8
 800f6fe:	2500      	movs	r5, #0
 800f700:	e7df      	b.n	800f6c2 <floor+0x42>
 800f702:	2e33      	cmp	r6, #51	; 0x33
 800f704:	dd0a      	ble.n	800f71c <floor+0x9c>
 800f706:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f70a:	d103      	bne.n	800f714 <floor+0x94>
 800f70c:	f7f0 fd3a 	bl	8000184 <__adddf3>
 800f710:	4607      	mov	r7, r0
 800f712:	460b      	mov	r3, r1
 800f714:	4638      	mov	r0, r7
 800f716:	4619      	mov	r1, r3
 800f718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f71c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f720:	f04f 32ff 	mov.w	r2, #4294967295
 800f724:	fa22 f808 	lsr.w	r8, r2, r8
 800f728:	ea18 0f00 	tst.w	r8, r0
 800f72c:	d0f2      	beq.n	800f714 <floor+0x94>
 800f72e:	a310      	add	r3, pc, #64	; (adr r3, 800f770 <floor+0xf0>)
 800f730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f734:	f7f0 fd26 	bl	8000184 <__adddf3>
 800f738:	2200      	movs	r2, #0
 800f73a:	2300      	movs	r3, #0
 800f73c:	f7f0 ff56 	bl	80005ec <__aeabi_dcmpgt>
 800f740:	2800      	cmp	r0, #0
 800f742:	d0be      	beq.n	800f6c2 <floor+0x42>
 800f744:	2c00      	cmp	r4, #0
 800f746:	da02      	bge.n	800f74e <floor+0xce>
 800f748:	2e14      	cmp	r6, #20
 800f74a:	d103      	bne.n	800f754 <floor+0xd4>
 800f74c:	3401      	adds	r4, #1
 800f74e:	ea25 0508 	bic.w	r5, r5, r8
 800f752:	e7b6      	b.n	800f6c2 <floor+0x42>
 800f754:	2301      	movs	r3, #1
 800f756:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f75a:	fa03 f606 	lsl.w	r6, r3, r6
 800f75e:	4435      	add	r5, r6
 800f760:	42bd      	cmp	r5, r7
 800f762:	bf38      	it	cc
 800f764:	18e4      	addcc	r4, r4, r3
 800f766:	e7f2      	b.n	800f74e <floor+0xce>
 800f768:	2500      	movs	r5, #0
 800f76a:	462c      	mov	r4, r5
 800f76c:	e7a9      	b.n	800f6c2 <floor+0x42>
 800f76e:	bf00      	nop
 800f770:	8800759c 	.word	0x8800759c
 800f774:	7e37e43c 	.word	0x7e37e43c
 800f778:	bff00000 	.word	0xbff00000
 800f77c:	000fffff 	.word	0x000fffff

0800f780 <_init>:
 800f780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f782:	bf00      	nop
 800f784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f786:	bc08      	pop	{r3}
 800f788:	469e      	mov	lr, r3
 800f78a:	4770      	bx	lr

0800f78c <_fini>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	bf00      	nop
 800f790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f792:	bc08      	pop	{r3}
 800f794:	469e      	mov	lr, r3
 800f796:	4770      	bx	lr
