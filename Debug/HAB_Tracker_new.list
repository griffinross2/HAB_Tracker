
HAB_Tracker_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a78  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000131c  08019bb8  08019bb8  00029bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aed4  0801aed4  0003082c  2**0
                  CONTENTS
  4 .ARM          00000008  0801aed4  0801aed4  0002aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aedc  0801aedc  0003082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aedc  0801aedc  0002aedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aee0  0801aee0  0002aee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000082c  20000000  0801aee4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000669c  20000830  0801b710  00030830  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006ecc  0801b710  00036ecc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000331b3  00000000  00000000  00030856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006945  00000000  00000000  00063a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b58  00000000  00000000  0006a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028f8  00000000  00000000  0006cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248e1  00000000  00000000  0006f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003975a  00000000  00000000  00094081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0aab  00000000  00000000  000cd7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cbac  00000000  00000000  0018e2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000830 	.word	0x20000830
 800015c:	00000000 	.word	0x00000000
 8000160:	08019ba0 	.word	0x08019ba0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000834 	.word	0x20000834
 800017c:	08019ba0 	.word	0x08019ba0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e66:	2afd      	cmp	r2, #253	; 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	; 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	; 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	; 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmpun>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ac:	d102      	bne.n	80011b4 <__aeabi_fcmpun+0x14>
 80011ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011b2:	d108      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x20>
 80011ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011be:	d102      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0001 	mov.w	r0, #1
 80011ca:	4770      	bx	lr

080011cc <__aeabi_f2iz>:
 80011cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011d4:	d30f      	bcc.n	80011f6 <__aeabi_f2iz+0x2a>
 80011d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011de:	d90d      	bls.n	80011fc <__aeabi_f2iz+0x30>
 80011e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011ec:	fa23 f002 	lsr.w	r0, r3, r2
 80011f0:	bf18      	it	ne
 80011f2:	4240      	negne	r0, r0
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2iz+0x3a>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d105      	bne.n	8001212 <__aeabi_f2iz+0x46>
 8001206:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800120a:	bf08      	it	eq
 800120c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr

08001218 <__aeabi_uldivmod>:
 8001218:	b953      	cbnz	r3, 8001230 <__aeabi_uldivmod+0x18>
 800121a:	b94a      	cbnz	r2, 8001230 <__aeabi_uldivmod+0x18>
 800121c:	2900      	cmp	r1, #0
 800121e:	bf08      	it	eq
 8001220:	2800      	cmpeq	r0, #0
 8001222:	bf1c      	itt	ne
 8001224:	f04f 31ff 	movne.w	r1, #4294967295
 8001228:	f04f 30ff 	movne.w	r0, #4294967295
 800122c:	f000 b974 	b.w	8001518 <__aeabi_idiv0>
 8001230:	f1ad 0c08 	sub.w	ip, sp, #8
 8001234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001238:	f000 f806 	bl	8001248 <__udivmoddi4>
 800123c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001244:	b004      	add	sp, #16
 8001246:	4770      	bx	lr

08001248 <__udivmoddi4>:
 8001248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800124c:	9e08      	ldr	r6, [sp, #32]
 800124e:	460d      	mov	r5, r1
 8001250:	4604      	mov	r4, r0
 8001252:	4688      	mov	r8, r1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d14d      	bne.n	80012f4 <__udivmoddi4+0xac>
 8001258:	428a      	cmp	r2, r1
 800125a:	4694      	mov	ip, r2
 800125c:	d968      	bls.n	8001330 <__udivmoddi4+0xe8>
 800125e:	fab2 f282 	clz	r2, r2
 8001262:	b152      	cbz	r2, 800127a <__udivmoddi4+0x32>
 8001264:	fa01 f302 	lsl.w	r3, r1, r2
 8001268:	f1c2 0120 	rsb	r1, r2, #32
 800126c:	fa20 f101 	lsr.w	r1, r0, r1
 8001270:	fa0c fc02 	lsl.w	ip, ip, r2
 8001274:	ea41 0803 	orr.w	r8, r1, r3
 8001278:	4094      	lsls	r4, r2
 800127a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800127e:	0c21      	lsrs	r1, r4, #16
 8001280:	fbb8 fef5 	udiv	lr, r8, r5
 8001284:	fa1f f78c 	uxth.w	r7, ip
 8001288:	fb05 831e 	mls	r3, r5, lr, r8
 800128c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001290:	fb0e f107 	mul.w	r1, lr, r7
 8001294:	4299      	cmp	r1, r3
 8001296:	d90b      	bls.n	80012b0 <__udivmoddi4+0x68>
 8001298:	eb1c 0303 	adds.w	r3, ip, r3
 800129c:	f10e 30ff 	add.w	r0, lr, #4294967295
 80012a0:	f080 811e 	bcs.w	80014e0 <__udivmoddi4+0x298>
 80012a4:	4299      	cmp	r1, r3
 80012a6:	f240 811b 	bls.w	80014e0 <__udivmoddi4+0x298>
 80012aa:	f1ae 0e02 	sub.w	lr, lr, #2
 80012ae:	4463      	add	r3, ip
 80012b0:	1a5b      	subs	r3, r3, r1
 80012b2:	b2a4      	uxth	r4, r4
 80012b4:	fbb3 f0f5 	udiv	r0, r3, r5
 80012b8:	fb05 3310 	mls	r3, r5, r0, r3
 80012bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012c0:	fb00 f707 	mul.w	r7, r0, r7
 80012c4:	42a7      	cmp	r7, r4
 80012c6:	d90a      	bls.n	80012de <__udivmoddi4+0x96>
 80012c8:	eb1c 0404 	adds.w	r4, ip, r4
 80012cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80012d0:	f080 8108 	bcs.w	80014e4 <__udivmoddi4+0x29c>
 80012d4:	42a7      	cmp	r7, r4
 80012d6:	f240 8105 	bls.w	80014e4 <__udivmoddi4+0x29c>
 80012da:	4464      	add	r4, ip
 80012dc:	3802      	subs	r0, #2
 80012de:	1be4      	subs	r4, r4, r7
 80012e0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012e4:	2100      	movs	r1, #0
 80012e6:	b11e      	cbz	r6, 80012f0 <__udivmoddi4+0xa8>
 80012e8:	40d4      	lsrs	r4, r2
 80012ea:	2300      	movs	r3, #0
 80012ec:	e9c6 4300 	strd	r4, r3, [r6]
 80012f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f4:	428b      	cmp	r3, r1
 80012f6:	d908      	bls.n	800130a <__udivmoddi4+0xc2>
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	f000 80ee 	beq.w	80014da <__udivmoddi4+0x292>
 80012fe:	2100      	movs	r1, #0
 8001300:	e9c6 0500 	strd	r0, r5, [r6]
 8001304:	4608      	mov	r0, r1
 8001306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130a:	fab3 f183 	clz	r1, r3
 800130e:	2900      	cmp	r1, #0
 8001310:	d14a      	bne.n	80013a8 <__udivmoddi4+0x160>
 8001312:	42ab      	cmp	r3, r5
 8001314:	d302      	bcc.n	800131c <__udivmoddi4+0xd4>
 8001316:	4282      	cmp	r2, r0
 8001318:	f200 80f9 	bhi.w	800150e <__udivmoddi4+0x2c6>
 800131c:	1a84      	subs	r4, r0, r2
 800131e:	eb65 0303 	sbc.w	r3, r5, r3
 8001322:	2001      	movs	r0, #1
 8001324:	4698      	mov	r8, r3
 8001326:	2e00      	cmp	r6, #0
 8001328:	d0e2      	beq.n	80012f0 <__udivmoddi4+0xa8>
 800132a:	e9c6 4800 	strd	r4, r8, [r6]
 800132e:	e7df      	b.n	80012f0 <__udivmoddi4+0xa8>
 8001330:	b902      	cbnz	r2, 8001334 <__udivmoddi4+0xec>
 8001332:	deff      	udf	#255	; 0xff
 8001334:	fab2 f282 	clz	r2, r2
 8001338:	2a00      	cmp	r2, #0
 800133a:	f040 8091 	bne.w	8001460 <__udivmoddi4+0x218>
 800133e:	eba1 050c 	sub.w	r5, r1, ip
 8001342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001346:	fa1f fe8c 	uxth.w	lr, ip
 800134a:	2101      	movs	r1, #1
 800134c:	fbb5 f3f7 	udiv	r3, r5, r7
 8001350:	fb07 5013 	mls	r0, r7, r3, r5
 8001354:	0c25      	lsrs	r5, r4, #16
 8001356:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800135a:	fb0e f003 	mul.w	r0, lr, r3
 800135e:	42a8      	cmp	r0, r5
 8001360:	d908      	bls.n	8001374 <__udivmoddi4+0x12c>
 8001362:	eb1c 0505 	adds.w	r5, ip, r5
 8001366:	f103 38ff 	add.w	r8, r3, #4294967295
 800136a:	d202      	bcs.n	8001372 <__udivmoddi4+0x12a>
 800136c:	42a8      	cmp	r0, r5
 800136e:	f200 80cb 	bhi.w	8001508 <__udivmoddi4+0x2c0>
 8001372:	4643      	mov	r3, r8
 8001374:	1a2d      	subs	r5, r5, r0
 8001376:	b2a4      	uxth	r4, r4
 8001378:	fbb5 f0f7 	udiv	r0, r5, r7
 800137c:	fb07 5510 	mls	r5, r7, r0, r5
 8001380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001384:	fb0e fe00 	mul.w	lr, lr, r0
 8001388:	45a6      	cmp	lr, r4
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x156>
 800138c:	eb1c 0404 	adds.w	r4, ip, r4
 8001390:	f100 35ff 	add.w	r5, r0, #4294967295
 8001394:	d202      	bcs.n	800139c <__udivmoddi4+0x154>
 8001396:	45a6      	cmp	lr, r4
 8001398:	f200 80bb 	bhi.w	8001512 <__udivmoddi4+0x2ca>
 800139c:	4628      	mov	r0, r5
 800139e:	eba4 040e 	sub.w	r4, r4, lr
 80013a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013a6:	e79e      	b.n	80012e6 <__udivmoddi4+0x9e>
 80013a8:	f1c1 0720 	rsb	r7, r1, #32
 80013ac:	408b      	lsls	r3, r1
 80013ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80013b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80013b6:	fa20 f407 	lsr.w	r4, r0, r7
 80013ba:	fa05 f301 	lsl.w	r3, r5, r1
 80013be:	431c      	orrs	r4, r3
 80013c0:	40fd      	lsrs	r5, r7
 80013c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013c6:	fa00 f301 	lsl.w	r3, r0, r1
 80013ca:	fbb5 f8f9 	udiv	r8, r5, r9
 80013ce:	0c20      	lsrs	r0, r4, #16
 80013d0:	fa1f fe8c 	uxth.w	lr, ip
 80013d4:	fb09 5518 	mls	r5, r9, r8, r5
 80013d8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80013dc:	fb08 f00e 	mul.w	r0, r8, lr
 80013e0:	42a8      	cmp	r0, r5
 80013e2:	fa02 f201 	lsl.w	r2, r2, r1
 80013e6:	d90b      	bls.n	8001400 <__udivmoddi4+0x1b8>
 80013e8:	eb1c 0505 	adds.w	r5, ip, r5
 80013ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80013f0:	f080 8088 	bcs.w	8001504 <__udivmoddi4+0x2bc>
 80013f4:	42a8      	cmp	r0, r5
 80013f6:	f240 8085 	bls.w	8001504 <__udivmoddi4+0x2bc>
 80013fa:	f1a8 0802 	sub.w	r8, r8, #2
 80013fe:	4465      	add	r5, ip
 8001400:	1a2d      	subs	r5, r5, r0
 8001402:	b2a4      	uxth	r4, r4
 8001404:	fbb5 f0f9 	udiv	r0, r5, r9
 8001408:	fb09 5510 	mls	r5, r9, r0, r5
 800140c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001410:	fb00 fe0e 	mul.w	lr, r0, lr
 8001414:	45ae      	cmp	lr, r5
 8001416:	d908      	bls.n	800142a <__udivmoddi4+0x1e2>
 8001418:	eb1c 0505 	adds.w	r5, ip, r5
 800141c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001420:	d26c      	bcs.n	80014fc <__udivmoddi4+0x2b4>
 8001422:	45ae      	cmp	lr, r5
 8001424:	d96a      	bls.n	80014fc <__udivmoddi4+0x2b4>
 8001426:	3802      	subs	r0, #2
 8001428:	4465      	add	r5, ip
 800142a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800142e:	fba0 9402 	umull	r9, r4, r0, r2
 8001432:	eba5 050e 	sub.w	r5, r5, lr
 8001436:	42a5      	cmp	r5, r4
 8001438:	46c8      	mov	r8, r9
 800143a:	46a6      	mov	lr, r4
 800143c:	d356      	bcc.n	80014ec <__udivmoddi4+0x2a4>
 800143e:	d053      	beq.n	80014e8 <__udivmoddi4+0x2a0>
 8001440:	b15e      	cbz	r6, 800145a <__udivmoddi4+0x212>
 8001442:	ebb3 0208 	subs.w	r2, r3, r8
 8001446:	eb65 050e 	sbc.w	r5, r5, lr
 800144a:	fa05 f707 	lsl.w	r7, r5, r7
 800144e:	fa22 f301 	lsr.w	r3, r2, r1
 8001452:	40cd      	lsrs	r5, r1
 8001454:	431f      	orrs	r7, r3
 8001456:	e9c6 7500 	strd	r7, r5, [r6]
 800145a:	2100      	movs	r1, #0
 800145c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001460:	f1c2 0320 	rsb	r3, r2, #32
 8001464:	fa20 f103 	lsr.w	r1, r0, r3
 8001468:	fa0c fc02 	lsl.w	ip, ip, r2
 800146c:	fa25 f303 	lsr.w	r3, r5, r3
 8001470:	4095      	lsls	r5, r2
 8001472:	430d      	orrs	r5, r1
 8001474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001478:	fa1f fe8c 	uxth.w	lr, ip
 800147c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001480:	fb07 3011 	mls	r0, r7, r1, r3
 8001484:	0c2b      	lsrs	r3, r5, #16
 8001486:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800148a:	fb01 f00e 	mul.w	r0, r1, lr
 800148e:	4298      	cmp	r0, r3
 8001490:	fa04 f402 	lsl.w	r4, r4, r2
 8001494:	d908      	bls.n	80014a8 <__udivmoddi4+0x260>
 8001496:	eb1c 0303 	adds.w	r3, ip, r3
 800149a:	f101 38ff 	add.w	r8, r1, #4294967295
 800149e:	d22f      	bcs.n	8001500 <__udivmoddi4+0x2b8>
 80014a0:	4298      	cmp	r0, r3
 80014a2:	d92d      	bls.n	8001500 <__udivmoddi4+0x2b8>
 80014a4:	3902      	subs	r1, #2
 80014a6:	4463      	add	r3, ip
 80014a8:	1a1b      	subs	r3, r3, r0
 80014aa:	b2ad      	uxth	r5, r5
 80014ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80014b0:	fb07 3310 	mls	r3, r7, r0, r3
 80014b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80014b8:	fb00 f30e 	mul.w	r3, r0, lr
 80014bc:	42ab      	cmp	r3, r5
 80014be:	d908      	bls.n	80014d2 <__udivmoddi4+0x28a>
 80014c0:	eb1c 0505 	adds.w	r5, ip, r5
 80014c4:	f100 38ff 	add.w	r8, r0, #4294967295
 80014c8:	d216      	bcs.n	80014f8 <__udivmoddi4+0x2b0>
 80014ca:	42ab      	cmp	r3, r5
 80014cc:	d914      	bls.n	80014f8 <__udivmoddi4+0x2b0>
 80014ce:	3802      	subs	r0, #2
 80014d0:	4465      	add	r5, ip
 80014d2:	1aed      	subs	r5, r5, r3
 80014d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80014d8:	e738      	b.n	800134c <__udivmoddi4+0x104>
 80014da:	4631      	mov	r1, r6
 80014dc:	4630      	mov	r0, r6
 80014de:	e707      	b.n	80012f0 <__udivmoddi4+0xa8>
 80014e0:	4686      	mov	lr, r0
 80014e2:	e6e5      	b.n	80012b0 <__udivmoddi4+0x68>
 80014e4:	4618      	mov	r0, r3
 80014e6:	e6fa      	b.n	80012de <__udivmoddi4+0x96>
 80014e8:	454b      	cmp	r3, r9
 80014ea:	d2a9      	bcs.n	8001440 <__udivmoddi4+0x1f8>
 80014ec:	ebb9 0802 	subs.w	r8, r9, r2
 80014f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80014f4:	3801      	subs	r0, #1
 80014f6:	e7a3      	b.n	8001440 <__udivmoddi4+0x1f8>
 80014f8:	4640      	mov	r0, r8
 80014fa:	e7ea      	b.n	80014d2 <__udivmoddi4+0x28a>
 80014fc:	4620      	mov	r0, r4
 80014fe:	e794      	b.n	800142a <__udivmoddi4+0x1e2>
 8001500:	4641      	mov	r1, r8
 8001502:	e7d1      	b.n	80014a8 <__udivmoddi4+0x260>
 8001504:	46d0      	mov	r8, sl
 8001506:	e77b      	b.n	8001400 <__udivmoddi4+0x1b8>
 8001508:	3b02      	subs	r3, #2
 800150a:	4465      	add	r5, ip
 800150c:	e732      	b.n	8001374 <__udivmoddi4+0x12c>
 800150e:	4608      	mov	r0, r1
 8001510:	e709      	b.n	8001326 <__udivmoddi4+0xde>
 8001512:	4464      	add	r4, ip
 8001514:	3802      	subs	r0, #2
 8001516:	e742      	b.n	800139e <__udivmoddi4+0x156>

08001518 <__aeabi_idiv0>:
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <gpio_write>:
    };
    HAL_GPIO_Init(base, &conf);
    return STATUS_OK;
}

Status gpio_write(uint8_t pin, GpioValue value) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_pin = GPIO_PIN_TO_NUM[pin];
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <gpio_write+0x64>)
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_TypeDef *base = GPIO_PIN_TO_BASE[pin];
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <gpio_write+0x68>)
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitTypeDef conf = {
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pin = gpio_pin,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(base, &conf);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	6a38      	ldr	r0, [r7, #32]
 8001564:	f00f fbd6 	bl	8010d14 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(base, gpio_pin, value);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	b29b      	uxth	r3, r3
 800156c:	79ba      	ldrb	r2, [r7, #6]
 800156e:	4619      	mov	r1, r3
 8001570:	6a38      	ldr	r0, [r7, #32]
 8001572:	f00f fdfd 	bl	8011170 <HAL_GPIO_WritePin>
    return STATUS_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000c0 	.word	0x200000c0
 8001584:	20000000 	.word	0x20000000

08001588 <hab_init>:
void tx_sensor_lora(SensorData* data);
void tx_gps_lora(GPS_Fix_TypeDef* fix, float lat, float lon);
void init_sensor_timer();

void hab_init()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	DELAY(2000);
 800158c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	f000 fce3 	bl	8001f5e <DELAY>

	SubghzApp_Init();
 8001598:	f00e fb36 	bl	800fc08 <SubghzApp_Init>
	aprs_packet.info = malloc(APRS_MAX_INFO + 1);
 800159c:	f240 1001 	movw	r0, #257	; 0x101
 80015a0:	f015 fb56 	bl	8016c50 <malloc>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <hab_init+0x150>)
 80015aa:	60da      	str	r2, [r3, #12]
	APRS_init();
 80015ac:	f008 fb0a 	bl	8009bc4 <APRS_init>
	BitFIFO_init(&aprs_fifo, malloc(APRS_FIFO_BYTES), APRS_FIFO_BYTES);
 80015b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015b4:	f015 fb4c 	bl	8016c50 <malloc>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	4619      	mov	r1, r3
 80015c0:	4846      	ldr	r0, [pc, #280]	; (80016dc <hab_init+0x154>)
 80015c2:	f008 fd6b 	bl	800a09c <BitFIFO_init>

	// Initialize temperature probe
	if (ds18b20_init(&s_temp_conf) == STATUS_OK) {
 80015c6:	4846      	ldr	r0, [pc, #280]	; (80016e0 <hab_init+0x158>)
 80015c8:	f009 fd20 	bl	800b00c <ds18b20_init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <hab_init+0x52>
		printf("Temperature probe initialization successful\n");
 80015d2:	4844      	ldr	r0, [pc, #272]	; (80016e4 <hab_init+0x15c>)
 80015d4:	f016 f92a 	bl	801782c <puts>
 80015d8:	e002      	b.n	80015e0 <hab_init+0x58>
	} else {
		printf("Temperature probe initialization failed\n");
 80015da:	4843      	ldr	r0, [pc, #268]	; (80016e8 <hab_init+0x160>)
 80015dc:	f016 f926 	bl	801782c <puts>
	}

	// Initialize magnetometer
	if (iis2mdc_init(&s_mag_conf, IIS2MDC_ODR_50_HZ) == STATUS_OK) {
 80015e0:	2102      	movs	r1, #2
 80015e2:	4842      	ldr	r0, [pc, #264]	; (80016ec <hab_init+0x164>)
 80015e4:	f009 ffea 	bl	800b5bc <iis2mdc_init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <hab_init+0x6e>
		printf("Magnetometer initialization successful\n");
 80015ee:	4840      	ldr	r0, [pc, #256]	; (80016f0 <hab_init+0x168>)
 80015f0:	f016 f91c 	bl	801782c <puts>
 80015f4:	e002      	b.n	80015fc <hab_init+0x74>
	} else {
		printf("Magnetometer initialization failed\n");
 80015f6:	483f      	ldr	r0, [pc, #252]	; (80016f4 <hab_init+0x16c>)
 80015f8:	f016 f918 	bl	801782c <puts>
	}

	// Initialize barometer
	if (ms5637_init(&s_baro_conf) == STATUS_OK) {
 80015fc:	483e      	ldr	r0, [pc, #248]	; (80016f8 <hab_init+0x170>)
 80015fe:	f00a fb8b 	bl	800bd18 <ms5637_init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <hab_init+0x88>
		printf("Barometer initialization successful\n");
 8001608:	483c      	ldr	r0, [pc, #240]	; (80016fc <hab_init+0x174>)
 800160a:	f016 f90f 	bl	801782c <puts>
 800160e:	e002      	b.n	8001616 <hab_init+0x8e>
	} else {
		printf("Barometer initialization failed\n");
 8001610:	483b      	ldr	r0, [pc, #236]	; (8001700 <hab_init+0x178>)
 8001612:	f016 f90b 	bl	801782c <puts>
	}

	// Initialize IMU
	if (lsm6dsox_init(&s_imu_conf) == STATUS_OK) {
 8001616:	483b      	ldr	r0, [pc, #236]	; (8001704 <hab_init+0x17c>)
 8001618:	f00a f8b6 	bl	800b788 <lsm6dsox_init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <hab_init+0xa2>
		printf("IMU initialization successful\n");
 8001622:	4839      	ldr	r0, [pc, #228]	; (8001708 <hab_init+0x180>)
 8001624:	f016 f902 	bl	801782c <puts>
 8001628:	e002      	b.n	8001630 <hab_init+0xa8>
	} else {
		printf("IMU initialization failed\n");
 800162a:	4838      	ldr	r0, [pc, #224]	; (800170c <hab_init+0x184>)
 800162c:	f016 f8fe 	bl	801782c <puts>
	}

	if (lsm6dsox_config_accel(&s_imu_conf, LSM6DSOX_XL_RATE_208_HZ,
 8001630:	2208      	movs	r2, #8
 8001632:	2150      	movs	r1, #80	; 0x50
 8001634:	4833      	ldr	r0, [pc, #204]	; (8001704 <hab_init+0x17c>)
 8001636:	f00a fabd 	bl	800bbb4 <lsm6dsox_config_accel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <hab_init+0xc0>
							  LSM6DSOX_XL_RANGE_4_G) == STATUS_OK) {
		printf("IMU accel range set successfully\n");
 8001640:	4833      	ldr	r0, [pc, #204]	; (8001710 <hab_init+0x188>)
 8001642:	f016 f8f3 	bl	801782c <puts>
 8001646:	e002      	b.n	800164e <hab_init+0xc6>
	} else {
		printf("IMU accel configuration failed\n");
 8001648:	4832      	ldr	r0, [pc, #200]	; (8001714 <hab_init+0x18c>)
 800164a:	f016 f8ef 	bl	801782c <puts>
	}

	if (lsm6dsox_config_gyro(&s_imu_conf, LSM6DSOX_G_RATE_208_HZ,
 800164e:	2204      	movs	r2, #4
 8001650:	2150      	movs	r1, #80	; 0x50
 8001652:	482c      	ldr	r0, [pc, #176]	; (8001704 <hab_init+0x17c>)
 8001654:	f00a fafe 	bl	800bc54 <lsm6dsox_config_gyro>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <hab_init+0xde>
							 LSM6DSOX_G_RANGE_500_DPS) == STATUS_OK) {
		printf("IMU gyro range set successfully\n");
 800165e:	482e      	ldr	r0, [pc, #184]	; (8001718 <hab_init+0x190>)
 8001660:	f016 f8e4 	bl	801782c <puts>
 8001664:	e002      	b.n	800166c <hab_init+0xe4>
	} else {
		printf("IMU gyro configuration failed\n");
 8001666:	482d      	ldr	r0, [pc, #180]	; (800171c <hab_init+0x194>)
 8001668:	f016 f8e0 	bl	801782c <puts>
	}

	// Initialize GPS
	if (max_m10s_init(&s_gps_conf) == STATUS_OK) {
 800166c:	482c      	ldr	r0, [pc, #176]	; (8001720 <hab_init+0x198>)
 800166e:	f008 fd89 	bl	800a184 <max_m10s_init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <hab_init+0xf8>
		printf("GPS initialization successful\n");
 8001678:	482a      	ldr	r0, [pc, #168]	; (8001724 <hab_init+0x19c>)
 800167a:	f016 f8d7 	bl	801782c <puts>
 800167e:	e002      	b.n	8001686 <hab_init+0xfe>
	} else {
		printf("GPS initialization failed\n");
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <hab_init+0x1a0>)
 8001682:	f016 f8d3 	bl	801782c <puts>
	}

	// Initialize SD card
	if (sd_init(&s_sd_conf) == STATUS_OK) {
 8001686:	4829      	ldr	r0, [pc, #164]	; (800172c <hab_init+0x1a4>)
 8001688:	f007 fade 	bl	8008c48 <sd_init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <hab_init+0x112>
		printf("SD card initialization successful\n");
 8001692:	4827      	ldr	r0, [pc, #156]	; (8001730 <hab_init+0x1a8>)
 8001694:	f016 f8ca 	bl	801782c <puts>
 8001698:	e002      	b.n	80016a0 <hab_init+0x118>
	} else {
		printf("SD card initialization failed\n");
 800169a:	4826      	ldr	r0, [pc, #152]	; (8001734 <hab_init+0x1ac>)
 800169c:	f016 f8c6 	bl	801782c <puts>
	}

	// Enable heater
	gpio_write(PIN_PB8, GPIO_HIGH);
 80016a0:	2101      	movs	r1, #1
 80016a2:	2018      	movs	r0, #24
 80016a4:	f7ff ff3a 	bl	800151c <gpio_write>

	init_sensor_timer();
 80016a8:	f000 fb56 	bl	8001d58 <init_sensor_timer>

	gpio_write(PIN_PB4, GPIO_HIGH);
 80016ac:	2101      	movs	r1, #1
 80016ae:	2014      	movs	r0, #20
 80016b0:	f7ff ff34 	bl	800151c <gpio_write>
	DELAY(500);
 80016b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	f000 fc4f 	bl	8001f5e <DELAY>
	gpio_write(PIN_PB4, GPIO_LOW);
 80016c0:	2100      	movs	r1, #0
 80016c2:	2014      	movs	r0, #20
 80016c4:	f7ff ff2a 	bl	800151c <gpio_write>
	DELAY(500);
 80016c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	f000 fc45 	bl	8001f5e <DELAY>

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000180 	.word	0x20000180
 80016dc:	2000084c 	.word	0x2000084c
 80016e0:	200001c8 	.word	0x200001c8
 80016e4:	08019bdc 	.word	0x08019bdc
 80016e8:	08019c08 	.word	0x08019c08
 80016ec:	20000190 	.word	0x20000190
 80016f0:	08019c30 	.word	0x08019c30
 80016f4:	08019c58 	.word	0x08019c58
 80016f8:	2000019c 	.word	0x2000019c
 80016fc:	08019c7c 	.word	0x08019c7c
 8001700:	08019ca0 	.word	0x08019ca0
 8001704:	200001b4 	.word	0x200001b4
 8001708:	08019cc0 	.word	0x08019cc0
 800170c:	08019ce0 	.word	0x08019ce0
 8001710:	08019cfc 	.word	0x08019cfc
 8001714:	08019d20 	.word	0x08019d20
 8001718:	08019d40 	.word	0x08019d40
 800171c:	08019d60 	.word	0x08019d60
 8001720:	200001a8 	.word	0x200001a8
 8001724:	08019d80 	.word	0x08019d80
 8001728:	08019da0 	.word	0x08019da0
 800172c:	200001c0 	.word	0x200001c0
 8001730:	08019dbc 	.word	0x08019dbc
 8001734:	08019de0 	.word	0x08019de0

08001738 <hab_loop>:

void hab_loop()
{
 8001738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800173c:	b088      	sub	sp, #32
 800173e:	af06      	add	r7, sp, #24
	if(MILLIS() - timer > 60000)
 8001740:	f000 fbfe 	bl	8001f40 <MILLIS>
 8001744:	4b62      	ldr	r3, [pc, #392]	; (80018d0 <hab_loop+0x198>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	1a84      	subs	r4, r0, r2
 800174c:	eb61 0503 	sbc.w	r5, r1, r3
 8001750:	f64e 2361 	movw	r3, #60001	; 0xea61
 8001754:	429c      	cmp	r4, r3
 8001756:	f175 0300 	sbcs.w	r3, r5, #0
 800175a:	f0c0 8081 	bcc.w	8001860 <hab_loop+0x128>
	{
		timer = MILLIS();
 800175e:	f000 fbef 	bl	8001f40 <MILLIS>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	495a      	ldr	r1, [pc, #360]	; (80018d0 <hab_loop+0x198>)
 8001768:	e9c1 2300 	strd	r2, r3, [r1]

		// Send APRS Packet
		sprintf(comment, "%03.0f:%03.0f:%05.1f",
				last_sensor_data.baro.temperature, last_sensor_data.temp.temperature, last_sensor_data.baro.pressure);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <hab_loop+0x19c>)
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(comment, "%03.0f:%03.0f:%05.1f",
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fec1 	bl	80004f8 <__aeabi_f2d>
 8001776:	4680      	mov	r8, r0
 8001778:	4689      	mov	r9, r1
				last_sensor_data.baro.temperature, last_sensor_data.temp.temperature, last_sensor_data.baro.pressure);
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <hab_loop+0x19c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(comment, "%03.0f:%03.0f:%05.1f",
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe feba 	bl	80004f8 <__aeabi_f2d>
 8001784:	4604      	mov	r4, r0
 8001786:	460d      	mov	r5, r1
				last_sensor_data.baro.temperature, last_sensor_data.temp.temperature, last_sensor_data.baro.pressure);
 8001788:	4b52      	ldr	r3, [pc, #328]	; (80018d4 <hab_loop+0x19c>)
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(comment, "%03.0f:%03.0f:%05.1f",
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe feb3 	bl	80004f8 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800179a:	e9cd 4500 	strd	r4, r5, [sp]
 800179e:	4642      	mov	r2, r8
 80017a0:	464b      	mov	r3, r9
 80017a2:	494d      	ldr	r1, [pc, #308]	; (80018d8 <hab_loop+0x1a0>)
 80017a4:	484d      	ldr	r0, [pc, #308]	; (80018dc <hab_loop+0x1a4>)
 80017a6:	f016 f88d 	bl	80178c4 <siprintf>
		fill_packet(&aprs_packet, fix.hour, fix.min, fix.sec,
 80017aa:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <hab_loop+0x1a8>)
 80017ac:	791b      	ldrb	r3, [r3, #4]
 80017ae:	4698      	mov	r8, r3
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <hab_loop+0x1a8>)
 80017b2:	795b      	ldrb	r3, [r3, #5]
 80017b4:	4699      	mov	r9, r3
 80017b6:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <hab_loop+0x1a8>)
 80017b8:	799b      	ldrb	r3, [r3, #6]
 80017ba:	469a      	mov	sl, r3
 80017bc:	4b49      	ldr	r3, [pc, #292]	; (80018e4 <hab_loop+0x1ac>)
 80017be:	681c      	ldr	r4, [r3, #0]
 80017c0:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <hab_loop+0x1b0>)
 80017c2:	681d      	ldr	r5, [r3, #0]
					last_lat, last_lon,
					(int) fix.hdg, (int) (fix.ground_speed * 1.944), (int) (fix.height_msl * 3.281),
 80017c4:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <hab_loop+0x1a8>)
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		fill_packet(&aprs_packet, fix.hour, fix.min, fix.sec,
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fcff 	bl	80011cc <__aeabi_f2iz>
 80017ce:	4606      	mov	r6, r0
					(int) fix.hdg, (int) (fix.ground_speed * 1.944), (int) (fix.height_msl * 3.281),
 80017d0:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <hab_loop+0x1a8>)
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe8f 	bl	80004f8 <__aeabi_f2d>
 80017da:	a339      	add	r3, pc, #228	; (adr r3, 80018c0 <hab_loop+0x188>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe fee2 	bl	80005a8 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
		fill_packet(&aprs_packet, fix.hour, fix.min, fix.sec,
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f98c 	bl	8000b08 <__aeabi_d2iz>
 80017f0:	6078      	str	r0, [r7, #4]
					(int) fix.hdg, (int) (fix.ground_speed * 1.944), (int) (fix.height_msl * 3.281),
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <hab_loop+0x1a8>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe7e 	bl	80004f8 <__aeabi_f2d>
 80017fc:	a332      	add	r3, pc, #200	; (adr r3, 80018c8 <hab_loop+0x190>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe fed1 	bl	80005a8 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
		fill_packet(&aprs_packet, fix.hour, fix.min, fix.sec,
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f97b 	bl	8000b08 <__aeabi_d2iz>
 8001812:	4603      	mov	r3, r0
 8001814:	4a31      	ldr	r2, [pc, #196]	; (80018dc <hab_loop+0x1a4>)
 8001816:	9205      	str	r2, [sp, #20]
 8001818:	9304      	str	r3, [sp, #16]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	9303      	str	r3, [sp, #12]
 800181e:	9602      	str	r6, [sp, #8]
 8001820:	9501      	str	r5, [sp, #4]
 8001822:	9400      	str	r4, [sp, #0]
 8001824:	4653      	mov	r3, sl
 8001826:	464a      	mov	r2, r9
 8001828:	4641      	mov	r1, r8
 800182a:	4830      	ldr	r0, [pc, #192]	; (80018ec <hab_loop+0x1b4>)
 800182c:	f000 f864 	bl	80018f8 <fill_packet>
					comment);
		//fill_packet(&aprs_packet, 12, 0, 0,
		//		35.225, -80.841667,
		//		0, 0, 200,
		//		comment);
		BitFIFO_reinit(&aprs_fifo);
 8001830:	482f      	ldr	r0, [pc, #188]	; (80018f0 <hab_loop+0x1b8>)
 8001832:	f008 fc4b 	bl	800a0cc <BitFIFO_reinit>
		APRS_encode(&aprs_fifo, &aprs_packet);
 8001836:	492d      	ldr	r1, [pc, #180]	; (80018ec <hab_loop+0x1b4>)
 8001838:	482d      	ldr	r0, [pc, #180]	; (80018f0 <hab_loop+0x1b8>)
 800183a:	f008 f9c9 	bl	8009bd0 <APRS_encode>
		APRS_send(&aprs_fifo);
 800183e:	482c      	ldr	r0, [pc, #176]	; (80018f0 <hab_loop+0x1b8>)
 8001840:	f008 faa3 	bl	8009d8a <APRS_send>

		DELAY(5000);
 8001844:	f241 3088 	movw	r0, #5000	; 0x1388
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	f000 fb87 	bl	8001f5e <DELAY>

		tx_gps_lora(&fix, last_lon, last_lon);
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <hab_loop+0x1b0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <hab_loop+0x1b0>)
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	4821      	ldr	r0, [pc, #132]	; (80018e0 <hab_loop+0x1a8>)
 800185c:	f000 f8f4 	bl	8001a48 <tx_gps_lora>
	}
	if (max_m10s_poll_fix(&s_gps_conf, &fix) == STATUS_OK) {
 8001860:	491f      	ldr	r1, [pc, #124]	; (80018e0 <hab_loop+0x1a8>)
 8001862:	4824      	ldr	r0, [pc, #144]	; (80018f4 <hab_loop+0x1bc>)
 8001864:	f008 ffb4 	bl	800a7d0 <max_m10s_poll_fix>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11d      	bne.n	80018aa <hab_loop+0x172>
		if(!isnan(fix.lat) && !isnan(fix.lon) && fix.fix_valid)
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <hab_loop+0x1a8>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4619      	mov	r1, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fc93 	bl	80011a0 <__aeabi_fcmpun>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d114      	bne.n	80018aa <hab_loop+0x172>
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <hab_loop+0x1a8>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	4619      	mov	r1, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fc8a 	bl	80011a0 <__aeabi_fcmpun>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10b      	bne.n	80018aa <hab_loop+0x172>
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <hab_loop+0x1a8>)
 8001894:	7adb      	ldrb	r3, [r3, #11]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <hab_loop+0x172>
		{
			last_lat = fix.lat;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <hab_loop+0x1a8>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <hab_loop+0x1ac>)
 80018a0:	6013      	str	r3, [r2, #0]
			last_lon = fix.lon;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <hab_loop+0x1a8>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <hab_loop+0x1b0>)
 80018a8:	6013      	str	r3, [r2, #0]
		}
	}
	DELAY(1000);
 80018aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	f000 fb54 	bl	8001f5e <DELAY>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c0:	be76c8b4 	.word	0xbe76c8b4
 80018c4:	3fff1a9f 	.word	0x3fff1a9f
 80018c8:	ed916873 	.word	0xed916873
 80018cc:	400a3f7c 	.word	0x400a3f7c
 80018d0:	200008e0 	.word	0x200008e0
 80018d4:	200050f8 	.word	0x200050f8
 80018d8:	08019e00 	.word	0x08019e00
 80018dc:	2000085c 	.word	0x2000085c
 80018e0:	20005140 	.word	0x20005140
 80018e4:	200001d0 	.word	0x200001d0
 80018e8:	200001d4 	.word	0x200001d4
 80018ec:	20000180 	.word	0x20000180
 80018f0:	2000084c 	.word	0x2000084c
 80018f4:	200001a8 	.word	0x200001a8

080018f8 <fill_packet>:

void fill_packet(APRSPacket* packet, int hour, int min, int sec, float lat, float lon, int hdg, int spd_kt, int alt_ft, char* cmt)
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	b09d      	sub	sp, #116	; 0x74
 80018fc:	af10      	add	r7, sp, #64	; 0x40
 80018fe:	61f8      	str	r0, [r7, #28]
 8001900:	61b9      	str	r1, [r7, #24]
 8001902:	617a      	str	r2, [r7, #20]
 8001904:	613b      	str	r3, [r7, #16]
	if(isnan(lat) || isnan(lon))
 8001906:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001908:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800190a:	f7ff fc49 	bl	80011a0 <__aeabi_fcmpun>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <fill_packet+0x2a>
 8001914:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001916:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001918:	f7ff fc42 	bl	80011a0 <__aeabi_fcmpun>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <fill_packet+0x36>
	{
		lat = 0.0F;
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
		lon = 0.0F;
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	float lat_min = fabs(lat - (int) lat) * 60;
 800192e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001930:	f7ff fc4c 	bl	80011cc <__aeabi_f2iz>
 8001934:	4603      	mov	r3, r0
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fa18 	bl	8000d6c <__aeabi_i2f>
 800193c:	4603      	mov	r3, r0
 800193e:	4619      	mov	r1, r3
 8001940:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001942:	f7ff f95d 	bl	8000c00 <__aeabi_fsub>
 8001946:	4603      	mov	r3, r0
 8001948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800194c:	493c      	ldr	r1, [pc, #240]	; (8001a40 <fill_packet+0x148>)
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fa60 	bl	8000e14 <__aeabi_fmul>
 8001954:	4603      	mov	r3, r0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lon_min = fabs(lon - (int) lon) * 60;
 8001958:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800195a:	f7ff fc37 	bl	80011cc <__aeabi_f2iz>
 800195e:	4603      	mov	r3, r0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa03 	bl	8000d6c <__aeabi_i2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800196c:	f7ff f948 	bl	8000c00 <__aeabi_fsub>
 8001970:	4603      	mov	r3, r0
 8001972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001976:	4932      	ldr	r1, [pc, #200]	; (8001a40 <fill_packet+0x148>)
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fa4b 	bl	8000e14 <__aeabi_fmul>
 800197e:	4603      	mov	r3, r0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
	char lat_dir = lat > 0 ? 'N' : 'S';
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001988:	f7ff fc00 	bl	800118c <__aeabi_fcmpgt>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <fill_packet+0x9e>
 8001992:	234e      	movs	r3, #78	; 0x4e
 8001994:	e000      	b.n	8001998 <fill_packet+0xa0>
 8001996:	2353      	movs	r3, #83	; 0x53
 8001998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char lon_dir = lon > 0 ? 'E' : 'W';
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019a2:	f7ff fbf3 	bl	800118c <__aeabi_fcmpgt>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <fill_packet+0xb8>
 80019ac:	2345      	movs	r3, #69	; 0x45
 80019ae:	e000      	b.n	80019b2 <fill_packet+0xba>
 80019b0:	2357      	movs	r3, #87	; 0x57
 80019b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	snprintf(packet->info, APRS_MAX_INFO, "@%02d%02d%02dh%02d%05.2f%c/%03d%05.2f%cO%03d/%03d/A=%06d%s\n",
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80019be:	f7ff fc05 	bl	80011cc <__aeabi_f2iz>
 80019c2:	4603      	mov	r3, r0
 80019c4:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 80019c8:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 80019cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ce:	f7fe fd93 	bl	80004f8 <__aeabi_f2d>
 80019d2:	4604      	mov	r4, r0
 80019d4:	460d      	mov	r5, r1
 80019d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019da:	60ba      	str	r2, [r7, #8]
 80019dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019de:	f7ff fbf5 	bl	80011cc <__aeabi_f2iz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80019e8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80019ec:	6079      	str	r1, [r7, #4]
 80019ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019f0:	f7fe fd82 	bl	80004f8 <__aeabi_f2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80019fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80019fe:	900e      	str	r0, [sp, #56]	; 0x38
 8001a00:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a02:	900d      	str	r0, [sp, #52]	; 0x34
 8001a04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a06:	900c      	str	r0, [sp, #48]	; 0x30
 8001a08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8001a0c:	910a      	str	r1, [sp, #40]	; 0x28
 8001a0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	9107      	str	r1, [sp, #28]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	9206      	str	r2, [sp, #24]
 8001a1a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001a1e:	9602      	str	r6, [sp, #8]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <fill_packet+0x14c>)
 8001a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f015 ff13 	bl	801785c <sniprintf>
			hour, min, sec,
			abs(lat), lat_min, lat_dir, abs(lon), lon_min, lon_dir,
			hdg, spd_kt, alt_ft, cmt);
}
 8001a36:	bf00      	nop
 8001a38:	3734      	adds	r7, #52	; 0x34
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	42700000 	.word	0x42700000
 8001a44:	08019e18 	.word	0x08019e18

08001a48 <tx_gps_lora>:

	Radio.Send((uint8_t*)sensor_msg, strlen(sensor_msg) + 1);
}

void tx_gps_lora(GPS_Fix_TypeDef* fix, float lat, float lon)
{
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8001a4e:	af18      	add	r7, sp, #96	; 0x60
 8001a50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a54:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001a58:	6018      	str	r0, [r3, #0]
 8001a5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a5e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001a62:	6019      	str	r1, [r3, #0]
 8001a64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a68:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001a6c:	601a      	str	r2, [r3, #0]
	if(lora_state == TX)
 8001a6e:	4bb3      	ldr	r3, [pc, #716]	; (8001d3c <tx_gps_lora+0x2f4>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f000 815a 	beq.w	8001d2e <tx_gps_lora+0x2e6>
	{
		return;
	}
	lora_state = TX;
 8001a7a:	4bb0      	ldr	r3, [pc, #704]	; (8001d3c <tx_gps_lora+0x2f4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]

	if (radio_in_use == 1)
 8001a80:	4baf      	ldr	r3, [pc, #700]	; (8001d40 <tx_gps_lora+0x2f8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	f000 8153 	beq.w	8001d32 <tx_gps_lora+0x2ea>
	{
		return;
	}
	radio_in_use = 2;
 8001a8c:	4bac      	ldr	r3, [pc, #688]	; (8001d40 <tx_gps_lora+0x2f8>)
 8001a8e:	2202      	movs	r2, #2
 8001a90:	701a      	strb	r2, [r3, #0]

	char gps_str[244];
	int32_t lat_int = lat * 10000000;
 8001a92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a96:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001a9a:	49aa      	ldr	r1, [pc, #680]	; (8001d44 <tx_gps_lora+0x2fc>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f7ff f9b9 	bl	8000e14 <__aeabi_fmul>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb91 	bl	80011cc <__aeabi_f2iz>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
	int32_t lon_int = lon * 10000000;
 8001ab0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ab4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001ab8:	49a2      	ldr	r1, [pc, #648]	; (8001d44 <tx_gps_lora+0x2fc>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	f7ff f9aa 	bl	8000e14 <__aeabi_fmul>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fb82 	bl	80011cc <__aeabi_f2iz>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	int32_t height_int = fix->height_msl * 10;
 8001ace:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ad2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	499b      	ldr	r1, [pc, #620]	; (8001d48 <tx_gps_lora+0x300>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f999 	bl	8000e14 <__aeabi_fmul>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fb71 	bl	80011cc <__aeabi_f2iz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	int16_t vel_north_int = fix->vel_north * 10;
 8001af0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001af4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	4992      	ldr	r1, [pc, #584]	; (8001d48 <tx_gps_lora+0x300>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f988 	bl	8000e14 <__aeabi_fmul>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb60 	bl	80011cc <__aeabi_f2iz>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252
	int16_t vel_east_int = fix->vel_east * 10;
 8001b12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b16:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	498a      	ldr	r1, [pc, #552]	; (8001d48 <tx_gps_lora+0x300>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f977 	bl	8000e14 <__aeabi_fmul>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fb4f 	bl	80011cc <__aeabi_f2iz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f8a7 3250 	strh.w	r3, [r7, #592]	; 0x250
	int16_t vel_down_int = fix->vel_down * 10;
 8001b34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b38:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	4981      	ldr	r1, [pc, #516]	; (8001d48 <tx_gps_lora+0x300>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f966 	bl	8000e14 <__aeabi_fmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fb3e 	bl	80011cc <__aeabi_f2iz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f8a7 324e 	strh.w	r3, [r7, #590]	; 0x24e
			"%c%c"						// "								"
			"%c%c"     					// "                                "
			"%c"                 		// Num Sats
			"%c",                		// Valid

			(uint8_t) (fix->year - 1980), fix->month, fix->day, fix->hour, fix->min, fix->sec,
 8001b56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b5a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3344      	adds	r3, #68	; 0x44
 8001b66:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001b68:	469c      	mov	ip, r3
			(uint8_t) (fix->year - 1980), fix->month, fix->day, fix->hour, fix->min, fix->sec,
 8001b6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b6e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	789b      	ldrb	r3, [r3, #2]
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001b76:	469e      	mov	lr, r3
			(uint8_t) (fix->year - 1980), fix->month, fix->day, fix->hour, fix->min, fix->sec,
 8001b78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b7c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	78db      	ldrb	r3, [r3, #3]
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001b84:	643b      	str	r3, [r7, #64]	; 0x40
			(uint8_t) (fix->year - 1980), fix->month, fix->day, fix->hour, fix->min, fix->sec,
 8001b86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b8a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	791b      	ldrb	r3, [r3, #4]
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
			(uint8_t) (fix->year - 1980), fix->month, fix->day, fix->hour, fix->min, fix->sec,
 8001b94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b98:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	795b      	ldrb	r3, [r3, #5]
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
			(uint8_t) (fix->year - 1980), fix->month, fix->day, fix->hour, fix->min, fix->sec,
 8001ba2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ba6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	799b      	ldrb	r3, [r3, #6]
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
			(uint8_t) lat_int, (uint8_t) (lat_int >> 8), (uint8_t) (lat_int >> 16), (uint8_t) (lat_int >> 24),
 8001bb0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001bb4:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
			(uint8_t) lat_int, (uint8_t) (lat_int >> 8), (uint8_t) (lat_int >> 16), (uint8_t) (lat_int >> 24),
 8001bb8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001bbc:	121b      	asrs	r3, r3, #8
 8001bbe:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
			(uint8_t) lat_int, (uint8_t) (lat_int >> 8), (uint8_t) (lat_int >> 16), (uint8_t) (lat_int >> 24),
 8001bc2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001bc6:	141b      	asrs	r3, r3, #16
 8001bc8:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
			(uint8_t) lat_int, (uint8_t) (lat_int >> 8), (uint8_t) (lat_int >> 16), (uint8_t) (lat_int >> 24),
 8001bcc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001bd0:	161b      	asrs	r3, r3, #24
 8001bd2:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
			(uint8_t) lon_int, (uint8_t) (lon_int >> 8), (uint8_t) (lon_int >> 16), (uint8_t) (lon_int >> 24),
 8001bd6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001bda:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bdc:	623b      	str	r3, [r7, #32]
			(uint8_t) lon_int, (uint8_t) (lon_int >> 8), (uint8_t) (lon_int >> 16), (uint8_t) (lon_int >> 24),
 8001bde:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001be2:	121b      	asrs	r3, r3, #8
 8001be4:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001be6:	61fb      	str	r3, [r7, #28]
			(uint8_t) lon_int, (uint8_t) (lon_int >> 8), (uint8_t) (lon_int >> 16), (uint8_t) (lon_int >> 24),
 8001be8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001bec:	141b      	asrs	r3, r3, #16
 8001bee:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bf0:	61bb      	str	r3, [r7, #24]
			(uint8_t) lon_int, (uint8_t) (lon_int >> 8), (uint8_t) (lon_int >> 16), (uint8_t) (lon_int >> 24),
 8001bf2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001bf6:	161b      	asrs	r3, r3, #24
 8001bf8:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001bfa:	617b      	str	r3, [r7, #20]
			(uint8_t) height_int, (uint8_t) (height_int >> 8), (uint8_t) (height_int >> 16),
 8001bfc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8001c00:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c02:	613b      	str	r3, [r7, #16]
			(uint8_t) height_int, (uint8_t) (height_int >> 8), (uint8_t) (height_int >> 16),
 8001c04:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8001c08:	121b      	asrs	r3, r3, #8
 8001c0a:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c0c:	60fb      	str	r3, [r7, #12]
			(uint8_t) height_int, (uint8_t) (height_int >> 8), (uint8_t) (height_int >> 16),
 8001c0e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8001c12:	141b      	asrs	r3, r3, #16
 8001c14:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c16:	60bb      	str	r3, [r7, #8]
			(uint8_t) vel_north_int, (uint8_t) (vel_north_int >> 8),
 8001c18:	f8b7 3252 	ldrh.w	r3, [r7, #594]	; 0x252
 8001c1c:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c1e:	607b      	str	r3, [r7, #4]
			(uint8_t) vel_north_int, (uint8_t) (vel_north_int >> 8),
 8001c20:	f9b7 3252 	ldrsh.w	r3, [r7, #594]	; 0x252
 8001c24:	121b      	asrs	r3, r3, #8
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c2a:	603b      	str	r3, [r7, #0]
			(uint8_t) vel_east_int, (uint8_t) (vel_east_int >> 8),
 8001c2c:	f8b7 3250 	ldrh.w	r3, [r7, #592]	; 0x250
 8001c30:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c32:	461e      	mov	r6, r3
			(uint8_t) vel_east_int, (uint8_t) (vel_east_int >> 8),
 8001c34:	f9b7 3250 	ldrsh.w	r3, [r7, #592]	; 0x250
 8001c38:	121b      	asrs	r3, r3, #8
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c3e:	461d      	mov	r5, r3
			(uint8_t) vel_down_int, (uint8_t) (vel_down_int >> 8),
 8001c40:	f8b7 324e 	ldrh.w	r3, [r7, #590]	; 0x24e
 8001c44:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c46:	461c      	mov	r4, r3
			(uint8_t) vel_down_int, (uint8_t) (vel_down_int >> 8),
 8001c48:	f9b7 324e 	ldrsh.w	r3, [r7, #590]	; 0x24e
 8001c4c:	121b      	asrs	r3, r3, #8
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c52:	4619      	mov	r1, r3
			fix->num_sats,
 8001c54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c58:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	7c1b      	ldrb	r3, [r3, #16]
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c60:	461a      	mov	r2, r3
			fix->fix_valid
 8001c62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c66:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	7adb      	ldrb	r3, [r3, #11]
	int gps_msg_len = sprintf(gps_str,	// All LSB first
 8001c6e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001c72:	9316      	str	r3, [sp, #88]	; 0x58
 8001c74:	9215      	str	r2, [sp, #84]	; 0x54
 8001c76:	9114      	str	r1, [sp, #80]	; 0x50
 8001c78:	9413      	str	r4, [sp, #76]	; 0x4c
 8001c7a:	9512      	str	r5, [sp, #72]	; 0x48
 8001c7c:	9611      	str	r6, [sp, #68]	; 0x44
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	9210      	str	r2, [sp, #64]	; 0x40
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	920e      	str	r2, [sp, #56]	; 0x38
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	920d      	str	r2, [sp, #52]	; 0x34
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	920c      	str	r2, [sp, #48]	; 0x30
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	920a      	str	r2, [sp, #40]	; 0x28
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8001c9e:	6a3a      	ldr	r2, [r7, #32]
 8001ca0:	9208      	str	r2, [sp, #32]
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	9207      	str	r2, [sp, #28]
 8001ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca8:	9206      	str	r2, [sp, #24]
 8001caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cac:	9205      	str	r2, [sp, #20]
 8001cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb0:	9204      	str	r2, [sp, #16]
 8001cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb4:	9203      	str	r2, [sp, #12]
 8001cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cb8:	9202      	str	r2, [sp, #8]
 8001cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cbc:	9201      	str	r2, [sp, #4]
 8001cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4673      	mov	r3, lr
 8001cc4:	4662      	mov	r2, ip
 8001cc6:	4921      	ldr	r1, [pc, #132]	; (8001d4c <tx_gps_lora+0x304>)
 8001cc8:	f015 fdfc 	bl	80178c4 <siprintf>
 8001ccc:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
	);
	char gps_msg[255];
	int gps_hdr_len = sprintf(gps_msg, "$@%.3u", gps_msg_len);
 8001cd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cd4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8001cd8:	491d      	ldr	r1, [pc, #116]	; (8001d50 <tx_gps_lora+0x308>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f015 fdf2 	bl	80178c4 <siprintf>
 8001ce0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
	memcpy(gps_msg + gps_hdr_len, gps_str, gps_msg_len);
 8001ce4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001ce8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001cec:	4413      	add	r3, r2
 8001cee:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8001cf2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f014 ffc2 	bl	8016c80 <memcpy>

	gpio_write(PIN_PB5, GPIO_LOW);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2015      	movs	r0, #21
 8001d00:	f7ff fc0c 	bl	800151c <gpio_write>
	DELAY(5);
 8001d04:	f04f 0005 	mov.w	r0, #5
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	f000 f927 	bl	8001f5e <DELAY>

	Radio.Send((uint8_t*) gps_msg, gps_hdr_len + gps_msg_len);
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <tx_gps_lora+0x30c>)
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8001d18:	b2d1      	uxtb	r1, r2
 8001d1a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440a      	add	r2, r1
 8001d22:	b2d1      	uxtb	r1, r2
 8001d24:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4798      	blx	r3
 8001d2c:	e002      	b.n	8001d34 <tx_gps_lora+0x2ec>
		return;
 8001d2e:	bf00      	nop
 8001d30:	e000      	b.n	8001d34 <tx_gps_lora+0x2ec>
		return;
 8001d32:	bf00      	nop
}
 8001d34:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3c:	20006eb4 	.word	0x20006eb4
 8001d40:	200008dc 	.word	0x200008dc
 8001d44:	4b189680 	.word	0x4b189680
 8001d48:	41200000 	.word	0x41200000
 8001d4c:	08019ea4 	.word	0x08019ea4
 8001d50:	08019ed8 	.word	0x08019ed8
 8001d54:	0801a990 	.word	0x0801a990

08001d58 <init_sensor_timer>:

void init_sensor_timer() {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Start_IT(&hlptim1, TARGET_INTERVAL * 375);
 8001d5c:	f249 217c 	movw	r1, #37500	; 0x927c
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <init_sensor_timer+0x14>)
 8001d62:	f010 f939 	bl	8011fd8 <HAL_LPTIM_Counter_Start_IT>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200052ac 	.word	0x200052ac

08001d70 <sensor_irq>:

void sensor_irq() {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b09a      	sub	sp, #104	; 0x68
 8001d74:	af00      	add	r7, sp, #0
    Accel current_accel = lsm6dsox_read_accel(&s_imu_conf);
 8001d76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d7a:	4949      	ldr	r1, [pc, #292]	; (8001ea0 <sensor_irq+0x130>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f009 fd6b 	bl	800b858 <lsm6dsox_read_accel>
    Gyro current_gyro = lsm6dsox_read_gyro(&s_imu_conf);
 8001d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d86:	4946      	ldr	r1, [pc, #280]	; (8001ea0 <sensor_irq+0x130>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f009 fe37 	bl	800b9fc <lsm6dsox_read_gyro>

    uint64_t start_time = MICROS();
 8001d8e:	f000 f8a7 	bl	8001ee0 <MICROS>
 8001d92:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	SensorData log = {
 8001d96:	463b      	mov	r3, r7
 8001d98:	2248      	movs	r2, #72	; 0x48
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f014 ff7d 	bl	8016c9c <memset>
		.timestamp = MILLIS(),
 8001da2:	f000 f8cd 	bl	8001f40 <MILLIS>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
	SensorData log = {
 8001daa:	e9c7 2300 	strd	r2, r3, [r7]
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dbc:	f107 0320 	add.w	r3, r7, #32
 8001dc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001dc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.accel = current_accel,
		.gyro = current_gyro,
		.mag = iis2mdc_read(&s_mag_conf),
 8001dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dce:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <sensor_irq+0x134>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f009 fc33 	bl	800b63c <iis2mdc_read>
		.baro = ms5637_read(&s_baro_conf, OSR_256),
 8001dd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4932      	ldr	r1, [pc, #200]	; (8001ea8 <sensor_irq+0x138>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00a f93c 	bl	800c05c <ms5637_read>
		.temp = ds18b20_read(&s_temp_conf),
 8001de4:	4831      	ldr	r0, [pc, #196]	; (8001eac <sensor_irq+0x13c>)
 8001de6:	f009 fa7b 	bl	800b2e0 <ds18b20_read>
 8001dea:	6438      	str	r0, [r7, #64]	; 0x40
	};
	last_sensor_data = log;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <sensor_irq+0x140>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	463b      	mov	r3, r7
 8001df2:	2248      	movs	r2, #72	; 0x48
 8001df4:	4619      	mov	r1, r3
 8001df6:	f014 ff43 	bl	8016c80 <memcpy>

    if (!((fifo.widx == fifo.ridx - 1) ||
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <sensor_irq+0x144>)
 8001dfc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e00:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <sensor_irq+0x144>)
 8001e06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e0a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d040      	beq.n	8001e96 <sensor_irq+0x126>
          (fifo.ridx == 0 && fifo.widx == LOG_FIFO_LEN - 1))) {
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <sensor_irq+0x144>)
 8001e16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e1a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
    if (!((fifo.widx == fifo.ridx - 1) ||
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <sensor_irq+0xc0>
          (fifo.ridx == 0 && fifo.widx == LOG_FIFO_LEN - 1))) {
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <sensor_irq+0x144>)
 8001e24:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e28:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8001e2c:	2bff      	cmp	r3, #255	; 0xff
 8001e2e:	d032      	beq.n	8001e96 <sensor_irq+0x126>
        // FIFO is not full
        s_last_sensor_read_us = MICROS() - start_time;
 8001e30:	f000 f856 	bl	8001ee0 <MICROS>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <sensor_irq+0x148>)
 8001e3e:	6013      	str	r3, [r2, #0]
        fifo.queue[fifo.widx] = log;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <sensor_irq+0x144>)
 8001e42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e46:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8001e4a:	491a      	ldr	r1, [pc, #104]	; (8001eb4 <sensor_irq+0x144>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	4618      	mov	r0, r3
 8001e58:	463b      	mov	r3, r7
 8001e5a:	2248      	movs	r2, #72	; 0x48
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f014 ff0f 	bl	8016c80 <memcpy>
        if (fifo.widx == LOG_FIFO_LEN - 1) {
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <sensor_irq+0x144>)
 8001e64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e68:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8001e6c:	2bff      	cmp	r3, #255	; 0xff
 8001e6e:	d107      	bne.n	8001e80 <sensor_irq+0x110>
            fifo.widx = 0;
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <sensor_irq+0x144>)
 8001e72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e76:	461a      	mov	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
        } else {
            fifo.widx += 1;
        }
    }
}
 8001e7e:	e00a      	b.n	8001e96 <sensor_irq+0x126>
            fifo.widx += 1;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <sensor_irq+0x144>)
 8001e82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e86:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <sensor_irq+0x144>)
 8001e8e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001e92:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8001e96:	bf00      	nop
 8001e98:	3768      	adds	r7, #104	; 0x68
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001b4 	.word	0x200001b4
 8001ea4:	20000190 	.word	0x20000190
 8001ea8:	2000019c 	.word	0x2000019c
 8001eac:	200001c8 	.word	0x200001c8
 8001eb0:	200050f8 	.word	0x200050f8
 8001eb4:	200008e8 	.word	0x200008e8
 8001eb8:	200050f0 	.word	0x200050f0

08001ebc <init_timers>:
#include "main.h"

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

void init_timers(uint32_t sensor_interval_ms) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Start(&htim2);
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <init_timers+0x1c>)
 8001ec6:	f013 f8d9 	bl	801507c <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim1);
 8001eca:	4804      	ldr	r0, [pc, #16]	; (8001edc <init_timers+0x20>)
 8001ecc:	f013 f8d6 	bl	801507c <HAL_TIM_Base_Start>
};
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200053e0 	.word	0x200053e0
 8001edc:	20005394 	.word	0x20005394

08001ee0 <MICROS>:

uint64_t MICROS() {
 8001ee0:	b4f0      	push	{r4, r5, r6, r7}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
	volatile uint64_t tim1_count = __HAL_TIM_GET_COUNTER(&htim1);
 8001ee6:	4e14      	ldr	r6, [pc, #80]	; (8001f38 <MICROS+0x58>)
 8001ee8:	6836      	ldr	r6, [r6, #0]
 8001eea:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8001eec:	f04f 0c00 	mov.w	ip, #0
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	4661      	mov	r1, ip
 8001ef4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	volatile uint64_t tim2_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001ef8:	4910      	ldr	r1, [pc, #64]	; (8001f3c <MICROS+0x5c>)
 8001efa:	6809      	ldr	r1, [r1, #0]
 8001efc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001efe:	2000      	movs	r0, #0
 8001f00:	460a      	mov	r2, r1
 8001f02:	4603      	mov	r3, r0
 8001f04:	e9c7 2300 	strd	r2, r3, [r7]
    return (tim2_count << 16) + tim1_count;
 8001f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	040b      	lsls	r3, r1, #16
 8001f16:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001f1a:	0402      	lsls	r2, r0, #16
 8001f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f20:	1814      	adds	r4, r2, r0
 8001f22:	eb43 0501 	adc.w	r5, r3, r1
 8001f26:	4622      	mov	r2, r4
 8001f28:	462b      	mov	r3, r5
}
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bcf0      	pop	{r4, r5, r6, r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20005394 	.word	0x20005394
 8001f3c:	200053e0 	.word	0x200053e0

08001f40 <MILLIS>:

uint64_t MILLIS() { 
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    return MICROS() / 1000;
 8001f44:	f7ff ffcc 	bl	8001ee0 <MICROS>
 8001f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	f7ff f962 	bl	8001218 <__aeabi_uldivmod>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
}
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <DELAY>:

void DELAY(volatile uint64_t mS) {
 8001f5e:	b5b0      	push	{r4, r5, r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	e9c7 0100 	strd	r0, r1, [r7]
	volatile uint64_t start = MILLIS();
 8001f68:	f7ff ffea 	bl	8001f40 <MILLIS>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while(MILLIS() - start < mS) {
 8001f74:	e000      	b.n	8001f78 <DELAY+0x1a>
		asm("NOP");
 8001f76:	bf00      	nop
	while(MILLIS() - start < mS) {
 8001f78:	f7ff ffe2 	bl	8001f40 <MILLIS>
 8001f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f80:	1a84      	subs	r4, r0, r2
 8001f82:	eb61 0503 	sbc.w	r5, r1, r3
 8001f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f8a:	4294      	cmp	r4, r2
 8001f8c:	eb75 0303 	sbcs.w	r3, r5, r3
 8001f90:	d3f1      	bcc.n	8001f76 <DELAY+0x18>
	}
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}

08001f9c <DELAY_MICROS>:

void DELAY_MICROS(volatile uint64_t uS) {
 8001f9c:	b5b0      	push	{r4, r5, r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	e9c7 0100 	strd	r0, r1, [r7]
	volatile uint64_t start = MICROS();
 8001fa6:	f7ff ff9b 	bl	8001ee0 <MICROS>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(MICROS() - start < uS) {
 8001fb2:	e000      	b.n	8001fb6 <DELAY_MICROS+0x1a>
    	asm("NOP");
 8001fb4:	bf00      	nop
    while(MICROS() - start < uS) {
 8001fb6:	f7ff ff93 	bl	8001ee0 <MICROS>
 8001fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fbe:	1a84      	subs	r4, r0, r2
 8001fc0:	eb61 0503 	sbc.w	r5, r1, r3
 8001fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc8:	4294      	cmp	r4, r2
 8001fca:	eb75 0303 	sbcs.w	r3, r5, r3
 8001fce:	d3f1      	bcc.n	8001fb4 <DELAY_MICROS+0x18>
    }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001fdc <getTimings>:
#include "board.h"

static uint8_t i2c_state[2] = {0, 0};
static I2C_HandleTypeDef *i2c_handles[2] = {&hi2c1, &hi2c2};

static uint32_t getTimings(I2cDevice *dev) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    switch (dev->clk) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <getTimings+0x40>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <getTimings+0x2e>
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <getTimings+0x40>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d80d      	bhi.n	8002010 <getTimings+0x34>
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <getTimings+0x44>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d003      	beq.n	8002002 <getTimings+0x26>
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <getTimings+0x48>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d002      	beq.n	8002006 <getTimings+0x2a>
 8002000:	e006      	b.n	8002010 <getTimings+0x34>
        case I2C_SPEED_STANDARD:
            return 0x00303D5B;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <getTimings+0x4c>)
 8002004:	e005      	b.n	8002012 <getTimings+0x36>
        case I2C_SPEED_FAST:
            return 0x0010061A;
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <getTimings+0x50>)
 8002008:	e003      	b.n	8002012 <getTimings+0x36>
        case I2C_SPEED_FAST_PLUS:
            return 0x00000107;
 800200a:	f240 1307 	movw	r3, #263	; 0x107
 800200e:	e000      	b.n	8002012 <getTimings+0x36>
        default:
            return 0;
 8002010:	2300      	movs	r3, #0
    }
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	000f4240 	.word	0x000f4240
 8002020:	000186a0 	.word	0x000186a0
 8002024:	00061a80 	.word	0x00061a80
 8002028:	00303d5b 	.word	0x00303d5b
 800202c:	0010061a 	.word	0x0010061a

08002030 <i2cSetup>:

static Status i2cSetup(I2cDevice *dev) {
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b092      	sub	sp, #72	; 0x48
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    if (dev->periph < 0 || dev->periph > 3) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7a1b      	ldrb	r3, [r3, #8]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d901      	bls.n	8002044 <i2cSetup+0x14>
        return STATUS_PARAMETER_ERROR;
 8002040:	2306      	movs	r3, #6
 8002042:	e0a6      	b.n	8002192 <i2cSetup+0x162>
    }
    if (i2c_state[dev->periph] != 0) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7a1b      	ldrb	r3, [r3, #8]
 8002048:	461a      	mov	r2, r3
 800204a:	4b54      	ldr	r3, [pc, #336]	; (800219c <i2cSetup+0x16c>)
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <i2cSetup+0x26>
        return STATUS_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e09d      	b.n	8002192 <i2cSetup+0x162>
    }
    I2C_TypeDef *base = NULL;
 8002056:	2300      	movs	r3, #0
 8002058:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitTypeDef pin_conf = {
 800205a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	2312      	movs	r3, #18
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
 800206e:	2301      	movs	r3, #1
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38
        .Mode = GPIO_MODE_AF_OD,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_MEDIUM,
    };
    switch (dev->periph) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7a1b      	ldrb	r3, [r3, #8]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d83e      	bhi.n	80020f8 <i2cSetup+0xc8>
 800207a:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <i2cSetup+0x50>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	08002091 	.word	0x08002091
 8002084:	080020bf 	.word	0x080020bf
 8002088:	080020f1 	.word	0x080020f1
 800208c:	080020f5 	.word	0x080020f5
        case P_I2C1:
            base = I2C1;
 8002090:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <i2cSetup+0x170>)
 8002092:	647b      	str	r3, [r7, #68]	; 0x44
            pin_conf.Alternate = GPIO_AF4_I2C1;
 8002094:	2304      	movs	r3, #4
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
            pin_conf.Pin = GPIO_PIN_TO_NUM[PIN_PB7];
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <i2cSetup+0x174>)
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
            HAL_GPIO_Init(GPIOB, &pin_conf);  // SDA: pin PB7
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	4619      	mov	r1, r3
 80020a4:	4840      	ldr	r0, [pc, #256]	; (80021a8 <i2cSetup+0x178>)
 80020a6:	f00e fe35 	bl	8010d14 <HAL_GPIO_Init>
            pin_conf.Pin = GPIO_PIN_TO_NUM[PIN_PB6];
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <i2cSetup+0x174>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            HAL_GPIO_Init(GPIOB, &pin_conf);  // SCL: pin PB6
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	483c      	ldr	r0, [pc, #240]	; (80021a8 <i2cSetup+0x178>)
 80020b8:	f00e fe2c 	bl	8010d14 <HAL_GPIO_Init>
            break;
 80020bc:	e01c      	b.n	80020f8 <i2cSetup+0xc8>
        case P_I2C2:
            base = I2C2;
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <i2cSetup+0x17c>)
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
            pin_conf.Alternate = GPIO_AF4_I2C2;
 80020c2:	2304      	movs	r3, #4
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            pin_conf.Pin = GPIO_PIN_TO_NUM[PIN_PA11];
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <i2cSetup+0x174>)
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            HAL_GPIO_Init(GPIOA, &pin_conf);  // SDA: pin PA11
 80020cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f00e fe1d 	bl	8010d14 <HAL_GPIO_Init>
            pin_conf.Pin = GPIO_PIN_TO_NUM[PIN_PA12];
 80020da:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <i2cSetup+0x174>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
            HAL_GPIO_Init(GPIOA, &pin_conf);  // SCL: pin PA12
 80020e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ea:	f00e fe13 	bl	8010d14 <HAL_GPIO_Init>
            break;
 80020ee:	e003      	b.n	80020f8 <i2cSetup+0xc8>
        case P_I2C3:
            return STATUS_PARAMETER_ERROR;
 80020f0:	2306      	movs	r3, #6
 80020f2:	e04e      	b.n	8002192 <i2cSetup+0x162>
            break;
        case P_I2C4:
            return STATUS_PARAMETER_ERROR;
 80020f4:	2306      	movs	r3, #6
 80020f6:	e04c      	b.n	8002192 <i2cSetup+0x162>
        .OwnAddress2 = 0,
        .OwnAddress2Masks = I2C_OA2_NOMASK,
        .GeneralCallMode = I2C_GENERALCALL_DISABLE,
        .NoStretchMode = I2C_NOSTRETCH_DISABLE,
        .AddressingMode = I2C_ADDRESSINGMODE_7BIT,
        .Timing = getTimings(dev),
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff6f 	bl	8001fdc <getTimings>
 80020fe:	4603      	mov	r3, r0
    I2C_InitTypeDef init_conf = {
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
    };
    if (!init_conf.Timing) {
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <i2cSetup+0xf8>
        return STATUS_PARAMETER_ERROR;
 8002124:	2306      	movs	r3, #6
 8002126:	e034      	b.n	8002192 <i2cSetup+0x162>
    }
    I2C_HandleTypeDef *handle = i2c_handles[dev->periph];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7a1b      	ldrb	r3, [r3, #8]
 800212c:	461a      	mov	r2, r3
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <i2cSetup+0x180>)
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	643b      	str	r3, [r7, #64]	; 0x40
    (*handle).Init = init_conf;
 8002136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002138:	1d1c      	adds	r4, r3, #4
 800213a:	f107 050c 	add.w	r5, r7, #12
 800213e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002142:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    (*handle).Instance = base;
 800214a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800214e:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_Init(handle) != HAL_OK) {
 8002150:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002152:	f00f f84b 	bl	80111ec <HAL_I2C_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <i2cSetup+0x130>
        return STATUS_ERROR;
 800215c:	2302      	movs	r3, #2
 800215e:	e018      	b.n	8002192 <i2cSetup+0x162>
    }
    if (HAL_I2CEx_ConfigAnalogFilter(handle, I2C_ANALOGFILTER_ENABLE) !=
 8002160:	2100      	movs	r1, #0
 8002162:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002164:	f00f fd26 	bl	8011bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <i2cSetup+0x142>
        HAL_OK) {
        return STATUS_ERROR;
 800216e:	2302      	movs	r3, #2
 8002170:	e00f      	b.n	8002192 <i2cSetup+0x162>
    }
    if (HAL_I2CEx_ConfigDigitalFilter(handle, 0) != HAL_OK) {
 8002172:	2100      	movs	r1, #0
 8002174:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002176:	f00f fd67 	bl	8011c48 <HAL_I2CEx_ConfigDigitalFilter>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <i2cSetup+0x154>
        return STATUS_ERROR;
 8002180:	2302      	movs	r3, #2
 8002182:	e006      	b.n	8002192 <i2cSetup+0x162>
    }

    i2c_state[dev->periph] = 1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7a1b      	ldrb	r3, [r3, #8]
 8002188:	461a      	mov	r2, r3
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <i2cSetup+0x16c>)
 800218c:	2101      	movs	r1, #1
 800218e:	5499      	strb	r1, [r3, r2]
    return STATUS_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3748      	adds	r7, #72	; 0x48
 8002196:	46bd      	mov	sp, r7
 8002198:	bdb0      	pop	{r4, r5, r7, pc}
 800219a:	bf00      	nop
 800219c:	2000518c 	.word	0x2000518c
 80021a0:	40005400 	.word	0x40005400
 80021a4:	200001d8 	.word	0x200001d8
 80021a8:	48000400 	.word	0x48000400
 80021ac:	40005800 	.word	0x40005800
 80021b0:	20000298 	.word	0x20000298

080021b4 <i2c_write>:

Status i2c_write(I2cDevice *device, uint8_t *tx_buf, size_t len) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
    if (i2cSetup(device) != STATUS_OK) {
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff ff35 	bl	8002030 <i2cSetup>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <i2c_write+0x1c>
        return STATUS_PARAMETER_ERROR;
 80021cc:	2306      	movs	r3, #6
 80021ce:	e017      	b.n	8002200 <i2c_write+0x4c>
    }
    if (HAL_I2C_Master_Transmit(i2c_handles[device->periph],
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	7a1b      	ldrb	r3, [r3, #8]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <i2c_write+0x54>)
 80021d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                device->address << 1, tx_buf, len,
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
    if (HAL_I2C_Master_Transmit(i2c_handles[device->periph],
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	b299      	uxth	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2264      	movs	r2, #100	; 0x64
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f00f f88c 	bl	801130c <HAL_I2C_Master_Transmit>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <i2c_write+0x4a>
                                100) != HAL_OK) {
        return STATUS_ERROR;
 80021fa:	2302      	movs	r3, #2
 80021fc:	e000      	b.n	8002200 <i2c_write+0x4c>
    }
    return STATUS_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000298 	.word	0x20000298

0800220c <i2c_read>:

Status i2c_read(I2cDevice *device, uint8_t *rx_buf, size_t len) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
    if (i2cSetup(device) != STATUS_OK) {
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff ff09 	bl	8002030 <i2cSetup>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <i2c_read+0x1c>
        return STATUS_PARAMETER_ERROR;
 8002224:	2306      	movs	r3, #6
 8002226:	e017      	b.n	8002258 <i2c_read+0x4c>
    }
    if (HAL_I2C_Master_Receive(i2c_handles[device->periph],
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	7a1b      	ldrb	r3, [r3, #8]
 800222c:	461a      	mov	r2, r3
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <i2c_read+0x54>)
 8002230:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                               device->address << 1, rx_buf, len,
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
    if (HAL_I2C_Master_Receive(i2c_handles[device->periph],
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	b299      	uxth	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	b29b      	uxth	r3, r3
 8002242:	2264      	movs	r2, #100	; 0x64
 8002244:	9200      	str	r2, [sp, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f00f f954 	bl	80114f4 <HAL_I2C_Master_Receive>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <i2c_read+0x4a>
                               100) != HAL_OK) {
        return STATUS_ERROR;
 8002252:	2302      	movs	r3, #2
 8002254:	e000      	b.n	8002258 <i2c_read+0x4c>
    }
    return STATUS_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000298 	.word	0x20000298

08002264 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002288:	68fb      	ldr	r3, [r7, #12]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b8:	68fb      	ldr	r3, [r7, #12]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c8:	f00d fd92 	bl	800fdf0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022cc:	f000 f820 	bl	8002310 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d0:	f000 fb41 	bl	8002956 <MX_GPIO_Init>
  MX_DMA_Init();
 80022d4:	f000 fb1a 	bl	800290c <MX_DMA_Init>
  MX_DAC_Init();
 80022d8:	f000 f880 	bl	80023dc <MX_DAC_Init>
  MX_I2C1_Init();
 80022dc:	f000 f8b0 	bl	8002440 <MX_I2C1_Init>
  MX_I2C2_Init();
 80022e0:	f000 f8ee 	bl	80024c0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80022e4:	f000 f986 	bl	80025f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80022e8:	f000 f9d4 	bl	8002694 <MX_TIM1_Init>
  MX_TIM2_Init();
 80022ec:	f000 fa26 	bl	800273c <MX_TIM2_Init>
  MX_LPTIM2_Init();
 80022f0:	f000 f954 	bl	800259c <MX_LPTIM2_Init>
  MX_USART2_UART_Init();
 80022f4:	f000 fabe 	bl	8002874 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80022f8:	f000 fa70 	bl	80027dc <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 80022fc:	f000 f920 	bl	8002540 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  init_timers();
 8002300:	f7ff fddc 	bl	8001ebc <init_timers>
  hab_init();
 8002304:	f7ff f940 	bl	8001588 <hab_init>
  while(1)
  {
	  hab_loop();
 8002308:	f7ff fa16 	bl	8001738 <hab_loop>
 800230c:	e7fc      	b.n	8002308 <main+0x44>
	...

08002310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b09a      	sub	sp, #104	; 0x68
 8002314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	2248      	movs	r2, #72	; 0x48
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f014 fcbc 	bl	8016c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
 8002334:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <SystemClock_Config+0xc8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800233e:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <SystemClock_Config+0xc8>)
 8002340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <SystemClock_Config+0xc8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002352:	2303      	movs	r3, #3
 8002354:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8002356:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800235c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002362:	2340      	movs	r3, #64	; 0x40
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236a:	2302      	movs	r3, #2
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800236e:	2303      	movs	r3, #3
 8002370:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002372:	2310      	movs	r3, #16
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8002376:	2306      	movs	r3, #6
 8002378:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800237a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800237e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002380:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002384:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f010 fbfd 	bl	8012b90 <HAL_RCC_OscConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800239c:	f000 fb1e 	bl	80029dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80023a0:	234f      	movs	r3, #79	; 0x4f
 80023a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a4:	2303      	movs	r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	2102      	movs	r1, #2
 80023be:	4618      	mov	r0, r3
 80023c0:	f010 ff68 	bl	8013294 <HAL_RCC_ClockConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80023ca:	f000 fb07 	bl	80029dc <Error_Handler>
  }
}
 80023ce:	bf00      	nop
 80023d0:	3768      	adds	r7, #104	; 0x68
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	58000400 	.word	0x58000400

080023dc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2224      	movs	r2, #36	; 0x24
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f014 fc57 	bl	8016c9c <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_DAC_Init+0x5c>)
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <MX_DAC_Init+0x60>)
 80023f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80023f4:	4810      	ldr	r0, [pc, #64]	; (8002438 <MX_DAC_Init+0x5c>)
 80023f6:	f00d fea0 	bl	801013a <HAL_DAC_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_DAC_Init+0x28>
  {
    Error_Handler();
 8002400:	f000 faec 	bl	80029dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_LPTIM2_OUT;
 8002408:	2332      	movs	r3, #50	; 0x32
 800240a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8002410:	2301      	movs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2200      	movs	r2, #0
 800241c:	4619      	mov	r1, r3
 800241e:	4806      	ldr	r0, [pc, #24]	; (8002438 <MX_DAC_Init+0x5c>)
 8002420:	f00d ffbc 	bl	801039c <HAL_DAC_ConfigChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_DAC_Init+0x52>
  {
    Error_Handler();
 800242a:	f000 fad7 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20005190 	.word	0x20005190
 800243c:	40007400 	.word	0x40007400

08002440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <MX_I2C1_Init+0x74>)
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <MX_I2C1_Init+0x78>)
 8002448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_I2C1_Init+0x74>)
 800244c:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <MX_I2C1_Init+0x7c>)
 800244e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <MX_I2C1_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002456:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <MX_I2C1_Init+0x74>)
 8002458:	2201      	movs	r2, #1
 800245a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <MX_I2C1_Init+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_I2C1_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_I2C1_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_I2C1_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_I2C1_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800247a:	480e      	ldr	r0, [pc, #56]	; (80024b4 <MX_I2C1_Init+0x74>)
 800247c:	f00e feb6 	bl	80111ec <HAL_I2C_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002486:	f000 faa9 	bl	80029dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800248a:	2100      	movs	r1, #0
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <MX_I2C1_Init+0x74>)
 800248e:	f00f fb91 	bl	8011bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002498:	f000 faa0 	bl	80029dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800249c:	2100      	movs	r1, #0
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_I2C1_Init+0x74>)
 80024a0:	f00f fbd2 	bl	8011c48 <HAL_I2CEx_ConfigDigitalFilter>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024aa:	f000 fa97 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20005204 	.word	0x20005204
 80024b8:	40005400 	.word	0x40005400
 80024bc:	00303d5b 	.word	0x00303d5b

080024c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <MX_I2C2_Init+0x74>)
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <MX_I2C2_Init+0x78>)
 80024c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <MX_I2C2_Init+0x74>)
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <MX_I2C2_Init+0x7c>)
 80024ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <MX_I2C2_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <MX_I2C2_Init+0x74>)
 80024d8:	2201      	movs	r2, #1
 80024da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <MX_I2C2_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <MX_I2C2_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <MX_I2C2_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_I2C2_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MX_I2C2_Init+0x74>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024fa:	480e      	ldr	r0, [pc, #56]	; (8002534 <MX_I2C2_Init+0x74>)
 80024fc:	f00e fe76 	bl	80111ec <HAL_I2C_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002506:	f000 fa69 	bl	80029dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800250a:	2100      	movs	r1, #0
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <MX_I2C2_Init+0x74>)
 800250e:	f00f fb51 	bl	8011bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002518:	f000 fa60 	bl	80029dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800251c:	2100      	movs	r1, #0
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_I2C2_Init+0x74>)
 8002520:	f00f fb92 	bl	8011c48 <HAL_I2CEx_ConfigDigitalFilter>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800252a:	f000 fa57 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20005258 	.word	0x20005258
 8002538:	40005800 	.word	0x40005800
 800253c:	00303d5b 	.word	0x00303d5b

08002540 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <MX_LPTIM1_Init+0x54>)
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <MX_LPTIM1_Init+0x58>)
 8002548:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <MX_LPTIM1_Init+0x54>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <MX_LPTIM1_Init+0x54>)
 8002552:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8002556:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_LPTIM1_Init+0x54>)
 800255a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_LPTIM1_Init+0x54>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_LPTIM1_Init+0x54>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_LPTIM1_Init+0x54>)
 800256e:	2200      	movs	r2, #0
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_LPTIM1_Init+0x54>)
 8002574:	2200      	movs	r2, #0
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_LPTIM1_Init+0x54>)
 800257a:	2200      	movs	r2, #0
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_LPTIM1_Init+0x54>)
 8002580:	f00f fc1e 	bl	8011dc0 <HAL_LPTIM_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800258a:	f000 fa27 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200052ac 	.word	0x200052ac
 8002598:	40007c00 	.word	0x40007c00

0800259c <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM2_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025a2:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <MX_LPTIM2_Init+0x54>)
 80025a4:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b8:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_LPTIM2_Init+0x50>)
 80025da:	f00f fbf1 	bl	8011dc0 <HAL_LPTIM_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 80025e4:	f000 f9fa 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200052e8 	.word	0x200052e8
 80025f0:	40009400 	.word	0x40009400

080025f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <MX_SPI1_Init+0x74>)
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <MX_SPI1_Init+0x78>)
 80025fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <MX_SPI1_Init+0x74>)
 8002600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <MX_SPI1_Init+0x74>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <MX_SPI1_Init+0x74>)
 800260e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002612:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <MX_SPI1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <MX_SPI1_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_SPI1_Init+0x74>)
 8002622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002626:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <MX_SPI1_Init+0x74>)
 800262a:	2208      	movs	r2, #8
 800262c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_SPI1_Init+0x74>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_SPI1_Init+0x74>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_SPI1_Init+0x74>)
 800263c:	2200      	movs	r2, #0
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_SPI1_Init+0x74>)
 8002642:	2207      	movs	r2, #7
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_SPI1_Init+0x74>)
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_SPI1_Init+0x74>)
 800264e:	2208      	movs	r2, #8
 8002650:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_SPI1_Init+0x74>)
 8002654:	f011 fada 	bl	8013c0c <HAL_SPI_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800265e:	f000 f9bd 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20005324 	.word	0x20005324
 800266c:	40013000 	.word	0x40013000

08002670 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_SUBGHZ_Init+0x20>)
 8002676:	2210      	movs	r2, #16
 8002678:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_SUBGHZ_Init+0x20>)
 800267c:	f012 f87c 	bl	8014778 <HAL_SUBGHZ_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002686:	f000 f9a9 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20005388 	.word	0x20005388

08002694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <MX_TIM1_Init+0xa4>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026ba:	222f      	movs	r2, #47	; 0x2f
 80026bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026de:	4815      	ldr	r0, [pc, #84]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026e0:	f012 fc74 	bl	8014fcc <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80026ea:	f000 f977 	bl	80029dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4619      	mov	r1, r3
 80026fa:	480e      	ldr	r0, [pc, #56]	; (8002734 <MX_TIM1_Init+0xa0>)
 80026fc:	f012 fd02 	bl	8015104 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002706:	f000 f969 	bl	80029dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800270a:	2320      	movs	r3, #32
 800270c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4806      	ldr	r0, [pc, #24]	; (8002734 <MX_TIM1_Init+0xa0>)
 800271c:	f012 ff8e 	bl	801563c <HAL_TIMEx_MasterConfigSynchronization>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002726:	f000 f959 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20005394 	.word	0x20005394
 8002738:	40012c00 	.word	0x40012c00

0800273c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002752:	463b      	mov	r3, r7
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <MX_TIM2_Init+0x9c>)
 800275e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <MX_TIM2_Init+0x9c>)
 8002766:	2200      	movs	r2, #0
 8002768:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MX_TIM2_Init+0x9c>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <MX_TIM2_Init+0x9c>)
 8002772:	f04f 32ff 	mov.w	r2, #4294967295
 8002776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <MX_TIM2_Init+0x9c>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_TIM2_Init+0x9c>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002784:	4814      	ldr	r0, [pc, #80]	; (80027d8 <MX_TIM2_Init+0x9c>)
 8002786:	f012 fc21 	bl	8014fcc <HAL_TIM_Base_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002790:	f000 f924 	bl	80029dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002794:	2307      	movs	r3, #7
 8002796:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	4619      	mov	r1, r3
 80027a2:	480d      	ldr	r0, [pc, #52]	; (80027d8 <MX_TIM2_Init+0x9c>)
 80027a4:	f012 fd77 	bl	8015296 <HAL_TIM_SlaveConfigSynchro>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80027ae:	f000 f915 	bl	80029dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ba:	463b      	mov	r3, r7
 80027bc:	4619      	mov	r1, r3
 80027be:	4806      	ldr	r0, [pc, #24]	; (80027d8 <MX_TIM2_Init+0x9c>)
 80027c0:	f012 ff3c 	bl	801563c <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80027ca:	f000 f907 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200053e0 	.word	0x200053e0

080027dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <MX_USART1_UART_Init+0x90>)
 80027e2:	4a23      	ldr	r2, [pc, #140]	; (8002870 <MX_USART1_UART_Init+0x94>)
 80027e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027e6:	4b21      	ldr	r3, [pc, #132]	; (800286c <MX_USART1_UART_Init+0x90>)
 80027e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ee:	4b1f      	ldr	r3, [pc, #124]	; (800286c <MX_USART1_UART_Init+0x90>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <MX_USART1_UART_Init+0x90>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <MX_USART1_UART_Init+0x90>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_USART1_UART_Init+0x90>)
 8002802:	220c      	movs	r2, #12
 8002804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <MX_USART1_UART_Init+0x90>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_USART1_UART_Init+0x90>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_USART1_UART_Init+0x90>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_USART1_UART_Init+0x90>)
 800281a:	2200      	movs	r2, #0
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <MX_USART1_UART_Init+0x90>)
 8002820:	2200      	movs	r2, #0
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002824:	4811      	ldr	r0, [pc, #68]	; (800286c <MX_USART1_UART_Init+0x90>)
 8002826:	f012 ffd8 	bl	80157da <HAL_HalfDuplex_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002830:	f000 f8d4 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002834:	2100      	movs	r1, #0
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <MX_USART1_UART_Init+0x90>)
 8002838:	f014 f8dd 	bl	80169f6 <HAL_UARTEx_SetTxFifoThreshold>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002842:	f000 f8cb 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002846:	2100      	movs	r1, #0
 8002848:	4808      	ldr	r0, [pc, #32]	; (800286c <MX_USART1_UART_Init+0x90>)
 800284a:	f014 f912 	bl	8016a72 <HAL_UARTEx_SetRxFifoThreshold>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002854:	f000 f8c2 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002858:	4804      	ldr	r0, [pc, #16]	; (800286c <MX_USART1_UART_Init+0x90>)
 800285a:	f014 f894 	bl	8016986 <HAL_UARTEx_DisableFifoMode>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002864:	f000 f8ba 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	2000542c 	.word	0x2000542c
 8002870:	40013800 	.word	0x40013800

08002874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002878:	4b22      	ldr	r3, [pc, #136]	; (8002904 <MX_USART2_UART_Init+0x90>)
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <MX_USART2_UART_Init+0x94>)
 800287c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <MX_USART2_UART_Init+0x90>)
 8002880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <MX_USART2_UART_Init+0x90>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_USART2_UART_Init+0x90>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <MX_USART2_UART_Init+0x90>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_USART2_UART_Init+0x90>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028bc:	4811      	ldr	r0, [pc, #68]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028be:	f012 ff3c 	bl	801573a <HAL_UART_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028c8:	f000 f888 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028cc:	2100      	movs	r1, #0
 80028ce:	480d      	ldr	r0, [pc, #52]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028d0:	f014 f891 	bl	80169f6 <HAL_UARTEx_SetTxFifoThreshold>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028da:	f000 f87f 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028de:	2100      	movs	r1, #0
 80028e0:	4808      	ldr	r0, [pc, #32]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028e2:	f014 f8c6 	bl	8016a72 <HAL_UARTEx_SetRxFifoThreshold>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028ec:	f000 f876 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028f2:	f014 f848 	bl	8016986 <HAL_UARTEx_DisableFifoMode>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028fc:	f000 f86e 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200054c0 	.word	0x200054c0
 8002908:	40004400 	.word	0x40004400

0800290c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002910:	2004      	movs	r0, #4
 8002912:	f7ff fca7 	bl	8002264 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002916:	2001      	movs	r0, #1
 8002918:	f7ff fca4 	bl	8002264 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800291c:	2002      	movs	r0, #2
 800291e:	f7ff fca1 	bl	8002264 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	200b      	movs	r0, #11
 8002928:	f00d fbd3 	bl	80100d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800292c:	200b      	movs	r0, #11
 800292e:	f00d fbea 	bl	8010106 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	2036      	movs	r0, #54	; 0x36
 8002938:	f00d fbcb 	bl	80100d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800293c:	2036      	movs	r0, #54	; 0x36
 800293e:	f00d fbe2 	bl	8010106 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2037      	movs	r0, #55	; 0x37
 8002948:	f00d fbc3 	bl	80100d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800294c:	2037      	movs	r0, #55	; 0x37
 800294e:	f00d fbda 	bl	8010106 <HAL_NVIC_EnableIRQ>

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}

08002956 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	2002      	movs	r0, #2
 800295c:	f7ff fc9a 	bl	8002294 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	2001      	movs	r0, #1
 8002962:	f7ff fc97 	bl	8002294 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	2004      	movs	r0, #4
 8002968:	f7ff fc94 	bl	8002294 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002978:	1d39      	adds	r1, r7, #4
 800297a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297e:	2201      	movs	r2, #1
 8002980:	4803      	ldr	r0, [pc, #12]	; (8002990 <__io_putchar+0x20>)
 8002982:	f012 ffc1 	bl	8015908 <HAL_UART_Transmit>

  return ch;
 8002986:	687b      	ldr	r3, [r7, #4]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200054c0 	.word	0x200054c0

08002994 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_UART_TxCpltCallback+0x20>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_UART_TxCpltCallback+0x16>
	{
		onewire_tx_callback();
 80029a6:	f000 f9f5 	bl	8002d94 <onewire_tx_callback>
	}
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40013800 	.word	0x40013800

080029b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_UART_RxCpltCallback+0x20>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_UART_RxCpltCallback+0x16>
	{
		onewire_rx_callback();
 80029ca:	f000 f9e9 	bl	8002da0 <onewire_rx_callback>
	}
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40013800 	.word	0x40013800

080029dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e0:	b672      	cpsid	i
}
 80029e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("HAL Error");
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <Error_Handler+0x14>)
 80029e6:	f014 fe9b 	bl	8017720 <iprintf>
  /* USER CODE END Error_Handler_Debug */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	08019ee0 	.word	0x08019ee0

080029f4 <HAL_SnglWireFullDuplex_EnableRTX>:
static uint8_t onewire_state = 0; // 0 - uninitialized, 1 - normal, 2 - reset
uint8_t onewire_operation_done = 0;
uint8_t onewire_buf[ONEWIRE_MAX_LEN];

HAL_StatusTypeDef HAL_SnglWireFullDuplex_EnableRTX(UART_HandleTypeDef *huart)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_SnglWireFullDuplex_EnableRTX+0x16>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e018      	b.n	8002a3c <HAL_SnglWireFullDuplex_EnableRTX+0x48>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2224      	movs	r2, #36	; 0x24
 8002a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the USART's transmit and receive interface by setting the TE bit in the USART CR1 register */
  SET_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 020c 	orr.w	r2, r2, #12
 8002a28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
	...

08002a48 <onewireSetup>:
  __HAL_UNLOCK(huart);

  return HAL_OK;
}

static Status onewireSetup(OneWireDevice *dev) {
 8002a48:	b5b0      	push	{r4, r5, r7, lr}
 8002a4a:	b09c      	sub	sp, #112	; 0x70
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    HAL_UART_DeInit(&huart1);
 8002a50:	4838      	ldr	r0, [pc, #224]	; (8002b34 <onewireSetup+0xec>)
 8002a52:	f012 ff1a 	bl	801588a <HAL_UART_DeInit>

    USART_TypeDef *base = USART1;
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <onewireSetup+0xf0>)
 8002a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitTypeDef pin_conf = {
 8002a5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	2312      	movs	r3, #18
 8002a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a6e:	2301      	movs	r3, #1
 8002a70:	663b      	str	r3, [r7, #96]	; 0x60
        .Mode = GPIO_MODE_AF_OD,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_MEDIUM,
    };

	pin_conf.Alternate = GPIO_AF7_USART1;
 8002a72:	2307      	movs	r3, #7
 8002a74:	667b      	str	r3, [r7, #100]	; 0x64
	pin_conf.Pin = GPIO_PIN_TO_NUM[PIN_PA9];
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <onewireSetup+0xf4>)
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_GPIO_Init(GPIOA, &pin_conf);  // Pin PA7
 8002a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a80:	4619      	mov	r1, r3
 8002a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a86:	f00e f945 	bl	8010d14 <HAL_GPIO_Init>

    UART_InitTypeDef init_conf = {
    		.BaudRate = (onewire_state > 1 ? dev->normal_speed : dev->reset_speed),
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <onewireSetup+0xf8>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d902      	bls.n	8002a98 <onewireSetup+0x50>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	e001      	b.n	8002a9c <onewireSetup+0x54>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
    UART_InitTypeDef init_conf = {
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aaa:	230c      	movs	r3, #12
 8002aac:	643b      	str	r3, [r7, #64]	; 0x40
 8002aae:	2300      	movs	r3, #0
 8002ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aba:	2300      	movs	r3, #0
 8002abc:	653b      	str	r3, [r7, #80]	; 0x50
			.OverSampling = UART_OVERSAMPLING_16,
			.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE,
			.ClockPrescaler = UART_PRESCALER_DIV1,
    };

    UART_AdvFeatureInitTypeDef adv_init_conf = {
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	2228      	movs	r2, #40	; 0x28
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f014 f8e8 	bl	8016c9c <memset>
    		.AdvFeatureInit = UART_ADVFEATURE_NO_INIT,
    };

    UART_HandleTypeDef *handle = &huart1;
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <onewireSetup+0xec>)
 8002ace:	66bb      	str	r3, [r7, #104]	; 0x68
    handle->Init = init_conf;
 8002ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad2:	1d1c      	adds	r4, r3, #4
 8002ad4:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8002ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae0:	682b      	ldr	r3, [r5, #0]
 8002ae2:	6023      	str	r3, [r4, #0]
    handle->AdvancedInit = adv_init_conf;
 8002ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002aea:	f107 0508 	add.w	r5, r7, #8
 8002aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002afa:	e884 0003 	stmia.w	r4, {r0, r1}
    handle->Instance = base;
 8002afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b02:	601a      	str	r2, [r3, #0]
    if (HAL_HalfDuplex_Init(handle) != HAL_OK) {
 8002b04:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b06:	f012 fe68 	bl	80157da <HAL_HalfDuplex_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <onewireSetup+0xcc>
        return STATUS_ERROR;
 8002b10:	2302      	movs	r3, #2
 8002b12:	e00b      	b.n	8002b2c <onewireSetup+0xe4>
    }

    if(onewire_state > 1)
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <onewireSetup+0xf8>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d903      	bls.n	8002b24 <onewireSetup+0xdc>
    {
    	onewire_state = 1;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <onewireSetup+0xf8>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e002      	b.n	8002b2a <onewireSetup+0xe2>
    }
    else
    {
    	onewire_state = 2;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <onewireSetup+0xf8>)
 8002b26:	2202      	movs	r2, #2
 8002b28:	701a      	strb	r2, [r3, #0]
    }
    return STATUS_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3770      	adds	r7, #112	; 0x70
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}
 8002b34:	2000542c 	.word	0x2000542c
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	200002a0 	.word	0x200002a0
 8002b40:	20005614 	.word	0x20005614

08002b44 <onewire_reset>:

Status onewire_reset(OneWireDevice *device) {
 8002b44:	b5b0      	push	{r4, r5, r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	onewire_operation_done = 0;
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <onewire_reset+0xbc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
	uint64_t timeout = MILLIS();
 8002b52:	f7ff f9f5 	bl	8001f40 <MILLIS>
 8002b56:	e9c7 0104 	strd	r0, r1, [r7, #16]

	if(onewire_state < 2) {
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <onewire_reset+0xc0>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d807      	bhi.n	8002b72 <onewire_reset+0x2e>
		if (onewireSetup(device) != STATUS_OK) {
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ff70 	bl	8002a48 <onewireSetup>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <onewire_reset+0x2e>
			return STATUS_PARAMETER_ERROR;
 8002b6e:	2306      	movs	r3, #6
 8002b70:	e041      	b.n	8002bf6 <onewire_reset+0xb2>
		}
	}

	uint8_t tx_buf = 0xF0;
 8002b72:	23f0      	movs	r3, #240	; 0xf0
 8002b74:	73fb      	strb	r3, [r7, #15]

	if (HAL_SnglWireFullDuplex_EnableRTX(&huart1) != HAL_OK) {
 8002b76:	4824      	ldr	r0, [pc, #144]	; (8002c08 <onewire_reset+0xc4>)
 8002b78:	f7ff ff3c 	bl	80029f4 <HAL_SnglWireFullDuplex_EnableRTX>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <onewire_reset+0x42>
		return STATUS_ERROR;
 8002b82:	2302      	movs	r3, #2
 8002b84:	e037      	b.n	8002bf6 <onewire_reset+0xb2>
	}
    if (HAL_UART_Transmit_DMA(&huart1, &tx_buf, 1) != HAL_OK) {
 8002b86:	f107 030f 	add.w	r3, r7, #15
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	481e      	ldr	r0, [pc, #120]	; (8002c08 <onewire_reset+0xc4>)
 8002b90:	f012 ff40 	bl	8015a14 <HAL_UART_Transmit_DMA>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <onewire_reset+0x5a>
        return STATUS_ERROR;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e02b      	b.n	8002bf6 <onewire_reset+0xb2>
    }
    if (HAL_UART_Receive_DMA(&huart1, &tx_buf, 1) != HAL_OK) {
 8002b9e:	f107 030f 	add.w	r3, r7, #15
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4818      	ldr	r0, [pc, #96]	; (8002c08 <onewire_reset+0xc4>)
 8002ba8:	f012 ffb4 	bl	8015b14 <HAL_UART_Receive_DMA>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00e      	beq.n	8002bd0 <onewire_reset+0x8c>
		return STATUS_ERROR;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e01f      	b.n	8002bf6 <onewire_reset+0xb2>
	}
    while(!onewire_operation_done)
	{
		if(MILLIS() - timeout > 200)
 8002bb6:	f7ff f9c3 	bl	8001f40 <MILLIS>
 8002bba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bbe:	1a84      	subs	r4, r0, r2
 8002bc0:	eb61 0503 	sbc.w	r5, r1, r3
 8002bc4:	2cc9      	cmp	r4, #201	; 0xc9
 8002bc6:	f175 0300 	sbcs.w	r3, r5, #0
 8002bca:	d301      	bcc.n	8002bd0 <onewire_reset+0x8c>
		{
			return STATUS_TIMEOUT;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	e012      	b.n	8002bf6 <onewire_reset+0xb2>
    while(!onewire_operation_done)
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <onewire_reset+0xbc>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <onewire_reset+0x72>
		}
	}
    onewire_operation_done = 0;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <onewire_reset+0xbc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]

    if(tx_buf == 0xF0)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2bf0      	cmp	r3, #240	; 0xf0
 8002be2:	d101      	bne.n	8002be8 <onewire_reset+0xa4>
    {
    	return STATUS_ERROR;
 8002be4:	2302      	movs	r3, #2
 8002be6:	e006      	b.n	8002bf6 <onewire_reset+0xb2>
    }

    DELAY_MICROS(150);
 8002be8:	f04f 0096 	mov.w	r0, #150	; 0x96
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	f7ff f9d4 	bl	8001f9c <DELAY_MICROS>

    return STATUS_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20005615 	.word	0x20005615
 8002c04:	20005614 	.word	0x20005614
 8002c08:	2000542c 	.word	0x2000542c

08002c0c <onewire_readwrite>:

Status onewire_readwrite(OneWireDevice *device, uint8_t *buf, size_t len) {
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
	if(ONEWIRE_MAX_LEN < len * 8)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	2b80      	cmp	r3, #128	; 0x80
 8002c1e:	d901      	bls.n	8002c24 <onewire_readwrite+0x18>
	{
		return STATUS_PARAMETER_ERROR;
 8002c20:	2306      	movs	r3, #6
 8002c22:	e0aa      	b.n	8002d7a <onewire_readwrite+0x16e>
	}

	uint64_t timeout = MILLIS();
 8002c24:	f7ff f98c 	bl	8001f40 <MILLIS>
 8002c28:	e9c7 0104 	strd	r0, r1, [r7, #16]

	if(onewire_state != 1) {
 8002c2c:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <onewire_readwrite+0x178>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d007      	beq.n	8002c44 <onewire_readwrite+0x38>
		if (onewireSetup(device) != STATUS_OK) {
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7ff ff07 	bl	8002a48 <onewireSetup>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <onewire_readwrite+0x38>
			return STATUS_PARAMETER_ERROR;
 8002c40:	2306      	movs	r3, #6
 8002c42:	e09a      	b.n	8002d7a <onewire_readwrite+0x16e>
		}
	}

	for(size_t i = 0; i < len; i++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	e020      	b.n	8002c8c <onewire_readwrite+0x80>
	{
		for(size_t j = 0; j < 8; j++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
 8002c4e:	e017      	b.n	8002c80 <onewire_readwrite+0x74>
		{
			onewire_buf[i*8 + j] = buf[i] >> j & 0x01 ? 0xFF : 0x00;
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	4413      	add	r3, r2
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	fa42 f303 	asr.w	r3, r2, r3
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <onewire_readwrite+0x60>
 8002c68:	21ff      	movs	r1, #255	; 0xff
 8002c6a:	e000      	b.n	8002c6e <onewire_readwrite+0x62>
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	00da      	lsls	r2, r3, #3
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	4413      	add	r3, r2
 8002c76:	4a44      	ldr	r2, [pc, #272]	; (8002d88 <onewire_readwrite+0x17c>)
 8002c78:	54d1      	strb	r1, [r2, r3]
		for(size_t j = 0; j < 8; j++)
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b07      	cmp	r3, #7
 8002c84:	d9e4      	bls.n	8002c50 <onewire_readwrite+0x44>
	for(size_t i = 0; i < len; i++)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3301      	adds	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3da      	bcc.n	8002c4a <onewire_readwrite+0x3e>
		}
	}

	if (HAL_SnglWireFullDuplex_EnableRTX(&huart1) != HAL_OK) {
 8002c94:	483d      	ldr	r0, [pc, #244]	; (8002d8c <onewire_readwrite+0x180>)
 8002c96:	f7ff fead 	bl	80029f4 <HAL_SnglWireFullDuplex_EnableRTX>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <onewire_readwrite+0x98>
		return STATUS_ERROR;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e06a      	b.n	8002d7a <onewire_readwrite+0x16e>
	}
	if (HAL_UART_Transmit_DMA(&huart1, onewire_buf, len * 8) != HAL_OK) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	4936      	ldr	r1, [pc, #216]	; (8002d88 <onewire_readwrite+0x17c>)
 8002cb0:	4836      	ldr	r0, [pc, #216]	; (8002d8c <onewire_readwrite+0x180>)
 8002cb2:	f012 feaf 	bl	8015a14 <HAL_UART_Transmit_DMA>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <onewire_readwrite+0xb4>
		return STATUS_ERROR;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e05c      	b.n	8002d7a <onewire_readwrite+0x16e>
	}
	if (HAL_UART_Receive_DMA(&huart1, onewire_buf, len * 8) != HAL_OK) {
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	492f      	ldr	r1, [pc, #188]	; (8002d88 <onewire_readwrite+0x17c>)
 8002ccc:	482f      	ldr	r0, [pc, #188]	; (8002d8c <onewire_readwrite+0x180>)
 8002cce:	f012 ff21 	bl	8015b14 <HAL_UART_Receive_DMA>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <onewire_readwrite+0xea>
		return STATUS_ERROR;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e04e      	b.n	8002d7a <onewire_readwrite+0x16e>
	}

	while(!onewire_operation_done)
	{
		if(MILLIS() - timeout > 200)
 8002cdc:	f7ff f930 	bl	8001f40 <MILLIS>
 8002ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ce4:	1a84      	subs	r4, r0, r2
 8002ce6:	eb61 0503 	sbc.w	r5, r1, r3
 8002cea:	2cc9      	cmp	r4, #201	; 0xc9
 8002cec:	f175 0300 	sbcs.w	r3, r5, #0
 8002cf0:	d301      	bcc.n	8002cf6 <onewire_readwrite+0xea>
		{
			return STATUS_TIMEOUT;
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e041      	b.n	8002d7a <onewire_readwrite+0x16e>
	while(!onewire_operation_done)
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <onewire_readwrite+0x184>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <onewire_readwrite+0xd0>
		}
	}

	onewire_operation_done = 0;
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <onewire_readwrite+0x184>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < len; i++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	e02c      	b.n	8002d64 <onewire_readwrite+0x158>
	{
		buf[i] = 0;
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
		for(size_t j = 0; j < 8; j++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e01e      	b.n	8002d58 <onewire_readwrite+0x14c>
		{
			buf[i] |= (onewire_buf[i*8 + j] == 0xFF ? 0x01 : 0x00) << j;
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b25a      	sxtb	r2, r3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	00d9      	lsls	r1, r3, #3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	440b      	add	r3, r1
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <onewire_readwrite+0x17c>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	2bff      	cmp	r3, #255	; 0xff
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b259      	sxtb	r1, r3
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b2ca      	uxtb	r2, r1
 8002d50:	701a      	strb	r2, [r3, #0]
		for(size_t j = 0; j < 8; j++)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b07      	cmp	r3, #7
 8002d5c:	d9dd      	bls.n	8002d1a <onewire_readwrite+0x10e>
	for(size_t i = 0; i < len; i++)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3301      	adds	r3, #1
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3ce      	bcc.n	8002d0a <onewire_readwrite+0xfe>
		}
	}
	DELAY_MICROS(150);
 8002d6c:	f04f 0096 	mov.w	r0, #150	; 0x96
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	f7ff f912 	bl	8001f9c <DELAY_MICROS>

	return STATUS_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bdb0      	pop	{r4, r5, r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20005614 	.word	0x20005614
 8002d88:	20005618 	.word	0x20005618
 8002d8c:	2000542c 	.word	0x2000542c
 8002d90:	20005615 	.word	0x20005615

08002d94 <onewire_tx_callback>:

void onewire_tx_callback()
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <onewire_rx_callback>:

void onewire_rx_callback()
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
	onewire_operation_done = 1;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <onewire_rx_callback+0x14>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20005615 	.word	0x20005615

08002db8 <spi_setup>:
static uint8_t spi_state[] = {0};
static SPI_HandleTypeDef* spi_handles[] = {&hspi1};

static uint8_t cs_pin[4] = {PIN_PA4, 0, 0, 0};

Status spi_setup(SpiDevice* dev) {
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b098      	sub	sp, #96	; 0x60
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    if (dev->periph < 0 || dev->periph > 3) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	79db      	ldrb	r3, [r3, #7]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d901      	bls.n	8002dcc <spi_setup+0x14>
        return STATUS_PARAMETER_ERROR;
 8002dc8:	2306      	movs	r3, #6
 8002dca:	e0c6      	b.n	8002f5a <spi_setup+0x1a2>
    }
    if (spi_state[dev->periph] != 0) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	79db      	ldrb	r3, [r3, #7]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b64      	ldr	r3, [pc, #400]	; (8002f64 <spi_setup+0x1ac>)
 8002dd4:	5c9b      	ldrb	r3, [r3, r2]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <spi_setup+0x26>
        return STATUS_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e0bd      	b.n	8002f5a <spi_setup+0x1a2>
    }
    SPI_TypeDef* base = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitTypeDef pin_conf = {
 8002de2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
 8002df2:	2302      	movs	r3, #2
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
        .Mode = GPIO_MODE_AF_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_LOW,
    };
    switch (dev->periph) {
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	79db      	ldrb	r3, [r3, #7]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d838      	bhi.n	8002e70 <spi_setup+0xb8>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <spi_setup+0x4c>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e65 	.word	0x08002e65
 8002e0c:	08002e69 	.word	0x08002e69
 8002e10:	08002e6d 	.word	0x08002e6d
        case P_SPI1:
            base = SPI1;
 8002e14:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <spi_setup+0x1b0>)
 8002e16:	65fb      	str	r3, [r7, #92]	; 0x5c
            pin_conf.Alternate = GPIO_AF5_SPI1;
 8002e18:	2305      	movs	r3, #5
 8002e1a:	653b      	str	r3, [r7, #80]	; 0x50
            pin_conf.Pin = GPIO_PIN_TO_NUM[PIN_PA5] | GPIO_PIN_TO_NUM[PIN_PA6] |
 8002e1c:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <spi_setup+0x1b4>)
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <spi_setup+0x1b4>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	431a      	orrs	r2, r3
                           GPIO_PIN_TO_NUM[PIN_PA7];  // SCK: pin PA5, MISO: pin
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <spi_setup+0x1b4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
            pin_conf.Pin = GPIO_PIN_TO_NUM[PIN_PA5] | GPIO_PIN_TO_NUM[PIN_PA6] |
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	643b      	str	r3, [r7, #64]	; 0x40
                                                      // PA6, MOSI: pin PA7
            gpio_write(cs_pin[0], GPIO_HIGH);         // NSS: pin PA4
 8002e2e:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <spi_setup+0x1b8>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fb71 	bl	800151c <gpio_write>
            HAL_GPIO_DeInit(GPIOA, pin_conf.Pin);
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e42:	f00e f8c7 	bl	8010fd4 <HAL_GPIO_DeInit>
            HAL_GPIO_Init(GPIOA, &pin_conf);
 8002e46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e50:	f00d ff60 	bl	8010d14 <HAL_GPIO_Init>
            HAL_GPIO_LockPin(GPIOA, pin_conf.Pin);
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5e:	f00e f99e 	bl	801119e <HAL_GPIO_LockPin>
            break;
 8002e62:	e005      	b.n	8002e70 <spi_setup+0xb8>
        case P_SPI2:
            return STATUS_PARAMETER_ERROR;
 8002e64:	2306      	movs	r3, #6
 8002e66:	e078      	b.n	8002f5a <spi_setup+0x1a2>
            break;
        case P_SPI3:
            return STATUS_PARAMETER_ERROR;
 8002e68:	2306      	movs	r3, #6
 8002e6a:	e076      	b.n	8002f5a <spi_setup+0x1a2>
            break;
        case P_SPI4:
            return STATUS_PARAMETER_ERROR;
 8002e6c:	2306      	movs	r3, #6
 8002e6e:	e074      	b.n	8002f5a <spi_setup+0x1a2>
            break;
    }
    uint32_t prescale = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	65bb      	str	r3, [r7, #88]	; 0x58
    switch (dev->clk) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a3e      	ldr	r2, [pc, #248]	; (8002f74 <spi_setup+0x1bc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d021      	beq.n	8002ec2 <spi_setup+0x10a>
 8002e7e:	4a3d      	ldr	r2, [pc, #244]	; (8002f74 <spi_setup+0x1bc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d821      	bhi.n	8002ec8 <spi_setup+0x110>
 8002e84:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <spi_setup+0x1c0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <spi_setup+0x104>
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <spi_setup+0x1c0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d81b      	bhi.n	8002ec8 <spi_setup+0x110>
 8002e90:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <spi_setup+0x1c4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00f      	beq.n	8002eb6 <spi_setup+0xfe>
 8002e96:	4a39      	ldr	r2, [pc, #228]	; (8002f7c <spi_setup+0x1c4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d815      	bhi.n	8002ec8 <spi_setup+0x110>
 8002e9c:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <spi_setup+0x1c8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <spi_setup+0xf2>
 8002ea2:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <spi_setup+0x1cc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <spi_setup+0xf8>
 8002ea8:	e00e      	b.n	8002ec8 <spi_setup+0x110>
        case SPI_SPEED_100kHz:
            prescale = SPI_BAUDRATEPRESCALER_256;
 8002eaa:	2338      	movs	r3, #56	; 0x38
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
            break;
 8002eae:	e00d      	b.n	8002ecc <spi_setup+0x114>
        case SPI_SPEED_500kHz:
            prescale = SPI_BAUDRATEPRESCALER_128;
 8002eb0:	2330      	movs	r3, #48	; 0x30
 8002eb2:	65bb      	str	r3, [r7, #88]	; 0x58
            break;
 8002eb4:	e00a      	b.n	8002ecc <spi_setup+0x114>
        case SPI_SPEED_1MHz:
            prescale = SPI_BAUDRATEPRESCALER_64;
 8002eb6:	2328      	movs	r3, #40	; 0x28
 8002eb8:	65bb      	str	r3, [r7, #88]	; 0x58
            break;
 8002eba:	e007      	b.n	8002ecc <spi_setup+0x114>
        case SPI_SPEED_10MHz:
            prescale = SPI_BAUDRATEPRESCALER_8;
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	65bb      	str	r3, [r7, #88]	; 0x58
            break;
 8002ec0:	e004      	b.n	8002ecc <spi_setup+0x114>
        case SPI_SPEED_20MHz:
            prescale = SPI_BAUDRATEPRESCALER_4;
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	65bb      	str	r3, [r7, #88]	; 0x58
            break;
 8002ec6:	e001      	b.n	8002ecc <spi_setup+0x114>
        default:
            return STATUS_PARAMETER_ERROR;
 8002ec8:	2306      	movs	r3, #6
 8002eca:	e046      	b.n	8002f5a <spi_setup+0x1a2>
    }
    SPI_InitTypeDef init_conf = {
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	2234      	movs	r2, #52	; 0x34
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f013 fee1 	bl	8016c9c <memset>
 8002eda:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ee4:	617b      	str	r3, [r7, #20]
        .BaudRatePrescaler = prescale,
        .CLKPhase = dev->cpha ? SPI_PHASE_2EDGE : SPI_PHASE_1EDGE,
        .CLKPolarity = dev->cpol ? SPI_POLARITY_HIGH : SPI_POLARITY_LOW,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <spi_setup+0x13a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e000      	b.n	8002ef4 <spi_setup+0x13c>
 8002ef2:	2300      	movs	r3, #0
    SPI_InitTypeDef init_conf = {
 8002ef4:	61bb      	str	r3, [r7, #24]
        .CLKPhase = dev->cpha ? SPI_PHASE_2EDGE : SPI_PHASE_1EDGE,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	795b      	ldrb	r3, [r3, #5]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <spi_setup+0x14a>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <spi_setup+0x14c>
 8002f02:	2300      	movs	r3, #0
    SPI_InitTypeDef init_conf = {
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
        .TIMode = SPI_TIMODE_DISABLE,
        .CRCCalculation = SPI_CRCCALCULATION_DISABLE,
        .CRCLength = SPI_CRC_LENGTH_DATASIZE,
        .NSSPMode = SPI_NSS_PULSE_DISABLE,
    };
    SPI_HandleTypeDef* handle = spi_handles[dev->periph];
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	79db      	ldrb	r3, [r3, #7]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <spi_setup+0x1d0>)
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	657b      	str	r3, [r7, #84]	; 0x54
    (*handle).Init = init_conf;
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	1d1c      	adds	r4, r3, #4
 8002f22:	f107 050c 	add.w	r5, r7, #12
 8002f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	6023      	str	r3, [r4, #0]
    (*handle).Instance = base;
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f3a:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Init(handle) != HAL_OK) {
 8002f3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002f3e:	f010 fe65 	bl	8013c0c <HAL_SPI_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <spi_setup+0x194>
        return STATUS_ERROR;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e006      	b.n	8002f5a <spi_setup+0x1a2>
    }

    spi_state[dev->periph] = 1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	79db      	ldrb	r3, [r3, #7]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <spi_setup+0x1ac>)
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]
    return STATUS_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3760      	adds	r7, #96	; 0x60
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20005698 	.word	0x20005698
 8002f68:	40013000 	.word	0x40013000
 8002f6c:	20000360 	.word	0x20000360
 8002f70:	20000424 	.word	0x20000424
 8002f74:	01312d00 	.word	0x01312d00
 8002f78:	00989680 	.word	0x00989680
 8002f7c:	000f4240 	.word	0x000f4240
 8002f80:	000186a0 	.word	0x000186a0
 8002f84:	0007a120 	.word	0x0007a120
 8002f88:	20000420 	.word	0x20000420

08002f8c <spi_set_cs>:

Status spi_set_cs(SpiDevice* dev, GpioValue val) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
    return gpio_write(cs_pin[dev->periph], val);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	79db      	ldrb	r3, [r3, #7]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <spi_set_cs+0x2c>)
 8002fa0:	5c9b      	ldrb	r3, [r3, r2]
 8002fa2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fab7 	bl	800151c <gpio_write>
 8002fae:	4603      	mov	r3, r0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000424 	.word	0x20000424

08002fbc <spi_exchange_nosetup>:

Status spi_exchange_nosetup(SpiDevice* dev, uint8_t* tx_buf, uint8_t* rx_buf,
                            uint16_t len) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	807b      	strh	r3, [r7, #2]
    if (HAL_SPI_TransmitReceive(spi_handles[dev->periph], tx_buf, rx_buf, len,
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	79db      	ldrb	r3, [r3, #7]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <spi_exchange_nosetup+0x3c>)
 8002fd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	2264      	movs	r2, #100	; 0x64
 8002fda:	9200      	str	r2, [sp, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	f010 fee8 	bl	8013db4 <HAL_SPI_TransmitReceive>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <spi_exchange_nosetup+0x32>
                                100) != HAL_OK) {
        return STATUS_HARDWARE_ERROR;
 8002fea:	2304      	movs	r3, #4
 8002fec:	e000      	b.n	8002ff0 <spi_exchange_nosetup+0x34>
    }
    return STATUS_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000420 	.word	0x20000420

08002ffc <LL_AHB2_GRP1_EnableClock>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800300a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4313      	orrs	r3, r2
 8003012:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003020:	68fb      	ldr	r3, [r7, #12]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800303a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003050:	68fb      	ldr	r3, [r7, #12]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003068:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800306a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4313      	orrs	r3, r2
 8003072:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	43db      	mvns	r3, r3
 800309e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a2:	4013      	ands	r3, r2
 80030a4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030d4:	68fb      	ldr	r3, [r7, #12]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f6:	4013      	ands	r3, r2
 80030f8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4313      	orrs	r3, r2
 800311a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003128:	68fb      	ldr	r3, [r7, #12]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 030c 	add.w	r3, r7, #12
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_DAC_MspInit+0xa8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d13e      	bne.n	80031e0 <HAL_DAC_MspInit+0xa0>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003162:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003166:	f7ff ff61 	bl	800302c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	2001      	movs	r0, #1
 800316c:	f7ff ff46 	bl	8002ffc <LL_AHB2_GRP1_EnableClock>
    /**DAC GPIO Configuration
    PA10     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003176:	2303      	movs	r3, #3
 8003178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	4619      	mov	r1, r3
 8003184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003188:	f00d fdc4 	bl	8010d14 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_OUT1 Init */
    hdma_dac_out1.Instance = DMA1_Channel1;
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_DAC_MspInit+0xac>)
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_DAC_MspInit+0xb0>)
 8003190:	601a      	str	r2, [r3, #0]
    hdma_dac_out1.Init.Request = DMA_REQUEST_DAC_OUT1;
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_DAC_MspInit+0xac>)
 8003194:	2206      	movs	r2, #6
 8003196:	605a      	str	r2, [r3, #4]
    hdma_dac_out1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_DAC_MspInit+0xac>)
 800319a:	2210      	movs	r2, #16
 800319c:	609a      	str	r2, [r3, #8]
    hdma_dac_out1.Init.PeriphInc = DMA_PINC_DISABLE;
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
    hdma_dac_out1.Init.MemInc = DMA_MINC_ENABLE;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	611a      	str	r2, [r3, #16]
    hdma_dac_out1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
    hdma_dac_out1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
    hdma_dac_out1.Init.Mode = DMA_CIRCULAR;
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031b8:	2220      	movs	r2, #32
 80031ba:	61da      	str	r2, [r3, #28]
    hdma_dac_out1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80031c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_out1) != HAL_OK)
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031c6:	f00d fa1b 	bl	8010600 <HAL_DMA_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_DAC_MspInit+0x94>
    {
      Error_Handler();
 80031d0:	f7ff fc04 	bl	80029dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_out1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_DAC_MspInit+0xac>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80031e0:	bf00      	nop
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40007400 	.word	0x40007400
 80031ec:	200051a4 	.word	0x200051a4
 80031f0:	40020008 	.word	0x40020008

080031f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b096      	sub	sp, #88	; 0x58
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	2238      	movs	r2, #56	; 0x38
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f013 fd41 	bl	8016c9c <memset>
  if(hi2c->Instance==I2C1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <HAL_I2C_MspInit+0xdc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d125      	bne.n	8003270 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003224:	2340      	movs	r3, #64	; 0x40
 8003226:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003228:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <HAL_I2C_MspInit+0xe0>)
 800322a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	4618      	mov	r0, r3
 8003232:	f010 fbd1 	bl	80139d8 <HAL_RCCEx_PeriphCLKConfig>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800323c:	f7ff fbce 	bl	80029dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003240:	2002      	movs	r0, #2
 8003242:	f7ff fedb 	bl	8002ffc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003246:	23c0      	movs	r3, #192	; 0xc0
 8003248:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800324a:	2312      	movs	r3, #18
 800324c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003256:	2304      	movs	r3, #4
 8003258:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800325e:	4619      	mov	r1, r3
 8003260:	481d      	ldr	r0, [pc, #116]	; (80032d8 <HAL_I2C_MspInit+0xe4>)
 8003262:	f00d fd57 	bl	8010d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003266:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800326a:	f7ff fedf 	bl	800302c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800326e:	e02b      	b.n	80032c8 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_I2C_MspInit+0xe8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d126      	bne.n	80032c8 <HAL_I2C_MspInit+0xd4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_I2C_MspInit+0xec>)
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003282:	f107 030c 	add.w	r3, r7, #12
 8003286:	4618      	mov	r0, r3
 8003288:	f010 fba6 	bl	80139d8 <HAL_RCCEx_PeriphCLKConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_MspInit+0xa2>
      Error_Handler();
 8003292:	f7ff fba3 	bl	80029dc <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	2001      	movs	r0, #1
 8003298:	f7ff feb0 	bl	8002ffc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800329c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032a2:	2312      	movs	r3, #18
 80032a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	2300      	movs	r3, #0
 80032ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80032ae:	2304      	movs	r3, #4
 80032b0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032b6:	4619      	mov	r1, r3
 80032b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032bc:	f00d fd2a 	bl	8010d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80032c4:	f7ff feb2 	bl	800302c <LL_APB1_GRP1_EnableClock>
}
 80032c8:	bf00      	nop
 80032ca:	3758      	adds	r7, #88	; 0x58
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40005400 	.word	0x40005400
 80032d4:	00030200 	.word	0x00030200
 80032d8:	48000400 	.word	0x48000400
 80032dc:	40005800 	.word	0x40005800
 80032e0:	000c0800 	.word	0x000c0800

080032e4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b090      	sub	sp, #64	; 0x40
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	2238      	movs	r2, #56	; 0x38
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f013 fcd1 	bl	8016c9c <memset>
  if(hlptim->Instance==LPTIM1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_LPTIM_MspInit+0x90>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d11b      	bne.n	800333c <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003308:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_HSI;
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_LPTIM_MspInit+0x94>)
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800330e:	f107 0308 	add.w	r3, r7, #8
 8003312:	4618      	mov	r0, r3
 8003314:	f010 fb60 	bl	80139d8 <HAL_RCCEx_PeriphCLKConfig>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800331e:	f7ff fb5d 	bl	80029dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003322:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003326:	f7ff fe81 	bl	800302c <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2105      	movs	r1, #5
 800332e:	2027      	movs	r0, #39	; 0x27
 8003330:	f00c fecf 	bl	80100d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003334:	2027      	movs	r0, #39	; 0x27
 8003336:	f00c fee6 	bl	8010106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 800333a:	e017      	b.n	800336c <HAL_LPTIM_MspInit+0x88>
  else if(hlptim->Instance==LPTIM2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_LPTIM_MspInit+0x98>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d112      	bne.n	800336c <HAL_LPTIM_MspInit+0x88>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8003346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 800334c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	4618      	mov	r0, r3
 8003358:	f010 fb3e 	bl	80139d8 <HAL_RCCEx_PeriphCLKConfig>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_LPTIM_MspInit+0x82>
      Error_Handler();
 8003362:	f7ff fb3b 	bl	80029dc <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003366:	2020      	movs	r0, #32
 8003368:	f7ff fe78 	bl	800305c <LL_APB1_GRP2_EnableClock>
}
 800336c:	bf00      	nop
 800336e:	3740      	adds	r7, #64	; 0x40
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40007c00 	.word	0x40007c00
 8003378:	000c0008 	.word	0x000c0008
 800337c:	40009400 	.word	0x40009400

08003380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_SPI_MspInit+0x58>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d116      	bne.n	80033d0 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033a6:	f7ff fe83 	bl	80030b0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	2002      	movs	r0, #2
 80033ac:	f7ff fe26 	bl	8002ffc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80033b0:	2338      	movs	r3, #56	; 0x38
 80033b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033c0:	2305      	movs	r3, #5
 80033c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c4:	f107 030c 	add.w	r3, r7, #12
 80033c8:	4619      	mov	r1, r3
 80033ca:	4804      	ldr	r0, [pc, #16]	; (80033dc <HAL_SPI_MspInit+0x5c>)
 80033cc:	f00d fca2 	bl	8010d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033d0:	bf00      	nop
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40013000 	.word	0x40013000
 80033dc:	48000400 	.word	0x48000400

080033e0 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80033e8:	2001      	movs	r0, #1
 80033ea:	f7ff fe8b 	bl	8003104 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	2032      	movs	r0, #50	; 0x32
 80033f4:	f00c fe6d 	bl	80100d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80033f8:	2032      	movs	r0, #50	; 0x32
 80033fa:	f00c fe84 	bl	8010106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_TIM_Base_MspInit+0x34>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d104      	bne.n	8003424 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800341a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800341e:	f7ff fe47 	bl	80030b0 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003422:	e007      	b.n	8003434 <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d102      	bne.n	8003434 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800342e:	2001      	movs	r0, #1
 8003430:	f7ff fdfc 	bl	800302c <LL_APB1_GRP1_EnableClock>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40012c00 	.word	0x40012c00

08003440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b096      	sub	sp, #88	; 0x58
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	2238      	movs	r2, #56	; 0x38
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f013 fc1b 	bl	8016c9c <memset>
  if(huart->Instance==USART1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a57      	ldr	r2, [pc, #348]	; (80035c8 <HAL_UART_MspInit+0x188>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d17b      	bne.n	8003568 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003470:	2301      	movs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003474:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003478:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	4618      	mov	r0, r3
 8003480:	f010 faaa 	bl	80139d8 <HAL_RCCEx_PeriphCLKConfig>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800348a:	f7ff faa7 	bl	80029dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800348e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003492:	f7ff fe0d 	bl	80030b0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	2001      	movs	r0, #1
 8003498:	f7ff fdb0 	bl	8002ffc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800349c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a2:	2312      	movs	r3, #18
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a6:	2301      	movs	r3, #1
 80034a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ae:	2307      	movs	r3, #7
 80034b0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034b6:	4619      	mov	r1, r3
 80034b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034bc:	f00d fc2a 	bl	8010d14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel1;
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034c2:	4a43      	ldr	r2, [pc, #268]	; (80035d0 <HAL_UART_MspInit+0x190>)
 80034c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034c8:	2212      	movs	r2, #18
 80034ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034ce:	2210      	movs	r2, #16
 80034d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d2:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034d8:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034ea:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034f6:	4835      	ldr	r0, [pc, #212]	; (80035cc <HAL_UART_MspInit+0x18c>)
 80034f8:	f00d f882 	bl	8010600 <HAL_DMA_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003502:	f7ff fa6b 	bl	80029dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <HAL_UART_MspInit+0x18c>)
 800350a:	67da      	str	r2, [r3, #124]	; 0x7c
 800350c:	4a2f      	ldr	r2, [pc, #188]	; (80035cc <HAL_UART_MspInit+0x18c>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8003512:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <HAL_UART_MspInit+0x194>)
 8003514:	4a30      	ldr	r2, [pc, #192]	; (80035d8 <HAL_UART_MspInit+0x198>)
 8003516:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003518:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <HAL_UART_MspInit+0x194>)
 800351a:	2211      	movs	r2, #17
 800351c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_UART_MspInit+0x194>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_UART_MspInit+0x194>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800352a:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_UART_MspInit+0x194>)
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_UART_MspInit+0x194>)
 8003532:	2200      	movs	r2, #0
 8003534:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_UART_MspInit+0x194>)
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_UART_MspInit+0x194>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_UART_MspInit+0x194>)
 8003544:	2200      	movs	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003548:	4822      	ldr	r0, [pc, #136]	; (80035d4 <HAL_UART_MspInit+0x194>)
 800354a:	f00d f859 	bl	8010600 <HAL_DMA_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8003554:	f7ff fa42 	bl	80029dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_UART_MspInit+0x194>)
 800355c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_UART_MspInit+0x194>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003566:	e02b      	b.n	80035c0 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_UART_MspInit+0x19c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d126      	bne.n	80035c0 <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003572:	2302      	movs	r3, #2
 8003574:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003576:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800357a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	4618      	mov	r0, r3
 8003582:	f010 fa29 	bl	80139d8 <HAL_RCCEx_PeriphCLKConfig>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_MspInit+0x150>
      Error_Handler();
 800358c:	f7ff fa26 	bl	80029dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003590:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003594:	f7ff fd4a 	bl	800302c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003598:	2001      	movs	r0, #1
 800359a:	f7ff fd2f 	bl	8002ffc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800359e:	230c      	movs	r3, #12
 80035a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035ae:	2307      	movs	r3, #7
 80035b0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035b6:	4619      	mov	r1, r3
 80035b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035bc:	f00d fbaa 	bl	8010d14 <HAL_GPIO_Init>
}
 80035c0:	bf00      	nop
 80035c2:	3758      	adds	r7, #88	; 0x58
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40013800 	.word	0x40013800
 80035cc:	20005554 	.word	0x20005554
 80035d0:	40020408 	.word	0x40020408
 80035d4:	200055b4 	.word	0x200055b4
 80035d8:	4002041c 	.word	0x4002041c
 80035dc:	40004400 	.word	0x40004400

080035e0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_UART_MspDeInit+0x64>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d115      	bne.n	800361e <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80035f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035f6:	f7ff fd73 	bl	80030e0 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80035fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003602:	f00d fce7 	bl	8010fd4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360a:	4618      	mov	r0, r3
 800360c:	f00d f8a0 	bl	8010750 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003616:	4618      	mov	r0, r3
 8003618:	f00d f89a 	bl	8010750 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800361c:	e00d      	b.n	800363a <HAL_UART_MspDeInit+0x5a>
  else if(huart->Instance==USART2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_UART_MspDeInit+0x68>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003628:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800362c:	f7ff fd2e 	bl	800308c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003630:	210c      	movs	r1, #12
 8003632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003636:	f00d fccd 	bl	8010fd4 <HAL_GPIO_DeInit>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40013800 	.word	0x40013800
 8003648:	40004400 	.word	0x40004400

0800364c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003650:	f3bf 8f4f 	dsb	sy
}
 8003654:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <__NVIC_SystemReset+0x24>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800365e:	4904      	ldr	r1, [pc, #16]	; (8003670 <__NVIC_SystemReset+0x24>)
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__NVIC_SystemReset+0x28>)
 8003662:	4313      	orrs	r3, r2
 8003664:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003666:	f3bf 8f4f 	dsb	sy
}
 800366a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <__NVIC_SystemReset+0x20>
 8003670:	e000ed00 	.word	0xe000ed00
 8003674:	05fa0004 	.word	0x05fa0004

08003678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 8003688:	f7ff ffe0 	bl	800364c <__NVIC_SystemReset>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  NVIC_SystemReset();
 8003690:	f7ff ffdc 	bl	800364c <__NVIC_SystemReset>

08003694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  NVIC_SystemReset();
 8003698:	f7ff ffd8 	bl	800364c <__NVIC_SystemReset>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  NVIC_SystemReset();
 80036a0:	f7ff ffd4 	bl	800364c <__NVIC_SystemReset>

080036a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f00c fbea 	bl	800fea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_out1);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <DMA1_Channel1_IRQHandler+0x10>)
 80036da:	f00d f9ab 	bl	8010a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200051a4 	.word	0x200051a4

080036e8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80036ec:	4803      	ldr	r0, [pc, #12]	; (80036fc <LPTIM1_IRQHandler+0x14>)
 80036ee:	f00e fd15 	bl	801211c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  sensor_irq();
 80036f2:	f7fe fb3d 	bl	8001d70 <sensor_irq>
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200052ac 	.word	0x200052ac

08003700 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <SUBGHZ_Radio_IRQHandler+0x10>)
 8003706:	f011 fab9 	bl	8014c7c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20005388 	.word	0x20005388

08003714 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 Channel 1 Interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <DMA2_Channel1_IRQHandler+0x10>)
 800371a:	f00d f98b 	bl	8010a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20005554 	.word	0x20005554

08003728 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 Channel 2 Interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <DMA2_Channel2_IRQHandler+0x10>)
 800372e:	f00d f981 	bl	8010a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200055b4 	.word	0x200055b4

0800373c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return 1;
 8003740:	2301      	movs	r3, #1
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <_kill>:

int _kill(int pid, int sig)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003754:	f013 fa52 	bl	8016bfc <__errno>
 8003758:	4603      	mov	r3, r0
 800375a:	2216      	movs	r2, #22
 800375c:	601a      	str	r2, [r3, #0]
  return -1;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <_exit>:

void _exit (int status)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003772:	f04f 31ff 	mov.w	r1, #4294967295
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ffe7 	bl	800374a <_kill>
  while (1) {}    /* Make sure we hang here */
 800377c:	e7fe      	b.n	800377c <_exit+0x12>

0800377e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e00a      	b.n	80037a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003790:	f3af 8000 	nop.w
 8003794:	4601      	mov	r1, r0
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	60ba      	str	r2, [r7, #8]
 800379c:	b2ca      	uxtb	r2, r1
 800379e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3301      	adds	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	dbf0      	blt.n	8003790 <_read+0x12>
  }

  return len;
 80037ae:	687b      	ldr	r3, [r7, #4]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e009      	b.n	80037de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	60ba      	str	r2, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f8cc 	bl	8002970 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3301      	adds	r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dbf1      	blt.n	80037ca <_write+0x12>
  }
  return len;
 80037e6:	687b      	ldr	r3, [r7, #4]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_close>:

int _close(int file)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003816:	605a      	str	r2, [r3, #4]
  return 0;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <_isatty>:

int _isatty(int file)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800382c:	2301      	movs	r3, #1
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003858:	4a14      	ldr	r2, [pc, #80]	; (80038ac <_sbrk+0x5c>)
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <_sbrk+0x60>)
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <_sbrk+0x64>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <_sbrk+0x64>)
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <_sbrk+0x68>)
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <_sbrk+0x64>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	429a      	cmp	r2, r3
 800387e:	d207      	bcs.n	8003890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003880:	f013 f9bc 	bl	8016bfc <__errno>
 8003884:	4603      	mov	r3, r0
 8003886:	220c      	movs	r2, #12
 8003888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	e009      	b.n	80038a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <_sbrk+0x64>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <_sbrk+0x64>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <_sbrk+0x64>)
 80038a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20010000 	.word	0x20010000
 80038b0:	00000400 	.word	0x00000400
 80038b4:	2000569c 	.word	0x2000569c
 80038b8:	20006ed0 	.word	0x20006ed0

080038bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038c8:	480d      	ldr	r0, [pc, #52]	; (8003900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80038cc:	f7ff fff6 	bl	80038bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <LoopForever+0x6>)
  ldr r1, =_edata
 80038d2:	490d      	ldr	r1, [pc, #52]	; (8003908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <LoopForever+0xe>)
  movs r3, #0
 80038d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d8:	e002      	b.n	80038e0 <LoopCopyDataInit>

080038da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038de:	3304      	adds	r3, #4

080038e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e4:	d3f9      	bcc.n	80038da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038e8:	4c0a      	ldr	r4, [pc, #40]	; (8003914 <LoopForever+0x16>)
  movs r3, #0
 80038ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038ec:	e001      	b.n	80038f2 <LoopFillZerobss>

080038ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f0:	3204      	adds	r2, #4

080038f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f4:	d3fb      	bcc.n	80038ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038f6:	f013 f987 	bl	8016c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038fa:	f7fe fce3 	bl	80022c4 <main>

080038fe <LoopForever>:

LoopForever:
    b LoopForever
 80038fe:	e7fe      	b.n	80038fe <LoopForever>
  ldr   r0, =_estack
 8003900:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003908:	2000082c 	.word	0x2000082c
  ldr r2, =_sidata
 800390c:	0801aee4 	.word	0x0801aee4
  ldr r2, =_sbss
 8003910:	20000830 	.word	0x20000830
  ldr r4, =_ebss
 8003914:	20006ecc 	.word	0x20006ecc

08003918 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003918:	e7fe      	b.n	8003918 <ADC_IRQHandler>

0800391a <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3301      	adds	r3, #1
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800392a:	89fb      	ldrh	r3, [r7, #14]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	b21a      	sxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b21b      	sxth	r3, r3
 8003936:	4313      	orrs	r3, r2
 8003938:	b21b      	sxth	r3, r3
 800393a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800393c:	89fb      	ldrh	r3, [r7, #14]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3303      	adds	r3, #3
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	3202      	adds	r2, #2
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	3201      	adds	r2, #1
 800396e:	7812      	ldrb	r2, [r2, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800398c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003990:	b09d      	sub	sp, #116	; 0x74
 8003992:	af00      	add	r7, sp, #0
 8003994:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8003996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003998:	3307      	adds	r3, #7
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	469a      	mov	sl, r3
 80039a2:	4693      	mov	fp, r2
 80039a4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 80039a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80039ac:	f04f 0000 	mov.w	r0, #0
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	0219      	lsls	r1, r3, #8
 80039b6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80039ba:	0210      	lsls	r0, r2, #8
 80039bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039be:	3306      	adds	r3, #6
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2200      	movs	r2, #0
 80039c6:	461c      	mov	r4, r3
 80039c8:	4615      	mov	r5, r2
 80039ca:	ea40 0804 	orr.w	r8, r0, r4
 80039ce:	ea41 0905 	orr.w	r9, r1, r5
 80039d2:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 80039d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	0219      	lsls	r1, r3, #8
 80039e4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80039e8:	0210      	lsls	r0, r2, #8
 80039ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ec:	3305      	adds	r3, #5
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2200      	movs	r2, #0
 80039f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80039f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039f8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80039fc:	461a      	mov	r2, r3
 80039fe:	4302      	orrs	r2, r0
 8003a00:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a02:	4623      	mov	r3, r4
 8003a04:	430b      	orrs	r3, r1
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a08:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003a0c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8003a10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003a14:	f04f 0000 	mov.w	r0, #0
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	0219      	lsls	r1, r3, #8
 8003a1e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a22:	0210      	lsls	r0, r2, #8
 8003a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a26:	3304      	adds	r3, #4
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a30:	657a      	str	r2, [r7, #84]	; 0x54
 8003a32:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003a36:	461a      	mov	r2, r3
 8003a38:	4302      	orrs	r2, r0
 8003a3a:	623a      	str	r2, [r7, #32]
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003a46:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8003a4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	0219      	lsls	r1, r3, #8
 8003a58:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a5c:	0210      	lsls	r0, r2, #8
 8003a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a60:	3303      	adds	r3, #3
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a6c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003a70:	461a      	mov	r2, r3
 8003a72:	4302      	orrs	r2, r0
 8003a74:	61ba      	str	r2, [r7, #24]
 8003a76:	4623      	mov	r3, r4
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003a80:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8003a84:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003a88:	f04f 0000 	mov.w	r0, #0
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	0219      	lsls	r1, r3, #8
 8003a92:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a96:	0210      	lsls	r0, r2, #8
 8003a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa4:	647a      	str	r2, [r7, #68]	; 0x44
 8003aa6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4302      	orrs	r2, r0
 8003aae:	613a      	str	r2, [r7, #16]
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003aba:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8003abe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	020b      	lsls	r3, r1, #8
 8003acc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ad0:	0202      	lsls	r2, r0, #8
 8003ad2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003ad4:	3101      	adds	r1, #1
 8003ad6:	7809      	ldrb	r1, [r1, #0]
 8003ad8:	b2c9      	uxtb	r1, r1
 8003ada:	2000      	movs	r0, #0
 8003adc:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ade:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003ae0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	4314      	orrs	r4, r2
 8003ae8:	60bc      	str	r4, [r7, #8]
 8003aea:	4319      	orrs	r1, r3
 8003aec:	60f9      	str	r1, [r7, #12]
 8003aee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003af2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8003af6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	020b      	lsls	r3, r1, #8
 8003b04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b08:	0202      	lsls	r2, r0, #8
 8003b0a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003b0c:	7809      	ldrb	r1, [r1, #0]
 8003b0e:	b2c9      	uxtb	r1, r1
 8003b10:	2000      	movs	r0, #0
 8003b12:	6339      	str	r1, [r7, #48]	; 0x30
 8003b14:	6378      	str	r0, [r7, #52]	; 0x34
 8003b16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4314      	orrs	r4, r2
 8003b1e:	603c      	str	r4, [r7, #0]
 8003b20:	4319      	orrs	r1, r3
 8003b22:	6079      	str	r1, [r7, #4]
 8003b24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b28:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8003b2c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	3774      	adds	r7, #116	; 0x74
 8003b36:	46bd      	mov	sp, r7
 8003b38:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b3c:	4770      	bx	lr

08003b3e <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	887a      	ldrh	r2, [r7, #2]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	887a      	ldrh	r2, [r7, #2]
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	60fa      	str	r2, [r7, #12]
 8003bda:	783a      	ldrb	r2, [r7, #0]
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	0a02      	lsrs	r2, r0, #8
 8003bec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003bf0:	0a0b      	lsrs	r3, r1, #8
 8003bf2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	60fa      	str	r2, [r7, #12]
 8003bfc:	783a      	ldrb	r2, [r7, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	0a02      	lsrs	r2, r0, #8
 8003c0e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c12:	0a0b      	lsrs	r3, r1, #8
 8003c14:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	60fa      	str	r2, [r7, #12]
 8003c1e:	783a      	ldrb	r2, [r7, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	0a02      	lsrs	r2, r0, #8
 8003c30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c34:	0a0b      	lsrs	r3, r1, #8
 8003c36:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	783a      	ldrb	r2, [r7, #0]
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	0a02      	lsrs	r2, r0, #8
 8003c52:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c56:	0a0b      	lsrs	r3, r1, #8
 8003c58:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	60fa      	str	r2, [r7, #12]
 8003c62:	783a      	ldrb	r2, [r7, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	0a02      	lsrs	r2, r0, #8
 8003c74:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c78:	0a0b      	lsrs	r3, r1, #8
 8003c7a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	60fa      	str	r2, [r7, #12]
 8003c84:	783a      	ldrb	r2, [r7, #0]
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	0a02      	lsrs	r2, r0, #8
 8003c96:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c9a:	0a0b      	lsrs	r3, r1, #8
 8003c9c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	60fa      	str	r2, [r7, #12]
 8003ca6:	783a      	ldrb	r2, [r7, #0]
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	0a02      	lsrs	r2, r0, #8
 8003cb8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003cbc:	0a0b      	lsrs	r3, r1, #8
 8003cbe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	60fa      	str	r2, [r7, #12]
 8003cc8:	783a      	ldrb	r2, [r7, #0]
 8003cca:	701a      	strb	r2, [r3, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <dbc_1st+0x14>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <dbc_1st+0x16>
#endif
	return 0;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <dbc_2nd+0x14>
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <dbc_2nd+0x16>
#endif
	return 0;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr

08003d16 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	617a      	str	r2, [r7, #20]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8003d2e:	8a7b      	ldrh	r3, [r7, #18]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ffcf 	bl	8003cd6 <dbc_1st>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d015      	beq.n	8003d6a <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	617a      	str	r2, [r7, #20]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 8003d48:	7c7b      	ldrb	r3, [r7, #17]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ffd3 	bl	8003cf6 <dbc_2nd>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <tchar2uni+0x46>
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	e01d      	b.n	8003d98 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 8003d5c:	8a7b      	ldrh	r3, [r7, #18]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	7c7b      	ldrb	r3, [r7, #17]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 8003d6a:	8a7b      	ldrh	r3, [r7, #18]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8003d70:	8a7b      	ldrh	r3, [r7, #18]
 8003d72:	f240 11b5 	movw	r1, #437	; 0x1b5
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 fea2 	bl	8008ac0 <ff_oem2uni>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8003d80:	8a7b      	ldrh	r3, [r7, #18]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <tchar2uni+0x76>
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	e005      	b.n	8003d98 <tchar2uni+0x82>
	}
	uc = wc;
 8003d8c:	8a7b      	ldrh	r3, [r7, #18]
 8003d8e:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	601a      	str	r2, [r3, #0]
	return uc;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <put_utf>:
static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 8003dac:	f240 11b5 	movw	r1, #437	; 0x1b5
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f004 fe4d 	bl	8008a50 <ff_uni2oem>
 8003db6:	4603      	mov	r3, r0
 8003db8:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 8003dba:	8afb      	ldrh	r3, [r7, #22]
 8003dbc:	2bff      	cmp	r3, #255	; 0xff
 8003dbe:	d914      	bls.n	8003dea <put_utf+0x4a>
		if (szb < 2) return 0;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d801      	bhi.n	8003dca <put_utf+0x2a>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e01e      	b.n	8003e08 <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8003dca:	8afb      	ldrh	r3, [r7, #22]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	b299      	uxth	r1, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	60ba      	str	r2, [r7, #8]
 8003dd6:	b2ca      	uxtb	r2, r1
 8003dd8:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	60ba      	str	r2, [r7, #8]
 8003de0:	8afa      	ldrh	r2, [r7, #22]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]
		return 2;
 8003de6:	2302      	movs	r3, #2
 8003de8:	e00e      	b.n	8003e08 <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8003dea:	8afb      	ldrh	r3, [r7, #22]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <put_utf+0x56>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <put_utf+0x5a>
 8003df6:	2300      	movs	r3, #0
 8003df8:	e006      	b.n	8003e08 <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	60ba      	str	r2, [r7, #8]
 8003e00:	8afa      	ldrh	r2, [r7, #22]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
	return 1;
 8003e06:	2301      	movs	r3, #1
#endif
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	791b      	ldrb	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02c      	beq.n	8003e7e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7858      	ldrb	r0, [r3, #1]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e32:	2301      	movs	r3, #1
 8003e34:	f005 fabe 	bl	80093b4 <disk_write>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11d      	bne.n	8003e7a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	1ad2      	subs	r2, r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d213      	bcs.n	8003e7e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d10f      	bne.n	8003e7e <sync_window+0x6e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7858      	ldrb	r0, [r3, #1]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	441a      	add	r2, r3
 8003e72:	2301      	movs	r3, #1
 8003e74:	f005 fa9e 	bl	80093b4 <disk_write>
 8003e78:	e001      	b.n	8003e7e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d01b      	beq.n	8003ed8 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ffb5 	bl	8003e10 <sync_window>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d113      	bne.n	8003ed8 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	7858      	ldrb	r0, [r3, #1]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8003eba:	2301      	movs	r3, #1
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	f005 fa11 	bl	80092e4 <disk_read>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
	return res;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff8f 	bl	8003e10 <sync_window>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d158      	bne.n	8003fae <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d148      	bne.n	8003f96 <sync_fs+0xb2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	795b      	ldrb	r3, [r3, #5]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d144      	bne.n	8003f96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	334c      	adds	r3, #76	; 0x4c
 8003f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f012 fec0 	bl	8016c9c <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	334c      	adds	r3, #76	; 0x4c
 8003f20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003f24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fe08 	bl	8003b3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	334c      	adds	r3, #76	; 0x4c
 8003f32:	4921      	ldr	r1, [pc, #132]	; (8003fb8 <sync_fs+0xd4>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fe1c 	bl	8003b72 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	334c      	adds	r3, #76	; 0x4c
 8003f3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003f42:	491e      	ldr	r1, [pc, #120]	; (8003fbc <sync_fs+0xd8>)
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fe14 	bl	8003b72 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	334c      	adds	r3, #76	; 0x4c
 8003f4e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7ff fe0a 	bl	8003b72 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	334c      	adds	r3, #76	; 0x4c
 8003f62:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff fe00 	bl	8003b72 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	649a      	str	r2, [r3, #72]	; 0x48
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7858      	ldrb	r0, [r3, #1]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f005 fa12 	bl	80093b4 <disk_write>
			fs->fsi_flag = 0;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f005 fa86 	bl	80094b0 <disk_ioctl>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <sync_fs+0xca>
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	41615252 	.word	0x41615252
 8003fbc:	61417272 	.word	0x61417272

08003fc0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3b02      	subs	r3, #2
 8003fce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	3b02      	subs	r3, #2
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d301      	bcc.n	8003fe0 <clst2sect+0x20>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e008      	b.n	8003ff2 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	895b      	ldrh	r3, [r3, #10]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	6809      	ldr	r1, [r1, #0]
 800400a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800400c:	6839      	ldr	r1, [r7, #0]
 800400e:	2901      	cmp	r1, #1
 8004010:	d904      	bls.n	800401c <get_fat+0x20>
 8004012:	69b9      	ldr	r1, [r7, #24]
 8004014:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	4288      	cmp	r0, r1
 800401a:	d302      	bcc.n	8004022 <get_fat+0x26>
		val = 1;	/* Internal error */
 800401c:	2301      	movs	r3, #1
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	e10d      	b.n	800423e <get_fat+0x242>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004022:	f04f 31ff 	mov.w	r1, #4294967295
 8004026:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	7809      	ldrb	r1, [r1, #0]
 800402c:	3901      	subs	r1, #1
 800402e:	2903      	cmp	r1, #3
 8004030:	f200 80f9 	bhi.w	8004226 <get_fat+0x22a>
 8004034:	a001      	add	r0, pc, #4	; (adr r0, 800403c <get_fat+0x40>)
 8004036:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800403a:	bf00      	nop
 800403c:	0800404d 	.word	0x0800404d
 8004040:	080040d5 	.word	0x080040d5
 8004044:	0800410b 	.word	0x0800410b
 8004048:	08004145 	.word	0x08004145
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	0a5b      	lsrs	r3, r3, #9
 8004062:	4413      	add	r3, r2
 8004064:	4619      	mov	r1, r3
 8004066:	69b8      	ldr	r0, [r7, #24]
 8004068:	f7ff ff0e 	bl	8003e88 <move_window>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 80dc 	bne.w	800422c <get_fat+0x230>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	60fa      	str	r2, [r7, #12]
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4413      	add	r3, r2
 8004082:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004086:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	0a5b      	lsrs	r3, r3, #9
 8004090:	4413      	add	r3, r2
 8004092:	4619      	mov	r1, r3
 8004094:	69b8      	ldr	r0, [r7, #24]
 8004096:	f7ff fef7 	bl	8003e88 <move_window>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 80c7 	bne.w	8004230 <get_fat+0x234>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4413      	add	r3, r2
 80040ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <get_fat+0xce>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	e002      	b.n	80040d0 <get_fat+0xd4>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d0:	61fb      	str	r3, [r7, #28]
			break;
 80040d2:	e0b4      	b.n	800423e <get_fat+0x242>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	4413      	add	r3, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	69b8      	ldr	r0, [r7, #24]
 80040e2:	f7ff fed1 	bl	8003e88 <move_window>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 80a3 	bne.w	8004234 <get_fat+0x238>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80040fc:	4413      	add	r3, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fc0b 	bl	800391a <ld_word>
 8004104:	4603      	mov	r3, r0
 8004106:	61fb      	str	r3, [r7, #28]
			break;
 8004108:	e099      	b.n	800423e <get_fat+0x242>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	09db      	lsrs	r3, r3, #7
 8004112:	4413      	add	r3, r2
 8004114:	4619      	mov	r1, r3
 8004116:	69b8      	ldr	r0, [r7, #24]
 8004118:	f7ff feb6 	bl	8003e88 <move_window>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 808a 	bne.w	8004238 <get_fat+0x23c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004132:	4413      	add	r3, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fc07 	bl	8003948 <ld_dword>
 800413a:	4603      	mov	r3, r0
 800413c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004140:	61fb      	str	r3, [r7, #28]
			break;
 8004142:	e07c      	b.n	800423e <get_fat+0x242>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800414a:	4301      	orrs	r1, r0
 800414c:	d003      	beq.n	8004156 <get_fat+0x15a>
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	6889      	ldr	r1, [r1, #8]
 8004152:	2900      	cmp	r1, #0
 8004154:	d103      	bne.n	800415e <get_fat+0x162>
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	79c9      	ldrb	r1, [r1, #7]
 800415a:	2900      	cmp	r1, #0
 800415c:	d160      	bne.n	8004220 <get_fat+0x224>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	6889      	ldr	r1, [r1, #8]
 8004162:	6838      	ldr	r0, [r7, #0]
 8004164:	1a41      	subs	r1, r0, r1
 8004166:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800416e:	1e42      	subs	r2, r0, #1
 8004170:	f141 33ff 	adc.w	r3, r1, #4294967295
 8004174:	f04f 0000 	mov.w	r0, #0
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	0a50      	lsrs	r0, r2, #9
 800417e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8004182:	0a59      	lsrs	r1, r3, #9
 8004184:	4602      	mov	r2, r0
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	895b      	ldrh	r3, [r3, #10]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	79db      	ldrb	r3, [r3, #7]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d10e      	bne.n	80041b6 <get_fat+0x1ba>
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d80a      	bhi.n	80041b6 <get_fat+0x1ba>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d002      	beq.n	80041ae <get_fat+0x1b2>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	3301      	adds	r3, #1
 80041ac:	e001      	b.n	80041b2 <get_fat+0x1b6>
 80041ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80041b2:	61fb      	str	r3, [r7, #28]
					break;
 80041b4:	e043      	b.n	800423e <get_fat+0x242>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	79db      	ldrb	r3, [r3, #7]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d108      	bne.n	80041d0 <get_fat+0x1d4>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d203      	bcs.n	80041d0 <get_fat+0x1d4>
					val = clst + 1; 	/* Generate the value */
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
					break;
 80041ce:	e036      	b.n	800423e <get_fat+0x242>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	79db      	ldrb	r3, [r3, #7]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d023      	beq.n	8004220 <get_fat+0x224>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <get_fat+0x1ec>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80041e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80041e4:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80041e6:	e02a      	b.n	800423e <get_fat+0x242>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	09db      	lsrs	r3, r3, #7
 80041f0:	4413      	add	r3, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	69b8      	ldr	r0, [r7, #24]
 80041f6:	f7ff fe47 	bl	8003e88 <move_window>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d11d      	bne.n	800423c <get_fat+0x240>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800420e:	4413      	add	r3, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fb99 	bl	8003948 <ld_dword>
 8004216:	4603      	mov	r3, r0
 8004218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800421c:	61fb      	str	r3, [r7, #28]
					break;
 800421e:	e00e      	b.n	800423e <get_fat+0x242>
				}
			}
			val = 1;	/* Internal error */
 8004220:	2301      	movs	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
			break;
 8004224:	e00b      	b.n	800423e <get_fat+0x242>
#endif
		default:
			val = 1;	/* Internal error */
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	e008      	b.n	800423e <get_fat+0x242>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800422c:	bf00      	nop
 800422e:	e006      	b.n	800423e <get_fat+0x242>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004230:	bf00      	nop
 8004232:	e004      	b.n	800423e <get_fat+0x242>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004234:	bf00      	nop
 8004236:	e002      	b.n	800423e <get_fat+0x242>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <get_fat+0x242>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800423c:	bf00      	nop
		}
	}

	return val;
 800423e:	69fb      	ldr	r3, [r7, #28]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004254:	2302      	movs	r3, #2
 8004256:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b01      	cmp	r3, #1
 800425c:	f240 80d6 	bls.w	800440c <put_fat+0x1c4>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	f080 80d0 	bcs.w	800440c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	f300 80d4 	bgt.w	800441e <put_fat+0x1d6>
 8004276:	2b03      	cmp	r3, #3
 8004278:	f280 8093 	bge.w	80043a2 <put_fat+0x15a>
 800427c:	2b01      	cmp	r3, #1
 800427e:	d002      	beq.n	8004286 <put_fat+0x3e>
 8004280:	2b02      	cmp	r3, #2
 8004282:	d06e      	beq.n	8004362 <put_fat+0x11a>
 8004284:	e0cb      	b.n	800441e <put_fat+0x1d6>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4413      	add	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	0a5b      	lsrs	r3, r3, #9
 800429c:	4413      	add	r3, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff fdf1 	bl	8003e88 <move_window>
 80042a6:	4603      	mov	r3, r0
 80042a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042aa:	7ffb      	ldrb	r3, [r7, #31]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 80af 	bne.w	8004410 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	1c59      	adds	r1, r3, #1
 80042bc:	61b9      	str	r1, [r7, #24]
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	4413      	add	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00d      	beq.n	80042ec <put_fat+0xa4>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	b25a      	sxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e001      	b.n	80042f0 <put_fat+0xa8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	0a5b      	lsrs	r3, r3, #9
 8004302:	4413      	add	r3, r2
 8004304:	4619      	mov	r1, r3
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fdbe 	bl	8003e88 <move_window>
 800430c:	4603      	mov	r3, r0
 800430e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004310:	7ffb      	ldrb	r3, [r7, #31]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d17e      	bne.n	8004414 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	4413      	add	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <put_fat+0xf0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e00e      	b.n	8004356 <put_fat+0x10e>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b25b      	sxtb	r3, r3
 800433e:	f023 030f 	bic.w	r3, r3, #15
 8004342:	b25a      	sxtb	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	b25b      	sxtb	r3, r3
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	b25b      	sxtb	r3, r3
 8004350:	4313      	orrs	r3, r2
 8004352:	b25b      	sxtb	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	711a      	strb	r2, [r3, #4]
			break;
 8004360:	e05d      	b.n	800441e <put_fat+0x1d6>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	4413      	add	r3, r2
 800436c:	4619      	mov	r1, r3
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff fd8a 	bl	8003e88 <move_window>
 8004374:	4603      	mov	r3, r0
 8004376:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004378:	7ffb      	ldrb	r3, [r7, #31]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d14c      	bne.n	8004418 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800438c:	4413      	add	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	b292      	uxth	r2, r2
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fbd2 	bl	8003b3e <st_word>
			fs->wflag = 1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	711a      	strb	r2, [r3, #4]
			break;
 80043a0:	e03d      	b.n	800441e <put_fat+0x1d6>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	09db      	lsrs	r3, r3, #7
 80043aa:	4413      	add	r3, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff fd6a 	bl	8003e88 <move_window>
 80043b4:	4603      	mov	r3, r0
 80043b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043b8:	7ffb      	ldrb	r3, [r7, #31]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d12e      	bne.n	800441c <put_fat+0x1d4>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d012      	beq.n	80043ec <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80043da:	4413      	add	r3, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fab3 	bl	8003948 <ld_dword>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043e8:	4323      	orrs	r3, r4
 80043ea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80043fa:	4413      	add	r3, r2
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fbb7 	bl	8003b72 <st_dword>
			fs->wflag = 1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	711a      	strb	r2, [r3, #4]
			break;
 800440a:	e008      	b.n	800441e <put_fat+0x1d6>
		}
	}
 800440c:	bf00      	nop
 800440e:	e006      	b.n	800441e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004410:	bf00      	nop
 8004412:	e004      	b.n	800441e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004414:	bf00      	nop
 8004416:	e002      	b.n	800441e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <put_fat+0x1d6>
			if (res != FR_OK) break;
 800441c:	bf00      	nop
	return res;
 800441e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3724      	adds	r7, #36	; 0x24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}

08004428 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3b02      	subs	r3, #2
 8004438:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	3b02      	subs	r3, #2
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d301      	bcc.n	800444a <find_bitmap+0x22>
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	0b1b      	lsrs	r3, r3, #12
 800445e:	4413      	add	r3, r2
 8004460:	4619      	mov	r1, r3
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fd10 	bl	8003e88 <move_window>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <find_bitmap+0x4c>
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e051      	b.n	8004518 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	08db      	lsrs	r3, r3, #3
 8004478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447c:	623b      	str	r3, [r7, #32]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	2201      	movs	r2, #1
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	4413      	add	r3, r2
 8004494:	334c      	adds	r3, #76	; 0x4c
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800449c:	4013      	ands	r3, r2
 800449e:	74fb      	strb	r3, [r7, #19]
 80044a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	3b02      	subs	r3, #2
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d307      	bcc.n	80044cc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	2300      	movs	r3, #0
 80044c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ca:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	3301      	adds	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d106      	bne.n	80044ee <find_bitmap+0xc6>
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	3302      	adds	r3, #2
 80044e4:	e018      	b.n	8004518 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d101      	bne.n	80044fa <find_bitmap+0xd2>
 80044f6:	2300      	movs	r3, #0
 80044f8:	e00e      	b.n	8004518 <find_bitmap+0xf0>
			} while (bm != 0);
 80044fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1c5      	bne.n	800448e <find_bitmap+0x66>
			bm = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	3301      	adds	r3, #1
 800450c:	623b      	str	r3, [r7, #32]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004514:	d3bb      	bcc.n	800448e <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8004516:	e79e      	b.n	8004456 <find_bitmap+0x2e>
	}
}
 8004518:	4618      	mov	r0, r3
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3b02      	subs	r3, #2
 8004532:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	0b1b      	lsrs	r3, r3, #12
 800453c:	4413      	add	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	08db      	lsrs	r3, r3, #3
 8004544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004548:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	2201      	movs	r2, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	617a      	str	r2, [r7, #20]
 800455e:	4619      	mov	r1, r3
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff fc91 	bl	8003e88 <move_window>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <change_bitmap+0x50>
 800456c:	2301      	movs	r3, #1
 800456e:	e03d      	b.n	80045ec <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	4413      	add	r3, r2
 8004576:	334c      	adds	r3, #76	; 0x4c
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	4013      	ands	r3, r2
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4293      	cmp	r3, r2
 8004590:	d101      	bne.n	8004596 <change_bitmap+0x76>
 8004592:	2302      	movs	r3, #2
 8004594:	e02a      	b.n	80045ec <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4413      	add	r3, r2
 800459c:	334c      	adds	r3, #76	; 0x4c
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	7ffb      	ldrb	r3, [r7, #31]
 80045a2:	4053      	eors	r3, r2
 80045a4:	b2d9      	uxtb	r1, r3
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	4413      	add	r3, r2
 80045ac:	334c      	adds	r3, #76	; 0x4c
 80045ae:	460a      	mov	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <change_bitmap+0xa8>
 80045c4:	2300      	movs	r3, #0
 80045c6:	e011      	b.n	80045ec <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80045c8:	7ffb      	ldrb	r3, [r7, #31]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	77fb      	strb	r3, [r7, #31]
 80045ce:	7ffb      	ldrb	r3, [r7, #31]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1cd      	bne.n	8004570 <change_bitmap+0x50>
			bm = 1;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	3301      	adds	r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e4:	d3c4      	bcc.n	8004570 <change_bitmap+0x50>
		i = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80045ea:	e7b5      	b.n	8004558 <change_bitmap+0x38>
	}
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	79db      	ldrb	r3, [r3, #7]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d121      	bne.n	8004648 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e014      	b.n	800463c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3301      	adds	r3, #1
 800461a:	461a      	mov	r2, r3
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	f7ff fe13 	bl	8004248 <put_fat>
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <fill_first_frag+0x3c>
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	e00c      	b.n	800464a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3b01      	subs	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e7      	bne.n	8004612 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800465e:	e020      	b.n	80046a2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d905      	bls.n	8004682 <fill_last_frag+0x30>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	3302      	adds	r3, #2
 8004680:	e000      	b.n	8004684 <fill_last_frag+0x32>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	461a      	mov	r2, r3
 8004686:	f7ff fddf 	bl	8004248 <put_fat>
 800468a:	4603      	mov	r3, r0
 800468c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800468e:	7dfb      	ldrb	r3, [r7, #23]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <fill_last_frag+0x46>
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	e009      	b.n	80046ac <fill_last_frag+0x5a>
		obj->n_frag--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	1e5a      	subs	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1da      	bne.n	8004660 <fill_last_frag+0xe>
	}
	return FR_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d904      	bls.n	80046e2 <remove_chain+0x2e>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d301      	bcc.n	80046e6 <remove_chain+0x32>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e0c4      	b.n	8004870 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d014      	beq.n	8004716 <remove_chain+0x62>
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d103      	bne.n	80046fc <remove_chain+0x48>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	79db      	ldrb	r3, [r3, #7]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d00c      	beq.n	8004716 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	69b8      	ldr	r0, [r7, #24]
 8004704:	f7ff fda0 	bl	8004248 <put_fat>
 8004708:	4603      	mov	r3, r0
 800470a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <remove_chain+0x62>
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	e0ac      	b.n	8004870 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff fc6f 	bl	8003ffc <get_fat>
 800471e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d055      	beq.n	80047d2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <remove_chain+0x7c>
 800472c:	2302      	movs	r3, #2
 800472e:	e09f      	b.n	8004870 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d101      	bne.n	800473c <remove_chain+0x88>
 8004738:	2301      	movs	r3, #1
 800473a:	e099      	b.n	8004870 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d00b      	beq.n	800475c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004744:	2200      	movs	r2, #0
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	69b8      	ldr	r0, [r7, #24]
 800474a:	f7ff fd7d 	bl	8004248 <put_fat>
 800474e:	4603      	mov	r3, r0
 8004750:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004752:	7ffb      	ldrb	r3, [r7, #31]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <remove_chain+0xa8>
 8004758:	7ffb      	ldrb	r3, [r7, #31]
 800475a:	e089      	b.n	8004870 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	3b02      	subs	r3, #2
 8004766:	429a      	cmp	r2, r3
 8004768:	d20b      	bcs.n	8004782 <remove_chain+0xce>
			fs->free_clst++;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	795b      	ldrb	r3, [r3, #5]
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	3301      	adds	r3, #1
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	429a      	cmp	r2, r3
 800478a:	d102      	bne.n	8004792 <remove_chain+0xde>
			ecl = nxt;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	e017      	b.n	80047c2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d10f      	bne.n	80047ba <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800479a:	6a3a      	ldr	r2, [r7, #32]
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	2300      	movs	r3, #0
 80047a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a6:	69b8      	ldr	r0, [r7, #24]
 80047a8:	f7ff feba 	bl	8004520 <change_bitmap>
 80047ac:	4603      	mov	r3, r0
 80047ae:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80047b0:	7ffb      	ldrb	r3, [r7, #31]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <remove_chain+0x106>
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	e05a      	b.n	8004870 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d3a2      	bcc.n	8004716 <remove_chain+0x62>
 80047d0:	e000      	b.n	80047d4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80047d2:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d148      	bne.n	800486e <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	71da      	strb	r2, [r3, #7]
 80047e8:	e041      	b.n	800486e <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	79db      	ldrb	r3, [r3, #7]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d129      	bne.n	8004846 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 80047f8:	e017      	b.n	800482a <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff fbfd 	bl	8003ffc <get_fat>
 8004802:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d801      	bhi.n	800480e <remove_chain+0x15a>
 800480a:	2302      	movs	r3, #2
 800480c:	e030      	b.n	8004870 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d101      	bne.n	800481a <remove_chain+0x166>
 8004816:	2301      	movs	r3, #1
 8004818:	e02a      	b.n	8004870 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3301      	adds	r3, #1
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <remove_chain+0x180>
					clst++;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3301      	adds	r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	d1e3      	bne.n	80047fa <remove_chain+0x146>
 8004832:	e000      	b.n	8004836 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8004834:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d117      	bne.n	800486e <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2202      	movs	r2, #2
 8004842:	71da      	strb	r2, [r3, #7]
 8004844:	e013      	b.n	800486e <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	79db      	ldrb	r3, [r3, #7]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d10f      	bne.n	800486e <remove_chain+0x1ba>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	d30a      	bcc.n	800486e <remove_chain+0x1ba>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4413      	add	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d802      	bhi.n	800486e <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2202      	movs	r2, #2
 800486c:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3728      	adds	r7, #40	; 0x28
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <create_chain+0x2c>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d31b      	bcc.n	80048dc <create_chain+0x64>
 80048a4:	2301      	movs	r3, #1
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e018      	b.n	80048dc <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80048aa:	6839      	ldr	r1, [r7, #0]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fba5 	bl	8003ffc <get_fat>
 80048b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d801      	bhi.n	80048be <create_chain+0x46>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e113      	b.n	8004ae6 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d101      	bne.n	80048ca <create_chain+0x52>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	e10d      	b.n	8004ae6 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d201      	bcs.n	80048d8 <create_chain+0x60>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	e106      	b.n	8004ae6 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <create_chain+0x70>
 80048e4:	2300      	movs	r3, #0
 80048e6:	e0fe      	b.n	8004ae6 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d165      	bne.n	80049bc <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80048f0:	2201      	movs	r2, #1
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	6938      	ldr	r0, [r7, #16]
 80048f6:	f7ff fd97 	bl	8004428 <find_bitmap>
 80048fa:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <create_chain+0x92>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d101      	bne.n	800490e <create_chain+0x96>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	e0eb      	b.n	8004ae6 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800490e:	2301      	movs	r3, #1
 8004910:	2201      	movs	r2, #1
 8004912:	69f9      	ldr	r1, [r7, #28]
 8004914:	6938      	ldr	r0, [r7, #16]
 8004916:	f7ff fe03 	bl	8004520 <change_bitmap>
 800491a:	4603      	mov	r3, r0
 800491c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d101      	bne.n	8004928 <create_chain+0xb0>
 8004924:	2301      	movs	r3, #1
 8004926:	e0de      	b.n	8004ae6 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d102      	bne.n	8004934 <create_chain+0xbc>
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	e0d8      	b.n	8004ae6 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	71da      	strb	r2, [r3, #7]
 8004940:	e011      	b.n	8004966 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	79db      	ldrb	r3, [r3, #7]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d10d      	bne.n	8004966 <create_chain+0xee>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	3301      	adds	r3, #1
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	429a      	cmp	r2, r3
 8004952:	d008      	beq.n	8004966 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2203      	movs	r2, #3
 8004964:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	79db      	ldrb	r3, [r3, #7]
 800496a:	2b02      	cmp	r3, #2
 800496c:	f000 8098 	beq.w	8004aa0 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	429a      	cmp	r2, r3
 8004978:	d10b      	bne.n	8004992 <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <create_chain+0x112>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	3301      	adds	r3, #1
 8004988:	e000      	b.n	800498c <create_chain+0x114>
 800498a:	2302      	movs	r3, #2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	61d3      	str	r3, [r2, #28]
 8004990:	e086      	b.n	8004aa0 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <create_chain+0x128>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fe54 	bl	8004652 <fill_last_frag>
 80049aa:	4603      	mov	r3, r0
 80049ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d175      	bne.n	8004aa0 <create_chain+0x228>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	61da      	str	r2, [r3, #28]
 80049ba:	e071      	b.n	8004aa0 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d129      	bne.n	8004a1c <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	3301      	adds	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d301      	bcc.n	80049dc <create_chain+0x164>
 80049d8:	2302      	movs	r3, #2
 80049da:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fb0c 	bl	8003ffc <get_fat>
 80049e4:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d003      	beq.n	80049f4 <create_chain+0x17c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d101      	bne.n	80049f8 <create_chain+0x180>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	e076      	b.n	8004ae6 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d906      	bls.n	8004a18 <create_chain+0x1a0>
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d201      	bcs.n	8004a18 <create_chain+0x1a0>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d129      	bne.n	8004a76 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d307      	bcc.n	8004a46 <create_chain+0x1ce>
					ncl = 2;
 8004a36:	2302      	movs	r3, #2
 8004a38:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d901      	bls.n	8004a46 <create_chain+0x1ce>
 8004a42:	2300      	movs	r3, #0
 8004a44:	e04f      	b.n	8004ae6 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004a46:	69f9      	ldr	r1, [r7, #28]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fad7 	bl	8003ffc <get_fat>
 8004a4e:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d003      	beq.n	8004a64 <create_chain+0x1ec>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d101      	bne.n	8004a68 <create_chain+0x1f0>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	e03e      	b.n	8004ae6 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1da      	bne.n	8004a26 <create_chain+0x1ae>
 8004a70:	2300      	movs	r3, #0
 8004a72:	e038      	b.n	8004ae6 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 8004a74:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8004a76:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7a:	69f9      	ldr	r1, [r7, #28]
 8004a7c:	6938      	ldr	r0, [r7, #16]
 8004a7e:	f7ff fbe3 	bl	8004248 <put_fat>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <create_chain+0x228>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d006      	beq.n	8004aa0 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	6938      	ldr	r0, [r7, #16]
 8004a98:	f7ff fbd6 	bl	8004248 <put_fat>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d116      	bne.n	8004ad4 <create_chain+0x25c>
		fs->last_clst = ncl;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	3b02      	subs	r3, #2
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d804      	bhi.n	8004ac4 <create_chain+0x24c>
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	1e5a      	subs	r2, r3, #1
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	795b      	ldrb	r3, [r3, #5]
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	715a      	strb	r2, [r3, #5]
 8004ad2:	e007      	b.n	8004ae4 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <create_chain+0x268>
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	e000      	b.n	8004ae2 <create_chain+0x26a>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004ae4:	69fb      	ldr	r3, [r7, #28]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff f989 	bl	8003e10 <sync_window>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <dir_clear+0x1a>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e036      	b.n	8004b76 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fa58 	bl	8003fc0 <clst2sect>
 8004b10:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	649a      	str	r2, [r3, #72]	; 0x48
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	334c      	adds	r3, #76	; 0x4c
 8004b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f012 f8ba 	bl	8016c9c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	334c      	adds	r3, #76	; 0x4c
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e003      	b.n	8004b40 <dir_clear+0x52>
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	895b      	ldrh	r3, [r3, #10]
 8004b44:	461a      	mov	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d20b      	bcs.n	8004b64 <dir_clear+0x76>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7858      	ldrb	r0, [r3, #1]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	441a      	add	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	68f9      	ldr	r1, [r7, #12]
 8004b5a:	f004 fc2b 	bl	80093b4 <disk_write>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0e9      	beq.n	8004b38 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	895b      	ldrh	r3, [r3, #10]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d102      	bne.n	8004b9c <dir_sdi+0x1e>
 8004b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9a:	e001      	b.n	8004ba0 <dir_sdi+0x22>
 8004b9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d904      	bls.n	8004bb0 <dir_sdi+0x32>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <dir_sdi+0x36>
		return FR_INT_ERR;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e066      	b.n	8004c82 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <dir_sdi+0x5c>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d905      	bls.n	8004bda <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10c      	bne.n	8004bfa <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	8912      	ldrh	r2, [r2, #8]
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d301      	bcc.n	8004bf0 <dir_sdi+0x72>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e048      	b.n	8004c82 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8004bf8:	e029      	b.n	8004c4e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	895b      	ldrh	r3, [r3, #10]
 8004bfe:	025b      	lsls	r3, r3, #9
 8004c00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c02:	e019      	b.n	8004c38 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6979      	ldr	r1, [r7, #20]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f9f7 	bl	8003ffc <get_fat>
 8004c0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d101      	bne.n	8004c1c <dir_sdi+0x9e>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e032      	b.n	8004c82 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d904      	bls.n	8004c2c <dir_sdi+0xae>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d301      	bcc.n	8004c30 <dir_sdi+0xb2>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e028      	b.n	8004c82 <dir_sdi+0x104>
			ofs -= csz;
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d2e1      	bcs.n	8004c04 <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 8004c40:	6979      	ldr	r1, [r7, #20]
 8004c42:	6938      	ldr	r0, [r7, #16]
 8004c44:	f7ff f9bc 	bl	8003fc0 <clst2sect>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <dir_sdi+0xe2>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e010      	b.n	8004c82 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	0a5b      	lsrs	r3, r3, #9
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	441a      	add	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	3320      	adds	r3, #32
 8004ca0:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d102      	bne.n	8004cb0 <dir_next+0x26>
 8004caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cae:	e001      	b.n	8004cb4 <dir_next+0x2a>
 8004cb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d802      	bhi.n	8004cc0 <dir_next+0x36>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <dir_next+0x42>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	e07f      	b.n	8004dcc <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d16d      	bne.n	8004db2 <dir_next+0x128>
		dp->sect++;				/* Next sector */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	8912      	ldrh	r2, [r2, #8]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d35e      	bcc.n	8004db2 <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	e066      	b.n	8004dcc <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	0a5b      	lsrs	r3, r3, #9
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	8952      	ldrh	r2, [r2, #10]
 8004d06:	3a01      	subs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d151      	bne.n	8004db2 <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f7ff f970 	bl	8003ffc <get_fat>
 8004d1c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d801      	bhi.n	8004d28 <dir_next+0x9e>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e051      	b.n	8004dcc <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d101      	bne.n	8004d34 <dir_next+0xaa>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e04b      	b.n	8004dcc <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d32f      	bcc.n	8004d9e <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	e03e      	b.n	8004dcc <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7ff fd8e 	bl	8004878 <create_chain>
 8004d5c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <dir_next+0xde>
 8004d64:	2307      	movs	r3, #7
 8004d66:	e031      	b.n	8004dcc <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <dir_next+0xe8>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e02c      	b.n	8004dcc <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d101      	bne.n	8004d7e <dir_next+0xf4>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e026      	b.n	8004dcc <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	6938      	ldr	r0, [r7, #16]
 8004d82:	f7ff feb4 	bl	8004aee <dir_clear>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <dir_next+0x106>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e01d      	b.n	8004dcc <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	79db      	ldrb	r3, [r3, #7]
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 8004da4:	6979      	ldr	r1, [r7, #20]
 8004da6:	6938      	ldr	r0, [r7, #16]
 8004da8:	f7ff f90a 	bl	8003fc0 <clst2sect>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004de4:	2100      	movs	r1, #0
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fec9 	bl	8004b7e <dir_sdi>
 8004dec:	4603      	mov	r3, r0
 8004dee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d140      	bne.n	8004e78 <dir_alloc+0xa4>
		n = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	4619      	mov	r1, r3
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff f841 	bl	8003e88 <move_window>
 8004e06:	4603      	mov	r3, r0
 8004e08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d132      	bne.n	8004e76 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d108      	bne.n	8004e2a <dir_alloc+0x56>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	09db      	lsrs	r3, r3, #7
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e00f      	b.n	8004e4a <dir_alloc+0x76>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2be5      	cmp	r3, #229	; 0xe5
 8004e32:	d004      	beq.n	8004e3e <dir_alloc+0x6a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <dir_alloc+0x6e>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <dir_alloc+0x70>
 8004e42:	2300      	movs	r3, #0
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	3301      	adds	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d102      	bne.n	8004e62 <dir_alloc+0x8e>
 8004e5c:	e00c      	b.n	8004e78 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8004e62:	2101      	movs	r1, #1
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff10 	bl	8004c8a <dir_next>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0c2      	beq.n	8004dfa <dir_alloc+0x26>
 8004e74:	e000      	b.n	8004e78 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8004e76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d101      	bne.n	8004e82 <dir_alloc+0xae>
 8004e7e:	2307      	movs	r3, #7
 8004e80:	75fb      	strb	r3, [r7, #23]
	return res;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	331a      	adds	r3, #26
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fd3d 	bl	800391a <ld_word>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d109      	bne.n	8004ec0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	3314      	adds	r3, #20
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe fd32 	bl	800391a <ld_word>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	041b      	lsls	r3, r3, #16
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	331a      	adds	r3, #26
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	b292      	uxth	r2, r2
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fe2c 	bl	8003b3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d109      	bne.n	8004f02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f103 0214 	add.w	r2, r3, #20
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0c1b      	lsrs	r3, r3, #16
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f7fe fe1e 	bl	8003b3e <st_word>
	}
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	331a      	adds	r3, #26
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fcfd 	bl	800391a <ld_word>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <cmp_lfn+0x1e>
 8004f26:	2300      	movs	r3, #0
 8004f28:	e058      	b.n	8004fdc <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	4613      	mov	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004f40:	2301      	movs	r3, #1
 8004f42:	81fb      	strh	r3, [r7, #14]
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	e032      	b.n	8004fb0 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004f4a:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <cmp_lfn+0xd8>)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4413      	add	r3, r2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe fcde 	bl	800391a <ld_word>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8004f62:	89fb      	ldrh	r3, [r7, #14]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d019      	beq.n	8004f9c <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2bff      	cmp	r3, #255	; 0xff
 8004f6c:	d811      	bhi.n	8004f92 <cmp_lfn+0x86>
 8004f6e:	89bb      	ldrh	r3, [r7, #12]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f003 fdd1 	bl	8008b18 <ff_wtoupper>
 8004f76:	4604      	mov	r4, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	617a      	str	r2, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f003 fdc6 	bl	8008b18 <ff_wtoupper>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	429c      	cmp	r4, r3
 8004f90:	d001      	beq.n	8004f96 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 8004f92:	2300      	movs	r3, #0
 8004f94:	e022      	b.n	8004fdc <cmp_lfn+0xd0>
			}
			wc = uc;
 8004f96:	89bb      	ldrh	r3, [r7, #12]
 8004f98:	81fb      	strh	r3, [r7, #14]
 8004f9a:	e006      	b.n	8004faa <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004f9c:	89bb      	ldrh	r3, [r7, #12]
 8004f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d001      	beq.n	8004faa <cmp_lfn+0x9e>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e018      	b.n	8004fdc <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3301      	adds	r3, #1
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d9c9      	bls.n	8004f4a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <cmp_lfn+0xce>
 8004fc2:	89fb      	ldrh	r3, [r7, #14]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <cmp_lfn+0xce>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <cmp_lfn+0xce>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 8004fda:	2301      	movs	r3, #1
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd90      	pop	{r4, r7, pc}
 8004fe4:	0801a250 	.word	0x0801a250

08004fe8 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	331a      	adds	r3, #26
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fc8f 	bl	800391a <ld_word>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <pick_lfn+0x1e>
 8005002:	2300      	movs	r3, #0
 8005004:	e050      	b.n	80050a8 <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	4613      	mov	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800501c:	2301      	movs	r3, #1
 800501e:	81fb      	strh	r3, [r7, #14]
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e028      	b.n	8005078 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005026:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <pick_lfn+0xc8>)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	4413      	add	r3, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fc70 	bl	800391a <ld_word>
 800503a:	4603      	mov	r3, r0
 800503c:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800503e:	89fb      	ldrh	r3, [r7, #14]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00f      	beq.n	8005064 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2bff      	cmp	r3, #255	; 0xff
 8005048:	d901      	bls.n	800504e <pick_lfn+0x66>
 800504a:	2300      	movs	r3, #0
 800504c:	e02c      	b.n	80050a8 <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800504e:	89bb      	ldrh	r3, [r7, #12]
 8005050:	81fb      	strh	r3, [r7, #14]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	617a      	str	r2, [r7, #20]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	89fa      	ldrh	r2, [r7, #14]
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e006      	b.n	8005072 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005064:	89bb      	ldrh	r3, [r7, #12]
 8005066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800506a:	4293      	cmp	r3, r2
 800506c:	d001      	beq.n	8005072 <pick_lfn+0x8a>
 800506e:	2300      	movs	r3, #0
 8005070:	e01a      	b.n	80050a8 <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3301      	adds	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d9d3      	bls.n	8005026 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <pick_lfn+0xbe>
 800508a:	89fb      	ldrh	r3, [r7, #14]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2bff      	cmp	r3, #255	; 0xff
 8005094:	d901      	bls.n	800509a <pick_lfn+0xb2>
 8005096:	2300      	movs	r3, #0
 8005098:	e006      	b.n	80050a8 <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	2200      	movs	r2, #0
 80050a4:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80050a6:	2301      	movs	r3, #1
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	0801a250 	.word	0x0801a250

080050b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4611      	mov	r1, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	460b      	mov	r3, r1
 80050c4:	71fb      	strb	r3, [r7, #7]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	330d      	adds	r3, #13
 80050ce:	79ba      	ldrb	r2, [r7, #6]
 80050d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	330b      	adds	r3, #11
 80050d6:	220f      	movs	r2, #15
 80050d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	330c      	adds	r3, #12
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	331a      	adds	r3, #26
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fd28 	bl	8003b3e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	82fb      	strh	r3, [r7, #22]
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005106:	8afb      	ldrh	r3, [r7, #22]
 8005108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <put_lfn+0x6c>
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	61fa      	str	r2, [r7, #28]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005120:	4a17      	ldr	r2, [pc, #92]	; (8005180 <put_lfn+0xcc>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4413      	add	r3, r2
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	8afa      	ldrh	r2, [r7, #22]
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fd03 	bl	8003b3e <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <put_lfn+0x90>
 800513e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005142:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	3301      	adds	r3, #1
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b0c      	cmp	r3, #12
 800514e:	d9da      	bls.n	8005106 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005150:	8afb      	ldrh	r3, [r7, #22]
 8005152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005156:	4293      	cmp	r3, r2
 8005158:	d006      	beq.n	8005168 <put_lfn+0xb4>
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <put_lfn+0xbc>
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800516e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	79fa      	ldrb	r2, [r7, #7]
 8005174:	701a      	strb	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	0801a250 	.word	0x0801a250

08005184 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8005192:	220b      	movs	r2, #11
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f011 fd72 	bl	8016c80 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d92b      	bls.n	80051fa <gen_numname+0x76>
		sreg = seq;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 80051a6:	e022      	b.n	80051ee <gen_numname+0x6a>
			wc = *lfn++;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1c9a      	adds	r2, r3, #2
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80051b2:	2300      	movs	r3, #0
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b6:	e017      	b.n	80051e8 <gen_numname+0x64>
				sreg = (sreg << 1) + (wc & 1);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	005a      	lsls	r2, r3, #1
 80051bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80051c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <gen_numname+0x5e>
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80051dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80051e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	3301      	adds	r3, #1
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	d9e4      	bls.n	80051b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1d8      	bne.n	80051a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 80051fa:	2307      	movs	r3, #7
 80051fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3330      	adds	r3, #48	; 0x30
 800520a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 8005214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005218:	2b39      	cmp	r3, #57	; 0x39
 800521a:	d904      	bls.n	8005226 <gen_numname+0xa2>
 800521c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005220:	3307      	adds	r3, #7
 8005222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	62ba      	str	r2, [r7, #40]	; 0x28
 800522c:	3330      	adds	r3, #48	; 0x30
 800522e:	443b      	add	r3, r7
 8005230:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005234:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <gen_numname+0xc0>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1dc      	bne.n	80051fe <gen_numname+0x7a>
	ns[i] = '~';
 8005244:	f107 0214 	add.w	r2, r7, #20
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	4413      	add	r3, r2
 800524c:	227e      	movs	r2, #126	; 0x7e
 800524e:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005250:	2300      	movs	r3, #0
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
 8005254:	e014      	b.n	8005280 <gen_numname+0xfc>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	4413      	add	r3, r2
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fd39 	bl	8003cd6 <dbc_1st>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <gen_numname+0xf6>
			if (j == i - 1) break;
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	429a      	cmp	r2, r3
 8005272:	d010      	beq.n	8005296 <gen_numname+0x112>
			j++;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	3301      	adds	r3, #1
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	3301      	adds	r3, #1
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	429a      	cmp	r2, r3
 8005286:	d207      	bcs.n	8005298 <gen_numname+0x114>
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	4413      	add	r3, r2
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b20      	cmp	r3, #32
 8005292:	d1e0      	bne.n	8005256 <gen_numname+0xd2>
 8005294:	e000      	b.n	8005298 <gen_numname+0x114>
			if (j == i - 1) break;
 8005296:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	2b07      	cmp	r3, #7
 800529c:	d807      	bhi.n	80052ae <gen_numname+0x12a>
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80052a4:	3330      	adds	r3, #48	; 0x30
 80052a6:	443b      	add	r3, r7
 80052a8:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80052ac:	e000      	b.n	80052b0 <gen_numname+0x12c>
 80052ae:	2120      	movs	r1, #32
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	627a      	str	r2, [r7, #36]	; 0x24
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	460a      	mov	r2, r1
 80052bc:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	2b07      	cmp	r3, #7
 80052c2:	d9e9      	bls.n	8005298 <gen_numname+0x114>
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3730      	adds	r7, #48	; 0x30
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80052da:	230b      	movs	r3, #11
 80052dc:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	0852      	lsrs	r2, r2, #1
 80052e4:	01db      	lsls	r3, r3, #7
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	1c59      	adds	r1, r3, #1
 80052ee:	6079      	str	r1, [r7, #4]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	4413      	add	r3, r2
 80052f4:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	60bb      	str	r3, [r7, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1ed      	bne.n	80052de <sum_sfn+0x10>
	return sum;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3301      	adds	r3, #1
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	015b      	lsls	r3, r3, #5
 8005320:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8005322:	2300      	movs	r3, #0
 8005324:	827b      	strh	r3, [r7, #18]
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e018      	b.n	800535e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d103      	bne.n	800533a <xdir_sum+0x2c>
			i++;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	3301      	adds	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e00e      	b.n	8005358 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800533a:	8a7b      	ldrh	r3, [r7, #18]
 800533c:	03db      	lsls	r3, r3, #15
 800533e:	b29a      	uxth	r2, r3
 8005340:	8a7b      	ldrh	r3, [r7, #18]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	b29b      	uxth	r3, r3
 8005346:	4413      	add	r3, r2
 8005348:	b29a      	uxth	r2, r3
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	440b      	add	r3, r1
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4413      	add	r3, r2
 8005356:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3301      	adds	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3e2      	bcc.n	800532c <xdir_sum+0x1e>
		}
	}
	return sum;
 8005366:	8a7b      	ldrh	r3, [r7, #18]
}
 8005368:	4618      	mov	r0, r3
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800537e:	e01f      	b.n	80053c0 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8005380:	89bb      	ldrh	r3, [r7, #12]
 8005382:	4618      	mov	r0, r3
 8005384:	f003 fbc8 	bl	8008b18 <ff_wtoupper>
 8005388:	4603      	mov	r3, r0
 800538a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	03db      	lsls	r3, r3, #15
 8005390:	b29a      	uxth	r2, r3
 8005392:	89fb      	ldrh	r3, [r7, #14]
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	b29b      	uxth	r3, r3
 8005398:	4413      	add	r3, r2
 800539a:	b29a      	uxth	r2, r3
 800539c:	89bb      	ldrh	r3, [r7, #12]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	03db      	lsls	r3, r3, #15
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	89fb      	ldrh	r3, [r7, #14]
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	89bb      	ldrh	r3, [r7, #12]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	4413      	add	r3, r2
 80053be:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	1c9a      	adds	r2, r3, #2
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	81bb      	strh	r3, [r7, #12]
 80053ca:	89bb      	ldrh	r3, [r7, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1d7      	bne.n	8005380 <xname_sum+0xe>
	}
	return sum;
 80053d0:	89fb      	ldrh	r3, [r7, #14]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	60fb      	str	r3, [r7, #12]


	/* Load file directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f7fe fd46 	bl	8003e88 <move_window>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <load_xdir+0x2e>
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	e0a9      	b.n	800555e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b85      	cmp	r3, #133	; 0x85
 8005412:	d001      	beq.n	8005418 <load_xdir+0x3c>
 8005414:	2302      	movs	r3, #2
 8005416:	e0a2      	b.n	800555e <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	2220      	movs	r2, #32
 800541e:	4619      	mov	r1, r3
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f011 fc2d 	bl	8016c80 <memcpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3301      	adds	r3, #1
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	015b      	lsls	r3, r3, #5
 8005430:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b5f      	cmp	r3, #95	; 0x5f
 8005436:	d903      	bls.n	8005440 <load_xdir+0x64>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800543e:	d901      	bls.n	8005444 <load_xdir+0x68>
 8005440:	2302      	movs	r3, #2
 8005442:	e08c      	b.n	800555e <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 8005444:	2100      	movs	r1, #0
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff fc1f 	bl	8004c8a <dir_next>
 800544c:	4603      	mov	r3, r0
 800544e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d101      	bne.n	800545a <load_xdir+0x7e>
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <load_xdir+0x88>
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	e07c      	b.n	800555e <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe fd0a 	bl	8003e88 <move_window>
 8005474:	4603      	mov	r3, r0
 8005476:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <load_xdir+0xa6>
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	e06d      	b.n	800555e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2bc0      	cmp	r3, #192	; 0xc0
 800548a:	d001      	beq.n	8005490 <load_xdir+0xb4>
 800548c:	2302      	movs	r3, #2
 800548e:	e066      	b.n	800555e <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f103 0020 	add.w	r0, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	2220      	movs	r2, #32
 800549c:	4619      	mov	r1, r3
 800549e:	f011 fbef 	bl	8016c80 <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3323      	adds	r3, #35	; 0x23
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	332c      	adds	r3, #44	; 0x2c
 80054aa:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <load_xdir+0x18c>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	08db      	lsrs	r3, r3, #3
 80054b2:	015b      	lsls	r3, r3, #5
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d201      	bcs.n	80054be <load_xdir+0xe2>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e04f      	b.n	800555e <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 80054be:	2340      	movs	r3, #64	; 0x40
 80054c0:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 80054c2:	2100      	movs	r1, #0
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fbe0 	bl	8004c8a <dir_next>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d101      	bne.n	80054d8 <load_xdir+0xfc>
 80054d4:	2302      	movs	r3, #2
 80054d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <load_xdir+0x106>
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	e03d      	b.n	800555e <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe fccb 	bl	8003e88 <move_window>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <load_xdir+0x124>
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
 80054fe:	e02e      	b.n	800555e <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2bc1      	cmp	r3, #193	; 0xc1
 8005508:	d001      	beq.n	800550e <load_xdir+0x132>
 800550a:	2302      	movs	r3, #2
 800550c:	e027      	b.n	800555e <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8005514:	d208      	bcs.n	8005528 <load_xdir+0x14c>
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	18d0      	adds	r0, r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	2220      	movs	r2, #32
 8005522:	4619      	mov	r1, r3
 8005524:	f011 fbac 	bl	8016c80 <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3320      	adds	r3, #32
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d3c5      	bcc.n	80054c2 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800553c:	d80e      	bhi.n	800555c <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff fee5 	bl	800530e <xdir_sum>
 8005544:	4603      	mov	r3, r0
 8005546:	461c      	mov	r4, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3302      	adds	r3, #2
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe f9e4 	bl	800391a <ld_word>
 8005552:	4603      	mov	r3, r0
 8005554:	429c      	cmp	r4, r3
 8005556:	d001      	beq.n	800555c <load_xdir+0x180>
 8005558:	2302      	movs	r3, #2
 800555a:	e000      	b.n	800555e <load_xdir+0x182>
	}
	return FR_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd90      	pop	{r4, r7, pc}
 8005566:	bf00      	nop
 8005568:	88888889 	.word	0x88888889

0800556c <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	3334      	adds	r3, #52	; 0x34
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe f9e3 	bl	8003948 <ld_dword>
 8005582:	4602      	mov	r2, r0
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	3338      	adds	r3, #56	; 0x38
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe f9fc 	bl	800398c <ld_qword>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	3321      	adds	r3, #33	; 0x21
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	61da      	str	r2, [r3, #28]
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 80055be:	b5b0      	push	{r4, r5, r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6808      	ldr	r0, [r1, #0]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	6a08      	ldr	r0, [r1, #32]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80055dc:	b2c8      	uxtb	r0, r1
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80055e6:	2000      	movs	r0, #0
 80055e8:	460c      	mov	r4, r1
 80055ea:	4605      	mov	r5, r0
 80055ec:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80055f0:	2300      	movs	r3, #0
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fab6 	bl	8004b7e <dir_sdi>
 8005612:	4603      	mov	r3, r0
 8005614:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff fedd 	bl	80053dc <load_xdir>
 8005622:	4603      	mov	r3, r0
 8005624:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bdb0      	pop	{r4, r5, r7, pc}

08005630 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1c9c      	adds	r4, r3, #2
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fe62 	bl	800530e <xdir_sum>
 800564a:	4603      	mov	r3, r0
 800564c:	4619      	mov	r1, r3
 800564e:	4620      	mov	r0, r4
 8005650:	f7fe fa75 	bl	8003b3e <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	613b      	str	r3, [r7, #16]

	/* Store the directory entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff fa8a 	bl	8004b7e <dir_sdi>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800566e:	e026      	b.n	80056be <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f7fe fc04 	bl	8003e88 <move_window>
 8005680:	4603      	mov	r3, r0
 8005682:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11d      	bne.n	80056c6 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	2220      	movs	r2, #32
 8005690:	68f9      	ldr	r1, [r7, #12]
 8005692:	4618      	mov	r0, r3
 8005694:	f011 faf4 	bl	8016c80 <memcpy>
		dp->obj.fs->wflag = 1;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2201      	movs	r2, #1
 800569e:	711a      	strb	r2, [r3, #4]
		if (--nent == 0) break;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00e      	beq.n	80056ca <store_xdir+0x9a>
		dirb += SZDIRE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3320      	adds	r3, #32
 80056b0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80056b2:	2100      	movs	r1, #0
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fae8 	bl	8004c8a <dir_next>
 80056ba:	4603      	mov	r3, r0
 80056bc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0d5      	beq.n	8005670 <store_xdir+0x40>
 80056c4:	e002      	b.n	80056cc <store_xdir+0x9c>
		if (res != FR_OK) break;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <store_xdir+0x9c>
		if (--nent == 0) break;
 80056ca:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <store_xdir+0xa8>
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <store_xdir+0xac>
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	e000      	b.n	80056de <store_xdir+0xae>
 80056dc:	2302      	movs	r3, #2
}
 80056de:	4618      	mov	r0, r3
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd90      	pop	{r4, r7, pc}

080056e6 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 80056e6:	b590      	push	{r4, r7, lr}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	memset(dirb, 0, 2 * SZDIRE);
 80056f0:	2240      	movs	r2, #64	; 0x40
 80056f2:	2100      	movs	r1, #0
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f011 fad1 	bl	8016c9c <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2285      	movs	r2, #133	; 0x85
 80056fe:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3320      	adds	r3, #32
 8005704:	22c0      	movs	r2, #192	; 0xc0
 8005706:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 8005708:	2340      	movs	r3, #64	; 0x40
 800570a:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 800570c:	2300      	movs	r3, #0
 800570e:	72fb      	strb	r3, [r7, #11]
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	72bb      	strb	r3, [r7, #10]
 8005714:	2301      	movs	r3, #1
 8005716:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	60fa      	str	r2, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	4413      	add	r3, r2
 8005722:	22c1      	movs	r2, #193	; 0xc1
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	60fa      	str	r2, [r7, #12]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8005734:	893b      	ldrh	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <create_xdir+0x6c>
 800573a:	7abb      	ldrb	r3, [r7, #10]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	813b      	strh	r3, [r7, #8]
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <create_xdir+0x6c>
 800574c:	7abb      	ldrb	r3, [r7, #10]
 800574e:	3301      	adds	r3, #1
 8005750:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 	/* Store it */
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	893a      	ldrh	r2, [r7, #8]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe f9ee 	bl	8003b3e <st_word>
			i += 2;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3302      	adds	r3, #2
 8005766:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e0      	bne.n	8005734 <create_xdir+0x4e>
		nc1++;
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	3301      	adds	r3, #1
 8005776:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 8005778:	7abb      	ldrb	r3, [r7, #10]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1c8      	bne.n	8005718 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3323      	adds	r3, #35	; 0x23
 800578a:	7aba      	ldrb	r2, [r7, #10]
 800578c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3301      	adds	r3, #1
 8005792:	7afa      	ldrb	r2, [r7, #11]
 8005794:	3201      	adds	r2, #1
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80057a0:	6838      	ldr	r0, [r7, #0]
 80057a2:	f7ff fde6 	bl	8005372 <xname_sum>
 80057a6:	4603      	mov	r3, r0
 80057a8:	4619      	mov	r1, r3
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7fe f9c7 	bl	8003b3e <st_word>
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd90      	pop	{r4, r7, pc}

080057b8 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80057c2:	2304      	movs	r3, #4
 80057c4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80057cc:	23ff      	movs	r3, #255	; 0xff
 80057ce:	757b      	strb	r3, [r7, #21]
 80057d0:	23ff      	movs	r3, #255	; 0xff
 80057d2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80057d4:	e0a6      	b.n	8005924 <dir_read+0x16c>
		res = move_window(fs, dp->sect);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	4619      	mov	r1, r3
 80057dc:	6938      	ldr	r0, [r7, #16]
 80057de:	f7fe fb53 	bl	8003e88 <move_window>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 80a1 	bne.w	8005930 <dir_read+0x178>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 80057f6:	7dbb      	ldrb	r3, [r7, #22]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d102      	bne.n	8005802 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80057fc:	2304      	movs	r3, #4
 80057fe:	75fb      	strb	r3, [r7, #23]
 8005800:	e09d      	b.n	800593e <dir_read+0x186>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b04      	cmp	r3, #4
 8005808:	d11f      	bne.n	800584a <dir_read+0x92>
			if (FF_USE_LABEL && vol) {
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <dir_read+0x60>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 8005810:	7dbb      	ldrb	r3, [r7, #22]
 8005812:	2b83      	cmp	r3, #131	; 0x83
 8005814:	d17d      	bne.n	8005912 <dir_read+0x15a>
 8005816:	e092      	b.n	800593e <dir_read+0x186>
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8005818:	7dbb      	ldrb	r3, [r7, #22]
 800581a:	2b85      	cmp	r3, #133	; 0x85
 800581c:	d179      	bne.n	8005912 <dir_read+0x15a>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff fdd8 	bl	80053dc <load_xdir>
 800582c:	4603      	mov	r3, r0
 800582e:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d17e      	bne.n	8005934 <dir_read+0x17c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	3304      	adds	r3, #4
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005842:	b2da      	uxtb	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	719a      	strb	r2, [r3, #6]
					}
					break;
 8005848:	e074      	b.n	8005934 <dir_read+0x17c>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	330b      	adds	r3, #11
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7bfa      	ldrb	r2, [r7, #15]
 800585c:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800585e:	7dbb      	ldrb	r3, [r7, #22]
 8005860:	2be5      	cmp	r3, #229	; 0xe5
 8005862:	d00e      	beq.n	8005882 <dir_read+0xca>
 8005864:	7dbb      	ldrb	r3, [r7, #22]
 8005866:	2b2e      	cmp	r3, #46	; 0x2e
 8005868:	d00b      	beq.n	8005882 <dir_read+0xca>
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	f023 0320 	bic.w	r3, r3, #32
 8005870:	2b08      	cmp	r3, #8
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	4293      	cmp	r3, r2
 8005880:	d002      	beq.n	8005888 <dir_read+0xd0>
				ord = 0xFF;
 8005882:	23ff      	movs	r3, #255	; 0xff
 8005884:	757b      	strb	r3, [r7, #21]
 8005886:	e044      	b.n	8005912 <dir_read+0x15a>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b0f      	cmp	r3, #15
 800588c:	d12f      	bne.n	80058ee <dir_read+0x136>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800588e:	7dbb      	ldrb	r3, [r7, #22]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <dir_read+0xfc>
						sum = dp->dir[LDIR_Chksum];
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	7b5b      	ldrb	r3, [r3, #13]
 800589e:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 80058a0:	7dbb      	ldrb	r3, [r7, #22]
 80058a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a6:	75bb      	strb	r3, [r7, #22]
 80058a8:	7dbb      	ldrb	r3, [r7, #22]
 80058aa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80058b4:	7dba      	ldrb	r2, [r7, #22]
 80058b6:	7d7b      	ldrb	r3, [r7, #21]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d115      	bne.n	80058e8 <dir_read+0x130>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	330d      	adds	r3, #13
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	7d3a      	ldrb	r2, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d10e      	bne.n	80058e8 <dir_read+0x130>
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f7ff fb87 	bl	8004fe8 <pick_lfn>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <dir_read+0x130>
 80058e0:	7d7b      	ldrb	r3, [r7, #21]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	e000      	b.n	80058ea <dir_read+0x132>
 80058e8:	23ff      	movs	r3, #255	; 0xff
 80058ea:	757b      	strb	r3, [r7, #21]
 80058ec:	e011      	b.n	8005912 <dir_read+0x15a>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80058ee:	7d7b      	ldrb	r3, [r7, #21]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <dir_read+0x150>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fce8 	bl	80052ce <sum_sfn>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	7d3b      	ldrb	r3, [r7, #20]
 8005904:	4293      	cmp	r3, r2
 8005906:	d017      	beq.n	8005938 <dir_read+0x180>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f04f 32ff 	mov.w	r2, #4294967295
 800590e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8005910:	e012      	b.n	8005938 <dir_read+0x180>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005912:	2100      	movs	r1, #0
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff f9b8 	bl	8004c8a <dir_next>
 800591a:	4603      	mov	r3, r0
 800591c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <dir_read+0x184>
	while (dp->sect) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	f47f af54 	bne.w	80057d6 <dir_read+0x1e>
 800592e:	e006      	b.n	800593e <dir_read+0x186>
		if (res != FR_OK) break;
 8005930:	bf00      	nop
 8005932:	e004      	b.n	800593e <dir_read+0x186>
					break;
 8005934:	bf00      	nop
 8005936:	e002      	b.n	800593e <dir_read+0x186>
					break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <dir_read+0x186>
		if (res != FR_OK) break;
 800593c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <dir_read+0x192>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005962:	2100      	movs	r1, #0
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff f90a 	bl	8004b7e <dir_sdi>
 800596a:	4603      	mov	r3, r0
 800596c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <dir_find+0x24>
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	e111      	b.n	8005b9c <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d163      	bne.n	8005a48 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fcf4 	bl	8005372 <xname_sum>
 800598a:	4603      	mov	r3, r0
 800598c:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800598e:	e04e      	b.n	8005a2e <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	3324      	adds	r3, #36	; 0x24
 8005996:	4618      	mov	r0, r3
 8005998:	f7fd ffbf 	bl	800391a <ld_word>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	893b      	ldrh	r3, [r7, #8]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d000      	beq.n	80059a8 <dir_find+0x54>
 80059a6:	e042      	b.n	8005a2e <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80059b0:	76fb      	strb	r3, [r7, #27]
 80059b2:	2340      	movs	r3, #64	; 0x40
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e028      	b.n	8005a0e <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <dir_find+0x78>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3302      	adds	r3, #2
 80059ca:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4413      	add	r3, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd ffa0 	bl	800391a <ld_word>
 80059da:	4603      	mov	r3, r0
 80059dc:	4618      	mov	r0, r3
 80059de:	f003 f89b 	bl	8008b18 <ff_wtoupper>
 80059e2:	4604      	mov	r4, r0
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f003 f891 	bl	8008b18 <ff_wtoupper>
 80059f6:	4603      	mov	r3, r0
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d10c      	bne.n	8005a16 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80059fc:	7efb      	ldrb	r3, [r7, #27]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	76fb      	strb	r3, [r7, #27]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	3302      	adds	r3, #2
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	7efb      	ldrb	r3, [r7, #27]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1d3      	bne.n	80059bc <dir_find+0x68>
 8005a14:	e000      	b.n	8005a18 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005a16:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005a18:	7efb      	ldrb	r3, [r7, #27]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <dir_find+0xda>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8005a2e:	2100      	movs	r1, #0
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fec1 	bl	80057b8 <dir_read>
 8005a36:	4603      	mov	r3, r0
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	7ffb      	ldrb	r3, [r7, #31]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0a7      	beq.n	8005990 <dir_find+0x3c>
 8005a40:	e000      	b.n	8005a44 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005a42:	bf00      	nop
		}
		return res;
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	e0a9      	b.n	8005b9c <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005a48:	23ff      	movs	r3, #255	; 0xff
 8005a4a:	773b      	strb	r3, [r7, #28]
 8005a4c:	7f3b      	ldrb	r3, [r7, #28]
 8005a4e:	777b      	strb	r3, [r7, #29]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f04f 32ff 	mov.w	r2, #4294967295
 8005a56:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7fe fa12 	bl	8003e88 <move_window>
 8005a64:	4603      	mov	r3, r0
 8005a66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8005a68:	7ffb      	ldrb	r3, [r7, #31]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 8090 	bne.w	8005b90 <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a78:	7fbb      	ldrb	r3, [r7, #30]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <dir_find+0x130>
 8005a7e:	2304      	movs	r3, #4
 8005a80:	77fb      	strb	r3, [r7, #31]
 8005a82:	e08a      	b.n	8005b9a <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	330b      	adds	r3, #11
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a90:	72fb      	strb	r3, [r7, #11]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	7afa      	ldrb	r2, [r7, #11]
 8005a96:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005a98:	7fbb      	ldrb	r3, [r7, #30]
 8005a9a:	2be5      	cmp	r3, #229	; 0xe5
 8005a9c:	d007      	beq.n	8005aae <dir_find+0x15a>
 8005a9e:	7afb      	ldrb	r3, [r7, #11]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <dir_find+0x168>
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	d006      	beq.n	8005abc <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005aae:	23ff      	movs	r3, #255	; 0xff
 8005ab0:	777b      	strb	r3, [r7, #29]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	64da      	str	r2, [r3, #76]	; 0x4c
 8005aba:	e05e      	b.n	8005b7a <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	d136      	bne.n	8005b30 <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d154      	bne.n	8005b7a <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005ad0:	7fbb      	ldrb	r3, [r7, #30]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	7b5b      	ldrb	r3, [r3, #13]
 8005ae0:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005ae2:	7fbb      	ldrb	r3, [r7, #30]
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	77bb      	strb	r3, [r7, #30]
 8005aea:	7fbb      	ldrb	r3, [r7, #30]
 8005aec:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005af6:	7fba      	ldrb	r2, [r7, #30]
 8005af8:	7f7b      	ldrb	r3, [r7, #29]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d115      	bne.n	8005b2a <dir_find+0x1d6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	330d      	adds	r3, #13
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	7f3a      	ldrb	r2, [r7, #28]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d10e      	bne.n	8005b2a <dir_find+0x1d6>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7ff f9f8 	bl	8004f0c <cmp_lfn>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <dir_find+0x1d6>
 8005b22:	7f7b      	ldrb	r3, [r7, #29]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e000      	b.n	8005b2c <dir_find+0x1d8>
 8005b2a:	23ff      	movs	r3, #255	; 0xff
 8005b2c:	777b      	strb	r3, [r7, #29]
 8005b2e:	e024      	b.n	8005b7a <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005b30:	7f7b      	ldrb	r3, [r7, #29]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <dir_find+0x1f6>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fbc7 	bl	80052ce <sum_sfn>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	7f3b      	ldrb	r3, [r7, #28]
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d024      	beq.n	8005b94 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <dir_find+0x21a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3340      	adds	r3, #64	; 0x40
 8005b60:	220b      	movs	r2, #11
 8005b62:	4619      	mov	r1, r3
 8005b64:	f011 f87c 	bl	8016c60 <memcmp>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d014      	beq.n	8005b98 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005b6e:	23ff      	movs	r3, #255	; 0xff
 8005b70:	777b      	strb	r3, [r7, #29]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f04f 32ff 	mov.w	r2, #4294967295
 8005b78:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff f884 	bl	8004c8a <dir_next>
 8005b82:	4603      	mov	r3, r0
 8005b84:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f43f af65 	beq.w	8005a58 <dir_find+0x104>
 8005b8e:	e004      	b.n	8005b9a <dir_find+0x246>
		if (res != FR_OK) break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005b98:	bf00      	nop

	return res;
 8005b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3724      	adds	r7, #36	; 0x24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd90      	pop	{r4, r7, pc}

08005ba4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8005ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ba8:	b0a0      	sub	sp, #128	; 0x80
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005bba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <dir_register+0x22>
 8005bc2:	2306      	movs	r3, #6
 8005bc4:	e194      	b.n	8005ef0 <dir_register+0x34c>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	677b      	str	r3, [r7, #116]	; 0x74
 8005bca:	e002      	b.n	8005bd2 <dir_register+0x2e>
 8005bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bce:	3301      	adds	r3, #1
 8005bd0:	677b      	str	r3, [r7, #116]	; 0x74
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f4      	bne.n	8005bcc <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	f040 80a6 	bne.w	8005d38 <dir_register+0x194>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bee:	330e      	adds	r3, #14
 8005bf0:	4aa5      	ldr	r2, [pc, #660]	; (8005e88 <dir_register+0x2e4>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 8005bfc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff f8e8 	bl	8004dd4 <dir_alloc>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8005c0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <dir_register+0x74>
 8005c12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c16:	e16b      	b.n	8005ef0 <dir_register+0x34c>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	015b      	lsls	r3, r3, #5
 8005c22:	1ad2      	subs	r2, r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	79db      	ldrb	r3, [r3, #7]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d077      	beq.n	8005d24 <dir_register+0x180>
			dp->obj.stat &= ~4;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	79db      	ldrb	r3, [r3, #7]
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe fcd5 	bl	80045f4 <fill_first_frag>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005c50:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <dir_register+0xba>
 8005c58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c5c:	e148      	b.n	8005ef0 <dir_register+0x34c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f7fe fcf2 	bl	8004652 <fill_last_frag>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005c74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <dir_register+0xde>
 8005c7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c80:	e136      	b.n	8005ef0 <dir_register+0x34c>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d04c      	beq.n	8005d24 <dir_register+0x180>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fc93 	bl	80055be <load_obj_xdir>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 8005c9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <dir_register+0x108>
 8005ca6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005caa:	e121      	b.n	8005ef0 <dir_register+0x34c>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005cb2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005cb4:	8949      	ldrh	r1, [r1, #10]
 8005cb6:	0249      	lsls	r1, r1, #9
 8005cb8:	2000      	movs	r0, #0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	eb12 0804 	adds.w	r8, r2, r4
 8005cc2:	eb43 0905 	adc.w	r9, r3, r5
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8005ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005cda:	4608      	mov	r0, r1
 8005cdc:	f7fd ff74 	bl	8003bc8 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005cee:	4608      	mov	r0, r1
 8005cf0:	f7fd ff6a 	bl	8003bc8 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	79da      	ldrb	r2, [r3, #7]
 8005cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	3321      	adds	r3, #33	; 0x21
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 8005d06:	f107 0308 	add.w	r3, r7, #8
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fc90 	bl	8005630 <store_xdir>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 8005d16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <dir_register+0x180>
 8005d1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d22:	e0e5      	b.n	8005ef0 <dir_register+0x34c>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f7ff fcd9 	bl	80056e6 <create_xdir>
		return FR_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e0db      	b.n	8005ef0 <dir_register+0x34c>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005d3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d42:	6810      	ldr	r0, [r2, #0]
 8005d44:	6851      	ldr	r1, [r2, #4]
 8005d46:	6892      	ldr	r2, [r2, #8]
 8005d48:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005d4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d033      	beq.n	8005dbe <dir_register+0x21a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2240      	movs	r2, #64	; 0x40
 8005d5a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8005d5e:	2301      	movs	r3, #1
 8005d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d62:	e016      	b.n	8005d92 <dir_register+0x1ee>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d74:	f7ff fa06 	bl	8005184 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fdeb 	bl	8005954 <dir_find>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8005d84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <dir_register+0x1f6>
		for (n = 1; n < 100; n++) {
 8005d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d8e:	3301      	adds	r3, #1
 8005d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d94:	2b63      	cmp	r3, #99	; 0x63
 8005d96:	d9e5      	bls.n	8005d64 <dir_register+0x1c0>
 8005d98:	e000      	b.n	8005d9c <dir_register+0x1f8>
			if (res != FR_OK) break;
 8005d9a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9e:	2b64      	cmp	r3, #100	; 0x64
 8005da0:	d101      	bne.n	8005da6 <dir_register+0x202>
 8005da2:	2307      	movs	r3, #7
 8005da4:	e0a4      	b.n	8005ef0 <dir_register+0x34c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005da6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d002      	beq.n	8005db4 <dir_register+0x210>
 8005dae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005db2:	e09d      	b.n	8005ef0 <dir_register+0x34c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005db4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005dbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <dir_register+0x236>
 8005dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dcc:	330c      	adds	r3, #12
 8005dce:	4a2f      	ldr	r2, [pc, #188]	; (8005e8c <dir_register+0x2e8>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	089b      	lsrs	r3, r3, #2
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e000      	b.n	8005ddc <dir_register+0x238>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8005dde:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fe fff7 	bl	8004dd4 <dir_alloc>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8005dec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d14e      	bne.n	8005e92 <dir_register+0x2ee>
 8005df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df6:	3b01      	subs	r3, #1
 8005df8:	673b      	str	r3, [r7, #112]	; 0x70
 8005dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d048      	beq.n	8005e92 <dir_register+0x2ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e06:	015b      	lsls	r3, r3, #5
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7fe feb6 	bl	8004b7e <dir_sdi>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005e18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d138      	bne.n	8005e92 <dir_register+0x2ee>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3340      	adds	r3, #64	; 0x40
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fa52 	bl	80052ce <sum_sfn>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	4619      	mov	r1, r3
 8005e36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e38:	f7fe f826 	bl	8003e88 <move_window>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8005e42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d122      	bne.n	8005e90 <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8005e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4c:	68d8      	ldr	r0, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005e5a:	f7ff f92b 	bl	80050b4 <put_lfn>
				fs->wflag = 1;
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	2201      	movs	r2, #1
 8005e62:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005e64:	2100      	movs	r1, #0
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fe ff0f 	bl	8004c8a <dir_next>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --n_ent);
 8005e72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <dir_register+0x2ee>
 8005e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1d4      	bne.n	8005e30 <dir_register+0x28c>
 8005e86:	e004      	b.n	8005e92 <dir_register+0x2ee>
 8005e88:	88888889 	.word	0x88888889
 8005e8c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8005e90:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005e92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d128      	bne.n	8005eec <dir_register+0x348>
		res = move_window(fs, dp->sect);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ea2:	f7fd fff1 	bl	8003e88 <move_window>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005eac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11b      	bne.n	8005eec <dir_register+0x348>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	2220      	movs	r2, #32
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f010 feed 	bl	8016c9c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3340      	adds	r3, #64	; 0x40
 8005eca:	220b      	movs	r2, #11
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f010 fed7 	bl	8016c80 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	330c      	adds	r3, #12
 8005ede:	f002 0218 	and.w	r2, r2, #24
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	2201      	movs	r2, #1
 8005eea:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005eec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3780      	adds	r7, #128	; 0x80
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005efa:	bf00      	nop

08005efc <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	BYTE lcf;
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	613b      	str	r3, [r7, #16]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 81b5 	beq.w	8006286 <get_fileinfo+0x38a>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	f040 80a6 	bne.w	8006072 <get_fileinfo+0x176>
		UINT nc = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]

		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2e:	2300      	movs	r3, #0
 8005f30:	623b      	str	r3, [r7, #32]
		hs = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 8005f36:	e048      	b.n	8005fca <get_fileinfo+0xce>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8005f3e:	d302      	bcc.n	8005f46 <get_fileinfo+0x4a>
				di = 0; break;
 8005f40:	2300      	movs	r3, #0
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	e049      	b.n	8005fda <get_fileinfo+0xde>
			}
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <get_fileinfo+0x5a>
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	3302      	adds	r3, #2
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fd fcdb 	bl	800391a <ld_word>
 8005f64:	4603      	mov	r3, r0
 8005f66:	83bb      	strh	r3, [r7, #28]
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	3301      	adds	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8005f74:	8b7b      	ldrh	r3, [r7, #26]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <get_fileinfo+0x94>
 8005f7a:	8bbb      	ldrh	r3, [r7, #28]
 8005f7c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8005f80:	d306      	bcc.n	8005f90 <get_fileinfo+0x94>
 8005f82:	8bbb      	ldrh	r3, [r7, #28]
 8005f84:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8005f88:	d202      	bcs.n	8005f90 <get_fileinfo+0x94>
				hs = wc; continue;				/* Get low surrogate */
 8005f8a:	8bbb      	ldrh	r3, [r7, #28]
 8005f8c:	837b      	strh	r3, [r7, #26]
 8005f8e:	e01c      	b.n	8005fca <get_fileinfo+0xce>
			}
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8005f90:	8b7b      	ldrh	r3, [r7, #26]
 8005f92:	041a      	lsls	r2, r3, #16
 8005f94:	8bbb      	ldrh	r3, [r7, #28]
 8005f96:	ea42 0003 	orr.w	r0, r2, r3
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	1c99      	adds	r1, r3, #2
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7fd fef8 	bl	8003da0 <put_utf>
 8005fb0:	60f8      	str	r0, [r7, #12]
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <get_fileinfo+0xc2>
				di = 0; break;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	e00d      	b.n	8005fda <get_fileinfo+0xde>
			}
			di += nw;
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	623b      	str	r3, [r7, #32]
			hs = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	3323      	adds	r3, #35	; 0x23
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d3ae      	bcc.n	8005f38 <get_fileinfo+0x3c>
		}
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8005fda:	8b7b      	ldrh	r3, [r7, #26]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <get_fileinfo+0xe8>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	623b      	str	r3, [r7, #32]
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <get_fileinfo+0xfc>
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	623a      	str	r2, [r7, #32]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	223f      	movs	r2, #63	; 0x3f
 8005ff6:	769a      	strb	r2, [r3, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	331a      	adds	r3, #26
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2200      	movs	r2, #0
 8006008:	735a      	strb	r2, [r3, #13]

		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	3304      	adds	r3, #4
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8006016:	b2da      	uxtb	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	731a      	strb	r2, [r3, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	7b1b      	ldrb	r3, [r3, #12]
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b00      	cmp	r3, #0
 8006026:	d108      	bne.n	800603a <get_fileinfo+0x13e>
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	3338      	adds	r3, #56	; 0x38
 800602e:	4618      	mov	r0, r3
 8006030:	f7fd fcac 	bl	800398c <ld_qword>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	e003      	b.n	8006042 <get_fileinfo+0x146>
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	e9c1 2300 	strd	r2, r3, [r1]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	330c      	adds	r3, #12
 800604e:	4618      	mov	r0, r3
 8006050:	f7fd fc63 	bl	800391a <ld_word>
 8006054:	4603      	mov	r3, r0
 8006056:	461a      	mov	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	815a      	strh	r2, [r3, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	330e      	adds	r3, #14
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd fc59 	bl	800391a <ld_word>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	811a      	strh	r2, [r3, #8]
		return;
 8006070:	e10a      	b.n	8006288 <get_fileinfo+0x38c>
	} else
#endif
	{	/* FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d04d      	beq.n	8006118 <get_fileinfo+0x21c>
			si = di = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	623b      	str	r3, [r7, #32]
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
			hs = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 8006088:	e033      	b.n	80060f2 <get_fileinfo+0x1f6>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	6279      	str	r1, [r7, #36]	; 0x24
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	83bb      	strh	r3, [r7, #28]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800609c:	8b7b      	ldrh	r3, [r7, #26]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <get_fileinfo+0x1bc>
 80060a2:	8bbb      	ldrh	r3, [r7, #28]
 80060a4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80060a8:	d306      	bcc.n	80060b8 <get_fileinfo+0x1bc>
 80060aa:	8bbb      	ldrh	r3, [r7, #28]
 80060ac:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80060b0:	d202      	bcs.n	80060b8 <get_fileinfo+0x1bc>
					hs = wc; continue;		/* Get low surrogate */
 80060b2:	8bbb      	ldrh	r3, [r7, #28]
 80060b4:	837b      	strh	r3, [r7, #26]
 80060b6:	e01c      	b.n	80060f2 <get_fileinfo+0x1f6>
				}
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 80060b8:	8b7b      	ldrh	r3, [r7, #26]
 80060ba:	041a      	lsls	r2, r3, #16
 80060bc:	8bbb      	ldrh	r3, [r7, #28]
 80060be:	ea42 0003 	orr.w	r0, r2, r3
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	3318      	adds	r3, #24
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	1c99      	adds	r1, r3, #2
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fd fe64 	bl	8003da0 <put_utf>
 80060d8:	60f8      	str	r0, [r7, #12]
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <get_fileinfo+0x1ea>
					di = 0; break;
 80060e0:	2300      	movs	r3, #0
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	e00d      	b.n	8006102 <get_fileinfo+0x206>
				}
				di += nw;
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	623b      	str	r3, [r7, #32]
				hs = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1c3      	bne.n	800608a <get_fileinfo+0x18e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8006102:	8b7b      	ldrh	r3, [r7, #26]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <get_fileinfo+0x210>
 8006108:	2300      	movs	r3, #0
 800610a:	623b      	str	r3, [r7, #32]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	4413      	add	r3, r2
 8006112:	331a      	adds	r3, #26
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
	while (si < 11) {		/* Get SFN from SFN entry */
 8006120:	e026      	b.n	8006170 <get_fileinfo+0x274>
		wc = dp->dir[si++];			/* Get a char */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1c59      	adds	r1, r3, #1
 800612a:	6279      	str	r1, [r7, #36]	; 0x24
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	83bb      	strh	r3, [r7, #28]
		if (wc == ' ') continue;	/* Skip padding spaces */
 8006132:	8bbb      	ldrh	r3, [r7, #28]
 8006134:	2b20      	cmp	r3, #32
 8006136:	d100      	bne.n	800613a <get_fileinfo+0x23e>
 8006138:	e01a      	b.n	8006170 <get_fileinfo+0x274>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800613a:	8bbb      	ldrh	r3, [r7, #28]
 800613c:	2b05      	cmp	r3, #5
 800613e:	d101      	bne.n	8006144 <get_fileinfo+0x248>
 8006140:	23e5      	movs	r3, #229	; 0xe5
 8006142:	83bb      	strh	r3, [r7, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	2b09      	cmp	r3, #9
 8006148:	d109      	bne.n	800615e <get_fileinfo+0x262>
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2b0b      	cmp	r3, #11
 800614e:	d806      	bhi.n	800615e <get_fileinfo+0x262>
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	623a      	str	r2, [r7, #32]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	4413      	add	r3, r2
 800615a:	222e      	movs	r2, #46	; 0x2e
 800615c:	735a      	strb	r2, [r3, #13]
		if (nw == 0) {				/* Buffer overflow? */
			di = 0; break;
		}
		di += nw;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	623a      	str	r2, [r7, #32]
 8006164:	8bba      	ldrh	r2, [r7, #28]
 8006166:	b2d1      	uxtb	r1, r2
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	4413      	add	r3, r2
 800616c:	460a      	mov	r2, r1
 800616e:	735a      	strb	r2, [r3, #13]
	while (si < 11) {		/* Get SFN from SFN entry */
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	2b0a      	cmp	r3, #10
 8006174:	d9d5      	bls.n	8006122 <get_fileinfo+0x226>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	4413      	add	r3, r2
 800617c:	330d      	adds	r3, #13
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	7e9b      	ldrb	r3, [r3, #26]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d152      	bne.n	8006230 <get_fileinfo+0x334>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d107      	bne.n	80061a0 <get_fileinfo+0x2a4>
			fno->fname[di++] = '\?';
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	623a      	str	r2, [r7, #32]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	4413      	add	r3, r2
 800619a:	223f      	movs	r2, #63	; 0x3f
 800619c:	769a      	strb	r2, [r3, #26]
 800619e:	e038      	b.n	8006212 <get_fileinfo+0x316>
		} else {
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 80061a0:	2300      	movs	r3, #0
 80061a2:	623b      	str	r3, [r7, #32]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
 80061a8:	2308      	movs	r3, #8
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e02a      	b.n	8006204 <get_fileinfo+0x308>
				wc = (WCHAR)fno->altname[si];
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	4413      	add	r3, r2
 80061b4:	330d      	adds	r3, #13
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	83bb      	strh	r3, [r7, #28]
				if (wc == '.') lcf = NS_EXT;
 80061ba:	8bbb      	ldrh	r3, [r7, #28]
 80061bc:	2b2e      	cmp	r3, #46	; 0x2e
 80061be:	d101      	bne.n	80061c4 <get_fileinfo+0x2c8>
 80061c0:	2310      	movs	r3, #16
 80061c2:	77fb      	strb	r3, [r7, #31]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 80061c4:	8bbb      	ldrh	r3, [r7, #28]
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d90e      	bls.n	80061e8 <get_fileinfo+0x2ec>
 80061ca:	8bbb      	ldrh	r3, [r7, #28]
 80061cc:	2b5a      	cmp	r3, #90	; 0x5a
 80061ce:	d80b      	bhi.n	80061e8 <get_fileinfo+0x2ec>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d4:	330c      	adds	r3, #12
 80061d6:	781a      	ldrb	r2, [r3, #0]
 80061d8:	7ffb      	ldrb	r3, [r7, #31]
 80061da:	4013      	ands	r3, r2
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <get_fileinfo+0x2ec>
 80061e2:	8bbb      	ldrh	r3, [r7, #28]
 80061e4:	3320      	adds	r3, #32
 80061e6:	83bb      	strh	r3, [r7, #28]
				fno->fname[di] = (TCHAR)wc;
 80061e8:	8bbb      	ldrh	r3, [r7, #28]
 80061ea:	b2d9      	uxtb	r1, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	4413      	add	r3, r2
 80061f2:	331a      	adds	r3, #26
 80061f4:	460a      	mov	r2, r1
 80061f6:	701a      	strb	r2, [r3, #0]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	3301      	adds	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	3301      	adds	r3, #1
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	4413      	add	r3, r2
 800620a:	330d      	adds	r3, #13
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1cd      	bne.n	80061ae <get_fileinfo+0x2b2>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	4413      	add	r3, r2
 8006218:	331a      	adds	r3, #26
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	330c      	adds	r3, #12
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <get_fileinfo+0x334>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2200      	movs	r2, #0
 800622e:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	330b      	adds	r3, #11
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	b2da      	uxtb	r2, r3
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	331c      	adds	r3, #28
 8006248:	4618      	mov	r0, r3
 800624a:	f7fd fb7d 	bl	8003948 <ld_dword>
 800624e:	4603      	mov	r3, r0
 8006250:	2200      	movs	r2, #0
 8006252:	461c      	mov	r4, r3
 8006254:	4615      	mov	r5, r2
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	e9c3 4500 	strd	r4, r5, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006260:	3316      	adds	r3, #22
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd fb59 	bl	800391a <ld_word>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	3318      	adds	r3, #24
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd fb4f 	bl	800391a <ld_word>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	811a      	strh	r2, [r3, #8]
 8006284:	e000      	b.n	8006288 <get_fileinfo+0x38c>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8006286:	bf00      	nop
}
 8006288:	3728      	adds	r7, #40	; 0x28
 800628a:	46bd      	mov	sp, r7
 800628c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006290 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 80062ac:	f107 0308 	add.w	r3, r7, #8
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fd fd30 	bl	8003d16 <tchar2uni>
 80062b6:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d101      	bne.n	80062c4 <create_name+0x34>
 80062c0:	2306      	movs	r3, #6
 80062c2:	e207      	b.n	80066d4 <create_name+0x444>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ca:	d309      	bcc.n	80062e0 <create_name+0x50>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	0c19      	lsrs	r1, r3, #16
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	617a      	str	r2, [r7, #20]
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	b28a      	uxth	r2, r1
 80062de:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 80062e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e6:	2b1f      	cmp	r3, #31
 80062e8:	d920      	bls.n	800632c <create_name+0x9c>
 80062ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ec:	2b2f      	cmp	r3, #47	; 0x2f
 80062ee:	d01d      	beq.n	800632c <create_name+0x9c>
 80062f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f2:	2b5c      	cmp	r3, #92	; 0x5c
 80062f4:	d01a      	beq.n	800632c <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80062f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f8:	2b7f      	cmp	r3, #127	; 0x7f
 80062fa:	d809      	bhi.n	8006310 <create_name+0x80>
 80062fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062fe:	4619      	mov	r1, r3
 8006300:	4894      	ldr	r0, [pc, #592]	; (8006554 <create_name+0x2c4>)
 8006302:	f011 faff 	bl	8017904 <strchr>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <create_name+0x80>
 800630c:	2306      	movs	r3, #6
 800630e:	e1e1      	b.n	80066d4 <create_name+0x444>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2bfe      	cmp	r3, #254	; 0xfe
 8006314:	d901      	bls.n	800631a <create_name+0x8a>
 8006316:	2306      	movs	r3, #6
 8006318:	e1dc      	b.n	80066d4 <create_name+0x444>
		lfn[di++] = wc;				/* Store the Unicode character */
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	617a      	str	r2, [r7, #20]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006328:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 800632a:	e7bf      	b.n	80062ac <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 800632c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800632e:	2b1f      	cmp	r3, #31
 8006330:	d806      	bhi.n	8006340 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 8006332:	2304      	movs	r3, #4
 8006334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006338:	e014      	b.n	8006364 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	3301      	adds	r3, #1
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b2f      	cmp	r3, #47	; 0x2f
 8006346:	d0f8      	beq.n	800633a <create_name+0xaa>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b5c      	cmp	r3, #92	; 0x5c
 800634e:	d0f4      	beq.n	800633a <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b1f      	cmp	r3, #31
 800635c:	d802      	bhi.n	8006364 <create_name+0xd4>
 800635e:	2304      	movs	r3, #4
 8006360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d109      	bne.n	8006384 <create_name+0xf4>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006376:	3b01      	subs	r3, #1
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	2b2e      	cmp	r3, #46	; 0x2e
 8006382:	d016      	beq.n	80063b2 <create_name+0x122>
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d14e      	bne.n	8006428 <create_name+0x198>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006390:	3b01      	subs	r3, #1
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	2b2e      	cmp	r3, #46	; 0x2e
 800639c:	d144      	bne.n	8006428 <create_name+0x198>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	3b02      	subs	r3, #2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	2b2e      	cmp	r3, #46	; 0x2e
 80063b0:	d13a      	bne.n	8006428 <create_name+0x198>
		lfn[di] = 0;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4413      	add	r3, r2
 80063ba:	2200      	movs	r2, #0
 80063bc:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 80063be:	2300      	movs	r3, #0
 80063c0:	623b      	str	r3, [r7, #32]
 80063c2:	e00f      	b.n	80063e4 <create_name+0x154>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80063c4:	6a3a      	ldr	r2, [r7, #32]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d201      	bcs.n	80063d0 <create_name+0x140>
 80063cc:	212e      	movs	r1, #46	; 0x2e
 80063ce:	e000      	b.n	80063d2 <create_name+0x142>
 80063d0:	2120      	movs	r1, #32
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	3340      	adds	r3, #64	; 0x40
 80063da:	460a      	mov	r2, r1
 80063dc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	3301      	adds	r3, #1
 80063e2:	623b      	str	r3, [r7, #32]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b0a      	cmp	r3, #10
 80063e8:	d9ec      	bls.n	80063c4 <create_name+0x134>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 80063ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063ee:	f043 0320 	orr.w	r3, r3, #32
 80063f2:	b2d9      	uxtb	r1, r3
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	4413      	add	r3, r2
 80063fa:	3340      	adds	r3, #64	; 0x40
 80063fc:	460a      	mov	r2, r1
 80063fe:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	e167      	b.n	80066d4 <create_name+0x444>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800640a:	3b01      	subs	r3, #1
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8006416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006418:	2b20      	cmp	r3, #32
 800641a:	d002      	beq.n	8006422 <create_name+0x192>
 800641c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800641e:	2b2e      	cmp	r3, #46	; 0x2e
 8006420:	d106      	bne.n	8006430 <create_name+0x1a0>
		di--;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	3b01      	subs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ea      	bne.n	8006404 <create_name+0x174>
 800642e:	e000      	b.n	8006432 <create_name+0x1a2>
		if (wc != ' ' && wc != '.') break;
 8006430:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4413      	add	r3, r2
 800643a:	2200      	movs	r2, #0
 800643c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <create_name+0x1b8>
 8006444:	2306      	movs	r3, #6
 8006446:	e145      	b.n	80066d4 <create_name+0x444>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e002      	b.n	8006454 <create_name+0x1c4>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	3301      	adds	r3, #1
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	2b20      	cmp	r3, #32
 8006460:	d0f5      	beq.n	800644e <create_name+0x1be>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <create_name+0x1e6>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	2b2e      	cmp	r3, #46	; 0x2e
 8006474:	d109      	bne.n	800648a <create_name+0x1fa>
 8006476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800647a:	f043 0303 	orr.w	r3, r3, #3
 800647e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8006482:	e002      	b.n	800648a <create_name+0x1fa>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	3b01      	subs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <create_name+0x214>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006496:	3b01      	subs	r3, #1
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	2b2e      	cmp	r3, #46	; 0x2e
 80064a2:	d1ef      	bne.n	8006484 <create_name+0x1f4>

	memset(dp->fn, ' ', 11);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3340      	adds	r3, #64	; 0x40
 80064a8:	220b      	movs	r2, #11
 80064aa:	2120      	movs	r1, #32
 80064ac:	4618      	mov	r0, r3
 80064ae:	f010 fbf5 	bl	8016c9c <memset>
	i = b = 0; ni = 8;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064b8:	2300      	movs	r3, #0
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	2308      	movs	r3, #8
 80064be:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	61ba      	str	r2, [r7, #24]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 80064d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80b4 	beq.w	8006640 <create_name+0x3b0>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 80064d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d006      	beq.n	80064ec <create_name+0x25c>
 80064de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064e0:	2b2e      	cmp	r3, #46	; 0x2e
 80064e2:	d10a      	bne.n	80064fa <create_name+0x26a>
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d006      	beq.n	80064fa <create_name+0x26a>
			cf |= NS_LOSS | NS_LFN;
 80064ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064f0:	f043 0303 	orr.w	r3, r3, #3
 80064f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 80064f8:	e0a1      	b.n	800663e <create_name+0x3ae>
		}

		if (i >= ni || si == di) {		/* End of field? */
 80064fa:	6a3a      	ldr	r2, [r7, #32]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d203      	bcs.n	800650a <create_name+0x27a>
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	429a      	cmp	r2, r3
 8006508:	d126      	bne.n	8006558 <create_name+0x2c8>
			if (ni == 11) {				/* Name extension overflow? */
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2b0b      	cmp	r3, #11
 800650e:	d106      	bne.n	800651e <create_name+0x28e>
				cf |= NS_LOSS | NS_LFN;
 8006510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006514:	f043 0303 	orr.w	r3, r3, #3
 8006518:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 800651c:	e093      	b.n	8006646 <create_name+0x3b6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	429a      	cmp	r2, r3
 8006524:	d005      	beq.n	8006532 <create_name+0x2a2>
 8006526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800652a:	f043 0303 	orr.w	r3, r3, #3
 800652e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	429a      	cmp	r2, r3
 8006538:	f200 8084 	bhi.w	8006644 <create_name+0x3b4>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	2308      	movs	r3, #8
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	230b      	movs	r3, #11
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8006552:	e074      	b.n	800663e <create_name+0x3ae>
 8006554:	08019eec 	.word	0x08019eec
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 8006558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800655a:	2b7f      	cmp	r3, #127	; 0x7f
 800655c:	d918      	bls.n	8006590 <create_name+0x300>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800655e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006562:	f043 0302 	orr.w	r3, r3, #2
 8006566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800656a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800656c:	f240 11b5 	movw	r1, #437	; 0x1b5
 8006570:	4618      	mov	r0, r3
 8006572:	f002 fa6d 	bl	8008a50 <ff_uni2oem>
 8006576:	4603      	mov	r3, r0
 8006578:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800657a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <create_name+0x300>
 8006584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658a:	4a54      	ldr	r2, [pc, #336]	; (80066dc <create_name+0x44c>)
 800658c:	5cd3      	ldrb	r3, [r2, r3]
 800658e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8006590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006592:	2bff      	cmp	r3, #255	; 0xff
 8006594:	d91a      	bls.n	80065cc <create_name+0x33c>
			if (i >= ni - 1) {			/* Field overflow? */
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	3b01      	subs	r3, #1
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	429a      	cmp	r2, r3
 800659e:	d308      	bcc.n	80065b2 <create_name+0x322>
				cf |= NS_LOSS | NS_LFN;
 80065a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065a4:	f043 0303 	orr.w	r3, r3, #3
 80065a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	e045      	b.n	800663e <create_name+0x3ae>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 80065b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065b4:	0a1b      	lsrs	r3, r3, #8
 80065b6:	b299      	uxth	r1, r3
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	623a      	str	r2, [r7, #32]
 80065be:	b2c9      	uxtb	r1, r1
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4413      	add	r3, r2
 80065c4:	460a      	mov	r2, r1
 80065c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ca:	e02e      	b.n	800662a <create_name+0x39a>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 80065cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <create_name+0x352>
 80065d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065d4:	4619      	mov	r1, r3
 80065d6:	4842      	ldr	r0, [pc, #264]	; (80066e0 <create_name+0x450>)
 80065d8:	f011 f994 	bl	8017904 <strchr>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <create_name+0x364>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80065e2:	235f      	movs	r3, #95	; 0x5f
 80065e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80065e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065ea:	f043 0303 	orr.w	r3, r3, #3
 80065ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80065f2:	e01a      	b.n	800662a <create_name+0x39a>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 80065f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d908      	bls.n	800660c <create_name+0x37c>
 80065fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065fc:	2b5a      	cmp	r3, #90	; 0x5a
 80065fe:	d805      	bhi.n	800660c <create_name+0x37c>
					b |= 2;
 8006600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 800660c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800660e:	2b60      	cmp	r3, #96	; 0x60
 8006610:	d90b      	bls.n	800662a <create_name+0x39a>
 8006612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006614:	2b7a      	cmp	r3, #122	; 0x7a
 8006616:	d808      	bhi.n	800662a <create_name+0x39a>
					b |= 1; wc -= 0x20;
 8006618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006626:	3b20      	subs	r3, #32
 8006628:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	623a      	str	r2, [r7, #32]
 8006630:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006632:	b2d1      	uxtb	r1, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4413      	add	r3, r2
 8006638:	460a      	mov	r2, r1
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
 800663e:	e73f      	b.n	80064c0 <create_name+0x230>
		if (wc == 0) break;				/* Break on end of the LFN */
 8006640:	bf00      	nop
 8006642:	e000      	b.n	8006646 <create_name+0x3b6>
			if (si > di) break;						/* No name extension? */
 8006644:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800664c:	2be5      	cmp	r3, #229	; 0xe5
 800664e:	d103      	bne.n	8006658 <create_name+0x3c8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2205      	movs	r2, #5
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2b08      	cmp	r3, #8
 800665c:	d104      	bne.n	8006668 <create_name+0x3d8>
 800665e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8006668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800666c:	f003 030c 	and.w	r3, r3, #12
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d005      	beq.n	8006680 <create_name+0x3f0>
 8006674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	2b03      	cmp	r3, #3
 800667e:	d105      	bne.n	800668c <create_name+0x3fc>
 8006680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800668c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d117      	bne.n	80066c8 <create_name+0x438>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8006698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <create_name+0x420>
 80066a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066a8:	f043 0310 	orr.w	r3, r3, #16
 80066ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80066b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <create_name+0x438>
 80066bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066c0:	f043 0308 	orr.w	r3, r3, #8
 80066c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80066ce:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80066d2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3728      	adds	r7, #40	; 0x28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	0801a260 	.word	0x0801a260
 80066e0:	08019ef8 	.word	0x08019ef8

080066e4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80066e4:	b5b0      	push	{r4, r5, r7, lr}
 80066e6:	b09a      	sub	sp, #104	; 0x68
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	663b      	str	r3, [r7, #96]	; 0x60


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b2f      	cmp	r3, #47	; 0x2f
 80066fa:	d00b      	beq.n	8006714 <follow_path+0x30>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b5c      	cmp	r3, #92	; 0x5c
 8006702:	d007      	beq.n	8006714 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 8006704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	609a      	str	r2, [r3, #8]
 800670c:	e00d      	b.n	800672a <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b2f      	cmp	r3, #47	; 0x2f
 800671a:	d0f8      	beq.n	800670e <follow_path+0x2a>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b5c      	cmp	r3, #92	; 0x5c
 8006722:	d0f4      	beq.n	800670e <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 8006730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d136      	bne.n	80067a6 <follow_path+0xc2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d032      	beq.n	80067a6 <follow_path+0xc2>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 8006740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 8006748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800674a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 8006750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe ff2c 	bl	80055be <load_obj_xdir>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 800676c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <follow_path+0x96>
 8006774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006778:	e0a8      	b.n	80068cc <follow_path+0x1e8>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800677a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	3338      	adds	r3, #56	; 0x38
 8006780:	4618      	mov	r0, r3
 8006782:	f7fd f8e1 	bl	8003948 <ld_dword>
 8006786:	4603      	mov	r3, r0
 8006788:	2200      	movs	r2, #0
 800678a:	461c      	mov	r4, r3
 800678c:	4615      	mov	r5, r2
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	e9c3 4504 	strd	r4, r5, [r3, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	3321      	adds	r3, #33	; 0x21
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b1f      	cmp	r3, #31
 80067ac:	d80b      	bhi.n	80067c6 <follow_path+0xe2>
		dp->fn[NSFLAG] = NS_NONAME;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2280      	movs	r2, #128	; 0x80
 80067b2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80067b6:	2100      	movs	r1, #0
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fe f9e0 	bl	8004b7e <dir_sdi>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80067c4:	e080      	b.n	80068c8 <follow_path+0x1e4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067c6:	463b      	mov	r3, r7
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fd60 	bl	8006290 <create_name>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 80067d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d16f      	bne.n	80068be <follow_path+0x1da>
			res = dir_find(dp);				/* Find an object with the segment name */
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff f8b8 	bl	8005954 <dir_find>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80067f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 80067f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d021      	beq.n	8006840 <follow_path+0x15c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006800:	2b04      	cmp	r3, #4
 8006802:	d15e      	bne.n	80068c2 <follow_path+0x1de>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8006804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00d      	beq.n	800682c <follow_path+0x148>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d04e      	beq.n	80068ba <follow_path+0x1d6>
						dp->fn[NSFLAG] = NS_NONAME;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2280      	movs	r2, #128	; 0x80
 8006820:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800682a:	e04a      	b.n	80068c2 <follow_path+0x1de>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800682c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d144      	bne.n	80068c2 <follow_path+0x1de>
 8006838:	2305      	movs	r3, #5
 800683a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800683e:	e040      	b.n	80068c2 <follow_path+0x1de>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d13c      	bne.n	80068c6 <follow_path+0x1e2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	799b      	ldrb	r3, [r3, #6]
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <follow_path+0x17c>
				res = FR_NO_PATH; break;
 8006858:	2305      	movs	r3, #5
 800685a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800685e:	e033      	b.n	80068c8 <follow_path+0x1e4>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8006860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d118      	bne.n	800689a <follow_path+0x1b6>
				dp->obj.c_scl = dp->obj.sclust;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006876:	4613      	mov	r3, r2
 8006878:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	79d2      	ldrb	r2, [r2, #7]
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4619      	mov	r1, r3
 8006892:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006894:	f7fe fe6a 	bl	800556c <init_alloc_info>
 8006898:	e795      	b.n	80067c6 <follow_path+0xe2>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800689a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a8:	4413      	add	r3, r2
 80068aa:	4619      	mov	r1, r3
 80068ac:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80068ae:	f7fe faed 	bl	8004e8c <ld_clust>
 80068b2:	4602      	mov	r2, r0
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	609a      	str	r2, [r3, #8]
 80068b8:	e785      	b.n	80067c6 <follow_path+0xe2>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80068ba:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068bc:	e783      	b.n	80067c6 <follow_path+0xe2>
			if (res != FR_OK) break;
 80068be:	bf00      	nop
 80068c0:	e002      	b.n	80068c8 <follow_path+0x1e4>
				break;
 80068c2:	bf00      	nop
 80068c4:	e000      	b.n	80068c8 <follow_path+0x1e4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80068c6:	bf00      	nop
			}
		}
	}

	return res;
 80068c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3768      	adds	r7, #104	; 0x68
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bdb0      	pop	{r4, r5, r7, pc}

080068d4 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b089      	sub	sp, #36	; 0x24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <get_ldnumber+0x22>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	e02e      	b.n	8006954 <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	61fa      	str	r2, [r7, #28]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b1f      	cmp	r3, #31
 8006904:	d902      	bls.n	800690c <get_ldnumber+0x38>
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2b3a      	cmp	r3, #58	; 0x3a
 800690a:	d1f4      	bne.n	80068f6 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b3a      	cmp	r3, #58	; 0x3a
 8006910:	d11c      	bne.n	800694c <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8006912:	2301      	movs	r3, #1
 8006914:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b2f      	cmp	r3, #47	; 0x2f
 800691c:	d90c      	bls.n	8006938 <get_ldnumber+0x64>
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b39      	cmp	r3, #57	; 0x39
 8006924:	d808      	bhi.n	8006938 <get_ldnumber+0x64>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	3302      	adds	r3, #2
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	429a      	cmp	r2, r3
 800692e:	d103      	bne.n	8006938 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	3b30      	subs	r3, #48	; 0x30
 8006936:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	dc04      	bgt.n	8006948 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	e003      	b.n	8006954 <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <get_ldnumber+0x8c>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8006952:	697b      	ldr	r3, [r7, #20]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3724      	adds	r7, #36	; 0x24
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	200056a6 	.word	0x200056a6

08006964 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	711a      	strb	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f04f 32ff 	mov.w	r2, #4294967295
 800697a:	649a      	str	r2, [r3, #72]	; 0x48
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fd fa82 	bl	8003e88 <move_window>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <check_fs+0x2a>
 800698a:	2304      	movs	r3, #4
 800698c:	e099      	b.n	8006ac2 <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	334c      	adds	r3, #76	; 0x4c
 8006992:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006996:	4618      	mov	r0, r3
 8006998:	f7fc ffbf 	bl	800391a <ld_word>
 800699c:	4603      	mov	r3, r0
 800699e:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 80069a0:	89fb      	ldrh	r3, [r7, #14]
 80069a2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10b      	bne.n	80069c2 <check_fs+0x5e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	334c      	adds	r3, #76	; 0x4c
 80069ae:	220b      	movs	r2, #11
 80069b0:	4946      	ldr	r1, [pc, #280]	; (8006acc <check_fs+0x168>)
 80069b2:	4618      	mov	r0, r3
 80069b4:	f010 f954 	bl	8016c60 <memcmp>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <check_fs+0x5e>
 80069be:	2301      	movs	r3, #1
 80069c0:	e07f      	b.n	8006ac2 <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069c8:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80069ca:	7b7b      	ldrb	r3, [r7, #13]
 80069cc:	2beb      	cmp	r3, #235	; 0xeb
 80069ce:	d005      	beq.n	80069dc <check_fs+0x78>
 80069d0:	7b7b      	ldrb	r3, [r7, #13]
 80069d2:	2be9      	cmp	r3, #233	; 0xe9
 80069d4:	d002      	beq.n	80069dc <check_fs+0x78>
 80069d6:	7b7b      	ldrb	r3, [r7, #13]
 80069d8:	2be8      	cmp	r3, #232	; 0xe8
 80069da:	d16a      	bne.n	8006ab2 <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d10c      	bne.n	8006a00 <check_fs+0x9c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	334c      	adds	r3, #76	; 0x4c
 80069ea:	3352      	adds	r3, #82	; 0x52
 80069ec:	2208      	movs	r2, #8
 80069ee:	4938      	ldr	r1, [pc, #224]	; (8006ad0 <check_fs+0x16c>)
 80069f0:	4618      	mov	r0, r3
 80069f2:	f010 f935 	bl	8016c60 <memcmp>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 80069fc:	2300      	movs	r3, #0
 80069fe:	e060      	b.n	8006ac2 <check_fs+0x15e>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	334c      	adds	r3, #76	; 0x4c
 8006a04:	330b      	adds	r3, #11
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fc ff87 	bl	800391a <ld_word>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a16:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8006a18:	897a      	ldrh	r2, [r7, #10]
 8006a1a:	897b      	ldrh	r3, [r7, #10]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d146      	bne.n	8006ab2 <check_fs+0x14e>
 8006a24:	897b      	ldrh	r3, [r7, #10]
 8006a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2a:	d342      	bcc.n	8006ab2 <check_fs+0x14e>
 8006a2c:	897b      	ldrh	r3, [r7, #10]
 8006a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a32:	d83e      	bhi.n	8006ab2 <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8006a34:	7b7b      	ldrb	r3, [r7, #13]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03b      	beq.n	8006ab2 <check_fs+0x14e>
 8006a3a:	7b7a      	ldrb	r2, [r7, #13]
 8006a3c:	7b7b      	ldrb	r3, [r7, #13]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d135      	bne.n	8006ab2 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	334c      	adds	r3, #76	; 0x4c
 8006a4a:	330e      	adds	r3, #14
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fc ff64 	bl	800391a <ld_word>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02c      	beq.n	8006ab2 <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d826      	bhi.n	8006ab2 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	334c      	adds	r3, #76	; 0x4c
 8006a68:	3311      	adds	r3, #17
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fc ff55 	bl	800391a <ld_word>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01d      	beq.n	8006ab2 <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	334c      	adds	r3, #76	; 0x4c
 8006a7a:	3313      	adds	r3, #19
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fc ff4c 	bl	800391a <ld_word>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b7f      	cmp	r3, #127	; 0x7f
 8006a86:	d809      	bhi.n	8006a9c <check_fs+0x138>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	334c      	adds	r3, #76	; 0x4c
 8006a8c:	3320      	adds	r3, #32
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fc ff5a 	bl	8003948 <ld_dword>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a9a:	d30a      	bcc.n	8006ab2 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	334c      	adds	r3, #76	; 0x4c
 8006aa0:	3316      	adds	r3, #22
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fc ff39 	bl	800391a <ld_word>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e007      	b.n	8006ac2 <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8006ab2:	89fb      	ldrh	r3, [r7, #14]
 8006ab4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d101      	bne.n	8006ac0 <check_fs+0x15c>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e000      	b.n	8006ac2 <check_fs+0x15e>
 8006ac0:	2303      	movs	r3, #3
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	08019f00 	.word	0x08019f00
 8006ad0:	08019f0c 	.word	0x08019f0c

08006ad4 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8006ade:	2100      	movs	r1, #0
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff3f 	bl	8006964 <check_fs>
 8006ae6:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d007      	beq.n	8006afe <find_volume+0x2a>
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d802      	bhi.n	8006afa <find_volume+0x26>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <find_volume+0x2a>
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	e045      	b.n	8006b8a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e014      	b.n	8006b2e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8006b12:	4413      	add	r3, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fc ff17 	bl	8003948 <ld_dword>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	3320      	adds	r3, #32
 8006b22:	443b      	add	r3, r7
 8006b24:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d9e7      	bls.n	8006b04 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <find_volume+0x6c>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <find_volume+0x6e>
 8006b40:	2300      	movs	r3, #0
 8006b42:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	3320      	adds	r3, #32
 8006b4a:	443b      	add	r3, r7
 8006b4c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <find_volume+0x98>
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	3320      	adds	r3, #32
 8006b5a:	443b      	add	r3, r7
 8006b5c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fefe 	bl	8006964 <check_fs>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	e000      	b.n	8006b6e <find_volume+0x9a>
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d108      	bne.n	8006b88 <find_volume+0xb4>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d905      	bls.n	8006b88 <find_volume+0xb4>
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d9dd      	bls.n	8006b44 <find_volume+0x70>
	return fmt;
 8006b88:	69bb      	ldr	r3, [r7, #24]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8006b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b98:	b09a      	sub	sp, #104	; 0x68
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	61f8      	str	r0, [r7, #28]
 8006b9e:	61b9      	str	r1, [r7, #24]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006baa:	69f8      	ldr	r0, [r7, #28]
 8006bac:	f7ff fe92 	bl	80068d4 <get_ldnumber>
 8006bb0:	64b8      	str	r0, [r7, #72]	; 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 8006bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da01      	bge.n	8006bbc <mount_volume+0x28>
 8006bb8:	230b      	movs	r3, #11
 8006bba:	e322      	b.n	8007202 <mount_volume+0x66e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006bbc:	4aa4      	ldr	r2, [pc, #656]	; (8006e50 <mount_volume+0x2bc>)
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc4:	647b      	str	r3, [r7, #68]	; 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8006bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <mount_volume+0x3c>
 8006bcc:	230c      	movs	r3, #12
 8006bce:	e318      	b.n	8007202 <mount_volume+0x66e>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8006bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01a      	beq.n	8006c1c <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 8006be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f002 fb66 	bl	80092bc <disk_status>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006bf6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10c      	bne.n	8006c1c <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <mount_volume+0x84>
 8006c08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 8006c14:	230a      	movs	r3, #10
 8006c16:	e2f4      	b.n	8007202 <mount_volume+0x66e>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e2f2      	b.n	8007202 <mount_volume+0x66e>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8006c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 fa62 	bl	80090f0 <disk_initialize>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006c32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <mount_volume+0xae>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e2df      	b.n	8007202 <mount_volume+0x66e>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <mount_volume+0xc4>
 8006c48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <mount_volume+0xc4>
		return FR_WRITE_PROTECTED;
 8006c54:	230a      	movs	r3, #10
 8006c56:	e2d4      	b.n	8007202 <mount_volume+0x66e>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006c5c:	f7ff ff3a 	bl	8006ad4 <find_volume>
 8006c60:	65b8      	str	r0, [r7, #88]	; 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8006c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d101      	bne.n	8006c6c <mount_volume+0xd8>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e2ca      	b.n	8007202 <mount_volume+0x66e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d901      	bls.n	8006c76 <mount_volume+0xe2>
 8006c72:	230d      	movs	r3, #13
 8006c74:	e2c5      	b.n	8007202 <mount_volume+0x66e>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8006c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8006c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	f040 813e 	bne.w	8006f00 <mount_volume+0x36c>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8006c84:	230b      	movs	r3, #11
 8006c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c88:	e002      	b.n	8006c90 <mount_volume+0xfc>
 8006c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c92:	2b3f      	cmp	r3, #63	; 0x3f
 8006c94:	d806      	bhi.n	8006ca4 <mount_volume+0x110>
 8006c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9a:	4413      	add	r3, r2
 8006c9c:	334c      	adds	r3, #76	; 0x4c
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0f2      	beq.n	8006c8a <mount_volume+0xf6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8006ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca6:	2b3f      	cmp	r3, #63	; 0x3f
 8006ca8:	d801      	bhi.n	8006cae <mount_volume+0x11a>
 8006caa:	230d      	movs	r3, #13
 8006cac:	e2a9      	b.n	8007202 <mount_volume+0x66e>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8006cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb0:	334c      	adds	r3, #76	; 0x4c
 8006cb2:	3368      	adds	r3, #104	; 0x68
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fc fe30 	bl	800391a <ld_word>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc0:	d001      	beq.n	8006cc6 <mount_volume+0x132>
 8006cc2:	230d      	movs	r3, #13
 8006cc4:	e29d      	b.n	8007202 <mount_volume+0x66e>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8006cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006ccc:	2b09      	cmp	r3, #9
 8006cce:	d001      	beq.n	8006cd4 <mount_volume+0x140>
			return FR_NO_FILESYSTEM;
 8006cd0:	230d      	movs	r3, #13
 8006cd2:	e296      	b.n	8007202 <mount_volume+0x66e>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd6:	334c      	adds	r3, #76	; 0x4c
 8006cd8:	3348      	adds	r3, #72	; 0x48
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fc fe56 	bl	800398c <ld_qword>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	1851      	adds	r1, r2, r1
 8006cf0:	6039      	str	r1, [r7, #0]
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	eb43 0101 	adc.w	r1, r3, r1
 8006cf8:	6079      	str	r1, [r7, #4]
 8006cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 8006d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d301      	bcc.n	8006d0e <mount_volume+0x17a>
 8006d0a:	230d      	movs	r3, #13
 8006d0c:	e279      	b.n	8007202 <mount_volume+0x66e>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d10:	334c      	adds	r3, #76	; 0x4c
 8006d12:	3354      	adds	r3, #84	; 0x54
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fc fe17 	bl	8003948 <ld_dword>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8006d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d22:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8006d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d28:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d2c:	78db      	ldrb	r3, [r3, #3]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d001      	beq.n	8006d36 <mount_volume+0x1a2>
 8006d32:	230d      	movs	r3, #13
 8006d34:	e265      	b.n	8007202 <mount_volume+0x66e>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8006d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4093      	lsls	r3, r2
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d46:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8006d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4a:	895b      	ldrh	r3, [r3, #10]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <mount_volume+0x1c0>
 8006d50:	230d      	movs	r3, #13
 8006d52:	e256      	b.n	8007202 <mount_volume+0x66e>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8006d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d56:	334c      	adds	r3, #76	; 0x4c
 8006d58:	335c      	adds	r3, #92	; 0x5c
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fc fdf4 	bl	8003948 <ld_dword>
 8006d60:	6338      	str	r0, [r7, #48]	; 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	4a3b      	ldr	r2, [pc, #236]	; (8006e54 <mount_volume+0x2c0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <mount_volume+0x1da>
 8006d6a:	230d      	movs	r3, #13
 8006d6c:	e249      	b.n	8007202 <mount_volume+0x66e>
		fs->n_fatent = nclst + 2;
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	1c9a      	adds	r2, r3, #2
 8006d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d74:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8006d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d7a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8006d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7e:	334c      	adds	r3, #76	; 0x4c
 8006d80:	3358      	adds	r3, #88	; 0x58
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fc fde0 	bl	8003948 <ld_dword>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8c:	441a      	add	r2, r3
 8006d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8006d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d94:	334c      	adds	r3, #76	; 0x4c
 8006d96:	3350      	adds	r3, #80	; 0x50
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fc fdd5 	bl	8003948 <ld_dword>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da2:	441a      	add	r2, r3
 8006da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8006da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	2200      	movs	r2, #0
 8006dae:	469a      	mov	sl, r3
 8006db0:	4693      	mov	fp, r2
 8006db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db4:	895b      	ldrh	r3, [r3, #10]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4698      	mov	r8, r3
 8006dc2:	4691      	mov	r9, r2
 8006dc4:	eb1a 0408 	adds.w	r4, sl, r8
 8006dc8:	eb4b 0509 	adc.w	r5, fp, r9
 8006dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dd0:	42a2      	cmp	r2, r4
 8006dd2:	41ab      	sbcs	r3, r5
 8006dd4:	d201      	bcs.n	8006dda <mount_volume+0x246>
 8006dd6:	230d      	movs	r3, #13
 8006dd8:	e213      	b.n	8007202 <mount_volume+0x66e>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8006dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ddc:	334c      	adds	r3, #76	; 0x4c
 8006dde:	3360      	adds	r3, #96	; 0x60
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fc fdb1 	bl	8003948 <ld_dword>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dea:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	657b      	str	r3, [r7, #84]	; 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 8006df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11c      	bne.n	8006e34 <mount_volume+0x2a0>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8006dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfc:	895b      	ldrh	r3, [r3, #10]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d301      	bcc.n	8006e0a <mount_volume+0x276>
 8006e06:	230d      	movs	r3, #13
 8006e08:	e1fb      	b.n	8007202 <mount_volume+0x66e>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8006e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006e12:	f7fd f8d5 	bl	8003fc0 <clst2sect>
 8006e16:	4602      	mov	r2, r0
 8006e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e1a:	4413      	add	r3, r2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006e20:	f7fd f832 	bl	8003e88 <move_window>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <mount_volume+0x29a>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e1e9      	b.n	8007202 <mount_volume+0x66e>
				so++;
 8006e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e30:	3301      	adds	r3, #1
 8006e32:	657b      	str	r3, [r7, #84]	; 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8006e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e38:	4413      	add	r3, r2
 8006e3a:	334c      	adds	r3, #76	; 0x4c
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b81      	cmp	r3, #129	; 0x81
 8006e40:	d00a      	beq.n	8006e58 <mount_volume+0x2c4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	3320      	adds	r3, #32
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (i == 0) {
 8006e4c:	e7d2      	b.n	8006df4 <mount_volume+0x260>
 8006e4e:	bf00      	nop
 8006e50:	200056a0 	.word	0x200056a0
 8006e54:	7ffffffd 	.word	0x7ffffffd
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8006e58:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8006e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8006e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e62:	3314      	adds	r3, #20
 8006e64:	4413      	add	r3, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fc fd6e 	bl	8003948 <ld_dword>
 8006e6c:	6538      	str	r0, [r7, #80]	; 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8006e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d904      	bls.n	8006e7e <mount_volume+0x2ea>
 8006e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d301      	bcc.n	8006e82 <mount_volume+0x2ee>
 8006e7e:	230d      	movs	r3, #13
 8006e80:	e1bf      	b.n	8007202 <mount_volume+0x66e>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8006e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e88:	895b      	ldrh	r3, [r3, #10]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e8e:	3b02      	subs	r3, #2
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	441a      	add	r2, r3
 8006e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8006e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	09db      	lsrs	r3, r3, #7
 8006ea2:	4413      	add	r3, r2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006ea8:	f7fc ffee 	bl	8003e88 <move_window>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <mount_volume+0x322>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e1a5      	b.n	8007202 <mount_volume+0x66e>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8006eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8006ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fc fd3e 	bl	8003948 <ld_dword>
 8006ecc:	6278      	str	r0, [r7, #36]	; 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d008      	beq.n	8006ee8 <mount_volume+0x354>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed8:	3301      	adds	r3, #1
 8006eda:	653b      	str	r3, [r7, #80]	; 0x50
 8006edc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d0da      	beq.n	8006e9a <mount_volume+0x306>
 8006ee4:	230d      	movs	r3, #13
 8006ee6:	e18c      	b.n	8007202 <mount_volume+0x66e>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8006ee8:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef0:	619a      	str	r2, [r3, #24]
 8006ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef8:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8006efa:	2304      	movs	r3, #4
 8006efc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006efe:	e168      	b.n	80071d2 <mount_volume+0x63e>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f02:	334c      	adds	r3, #76	; 0x4c
 8006f04:	330b      	adds	r3, #11
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fc fd07 	bl	800391a <ld_word>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f12:	d001      	beq.n	8006f18 <mount_volume+0x384>
 8006f14:	230d      	movs	r3, #13
 8006f16:	e174      	b.n	8007202 <mount_volume+0x66e>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1a:	334c      	adds	r3, #76	; 0x4c
 8006f1c:	3316      	adds	r3, #22
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fc fcfb 	bl	800391a <ld_word>
 8006f24:	4603      	mov	r3, r0
 8006f26:	663b      	str	r3, [r7, #96]	; 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <mount_volume+0x3a8>
 8006f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f30:	334c      	adds	r3, #76	; 0x4c
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fc fd07 	bl	8003948 <ld_dword>
 8006f3a:	6638      	str	r0, [r7, #96]	; 0x60
		fs->fsize = fasize;
 8006f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f44:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8006f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f4a:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f4e:	78db      	ldrb	r3, [r3, #3]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d005      	beq.n	8006f60 <mount_volume+0x3cc>
 8006f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f56:	78db      	ldrb	r3, [r3, #3]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d001      	beq.n	8006f60 <mount_volume+0x3cc>
 8006f5c:	230d      	movs	r3, #13
 8006f5e:	e150      	b.n	8007202 <mount_volume+0x66e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f62:	78db      	ldrb	r3, [r3, #3]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	663b      	str	r3, [r7, #96]	; 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7c:	895b      	ldrh	r3, [r3, #10]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <mount_volume+0x400>
 8006f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f84:	895b      	ldrh	r3, [r3, #10]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8a:	895b      	ldrh	r3, [r3, #10]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4013      	ands	r3, r2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <mount_volume+0x404>
 8006f94:	230d      	movs	r3, #13
 8006f96:	e134      	b.n	8007202 <mount_volume+0x66e>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9a:	334c      	adds	r3, #76	; 0x4c
 8006f9c:	3311      	adds	r3, #17
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fc fcbb 	bl	800391a <ld_word>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006faa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fae:	891b      	ldrh	r3, [r3, #8]
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <mount_volume+0x42a>
 8006fba:	230d      	movs	r3, #13
 8006fbc:	e121      	b.n	8007202 <mount_volume+0x66e>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc0:	334c      	adds	r3, #76	; 0x4c
 8006fc2:	3313      	adds	r3, #19
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fc fca8 	bl	800391a <ld_word>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	667b      	str	r3, [r7, #100]	; 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <mount_volume+0x44e>
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd6:	334c      	adds	r3, #76	; 0x4c
 8006fd8:	3320      	adds	r3, #32
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fc fcb4 	bl	8003948 <ld_dword>
 8006fe0:	6678      	str	r0, [r7, #100]	; 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe4:	334c      	adds	r3, #76	; 0x4c
 8006fe6:	330e      	adds	r3, #14
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fc fc96 	bl	800391a <ld_word>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ff2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <mount_volume+0x468>
 8006ff8:	230d      	movs	r3, #13
 8006ffa:	e102      	b.n	8007202 <mount_volume+0x66e>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ffc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007000:	4413      	add	r3, r2
 8007002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007004:	8912      	ldrh	r2, [r2, #8]
 8007006:	0912      	lsrs	r2, r2, #4
 8007008:	b292      	uxth	r2, r2
 800700a:	4413      	add	r3, r2
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800700e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007012:	429a      	cmp	r2, r3
 8007014:	d201      	bcs.n	800701a <mount_volume+0x486>
 8007016:	230d      	movs	r3, #13
 8007018:	e0f3      	b.n	8007202 <mount_volume+0x66e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800701a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007022:	8952      	ldrh	r2, [r2, #10]
 8007024:	fbb3 f3f2 	udiv	r3, r3, r2
 8007028:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <mount_volume+0x4a0>
 8007030:	230d      	movs	r3, #13
 8007032:	e0e6      	b.n	8007202 <mount_volume+0x66e>
		fmt = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	65bb      	str	r3, [r7, #88]	; 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	4a74      	ldr	r2, [pc, #464]	; (800720c <mount_volume+0x678>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d801      	bhi.n	8007044 <mount_volume+0x4b0>
 8007040:	2303      	movs	r3, #3
 8007042:	65bb      	str	r3, [r7, #88]	; 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800704a:	4293      	cmp	r3, r2
 800704c:	d801      	bhi.n	8007052 <mount_volume+0x4be>
 800704e:	2302      	movs	r3, #2
 8007050:	65bb      	str	r3, [r7, #88]	; 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007058:	4293      	cmp	r3, r2
 800705a:	d801      	bhi.n	8007060 <mount_volume+0x4cc>
 800705c:	2301      	movs	r3, #1
 800705e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8007060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <mount_volume+0x4d6>
 8007066:	230d      	movs	r3, #13
 8007068:	e0cb      	b.n	8007202 <mount_volume+0x66e>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	1c9a      	adds	r2, r3, #2
 800706e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007070:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8007072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007076:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007078:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800707a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707c:	441a      	add	r2, r3
 800707e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007080:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 8007082:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	441a      	add	r2, r3
 8007088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708a:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 800708c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800708e:	2b03      	cmp	r3, #3
 8007090:	d11e      	bne.n	80070d0 <mount_volume+0x53c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007094:	334c      	adds	r3, #76	; 0x4c
 8007096:	332a      	adds	r3, #42	; 0x2a
 8007098:	4618      	mov	r0, r3
 800709a:	f7fc fc3e 	bl	800391a <ld_word>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <mount_volume+0x514>
 80070a4:	230d      	movs	r3, #13
 80070a6:	e0ac      	b.n	8007202 <mount_volume+0x66e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80070a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070aa:	891b      	ldrh	r3, [r3, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <mount_volume+0x520>
 80070b0:	230d      	movs	r3, #13
 80070b2:	e0a6      	b.n	8007202 <mount_volume+0x66e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80070b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b6:	334c      	adds	r3, #76	; 0x4c
 80070b8:	332c      	adds	r3, #44	; 0x2c
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fc fc44 	bl	8003948 <ld_dword>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c4:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80070c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ce:	e01e      	b.n	800710e <mount_volume+0x57a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80070d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d2:	891b      	ldrh	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <mount_volume+0x548>
 80070d8:	230d      	movs	r3, #13
 80070da:	e092      	b.n	8007202 <mount_volume+0x66e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80070dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e2:	441a      	add	r2, r3
 80070e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d103      	bne.n	80070f6 <mount_volume+0x562>
 80070ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	e00a      	b.n	800710c <mount_volume+0x578>
 80070f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	4613      	mov	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4413      	add	r3, r2
 8007100:	085a      	lsrs	r2, r3, #1
 8007102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800710c:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800710e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007114:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007118:	0a5b      	lsrs	r3, r3, #9
 800711a:	429a      	cmp	r2, r3
 800711c:	d201      	bcs.n	8007122 <mount_volume+0x58e>
 800711e:	230d      	movs	r3, #13
 8007120:	e06f      	b.n	8007202 <mount_volume+0x66e>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	619a      	str	r2, [r3, #24]
 800712a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007130:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007134:	2280      	movs	r2, #128	; 0x80
 8007136:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8007138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800713a:	2b03      	cmp	r3, #3
 800713c:	d149      	bne.n	80071d2 <mount_volume+0x63e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800713e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007140:	334c      	adds	r3, #76	; 0x4c
 8007142:	3330      	adds	r3, #48	; 0x30
 8007144:	4618      	mov	r0, r3
 8007146:	f7fc fbe8 	bl	800391a <ld_word>
 800714a:	4603      	mov	r3, r0
 800714c:	2b01      	cmp	r3, #1
 800714e:	d140      	bne.n	80071d2 <mount_volume+0x63e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007152:	3301      	adds	r3, #1
 8007154:	4619      	mov	r1, r3
 8007156:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007158:	f7fc fe96 	bl	8003e88 <move_window>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d137      	bne.n	80071d2 <mount_volume+0x63e>
		{
			fs->fsi_flag = 0;
 8007162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007164:	2200      	movs	r2, #0
 8007166:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8007168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716a:	334c      	adds	r3, #76	; 0x4c
 800716c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007170:	4618      	mov	r0, r3
 8007172:	f7fc fbd2 	bl	800391a <ld_word>
 8007176:	4603      	mov	r3, r0
 8007178:	461a      	mov	r2, r3
 800717a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800717e:	429a      	cmp	r2, r3
 8007180:	d127      	bne.n	80071d2 <mount_volume+0x63e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007184:	334c      	adds	r3, #76	; 0x4c
 8007186:	4618      	mov	r0, r3
 8007188:	f7fc fbde 	bl	8003948 <ld_dword>
 800718c:	4603      	mov	r3, r0
 800718e:	4a20      	ldr	r2, [pc, #128]	; (8007210 <mount_volume+0x67c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d11e      	bne.n	80071d2 <mount_volume+0x63e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007196:	334c      	adds	r3, #76	; 0x4c
 8007198:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc fbd3 	bl	8003948 <ld_dword>
 80071a2:	4603      	mov	r3, r0
 80071a4:	4a1b      	ldr	r2, [pc, #108]	; (8007214 <mount_volume+0x680>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d113      	bne.n	80071d2 <mount_volume+0x63e>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80071aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ac:	334c      	adds	r3, #76	; 0x4c
 80071ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fc fbc8 	bl	8003948 <ld_dword>
 80071b8:	4602      	mov	r2, r0
 80071ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071bc:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80071be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071c0:	334c      	adds	r3, #76	; 0x4c
 80071c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fc fbbe 	bl	8003948 <ld_dword>
 80071cc:	4602      	mov	r2, r0
 80071ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80071d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80071da:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <mount_volume+0x684>)
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	3301      	adds	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <mount_volume+0x684>)
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <mount_volume+0x684>)
 80071e8:	881a      	ldrh	r2, [r3, #0]
 80071ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ec:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80071ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f0:	4a0a      	ldr	r2, [pc, #40]	; (800721c <mount_volume+0x688>)
 80071f2:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 80071f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f6:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <mount_volume+0x68c>)
 80071f8:	611a      	str	r2, [r3, #16]
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80071fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fc:	2200      	movs	r2, #0
 80071fe:	61da      	str	r2, [r3, #28]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3768      	adds	r7, #104	; 0x68
 8007206:	46bd      	mov	sp, r7
 8007208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800720c:	0ffffff5 	.word	0x0ffffff5
 8007210:	41615252 	.word	0x41615252
 8007214:	61417272 	.word	0x61417272
 8007218:	200056a4 	.word	0x200056a4
 800721c:	20005908 	.word	0x20005908
 8007220:	200056a8 	.word	0x200056a8

08007224 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800722e:	2309      	movs	r3, #9
 8007230:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01c      	beq.n	8007272 <validate+0x4e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d018      	beq.n	8007272 <validate+0x4e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d013      	beq.n	8007272 <validate+0x4e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	889a      	ldrh	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	88db      	ldrh	r3, [r3, #6]
 8007254:	429a      	cmp	r2, r3
 8007256:	d10c      	bne.n	8007272 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	4618      	mov	r0, r3
 8007260:	f002 f82c 	bl	80092bc <disk_status>
 8007264:	4603      	mov	r3, r0
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <validate+0x4e>
			res = FR_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <validate+0x5a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	e000      	b.n	8007280 <validate+0x5c>
 800727e:	2300      	movs	r3, #0
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	6013      	str	r3, [r2, #0]
	return res;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 80072a2:	f107 0310 	add.w	r3, r7, #16
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fb14 	bl	80068d4 <get_ldnumber>
 80072ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da01      	bge.n	80072b8 <f_mount+0x28>
 80072b4:	230b      	movs	r3, #11
 80072b6:	e02e      	b.n	8007316 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 80072b8:	4a19      	ldr	r2, [pc, #100]	; (8007320 <f_mount+0x90>)
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d007      	beq.n	80072d8 <f_mount+0x48>
		FatFs[vol] = 0;
 80072c8:	4a15      	ldr	r2, [pc, #84]	; (8007320 <f_mount+0x90>)
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2100      	movs	r1, #0
 80072ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	490c      	ldr	r1, [pc, #48]	; (8007320 <f_mount+0x90>)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <f_mount+0x70>
 80072fc:	2300      	movs	r3, #0
 80072fe:	e00a      	b.n	8007316 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007300:	f107 010c 	add.w	r1, r7, #12
 8007304:	f107 0308 	add.w	r3, r7, #8
 8007308:	2200      	movs	r2, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fc42 	bl	8006b94 <mount_volume>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007314:	7dfb      	ldrb	r3, [r7, #23]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200056a0 	.word	0x200056a0

08007324 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	b0a7      	sub	sp, #156	; 0x9c
 800732a:	af00      	add	r7, sp, #0
 800732c:	61f8      	str	r0, [r7, #28]
 800732e:	61b9      	str	r1, [r7, #24]
 8007330:	4613      	mov	r3, r2
 8007332:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <f_open+0x1a>
 800733a:	2309      	movs	r3, #9
 800733c:	e229      	b.n	8007792 <f_open+0x46e>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007344:	75fb      	strb	r3, [r7, #23]
	res = mount_volume(&path, &fs, mode);
 8007346:	7dfa      	ldrb	r2, [r7, #23]
 8007348:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800734c:	f107 0318 	add.w	r3, r7, #24
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff fc1f 	bl	8006b94 <mount_volume>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800735c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 820d 	bne.w	8007780 <f_open+0x45c>
		dj.obj.fs = fs;
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007370:	4611      	mov	r1, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff f9b6 	bl	80066e4 <follow_path>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800737e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007382:	2b00      	cmp	r3, #0
 8007384:	d107      	bne.n	8007396 <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007386:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800738a:	b25b      	sxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	da02      	bge.n	8007396 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007390:	2306      	movs	r3, #6
 8007392:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	f003 031c 	and.w	r3, r3, #28
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80d6 	beq.w	800754e <f_open+0x22a>
			if (res != FR_OK) {					/* No file, create new */
 80073a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d010      	beq.n	80073cc <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80073aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d107      	bne.n	80073c2 <f_open+0x9e>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80073b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fbf4 	bl	8005ba4 <dir_register>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	f043 0308 	orr.w	r3, r3, #8
 80073c8:	75fb      	strb	r3, [r7, #23]
 80073ca:	e011      	b.n	80073f0 <f_open+0xcc>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80073cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073d0:	f003 0311 	and.w	r3, r3, #17
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <f_open+0xbc>
					res = FR_DENIED;
 80073d8:	2307      	movs	r3, #7
 80073da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80073de:	e007      	b.n	80073f0 <f_open+0xcc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <f_open+0xcc>
 80073ea:	2308      	movs	r3, #8
 80073ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80073f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 80c6 	bne.w	8007586 <f_open+0x262>
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80c0 	beq.w	8007586 <f_open+0x262>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b04      	cmp	r3, #4
 800740c:	d14e      	bne.n	80074ac <f_open+0x188>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe f8a6 	bl	800556c <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	3302      	adds	r3, #2
 8007426:	221e      	movs	r2, #30
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f00f fc36 	bl	8016c9c <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	3326      	adds	r3, #38	; 0x26
 8007436:	221a      	movs	r2, #26
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f00f fc2e 	bl	8016c9c <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	3304      	adds	r3, #4
 8007446:	2220      	movs	r2, #32
 8007448:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f103 0408 	add.w	r4, r3, #8
 8007452:	f001 fbf1 	bl	8008c38 <get_fattime>
 8007456:	4603      	mov	r3, r0
 8007458:	4619      	mov	r1, r3
 800745a:	4620      	mov	r0, r4
 800745c:	f7fc fb89 	bl	8003b72 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	3321      	adds	r3, #33	; 0x21
 8007466:	2201      	movs	r2, #1
 8007468:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800746a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe f8de 	bl	8005630 <store_xdir>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800747a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 8081 	bne.w	8007586 <f_open+0x262>
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d07c      	beq.n	8007586 <f_open+0x262>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800748c:	69f8      	ldr	r0, [r7, #28]
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	4619      	mov	r1, r3
 8007496:	f7fd f90d 	bl	80046b4 <remove_chain>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	3a01      	subs	r2, #1
 80074a8:	615a      	str	r2, [r3, #20]
 80074aa:	e06c      	b.n	8007586 <f_open+0x262>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 80074ac:	f001 fbc4 	bl	8008c38 <get_fattime>
 80074b0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					st_dword(dj.dir + DIR_CrtTime, tm);
 80074b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074b6:	330e      	adds	r3, #14
 80074b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fc fb58 	bl	8003b72 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 80074c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c4:	3316      	adds	r3, #22
 80074c6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fc fb51 	bl	8003b72 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd fcd8 	bl	8004e8c <ld_clust>
 80074dc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80074e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e2:	330b      	adds	r3, #11
 80074e4:	2220      	movs	r2, #32
 80074e6:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80074ec:	2200      	movs	r2, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fd fceb 	bl	8004eca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80074f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f6:	331c      	adds	r3, #28
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fc fb39 	bl	8003b72 <st_dword>
					fs->wflag = 1;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	2201      	movs	r2, #1
 8007504:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8007506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800750a:	2b00      	cmp	r3, #0
 800750c:	d03b      	beq.n	8007586 <f_open+0x262>
						sc = fs->winsect;
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	67fb      	str	r3, [r7, #124]	; 0x7c
						res = remove_chain(&dj.obj, cl, 0);
 8007514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007518:	2200      	movs	r2, #0
 800751a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800751e:	4618      	mov	r0, r3
 8007520:	f7fd f8c8 	bl	80046b4 <remove_chain>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800752a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800752e:	2b00      	cmp	r3, #0
 8007530:	d129      	bne.n	8007586 <f_open+0x262>
							res = move_window(fs, sc);
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007536:	4618      	mov	r0, r3
 8007538:	f7fc fca6 	bl	8003e88 <move_window>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007548:	3a01      	subs	r2, #1
 800754a:	615a      	str	r2, [r3, #20]
 800754c:	e01b      	b.n	8007586 <f_open+0x262>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800754e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007552:	2b00      	cmp	r3, #0
 8007554:	d117      	bne.n	8007586 <f_open+0x262>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8007556:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <f_open+0x246>
					res = FR_NO_FILE;
 8007562:	2304      	movs	r3, #4
 8007564:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007568:	e00d      	b.n	8007586 <f_open+0x262>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <f_open+0x262>
 8007574:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <f_open+0x262>
						res = FR_DENIED;
 8007580:	2307      	movs	r3, #7
 8007582:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 8007586:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10f      	bne.n	80075ae <f_open+0x28a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <f_open+0x27c>
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759e:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80075a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	64da      	str	r2, [r3, #76]	; 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 80075ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f040 80e4 	bne.w	8007780 <f_open+0x45c>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d116      	bne.n	80075ee <f_open+0x2ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80075c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075ca:	4613      	mov	r3, r2
 80075cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80075d4:	431a      	orrs	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80075da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd ffc0 	bl	800556c <init_alloc_info>
 80075ec:	e016      	b.n	800761c <f_open+0x2f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd fc49 	bl	8004e8c <ld_clust>
 80075fa:	4602      	mov	r2, r0
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007602:	331c      	adds	r3, #28
 8007604:	4618      	mov	r0, r3
 8007606:	f7fc f99f 	bl	8003948 <ld_dword>
 800760a:	4603      	mov	r3, r0
 800760c:	2200      	movs	r2, #0
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	60fa      	str	r2, [r7, #12]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007618:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800761c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	88da      	ldrh	r2, [r3, #6]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	7dfa      	ldrb	r2, [r7, #23]
 800762e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;		/* Clear error flag */
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2200      	movs	r2, #0
 800763e:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	3350      	adds	r3, #80	; 0x50
 8007652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007656:	2100      	movs	r1, #0
 8007658:	4618      	mov	r0, r3
 800765a:	f00f fb1f 	bl	8016c9c <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 808b 	beq.w	8007780 <f_open+0x45c>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007670:	4313      	orrs	r3, r2
 8007672:	f000 8085 	beq.w	8007780 <f_open+0x45c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800767c:	69f9      	ldr	r1, [r7, #28]
 800767e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	895b      	ldrh	r3, [r3, #10]
 8007686:	025b      	lsls	r3, r3, #9
 8007688:	67bb      	str	r3, [r7, #120]	; 0x78
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007698:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800769c:	e025      	b.n	80076ea <f_open+0x3c6>
					clst = get_fat(&fp->obj, clst);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fc fca9 	bl	8003ffc <get_fat>
 80076aa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 80076ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d802      	bhi.n	80076bc <f_open+0x398>
 80076b6:	2302      	movs	r3, #2
 80076b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80076bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d102      	bne.n	80076cc <f_open+0x3a8>
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ce:	2200      	movs	r2, #0
 80076d0:	461d      	mov	r5, r3
 80076d2:	4616      	mov	r6, r2
 80076d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80076d8:	1b51      	subs	r1, r2, r5
 80076da:	6039      	str	r1, [r7, #0]
 80076dc:	eb63 0306 	sbc.w	r3, r3, r6
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80076e6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 80076ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <f_open+0x3e2>
 80076f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f4:	2200      	movs	r2, #0
 80076f6:	469a      	mov	sl, r3
 80076f8:	4693      	mov	fp, r2
 80076fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80076fe:	4592      	cmp	sl, r2
 8007700:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007704:	d3cb      	bcc.n	800769e <f_open+0x37a>
				}
				fp->clust = clst;
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800770c:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800770e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007712:	2b00      	cmp	r3, #0
 8007714:	d134      	bne.n	8007780 <f_open+0x45c>
 8007716:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800771a:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800771e:	f04f 0900 	mov.w	r9, #0
 8007722:	ea58 0309 	orrs.w	r3, r8, r9
 8007726:	d02b      	beq.n	8007780 <f_open+0x45c>
					sc = clst2sect(fs, clst);
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800772e:	4618      	mov	r0, r3
 8007730:	f7fc fc46 	bl	8003fc0 <clst2sect>
 8007734:	67f8      	str	r0, [r7, #124]	; 0x7c
					if (sc == 0) {
 8007736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d103      	bne.n	8007744 <f_open+0x420>
						res = FR_INT_ERR;
 800773c:	2302      	movs	r3, #2
 800773e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007742:	e01d      	b.n	8007780 <f_open+0x45c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007744:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	0a42      	lsrs	r2, r0, #9
 8007752:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007756:	0a4b      	lsrs	r3, r1, #9
 8007758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800775a:	441a      	add	r2, r3
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	7858      	ldrb	r0, [r3, #1]
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800776e:	2301      	movs	r3, #1
 8007770:	f001 fdb8 	bl	80092e4 <disk_read>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <f_open+0x45c>
 800777a:	2301      	movs	r3, #1
 800777c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007780:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <f_open+0x46a>
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800778e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8007792:	4618      	mov	r0, r3
 8007794:	379c      	adds	r7, #156	; 0x9c
 8007796:	46bd      	mov	sp, r7
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800779c <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800779c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a0:	b08c      	sub	sp, #48	; 0x30
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f107 0210 	add.w	r2, r7, #16
 80077bc:	4611      	mov	r1, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fd30 	bl	8007224 <validate>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80077ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d108      	bne.n	80077e4 <f_write+0x48>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80077dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <f_write+0x4e>
 80077e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e8:	e17b      	b.n	8007ae2 <f_write+0x346>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <f_write+0x60>
 80077f8:	2307      	movs	r3, #7
 80077fa:	e172      	b.n	8007ae2 <f_write+0x346>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b04      	cmp	r3, #4
 8007802:	f000 815e 	beq.w	8007ac2 <f_write+0x326>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	18d1      	adds	r1, r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007816:	4613      	mov	r3, r2
 8007818:	4299      	cmp	r1, r3
 800781a:	f080 8152 	bcs.w	8007ac2 <f_write+0x326>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007824:	4613      	mov	r3, r2
 8007826:	43db      	mvns	r3, r3
 8007828:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800782a:	e14a      	b.n	8007ac2 <f_write+0x326>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007832:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8007836:	2500      	movs	r5, #0
 8007838:	ea54 0305 	orrs.w	r3, r4, r5
 800783c:	f040 80ef 	bne.w	8007a1e <f_write+0x282>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	f04f 0300 	mov.w	r3, #0
 800784e:	0a42      	lsrs	r2, r0, #9
 8007850:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007854:	0a4b      	lsrs	r3, r1, #9
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	895b      	ldrh	r3, [r3, #10]
 800785a:	3b01      	subs	r3, #1
 800785c:	4013      	ands	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d13a      	bne.n	80078dc <f_write+0x140>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800786c:	4313      	orrs	r3, r2
 800786e:	d10c      	bne.n	800788a <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10e      	bne.n	800789a <f_write+0xfe>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f7fc fff9 	bl	8004878 <create_chain>
 8007886:	62b8      	str	r0, [r7, #40]	; 0x28
 8007888:	e007      	b.n	800789a <f_write+0xfe>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7fc fff0 	bl	8004878 <create_chain>
 8007898:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8115 	beq.w	8007acc <f_write+0x330>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d105      	bne.n	80078b4 <f_write+0x118>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80078b0:	2302      	movs	r3, #2
 80078b2:	e116      	b.n	8007ae2 <f_write+0x346>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d105      	bne.n	80078c8 <f_write+0x12c>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80078c4:	2301      	movs	r3, #1
 80078c6:	e10c      	b.n	8007ae2 <f_write+0x346>
				fp->clust = clst;			/* Update current cluster */
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078cc:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <f_write+0x140>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078da:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078e2:	b25b      	sxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da1b      	bge.n	8007920 <f_write+0x184>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	7858      	ldrb	r0, [r3, #1]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f6:	2301      	movs	r3, #1
 80078f8:	f001 fd5c 	bl	80093b4 <disk_write>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <f_write+0x172>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800790a:	2301      	movs	r3, #1
 800790c:	e0e9      	b.n	8007ae2 <f_write+0x346>
				fp->flag &= (BYTE)~FA_DIRTY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007918:	b2da      	uxtb	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f7fc fb49 	bl	8003fc0 <clst2sect>
 800792e:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d105      	bne.n	8007942 <f_write+0x1a6>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2202      	movs	r2, #2
 800793a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800793e:	2302      	movs	r3, #2
 8007940:	e0cf      	b.n	8007ae2 <f_write+0x346>
			sect += csect;
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	4413      	add	r3, r2
 8007948:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	0a5b      	lsrs	r3, r3, #9
 800794e:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d03f      	beq.n	80079d6 <f_write+0x23a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	4413      	add	r3, r2
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	8952      	ldrh	r2, [r2, #10]
 8007960:	4293      	cmp	r3, r2
 8007962:	d905      	bls.n	8007970 <f_write+0x1d4>
					cc = fs->csize - csect;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	895b      	ldrh	r3, [r3, #10]
 8007968:	461a      	mov	r2, r3
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	7858      	ldrb	r0, [r3, #1]
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	69f9      	ldr	r1, [r7, #28]
 800797a:	f001 fd1b 	bl	80093b4 <disk_write>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <f_write+0x1f4>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800798c:	2301      	movs	r3, #1
 800798e:	e0a8      	b.n	8007ae2 <f_write+0x346>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	429a      	cmp	r2, r3
 800799c:	d917      	bls.n	80079ce <f_write+0x232>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	025b      	lsls	r3, r3, #9
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b6:	4619      	mov	r1, r3
 80079b8:	f00f f962 	bl	8016c80 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	025b      	lsls	r3, r3, #9
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80079d4:	e04a      	b.n	8007a6c <f_write+0x2d0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d01b      	beq.n	8007a18 <f_write+0x27c>
				fp->fptr < fp->obj.objsize &&
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079ec:	4290      	cmp	r0, r2
 80079ee:	eb71 0303 	sbcs.w	r3, r1, r3
 80079f2:	d211      	bcs.n	8007a18 <f_write+0x27c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	7858      	ldrb	r0, [r3, #1]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80079fe:	2301      	movs	r3, #1
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	f001 fc6f 	bl	80092e4 <disk_read>
 8007a06:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <f_write+0x27c>
					ABORT(fs, FR_DISK_ERR);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007a14:	2301      	movs	r3, #1
 8007a16:	e064      	b.n	8007ae2 <f_write+0x346>
			}
#endif
			fp->sect = sect;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007a24:	4613      	mov	r3, r2
 8007a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d901      	bls.n	8007a3c <f_write+0x2a0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007a48:	4613      	mov	r3, r2
 8007a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4e:	440b      	add	r3, r1
 8007a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a52:	69f9      	ldr	r1, [r7, #28]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f00f f913 	bl	8016c80 <memcpy>
		fp->flag |= FA_DIRTY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	441a      	add	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	4413      	add	r3, r2
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a90:	2000      	movs	r0, #0
 8007a92:	4688      	mov	r8, r1
 8007a94:	4681      	mov	r9, r0
 8007a96:	eb12 0a08 	adds.w	sl, r2, r8
 8007a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8007ab0:	4282      	cmp	r2, r0
 8007ab2:	eb73 0c01 	sbcs.w	ip, r3, r1
 8007ab6:	d201      	bcs.n	8007abc <f_write+0x320>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	68f9      	ldr	r1, [r7, #12]
 8007abe:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f47f aeb1 	bne.w	800782c <f_write+0x90>
 8007aca:	e000      	b.n	8007ace <f_write+0x332>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007acc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3730      	adds	r7, #48	; 0x30
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007aec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b09a      	sub	sp, #104	; 0x68
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007afa:	4611      	mov	r1, r2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff fb91 	bl	8007224 <validate>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007b08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f040 8105 	bne.w	8007d1c <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80fd 	beq.w	8007d1c <f_sync+0x230>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b28:	b25b      	sxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da17      	bge.n	8007b5e <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b30:	7858      	ldrb	r0, [r3, #1]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f001 fc39 	bl	80093b4 <disk_write>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <f_sync+0x60>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e0e9      	b.n	8007d20 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007b5e:	f001 f86b 	bl	8008c38 <get_fattime>
 8007b62:	6638      	str	r0, [r7, #96]	; 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8007b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	f040 808c 	bne.w	8007c86 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fc fd3f 	bl	80045f4 <fill_first_frag>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8007b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8e:	4619      	mov	r1, r3
 8007b90:	f7fc fd5f 	bl	8004652 <fill_last_frag>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8007b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 80bc 	bne.w	8007d1c <f_sync+0x230>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	f107 0308 	add.w	r3, r7, #8
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fd fd06 	bl	80055be <load_obj_xdir>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8007bb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 80ad 	bne.w	8007d1c <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8007bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	f042 0220 	orr.w	r2, r2, #32
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	79da      	ldrb	r2, [r3, #7]
 8007bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	3321      	adds	r3, #33	; 0x21
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 8007bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7fb ffba 	bl	8003b72 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 8007bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	f7fb ffdb 	bl	8003bc8 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8007c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c20:	4608      	mov	r0, r1
 8007c22:	f7fb ffd1 	bl	8003bc8 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8007c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fb ff9f 	bl	8003b72 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8007c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	3315      	adds	r3, #21
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8007c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	3310      	adds	r3, #16
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fb ff93 	bl	8003b72 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8007c4c:	f107 0308 	add.w	r3, r7, #8
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fd fced 	bl	8005630 <store_xdir>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007c5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d15b      	bne.n	8007d1c <f_sync+0x230>
							res = sync_fs(fs);
 8007c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fc f93c 	bl	8003ee4 <sync_fs>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007c84:	e04a      	b.n	8007d1c <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7fc f8fa 	bl	8003e88 <move_window>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8007c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d13c      	bne.n	8007d1c <f_sync+0x230>
					dir = fp->dir_ptr;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8007ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007caa:	330b      	adds	r3, #11
 8007cac:	781a      	ldrb	r2, [r3, #0]
 8007cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb0:	330b      	adds	r3, #11
 8007cb2:	f042 0220 	orr.w	r2, r2, #32
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007cc6:	f7fd f900 	bl	8004eca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ccc:	f103 001c 	add.w	r0, r3, #28
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f7fb ff4a 	bl	8003b72 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce0:	3316      	adds	r3, #22
 8007ce2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fb ff44 	bl	8003b72 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cec:	3312      	adds	r3, #18
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fb ff24 	bl	8003b3e <st_word>
					fs->wflag = 1;
 8007cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fc f8f0 	bl	8003ee4 <sync_fs>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3768      	adds	r7, #104	; 0x68
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b098      	sub	sp, #96	; 0x60
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 8007d32:	f107 0108 	add.w	r1, r7, #8
 8007d36:	1d3b      	adds	r3, r7, #4
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe ff2a 	bl	8006b94 <mount_volume>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007d46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d11f      	bne.n	8007d8e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fcc4 	bl	80066e4 <follow_path>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 8007d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d111      	bne.n	8007d8e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007d6a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007d6e:	b25b      	sxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	da03      	bge.n	8007d7c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007d74:	2306      	movs	r3, #6
 8007d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d7a:	e008      	b.n	8007d8e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <f_stat+0x66>
 8007d82:	f107 0308 	add.w	r3, r7, #8
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe f8b7 	bl	8005efc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3760      	adds	r7, #96	; 0x60
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <putc_bfd>:


/* Buffered file write with code conversion */

static void putc_bfd (putbuff* pb, TCHAR c)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]

	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;			/* Write index of pb->buf[] */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	617b      	str	r3, [r7, #20]
	if (i < 0) return;		/* In write error? */
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	db27      	blt.n	8007e02 <putc_bfd+0x68>
	nc = pb->nchr;			/* Write unit counter */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	613b      	str	r3, [r7, #16]
	}
	pb->buf[i++] = (BYTE)wc;
#endif

#else							/* ANSI/OEM input (without re-encoding) */
	pb->buf[i++] = (BYTE)c;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	617a      	str	r2, [r7, #20]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b3b      	cmp	r3, #59	; 0x3b
 8007dca:	dd12      	ble.n	8007df2 <putc_bfd+0x58>
		f_write(pb->fp, pb->buf, (UINT)i, &n);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f103 010c 	add.w	r1, r3, #12
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	f7ff fcde 	bl	800779c <f_write>
		i = (n == (UINT)i) ? 0 : -1;
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d101      	bne.n	8007dec <putc_bfd+0x52>
 8007de8:	2300      	movs	r3, #0
 8007dea:	e001      	b.n	8007df0 <putc_bfd+0x56>
 8007dec:	f04f 33ff 	mov.w	r3, #4294967295
 8007df0:	617b      	str	r3, [r7, #20]
	}
	pb->idx = i;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	605a      	str	r2, [r3, #4]
	pb->nchr = nc + 1;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	609a      	str	r2, [r3, #8]
 8007e00:	e000      	b.n	8007e04 <putc_bfd+0x6a>
	if (i < 0) return;		/* In write error? */
 8007e02:	bf00      	nop
}
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <putc_flush>:


/* Flush remaining characters in the buffer */

static int putc_flush (putbuff* pb)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	db16      	blt.n	8007e48 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f103 010c 	add.w	r1, r3, #12
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	f7ff fcb5 	bl	800779c <f_write>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d107      	bne.n	8007e48 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d102      	bne.n	8007e48 <putc_flush+0x3e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	e001      	b.n	8007e4c <putc_flush+0x42>
	return -1;
 8007e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <putc_init>:


/* Initialize write buffer */

static void putc_init (putbuff* pb, FIL* fp)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
	memset(pb, 0, sizeof (putbuff));
 8007e5e:	224c      	movs	r2, #76	; 0x4c
 8007e60:	2100      	movs	r1, #0
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f00e ff1a 	bl	8016c9c <memset>
	pb->fp = fp;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	601a      	str	r2, [r3, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <ilog10>:
/*-----------------------------------------------------------------------*/
#if FF_PRINT_FLOAT && FF_INTDEF == 2
#include <math.h>

static int ilog10 (double n)	/* Calculate log10(n) in integer output */
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	e9c7 0100 	strd	r0, r1, [r7]
	int rv = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]

	while (n >= 10) {	/* Decimate digit in right shift */
 8007e86:	e026      	b.n	8007ed6 <ilog10+0x5e>
		if (n >= 100000) {
 8007e88:	a333      	add	r3, pc, #204	; (adr r3, 8007f58 <ilog10+0xe0>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e92:	f7f8 fe0f 	bl	8000ab4 <__aeabi_dcmpge>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00e      	beq.n	8007eba <ilog10+0x42>
			n /= 100000; rv += 5;
 8007e9c:	a32e      	add	r3, pc, #184	; (adr r3, 8007f58 <ilog10+0xe0>)
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ea6:	f7f8 fca9 	bl	80007fc <__aeabi_ddiv>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	e9c7 2300 	strd	r2, r3, [r7]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3305      	adds	r3, #5
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	e00d      	b.n	8007ed6 <ilog10+0x5e>
		} else {
			n /= 10; rv++;
 8007eba:	f04f 0200 	mov.w	r2, #0
 8007ebe:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <ilog10+0xf0>)
 8007ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ec4:	f7f8 fc9a 	bl	80007fc <__aeabi_ddiv>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	e9c7 2300 	strd	r2, r3, [r7]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
	while (n >= 10) {	/* Decimate digit in right shift */
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <ilog10+0xf0>)
 8007edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ee0:	f7f8 fde8 	bl	8000ab4 <__aeabi_dcmpge>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1ce      	bne.n	8007e88 <ilog10+0x10>
		}
	}
	while (n < 1) {		/* Decimate digit in left shift */
 8007eea:	e026      	b.n	8007f3a <ilog10+0xc2>
		if (n < 0.00001) {
 8007eec:	a31c      	add	r3, pc, #112	; (adr r3, 8007f60 <ilog10+0xe8>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef6:	f7f8 fdc9 	bl	8000a8c <__aeabi_dcmplt>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00e      	beq.n	8007f1e <ilog10+0xa6>
			n *= 100000; rv -= 5;
 8007f00:	a315      	add	r3, pc, #84	; (adr r3, 8007f58 <ilog10+0xe0>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f0a:	f7f8 fb4d 	bl	80005a8 <__aeabi_dmul>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	e9c7 2300 	strd	r2, r3, [r7]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3b05      	subs	r3, #5
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	e00d      	b.n	8007f3a <ilog10+0xc2>
		} else {
			n *= 10; rv--;
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	4b11      	ldr	r3, [pc, #68]	; (8007f68 <ilog10+0xf0>)
 8007f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f28:	f7f8 fb3e 	bl	80005a8 <__aeabi_dmul>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	e9c7 2300 	strd	r2, r3, [r7]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
	while (n < 1) {		/* Decimate digit in left shift */
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <ilog10+0xf4>)
 8007f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f44:	f7f8 fda2 	bl	8000a8c <__aeabi_dcmplt>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1ce      	bne.n	8007eec <ilog10+0x74>
		}
	}
	return rv;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	00000000 	.word	0x00000000
 8007f5c:	40f86a00 	.word	0x40f86a00
 8007f60:	88e368f1 	.word	0x88e368f1
 8007f64:	3ee4f8b5 	.word	0x3ee4f8b5
 8007f68:	40240000 	.word	0x40240000
 8007f6c:	3ff00000 	.word	0x3ff00000

08007f70 <i10x>:


static double i10x (int n)	/* Calculate 10^n in integer input */
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	double rv = 1;
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <i10x+0xc0>)
 8007f7e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while (n > 0) {		/* Left shift */
 8007f82:	e01f      	b.n	8007fc4 <i10x+0x54>
		if (n >= 5) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	dd0e      	ble.n	8007fa8 <i10x+0x38>
			rv *= 100000; n -= 5;
 8007f8a:	a327      	add	r3, pc, #156	; (adr r3, 8008028 <i10x+0xb8>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f94:	f7f8 fb08 	bl	80005a8 <__aeabi_dmul>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3b05      	subs	r3, #5
 8007fa4:	607b      	str	r3, [r7, #4]
 8007fa6:	e00d      	b.n	8007fc4 <i10x+0x54>
		} else {
			rv *= 10; n--;
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	4b21      	ldr	r3, [pc, #132]	; (8008034 <i10x+0xc4>)
 8007fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fb2:	f7f8 faf9 	bl	80005a8 <__aeabi_dmul>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	607b      	str	r3, [r7, #4]
	while (n > 0) {		/* Left shift */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	dcdc      	bgt.n	8007f84 <i10x+0x14>
		}
	}
	while (n < 0) {		/* Right shift */
 8007fca:	e020      	b.n	800800e <i10x+0x9e>
		if (n <= -5) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f113 0f04 	cmn.w	r3, #4
 8007fd2:	da0e      	bge.n	8007ff2 <i10x+0x82>
			rv /= 100000; n += 5;
 8007fd4:	a314      	add	r3, pc, #80	; (adr r3, 8008028 <i10x+0xb8>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fde:	f7f8 fc0d 	bl	80007fc <__aeabi_ddiv>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3305      	adds	r3, #5
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	e00d      	b.n	800800e <i10x+0x9e>
		} else {
			rv /= 10; n++;
 8007ff2:	f04f 0200 	mov.w	r2, #0
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <i10x+0xc4>)
 8007ff8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ffc:	f7f8 fbfe 	bl	80007fc <__aeabi_ddiv>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3301      	adds	r3, #1
 800800c:	607b      	str	r3, [r7, #4]
	while (n < 0) {		/* Right shift */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	dbdb      	blt.n	8007fcc <i10x+0x5c>
		}
	}
	return rv;
 8008014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8008018:	4610      	mov	r0, r2
 800801a:	4619      	mov	r1, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	f3af 8000 	nop.w
 8008028:	00000000 	.word	0x00000000
 800802c:	40f86a00 	.word	0x40f86a00
 8008030:	3ff00000 	.word	0x3ff00000
 8008034:	40240000 	.word	0x40240000

08008038 <ftoa>:
	char* buf,	/* Buffer to output the floating point string */
	double val,	/* Value to output */
	int prec,	/* Number of fractional digits */
	TCHAR fmt	/* Notation */
)
{
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	b08f      	sub	sp, #60	; 0x3c
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	e9c7 2300 	strd	r2, r3, [r7]
	int d;
	int e = 0, m = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
 8008048:	2300      	movs	r3, #0
 800804a:	633b      	str	r3, [r7, #48]	; 0x30
	char sign = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	double w;
	const char *er = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	62bb      	str	r3, [r7, #40]	; 0x28
	const char ds = FF_PRINT_FLOAT == 2 ? ',' : '.';
 8008056:	232e      	movs	r3, #46	; 0x2e
 8008058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	if (isnan(val)) {			/* Not a number? */
 800805c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008060:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008064:	f7f8 fd3a 	bl	8000adc <__aeabi_dcmpun>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <ftoa+0x3c>
		er = "NaN";
 800806e:	4b8f      	ldr	r3, [pc, #572]	; (80082ac <ftoa+0x274>)
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
 8008072:	e149      	b.n	8008308 <ftoa+0x2d0>
	} else {
		if (prec < 0) prec = 6;	/* Default precision? (6 fractional digits) */
 8008074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008076:	2b00      	cmp	r3, #0
 8008078:	da01      	bge.n	800807e <ftoa+0x46>
 800807a:	2306      	movs	r3, #6
 800807c:	653b      	str	r3, [r7, #80]	; 0x50
		if (val < 0) {			/* Negative? */
 800807e:	f04f 0200 	mov.w	r2, #0
 8008082:	f04f 0300 	mov.w	r3, #0
 8008086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808a:	f7f8 fcff 	bl	8000a8c <__aeabi_dcmplt>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00f      	beq.n	80080b4 <ftoa+0x7c>
			val = 0 - val; sign = '-';
 8008094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008098:	f04f 0000 	mov.w	r0, #0
 800809c:	f04f 0100 	mov.w	r1, #0
 80080a0:	f7f8 f8ca 	bl	8000238 <__aeabi_dsub>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	e9c7 2300 	strd	r2, r3, [r7]
 80080ac:	232d      	movs	r3, #45	; 0x2d
 80080ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80080b2:	e002      	b.n	80080ba <ftoa+0x82>
		} else {
			sign = '+';
 80080b4:	232b      	movs	r3, #43	; 0x2b
 80080b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		if (isinf(val)) {		/* Infinite? */
 80080ba:	683c      	ldr	r4, [r7, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80080c2:	2301      	movs	r3, #1
 80080c4:	461e      	mov	r6, r3
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ca:	4b79      	ldr	r3, [pc, #484]	; (80082b0 <ftoa+0x278>)
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 fd04 	bl	8000adc <__aeabi_dcmpun>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <ftoa+0xba>
 80080da:	f04f 32ff 	mov.w	r2, #4294967295
 80080de:	4b74      	ldr	r3, [pc, #464]	; (80082b0 <ftoa+0x278>)
 80080e0:	4620      	mov	r0, r4
 80080e2:	4629      	mov	r1, r5
 80080e4:	f7f8 fcdc 	bl	8000aa0 <__aeabi_dcmple>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <ftoa+0xba>
 80080ee:	2300      	movs	r3, #0
 80080f0:	461e      	mov	r6, r3
 80080f2:	b2f3      	uxtb	r3, r6
 80080f4:	f083 0301 	eor.w	r3, r3, #1
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <ftoa+0xcc>
			er = "INF";
 80080fe:	4b6d      	ldr	r3, [pc, #436]	; (80082b4 <ftoa+0x27c>)
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
 8008102:	e071      	b.n	80081e8 <ftoa+0x1b0>
		} else {
			if (fmt == 'f') {	/* Decimal notation? */
 8008104:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008108:	2b66      	cmp	r3, #102	; 0x66
 800810a:	d126      	bne.n	800815a <ftoa+0x122>
				val += i10x(0 - prec) / 2;	/* Round (nearest) */
 800810c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810e:	425b      	negs	r3, r3
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff ff2d 	bl	8007f70 <i10x>
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800811e:	f7f8 fb6d 	bl	80007fc <__aeabi_ddiv>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800812a:	f7f8 f887 	bl	800023c <__adddf3>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	e9c7 2300 	strd	r2, r3, [r7]
				m = ilog10(val);
 8008136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813a:	f7ff fe9d 	bl	8007e78 <ilog10>
 800813e:	6338      	str	r0, [r7, #48]	; 0x30
				if (m < 0) m = 0;
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	2b00      	cmp	r3, #0
 8008144:	da01      	bge.n	800814a <ftoa+0x112>
 8008146:	2300      	movs	r3, #0
 8008148:	633b      	str	r3, [r7, #48]	; 0x30
				if (m + prec + 3 >= SZ_NUM_BUF) er = "OV";	/* Buffer overflow? */
 800814a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800814e:	4413      	add	r3, r2
 8008150:	2b1c      	cmp	r3, #28
 8008152:	dd49      	ble.n	80081e8 <ftoa+0x1b0>
 8008154:	4b58      	ldr	r3, [pc, #352]	; (80082b8 <ftoa+0x280>)
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28
 8008158:	e046      	b.n	80081e8 <ftoa+0x1b0>
			} else {			/* E notation */
				if (val != 0) {		/* Not a true zero? */
 800815a:	f04f 0200 	mov.w	r2, #0
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008166:	f7f8 fc87 	bl	8000a78 <__aeabi_dcmpeq>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d13b      	bne.n	80081e8 <ftoa+0x1b0>
					val += i10x(ilog10(val) - prec) / 2;	/* Round (nearest) */
 8008170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008174:	f7ff fe80 	bl	8007e78 <ilog10>
 8008178:	4602      	mov	r2, r0
 800817a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fef6 	bl	8007f70 <i10x>
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800818c:	f7f8 fb36 	bl	80007fc <__aeabi_ddiv>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008198:	f7f8 f850 	bl	800023c <__adddf3>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	e9c7 2300 	strd	r2, r3, [r7]
					e = ilog10(val);
 80081a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a8:	f7ff fe66 	bl	8007e78 <ilog10>
 80081ac:	6378      	str	r0, [r7, #52]	; 0x34
					if (e > 99 || prec + 7 >= SZ_NUM_BUF) {	/* Buffer overflow or E > +99? */
 80081ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b0:	2b63      	cmp	r3, #99	; 0x63
 80081b2:	dc02      	bgt.n	80081ba <ftoa+0x182>
 80081b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b6:	2b18      	cmp	r3, #24
 80081b8:	dd02      	ble.n	80081c0 <ftoa+0x188>
						er = "OV";
 80081ba:	4b3f      	ldr	r3, [pc, #252]	; (80082b8 <ftoa+0x280>)
 80081bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081be:	e013      	b.n	80081e8 <ftoa+0x1b0>
					} else {
						if (e < -99) e = -99;
 80081c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80081c6:	da02      	bge.n	80081ce <ftoa+0x196>
 80081c8:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
						val /= i10x(e);	/* Normalize */
 80081ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081d0:	f7ff fece 	bl	8007f70 <i10x>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081dc:	f7f8 fb0e 	bl	80007fc <__aeabi_ddiv>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	e9c7 2300 	strd	r2, r3, [r7]
					}
				}
			}
		}
		if (!er) {	/* Not error condition */
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 808c 	bne.w	8008308 <ftoa+0x2d0>
			if (sign == '-') *buf++ = sign;	/* Add a - if negative value */
 80081f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081f4:	2b2d      	cmp	r3, #45	; 0x2d
 80081f6:	d105      	bne.n	8008204 <ftoa+0x1cc>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	60fa      	str	r2, [r7, #12]
 80081fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008202:	701a      	strb	r2, [r3, #0]
			do {				/* Put decimal number */
				if (m == -1) *buf++ = ds;	/* Insert a decimal separator when get into fractional part */
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d105      	bne.n	8008218 <ftoa+0x1e0>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	60fa      	str	r2, [r7, #12]
 8008212:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008216:	701a      	strb	r2, [r3, #0]
				w = i10x(m);				/* Snip the highest digit d */
 8008218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800821a:	f7ff fea9 	bl	8007f70 <i10x>
 800821e:	e9c7 0106 	strd	r0, r1, [r7, #24]
				d = (int)(val / w); val -= d * w;
 8008222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800822a:	f7f8 fae7 	bl	80007fc <__aeabi_ddiv>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	4610      	mov	r0, r2
 8008234:	4619      	mov	r1, r3
 8008236:	f7f8 fc67 	bl	8000b08 <__aeabi_d2iz>
 800823a:	4603      	mov	r3, r0
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	6978      	ldr	r0, [r7, #20]
 8008240:	f7f8 f948 	bl	80004d4 <__aeabi_i2d>
 8008244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008248:	f7f8 f9ae 	bl	80005a8 <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008254:	f7f7 fff0 	bl	8000238 <__aeabi_dsub>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	e9c7 2300 	strd	r2, r3, [r7]
				*buf++ = (char)('0' + d);	/* Put the digit */
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	b2da      	uxtb	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	1c59      	adds	r1, r3, #1
 8008268:	60f9      	str	r1, [r7, #12]
 800826a:	3230      	adds	r2, #48	; 0x30
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]
			} while (--m >= -prec);			/* Output all digits specified by prec */
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	3b01      	subs	r3, #1
 8008274:	633b      	str	r3, [r7, #48]	; 0x30
 8008276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008278:	425b      	negs	r3, r3
 800827a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800827c:	429a      	cmp	r2, r3
 800827e:	dac1      	bge.n	8008204 <ftoa+0x1cc>
			if (fmt != 'f') {	/* Put exponent if needed */
 8008280:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008284:	2b66      	cmp	r3, #102	; 0x66
 8008286:	d03f      	beq.n	8008308 <ftoa+0x2d0>
				*buf++ = (char)fmt;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	60fa      	str	r2, [r7, #12]
 800828e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8008292:	701a      	strb	r2, [r3, #0]
				if (e < 0) {
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	2b00      	cmp	r3, #0
 8008298:	da10      	bge.n	80082bc <ftoa+0x284>
					e = 0 - e; *buf++ = '-';
 800829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829c:	425b      	negs	r3, r3
 800829e:	637b      	str	r3, [r7, #52]	; 0x34
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	60fa      	str	r2, [r7, #12]
 80082a6:	222d      	movs	r2, #45	; 0x2d
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e00c      	b.n	80082c6 <ftoa+0x28e>
 80082ac:	08019f4c 	.word	0x08019f4c
 80082b0:	7fefffff 	.word	0x7fefffff
 80082b4:	08019f50 	.word	0x08019f50
 80082b8:	08019f54 	.word	0x08019f54
				} else {
					*buf++ = '+';
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	60fa      	str	r2, [r7, #12]
 80082c2:	222b      	movs	r2, #43	; 0x2b
 80082c4:	701a      	strb	r2, [r3, #0]
				}
				*buf++ = (char)('0' + e / 10);
 80082c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c8:	4a1f      	ldr	r2, [pc, #124]	; (8008348 <ftoa+0x310>)
 80082ca:	fb82 1203 	smull	r1, r2, r2, r3
 80082ce:	1092      	asrs	r2, r2, #2
 80082d0:	17db      	asrs	r3, r3, #31
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	1c59      	adds	r1, r3, #1
 80082da:	60f9      	str	r1, [r7, #12]
 80082dc:	3230      	adds	r2, #48	; 0x30
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	701a      	strb	r2, [r3, #0]
				*buf++ = (char)('0' + e % 10);
 80082e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082e4:	4b18      	ldr	r3, [pc, #96]	; (8008348 <ftoa+0x310>)
 80082e6:	fb83 1302 	smull	r1, r3, r3, r2
 80082ea:	1099      	asrs	r1, r3, #2
 80082ec:	17d3      	asrs	r3, r2, #31
 80082ee:	1ac9      	subs	r1, r1, r3
 80082f0:	460b      	mov	r3, r1
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	1ad1      	subs	r1, r2, r3
 80082fa:	b2ca      	uxtb	r2, r1
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	1c59      	adds	r1, r3, #1
 8008300:	60f9      	str	r1, [r7, #12]
 8008302:	3230      	adds	r2, #48	; 0x30
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (er) {	/* Error condition */
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d015      	beq.n	800833a <ftoa+0x302>
		if (sign) *buf++ = sign;		/* Add sign if needed */
 800830e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008312:	2b00      	cmp	r3, #0
 8008314:	d005      	beq.n	8008322 <ftoa+0x2ea>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	60fa      	str	r2, [r7, #12]
 800831c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008320:	701a      	strb	r2, [r3, #0]
		do {		/* Put error symbol */
			*buf++ = *er++;
 8008322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008324:	1c53      	adds	r3, r2, #1
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	60f9      	str	r1, [r7, #12]
 800832e:	7812      	ldrb	r2, [r2, #0]
 8008330:	701a      	strb	r2, [r3, #0]
		} while (*er);
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1f3      	bne.n	8008322 <ftoa+0x2ea>
	}
	*buf = 0;	/* Term */
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	701a      	strb	r2, [r3, #0]
}
 8008340:	bf00      	nop
 8008342:	373c      	adds	r7, #60	; 0x3c
 8008344:	46bd      	mov	sp, r7
 8008346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008348:	66666667 	.word	0x66666667

0800834c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800834c:	b40e      	push	{r1, r2, r3}
 800834e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008352:	b0b0      	sub	sp, #192	; 0xc0
 8008354:	af02      	add	r7, sp, #8
 8008356:	6178      	str	r0, [r7, #20]
#else
	DWORD v;
#endif
	TCHAR *tp;
	TCHAR tc, pad;
	TCHAR nul = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char d, str[SZ_NUM_BUF];


	putc_init(&pb, fp);
 800835e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fd75 	bl	8007e54 <putc_init>

	va_start(arp, fmt);
 800836a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800836e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	for (;;) {
		tc = *fmt++;
 8008372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		if (tc == 0) break;			/* End of format string */
 8008382:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 8352 	beq.w	8008a30 <f_printf+0x6e4>
		if (tc != '%') {			/* Not an escape character (pass-through) */
 800838c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008390:	2b25      	cmp	r3, #37	; 0x25
 8008392:	d008      	beq.n	80083a6 <f_printf+0x5a>
			putc_bfd(&pb, tc);
 8008394:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8008398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fcfb 	bl	8007d9a <putc_bfd>
			continue;
 80083a4:	e343      	b.n	8008a2e <f_printf+0x6e2>
		}
		f = w = 0; pad = ' '; prec = -1;	/* Initialize parms */
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083b4:	2320      	movs	r3, #32
 80083b6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		tc = *fmt++;
 80083c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		if (tc == '0') {			/* Flag: '0' padded */
 80083d2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80083d6:	2b30      	cmp	r3, #48	; 0x30
 80083d8:	d10b      	bne.n	80083f2 <f_printf+0xa6>
			pad = '0'; tc = *fmt++;
 80083da:	2330      	movs	r3, #48	; 0x30
 80083dc:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80083e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80083f0:	e00e      	b.n	8008410 <f_printf+0xc4>
		} else if (tc == '-') {		/* Flag: Left aligned */
 80083f2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80083f6:	2b2d      	cmp	r3, #45	; 0x2d
 80083f8:	d10a      	bne.n	8008410 <f_printf+0xc4>
			f = 2; tc = *fmt++;
 80083fa:	2302      	movs	r3, #2
 80083fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		}
		if (tc == '*') {			/* Minimum width from an argument */
 8008410:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008414:	2b2a      	cmp	r3, #42	; 0x2a
 8008416:	d125      	bne.n	8008464 <f_printf+0x118>
			w = va_arg(arp, int);
 8008418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800841c:	1d1a      	adds	r2, r3, #4
 800841e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			tc = *fmt++;
 8008428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8008438:	e01c      	b.n	8008474 <f_printf+0x128>
		} else {
			while (IsDigit(tc)) {	/* Minimum width */
				w = w * 10 + tc - '0';
 800843a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	461a      	mov	r2, r3
 8008448:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800844c:	4413      	add	r3, r2
 800844e:	3b30      	subs	r3, #48	; 0x30
 8008450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				tc = *fmt++;
 8008454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			while (IsDigit(tc)) {	/* Minimum width */
 8008464:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008468:	2b2f      	cmp	r3, #47	; 0x2f
 800846a:	d903      	bls.n	8008474 <f_printf+0x128>
 800846c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008470:	2b39      	cmp	r3, #57	; 0x39
 8008472:	d9e2      	bls.n	800843a <f_printf+0xee>
			}
		}
		if (tc == '.') {			/* Precision */
 8008474:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008478:	2b2e      	cmp	r3, #46	; 0x2e
 800847a:	d13d      	bne.n	80084f8 <f_printf+0x1ac>
			tc = *fmt++;
 800847c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			if (tc == '*') {		/* Precision from an argument */
 800848c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008490:	2b2a      	cmp	r3, #42	; 0x2a
 8008492:	d110      	bne.n	80084b6 <f_printf+0x16a>
				prec = va_arg(arp, int);
 8008494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				tc = *fmt++;
 80084a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80084b4:	e020      	b.n	80084f8 <f_printf+0x1ac>
			} else {
				prec = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				while (IsDigit(tc)) {	/* Precision */
 80084bc:	e014      	b.n	80084e8 <f_printf+0x19c>
					prec = prec * 10 + tc - '0';
 80084be:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	461a      	mov	r2, r3
 80084cc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80084d0:	4413      	add	r3, r2
 80084d2:	3b30      	subs	r3, #48	; 0x30
 80084d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					tc = *fmt++;
 80084d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				while (IsDigit(tc)) {	/* Precision */
 80084e8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80084ec:	2b2f      	cmp	r3, #47	; 0x2f
 80084ee:	d903      	bls.n	80084f8 <f_printf+0x1ac>
 80084f0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80084f4:	2b39      	cmp	r3, #57	; 0x39
 80084f6:	d9e2      	bls.n	80084be <f_printf+0x172>
				}
			}
		}
		if (tc == 'l') {			/* Size: long int */
 80084f8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80084fc:	2b6c      	cmp	r3, #108	; 0x6c
 80084fe:	d11f      	bne.n	8008540 <f_printf+0x1f4>
			f |= 4; tc = *fmt++;
 8008500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008504:	f043 0304 	orr.w	r3, r3, #4
 8008508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800850c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
#if FF_PRINT_LLI && FF_INTDEF == 2
			if (tc == 'l') {		/* Size: long long int */
 800851c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008520:	2b6c      	cmp	r3, #108	; 0x6c
 8008522:	d10d      	bne.n	8008540 <f_printf+0x1f4>
				f |= 8; tc = *fmt++;
 8008524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008528:	f043 0308 	orr.w	r3, r3, #8
 800852c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			}
#endif
		}
		if (tc == 0) break;			/* End of format string */
 8008540:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8275 	beq.w	8008a34 <f_printf+0x6e8>
		switch (tc) {				/* Atgument type is... */
 800854a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800854e:	3b45      	subs	r3, #69	; 0x45
 8008550:	2b33      	cmp	r3, #51	; 0x33
 8008552:	f200 8163 	bhi.w	800881c <f_printf+0x4d0>
 8008556:	a201      	add	r2, pc, #4	; (adr r2, 800855c <f_printf+0x210>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	0800874f 	.word	0x0800874f
 8008560:	0800881d 	.word	0x0800881d
 8008564:	0800881d 	.word	0x0800881d
 8008568:	0800881d 	.word	0x0800881d
 800856c:	0800881d 	.word	0x0800881d
 8008570:	0800881d 	.word	0x0800881d
 8008574:	0800881d 	.word	0x0800881d
 8008578:	0800881d 	.word	0x0800881d
 800857c:	0800881d 	.word	0x0800881d
 8008580:	0800881d 	.word	0x0800881d
 8008584:	0800881d 	.word	0x0800881d
 8008588:	0800881d 	.word	0x0800881d
 800858c:	0800881d 	.word	0x0800881d
 8008590:	0800881d 	.word	0x0800881d
 8008594:	0800881d 	.word	0x0800881d
 8008598:	0800881d 	.word	0x0800881d
 800859c:	0800881d 	.word	0x0800881d
 80085a0:	0800881d 	.word	0x0800881d
 80085a4:	0800881d 	.word	0x0800881d
 80085a8:	08008645 	.word	0x08008645
 80085ac:	0800881d 	.word	0x0800881d
 80085b0:	0800881d 	.word	0x0800881d
 80085b4:	0800881d 	.word	0x0800881d
 80085b8:	0800881d 	.word	0x0800881d
 80085bc:	0800881d 	.word	0x0800881d
 80085c0:	0800881d 	.word	0x0800881d
 80085c4:	0800881d 	.word	0x0800881d
 80085c8:	0800881d 	.word	0x0800881d
 80085cc:	0800881d 	.word	0x0800881d
 80085d0:	0800862d 	.word	0x0800862d
 80085d4:	0800864d 	.word	0x0800864d
 80085d8:	0800863d 	.word	0x0800863d
 80085dc:	0800874f 	.word	0x0800874f
 80085e0:	0800874f 	.word	0x0800874f
 80085e4:	0800881d 	.word	0x0800881d
 80085e8:	0800881d 	.word	0x0800881d
 80085ec:	0800881d 	.word	0x0800881d
 80085f0:	0800881d 	.word	0x0800881d
 80085f4:	0800881d 	.word	0x0800881d
 80085f8:	0800881d 	.word	0x0800881d
 80085fc:	0800881d 	.word	0x0800881d
 8008600:	0800881d 	.word	0x0800881d
 8008604:	08008635 	.word	0x08008635
 8008608:	0800881d 	.word	0x0800881d
 800860c:	0800881d 	.word	0x0800881d
 8008610:	0800881d 	.word	0x0800881d
 8008614:	08008669 	.word	0x08008669
 8008618:	0800881d 	.word	0x0800881d
 800861c:	0800863d 	.word	0x0800863d
 8008620:	0800881d 	.word	0x0800881d
 8008624:	0800881d 	.word	0x0800881d
 8008628:	08008645 	.word	0x08008645
		case 'b':					/* Unsigned binary */
			r = 2; break;
 800862c:	2302      	movs	r3, #2
 800862e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008632:	e0fc      	b.n	800882e <f_printf+0x4e2>

		case 'o':					/* Unsigned octal */
			r = 8; break;
 8008634:	2308      	movs	r3, #8
 8008636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800863a:	e0f8      	b.n	800882e <f_printf+0x4e2>

		case 'd':					/* Signed decimal */
		case 'u': 					/* Unsigned decimal */
			r = 10; break;
 800863c:	230a      	movs	r3, #10
 800863e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008642:	e0f4      	b.n	800882e <f_printf+0x4e2>

		case 'x':					/* Unsigned hexadecimal (lower case) */
		case 'X': 					/* Unsigned hexadecimal (upper case) */
			r = 16; break;
 8008644:	2310      	movs	r3, #16
 8008646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800864a:	e0f0      	b.n	800882e <f_printf+0x4e2>

		case 'c':					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int));
 800864c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008650:	1d1a      	adds	r2, r3, #4
 8008652:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	b2da      	uxtb	r2, r3
 800865a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff fb9a 	bl	8007d9a <putc_bfd>
			continue;
 8008666:	e1e2      	b.n	8008a2e <f_printf+0x6e2>

		case 's':					/* String */
			tp = va_arg(arp, TCHAR*);	/* Get a pointer argument */
 8008668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800866c:	1d1a      	adds	r2, r3, #4
 800866e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			if (!tp) tp = &nul;		/* Null ptr generates a null string */
 8008678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800867c:	2b00      	cmp	r3, #0
 800867e:	d103      	bne.n	8008688 <f_printf+0x33c>
 8008680:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8008684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			for (j = 0; tp[j]; j++) ;	/* j = tcslen(tp) */
 8008688:	2300      	movs	r3, #0
 800868a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800868e:	e004      	b.n	800869a <f_printf+0x34e>
 8008690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008694:	3301      	adds	r3, #1
 8008696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800869a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800869e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086a2:	4413      	add	r3, r2
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f2      	bne.n	8008690 <f_printf+0x344>
			if (prec >= 0 && j > (UINT)prec) j = prec;	/* Limited length of string body */
 80086aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	db17      	blt.n	80086e2 <f_printf+0x396>
 80086b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d911      	bls.n	80086e2 <f_printf+0x396>
 80086be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			for ( ; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);	/* Left pads */
 80086c6:	e00c      	b.n	80086e2 <f_printf+0x396>
 80086c8:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 80086cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fb61 	bl	8007d9a <putc_bfd>
 80086d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d112      	bne.n	8008714 <f_printf+0x3c8>
 80086ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d3e6      	bcc.n	80086c8 <f_printf+0x37c>
			while (*tp && prec--) putc_bfd(&pb, *tp++);	/* Body */
 80086fa:	e00b      	b.n	8008714 <f_printf+0x3c8>
 80086fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008706:	781a      	ldrb	r2, [r3, #0]
 8008708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800870c:	4611      	mov	r1, r2
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff fb43 	bl	8007d9a <putc_bfd>
 8008714:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00d      	beq.n	800873a <f_printf+0x3ee>
 800871e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008722:	1e5a      	subs	r2, r3, #1
 8008724:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e7      	bne.n	80086fc <f_printf+0x3b0>
			while (j++ < w) putc_bfd(&pb, ' ');			/* Right pads */
 800872c:	e005      	b.n	800873a <f_printf+0x3ee>
 800872e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008732:	2120      	movs	r1, #32
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff fb30 	bl	8007d9a <putc_bfd>
 800873a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008748:	429a      	cmp	r2, r3
 800874a:	d8f0      	bhi.n	800872e <f_printf+0x3e2>
			continue;
 800874c:	e16f      	b.n	8008a2e <f_printf+0x6e2>
#if FF_PRINT_FLOAT && FF_INTDEF == 2
		case 'f':					/* Floating point (decimal) */
		case 'e':					/* Floating point (e) */
		case 'E':					/* Floating point (E) */
			ftoa(str, va_arg(arp, double), prec, tc);	/* Make a floating point string */
 800874e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008752:	3307      	adds	r3, #7
 8008754:	f023 0307 	bic.w	r3, r3, #7
 8008758:	f103 0208 	add.w	r2, r3, #8
 800875c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008764:	f107 041c 	add.w	r4, r7, #28
 8008768:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4620      	mov	r0, r4
 800877a:	f7ff fc5d 	bl	8008038 <ftoa>
			for (j = strlen(str); !(f & 2) && j < w; j++) putc_bfd(&pb, pad);	/* Left pads */
 800877e:	f107 031c 	add.w	r3, r7, #28
 8008782:	4618      	mov	r0, r3
 8008784:	f7f7 fcfc 	bl	8000180 <strlen>
 8008788:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800878c:	e00c      	b.n	80087a8 <f_printf+0x45c>
 800878e:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8008792:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fafe 	bl	8007d9a <putc_bfd>
 800879e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087a2:	3301      	adds	r3, #1
 80087a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <f_printf+0x474>
 80087b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3e6      	bcc.n	800878e <f_printf+0x442>
			for (i = 0; str[i]; putc_bfd(&pb, str[i++])) ;	/* Body */
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087c6:	e010      	b.n	80087ea <f_printf+0x49e>
 80087c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80087d2:	33a8      	adds	r3, #168	; 0xa8
 80087d4:	f107 0210 	add.w	r2, r7, #16
 80087d8:	4413      	add	r3, r2
 80087da:	f813 2c9c 	ldrb.w	r2, [r3, #-156]
 80087de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087e2:	4611      	mov	r1, r2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fad8 	bl	8007d9a <putc_bfd>
 80087ea:	f107 021c 	add.w	r2, r7, #28
 80087ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087f2:	4413      	add	r3, r2
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e6      	bne.n	80087c8 <f_printf+0x47c>
			while (j++ < w) putc_bfd(&pb, ' ');	/* Right pads */
 80087fa:	e005      	b.n	8008808 <f_printf+0x4bc>
 80087fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008800:	2120      	movs	r1, #32
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fac9 	bl	8007d9a <putc_bfd>
 8008808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008812:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008816:	429a      	cmp	r2, r3
 8008818:	d8f0      	bhi.n	80087fc <f_printf+0x4b0>
			continue;
 800881a:	e108      	b.n	8008a2e <f_printf+0x6e2>
#endif
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, tc); continue;
 800881c:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8008820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff fab7 	bl	8007d9a <putc_bfd>
 800882c:	e0ff      	b.n	8008a2e <f_printf+0x6e2>
		}

		/* Get an integer argument and put it in numeral */
#if FF_PRINT_LLI && FF_INTDEF == 2
		if (f & 8) {		/* long long argument? */
 800882e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00d      	beq.n	8008856 <f_printf+0x50a>
			v = (QWORD)va_arg(arp, long long);
 800883a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800883e:	3307      	adds	r3, #7
 8008840:	f023 0307 	bic.w	r3, r3, #7
 8008844:	f103 0208 	add.w	r2, r3, #8
 8008848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 8008854:	e038      	b.n	80088c8 <f_printf+0x57c>
		} else if (f & 4) {	/* long argument? */
 8008856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d019      	beq.n	8008896 <f_printf+0x54a>
			v = (tc == 'd') ? (QWORD)(long long)va_arg(arp, long) : (QWORD)va_arg(arp, unsigned long);
 8008862:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008866:	2b64      	cmp	r3, #100	; 0x64
 8008868:	d109      	bne.n	800887e <f_printf+0x532>
 800886a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800886e:	1d1a      	adds	r2, r3, #4
 8008870:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	17da      	asrs	r2, r3, #31
 8008878:	469a      	mov	sl, r3
 800887a:	4693      	mov	fp, r2
 800887c:	e008      	b.n	8008890 <f_printf+0x544>
 800887e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2200      	movs	r2, #0
 800888c:	469a      	mov	sl, r3
 800888e:	4693      	mov	fp, r2
 8008890:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
 8008894:	e018      	b.n	80088c8 <f_printf+0x57c>
		} else {			/* int/short/char argument */
			v = (tc == 'd') ? (QWORD)(long long)va_arg(arp, int) : (QWORD)va_arg(arp, unsigned int);
 8008896:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800889a:	2b64      	cmp	r3, #100	; 0x64
 800889c:	d109      	bne.n	80088b2 <f_printf+0x566>
 800889e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a2:	1d1a      	adds	r2, r3, #4
 80088a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	17da      	asrs	r2, r3, #31
 80088ac:	461d      	mov	r5, r3
 80088ae:	4616      	mov	r6, r2
 80088b0:	e008      	b.n	80088c4 <f_printf+0x578>
 80088b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	461d      	mov	r5, r3
 80088c2:	4616      	mov	r6, r2
 80088c4:	e9c7 5626 	strd	r5, r6, [r7, #152]	; 0x98
		}
		if (tc == 'd' && (v & 0x8000000000000000)) {	/* Negative value? */
 80088c8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80088cc:	2b64      	cmp	r3, #100	; 0x64
 80088ce:	d112      	bne.n	80088f6 <f_printf+0x5aa>
 80088d0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da0e      	bge.n	80088f6 <f_printf+0x5aa>
			v = 0 - v; f |= 1;
 80088d8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80088dc:	2100      	movs	r1, #0
 80088de:	f1d2 0800 	rsbs	r8, r2, #0
 80088e2:	eb61 0903 	sbc.w	r9, r1, r3
 80088e6:	e9c7 8926 	strd	r8, r9, [r7, #152]	; 0x98
 80088ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088ee:	f043 0301 	orr.w	r3, r3, #1
 80088f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		if (tc == 'd' && (v & 0x80000000)) {	/* Negative value? */
			v = 0 - v; f |= 1;
		}
#endif
		i = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		do {	/* Make an integer number string */
			d = (char)(v % r); v /= r;
 80088fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008900:	2200      	movs	r2, #0
 8008902:	60bb      	str	r3, [r7, #8]
 8008904:	60fa      	str	r2, [r7, #12]
 8008906:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800890a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800890e:	f7f8 fc83 	bl	8001218 <__aeabi_uldivmod>
 8008912:	4613      	mov	r3, r2
 8008914:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8008918:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800891c:	2200      	movs	r2, #0
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008926:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800892a:	f7f8 fc75 	bl	8001218 <__aeabi_uldivmod>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			if (d > 9) d += (tc == 'x') ? 0x27 : 0x07;
 8008936:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800893a:	2b09      	cmp	r3, #9
 800893c:	d90b      	bls.n	8008956 <f_printf+0x60a>
 800893e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008942:	2b78      	cmp	r3, #120	; 0x78
 8008944:	d101      	bne.n	800894a <f_printf+0x5fe>
 8008946:	2227      	movs	r2, #39	; 0x27
 8008948:	e000      	b.n	800894c <f_printf+0x600>
 800894a:	2207      	movs	r2, #7
 800894c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8008950:	4413      	add	r3, r2
 8008952:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			str[i++] = d + '0';
 8008956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008960:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8008964:	3230      	adds	r2, #48	; 0x30
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	33a8      	adds	r3, #168	; 0xa8
 800896a:	f107 0110 	add.w	r1, r7, #16
 800896e:	440b      	add	r3, r1
 8008970:	f803 2c9c 	strb.w	r2, [r3, #-156]
		} while (v && i < SZ_NUM_BUF);
 8008974:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008978:	4313      	orrs	r3, r2
 800897a:	d003      	beq.n	8008984 <f_printf+0x638>
 800897c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008980:	2b1f      	cmp	r3, #31
 8008982:	d9bb      	bls.n	80088fc <f_printf+0x5b0>
		if (f & 1) str[i++] = '-';	/* Sign */
 8008984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <f_printf+0x65c>
 8008990:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800899a:	33a8      	adds	r3, #168	; 0xa8
 800899c:	f107 0210 	add.w	r2, r7, #16
 80089a0:	4413      	add	r3, r2
 80089a2:	222d      	movs	r2, #45	; 0x2d
 80089a4:	f803 2c9c 	strb.w	r2, [r3, #-156]
		/* Write it */
		for (j = i; !(f & 2) && j < w; j++) {	/* Left pads */
 80089a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089b0:	e00c      	b.n	80089cc <f_printf+0x680>
			putc_bfd(&pb, pad);
 80089b2:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 80089b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff f9ec 	bl	8007d9a <putc_bfd>
		for (j = i; !(f & 2) && j < w; j++) {	/* Left pads */
 80089c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089c6:	3301      	adds	r3, #1
 80089c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d105      	bne.n	80089e4 <f_printf+0x698>
 80089d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d3e6      	bcc.n	80089b2 <f_printf+0x666>
		}
		do {				/* Body */
			putc_bfd(&pb, (TCHAR)str[--i]);
 80089e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089e8:	3b01      	subs	r3, #1
 80089ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089ee:	f107 021c 	add.w	r2, r7, #28
 80089f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089f6:	4413      	add	r3, r2
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff f9ca 	bl	8007d9a <putc_bfd>
		} while (i);
 8008a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1ea      	bne.n	80089e4 <f_printf+0x698>
		while (j++ < w) {	/* Right pads */
 8008a0e:	e005      	b.n	8008a1c <f_printf+0x6d0>
			putc_bfd(&pb, ' ');
 8008a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a14:	2120      	movs	r1, #32
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff f9bf 	bl	8007d9a <putc_bfd>
		while (j++ < w) {	/* Right pads */
 8008a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008a26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d8f0      	bhi.n	8008a10 <f_printf+0x6c4>
		tc = *fmt++;
 8008a2e:	e4a0      	b.n	8008372 <f_printf+0x26>
		if (tc == 0) break;			/* End of format string */
 8008a30:	bf00      	nop
 8008a32:	e000      	b.n	8008a36 <f_printf+0x6ea>
		if (tc == 0) break;			/* End of format string */
 8008a34:	bf00      	nop
		}
	}

	va_end(arp);

	return putc_flush(&pb);
 8008a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff f9e5 	bl	8007e0a <putc_flush>
 8008a40:	4603      	mov	r3, r0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	37b8      	adds	r7, #184	; 0xb8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	b003      	add	sp, #12
 8008a4e:	4770      	bx	lr

08008a50 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8008a60:	4b16      	ldr	r3, [pc, #88]	; (8008abc <ff_uni2oem+0x6c>)
 8008a62:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b7f      	cmp	r3, #127	; 0x7f
 8008a68:	d802      	bhi.n	8008a70 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	81fb      	strh	r3, [r7, #14]
 8008a6e:	e01f      	b.n	8008ab0 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a76:	d21b      	bcs.n	8008ab0 <ff_uni2oem+0x60>
 8008a78:	887b      	ldrh	r3, [r7, #2]
 8008a7a:	f240 12b5 	movw	r2, #437	; 0x1b5
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d116      	bne.n	8008ab0 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8008a82:	2300      	movs	r3, #0
 8008a84:	81fb      	strh	r3, [r7, #14]
 8008a86:	e002      	b.n	8008a8e <ff_uni2oem+0x3e>
 8008a88:	89fb      	ldrh	r3, [r7, #14]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	81fb      	strh	r3, [r7, #14]
 8008a8e:	89fb      	ldrh	r3, [r7, #14]
 8008a90:	2b7f      	cmp	r3, #127	; 0x7f
 8008a92:	d808      	bhi.n	8008aa6 <ff_uni2oem+0x56>
 8008a94:	89fb      	ldrh	r3, [r7, #14]
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d1f0      	bne.n	8008a88 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 8008aa6:	89fb      	ldrh	r3, [r7, #14]
 8008aa8:	3380      	adds	r3, #128	; 0x80
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008ab0:	89fb      	ldrh	r3, [r7, #14]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr
 8008abc:	0801a2e0 	.word	0x0801a2e0

08008ac0 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	460a      	mov	r2, r1
 8008aca:	80fb      	strh	r3, [r7, #6]
 8008acc:	4613      	mov	r3, r2
 8008ace:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8008ad4:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <ff_oem2uni+0x54>)
 8008ad6:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	2b7f      	cmp	r3, #127	; 0x7f
 8008adc:	d802      	bhi.n	8008ae4 <ff_oem2uni+0x24>
		c = oem;
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	81fb      	strh	r3, [r7, #14]
 8008ae2:	e010      	b.n	8008b06 <ff_oem2uni+0x46>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8008ae4:	88bb      	ldrh	r3, [r7, #4]
 8008ae6:	f240 12b5 	movw	r2, #437	; 0x1b5
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d10b      	bne.n	8008b06 <ff_oem2uni+0x46>
			if (oem < 0x100) c = p[oem - 0x80];
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	2bff      	cmp	r3, #255	; 0xff
 8008af2:	d808      	bhi.n	8008b06 <ff_oem2uni+0x46>
 8008af4:	88fb      	ldrh	r3, [r7, #6]
 8008af6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008afa:	3b80      	subs	r3, #128	; 0x80
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008b06:	89fb      	ldrh	r3, [r7, #14]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	0801a2e0 	.word	0x0801a2e0

08008b18 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b26:	d27d      	bcs.n	8008c24 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8008b2c:	8a7b      	ldrh	r3, [r7, #18]
 8008b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b32:	d201      	bcs.n	8008b38 <ff_wtoupper+0x20>
 8008b34:	4b3e      	ldr	r3, [pc, #248]	; (8008c30 <ff_wtoupper+0x118>)
 8008b36:	e000      	b.n	8008b3a <ff_wtoupper+0x22>
 8008b38:	4b3e      	ldr	r3, [pc, #248]	; (8008c34 <ff_wtoupper+0x11c>)
 8008b3a:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	1c9a      	adds	r2, r3, #2
 8008b40:	617a      	str	r2, [r7, #20]
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8008b46:	8a3b      	ldrh	r3, [r7, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d069      	beq.n	8008c20 <ff_wtoupper+0x108>
 8008b4c:	8a7a      	ldrh	r2, [r7, #18]
 8008b4e:	8a3b      	ldrh	r3, [r7, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d365      	bcc.n	8008c20 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	1c9a      	adds	r2, r3, #2
 8008b58:	617a      	str	r2, [r7, #20]
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	81fb      	strh	r3, [r7, #14]
 8008b5e:	89fb      	ldrh	r3, [r7, #14]
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	81bb      	strh	r3, [r7, #12]
 8008b64:	89fb      	ldrh	r3, [r7, #14]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 8008b6a:	8a7a      	ldrh	r2, [r7, #18]
 8008b6c:	8a39      	ldrh	r1, [r7, #16]
 8008b6e:	89fb      	ldrh	r3, [r7, #14]
 8008b70:	440b      	add	r3, r1
 8008b72:	429a      	cmp	r2, r3
 8008b74:	da4a      	bge.n	8008c0c <ff_wtoupper+0xf4>
				switch (cmd) {
 8008b76:	89bb      	ldrh	r3, [r7, #12]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d850      	bhi.n	8008c1e <ff_wtoupper+0x106>
 8008b7c:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <ff_wtoupper+0x6c>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008ba9 	.word	0x08008ba9
 8008b88:	08008bbb 	.word	0x08008bbb
 8008b8c:	08008bd1 	.word	0x08008bd1
 8008b90:	08008bd9 	.word	0x08008bd9
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008be9 	.word	0x08008be9
 8008b9c:	08008bf1 	.word	0x08008bf1
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008c01 	.word	0x08008c01
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8008ba8:	8a7a      	ldrh	r2, [r7, #18]
 8008baa:	8a3b      	ldrh	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	827b      	strh	r3, [r7, #18]
 8008bb8:	e027      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8008bba:	8a7a      	ldrh	r2, [r7, #18]
 8008bbc:	8a3b      	ldrh	r3, [r7, #16]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	8a7a      	ldrh	r2, [r7, #18]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	827b      	strh	r3, [r7, #18]
 8008bce:	e01c      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8008bd0:	8a7b      	ldrh	r3, [r7, #18]
 8008bd2:	3b10      	subs	r3, #16
 8008bd4:	827b      	strh	r3, [r7, #18]
 8008bd6:	e018      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8008bd8:	8a7b      	ldrh	r3, [r7, #18]
 8008bda:	3b20      	subs	r3, #32
 8008bdc:	827b      	strh	r3, [r7, #18]
 8008bde:	e014      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8008be0:	8a7b      	ldrh	r3, [r7, #18]
 8008be2:	3b30      	subs	r3, #48	; 0x30
 8008be4:	827b      	strh	r3, [r7, #18]
 8008be6:	e010      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8008be8:	8a7b      	ldrh	r3, [r7, #18]
 8008bea:	3b1a      	subs	r3, #26
 8008bec:	827b      	strh	r3, [r7, #18]
 8008bee:	e00c      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8008bf0:	8a7b      	ldrh	r3, [r7, #18]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	827b      	strh	r3, [r7, #18]
 8008bf6:	e008      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8008bf8:	8a7b      	ldrh	r3, [r7, #18]
 8008bfa:	3b50      	subs	r3, #80	; 0x50
 8008bfc:	827b      	strh	r3, [r7, #18]
 8008bfe:	e004      	b.n	8008c0a <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8008c00:	8a7b      	ldrh	r3, [r7, #18]
 8008c02:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008c06:	827b      	strh	r3, [r7, #18]
 8008c08:	bf00      	nop
				}
				break;
 8008c0a:	e008      	b.n	8008c1e <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8008c0c:	89bb      	ldrh	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d194      	bne.n	8008b3c <ff_wtoupper+0x24>
 8008c12:	89fb      	ldrh	r3, [r7, #14]
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8008c1c:	e78e      	b.n	8008b3c <ff_wtoupper+0x24>
				break;
 8008c1e:	bf00      	nop
		}
		uni = uc;
 8008c20:	8a7b      	ldrh	r3, [r7, #18]
 8008c22:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8008c24:	687b      	ldr	r3, [r7, #4]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr
 8008c30:	0801a3e0 	.word	0x0801a3e0
 8008c34:	0801a5d4 	.word	0x0801a5d4

08008c38 <get_fattime>:
static char s_filename[12] = "dat_00.csv";
static char s_gpsfname[12] = "gps_00.csv";
static FIL s_datfile;
static FIL s_gpsfile;

DWORD get_fattime() { return 0; }
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr
	...

08008c48 <sd_init>:

Status sd_init(SpiDevice* dev) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
    sd_spi_init(dev);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f8c5 	bl	8008de0 <sd_spi_init>

    if (f_mount(&s_fs, "", 0) != FR_OK) {
 8008c56:	2200      	movs	r2, #0
 8008c58:	4931      	ldr	r1, [pc, #196]	; (8008d20 <sd_init+0xd8>)
 8008c5a:	4832      	ldr	r0, [pc, #200]	; (8008d24 <sd_init+0xdc>)
 8008c5c:	f7fe fb18 	bl	8007290 <f_mount>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01b      	beq.n	8008c9e <sd_init+0x56>
        return STATUS_HARDWARE_ERROR;
 8008c66:	2304      	movs	r3, #4
 8008c68:	e055      	b.n	8008d16 <sd_init+0xce>
    }

    // Increment the suffix of the filename until we find an unused name
    // I'll do this properly at some point I swear
    while (f_stat(s_filename, 0) == FR_OK) {
        if (s_filename[5] == '9') {
 8008c6a:	4b2f      	ldr	r3, [pc, #188]	; (8008d28 <sd_init+0xe0>)
 8008c6c:	795b      	ldrb	r3, [r3, #5]
 8008c6e:	2b39      	cmp	r3, #57	; 0x39
 8008c70:	d10f      	bne.n	8008c92 <sd_init+0x4a>
            if (s_filename[4] == '9') {
 8008c72:	4b2d      	ldr	r3, [pc, #180]	; (8008d28 <sd_init+0xe0>)
 8008c74:	791b      	ldrb	r3, [r3, #4]
 8008c76:	2b39      	cmp	r3, #57	; 0x39
 8008c78:	d101      	bne.n	8008c7e <sd_init+0x36>
                return STATUS_DATA_ERROR;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e04b      	b.n	8008d16 <sd_init+0xce>
            }
            s_filename[4] += 1;
 8008c7e:	4b2a      	ldr	r3, [pc, #168]	; (8008d28 <sd_init+0xe0>)
 8008c80:	791b      	ldrb	r3, [r3, #4]
 8008c82:	3301      	adds	r3, #1
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	4b28      	ldr	r3, [pc, #160]	; (8008d28 <sd_init+0xe0>)
 8008c88:	711a      	strb	r2, [r3, #4]
            s_filename[5] = '0';
 8008c8a:	4b27      	ldr	r3, [pc, #156]	; (8008d28 <sd_init+0xe0>)
 8008c8c:	2230      	movs	r2, #48	; 0x30
 8008c8e:	715a      	strb	r2, [r3, #5]
 8008c90:	e005      	b.n	8008c9e <sd_init+0x56>
        } else {
            s_filename[5] += 1;
 8008c92:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <sd_init+0xe0>)
 8008c94:	795b      	ldrb	r3, [r3, #5]
 8008c96:	3301      	adds	r3, #1
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	4b23      	ldr	r3, [pc, #140]	; (8008d28 <sd_init+0xe0>)
 8008c9c:	715a      	strb	r2, [r3, #5]
    while (f_stat(s_filename, 0) == FR_OK) {
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4821      	ldr	r0, [pc, #132]	; (8008d28 <sd_init+0xe0>)
 8008ca2:	f7ff f841 	bl	8007d28 <f_stat>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0de      	beq.n	8008c6a <sd_init+0x22>
        }
    }
    s_gpsfname[4] = s_filename[4];
 8008cac:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <sd_init+0xe0>)
 8008cae:	791a      	ldrb	r2, [r3, #4]
 8008cb0:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <sd_init+0xe4>)
 8008cb2:	711a      	strb	r2, [r3, #4]
    s_gpsfname[5] = s_filename[5];
 8008cb4:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <sd_init+0xe0>)
 8008cb6:	795a      	ldrb	r2, [r3, #5]
 8008cb8:	4b1c      	ldr	r3, [pc, #112]	; (8008d2c <sd_init+0xe4>)
 8008cba:	715a      	strb	r2, [r3, #5]

    // Create sensor data file and header
    if (f_open(&s_datfile, s_filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8008cbc:	220a      	movs	r2, #10
 8008cbe:	491a      	ldr	r1, [pc, #104]	; (8008d28 <sd_init+0xe0>)
 8008cc0:	481b      	ldr	r0, [pc, #108]	; (8008d30 <sd_init+0xe8>)
 8008cc2:	f7fe fb2f 	bl	8007324 <f_open>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <sd_init+0x88>
        return STATUS_HARDWARE_ERROR;
 8008ccc:	2304      	movs	r3, #4
 8008cce:	e022      	b.n	8008d16 <sd_init+0xce>
    }
    f_printf(&s_datfile,
 8008cd0:	4918      	ldr	r1, [pc, #96]	; (8008d34 <sd_init+0xec>)
 8008cd2:	4817      	ldr	r0, [pc, #92]	; (8008d30 <sd_init+0xe8>)
 8008cd4:	f7ff fb3a 	bl	800834c <f_printf>
             "Timestamp,Ax,Ay,Az,Rx,Ry,Rz,Temp,Pressure,Mx,My,Mz,Gx,Gy,Gz\n");
    if (f_sync(&s_datfile) != FR_OK) {
 8008cd8:	4815      	ldr	r0, [pc, #84]	; (8008d30 <sd_init+0xe8>)
 8008cda:	f7fe ff07 	bl	8007aec <f_sync>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <sd_init+0xa0>
        return STATUS_HARDWARE_ERROR;
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	e016      	b.n	8008d16 <sd_init+0xce>
    }

    // Create GPS file and header
    if (f_open(&s_gpsfile, s_gpsfname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8008ce8:	220a      	movs	r2, #10
 8008cea:	4910      	ldr	r1, [pc, #64]	; (8008d2c <sd_init+0xe4>)
 8008cec:	4812      	ldr	r0, [pc, #72]	; (8008d38 <sd_init+0xf0>)
 8008cee:	f7fe fb19 	bl	8007324 <f_open>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <sd_init+0xb4>
        return STATUS_HARDWARE_ERROR;
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	e00c      	b.n	8008d16 <sd_init+0xce>
    }
    f_printf(
 8008cfc:	490f      	ldr	r1, [pc, #60]	; (8008d3c <sd_init+0xf4>)
 8008cfe:	480e      	ldr	r0, [pc, #56]	; (8008d38 <sd_init+0xf0>)
 8008d00:	f7ff fb24 	bl	800834c <f_printf>
        &s_gpsfile,
        "Timestamp,Datetime,Lon,Lat,Alt,AccH,AccV,VelN,VelE,VelD,Invalid\n");
    if (f_sync(&s_gpsfile) != FR_OK) {
 8008d04:	480c      	ldr	r0, [pc, #48]	; (8008d38 <sd_init+0xf0>)
 8008d06:	f7fe fef1 	bl	8007aec <f_sync>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <sd_init+0xcc>
        return STATUS_HARDWARE_ERROR;
 8008d10:	2304      	movs	r3, #4
 8008d12:	e000      	b.n	8008d16 <sd_init+0xce>
    }

    return STATUS_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	08019f58 	.word	0x08019f58
 8008d24:	20005b08 	.word	0x20005b08
 8008d28:	2000042c 	.word	0x2000042c
 8008d2c:	20000438 	.word	0x20000438
 8008d30:	20005d58 	.word	0x20005d58
 8008d34:	08019f5c 	.word	0x08019f5c
 8008d38:	20005fa8 	.word	0x20005fa8
 8008d3c:	08019f9c 	.word	0x08019f9c

08008d40 <generate_crc_table>:
/* CRC functions (from https://github.com/hazelnusse/crc7)               */
/*-----------------------------------------------------------------------*/

static uint8_t s_crc_table[256];

void generate_crc_table() {
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
    int i, j;
    uint8_t CRCPoly = 0x89;  // the value of our CRC-7 polynomial
 8008d46:	2389      	movs	r3, #137	; 0x89
 8008d48:	71fb      	strb	r3, [r7, #7]

    // generate a table value for all 256 possible byte values
    for (i = 0; i < 256; ++i) {
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e03c      	b.n	8008dca <generate_crc_table+0x8a>
        s_crc_table[i] = (i & 0x80) ? i ^ CRCPoly : i;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <generate_crc_table+0x2a>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	b25a      	sxtb	r2, r3
 8008d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d62:	4053      	eors	r3, r2
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	e001      	b.n	8008d6e <generate_crc_table+0x2e>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	491b      	ldr	r1, [pc, #108]	; (8008ddc <generate_crc_table+0x9c>)
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	440a      	add	r2, r1
 8008d74:	7013      	strb	r3, [r2, #0]
        for (j = 1; j < 8; ++j) {
 8008d76:	2301      	movs	r3, #1
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	e020      	b.n	8008dbe <generate_crc_table+0x7e>
            s_crc_table[i] <<= 1;
 8008d7c:	4a17      	ldr	r2, [pc, #92]	; (8008ddc <generate_crc_table+0x9c>)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4413      	add	r3, r2
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	b2d9      	uxtb	r1, r3
 8008d88:	4a14      	ldr	r2, [pc, #80]	; (8008ddc <generate_crc_table+0x9c>)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	460a      	mov	r2, r1
 8008d90:	701a      	strb	r2, [r3, #0]
            if (s_crc_table[i] & 0x80) s_crc_table[i] ^= CRCPoly;
 8008d92:	4a12      	ldr	r2, [pc, #72]	; (8008ddc <generate_crc_table+0x9c>)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	b25b      	sxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	da0b      	bge.n	8008db8 <generate_crc_table+0x78>
 8008da0:	4a0e      	ldr	r2, [pc, #56]	; (8008ddc <generate_crc_table+0x9c>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4413      	add	r3, r2
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	4053      	eors	r3, r2
 8008dac:	b2d9      	uxtb	r1, r3
 8008dae:	4a0b      	ldr	r2, [pc, #44]	; (8008ddc <generate_crc_table+0x9c>)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	460a      	mov	r2, r1
 8008db6:	701a      	strb	r2, [r3, #0]
        for (j = 1; j < 8; ++j) {
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	60bb      	str	r3, [r7, #8]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b07      	cmp	r3, #7
 8008dc2:	dddb      	ble.n	8008d7c <generate_crc_table+0x3c>
    for (i = 0; i < 256; ++i) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2bff      	cmp	r3, #255	; 0xff
 8008dce:	ddbf      	ble.n	8008d50 <generate_crc_table+0x10>
        }
    }
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr
 8008ddc:	20006200 	.word	0x20006200

08008de0 <sd_spi_init>:
static uint8_t nop_buf[512] = {[0 ... 511] 0xFF};  // ugly but better than
                                                   // having to create yet
static uint8_t void_buf[512];                      // another SPI wrapper

/* Initialize MMC interface */
void sd_spi_init(SpiDevice *device) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
    // Create a local copy (actual setup will be done later)
    s_sd_spi_device = *device;
 8008de8:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <sd_spi_init+0x20>)
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008df0:	e883 0003 	stmia.w	r3, {r0, r1}
    generate_crc_table();
 8008df4:	f7ff ffa4 	bl	8008d40 <generate_crc_table>
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20006300 	.word	0x20006300

08008e04 <xchg_spi>:

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
    uint8_t buf;
    spi_exchange_nosetup(&s_sd_spi_device, &dat, &buf, 1);
 8008e0e:	f107 020f 	add.w	r2, r7, #15
 8008e12:	1df9      	adds	r1, r7, #7
 8008e14:	2301      	movs	r3, #1
 8008e16:	4804      	ldr	r0, [pc, #16]	; (8008e28 <xchg_spi+0x24>)
 8008e18:	f7fa f8d0 	bl	8002fbc <spi_exchange_nosetup>
    return buf;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20006300 	.word	0x20006300

08008e2c <rcvr_spi_multi>:

/* Receive multiple byte */
static void rcvr_spi_multi(
    BYTE *buff, /* Pointer to data buffer */
    UINT btr    /* Number of bytes to receive (even number) */
) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
    if (btr > 512) {
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e3c:	d807      	bhi.n	8008e4e <rcvr_spi_multi+0x22>
        return;
    }

    spi_exchange_nosetup(&s_sd_spi_device, nop_buf, buff, btr);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4904      	ldr	r1, [pc, #16]	; (8008e58 <rcvr_spi_multi+0x2c>)
 8008e46:	4805      	ldr	r0, [pc, #20]	; (8008e5c <rcvr_spi_multi+0x30>)
 8008e48:	f7fa f8b8 	bl	8002fbc <spi_exchange_nosetup>
 8008e4c:	e000      	b.n	8008e50 <rcvr_spi_multi+0x24>
        return;
 8008e4e:	bf00      	nop
}
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000448 	.word	0x20000448
 8008e5c:	20006300 	.word	0x20006300

08008e60 <xmit_spi_multi>:

#if FF_FS_READONLY == 0
/* Send multiple byte */
static void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
                           UINT btx /* Number of bytes to send (even number) */
) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    if (btx > 512) {
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e70:	d807      	bhi.n	8008e82 <xmit_spi_multi+0x22>

// spi_exchange_nosetup doesn't actually modify rx_buf, but we need this to not
// have the compiler freak out about calling with a non-const parameter
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
    spi_exchange_nosetup(&s_sd_spi_device, buff, void_buf, btx);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4a05      	ldr	r2, [pc, #20]	; (8008e8c <xmit_spi_multi+0x2c>)
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4805      	ldr	r0, [pc, #20]	; (8008e90 <xmit_spi_multi+0x30>)
 8008e7c:	f7fa f89e 	bl	8002fbc <spi_exchange_nosetup>
 8008e80:	e000      	b.n	8008e84 <xmit_spi_multi+0x24>
        return;
 8008e82:	bf00      	nop
#pragma GCC diagnostic pop
}
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20006308 	.word	0x20006308
 8008e90:	20006300 	.word	0x20006300

08008e94 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static int wait_ready(        /* 1:Ready, 0:Timeout */
                      UINT wt /* Timeout [ms] */
) {
 8008e94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e98:	b086      	sub	sp, #24
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
    BYTE d;

    uint64_t start_time = MILLIS();
 8008e9e:	f7f9 f84f 	bl	8001f40 <MILLIS>
 8008ea2:	e9c7 0104 	strd	r0, r1, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 8008ea6:	20ff      	movs	r0, #255	; 0xff
 8008ea8:	f7ff ffac 	bl	8008e04 <xchg_spi>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask
         * envilonment. */
    } while ((d != 0xFF) && (MILLIS() - start_time < wt));
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	2bff      	cmp	r3, #255	; 0xff
 8008eb4:	d00e      	beq.n	8008ed4 <wait_ready+0x40>
 8008eb6:	f7f9 f843 	bl	8001f40 <MILLIS>
 8008eba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ebe:	1a84      	subs	r4, r0, r2
 8008ec0:	eb61 0503 	sbc.w	r5, r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4698      	mov	r8, r3
 8008eca:	4691      	mov	r9, r2
 8008ecc:	4544      	cmp	r4, r8
 8008ece:	eb75 0309 	sbcs.w	r3, r5, r9
 8008ed2:	d3e8      	bcc.n	8008ea6 <wait_ready+0x12>
    /* Wait for card goes ready or timeout */

    return (d == 0xFF) ? 1 : 0;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2bff      	cmp	r3, #255	; 0xff
 8008ed8:	bf0c      	ite	eq
 8008eda:	2301      	moveq	r3, #1
 8008edc:	2300      	movne	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08008eec <deselect>:

/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void deselect(void) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
    spi_set_cs(&s_sd_spi_device, GPIO_HIGH); /* Set CS# high */
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	4804      	ldr	r0, [pc, #16]	; (8008f04 <deselect+0x18>)
 8008ef4:	f7fa f84a 	bl	8002f8c <spi_set_cs>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008ef8:	20ff      	movs	r0, #255	; 0xff
 8008efa:	f7ff ff83 	bl	8008e04 <xchg_spi>
}
 8008efe:	bf00      	nop
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20006300 	.word	0x20006300

08008f08 <select>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int select(void) /* 1:OK, 0:Timeout */
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
    spi_set_cs(&s_sd_spi_device, GPIO_LOW); /* Set CS# low */
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	480a      	ldr	r0, [pc, #40]	; (8008f38 <select+0x30>)
 8008f10:	f7fa f83c 	bl	8002f8c <spi_set_cs>
    xchg_spi(0xFF);                /* Dummy clock (force DO enabled) */
 8008f14:	20ff      	movs	r0, #255	; 0xff
 8008f16:	f7ff ff75 	bl	8008e04 <xchg_spi>
    if (wait_ready(500)) return 1; /* Wait for card ready */
 8008f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f1e:	f7ff ffb9 	bl	8008e94 <wait_ready>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <select+0x24>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e002      	b.n	8008f32 <select+0x2a>

    deselect();
 8008f2c:	f7ff ffde 	bl	8008eec <deselect>
    return 0; /* Timeout */
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20006300 	.word	0x20006300

08008f3c <rcvr_datablock>:
/*-----------------------------------------------------------------------*/

static int rcvr_datablock(            /* 1:OK, 0:Error */
                          BYTE *buff, /* Data buffer */
                          UINT btr    /* Data block length (byte) */
) {
 8008f3c:	b5b0      	push	{r4, r5, r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
    BYTE token;
    const uint64_t timeout = 200;
 8008f46:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    uint64_t start_time = MILLIS();
 8008f52:	f7f8 fff5 	bl	8001f40 <MILLIS>
 8008f56:	e9c7 0104 	strd	r0, r1, [r7, #16]
    do { /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 8008f5a:	20ff      	movs	r0, #255	; 0xff
 8008f5c:	f7ff ff52 	bl	8008e04 <xchg_spi>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask
         * envilonment. */
    } while ((token == 0xFF) && (MILLIS() - start_time < timeout));
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d10c      	bne.n	8008f84 <rcvr_datablock+0x48>
 8008f6a:	f7f8 ffe9 	bl	8001f40 <MILLIS>
 8008f6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f72:	1a84      	subs	r4, r0, r2
 8008f74:	eb61 0503 	sbc.w	r5, r1, r3
 8008f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f7c:	4294      	cmp	r4, r2
 8008f7e:	eb75 0303 	sbcs.w	r3, r5, r3
 8008f82:	d3ea      	bcc.n	8008f5a <rcvr_datablock+0x1e>

    if (token != 0xFE)
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2bfe      	cmp	r3, #254	; 0xfe
 8008f88:	d001      	beq.n	8008f8e <rcvr_datablock+0x52>
        return 0; /* Function fails if invalid DataStart token or timeout */
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e00a      	b.n	8008fa4 <rcvr_datablock+0x68>

    rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ff4b 	bl	8008e2c <rcvr_spi_multi>
    xchg_spi(0xFF);
 8008f96:	20ff      	movs	r0, #255	; 0xff
 8008f98:	f7ff ff34 	bl	8008e04 <xchg_spi>
    xchg_spi(0xFF); /* Discard CRC */
 8008f9c:	20ff      	movs	r0, #255	; 0xff
 8008f9e:	f7ff ff31 	bl	8008e04 <xchg_spi>

    return 1; /* Function succeeded */
 8008fa2:	2301      	movs	r3, #1
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bdb0      	pop	{r4, r5, r7, pc}

08008fac <xmit_datablock>:
#if FF_FS_READONLY == 0
static int xmit_datablock(/* 1:OK, 0:Failed */
                          const BYTE
                              *buff, /* Ponter to 512 byte data to be sent */
                          BYTE token /* Token */
) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
    BYTE resp;

    if (!wait_ready(500)) return 0; /* Wait for card ready */
 8008fb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fbc:	f7ff ff6a 	bl	8008e94 <wait_ready>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <xmit_datablock+0x1e>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e01e      	b.n	8009008 <xmit_datablock+0x5c>

    xchg_spi(token);     /* Send token */
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff ff19 	bl	8008e04 <xchg_spi>
    if (token != 0xFD) { /* Send data if token is other than StopTran */
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	2bfd      	cmp	r3, #253	; 0xfd
 8008fd6:	d016      	beq.n	8009006 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512); /* Data */
 8008fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff ff3f 	bl	8008e60 <xmit_spi_multi>
        xchg_spi(0xFF);
 8008fe2:	20ff      	movs	r0, #255	; 0xff
 8008fe4:	f7ff ff0e 	bl	8008e04 <xchg_spi>
        xchg_spi(0xFF); /* Dummy CRC */
 8008fe8:	20ff      	movs	r0, #255	; 0xff
 8008fea:	f7ff ff0b 	bl	8008e04 <xchg_spi>

        resp = xchg_spi(0xFF); /* Receive data resp */
 8008fee:	20ff      	movs	r0, #255	; 0xff
 8008ff0:	f7ff ff08 	bl	8008e04 <xchg_spi>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05)
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	f003 031f 	and.w	r3, r3, #31
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	d001      	beq.n	8009006 <xmit_datablock+0x5a>
            return 0; /* Function fails if the data packet was not accepted */
 8009002:	2300      	movs	r3, #0
 8009004:	e000      	b.n	8009008 <xmit_datablock+0x5c>
    }
    return 1;
 8009006:	2301      	movs	r3, #1
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(/* Return value: R1 resp (bit7==1:Failed to send) */
                     BYTE cmd, /* Command index */
                     DWORD arg /* Argument */
) {
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 800901c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009020:	2b00      	cmp	r3, #0
 8009022:	da0e      	bge.n	8009042 <send_cmd+0x32>
        cmd &= 0x7F;
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902a:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800902c:	2100      	movs	r1, #0
 800902e:	2037      	movs	r0, #55	; 0x37
 8009030:	f7ff ffee 	bl	8009010 <send_cmd>
 8009034:	4603      	mov	r3, r0
 8009036:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d901      	bls.n	8009042 <send_cmd+0x32>
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	e051      	b.n	80090e6 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	2b0c      	cmp	r3, #12
 8009046:	d008      	beq.n	800905a <send_cmd+0x4a>
        deselect();
 8009048:	f7ff ff50 	bl	8008eec <deselect>
        if (!select()) return 0xFF;
 800904c:	f7ff ff5c 	bl	8008f08 <select>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <send_cmd+0x4a>
 8009056:	23ff      	movs	r3, #255	; 0xff
 8009058:	e045      	b.n	80090e6 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);        /* Start + command index */
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff fece 	bl	8008e04 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	0e1b      	lsrs	r3, r3, #24
 800906c:	b2db      	uxtb	r3, r3
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff fec8 	bl	8008e04 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	0c1b      	lsrs	r3, r3, #16
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fec2 	bl	8008e04 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));  /* Argument[15..8] */
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	0a1b      	lsrs	r3, r3, #8
 8009084:	b2db      	uxtb	r3, r3
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff febc 	bl	8008e04 <xchg_spi>
    xchg_spi((BYTE)arg);         /* Argument[7..0] */
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff feb7 	bl	8008e04 <xchg_spi>
    n = 0xFF;                    /* Dummy CRC + Stop */
 8009096:	23ff      	movs	r3, #255	; 0xff
 8009098:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;   /* Valid CRC for CMD0(0) */
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <send_cmd+0x94>
 80090a0:	2395      	movs	r3, #149	; 0x95
 80090a2:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;   /* Valid CRC for CMD8(0x1AA) */
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d101      	bne.n	80090ae <send_cmd+0x9e>
 80090aa:	2387      	movs	r3, #135	; 0x87
 80090ac:	73fb      	strb	r3, [r7, #15]
    // n = get_cmd_crc(cmd, arg);
    xchg_spi(n);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fea7 	bl	8008e04 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12)
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b0c      	cmp	r3, #12
 80090ba:	d102      	bne.n	80090c2 <send_cmd+0xb2>
        xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 80090bc:	20ff      	movs	r0, #255	; 0xff
 80090be:	f7ff fea1 	bl	8008e04 <xchg_spi>
    n = 10;             /* Wait for response (10 bytes max) */
 80090c2:	230a      	movs	r3, #10
 80090c4:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 80090c6:	20ff      	movs	r0, #255	; 0xff
 80090c8:	f7ff fe9c 	bl	8008e04 <xchg_spi>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 80090d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da05      	bge.n	80090e4 <send_cmd+0xd4>
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	3b01      	subs	r3, #1
 80090dc:	73fb      	strb	r3, [r7, #15]
 80090de:	7bfb      	ldrb	r3, [r7, #15]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f0      	bne.n	80090c6 <send_cmd+0xb6>

    return res; /* Return received response */
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive number (0) */
) {
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv) return STA_NOINIT; /* Supports only drive 0 */
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <disk_initialize+0x14>
 8009100:	2301      	movs	r3, #1
 8009102:	e0cd      	b.n	80092a0 <disk_initialize+0x1b0>

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 8009104:	4b68      	ldr	r3, [pc, #416]	; (80092a8 <disk_initialize+0x1b8>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <disk_initialize+0x2a>
 8009112:	4b65      	ldr	r3, [pc, #404]	; (80092a8 <disk_initialize+0x1b8>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	e0c2      	b.n	80092a0 <disk_initialize+0x1b0>

    SpiSpeed original_speed = s_sd_spi_device.clk;
 800911a:	4b64      	ldr	r3, [pc, #400]	; (80092ac <disk_initialize+0x1bc>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	613b      	str	r3, [r7, #16]
    s_sd_spi_device.clk = SPI_SPEED_100kHz;
 8009120:	4b62      	ldr	r3, [pc, #392]	; (80092ac <disk_initialize+0x1bc>)
 8009122:	4a63      	ldr	r2, [pc, #396]	; (80092b0 <disk_initialize+0x1c0>)
 8009124:	601a      	str	r2, [r3, #0]
    spi_setup(&s_sd_spi_device);         /* Initialize SPI with slow clock */
 8009126:	4861      	ldr	r0, [pc, #388]	; (80092ac <disk_initialize+0x1bc>)
 8009128:	f7f9 fe46 	bl	8002db8 <spi_setup>
    for (n = 10; n; n--) xchg_spi(0xFF); /* Send 80 dummy clocks */
 800912c:	230a      	movs	r3, #10
 800912e:	75fb      	strb	r3, [r7, #23]
 8009130:	e005      	b.n	800913e <disk_initialize+0x4e>
 8009132:	20ff      	movs	r0, #255	; 0xff
 8009134:	f7ff fe66 	bl	8008e04 <xchg_spi>
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	3b01      	subs	r3, #1
 800913c:	75fb      	strb	r3, [r7, #23]
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1f6      	bne.n	8009132 <disk_initialize+0x42>

    ty = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	757b      	strb	r3, [r7, #21]
    if (send_cmd(CMD0, 0) == 1) {         /* Put the card SPI/Idle state */
 8009148:	2100      	movs	r1, #0
 800914a:	2000      	movs	r0, #0
 800914c:	f7ff ff60 	bl	8009010 <send_cmd>
 8009150:	4603      	mov	r3, r0
 8009152:	2b01      	cmp	r3, #1
 8009154:	f040 8087 	bne.w	8009266 <disk_initialize+0x176>
        Timer1 = 1000;                    /* Initialization timeout = 1 sec */
 8009158:	4b56      	ldr	r3, [pc, #344]	; (80092b4 <disk_initialize+0x1c4>)
 800915a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800915e:	601a      	str	r2, [r3, #0]
        if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 8009160:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009164:	2008      	movs	r0, #8
 8009166:	f7ff ff53 	bl	8009010 <send_cmd>
 800916a:	4603      	mov	r3, r0
 800916c:	2b01      	cmp	r3, #1
 800916e:	d14f      	bne.n	8009210 <disk_initialize+0x120>
            for (n = 0; n < 4; n++)
 8009170:	2300      	movs	r3, #0
 8009172:	75fb      	strb	r3, [r7, #23]
 8009174:	e00d      	b.n	8009192 <disk_initialize+0xa2>
                ocr[n] =
 8009176:	7dfc      	ldrb	r4, [r7, #23]
                    xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8009178:	20ff      	movs	r0, #255	; 0xff
 800917a:	f7ff fe43 	bl	8008e04 <xchg_spi>
 800917e:	4603      	mov	r3, r0
 8009180:	461a      	mov	r2, r3
                ocr[n] =
 8009182:	f104 0318 	add.w	r3, r4, #24
 8009186:	443b      	add	r3, r7
 8009188:	f803 2c0c 	strb.w	r2, [r3, #-12]
            for (n = 0; n < 4; n++)
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	3301      	adds	r3, #1
 8009190:	75fb      	strb	r3, [r7, #23]
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	2b03      	cmp	r3, #3
 8009196:	d9ee      	bls.n	8009176 <disk_initialize+0x86>
            if (ocr[2] == 0x01 &&
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d163      	bne.n	8009266 <disk_initialize+0x176>
                ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 800919e:	7bfb      	ldrb	r3, [r7, #15]
            if (ocr[2] == 0x01 &&
 80091a0:	2baa      	cmp	r3, #170	; 0xaa
 80091a2:	d160      	bne.n	8009266 <disk_initialize+0x176>
                while (Timer1 && send_cmd(ACMD41, 1UL << 30))
 80091a4:	bf00      	nop
 80091a6:	4b43      	ldr	r3, [pc, #268]	; (80092b4 <disk_initialize+0x1c4>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d007      	beq.n	80091be <disk_initialize+0xce>
 80091ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80091b2:	20a9      	movs	r0, #169	; 0xa9
 80091b4:	f7ff ff2c 	bl	8009010 <send_cmd>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f3      	bne.n	80091a6 <disk_initialize+0xb6>
                    ; /* Wait for end of initialization with ACMD41(HCS) */
                if (Timer1 &&
 80091be:	4b3d      	ldr	r3, [pc, #244]	; (80092b4 <disk_initialize+0x1c4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d04f      	beq.n	8009266 <disk_initialize+0x176>
                    send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 80091c6:	2100      	movs	r1, #0
 80091c8:	203a      	movs	r0, #58	; 0x3a
 80091ca:	f7ff ff21 	bl	8009010 <send_cmd>
 80091ce:	4603      	mov	r3, r0
                if (Timer1 &&
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d148      	bne.n	8009266 <disk_initialize+0x176>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80091d4:	2300      	movs	r3, #0
 80091d6:	75fb      	strb	r3, [r7, #23]
 80091d8:	e00d      	b.n	80091f6 <disk_initialize+0x106>
 80091da:	7dfc      	ldrb	r4, [r7, #23]
 80091dc:	20ff      	movs	r0, #255	; 0xff
 80091de:	f7ff fe11 	bl	8008e04 <xchg_spi>
 80091e2:	4603      	mov	r3, r0
 80091e4:	461a      	mov	r2, r3
 80091e6:	f104 0318 	add.w	r3, r4, #24
 80091ea:	443b      	add	r3, r7
 80091ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	3301      	adds	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d9ee      	bls.n	80091da <disk_initialize+0xea>
                    ty = (ocr[0] & 0x40) ? CT_SDC2 | CT_BLOCK
 80091fc:	7b3b      	ldrb	r3, [r7, #12]
 80091fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <disk_initialize+0x11a>
 8009206:	2314      	movs	r3, #20
 8009208:	e000      	b.n	800920c <disk_initialize+0x11c>
 800920a:	2304      	movs	r3, #4
 800920c:	757b      	strb	r3, [r7, #21]
 800920e:	e02a      	b.n	8009266 <disk_initialize+0x176>
                                         : CT_SDC2; /* Card id SDv2 */
                }
            }
        } else {                            /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 8009210:	2100      	movs	r1, #0
 8009212:	20a9      	movs	r0, #169	; 0xa9
 8009214:	f7ff fefc 	bl	8009010 <send_cmd>
 8009218:	4603      	mov	r3, r0
 800921a:	2b01      	cmp	r3, #1
 800921c:	d804      	bhi.n	8009228 <disk_initialize+0x138>
                ty = CT_SDC1;
 800921e:	2302      	movs	r3, #2
 8009220:	757b      	strb	r3, [r7, #21]
                cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 8009222:	23a9      	movs	r3, #169	; 0xa9
 8009224:	75bb      	strb	r3, [r7, #22]
 8009226:	e003      	b.n	8009230 <disk_initialize+0x140>
            } else {
                ty = CT_MMC3;
 8009228:	2301      	movs	r3, #1
 800922a:	757b      	strb	r3, [r7, #21]
                cmd = CMD1; /* MMCv3 (CMD1(0)) */
 800922c:	2301      	movs	r3, #1
 800922e:	75bb      	strb	r3, [r7, #22]
            }
            while (Timer1 && send_cmd(cmd, 0))
 8009230:	bf00      	nop
 8009232:	4b20      	ldr	r3, [pc, #128]	; (80092b4 <disk_initialize+0x1c4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <disk_initialize+0x15a>
 800923a:	7dbb      	ldrb	r3, [r7, #22]
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff fee6 	bl	8009010 <send_cmd>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1f3      	bne.n	8009232 <disk_initialize+0x142>
                ; /* Wait for end of initialization */
            if (!Timer1 ||
 800924a:	4b1a      	ldr	r3, [pc, #104]	; (80092b4 <disk_initialize+0x1c4>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d007      	beq.n	8009262 <disk_initialize+0x172>
                send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 8009252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009256:	2010      	movs	r0, #16
 8009258:	f7ff feda 	bl	8009010 <send_cmd>
 800925c:	4603      	mov	r3, r0
            if (!Timer1 ||
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <disk_initialize+0x176>
                ty = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	757b      	strb	r3, [r7, #21]
        }
    }
    CardType = ty; /* Card type */
 8009266:	4a14      	ldr	r2, [pc, #80]	; (80092b8 <disk_initialize+0x1c8>)
 8009268:	7d7b      	ldrb	r3, [r7, #21]
 800926a:	7013      	strb	r3, [r2, #0]
    deselect();
 800926c:	f7ff fe3e 	bl	8008eec <deselect>

    if (ty) { /* OK */
 8009270:	7d7b      	ldrb	r3, [r7, #21]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00e      	beq.n	8009294 <disk_initialize+0x1a4>
        s_sd_spi_device.clk = original_speed;
 8009276:	4a0d      	ldr	r2, [pc, #52]	; (80092ac <disk_initialize+0x1bc>)
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	6013      	str	r3, [r2, #0]
        spi_setup(&s_sd_spi_device); /* Set clock back to original */
 800927c:	480b      	ldr	r0, [pc, #44]	; (80092ac <disk_initialize+0x1bc>)
 800927e:	f7f9 fd9b 	bl	8002db8 <spi_setup>
        Stat &= ~STA_NOINIT;         /* Clear STA_NOINIT flag */
 8009282:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <disk_initialize+0x1b8>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f023 0301 	bic.w	r3, r3, #1
 800928c:	b2da      	uxtb	r2, r3
 800928e:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <disk_initialize+0x1b8>)
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	e002      	b.n	800929a <disk_initialize+0x1aa>
    } else {                         /* Failed */
        Stat = STA_NOINIT;
 8009294:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <disk_initialize+0x1b8>)
 8009296:	2201      	movs	r2, #1
 8009298:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800929a:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <disk_initialize+0x1b8>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	b2db      	uxtb	r3, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd90      	pop	{r4, r7, pc}
 80092a8:	20000444 	.word	0x20000444
 80092ac:	20006300 	.word	0x20006300
 80092b0:	000186a0 	.word	0x000186a0
 80092b4:	200061f8 	.word	0x200061f8
 80092b8:	200061fc 	.word	0x200061fc

080092bc <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive number (0) */
) {
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT; /* Supports only drive 0 */
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <disk_status+0x14>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e002      	b.n	80092d6 <disk_status+0x1a>

    return Stat; /* Return disk status */
 80092d0:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <disk_status+0x24>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b2db      	uxtb	r3, r3
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	bc80      	pop	{r7}
 80092de:	4770      	bx	lr
 80092e0:	20000444 	.word	0x20000444

080092e4 <disk_read>:
DRESULT disk_read(
    BYTE drv,     /* Physical drive number (0) */
    BYTE *buff,   /* Pointer to the data buffer to store read data */
    LBA_t sector, /* Start sector number (LBA) */
    UINT count    /* Number of sectors to read (1..128) */
) {
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	4603      	mov	r3, r0
 80092f2:	73fb      	strb	r3, [r7, #15]
    DWORD sect = (DWORD)sector;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	617b      	str	r3, [r7, #20]

    if (drv || !count) return RES_PARERR;     /* Check parameter */
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <disk_read+0x20>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <disk_read+0x24>
 8009304:	2304      	movs	r3, #4
 8009306:	e04d      	b.n	80093a4 <disk_read+0xc0>
    if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
 8009308:	4b28      	ldr	r3, [pc, #160]	; (80093ac <disk_read+0xc8>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <disk_read+0x36>
 8009316:	2303      	movs	r3, #3
 8009318:	e044      	b.n	80093a4 <disk_read+0xc0>

    if (!(CardType & CT_BLOCK))
 800931a:	4b25      	ldr	r3, [pc, #148]	; (80093b0 <disk_read+0xcc>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	f003 0310 	and.w	r3, r3, #16
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <disk_read+0x48>
        sect *= 512; /* LBA ot BA conversion (byte addressing cards) */
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	025b      	lsls	r3, r3, #9
 800932a:	617b      	str	r3, [r7, #20]

    if (count == 1) {                    /* Single sector read */
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d111      	bne.n	8009356 <disk_read+0x72>
        if ((send_cmd(CMD17, sect) == 0) /* READ_SINGLE_BLOCK */
 8009332:	6979      	ldr	r1, [r7, #20]
 8009334:	2011      	movs	r0, #17
 8009336:	f7ff fe6b 	bl	8009010 <send_cmd>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d129      	bne.n	8009394 <disk_read+0xb0>
            && rcvr_datablock(buff, 512)) {
 8009340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009344:	68b8      	ldr	r0, [r7, #8]
 8009346:	f7ff fdf9 	bl	8008f3c <rcvr_datablock>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d021      	beq.n	8009394 <disk_read+0xb0>
            count = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	e01e      	b.n	8009394 <disk_read+0xb0>
        }
    } else {                              /* Multiple sector read */
        if (send_cmd(CMD18, sect) == 0) { /* READ_MULTIPLE_BLOCK */
 8009356:	6979      	ldr	r1, [r7, #20]
 8009358:	2012      	movs	r0, #18
 800935a:	f7ff fe59 	bl	8009010 <send_cmd>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d117      	bne.n	8009394 <disk_read+0xb0>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 8009364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009368:	68b8      	ldr	r0, [r7, #8]
 800936a:	f7ff fde7 	bl	8008f3c <rcvr_datablock>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00a      	beq.n	800938a <disk_read+0xa6>
                buff += 512;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800937a:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	3b01      	subs	r3, #1
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1ed      	bne.n	8009364 <disk_read+0x80>
 8009388:	e000      	b.n	800938c <disk_read+0xa8>
                if (!rcvr_datablock(buff, 512)) break;
 800938a:	bf00      	nop
            send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 800938c:	2100      	movs	r1, #0
 800938e:	200c      	movs	r0, #12
 8009390:	f7ff fe3e 	bl	8009010 <send_cmd>
        }
    }
    deselect();
 8009394:	f7ff fdaa 	bl	8008eec <deselect>

    return count ? RES_ERROR : RES_OK; /* Return result */
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	bf14      	ite	ne
 800939e:	2301      	movne	r3, #1
 80093a0:	2300      	moveq	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20000444 	.word	0x20000444
 80093b0:	200061fc 	.word	0x200061fc

080093b4 <disk_write>:
#if FF_FS_READONLY == 0
DRESULT disk_write(BYTE drv,         /* Physical drive number (0) */
                   const BYTE *buff, /* Ponter to the data to write */
                   LBA_t sector,     /* Start sector number (LBA) */
                   UINT count        /* Number of sectors to write (1..128) */
) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]
    DWORD sect = (DWORD)sector;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	617b      	str	r3, [r7, #20]

    if (drv || !count) return RES_PARERR;     /* Check parameter */
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <disk_write+0x20>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <disk_write+0x24>
 80093d4:	2304      	movs	r3, #4
 80093d6:	e063      	b.n	80094a0 <disk_write+0xec>
    if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check drive status */
 80093d8:	4b33      	ldr	r3, [pc, #204]	; (80094a8 <disk_write+0xf4>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <disk_write+0x36>
 80093e6:	2303      	movs	r3, #3
 80093e8:	e05a      	b.n	80094a0 <disk_write+0xec>
    if (Stat & STA_PROTECT) return RES_WRPRT; /* Check write protect */
 80093ea:	4b2f      	ldr	r3, [pc, #188]	; (80094a8 <disk_write+0xf4>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <disk_write+0x48>
 80093f8:	2302      	movs	r3, #2
 80093fa:	e051      	b.n	80094a0 <disk_write+0xec>

    if (!(CardType & CT_BLOCK))
 80093fc:	4b2b      	ldr	r3, [pc, #172]	; (80094ac <disk_write+0xf8>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	f003 0310 	and.w	r3, r3, #16
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <disk_write+0x5a>
        sect *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	025b      	lsls	r3, r3, #9
 800940c:	617b      	str	r3, [r7, #20]

    if (count == 1) {                    /* Single sector write */
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d110      	bne.n	8009436 <disk_write+0x82>
        if ((send_cmd(CMD24, sect) == 0) /* WRITE_BLOCK */
 8009414:	6979      	ldr	r1, [r7, #20]
 8009416:	2018      	movs	r0, #24
 8009418:	f7ff fdfa 	bl	8009010 <send_cmd>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d136      	bne.n	8009490 <disk_write+0xdc>
            && xmit_datablock(buff, 0xFE)) {
 8009422:	21fe      	movs	r1, #254	; 0xfe
 8009424:	68b8      	ldr	r0, [r7, #8]
 8009426:	f7ff fdc1 	bl	8008fac <xmit_datablock>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02f      	beq.n	8009490 <disk_write+0xdc>
            count = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	e02c      	b.n	8009490 <disk_write+0xdc>
        }
    } else { /* Multiple sector write */
        if (CardType & CT_SDC)
 8009436:	4b1d      	ldr	r3, [pc, #116]	; (80094ac <disk_write+0xf8>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	f003 030c 	and.w	r3, r3, #12
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <disk_write+0x96>
            send_cmd(ACMD23, count);      /* Predefine number of sectors */
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	2097      	movs	r0, #151	; 0x97
 8009446:	f7ff fde3 	bl	8009010 <send_cmd>
        if (send_cmd(CMD25, sect) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800944a:	6979      	ldr	r1, [r7, #20]
 800944c:	2019      	movs	r0, #25
 800944e:	f7ff fddf 	bl	8009010 <send_cmd>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d11b      	bne.n	8009490 <disk_write+0xdc>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 8009458:	21fc      	movs	r1, #252	; 0xfc
 800945a:	68b8      	ldr	r0, [r7, #8]
 800945c:	f7ff fda6 	bl	8008fac <xmit_datablock>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <disk_write+0xc8>
                buff += 512;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800946c:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	3b01      	subs	r3, #1
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1ee      	bne.n	8009458 <disk_write+0xa4>
 800947a:	e000      	b.n	800947e <disk_write+0xca>
                if (!xmit_datablock(buff, 0xFC)) break;
 800947c:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1; /* STOP_TRAN token */
 800947e:	21fd      	movs	r1, #253	; 0xfd
 8009480:	2000      	movs	r0, #0
 8009482:	f7ff fd93 	bl	8008fac <xmit_datablock>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <disk_write+0xdc>
 800948c:	2301      	movs	r3, #1
 800948e:	603b      	str	r3, [r7, #0]
        }
    }
    deselect();
 8009490:	f7ff fd2c 	bl	8008eec <deselect>

    return count ? RES_ERROR : RES_OK; /* Return result */
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	bf14      	ite	ne
 800949a:	2301      	movne	r3, #1
 800949c:	2300      	moveq	r3, #0
 800949e:	b2db      	uxtb	r3, r3
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000444 	.word	0x20000444
 80094ac:	200061fc 	.word	0x200061fc

080094b0 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv,  /* Physical drive number (0) */
                   BYTE cmd,  /* Control command code */
                   void *buff /* Pointer to the conrtol data */
) {
 80094b0:	b590      	push	{r4, r7, lr}
 80094b2:	b08d      	sub	sp, #52	; 0x34
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	603a      	str	r2, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
 80094bc:	460b      	mov	r3, r1
 80094be:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD st, ed, csize;
    LBA_t *dp;

    if (drv) return RES_PARERR;               /* Check parameter */
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <disk_ioctl+0x1a>
 80094c6:	2304      	movs	r3, #4
 80094c8:	e22e      	b.n	8009928 <disk_ioctl+0x478>
    if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
 80094ca:	4bae      	ldr	r3, [pc, #696]	; (8009784 <disk_ioctl+0x2d4>)
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <disk_ioctl+0x2c>
 80094d8:	2303      	movs	r3, #3
 80094da:	e225      	b.n	8009928 <disk_ioctl+0x478>

    res = RES_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 80094e2:	79bb      	ldrb	r3, [r7, #6]
 80094e4:	2b36      	cmp	r3, #54	; 0x36
 80094e6:	f200 8202 	bhi.w	80098ee <disk_ioctl+0x43e>
 80094ea:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <disk_ioctl+0x40>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	080095cd 	.word	0x080095cd
 80094f4:	080095e1 	.word	0x080095e1
 80094f8:	080098ef 	.word	0x080098ef
 80094fc:	0800968d 	.word	0x0800968d
 8009500:	0800978d 	.word	0x0800978d
 8009504:	080098ef 	.word	0x080098ef
 8009508:	080098ef 	.word	0x080098ef
 800950c:	080098ef 	.word	0x080098ef
 8009510:	080098ef 	.word	0x080098ef
 8009514:	080098ef 	.word	0x080098ef
 8009518:	080098ef 	.word	0x080098ef
 800951c:	080098ef 	.word	0x080098ef
 8009520:	080098ef 	.word	0x080098ef
 8009524:	080098ef 	.word	0x080098ef
 8009528:	080098ef 	.word	0x080098ef
 800952c:	080098ef 	.word	0x080098ef
 8009530:	080098ef 	.word	0x080098ef
 8009534:	080098ef 	.word	0x080098ef
 8009538:	080098ef 	.word	0x080098ef
 800953c:	080098ef 	.word	0x080098ef
 8009540:	080098ef 	.word	0x080098ef
 8009544:	080098ef 	.word	0x080098ef
 8009548:	080098ef 	.word	0x080098ef
 800954c:	080098ef 	.word	0x080098ef
 8009550:	080098ef 	.word	0x080098ef
 8009554:	080098ef 	.word	0x080098ef
 8009558:	080098ef 	.word	0x080098ef
 800955c:	080098ef 	.word	0x080098ef
 8009560:	080098ef 	.word	0x080098ef
 8009564:	080098ef 	.word	0x080098ef
 8009568:	080098ef 	.word	0x080098ef
 800956c:	080098ef 	.word	0x080098ef
 8009570:	080098ef 	.word	0x080098ef
 8009574:	080098ef 	.word	0x080098ef
 8009578:	080098ef 	.word	0x080098ef
 800957c:	080098ef 	.word	0x080098ef
 8009580:	080098ef 	.word	0x080098ef
 8009584:	080098ef 	.word	0x080098ef
 8009588:	080098ef 	.word	0x080098ef
 800958c:	080098ef 	.word	0x080098ef
 8009590:	080098ef 	.word	0x080098ef
 8009594:	080098ef 	.word	0x080098ef
 8009598:	080098ef 	.word	0x080098ef
 800959c:	080098ef 	.word	0x080098ef
 80095a0:	080098ef 	.word	0x080098ef
 80095a4:	080098ef 	.word	0x080098ef
 80095a8:	080098ef 	.word	0x080098ef
 80095ac:	080098ef 	.word	0x080098ef
 80095b0:	080098ef 	.word	0x080098ef
 80095b4:	080098ef 	.word	0x080098ef
 80095b8:	0800982b 	.word	0x0800982b
 80095bc:	0800983b 	.word	0x0800983b
 80095c0:	0800985f 	.word	0x0800985f
 80095c4:	08009883 	.word	0x08009883
 80095c8:	080098c5 	.word	0x080098c5
        case CTRL_SYNC: /* Wait for end of internal write process of the drive
                         */
            if (select()) res = RES_OK;
 80095cc:	f7ff fc9c 	bl	8008f08 <select>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 818f 	beq.w	80098f6 <disk_ioctl+0x446>
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80095de:	e18a      	b.n	80098f6 <disk_ioctl+0x446>

        case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD)
                                */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80095e0:	2100      	movs	r1, #0
 80095e2:	2009      	movs	r0, #9
 80095e4:	f7ff fd14 	bl	8009010 <send_cmd>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f040 8185 	bne.w	80098fa <disk_ioctl+0x44a>
 80095f0:	f107 030c 	add.w	r3, r7, #12
 80095f4:	2110      	movs	r1, #16
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7ff fca0 	bl	8008f3c <rcvr_datablock>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 817b 	beq.w	80098fa <disk_ioctl+0x44a>
                if ((csd[0] >> 6) == 1) { /* SDC CSD ver 2 */
 8009604:	7b3b      	ldrb	r3, [r7, #12]
 8009606:	099b      	lsrs	r3, r3, #6
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b01      	cmp	r3, #1
 800960c:	d111      	bne.n	8009632 <disk_ioctl+0x182>
                    csize = csd[9] + ((WORD)csd[8] << 8) +
 800960e:	7d7b      	ldrb	r3, [r7, #21]
 8009610:	461a      	mov	r2, r3
 8009612:	7d3b      	ldrb	r3, [r7, #20]
 8009614:	021b      	lsls	r3, r3, #8
 8009616:	4413      	add	r3, r2
 8009618:	461a      	mov	r2, r3
                            ((DWORD)(csd[7] & 63) << 16) + 1;
 800961a:	7cfb      	ldrb	r3, [r7, #19]
 800961c:	041b      	lsls	r3, r3, #16
 800961e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
                    csize = csd[9] + ((WORD)csd[8] << 8) +
 8009622:	4413      	add	r3, r2
 8009624:	3301      	adds	r3, #1
 8009626:	61fb      	str	r3, [r7, #28]
                    *(LBA_t *)buff = csize << 10;
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	029a      	lsls	r2, r3, #10
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	e028      	b.n	8009684 <disk_ioctl+0x1d4>
                } else { /* SDC CSD ver 1 or MMC */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) +
 8009632:	7c7b      	ldrb	r3, [r7, #17]
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	b2da      	uxtb	r2, r3
 800963a:	7dbb      	ldrb	r3, [r7, #22]
 800963c:	09db      	lsrs	r3, r3, #7
 800963e:	b2db      	uxtb	r3, r3
 8009640:	4413      	add	r3, r2
 8009642:	b2da      	uxtb	r2, r3
                        ((csd[9] & 3) << 1) + 2;
 8009644:	7d7b      	ldrb	r3, [r7, #21]
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 0306 	and.w	r3, r3, #6
 800964e:	b2db      	uxtb	r3, r3
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) +
 8009650:	4413      	add	r3, r2
 8009652:	b2db      	uxtb	r3, r3
 8009654:	3302      	adds	r3, #2
 8009656:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) +
 800965a:	7d3b      	ldrb	r3, [r7, #20]
 800965c:	099b      	lsrs	r3, r3, #6
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	7cfb      	ldrb	r3, [r7, #19]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	441a      	add	r2, r3
                            ((WORD)(csd[6] & 3) << 10) + 1;
 8009668:	7cbb      	ldrb	r3, [r7, #18]
 800966a:	029b      	lsls	r3, r3, #10
 800966c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) +
 8009670:	4413      	add	r3, r2
                            ((WORD)(csd[6] & 3) << 10) + 1;
 8009672:	3301      	adds	r3, #1
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) +
 8009674:	61fb      	str	r3, [r7, #28]
                    *(LBA_t *)buff = csize << (n - 9);
 8009676:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800967a:	3b09      	subs	r3, #9
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	409a      	lsls	r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 800968a:	e136      	b.n	80098fa <disk_ioctl+0x44a>

        case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD)
                              */
            if (CardType & CT_SDC2) {           /* SDC ver 2+ */
 800968c:	4b3e      	ldr	r3, [pc, #248]	; (8009788 <disk_ioctl+0x2d8>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d031      	beq.n	80096fc <disk_ioctl+0x24c>
                if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8009698:	2100      	movs	r1, #0
 800969a:	208d      	movs	r0, #141	; 0x8d
 800969c:	f7ff fcb8 	bl	8009010 <send_cmd>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 812b 	bne.w	80098fe <disk_ioctl+0x44e>
                    xchg_spi(0xFF);
 80096a8:	20ff      	movs	r0, #255	; 0xff
 80096aa:	f7ff fbab 	bl	8008e04 <xchg_spi>
                    if (rcvr_datablock(csd, 16)) { /* Read partial block */
 80096ae:	f107 030c 	add.w	r3, r7, #12
 80096b2:	2110      	movs	r1, #16
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fc41 	bl	8008f3c <rcvr_datablock>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 811e 	beq.w	80098fe <disk_ioctl+0x44e>
                        for (n = 64 - 16; n; n--)
 80096c2:	2330      	movs	r3, #48	; 0x30
 80096c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80096c8:	e007      	b.n	80096da <disk_ioctl+0x22a>
                            xchg_spi(0xFF); /* Purge trailing data */
 80096ca:	20ff      	movs	r0, #255	; 0xff
 80096cc:	f7ff fb9a 	bl	8008e04 <xchg_spi>
                        for (n = 64 - 16; n; n--)
 80096d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80096d4:	3b01      	subs	r3, #1
 80096d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80096da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1f3      	bne.n	80096ca <disk_ioctl+0x21a>
                        *(DWORD *)buff = 16UL << (csd[10] >> 4);
 80096e2:	7dbb      	ldrb	r3, [r7, #22]
 80096e4:	091b      	lsrs	r3, r3, #4
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	2310      	movs	r3, #16
 80096ec:	fa03 f202 	lsl.w	r2, r3, r2
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	601a      	str	r2, [r3, #0]
                        res = RES_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                    }
                    res = RES_OK;
                }
            }
            break;
 80096fa:	e100      	b.n	80098fe <disk_ioctl+0x44e>
                if ((send_cmd(CMD9, 0) == 0) &&
 80096fc:	2100      	movs	r1, #0
 80096fe:	2009      	movs	r0, #9
 8009700:	f7ff fc86 	bl	8009010 <send_cmd>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	f040 80f9 	bne.w	80098fe <disk_ioctl+0x44e>
                    rcvr_datablock(csd, 16)) { /* Read CSD */
 800970c:	f107 030c 	add.w	r3, r7, #12
 8009710:	2110      	movs	r1, #16
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fc12 	bl	8008f3c <rcvr_datablock>
 8009718:	4603      	mov	r3, r0
                if ((send_cmd(CMD9, 0) == 0) &&
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80ef 	beq.w	80098fe <disk_ioctl+0x44e>
                    if (CardType & CT_SDC1) {  /* SDC ver 1.XX */
 8009720:	4b19      	ldr	r3, [pc, #100]	; (8009788 <disk_ioctl+0x2d8>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d012      	beq.n	8009752 <disk_ioctl+0x2a2>
                        *(DWORD *)buff = (((csd[10] & 63) << 1) +
 800972c:	7dbb      	ldrb	r3, [r7, #22]
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	f003 037e 	and.w	r3, r3, #126	; 0x7e
                                          ((WORD)(csd[11] & 128) >> 7) + 1)
 8009734:	7dfa      	ldrb	r2, [r7, #23]
 8009736:	09d2      	lsrs	r2, r2, #7
 8009738:	b2d2      	uxtb	r2, r2
                        *(DWORD *)buff = (((csd[10] & 63) << 1) +
 800973a:	4413      	add	r3, r2
                                          ((WORD)(csd[11] & 128) >> 7) + 1)
 800973c:	1c5a      	adds	r2, r3, #1
                                         << ((csd[13] >> 6) - 1);
 800973e:	7e7b      	ldrb	r3, [r7, #25]
 8009740:	099b      	lsrs	r3, r3, #6
 8009742:	b2db      	uxtb	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	fa02 f303 	lsl.w	r3, r2, r3
 800974a:	461a      	mov	r2, r3
                        *(DWORD *)buff = (((csd[10] & 63) << 1) +
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	e013      	b.n	800977a <disk_ioctl+0x2ca>
                            ((WORD)((csd[10] & 124) >> 2) + 1) *
 8009752:	7dbb      	ldrb	r3, [r7, #22]
 8009754:	109b      	asrs	r3, r3, #2
 8009756:	b29b      	uxth	r3, r3
 8009758:	f003 031f 	and.w	r3, r3, #31
 800975c:	3301      	adds	r3, #1
                            (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800975e:	7dfa      	ldrb	r2, [r7, #23]
 8009760:	00d2      	lsls	r2, r2, #3
 8009762:	f002 0218 	and.w	r2, r2, #24
 8009766:	7df9      	ldrb	r1, [r7, #23]
 8009768:	0949      	lsrs	r1, r1, #5
 800976a:	b2c9      	uxtb	r1, r1
 800976c:	440a      	add	r2, r1
 800976e:	3201      	adds	r2, #1
                            ((WORD)((csd[10] & 124) >> 2) + 1) *
 8009770:	fb02 f303 	mul.w	r3, r2, r3
 8009774:	461a      	mov	r2, r3
                        *(DWORD *)buff =
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8009780:	e0bd      	b.n	80098fe <disk_ioctl+0x44e>
 8009782:	bf00      	nop
 8009784:	20000444 	.word	0x20000444
 8009788:	200061fc 	.word	0x200061fc

        case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1)
                         */
            if (!(CardType & CT_SDC)) break; /* Check if the card is SDC */
 800978c:	4b68      	ldr	r3, [pc, #416]	; (8009930 <disk_ioctl+0x480>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	f003 030c 	and.w	r3, r3, #12
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80b4 	beq.w	8009902 <disk_ioctl+0x452>
            if (disk_ioctl(drv, MMC_GET_CSD, csd)) break; /* Get CSD */
 800979a:	f107 020c 	add.w	r2, r7, #12
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	2133      	movs	r1, #51	; 0x33
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff fe84 	bl	80094b0 <disk_ioctl>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 80ab 	bne.w	8009906 <disk_ioctl+0x456>
            if (!(csd[10] & 0x40)) break; /* Check if ERASE_BLK_EN = 1 */
 80097b0:	7dbb      	ldrb	r3, [r7, #22]
 80097b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 80a7 	beq.w	800990a <disk_ioctl+0x45a>
            dp = buff;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	623b      	str	r3, [r7, #32]
            st = (DWORD)dp[0];
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	62bb      	str	r3, [r7, #40]	; 0x28
            ed = (DWORD)dp[1]; /* Load sector block */
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	3304      	adds	r3, #4
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
            if (!(CardType & CT_BLOCK)) {
 80097ce:	4b58      	ldr	r3, [pc, #352]	; (8009930 <disk_ioctl+0x480>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <disk_ioctl+0x336>
                st *= 512;
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	025b      	lsls	r3, r3, #9
 80097de:	62bb      	str	r3, [r7, #40]	; 0x28
                ed *= 512;
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	025b      	lsls	r3, r3, #9
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 &&
 80097e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e8:	2020      	movs	r0, #32
 80097ea:	f7ff fc11 	bl	8009010 <send_cmd>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f040 808c 	bne.w	800990e <disk_ioctl+0x45e>
 80097f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097f8:	2021      	movs	r0, #33	; 0x21
 80097fa:	f7ff fc09 	bl	8009010 <send_cmd>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	f040 8084 	bne.w	800990e <disk_ioctl+0x45e>
                send_cmd(CMD38, 0) == 0 &&
 8009806:	2100      	movs	r1, #0
 8009808:	2026      	movs	r0, #38	; 0x26
 800980a:	f7ff fc01 	bl	8009010 <send_cmd>
 800980e:	4603      	mov	r3, r0
            if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 &&
 8009810:	2b00      	cmp	r3, #0
 8009812:	d17c      	bne.n	800990e <disk_ioctl+0x45e>
                wait_ready(30000)) { /* Erase sector block */
 8009814:	f247 5030 	movw	r0, #30000	; 0x7530
 8009818:	f7ff fb3c 	bl	8008e94 <wait_ready>
 800981c:	4603      	mov	r3, r0
                send_cmd(CMD38, 0) == 0 &&
 800981e:	2b00      	cmp	r3, #0
 8009820:	d075      	beq.n	800990e <disk_ioctl+0x45e>
                res = RES_OK; /* FatFs does not check result of this command */
 8009822:	2300      	movs	r3, #0
 8009824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8009828:	e071      	b.n	800990e <disk_ioctl+0x45e>

            /* Following commands are never used by FatFs module */

        case MMC_GET_TYPE: /* Get MMC/SDC type (BYTE) */
            *(BYTE *)buff = CardType;
 800982a:	4b41      	ldr	r3, [pc, #260]	; (8009930 <disk_ioctl+0x480>)
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	701a      	strb	r2, [r3, #0]
            res = RES_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8009838:	e072      	b.n	8009920 <disk_ioctl+0x470>

        case MMC_GET_CSD: /* Read CSD (16 bytes) */
            if (send_cmd(CMD9, 0) == 0 &&
 800983a:	2100      	movs	r1, #0
 800983c:	2009      	movs	r0, #9
 800983e:	f7ff fbe7 	bl	8009010 <send_cmd>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d164      	bne.n	8009912 <disk_ioctl+0x462>
                rcvr_datablock((BYTE *)buff, 16)) { /* READ_CSD */
 8009848:	2110      	movs	r1, #16
 800984a:	6838      	ldr	r0, [r7, #0]
 800984c:	f7ff fb76 	bl	8008f3c <rcvr_datablock>
 8009850:	4603      	mov	r3, r0
            if (send_cmd(CMD9, 0) == 0 &&
 8009852:	2b00      	cmp	r3, #0
 8009854:	d05d      	beq.n	8009912 <disk_ioctl+0x462>
                res = RES_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 800985c:	e059      	b.n	8009912 <disk_ioctl+0x462>

        case MMC_GET_CID: /* Read CID (16 bytes) */
            if (send_cmd(CMD10, 0) == 0 &&
 800985e:	2100      	movs	r1, #0
 8009860:	200a      	movs	r0, #10
 8009862:	f7ff fbd5 	bl	8009010 <send_cmd>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d154      	bne.n	8009916 <disk_ioctl+0x466>
                rcvr_datablock((BYTE *)buff, 16)) { /* READ_CID */
 800986c:	2110      	movs	r1, #16
 800986e:	6838      	ldr	r0, [r7, #0]
 8009870:	f7ff fb64 	bl	8008f3c <rcvr_datablock>
 8009874:	4603      	mov	r3, r0
            if (send_cmd(CMD10, 0) == 0 &&
 8009876:	2b00      	cmp	r3, #0
 8009878:	d04d      	beq.n	8009916 <disk_ioctl+0x466>
                res = RES_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8009880:	e049      	b.n	8009916 <disk_ioctl+0x466>

        case MMC_GET_OCR:                  /* Read OCR (4 bytes) */
            if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8009882:	2100      	movs	r1, #0
 8009884:	203a      	movs	r0, #58	; 0x3a
 8009886:	f7ff fbc3 	bl	8009010 <send_cmd>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d144      	bne.n	800991a <disk_ioctl+0x46a>
                for (n = 0; n < 4; n++) *(((BYTE *)buff) + n) = xchg_spi(0xFF);
 8009890:	2300      	movs	r3, #0
 8009892:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009896:	e00d      	b.n	80098b4 <disk_ioctl+0x404>
 8009898:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	18d4      	adds	r4, r2, r3
 80098a0:	20ff      	movs	r0, #255	; 0xff
 80098a2:	f7ff faaf 	bl	8008e04 <xchg_spi>
 80098a6:	4603      	mov	r3, r0
 80098a8:	7023      	strb	r3, [r4, #0]
 80098aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80098ae:	3301      	adds	r3, #1
 80098b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80098b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d9ed      	bls.n	8009898 <disk_ioctl+0x3e8>
                res = RES_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 80098c2:	e02a      	b.n	800991a <disk_ioctl+0x46a>

        case MMC_GET_SDSTAT:                /* Read SD status (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0) { /* SD_STATUS */
 80098c4:	2100      	movs	r1, #0
 80098c6:	208d      	movs	r0, #141	; 0x8d
 80098c8:	f7ff fba2 	bl	8009010 <send_cmd>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d125      	bne.n	800991e <disk_ioctl+0x46e>
                xchg_spi(0xFF);
 80098d2:	20ff      	movs	r0, #255	; 0xff
 80098d4:	f7ff fa96 	bl	8008e04 <xchg_spi>
                if (rcvr_datablock((BYTE *)buff, 64)) res = RES_OK;
 80098d8:	2140      	movs	r1, #64	; 0x40
 80098da:	6838      	ldr	r0, [r7, #0]
 80098dc:	f7ff fb2e 	bl	8008f3c <rcvr_datablock>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d01b      	beq.n	800991e <disk_ioctl+0x46e>
 80098e6:	2300      	movs	r3, #0
 80098e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 80098ec:	e017      	b.n	800991e <disk_ioctl+0x46e>

        default:
            res = RES_PARERR;
 80098ee:	2304      	movs	r3, #4
 80098f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80098f4:	e014      	b.n	8009920 <disk_ioctl+0x470>
            break;
 80098f6:	bf00      	nop
 80098f8:	e012      	b.n	8009920 <disk_ioctl+0x470>
            break;
 80098fa:	bf00      	nop
 80098fc:	e010      	b.n	8009920 <disk_ioctl+0x470>
            break;
 80098fe:	bf00      	nop
 8009900:	e00e      	b.n	8009920 <disk_ioctl+0x470>
            if (!(CardType & CT_SDC)) break; /* Check if the card is SDC */
 8009902:	bf00      	nop
 8009904:	e00c      	b.n	8009920 <disk_ioctl+0x470>
            if (disk_ioctl(drv, MMC_GET_CSD, csd)) break; /* Get CSD */
 8009906:	bf00      	nop
 8009908:	e00a      	b.n	8009920 <disk_ioctl+0x470>
            if (!(csd[10] & 0x40)) break; /* Check if ERASE_BLK_EN = 1 */
 800990a:	bf00      	nop
 800990c:	e008      	b.n	8009920 <disk_ioctl+0x470>
            break;
 800990e:	bf00      	nop
 8009910:	e006      	b.n	8009920 <disk_ioctl+0x470>
            break;
 8009912:	bf00      	nop
 8009914:	e004      	b.n	8009920 <disk_ioctl+0x470>
            break;
 8009916:	bf00      	nop
 8009918:	e002      	b.n	8009920 <disk_ioctl+0x470>
            break;
 800991a:	bf00      	nop
 800991c:	e000      	b.n	8009920 <disk_ioctl+0x470>
            break;
 800991e:	bf00      	nop
    }

    deselect();
 8009920:	f7ff fae4 	bl	8008eec <deselect>

    return res;
 8009924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009928:	4618      	mov	r0, r3
 800992a:	3734      	adds	r7, #52	; 0x34
 800992c:	46bd      	mov	sp, r7
 800992e:	bd90      	pop	{r4, r7, pc}
 8009930:	200061fc 	.word	0x200061fc

08009934 <AFSK_init>:

// global variables
bool AFSK_sending;

// functions
void AFSK_init() {
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
	// Start sending
	gpio_write(TX_PTT_Pin, 1);
 8009938:	2101      	movs	r1, #1
 800993a:	2000      	movs	r0, #0
 800993c:	f7f7 fdee 	bl	800151c <gpio_write>
	HAL_LPTIM_Counter_Start(&hlptim2, 1250);
 8009940:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8009944:	4808      	ldr	r0, [pc, #32]	; (8009968 <AFSK_init+0x34>)
 8009946:	f008 fb03 	bl	8011f50 <HAL_LPTIM_Counter_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800994a:	2100      	movs	r1, #0
 800994c:	4807      	ldr	r0, [pc, #28]	; (800996c <AFSK_init+0x38>)
 800994e:	f006 fc16 	bl	801017e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DAC_REST);
 8009952:	237f      	movs	r3, #127	; 0x7f
 8009954:	2208      	movs	r2, #8
 8009956:	2100      	movs	r1, #0
 8009958:	4804      	ldr	r0, [pc, #16]	; (800996c <AFSK_init+0x38>)
 800995a:	f006 fcf8 	bl	801034e <HAL_DAC_SetValue>
	AFSK_sending = false;
 800995e:	4b04      	ldr	r3, [pc, #16]	; (8009970 <AFSK_init+0x3c>)
 8009960:	2200      	movs	r2, #0
 8009962:	701a      	strb	r2, [r3, #0]
}
 8009964:	bf00      	nop
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200052e8 	.word	0x200052e8
 800996c:	20005190 	.word	0x20005190
 8009970:	20006d10 	.word	0x20006d10

08009974 <AFSK_send>:

bool AFSK_send(BitFIFO *bfifo) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af02      	add	r7, sp, #8
 800997a:	6078      	str	r0, [r7, #4]
	if (AFSK_sending) {
 800997c:	4b1c      	ldr	r3, [pc, #112]	; (80099f0 <AFSK_send+0x7c>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <AFSK_send+0x14>
		return false;
 8009984:	2300      	movs	r3, #0
 8009986:	e02f      	b.n	80099e8 <AFSK_send+0x74>
	}

	if (radio_in_use == 2)
 8009988:	4b1a      	ldr	r3, [pc, #104]	; (80099f4 <AFSK_send+0x80>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b02      	cmp	r3, #2
 8009990:	d101      	bne.n	8009996 <AFSK_send+0x22>
	{
		return false;
 8009992:	2300      	movs	r3, #0
 8009994:	e028      	b.n	80099e8 <AFSK_send+0x74>
	}
	radio_in_use = 1;
 8009996:	4b17      	ldr	r3, [pc, #92]	; (80099f4 <AFSK_send+0x80>)
 8009998:	2201      	movs	r2, #1
 800999a:	701a      	strb	r2, [r3, #0]

	send_fifo = bfifo;
 800999c:	4a16      	ldr	r2, [pc, #88]	; (80099f8 <AFSK_send+0x84>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6013      	str	r3, [r2, #0]
	phase = 0;
 80099a2:	4b16      	ldr	r3, [pc, #88]	; (80099fc <AFSK_send+0x88>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
	AFSK_sending = 1;
 80099a8:	4b11      	ldr	r3, [pc, #68]	; (80099f0 <AFSK_send+0x7c>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	701a      	strb	r2, [r3, #0]
	AFSK_send_fillbuff(send_buff, sizeof(send_buff));
 80099ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80099b2:	4813      	ldr	r0, [pc, #76]	; (8009a00 <AFSK_send+0x8c>)
 80099b4:	f000 f828 	bl	8009a08 <AFSK_send_fillbuff>
	gpio_write(TX_PTT_Pin, 0);
 80099b8:	2100      	movs	r1, #0
 80099ba:	2000      	movs	r0, #0
 80099bc:	f7f7 fdae 	bl	800151c <gpio_write>
	gpio_write(PIN_PB5, GPIO_HIGH);
 80099c0:	2101      	movs	r1, #1
 80099c2:	2015      	movs	r0, #21
 80099c4:	f7f7 fdaa 	bl	800151c <gpio_write>
	DELAY(5);
 80099c8:	f04f 0005 	mov.w	r0, #5
 80099cc:	f04f 0100 	mov.w	r1, #0
 80099d0:	f7f8 fac5 	bl	8001f5e <DELAY>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) send_buff, sizeof(send_buff), DAC_ALIGN_8B_R);
 80099d4:	2308      	movs	r3, #8
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099dc:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <AFSK_send+0x8c>)
 80099de:	2100      	movs	r1, #0
 80099e0:	4808      	ldr	r0, [pc, #32]	; (8009a04 <AFSK_send+0x90>)
 80099e2:	f006 fc05 	bl	80101f0 <HAL_DAC_Start_DMA>

	return true;
 80099e6:	2301      	movs	r3, #1
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20006d10 	.word	0x20006d10
 80099f4:	200008dc 	.word	0x200008dc
 80099f8:	20006d0c 	.word	0x20006d0c
 80099fc:	20006d08 	.word	0x20006d08
 8009a00:	20006508 	.word	0x20006508
 8009a04:	20005190 	.word	0x20005190

08009a08 <AFSK_send_fillbuff>:

// private helpers
void AFSK_send_fillbuff(uint8_t *buff, uint32_t samples) {
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
	uint32_t sig_index = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < (samples >> SEND_FREQ_SHIFT); i++) {
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
 8009a1a:	e033      	b.n	8009a84 <AFSK_send_fillbuff+0x7c>
		if (BitFIFO_is_empty(send_fifo)) {
 8009a1c:	4b26      	ldr	r3, [pc, #152]	; (8009ab8 <AFSK_send_fillbuff+0xb0>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fb62 	bl	800a0ea <BitFIFO_is_empty>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d131      	bne.n	8009a90 <AFSK_send_fillbuff+0x88>
			break;
		}

		uint32_t dph = BitFIFO_pop(send_fifo) ? DPH_MARK : DPH_SPACE;
 8009a2c:	4b22      	ldr	r3, [pc, #136]	; (8009ab8 <AFSK_send_fillbuff+0xb0>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fb89 	bl	800a148 <BitFIFO_pop>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <AFSK_send_fillbuff+0x3a>
 8009a3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a40:	e000      	b.n	8009a44 <AFSK_send_fillbuff+0x3c>
 8009a42:	4b1e      	ldr	r3, [pc, #120]	; (8009abc <AFSK_send_fillbuff+0xb4>)
 8009a44:	60fb      	str	r3, [r7, #12]
		for (sig_index = i << SEND_FREQ_SHIFT; sig_index < ((i + 1) << SEND_FREQ_SHIFT); sig_index++) {
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	015b      	lsls	r3, r3, #5
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	e011      	b.n	8009a72 <AFSK_send_fillbuff+0x6a>
			phase += dph;
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <AFSK_send_fillbuff+0xb8>)
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	4413      	add	r3, r2
 8009a56:	4a1a      	ldr	r2, [pc, #104]	; (8009ac0 <AFSK_send_fillbuff+0xb8>)
 8009a58:	6013      	str	r3, [r2, #0]
			buff[sig_index] = AFSK_SINE_LOOKUP[phase >> 24]; // 8-bit sine lookup
 8009a5a:	4b19      	ldr	r3, [pc, #100]	; (8009ac0 <AFSK_send_fillbuff+0xb8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	0e1a      	lsrs	r2, r3, #24
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	440b      	add	r3, r1
 8009a66:	4917      	ldr	r1, [pc, #92]	; (8009ac4 <AFSK_send_fillbuff+0xbc>)
 8009a68:	5c8a      	ldrb	r2, [r1, r2]
 8009a6a:	701a      	strb	r2, [r3, #0]
		for (sig_index = i << SEND_FREQ_SHIFT; sig_index < ((i + 1) << SEND_FREQ_SHIFT); sig_index++) {
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	3301      	adds	r3, #1
 8009a76:	015b      	lsls	r3, r3, #5
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d3e7      	bcc.n	8009a4e <AFSK_send_fillbuff+0x46>
	for (uint32_t i = 0; i < (samples >> SEND_FREQ_SHIFT); i++) {
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	3301      	adds	r3, #1
 8009a82:	613b      	str	r3, [r7, #16]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d3c6      	bcc.n	8009a1c <AFSK_send_fillbuff+0x14>
 8009a8e:	e009      	b.n	8009aa4 <AFSK_send_fillbuff+0x9c>
			break;
 8009a90:	bf00      	nop
		}
	}

	for (; sig_index < samples; sig_index++) {
 8009a92:	e007      	b.n	8009aa4 <AFSK_send_fillbuff+0x9c>
		buff[sig_index] = DAC_REST; // at rest level if no more bits to send
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	4413      	add	r3, r2
 8009a9a:	227f      	movs	r2, #127	; 0x7f
 8009a9c:	701a      	strb	r2, [r3, #0]
	for (; sig_index < samples; sig_index++) {
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	617b      	str	r3, [r7, #20]
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d3f3      	bcc.n	8009a94 <AFSK_send_fillbuff+0x8c>
	}
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20006d0c 	.word	0x20006d0c
 8009abc:	0eaaaaab 	.word	0x0eaaaaab
 8009ac0:	20006d08 	.word	0x20006d08
 8009ac4:	0801a690 	.word	0x0801a690

08009ac8 <HAL_DAC_ConvHalfCpltCallbackCh1>:

// sending interrupts
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac_p) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	if (!AFSK_sending) {
 8009ad0:	4b17      	ldr	r3, [pc, #92]	; (8009b30 <HAL_DAC_ConvHalfCpltCallbackCh1+0x68>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	f083 0301 	eor.w	r3, r3, #1
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d014      	beq.n	8009b08 <HAL_DAC_ConvHalfCpltCallbackCh1+0x40>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4814      	ldr	r0, [pc, #80]	; (8009b34 <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 8009ae2:	f006 fbfd 	bl	80102e0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // stopping DMA stops DAC too
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	4812      	ldr	r0, [pc, #72]	; (8009b34 <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 8009aea:	f006 fb48 	bl	801017e <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DAC_REST);
 8009aee:	237f      	movs	r3, #127	; 0x7f
 8009af0:	2208      	movs	r2, #8
 8009af2:	2100      	movs	r1, #0
 8009af4:	480f      	ldr	r0, [pc, #60]	; (8009b34 <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 8009af6:	f006 fc2a 	bl	801034e <HAL_DAC_SetValue>
		gpio_write(TX_PTT_Pin, 1);
 8009afa:	2101      	movs	r1, #1
 8009afc:	2000      	movs	r0, #0
 8009afe:	f7f7 fd0d 	bl	800151c <gpio_write>
		radio_in_use = 0;
 8009b02:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
	}

	AFSK_send_fillbuff(send_buff, sizeof(send_buff) >> 1);
 8009b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b0c:	480b      	ldr	r0, [pc, #44]	; (8009b3c <HAL_DAC_ConvHalfCpltCallbackCh1+0x74>)
 8009b0e:	f7ff ff7b 	bl	8009a08 <AFSK_send_fillbuff>
	if (BitFIFO_is_empty(send_fifo)) {
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <HAL_DAC_ConvHalfCpltCallbackCh1+0x78>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fae7 	bl	800a0ea <BitFIFO_is_empty>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <HAL_DAC_ConvHalfCpltCallbackCh1+0x60>
		AFSK_sending = false;
 8009b22:	4b03      	ldr	r3, [pc, #12]	; (8009b30 <HAL_DAC_ConvHalfCpltCallbackCh1+0x68>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
	}
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	20006d10 	.word	0x20006d10
 8009b34:	20005190 	.word	0x20005190
 8009b38:	200008dc 	.word	0x200008dc
 8009b3c:	20006508 	.word	0x20006508
 8009b40:	20006d0c 	.word	0x20006d0c

08009b44 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac_p) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	if (!AFSK_sending) {
 8009b4c:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	f083 0301 	eor.w	r3, r3, #1
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d014      	beq.n	8009b84 <HAL_DAC_ConvCpltCallbackCh1+0x40>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4815      	ldr	r0, [pc, #84]	; (8009bb4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8009b5e:	f006 fbbf 	bl	80102e0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // stopping DMA stops DAC too
 8009b62:	2100      	movs	r1, #0
 8009b64:	4813      	ldr	r0, [pc, #76]	; (8009bb4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8009b66:	f006 fb0a 	bl	801017e <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DAC_REST);
 8009b6a:	237f      	movs	r3, #127	; 0x7f
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	2100      	movs	r1, #0
 8009b70:	4810      	ldr	r0, [pc, #64]	; (8009bb4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8009b72:	f006 fbec 	bl	801034e <HAL_DAC_SetValue>
		gpio_write(TX_PTT_Pin, 1);
 8009b76:	2101      	movs	r1, #1
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f7f7 fccf 	bl	800151c <gpio_write>
		radio_in_use = 0;
 8009b7e:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
	}

	AFSK_send_fillbuff(send_buff + (sizeof(send_buff) >> 1), sizeof(send_buff) >> 1);
 8009b84:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8009b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff ff3c 	bl	8009a08 <AFSK_send_fillbuff>
	if (BitFIFO_is_empty(send_fifo)) {
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 faa8 	bl	800a0ea <BitFIFO_is_empty>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <HAL_DAC_ConvCpltCallbackCh1+0x62>
		AFSK_sending = false;
 8009ba0:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	701a      	strb	r2, [r3, #0]
	}
}
 8009ba6:	bf00      	nop
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20006d10 	.word	0x20006d10
 8009bb4:	20005190 	.word	0x20005190
 8009bb8:	200008dc 	.word	0x200008dc
 8009bbc:	20006908 	.word	0x20006908
 8009bc0:	20006d0c 	.word	0x20006d0c

08009bc4 <APRS_init>:
	.digi     = "WIDE1-1,WIDE2-2",
	.info     = ">Test Packet"
};

// public functions
void APRS_init() {
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
	AFSK_init();
 8009bc8:	f7ff feb4 	bl	8009934 <AFSK_init>
}
 8009bcc:	bf00      	nop
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <APRS_encode>:

void APRS_print(APRSPacket *pack) {
	printf("DEST: %s | SRC: %s | DIGI: %s | %s\r\n", pack->dest, pack->callsign, pack->digi, pack->info);
}

void APRS_encode(BitFIFO *bfifo, APRSPacket *pack) {
 8009bd0:	b590      	push	{r4, r7, lr}
 8009bd2:	b08b      	sub	sp, #44	; 0x2c
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
	if (strlen(pack->info) > 256) {
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f6 face 	bl	8000180 <strlen>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bea:	d901      	bls.n	8009bf0 <APRS_encode+0x20>
		Error_Handler();
 8009bec:	f7f8 fef6 	bl	80029dc <Error_Handler>
	}

	for (uint8_t i = 0; i < (APRS_PREFLAGS + 1); i++) { // preflags
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	77fb      	strb	r3, [r7, #31]
 8009bf4:	e006      	b.n	8009c04 <APRS_encode+0x34>
		APRS_encode_insert_byte(bfifo, 0b10000000);
 8009bf6:	2180      	movs	r1, #128	; 0x80
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f8f1 	bl	8009de0 <APRS_encode_insert_byte>
	for (uint8_t i = 0; i < (APRS_PREFLAGS + 1); i++) { // preflags
 8009bfe:	7ffb      	ldrb	r3, [r7, #31]
 8009c00:	3301      	adds	r3, #1
 8009c02:	77fb      	strb	r3, [r7, #31]
 8009c04:	7ffb      	ldrb	r3, [r7, #31]
 8009c06:	2b28      	cmp	r3, #40	; 0x28
 8009c08:	d9f5      	bls.n	8009bf6 <APRS_encode+0x26>
	}
	uint8_t stuff_count = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73bb      	strb	r3, [r7, #14]
	uint16_t crc = 0xFFFF;
 8009c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c12:	81bb      	strh	r3, [r7, #12]
	bool curr_nrzi = true;
 8009c14:	2301      	movs	r3, #1
 8009c16:	72fb      	strb	r3, [r7, #11]

	APRS_encode_insert_callsign(bfifo, pack->dest, &stuff_count, &curr_nrzi, &crc, 0); // destination
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	6819      	ldr	r1, [r3, #0]
 8009c1c:	f107 000b 	add.w	r0, r7, #11
 8009c20:	f107 020e 	add.w	r2, r7, #14
 8009c24:	2300      	movs	r3, #0
 8009c26:	9301      	str	r3, [sp, #4]
 8009c28:	f107 030c 	add.w	r3, r7, #12
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f970 	bl	8009f16 <APRS_encode_insert_callsign>
	APRS_encode_insert_callsign(bfifo, pack->callsign, &stuff_count, &curr_nrzi, &crc, 0); // callsign
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6859      	ldr	r1, [r3, #4]
 8009c3a:	f107 000b 	add.w	r0, r7, #11
 8009c3e:	f107 020e 	add.w	r2, r7, #14
 8009c42:	2300      	movs	r3, #0
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f107 030c 	add.w	r3, r7, #12
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f961 	bl	8009f16 <APRS_encode_insert_callsign>

	// assumes at least 1 digipeater
	char *digi = pack->digi;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	61bb      	str	r3, [r7, #24]
	uint32_t digidex = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	617b      	str	r3, [r7, #20]
	uint8_t digiend = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	74fb      	strb	r3, [r7, #19]
	while (!digiend) {
 8009c62:	e028      	b.n	8009cb6 <APRS_encode+0xe6>
		while (digi[digidex] >= '-') { // assumes ',' delimiter
			digidex++;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	3301      	adds	r3, #1
 8009c68:	617b      	str	r3, [r7, #20]
		while (digi[digidex] >= '-') { // assumes ',' delimiter
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	4413      	add	r3, r2
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	2b2c      	cmp	r3, #44	; 0x2c
 8009c74:	d8f6      	bhi.n	8009c64 <APRS_encode+0x94>
		}
		if (digi[digidex] == 0) { // reached end
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <APRS_encode+0xb6>
			digiend = 1;
 8009c82:	2301      	movs	r3, #1
 8009c84:	74fb      	strb	r3, [r7, #19]
		}
		APRS_encode_insert_callsign(bfifo, digi, &stuff_count, &curr_nrzi, &crc, digiend);
 8009c86:	7cfb      	ldrb	r3, [r7, #19]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bf14      	ite	ne
 8009c8c:	2301      	movne	r3, #1
 8009c8e:	2300      	moveq	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f107 010b 	add.w	r1, r7, #11
 8009c96:	f107 020e 	add.w	r2, r7, #14
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	f107 030c 	add.w	r3, r7, #12
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	69b9      	ldr	r1, [r7, #24]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f935 	bl	8009f16 <APRS_encode_insert_callsign>
		digi += digidex + 1;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
	while (!digiend) {
 8009cb6:	7cfb      	ldrb	r3, [r7, #19]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d0d6      	beq.n	8009c6a <APRS_encode+0x9a>
	}

	APRS_encode_stuff_byte_update_fcs(bfifo, 0x03, &stuff_count, &curr_nrzi, &crc); // control field
 8009cbc:	f107 010b 	add.w	r1, r7, #11
 8009cc0:	f107 020e 	add.w	r2, r7, #14
 8009cc4:	f107 030c 	add.w	r3, r7, #12
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	2103      	movs	r1, #3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f90a 	bl	8009ee8 <APRS_encode_stuff_byte_update_fcs>
	APRS_encode_stuff_byte_update_fcs(bfifo, 0xF0, &stuff_count, &curr_nrzi, &crc); // id
 8009cd4:	f107 010b 	add.w	r1, r7, #11
 8009cd8:	f107 020e 	add.w	r2, r7, #14
 8009cdc:	f107 030c 	add.w	r3, r7, #12
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	21f0      	movs	r1, #240	; 0xf0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f8fe 	bl	8009ee8 <APRS_encode_stuff_byte_update_fcs>

	for (uint16_t i = 0; i < strlen(pack->info); i++) { // info
 8009cec:	2300      	movs	r3, #0
 8009cee:	823b      	strh	r3, [r7, #16]
 8009cf0:	e012      	b.n	8009d18 <APRS_encode+0x148>
		APRS_encode_stuff_byte_update_fcs(bfifo, pack->info[i], &stuff_count, &curr_nrzi, &crc);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	8a3b      	ldrh	r3, [r7, #16]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	7819      	ldrb	r1, [r3, #0]
 8009cfc:	f107 000b 	add.w	r0, r7, #11
 8009d00:	f107 020e 	add.w	r2, r7, #14
 8009d04:	f107 030c 	add.w	r3, r7, #12
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f8eb 	bl	8009ee8 <APRS_encode_stuff_byte_update_fcs>
	for (uint16_t i = 0; i < strlen(pack->info); i++) { // info
 8009d12:	8a3b      	ldrh	r3, [r7, #16]
 8009d14:	3301      	adds	r3, #1
 8009d16:	823b      	strh	r3, [r7, #16]
 8009d18:	8a3c      	ldrh	r4, [r7, #16]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7f6 fa2e 	bl	8000180 <strlen>
 8009d24:	4603      	mov	r3, r0
 8009d26:	429c      	cmp	r4, r3
 8009d28:	d3e3      	bcc.n	8009cf2 <APRS_encode+0x122>
	}

	crc = ~crc; // don't forget this
 8009d2a:	89bb      	ldrh	r3, [r7, #12]
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	81bb      	strh	r3, [r7, #12]
	APRS_encode_stuff_byte(bfifo, crc & 0xFF, &stuff_count, &curr_nrzi); // FCS, LSB first
 8009d32:	89bb      	ldrh	r3, [r7, #12]
 8009d34:	b2d9      	uxtb	r1, r3
 8009d36:	f107 030b 	add.w	r3, r7, #11
 8009d3a:	f107 020e 	add.w	r2, r7, #14
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f86d 	bl	8009e1e <APRS_encode_stuff_byte>
	APRS_encode_stuff_byte(bfifo, crc >> 8, &stuff_count, &curr_nrzi);
 8009d44:	89bb      	ldrh	r3, [r7, #12]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	b2d9      	uxtb	r1, r3
 8009d4c:	f107 030b 	add.w	r3, r7, #11
 8009d50:	f107 020e 	add.w	r2, r7, #14
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f862 	bl	8009e1e <APRS_encode_stuff_byte>

	for (uint8_t i = 0; i < (APRS_POSTFLAGS + 1); i++) { // postflags
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]
 8009d5e:	e00c      	b.n	8009d7a <APRS_encode+0x1aa>
		APRS_encode_insert_byte(bfifo, curr_nrzi ? 0b10000000 : 0b01111111);
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <APRS_encode+0x19a>
 8009d66:	2380      	movs	r3, #128	; 0x80
 8009d68:	e000      	b.n	8009d6c <APRS_encode+0x19c>
 8009d6a:	237f      	movs	r3, #127	; 0x7f
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f836 	bl	8009de0 <APRS_encode_insert_byte>
	for (uint8_t i = 0; i < (APRS_POSTFLAGS + 1); i++) { // postflags
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	3301      	adds	r3, #1
 8009d78:	73fb      	strb	r3, [r7, #15]
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	2b28      	cmp	r3, #40	; 0x28
 8009d7e:	d9ef      	bls.n	8009d60 <APRS_encode+0x190>
	}
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	3724      	adds	r7, #36	; 0x24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd90      	pop	{r4, r7, pc}

08009d8a <APRS_send>:

bool APRS_send(BitFIFO *bfifo) {
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
	return AFSK_send(bfifo);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff fdee 	bl	8009974 <AFSK_send>
 8009d98:	4603      	mov	r3, r0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <APRS_update_fcs>:

// private helpers
void APRS_update_fcs(uint8_t b, uint16_t *crc) {
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	71fb      	strb	r3, [r7, #7]
	*crc = ((*crc) >> 8) ^ APRS_CCITT_LOOKUP[((*crc) ^ b) & 0xFF];
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	79fb      	ldrb	r3, [r7, #7]
 8009dc0:	404b      	eors	r3, r1
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	4905      	ldr	r1, [pc, #20]	; (8009ddc <APRS_update_fcs+0x38>)
 8009dc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009dca:	4053      	eors	r3, r2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	801a      	strh	r2, [r3, #0]
}
 8009dd2:	bf00      	nop
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr
 8009ddc:	0801a790 	.word	0x0801a790

08009de0 <APRS_encode_insert_byte>:

void APRS_encode_insert_byte(BitFIFO *bfifo, uint8_t b) {
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < 8; i++) {
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
 8009df0:	e00d      	b.n	8009e0e <APRS_encode_insert_byte+0x2e>
		BitFIFO_push(bfifo, b & 0x01); // LSB first
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f986 	bl	800a10e <BitFIFO_push>
		b >>= 1;
 8009e02:	78fb      	ldrb	r3, [r7, #3]
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < 8; i++) {
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	73fb      	strb	r3, [r7, #15]
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	2b07      	cmp	r3, #7
 8009e12:	d9ee      	bls.n	8009df2 <APRS_encode_insert_byte+0x12>
	}
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <APRS_encode_stuff_byte>:

void APRS_encode_stuff_byte(BitFIFO *bfifo, uint8_t b, uint8_t *stuff_count, bool *curr_nrzi) {
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b086      	sub	sp, #24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i = 0; i < 8; i++) {
 8009e2e:	2300      	movs	r3, #0
 8009e30:	75fb      	strb	r3, [r7, #23]
 8009e32:	e051      	b.n	8009ed8 <APRS_encode_stuff_byte+0xba>
		if (b & 0x01) {
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00c      	beq.n	8009e58 <APRS_encode_stuff_byte+0x3a>
			*stuff_count += 1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	3301      	adds	r3, #1
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	701a      	strb	r2, [r3, #0]
			BitFIFO_push(bfifo, *curr_nrzi); // add 1
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f95c 	bl	800a10e <BitFIFO_push>
 8009e56:	e01a      	b.n	8009e8e <APRS_encode_stuff_byte+0x70>
		} else {
			*stuff_count = 0;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
			BitFIFO_push(bfifo, !*curr_nrzi); // add 0
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f083 0301 	eor.w	r3, r3, #1
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	4619      	mov	r1, r3
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f94f 	bl	800a10e <BitFIFO_push>
			*curr_nrzi = !*curr_nrzi;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf14      	ite	ne
 8009e78:	2301      	movne	r3, #1
 8009e7a:	2300      	moveq	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f083 0301 	eor.w	r3, r3, #1
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	701a      	strb	r2, [r3, #0]
		}
		if (*stuff_count == 5) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d11a      	bne.n	8009ecc <APRS_encode_stuff_byte+0xae>
			*stuff_count = 0;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
			BitFIFO_push(bfifo, !*curr_nrzi); // add 0
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	f083 0301 	eor.w	r3, r3, #1
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 f930 	bl	800a10e <BitFIFO_push>
			*curr_nrzi = !*curr_nrzi;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bf14      	ite	ne
 8009eb6:	2301      	movne	r3, #1
 8009eb8:	2300      	moveq	r3, #0
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f083 0301 	eor.w	r3, r3, #1
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	701a      	strb	r2, [r3, #0]
		}
		b >>= 1;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	085b      	lsrs	r3, r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i = 0; i < 8; i++) {
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	75fb      	strb	r3, [r7, #23]
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	2b07      	cmp	r3, #7
 8009edc:	d9aa      	bls.n	8009e34 <APRS_encode_stuff_byte+0x16>
	}
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <APRS_encode_stuff_byte_update_fcs>:

void APRS_encode_stuff_byte_update_fcs(BitFIFO *bfifo, uint8_t b, uint8_t *stuff_count, bool *curr_nrzi, uint16_t *crc) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	607a      	str	r2, [r7, #4]
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	72fb      	strb	r3, [r7, #11]
	APRS_encode_stuff_byte(bfifo, b, stuff_count, curr_nrzi);
 8009ef8:	7af9      	ldrb	r1, [r7, #11]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff ff8d 	bl	8009e1e <APRS_encode_stuff_byte>
	APRS_update_fcs(b, crc);
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	69b9      	ldr	r1, [r7, #24]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff ff4b 	bl	8009da4 <APRS_update_fcs>
}
 8009f0e:	bf00      	nop
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <APRS_encode_insert_callsign>:

void APRS_encode_insert_callsign(BitFIFO *bfifo, char *sign, uint8_t *stuff_count, bool *curr_nrzi, uint16_t *crc, bool end) {
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b088      	sub	sp, #32
 8009f1a:	af02      	add	r7, sp, #8
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	607a      	str	r2, [r7, #4]
 8009f22:	603b      	str	r3, [r7, #0]
	// auto-terminates at ',' or '\0'
	uint8_t c = 0, ssid = 1;
 8009f24:	2300      	movs	r3, #0
 8009f26:	75fb      	strb	r3, [r7, #23]
 8009f28:	2301      	movs	r3, #1
 8009f2a:	75bb      	strb	r3, [r7, #22]
	while (*sign) {
 8009f2c:	e017      	b.n	8009f5e <APRS_encode_insert_callsign+0x48>
		if (*sign == '-') {
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b2d      	cmp	r3, #45	; 0x2d
 8009f34:	d102      	bne.n	8009f3c <APRS_encode_insert_callsign+0x26>
			ssid = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75bb      	strb	r3, [r7, #22]
			break;
 8009f3a:	e014      	b.n	8009f66 <APRS_encode_insert_callsign+0x50>
		}
		APRS_encode_stuff_byte_update_fcs(bfifo, *sign << 1, stuff_count, curr_nrzi, crc);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	b2d9      	uxtb	r1, r3
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff ffcb 	bl	8009ee8 <APRS_encode_stuff_byte_update_fcs>
		c++;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	3301      	adds	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
		sign++;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60bb      	str	r3, [r7, #8]
	while (*sign) {
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e3      	bne.n	8009f2e <APRS_encode_insert_callsign+0x18>
	}
	for (; c < 6; c++) { // pad to 6 bytes
 8009f66:	e00a      	b.n	8009f7e <APRS_encode_insert_callsign+0x68>
		APRS_encode_stuff_byte_update_fcs(bfifo, ' ' << 1, stuff_count, curr_nrzi, crc);
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	2140      	movs	r1, #64	; 0x40
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7ff ffb8 	bl	8009ee8 <APRS_encode_stuff_byte_update_fcs>
	for (; c < 6; c++) { // pad to 6 bytes
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	2b05      	cmp	r3, #5
 8009f82:	d9f1      	bls.n	8009f68 <APRS_encode_insert_callsign+0x52>
	}
	if (ssid) {
 8009f84:	7dbb      	ldrb	r3, [r7, #22]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <APRS_encode_insert_callsign+0x7a>
		ssid = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75bb      	strb	r3, [r7, #22]
 8009f8e:	e014      	b.n	8009fba <APRS_encode_insert_callsign+0xa4>
	} else if (*(sign+2) >= '0' && *(sign+2) <= '9') {
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	3302      	adds	r3, #2
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b2f      	cmp	r3, #47	; 0x2f
 8009f98:	d90a      	bls.n	8009fb0 <APRS_encode_insert_callsign+0x9a>
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b39      	cmp	r3, #57	; 0x39
 8009fa2:	d805      	bhi.n	8009fb0 <APRS_encode_insert_callsign+0x9a>
		ssid = 10 + (*(sign+2) - '0');
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	3b26      	subs	r3, #38	; 0x26
 8009fac:	75bb      	strb	r3, [r7, #22]
 8009fae:	e004      	b.n	8009fba <APRS_encode_insert_callsign+0xa4>
	} else {
		ssid = *(sign+1) - '0';
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	3b30      	subs	r3, #48	; 0x30
 8009fb8:	75bb      	strb	r3, [r7, #22]
	}
	APRS_encode_stuff_byte_update_fcs(bfifo, ((0b0110000 | ssid) << 1) | end, stuff_count, curr_nrzi, crc);
 8009fba:	7dbb      	ldrb	r3, [r7, #22]
 8009fbc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	b25a      	sxtb	r2, r3
 8009fc6:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	b25b      	sxtb	r3, r3
 8009fce:	b2d9      	uxtb	r1, r3
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ff85 	bl	8009ee8 <APRS_encode_stuff_byte_update_fcs>
}
 8009fde:	bf00      	nop
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <BitFIFO_get>:
 */

#include "BitFIFO.h"

// bitarray implementation from http://www.mathcs.emory.edu/~cheung/Courses/255/Syllabus/1-C-intro/bit-array.html
static uint8_t BitFIFO_get(BitFIFO *bfifo, uint32_t i) {
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
	return bfifo->arr[i >> 3] & (1 << (i%8));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	08db      	lsrs	r3, r3, #3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	b25a      	sxtb	r2, r3
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	f003 0307 	and.w	r3, r3, #7
 800a004:	2101      	movs	r1, #1
 800a006:	fa01 f303 	lsl.w	r3, r1, r3
 800a00a:	b25b      	sxtb	r3, r3
 800a00c:	4013      	ands	r3, r2
 800a00e:	b25b      	sxtb	r3, r3
 800a010:	b2db      	uxtb	r3, r3
}
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	bc80      	pop	{r7}
 800a01a:	4770      	bx	lr

0800a01c <BitFIFO_set>:

static void BitFIFO_set(BitFIFO *bfifo, uint32_t i, uint8_t val) {
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	71fb      	strb	r3, [r7, #7]
	if (val) {
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d017      	beq.n	800a060 <BitFIFO_set+0x44>
		bfifo->arr[i >> 3] |= 1 << (i%8);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	08db      	lsrs	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	b25a      	sxtb	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	2101      	movs	r1, #1
 800a046:	fa01 f303 	lsl.w	r3, r1, r3
 800a04a:	b25b      	sxtb	r3, r3
 800a04c:	4313      	orrs	r3, r2
 800a04e:	b259      	sxtb	r1, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	08db      	lsrs	r3, r3, #3
 800a058:	4413      	add	r3, r2
 800a05a:	b2ca      	uxtb	r2, r1
 800a05c:	701a      	strb	r2, [r3, #0]
	} else {
		bfifo->arr[i >> 3] &= ~(1 << (i%8));
	}
}
 800a05e:	e018      	b.n	800a092 <BitFIFO_set+0x76>
		bfifo->arr[i >> 3] &= ~(1 << (i%8));
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	08db      	lsrs	r3, r3, #3
 800a068:	4413      	add	r3, r2
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	b25a      	sxtb	r2, r3
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f003 0307 	and.w	r3, r3, #7
 800a074:	2101      	movs	r1, #1
 800a076:	fa01 f303 	lsl.w	r3, r1, r3
 800a07a:	b25b      	sxtb	r3, r3
 800a07c:	43db      	mvns	r3, r3
 800a07e:	b25b      	sxtb	r3, r3
 800a080:	4013      	ands	r3, r2
 800a082:	b259      	sxtb	r1, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	08db      	lsrs	r3, r3, #3
 800a08c:	4413      	add	r3, r2
 800a08e:	b2ca      	uxtb	r2, r1
 800a090:	701a      	strb	r2, [r3, #0]
}
 800a092:	bf00      	nop
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr

0800a09c <BitFIFO_init>:

void BitFIFO_init(BitFIFO *bfifo, uint8_t *arr, uint32_t size_bytes) {
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
	bfifo->arr = arr;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	601a      	str	r2, [r3, #0]
	bfifo->size = size_bytes << 3;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	00da      	lsls	r2, r3, #3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	605a      	str	r2, [r3, #4]
	bfifo->start = 0;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	609a      	str	r2, [r3, #8]
	bfifo->end = 0;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	60da      	str	r2, [r3, #12]
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bc80      	pop	{r7}
 800a0ca:	4770      	bx	lr

0800a0cc <BitFIFO_reinit>:

void BitFIFO_reinit(BitFIFO *bfifo) {
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
	bfifo->start = 0;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	609a      	str	r2, [r3, #8]
	bfifo->end = 0;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	60da      	str	r2, [r3, #12]
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bc80      	pop	{r7}
 800a0e8:	4770      	bx	lr

0800a0ea <BitFIFO_is_empty>:

bool BitFIFO_is_empty(BitFIFO *bfifo) {
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
	return bfifo->start == bfifo->end;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	bf0c      	ite	eq
 800a0fe:	2301      	moveq	r3, #1
 800a100:	2300      	movne	r3, #0
 800a102:	b2db      	uxtb	r3, r3
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	bc80      	pop	{r7}
 800a10c:	4770      	bx	lr

0800a10e <BitFIFO_push>:

void BitFIFO_push(BitFIFO *bfifo, uint8_t val) {
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
	BitFIFO_set(bfifo, bfifo->end, val);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff ff7a 	bl	800a01c <BitFIFO_set>
	bfifo->end = (bfifo->end + 1) % bfifo->size;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	6852      	ldr	r2, [r2, #4]
 800a132:	fbb3 f1f2 	udiv	r1, r3, r2
 800a136:	fb01 f202 	mul.w	r2, r1, r2
 800a13a:	1a9a      	subs	r2, r3, r2
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	60da      	str	r2, [r3, #12]
#ifdef BITFIFO_DEBUG
	if (bfifo->start == bfifo->end) { // wrapped around, so is full
		Error_Handler();
	}
#endif
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <BitFIFO_pop>:

uint8_t BitFIFO_pop(BitFIFO *bfifo) {
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
	if (bfifo->start == bfifo->end) {
		Error_Handler();
	}
#endif

	uint8_t val = BitFIFO_get(bfifo, bfifo->start);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff ff45 	bl	8009fe6 <BitFIFO_get>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]
	bfifo->start = (bfifo->start + 1) % bfifo->size;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	3301      	adds	r3, #1
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	6852      	ldr	r2, [r2, #4]
 800a16a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a16e:	fb01 f202 	mul.w	r2, r1, r2
 800a172:	1a9a      	subs	r2, r3, r2
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	609a      	str	r2, [r3, #8]
	return val;
 800a178:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <max_m10s_init>:

static Status ubx_cfg_valset(I2cDevice* device, Max_M10S_Layer_TypeDef layer,
                             uint32_t* keys, uint64_t* values,
                             uint8_t* value_lens, size_t num_items);

Status max_m10s_init(I2cDevice* device) {
 800a184:	b5b0      	push	{r4, r5, r7, lr}
 800a186:	b0a4      	sub	sp, #144	; 0x90
 800a188:	af02      	add	r7, sp, #8
 800a18a:	6078      	str	r0, [r7, #4]
    uint32_t keys[] = {0x20110021, 0x10720002, 0x209100ba,
 800a18c:	4b1c      	ldr	r3, [pc, #112]	; (800a200 <max_m10s_init+0x7c>)
 800a18e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800a192:	461d      	mov	r5, r3
 800a194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	6023      	str	r3, [r4, #0]
                       0x209100c9, 0x209100bf, 0x209100c4,
                       0x209100ab, 0x209100b0, 0x30210001};
    uint64_t values[] = {8, 0, 0, 0, 0, 0, 0, 0, 500};
 800a1a0:	4a18      	ldr	r2, [pc, #96]	; (800a204 <max_m10s_init+0x80>)
 800a1a2:	f107 0318 	add.w	r3, r7, #24
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	2248      	movs	r2, #72	; 0x48
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f00c fd68 	bl	8016c80 <memcpy>
    uint8_t value_lens[] = {1, 1, 1, 1, 1, 1, 1, 1, 2};
 800a1b0:	4a15      	ldr	r2, [pc, #84]	; (800a208 <max_m10s_init+0x84>)
 800a1b2:	f107 030c 	add.w	r3, r7, #12
 800a1b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1b8:	c303      	stmia	r3!, {r0, r1}
 800a1ba:	701a      	strb	r2, [r3, #0]
    if (ubx_cfg_valset(device, MAX_M10S_LAYER_SET_RAM, keys, values, value_lens,
 800a1bc:	f107 0118 	add.w	r1, r7, #24
 800a1c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a1c4:	2309      	movs	r3, #9
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	f107 030c 	add.w	r3, r7, #12
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f95c 	bl	800a490 <ubx_cfg_valset>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <max_m10s_init+0x70>
                       9) == STATUS_OK) {
        printf("Set nav mode to airborne <4G\n");
 800a1de:	480b      	ldr	r0, [pc, #44]	; (800a20c <max_m10s_init+0x88>)
 800a1e0:	f00d fb24 	bl	801782c <puts>
        printf("Disabled NMEA on I2C\n");
 800a1e4:	480a      	ldr	r0, [pc, #40]	; (800a210 <max_m10s_init+0x8c>)
 800a1e6:	f00d fb21 	bl	801782c <puts>
        printf("Navigation measurement rate set to 5 Hz\n");
 800a1ea:	480a      	ldr	r0, [pc, #40]	; (800a214 <max_m10s_init+0x90>)
 800a1ec:	f00d fb1e 	bl	801782c <puts>
    } else {
        return STATUS_ERROR;
    }
    return STATUS_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e000      	b.n	800a1f6 <max_m10s_init+0x72>
        return STATUS_ERROR;
 800a1f4:	2302      	movs	r3, #2
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3788      	adds	r7, #136	; 0x88
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	0801a0e8 	.word	0x0801a0e8
 800a204:	0801a110 	.word	0x0801a110
 800a208:	0801a158 	.word	0x0801a158
 800a20c:	0801a088 	.word	0x0801a088
 800a210:	0801a0a8 	.word	0x0801a0a8
 800a214:	0801a0c0 	.word	0x0801a0c0

0800a218 <ubx_read_msg>:

static Status ubx_read_msg(I2cDevice* device, uint8_t header[4],
                           uint8_t* message_buf, uint16_t* message_len,
                           uint32_t timeout) {
 800a218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a21c:	b08e      	sub	sp, #56	; 0x38
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6178      	str	r0, [r7, #20]
 800a222:	6139      	str	r1, [r7, #16]
 800a224:	60fa      	str	r2, [r7, #12]
 800a226:	60bb      	str	r3, [r7, #8]
    uint8_t header_idx = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint64_t start_time = MILLIS();
 800a22e:	f7f7 fe87 	bl	8001f40 <MILLIS>
 800a232:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

    // Read until we get a matching header
    while (1) {
        uint8_t tx_buf[1] = {0xFF};
 800a236:	23ff      	movs	r3, #255	; 0xff
 800a238:	773b      	strb	r3, [r7, #28]
        uint8_t rx_buf[1] = {0xFF};
 800a23a:	23ff      	movs	r3, #255	; 0xff
 800a23c:	763b      	strb	r3, [r7, #24]
        if (MILLIS() - start_time > timeout) {
 800a23e:	f7f7 fe7f 	bl	8001f40 <MILLIS>
 800a242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a246:	1a84      	subs	r4, r0, r2
 800a248:	eb61 0503 	sbc.w	r5, r1, r3
 800a24c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a24e:	2200      	movs	r2, #0
 800a250:	469a      	mov	sl, r3
 800a252:	4693      	mov	fp, r2
 800a254:	45a2      	cmp	sl, r4
 800a256:	eb7b 0305 	sbcs.w	r3, fp, r5
 800a25a:	d22e      	bcs.n	800a2ba <ubx_read_msg+0xa2>
            return STATUS_TIMEOUT;
 800a25c:	2307      	movs	r3, #7
 800a25e:	e111      	b.n	800a484 <ubx_read_msg+0x26c>
        }
        while (rx_buf[0] == 0xFF) {
            if (MILLIS() - start_time > timeout) {
 800a260:	f7f7 fe6e 	bl	8001f40 <MILLIS>
 800a264:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a268:	ebb0 0802 	subs.w	r8, r0, r2
 800a26c:	eb61 0903 	sbc.w	r9, r1, r3
 800a270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a272:	2200      	movs	r2, #0
 800a274:	603b      	str	r3, [r7, #0]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27c:	4611      	mov	r1, r2
 800a27e:	4541      	cmp	r1, r8
 800a280:	eb73 0309 	sbcs.w	r3, r3, r9
 800a284:	d201      	bcs.n	800a28a <ubx_read_msg+0x72>
                return STATUS_TIMEOUT;
 800a286:	2307      	movs	r3, #7
 800a288:	e0fc      	b.n	800a484 <ubx_read_msg+0x26c>
            }
            if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800a28a:	f107 031c 	add.w	r3, r7, #28
 800a28e:	2201      	movs	r2, #1
 800a290:	4619      	mov	r1, r3
 800a292:	6978      	ldr	r0, [r7, #20]
 800a294:	f7f7 ff8e 	bl	80021b4 <i2c_write>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <ubx_read_msg+0x8a>
                return STATUS_ERROR;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e0f0      	b.n	800a484 <ubx_read_msg+0x26c>
            }
            if (i2c_read(device, rx_buf, 1) != STATUS_OK) {
 800a2a2:	f107 0318 	add.w	r3, r7, #24
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6978      	ldr	r0, [r7, #20]
 800a2ac:	f7f7 ffae 	bl	800220c <i2c_read>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <ubx_read_msg+0xa2>
                return STATUS_ERROR;
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	e0e4      	b.n	800a484 <ubx_read_msg+0x26c>
        while (rx_buf[0] == 0xFF) {
 800a2ba:	7e3b      	ldrb	r3, [r7, #24]
 800a2bc:	2bff      	cmp	r3, #255	; 0xff
 800a2be:	d0cf      	beq.n	800a260 <ubx_read_msg+0x48>
            }
        }
        if (rx_buf[0] == header[header_idx]) {
 800a2c0:	7e3a      	ldrb	r2, [r7, #24]
 800a2c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2c6:	6939      	ldr	r1, [r7, #16]
 800a2c8:	440b      	add	r3, r1
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d1b2      	bne.n	800a236 <ubx_read_msg+0x1e>
            if (header_idx == 3) {
 800a2d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d110      	bne.n	800a2fa <ubx_read_msg+0xe2>
            continue;
        }
    }

    // Read out the length bytes
    uint8_t tx_buf[1] = {0xFF};
 800a2d8:	23ff      	movs	r3, #255	; 0xff
 800a2da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t rx_buf[2] = {0xFF, 0xFF};
 800a2de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2e2:	843b      	strh	r3, [r7, #32]
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800a2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6978      	ldr	r0, [r7, #20]
 800a2ee:	f7f7 ff61 	bl	80021b4 <i2c_write>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <ubx_read_msg+0xee>
 800a2f8:	e007      	b.n	800a30a <ubx_read_msg+0xf2>
            header_idx++;
 800a2fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2fe:	3301      	adds	r3, #1
 800a300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while (1) {
 800a304:	e797      	b.n	800a236 <ubx_read_msg+0x1e>
        return STATUS_ERROR;
 800a306:	2302      	movs	r3, #2
 800a308:	e0bc      	b.n	800a484 <ubx_read_msg+0x26c>
    }
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800a30a:	f107 0320 	add.w	r3, r7, #32
 800a30e:	2202      	movs	r2, #2
 800a310:	4619      	mov	r1, r3
 800a312:	6978      	ldr	r0, [r7, #20]
 800a314:	f7f7 ff7a 	bl	800220c <i2c_read>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <ubx_read_msg+0x10a>
        return STATUS_ERROR;
 800a31e:	2302      	movs	r3, #2
 800a320:	e0b0      	b.n	800a484 <ubx_read_msg+0x26c>
    }
    if (rx_buf[0] == 0xFF && rx_buf[1] == 0xFF) {
 800a322:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a326:	2bff      	cmp	r3, #255	; 0xff
 800a328:	d105      	bne.n	800a336 <ubx_read_msg+0x11e>
 800a32a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a32e:	2bff      	cmp	r3, #255	; 0xff
 800a330:	d101      	bne.n	800a336 <ubx_read_msg+0x11e>
        return STATUS_ERROR;
 800a332:	2302      	movs	r3, #2
 800a334:	e0a6      	b.n	800a484 <ubx_read_msg+0x26c>
    }
    uint16_t len = rx_buf[0] + ((uint16_t)rx_buf[1] << 8);
 800a336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a340:	b29b      	uxth	r3, r3
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	b29b      	uxth	r3, r3
 800a346:	4413      	add	r3, r2
 800a348:	84fb      	strh	r3, [r7, #38]	; 0x26
    *message_len = len;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a34e:	801a      	strh	r2, [r3, #0]

    // Read out the payload bytes
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800a350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a354:	2201      	movs	r2, #1
 800a356:	4619      	mov	r1, r3
 800a358:	6978      	ldr	r0, [r7, #20]
 800a35a:	f7f7 ff2b 	bl	80021b4 <i2c_write>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <ubx_read_msg+0x150>
        return STATUS_ERROR;
 800a364:	2302      	movs	r3, #2
 800a366:	e08d      	b.n	800a484 <ubx_read_msg+0x26c>
    }
    if (i2c_read(device, message_buf, len) != STATUS_OK) {
 800a368:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a36a:	461a      	mov	r2, r3
 800a36c:	68f9      	ldr	r1, [r7, #12]
 800a36e:	6978      	ldr	r0, [r7, #20]
 800a370:	f7f7 ff4c 	bl	800220c <i2c_read>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <ubx_read_msg+0x166>
        return STATUS_ERROR;
 800a37a:	2302      	movs	r3, #2
 800a37c:	e082      	b.n	800a484 <ubx_read_msg+0x26c>
    }

    // Read out the checksum bytes
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800a37e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a382:	2201      	movs	r2, #1
 800a384:	4619      	mov	r1, r3
 800a386:	6978      	ldr	r0, [r7, #20]
 800a388:	f7f7 ff14 	bl	80021b4 <i2c_write>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <ubx_read_msg+0x17e>
        return STATUS_ERROR;
 800a392:	2302      	movs	r3, #2
 800a394:	e076      	b.n	800a484 <ubx_read_msg+0x26c>
    }
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800a396:	f107 0320 	add.w	r3, r7, #32
 800a39a:	2202      	movs	r2, #2
 800a39c:	4619      	mov	r1, r3
 800a39e:	6978      	ldr	r0, [r7, #20]
 800a3a0:	f7f7 ff34 	bl	800220c <i2c_read>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <ubx_read_msg+0x196>
        return STATUS_ERROR;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e06a      	b.n	800a484 <ubx_read_msg+0x26c>
    }

    // Check checksum
    uint8_t CK_A = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t CK_B = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for (uint8_t i = 2; i < 4; i++) {
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a3c0:	e015      	b.n	800a3ee <ubx_read_msg+0x1d6>
        CK_A += header[i];
 800a3c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	781a      	ldrb	r2, [r3, #0]
 800a3cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        CK_B += CK_A;
 800a3d6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a3da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a3de:	4413      	add	r3, r2
 800a3e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for (uint8_t i = 2; i < 4; i++) {
 800a3e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a3ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d9e5      	bls.n	800a3c2 <ubx_read_msg+0x1aa>
    }
    CK_A += (uint8_t)(len & 0xFF);
 800a3f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a3fe:	4413      	add	r3, r2
 800a400:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    CK_B += CK_A;
 800a404:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a408:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a40c:	4413      	add	r3, r2
 800a40e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    CK_A += (uint8_t)((len >> 8) & 0xFF);
 800a412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a414:	0a1b      	lsrs	r3, r3, #8
 800a416:	b29b      	uxth	r3, r3
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a41e:	4413      	add	r3, r2
 800a420:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    CK_B += CK_A;
 800a424:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a428:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a42c:	4413      	add	r3, r2
 800a42e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for (uint16_t i = 0; i < len; i++) {
 800a432:	2300      	movs	r3, #0
 800a434:	867b      	strh	r3, [r7, #50]	; 0x32
 800a436:	e012      	b.n	800a45e <ubx_read_msg+0x246>
        CK_A += message_buf[i];
 800a438:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4413      	add	r3, r2
 800a43e:	781a      	ldrb	r2, [r3, #0]
 800a440:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a444:	4413      	add	r3, r2
 800a446:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        CK_B += CK_A;
 800a44a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a44e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a452:	4413      	add	r3, r2
 800a454:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for (uint16_t i = 0; i < len; i++) {
 800a458:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a45a:	3301      	adds	r3, #1
 800a45c:	867b      	strh	r3, [r7, #50]	; 0x32
 800a45e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a462:	429a      	cmp	r2, r3
 800a464:	d3e8      	bcc.n	800a438 <ubx_read_msg+0x220>
    }
    if (CK_A == rx_buf[0] && CK_B == rx_buf[1]) {
 800a466:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a46a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a46e:	429a      	cmp	r2, r3
 800a470:	d107      	bne.n	800a482 <ubx_read_msg+0x26a>
 800a472:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a476:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d101      	bne.n	800a482 <ubx_read_msg+0x26a>
        return STATUS_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	e000      	b.n	800a484 <ubx_read_msg+0x26c>
    }
    return STATUS_ERROR;
 800a482:	2302      	movs	r3, #2
}
 800a484:	4618      	mov	r0, r3
 800a486:	3738      	adds	r7, #56	; 0x38
 800a488:	46bd      	mov	sp, r7
 800a48a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800a490 <ubx_cfg_valset>:
    return STATUS_OK;
}

static Status ubx_cfg_valset(I2cDevice* device, Max_M10S_Layer_TypeDef layer,
                             uint32_t* keys, uint64_t* values,
                             uint8_t* value_lens, size_t num_items) {
 800a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
 800a498:	af02      	add	r7, sp, #8
 800a49a:	f507 7658 	add.w	r6, r7, #864	; 0x360
 800a49e:	f5a6 7653 	sub.w	r6, r6, #844	; 0x34c
 800a4a2:	6030      	str	r0, [r6, #0]
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	f507 7158 	add.w	r1, r7, #864	; 0x360
 800a4aa:	f5a1 7155 	sub.w	r1, r1, #852	; 0x354
 800a4ae:	600a      	str	r2, [r1, #0]
 800a4b0:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800a4b4:	f5a2 7256 	sub.w	r2, r2, #856	; 0x358
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800a4be:	f2a3 334d 	subw	r3, r3, #845	; 0x34d
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	701a      	strb	r2, [r3, #0]
    uint16_t total_len = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f8a7 335a 	strh.w	r3, [r7, #858]	; 0x35a
    for (uint8_t i = 0; i < num_items; i++) {
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f887 335d 	strb.w	r3, [r7, #861]	; 0x35d
 800a4d2:	e012      	b.n	800a4fa <ubx_cfg_valset+0x6a>
        total_len += 4 + value_lens[i];
 800a4d4:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 800a4d8:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 800a4dc:	4413      	add	r3, r2
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	f8b7 335a 	ldrh.w	r3, [r7, #858]	; 0x35a
 800a4e6:	4413      	add	r3, r2
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	f8a7 335a 	strh.w	r3, [r7, #858]	; 0x35a
    for (uint8_t i = 0; i < num_items; i++) {
 800a4f0:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	f887 335d 	strb.w	r3, [r7, #861]	; 0x35d
 800a4fa:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 800a4fe:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800a502:	429a      	cmp	r2, r3
 800a504:	d8e6      	bhi.n	800a4d4 <ubx_cfg_valset+0x44>
    }
    size_t tx_buf_len = 12 + total_len;
 800a506:	f8b7 335a 	ldrh.w	r3, [r7, #858]	; 0x35a
 800a50a:	330c      	adds	r3, #12
 800a50c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    uint8_t tx_buf[tx_buf_len];
 800a510:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 800a514:	466b      	mov	r3, sp
 800a516:	607b      	str	r3, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	3b01      	subs	r3, #1
 800a51c:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800a520:	2300      	movs	r3, #0
 800a522:	468a      	mov	sl, r1
 800a524:	469b      	mov	fp, r3
 800a526:	f04f 0200 	mov.w	r2, #0
 800a52a:	f04f 0300 	mov.w	r3, #0
 800a52e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a532:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a53a:	2300      	movs	r3, #0
 800a53c:	4688      	mov	r8, r1
 800a53e:	4699      	mov	r9, r3
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a54c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a550:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a554:	1dcb      	adds	r3, r1, #7
 800a556:	08db      	lsrs	r3, r3, #3
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	ebad 0d03 	sub.w	sp, sp, r3
 800a55e:	ab02      	add	r3, sp, #8
 800a560:	3300      	adds	r3, #0
 800a562:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    tx_buf[0] = 0xB5;
 800a566:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a56a:	22b5      	movs	r2, #181	; 0xb5
 800a56c:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = 0x62;
 800a56e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a572:	2262      	movs	r2, #98	; 0x62
 800a574:	705a      	strb	r2, [r3, #1]
    tx_buf[2] = 0x06;
 800a576:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a57a:	2206      	movs	r2, #6
 800a57c:	709a      	strb	r2, [r3, #2]
    tx_buf[3] = 0x8A;
 800a57e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a582:	228a      	movs	r2, #138	; 0x8a
 800a584:	70da      	strb	r2, [r3, #3]
    tx_buf[4] = (4 + total_len) & 0xFF;
 800a586:	f8b7 335a 	ldrh.w	r3, [r7, #858]	; 0x35a
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	3304      	adds	r3, #4
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a594:	711a      	strb	r2, [r3, #4]
    tx_buf[5] = ((4 + total_len) >> 8) & 0xFF;
 800a596:	f8b7 335a 	ldrh.w	r3, [r7, #858]	; 0x35a
 800a59a:	3304      	adds	r3, #4
 800a59c:	121b      	asrs	r3, r3, #8
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a5a4:	715a      	strb	r2, [r3, #5]
    tx_buf[6] = 1;
 800a5a6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	719a      	strb	r2, [r3, #6]
    tx_buf[7] = (uint8_t)layer;
 800a5ae:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a5b2:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800a5b6:	f2a2 324d 	subw	r2, r2, #845	; 0x34d
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	71da      	strb	r2, [r3, #7]
    tx_buf[8] = 0;
 800a5be:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	721a      	strb	r2, [r3, #8]
    tx_buf[9] = 0;
 800a5c6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	725a      	strb	r2, [r3, #9]
    uint16_t tx_buf_idx = 10;
 800a5ce:	230a      	movs	r3, #10
 800a5d0:	f8a7 335e 	strh.w	r3, [r7, #862]	; 0x35e
    for (uint16_t i = 0; i < num_items; i++) {
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f8a7 3358 	strh.w	r3, [r7, #856]	; 0x358
 800a5da:	e064      	b.n	800a6a6 <ubx_cfg_valset+0x216>
        for (uint8_t j = 0; j < 4; j++) {
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
 800a5e2:	e01d      	b.n	800a620 <ubx_cfg_valset+0x190>
            tx_buf[tx_buf_idx] = (keys[i] >> (j * 8)) & 0xFF;
 800a5e4:	f8b7 3358 	ldrh.w	r3, [r7, #856]	; 0x358
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800a5ee:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	40da      	lsrs	r2, r3
 800a600:	f8b7 335e 	ldrh.w	r3, [r7, #862]	; 0x35e
 800a604:	b2d1      	uxtb	r1, r2
 800a606:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800a60a:	54d1      	strb	r1, [r2, r3]
            tx_buf_idx += 1;
 800a60c:	f8b7 335e 	ldrh.w	r3, [r7, #862]	; 0x35e
 800a610:	3301      	adds	r3, #1
 800a612:	f8a7 335e 	strh.w	r3, [r7, #862]	; 0x35e
        for (uint8_t j = 0; j < 4; j++) {
 800a616:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 800a61a:	3301      	adds	r3, #1
 800a61c:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
 800a620:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 800a624:	2b03      	cmp	r3, #3
 800a626:	d9dd      	bls.n	800a5e4 <ubx_cfg_valset+0x154>
        }
        for (uint8_t j = 0; j < value_lens[i]; j++) {
 800a628:	2300      	movs	r3, #0
 800a62a:	f887 3356 	strb.w	r3, [r7, #854]	; 0x356
 800a62e:	e02b      	b.n	800a688 <ubx_cfg_valset+0x1f8>
            tx_buf[tx_buf_idx] = (values[i] >> (j * 8)) & 0xFF;
 800a630:	f8b7 3358 	ldrh.w	r3, [r7, #856]	; 0x358
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800a63a:	f5a2 7256 	sub.w	r2, r2, #856	; 0x358
 800a63e:	6812      	ldr	r2, [r2, #0]
 800a640:	4413      	add	r3, r2
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f897 1356 	ldrb.w	r1, [r7, #854]	; 0x356
 800a64a:	00c9      	lsls	r1, r1, #3
 800a64c:	f1c1 0620 	rsb	r6, r1, #32
 800a650:	f1a1 0020 	sub.w	r0, r1, #32
 800a654:	fa22 f401 	lsr.w	r4, r2, r1
 800a658:	fa03 f606 	lsl.w	r6, r3, r6
 800a65c:	4334      	orrs	r4, r6
 800a65e:	fa23 f000 	lsr.w	r0, r3, r0
 800a662:	4304      	orrs	r4, r0
 800a664:	fa23 f501 	lsr.w	r5, r3, r1
 800a668:	f8b7 335e 	ldrh.w	r3, [r7, #862]	; 0x35e
 800a66c:	b2e1      	uxtb	r1, r4
 800a66e:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800a672:	54d1      	strb	r1, [r2, r3]
            tx_buf_idx += 1;
 800a674:	f8b7 335e 	ldrh.w	r3, [r7, #862]	; 0x35e
 800a678:	3301      	adds	r3, #1
 800a67a:	f8a7 335e 	strh.w	r3, [r7, #862]	; 0x35e
        for (uint8_t j = 0; j < value_lens[i]; j++) {
 800a67e:	f897 3356 	ldrb.w	r3, [r7, #854]	; 0x356
 800a682:	3301      	adds	r3, #1
 800a684:	f887 3356 	strb.w	r3, [r7, #854]	; 0x356
 800a688:	f8b7 3358 	ldrh.w	r3, [r7, #856]	; 0x358
 800a68c:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 800a690:	4413      	add	r3, r2
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	f897 2356 	ldrb.w	r2, [r7, #854]	; 0x356
 800a698:	429a      	cmp	r2, r3
 800a69a:	d3c9      	bcc.n	800a630 <ubx_cfg_valset+0x1a0>
    for (uint16_t i = 0; i < num_items; i++) {
 800a69c:	f8b7 3358 	ldrh.w	r3, [r7, #856]	; 0x358
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	f8a7 3358 	strh.w	r3, [r7, #856]	; 0x358
 800a6a6:	f8b7 3358 	ldrh.w	r3, [r7, #856]	; 0x358
 800a6aa:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d894      	bhi.n	800a5dc <ubx_cfg_valset+0x14c>
        }
    }
    uint8_t CK_A = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f887 3355 	strb.w	r3, [r7, #853]	; 0x355
    uint8_t CK_B = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f887 3354 	strb.w	r3, [r7, #852]	; 0x354
    for (uint16_t i = 2; i < tx_buf_len - 2; i++) {
 800a6be:	2302      	movs	r3, #2
 800a6c0:	f8a7 3352 	strh.w	r3, [r7, #850]	; 0x352
 800a6c4:	e015      	b.n	800a6f2 <ubx_cfg_valset+0x262>
        CK_A += tx_buf[i];
 800a6c6:	f8b7 3352 	ldrh.w	r3, [r7, #850]	; 0x352
 800a6ca:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800a6ce:	5cd2      	ldrb	r2, [r2, r3]
 800a6d0:	f897 3355 	ldrb.w	r3, [r7, #853]	; 0x355
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f887 3355 	strb.w	r3, [r7, #853]	; 0x355
        CK_B += CK_A;
 800a6da:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 800a6de:	f897 3355 	ldrb.w	r3, [r7, #853]	; 0x355
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f887 3354 	strb.w	r3, [r7, #852]	; 0x354
    for (uint16_t i = 2; i < tx_buf_len - 2; i++) {
 800a6e8:	f8b7 3352 	ldrh.w	r3, [r7, #850]	; 0x352
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	f8a7 3352 	strh.w	r3, [r7, #850]	; 0x352
 800a6f2:	f8b7 2352 	ldrh.w	r2, [r7, #850]	; 0x352
 800a6f6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800a6fa:	3b02      	subs	r3, #2
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d3e2      	bcc.n	800a6c6 <ubx_cfg_valset+0x236>
    }
    tx_buf[tx_buf_len - 2] = CK_A;
 800a700:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800a704:	3b02      	subs	r3, #2
 800a706:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800a70a:	f897 1355 	ldrb.w	r1, [r7, #853]	; 0x355
 800a70e:	54d1      	strb	r1, [r2, r3]
    tx_buf[tx_buf_len - 1] = CK_B;
 800a710:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800a714:	3b01      	subs	r3, #1
 800a716:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800a71a:	f897 1354 	ldrb.w	r1, [r7, #852]	; 0x354
 800a71e:	54d1      	strb	r1, [r2, r3]

    for (uint16_t i = 0; i < tx_buf_len; i++) {
 800a720:	2300      	movs	r3, #0
 800a722:	f8a7 3350 	strh.w	r3, [r7, #848]	; 0x350
 800a726:	e004      	b.n	800a732 <ubx_cfg_valset+0x2a2>
 800a728:	f8b7 3350 	ldrh.w	r3, [r7, #848]	; 0x350
 800a72c:	3301      	adds	r3, #1
 800a72e:	f8a7 3350 	strh.w	r3, [r7, #848]	; 0x350
 800a732:	f8b7 3350 	ldrh.w	r3, [r7, #848]	; 0x350
 800a736:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d8f4      	bhi.n	800a728 <ubx_cfg_valset+0x298>
    }
    if (i2c_write(device, tx_buf, tx_buf_len) != STATUS_OK) {
 800a73e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800a742:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800a746:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 800a74a:	f8d7 1344 	ldr.w	r1, [r7, #836]	; 0x344
 800a74e:	6818      	ldr	r0, [r3, #0]
 800a750:	f7f7 fd30 	bl	80021b4 <i2c_write>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <ubx_cfg_valset+0x2ce>
        return STATUS_ERROR;
 800a75a:	2302      	movs	r3, #2
 800a75c:	e02e      	b.n	800a7bc <ubx_cfg_valset+0x32c>
    }

    uint8_t message_header[] = {0xB5, 0x62, 0x05, 0x01};
 800a75e:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <ubx_cfg_valset+0x33c>)
 800a760:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
    uint8_t message_buf[800];
    uint16_t message_len = 0;
 800a764:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800a768:	f2a3 3342 	subw	r3, r3, #834	; 0x342
 800a76c:	2200      	movs	r2, #0
 800a76e:	801a      	strh	r2, [r3, #0]

    if (ubx_read_msg(device, message_header, message_buf, &message_len, 1000) !=
 800a770:	f107 031e 	add.w	r3, r7, #30
 800a774:	f107 0220 	add.w	r2, r7, #32
 800a778:	f507 7150 	add.w	r1, r7, #832	; 0x340
 800a77c:	f507 7058 	add.w	r0, r7, #864	; 0x360
 800a780:	f5a0 7053 	sub.w	r0, r0, #844	; 0x34c
 800a784:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a788:	9400      	str	r4, [sp, #0]
 800a78a:	6800      	ldr	r0, [r0, #0]
 800a78c:	f7ff fd44 	bl	800a218 <ubx_read_msg>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <ubx_cfg_valset+0x30a>
        STATUS_OK) {
        return STATUS_ERROR;
 800a796:	2302      	movs	r3, #2
 800a798:	e010      	b.n	800a7bc <ubx_cfg_valset+0x32c>
    }

    if (message_buf[0] == 0x06 && message_buf[1] == 0x8A) {
 800a79a:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800a79e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b06      	cmp	r3, #6
 800a7a6:	d108      	bne.n	800a7ba <ubx_cfg_valset+0x32a>
 800a7a8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800a7ac:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b8a      	cmp	r3, #138	; 0x8a
 800a7b4:	d101      	bne.n	800a7ba <ubx_cfg_valset+0x32a>
        return STATUS_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e000      	b.n	800a7bc <ubx_cfg_valset+0x32c>
    } else {
        return STATUS_ERROR;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	f8d7 d004 	ldr.w	sp, [r7, #4]
    }
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f507 7759 	add.w	r7, r7, #868	; 0x364
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	010562b5 	.word	0x010562b5

0800a7d0 <max_m10s_poll_fix>:

Status max_m10s_poll_fix(I2cDevice* device, GPS_Fix_TypeDef* fix) {
 800a7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a7de:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800a7e2:	6018      	str	r0, [r3, #0]
 800a7e4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a7e8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a7ec:	6019      	str	r1, [r3, #0]
 800a7ee:	466b      	mov	r3, sp
 800a7f0:	461e      	mov	r6, r3
    size_t tx_buf_len = 8;
 800a7f2:	2308      	movs	r3, #8
 800a7f4:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    uint8_t tx_buf[tx_buf_len];
 800a7f8:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	3b01      	subs	r3, #1
 800a800:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800a804:	2300      	movs	r3, #0
 800a806:	4688      	mov	r8, r1
 800a808:	4699      	mov	r9, r3
 800a80a:	f04f 0200 	mov.w	r2, #0
 800a80e:	f04f 0300 	mov.w	r3, #0
 800a812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a81a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a81e:	2300      	movs	r3, #0
 800a820:	460c      	mov	r4, r1
 800a822:	461d      	mov	r5, r3
 800a824:	f04f 0200 	mov.w	r2, #0
 800a828:	f04f 0300 	mov.w	r3, #0
 800a82c:	00eb      	lsls	r3, r5, #3
 800a82e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a832:	00e2      	lsls	r2, r4, #3
 800a834:	1dcb      	adds	r3, r1, #7
 800a836:	08db      	lsrs	r3, r3, #3
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	ebad 0d03 	sub.w	sp, sp, r3
 800a83e:	ab02      	add	r3, sp, #8
 800a840:	3300      	adds	r3, #0
 800a842:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    tx_buf[0] = 0xB5;
 800a846:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800a84a:	22b5      	movs	r2, #181	; 0xb5
 800a84c:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = 0x62;
 800a84e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800a852:	2262      	movs	r2, #98	; 0x62
 800a854:	705a      	strb	r2, [r3, #1]
    tx_buf[2] = 0x01;
 800a856:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800a85a:	2201      	movs	r2, #1
 800a85c:	709a      	strb	r2, [r3, #2]
    tx_buf[3] = 0x07;
 800a85e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800a862:	2207      	movs	r2, #7
 800a864:	70da      	strb	r2, [r3, #3]
    tx_buf[4] = 0;
 800a866:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800a86a:	2200      	movs	r2, #0
 800a86c:	711a      	strb	r2, [r3, #4]
    tx_buf[5] = 0;
 800a86e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800a872:	2200      	movs	r2, #0
 800a874:	715a      	strb	r2, [r3, #5]

    uint8_t CK_A = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	f887 333c 	strb.w	r3, [r7, #828]	; 0x33c
    uint8_t CK_B = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	f887 333d 	strb.w	r3, [r7, #829]	; 0x33d
    for (uint16_t i = 2; i < tx_buf_len - 2; i++) {
 800a882:	2302      	movs	r3, #2
 800a884:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
 800a888:	e015      	b.n	800a8b6 <max_m10s_poll_fix+0xe6>
        CK_A += tx_buf[i];
 800a88a:	f8b7 333e 	ldrh.w	r3, [r7, #830]	; 0x33e
 800a88e:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800a892:	5cd2      	ldrb	r2, [r2, r3]
 800a894:	f897 333c 	ldrb.w	r3, [r7, #828]	; 0x33c
 800a898:	4413      	add	r3, r2
 800a89a:	f887 333c 	strb.w	r3, [r7, #828]	; 0x33c
        CK_B += CK_A;
 800a89e:	f897 233d 	ldrb.w	r2, [r7, #829]	; 0x33d
 800a8a2:	f897 333c 	ldrb.w	r3, [r7, #828]	; 0x33c
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f887 333d 	strb.w	r3, [r7, #829]	; 0x33d
    for (uint16_t i = 2; i < tx_buf_len - 2; i++) {
 800a8ac:	f8b7 333e 	ldrh.w	r3, [r7, #830]	; 0x33e
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
 800a8b6:	f8b7 233e 	ldrh.w	r2, [r7, #830]	; 0x33e
 800a8ba:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800a8be:	3b02      	subs	r3, #2
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d3e2      	bcc.n	800a88a <max_m10s_poll_fix+0xba>
    }
    tx_buf[tx_buf_len - 2] = CK_A;
 800a8c4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800a8c8:	3b02      	subs	r3, #2
 800a8ca:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800a8ce:	f897 133c 	ldrb.w	r1, [r7, #828]	; 0x33c
 800a8d2:	54d1      	strb	r1, [r2, r3]
    tx_buf[tx_buf_len - 1] = CK_B;
 800a8d4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800a8de:	f897 133d 	ldrb.w	r1, [r7, #829]	; 0x33d
 800a8e2:	54d1      	strb	r1, [r2, r3]

    if (i2c_write(device, tx_buf, tx_buf_len) != STATUS_OK) {
 800a8e4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a8e8:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800a8ec:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 800a8f0:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	f7f7 fc5d 	bl	80021b4 <i2c_write>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <max_m10s_poll_fix+0x134>
        return STATUS_ERROR;
 800a900:	2302      	movs	r3, #2
 800a902:	e377      	b.n	800aff4 <max_m10s_poll_fix+0x824>
    }

    uint8_t message_header[] = {0xB5, 0x62, 0x01, 0x07};
 800a904:	4b13      	ldr	r3, [pc, #76]	; (800a954 <max_m10s_poll_fix+0x184>)
 800a906:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    uint8_t message_buf[800];
    uint16_t message_len = 0;
 800a90a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a90e:	f2a3 3336 	subw	r3, r3, #822	; 0x336
 800a912:	2200      	movs	r2, #0
 800a914:	801a      	strh	r2, [r3, #0]

    if (ubx_read_msg(device, message_header, message_buf, &message_len, 1000) !=
 800a916:	f107 030a 	add.w	r3, r7, #10
 800a91a:	f107 020c 	add.w	r2, r7, #12
 800a91e:	f507 714b 	add.w	r1, r7, #812	; 0x32c
 800a922:	f507 7050 	add.w	r0, r7, #832	; 0x340
 800a926:	f5a0 704f 	sub.w	r0, r0, #828	; 0x33c
 800a92a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a92e:	9400      	str	r4, [sp, #0]
 800a930:	6800      	ldr	r0, [r0, #0]
 800a932:	f7ff fc71 	bl	800a218 <ubx_read_msg>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <max_m10s_poll_fix+0x170>
        STATUS_OK) {
        return STATUS_ERROR;
 800a93c:	2302      	movs	r3, #2
 800a93e:	e359      	b.n	800aff4 <max_m10s_poll_fix+0x824>
    }

    if (message_len != 92) {
 800a940:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a944:	f2a3 3336 	subw	r3, r3, #822	; 0x336
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	2b5c      	cmp	r3, #92	; 0x5c
 800a94c:	d004      	beq.n	800a958 <max_m10s_poll_fix+0x188>
        return STATUS_ERROR;
 800a94e:	2302      	movs	r3, #2
 800a950:	e350      	b.n	800aff4 <max_m10s_poll_fix+0x824>
 800a952:	bf00      	nop
 800a954:	070162b5 	.word	0x070162b5
    }

    fix->year = message_buf[4] + (message_buf[5] << 8);
 800a958:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a95c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a960:	791b      	ldrb	r3, [r3, #4]
 800a962:	b29a      	uxth	r2, r3
 800a964:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a968:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a96c:	795b      	ldrb	r3, [r3, #5]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	b29b      	uxth	r3, r3
 800a974:	4413      	add	r3, r2
 800a976:	b29a      	uxth	r2, r3
 800a978:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a97c:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	801a      	strh	r2, [r3, #0]
    fix->month = message_buf[6];
 800a984:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a988:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a98c:	799a      	ldrb	r2, [r3, #6]
 800a98e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a992:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	709a      	strb	r2, [r3, #2]
    fix->day = message_buf[7];
 800a99a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a99e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a9a2:	79da      	ldrb	r2, [r3, #7]
 800a9a4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9a8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	70da      	strb	r2, [r3, #3]
    fix->hour = message_buf[8];
 800a9b0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9b4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a9b8:	7a1a      	ldrb	r2, [r3, #8]
 800a9ba:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9be:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	711a      	strb	r2, [r3, #4]
    fix->min = message_buf[9];
 800a9c6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9ca:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a9ce:	7a5a      	ldrb	r2, [r3, #9]
 800a9d0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9d4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	715a      	strb	r2, [r3, #5]
    fix->sec = message_buf[10];
 800a9dc:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9e0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a9e4:	7a9a      	ldrb	r2, [r3, #10]
 800a9e6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9ea:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	719a      	strb	r2, [r3, #6]
    fix->date_valid = message_buf[11] & 0x1;
 800a9f2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9f6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a9fa:	7adb      	ldrb	r3, [r3, #11]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa06:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	71da      	strb	r2, [r3, #7]
    fix->time_valid = (message_buf[11] & 0x2) >> 1;
 800aa0e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa12:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aa16:	7adb      	ldrb	r3, [r3, #11]
 800aa18:	105b      	asrs	r3, r3, #1
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa26:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	721a      	strb	r2, [r3, #8]
    fix->time_resolved = (message_buf[11] & 0x4) >> 2;
 800aa2e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa32:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aa36:	7adb      	ldrb	r3, [r3, #11]
 800aa38:	109b      	asrs	r3, r3, #2
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa46:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	725a      	strb	r2, [r3, #9]
    fix->fix_type = message_buf[20];
 800aa4e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa52:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aa56:	7d1a      	ldrb	r2, [r3, #20]
 800aa58:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa5c:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	729a      	strb	r2, [r3, #10]
    fix->fix_valid = message_buf[21] & 0x1;
 800aa64:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa68:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aa6c:	7d5b      	ldrb	r3, [r3, #21]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa78:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	72da      	strb	r2, [r3, #11]
    fix->diff_used = (message_buf[21] & 0x2) >> 1;
 800aa80:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa84:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aa88:	7d5b      	ldrb	r3, [r3, #21]
 800aa8a:	105b      	asrs	r3, r3, #1
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aa98:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	731a      	strb	r2, [r3, #12]
    fix->psm_state = (message_buf[21] & 0x1C) >> 2;
 800aaa0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aaa4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aaa8:	7d5b      	ldrb	r3, [r3, #21]
 800aaaa:	109b      	asrs	r3, r3, #2
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 0307 	and.w	r3, r3, #7
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aab8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	735a      	strb	r2, [r3, #13]
    fix->hdg_veh_valid = (message_buf[21] & 0x20) >> 5;
 800aac0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aac4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aac8:	7d5b      	ldrb	r3, [r3, #21]
 800aaca:	115b      	asrs	r3, r3, #5
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aad8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	739a      	strb	r2, [r3, #14]
    fix->carrier_phase = (message_buf[21] & 0xC0) >> 6;
 800aae0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aae4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aae8:	7d5b      	ldrb	r3, [r3, #21]
 800aaea:	099b      	lsrs	r3, r3, #6
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aaf2:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	73da      	strb	r2, [r3, #15]
    fix->num_sats = message_buf[23];
 800aafa:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aafe:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab02:	7dda      	ldrb	r2, [r3, #23]
 800ab04:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab08:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	741a      	strb	r2, [r3, #16]
    fix->lon =
        (float)((int32_t)(message_buf[24] + (message_buf[25] << 8) +
 800ab10:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab14:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab18:	7e1b      	ldrb	r3, [r3, #24]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab20:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab24:	7e5b      	ldrb	r3, [r3, #25]
 800ab26:	021b      	lsls	r3, r3, #8
 800ab28:	441a      	add	r2, r3
                          (message_buf[26] << 16) + (message_buf[27] << 24))) /
 800ab2a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab2e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab32:	7e9b      	ldrb	r3, [r3, #26]
 800ab34:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[24] + (message_buf[25] << 8) +
 800ab36:	441a      	add	r2, r3
                          (message_buf[26] << 16) + (message_buf[27] << 24))) /
 800ab38:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab3c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab40:	7edb      	ldrb	r3, [r3, #27]
 800ab42:	061b      	lsls	r3, r3, #24
 800ab44:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[24] + (message_buf[25] << 8) +
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f6 f910 	bl	8000d6c <__aeabi_i2f>
 800ab4c:	4603      	mov	r3, r0
                          (message_buf[26] << 16) + (message_buf[27] << 24))) /
 800ab4e:	49da      	ldr	r1, [pc, #872]	; (800aeb8 <max_m10s_poll_fix+0x6e8>)
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7f6 fa13 	bl	8000f7c <__aeabi_fdiv>
 800ab56:	4603      	mov	r3, r0
 800ab58:	461a      	mov	r2, r3
    fix->lon =
 800ab5a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab5e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	615a      	str	r2, [r3, #20]
        10000000.0;
    fix->lat =
        (float)((int32_t)(message_buf[28] + (message_buf[29] << 8) +
 800ab66:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab6a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab6e:	7f1b      	ldrb	r3, [r3, #28]
 800ab70:	461a      	mov	r2, r3
 800ab72:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab76:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab7a:	7f5b      	ldrb	r3, [r3, #29]
 800ab7c:	021b      	lsls	r3, r3, #8
 800ab7e:	441a      	add	r2, r3
                          (message_buf[30] << 16) + (message_buf[31] << 24))) /
 800ab80:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab84:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab88:	7f9b      	ldrb	r3, [r3, #30]
 800ab8a:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[28] + (message_buf[29] << 8) +
 800ab8c:	441a      	add	r2, r3
                          (message_buf[30] << 16) + (message_buf[31] << 24))) /
 800ab8e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ab92:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ab96:	7fdb      	ldrb	r3, [r3, #31]
 800ab98:	061b      	lsls	r3, r3, #24
 800ab9a:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[28] + (message_buf[29] << 8) +
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7f6 f8e5 	bl	8000d6c <__aeabi_i2f>
 800aba2:	4603      	mov	r3, r0
                          (message_buf[30] << 16) + (message_buf[31] << 24))) /
 800aba4:	49c4      	ldr	r1, [pc, #784]	; (800aeb8 <max_m10s_poll_fix+0x6e8>)
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f6 f9e8 	bl	8000f7c <__aeabi_fdiv>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
    fix->lat =
 800abb0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800abb4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	619a      	str	r2, [r3, #24]
        10000000.0;
    fix->height =
        (float)((int32_t)(message_buf[32] + (message_buf[33] << 8) +
 800abbc:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800abc0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800abc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abc8:	461a      	mov	r2, r3
 800abca:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800abce:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800abd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800abd6:	021b      	lsls	r3, r3, #8
 800abd8:	441a      	add	r2, r3
                          (message_buf[34] << 16) + (message_buf[35] << 24))) /
 800abda:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800abde:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800abe2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800abe6:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[32] + (message_buf[33] << 8) +
 800abe8:	441a      	add	r2, r3
                          (message_buf[34] << 16) + (message_buf[35] << 24))) /
 800abea:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800abee:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800abf2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800abf6:	061b      	lsls	r3, r3, #24
 800abf8:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[32] + (message_buf[33] << 8) +
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7f6 f8b6 	bl	8000d6c <__aeabi_i2f>
 800ac00:	4603      	mov	r3, r0
                          (message_buf[34] << 16) + (message_buf[35] << 24))) /
 800ac02:	49ae      	ldr	r1, [pc, #696]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7f6 f9b9 	bl	8000f7c <__aeabi_fdiv>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	461a      	mov	r2, r3
    fix->height =
 800ac0e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac12:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	61da      	str	r2, [r3, #28]
        1000.0;
    fix->height_msl =
        (float)((int32_t)(message_buf[36] + (message_buf[37] << 8) +
 800ac1a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac1e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ac22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac26:	461a      	mov	r2, r3
 800ac28:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac2c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ac30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ac34:	021b      	lsls	r3, r3, #8
 800ac36:	441a      	add	r2, r3
                          (message_buf[38] << 16) + (message_buf[39] << 24))) /
 800ac38:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac3c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ac40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ac44:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[36] + (message_buf[37] << 8) +
 800ac46:	441a      	add	r2, r3
                          (message_buf[38] << 16) + (message_buf[39] << 24))) /
 800ac48:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac4c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ac50:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ac54:	061b      	lsls	r3, r3, #24
 800ac56:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[36] + (message_buf[37] << 8) +
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f6 f887 	bl	8000d6c <__aeabi_i2f>
 800ac5e:	4603      	mov	r3, r0
                          (message_buf[38] << 16) + (message_buf[39] << 24))) /
 800ac60:	4996      	ldr	r1, [pc, #600]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7f6 f98a 	bl	8000f7c <__aeabi_fdiv>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	461a      	mov	r2, r3
    fix->height_msl =
 800ac6c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac70:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	621a      	str	r2, [r3, #32]
        1000.0;
    fix->accuracy_horiz =
        (float)((uint32_t)(message_buf[40] + (message_buf[41] << 8) +
 800ac78:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac7c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ac80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac84:	461a      	mov	r2, r3
 800ac86:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac8a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ac8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ac92:	021b      	lsls	r3, r3, #8
 800ac94:	441a      	add	r2, r3
                           (message_buf[42] << 16) + (message_buf[43] << 24))) /
 800ac96:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ac9a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ac9e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800aca2:	041b      	lsls	r3, r3, #16
        (float)((uint32_t)(message_buf[40] + (message_buf[41] << 8) +
 800aca4:	441a      	add	r2, r3
                           (message_buf[42] << 16) + (message_buf[43] << 24))) /
 800aca6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800acaa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800acae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800acb2:	061b      	lsls	r3, r3, #24
 800acb4:	4413      	add	r3, r2
        (float)((uint32_t)(message_buf[40] + (message_buf[41] << 8) +
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7f6 f854 	bl	8000d64 <__aeabi_ui2f>
 800acbc:	4603      	mov	r3, r0
                           (message_buf[42] << 16) + (message_buf[43] << 24))) /
 800acbe:	497f      	ldr	r1, [pc, #508]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7f6 f95b 	bl	8000f7c <__aeabi_fdiv>
 800acc6:	4603      	mov	r3, r0
 800acc8:	461a      	mov	r2, r3
    fix->accuracy_horiz =
 800acca:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800acce:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	625a      	str	r2, [r3, #36]	; 0x24
        1000.0;
    fix->accuracy_vertical =
        (float)((uint32_t)(message_buf[44] + (message_buf[45] << 8) +
 800acd6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800acda:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800acde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ace2:	461a      	mov	r2, r3
 800ace4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ace8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800acec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	441a      	add	r2, r3
                           (message_buf[46] << 16) + (message_buf[47] << 24))) /
 800acf4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800acf8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800acfc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ad00:	041b      	lsls	r3, r3, #16
        (float)((uint32_t)(message_buf[44] + (message_buf[45] << 8) +
 800ad02:	441a      	add	r2, r3
                           (message_buf[46] << 16) + (message_buf[47] << 24))) /
 800ad04:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad08:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ad0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad10:	061b      	lsls	r3, r3, #24
 800ad12:	4413      	add	r3, r2
        (float)((uint32_t)(message_buf[44] + (message_buf[45] << 8) +
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7f6 f825 	bl	8000d64 <__aeabi_ui2f>
 800ad1a:	4603      	mov	r3, r0
                           (message_buf[46] << 16) + (message_buf[47] << 24))) /
 800ad1c:	4967      	ldr	r1, [pc, #412]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7f6 f92c 	bl	8000f7c <__aeabi_fdiv>
 800ad24:	4603      	mov	r3, r0
 800ad26:	461a      	mov	r2, r3
    fix->accuracy_vertical =
 800ad28:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad2c:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	629a      	str	r2, [r3, #40]	; 0x28
        1000.0;
    fix->vel_north =
        (float)((int32_t)(message_buf[48] + (message_buf[49] << 8) +
 800ad34:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad38:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ad3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad40:	461a      	mov	r2, r3
 800ad42:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad46:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ad4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad4e:	021b      	lsls	r3, r3, #8
 800ad50:	441a      	add	r2, r3
                          (message_buf[50] << 16) + (message_buf[51] << 24))) /
 800ad52:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad56:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ad5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ad5e:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[48] + (message_buf[49] << 8) +
 800ad60:	441a      	add	r2, r3
                          (message_buf[50] << 16) + (message_buf[51] << 24))) /
 800ad62:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad66:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ad6a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ad6e:	061b      	lsls	r3, r3, #24
 800ad70:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[48] + (message_buf[49] << 8) +
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f5 fffa 	bl	8000d6c <__aeabi_i2f>
 800ad78:	4603      	mov	r3, r0
                          (message_buf[50] << 16) + (message_buf[51] << 24))) /
 800ad7a:	4950      	ldr	r1, [pc, #320]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7f6 f8fd 	bl	8000f7c <__aeabi_fdiv>
 800ad82:	4603      	mov	r3, r0
 800ad84:	461a      	mov	r2, r3
    fix->vel_north =
 800ad86:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad8a:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	62da      	str	r2, [r3, #44]	; 0x2c
        1000.0;
    fix->vel_east =
        (float)((int32_t)(message_buf[52] + (message_buf[53] << 8) +
 800ad92:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ad96:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ad9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ada4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ada8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	441a      	add	r2, r3
                          (message_buf[54] << 16) + (message_buf[55] << 24))) /
 800adb0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800adb4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800adb8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800adbc:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[52] + (message_buf[53] << 8) +
 800adbe:	441a      	add	r2, r3
                          (message_buf[54] << 16) + (message_buf[55] << 24))) /
 800adc0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800adc4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800adc8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800adcc:	061b      	lsls	r3, r3, #24
 800adce:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[52] + (message_buf[53] << 8) +
 800add0:	4618      	mov	r0, r3
 800add2:	f7f5 ffcb 	bl	8000d6c <__aeabi_i2f>
 800add6:	4603      	mov	r3, r0
                          (message_buf[54] << 16) + (message_buf[55] << 24))) /
 800add8:	4938      	ldr	r1, [pc, #224]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800adda:	4618      	mov	r0, r3
 800addc:	f7f6 f8ce 	bl	8000f7c <__aeabi_fdiv>
 800ade0:	4603      	mov	r3, r0
 800ade2:	461a      	mov	r2, r3
    fix->vel_east =
 800ade4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ade8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	631a      	str	r2, [r3, #48]	; 0x30
        1000.0;
    fix->vel_down =
        (float)((int32_t)(message_buf[56] + (message_buf[57] << 8) +
 800adf0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800adf4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800adf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800adfc:	461a      	mov	r2, r3
 800adfe:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae02:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ae06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae0a:	021b      	lsls	r3, r3, #8
 800ae0c:	441a      	add	r2, r3
                          (message_buf[58] << 16) + (message_buf[59] << 24))) /
 800ae0e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae12:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ae16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae1a:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[56] + (message_buf[57] << 8) +
 800ae1c:	441a      	add	r2, r3
                          (message_buf[58] << 16) + (message_buf[59] << 24))) /
 800ae1e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae22:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ae26:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ae2a:	061b      	lsls	r3, r3, #24
 800ae2c:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[56] + (message_buf[57] << 8) +
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7f5 ff9c 	bl	8000d6c <__aeabi_i2f>
 800ae34:	4603      	mov	r3, r0
                          (message_buf[58] << 16) + (message_buf[59] << 24))) /
 800ae36:	4921      	ldr	r1, [pc, #132]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7f6 f89f 	bl	8000f7c <__aeabi_fdiv>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461a      	mov	r2, r3
    fix->vel_down =
 800ae42:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae46:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	635a      	str	r2, [r3, #52]	; 0x34
        1000.0;
    fix->ground_speed =
        (float)((int32_t)(message_buf[60] + (message_buf[61] << 8) +
 800ae4e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae52:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ae56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae60:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ae64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae68:	021b      	lsls	r3, r3, #8
 800ae6a:	441a      	add	r2, r3
                          (message_buf[62] << 16) + (message_buf[63] << 24))) /
 800ae6c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae70:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ae74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae78:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[60] + (message_buf[61] << 8) +
 800ae7a:	441a      	add	r2, r3
                          (message_buf[62] << 16) + (message_buf[63] << 24))) /
 800ae7c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800ae80:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800ae84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae88:	061b      	lsls	r3, r3, #24
 800ae8a:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[60] + (message_buf[61] << 8) +
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f5 ff6d 	bl	8000d6c <__aeabi_i2f>
 800ae92:	4603      	mov	r3, r0
                          (message_buf[62] << 16) + (message_buf[63] << 24))) /
 800ae94:	4909      	ldr	r1, [pc, #36]	; (800aebc <max_m10s_poll_fix+0x6ec>)
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7f6 f870 	bl	8000f7c <__aeabi_fdiv>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	461a      	mov	r2, r3
    fix->ground_speed =
 800aea0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aea4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	639a      	str	r2, [r3, #56]	; 0x38
        1000.0;
    fix->hdg =
        (float)((int32_t)(message_buf[64] + (message_buf[65] << 8) +
 800aeac:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aeb0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aeb4:	e004      	b.n	800aec0 <max_m10s_poll_fix+0x6f0>
 800aeb6:	bf00      	nop
 800aeb8:	4b189680 	.word	0x4b189680
 800aebc:	447a0000 	.word	0x447a0000
 800aec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aec4:	461a      	mov	r2, r3
 800aec6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aeca:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	441a      	add	r2, r3
                          (message_buf[66] << 16) + (message_buf[67] << 24))) /
 800aed6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aeda:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aee2:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[64] + (message_buf[65] << 8) +
 800aee4:	441a      	add	r2, r3
                          (message_buf[66] << 16) + (message_buf[67] << 24))) /
 800aee6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800aeea:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800aeee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aef2:	061b      	lsls	r3, r3, #24
 800aef4:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[64] + (message_buf[65] << 8) +
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f5 ff38 	bl	8000d6c <__aeabi_i2f>
 800aefc:	4603      	mov	r3, r0
                          (message_buf[66] << 16) + (message_buf[67] << 24))) /
 800aefe:	4941      	ldr	r1, [pc, #260]	; (800b004 <max_m10s_poll_fix+0x834>)
 800af00:	4618      	mov	r0, r3
 800af02:	f7f6 f83b 	bl	8000f7c <__aeabi_fdiv>
 800af06:	4603      	mov	r3, r0
 800af08:	461a      	mov	r2, r3
    fix->hdg =
 800af0a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af0e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	63da      	str	r2, [r3, #60]	; 0x3c
        100000.0;
    fix->accuracy_speed =
        (float)((int32_t)(message_buf[68] + (message_buf[69] << 8) +
 800af16:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af1a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800af1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af22:	461a      	mov	r2, r3
 800af24:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af28:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800af2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af30:	021b      	lsls	r3, r3, #8
 800af32:	441a      	add	r2, r3
                          (message_buf[70] << 16) + (message_buf[71] << 24))) /
 800af34:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af38:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800af3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af40:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[68] + (message_buf[69] << 8) +
 800af42:	441a      	add	r2, r3
                          (message_buf[70] << 16) + (message_buf[71] << 24))) /
 800af44:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af48:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800af4c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800af50:	061b      	lsls	r3, r3, #24
 800af52:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[68] + (message_buf[69] << 8) +
 800af54:	4618      	mov	r0, r3
 800af56:	f7f5 ff09 	bl	8000d6c <__aeabi_i2f>
 800af5a:	4603      	mov	r3, r0
                          (message_buf[70] << 16) + (message_buf[71] << 24))) /
 800af5c:	492a      	ldr	r1, [pc, #168]	; (800b008 <max_m10s_poll_fix+0x838>)
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f6 f80c 	bl	8000f7c <__aeabi_fdiv>
 800af64:	4603      	mov	r3, r0
 800af66:	461a      	mov	r2, r3
    fix->accuracy_speed =
 800af68:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af6c:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	641a      	str	r2, [r3, #64]	; 0x40
        1000.0;
    fix->accuracy_hdg =
        (float)((int32_t)(message_buf[72] + (message_buf[73] << 8) +
 800af74:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af78:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800af7c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800af80:	461a      	mov	r2, r3
 800af82:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af86:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800af8a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800af8e:	021b      	lsls	r3, r3, #8
 800af90:	441a      	add	r2, r3
                          (message_buf[74] << 16) + (message_buf[75] << 24))) /
 800af92:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800af96:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800af9a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800af9e:	041b      	lsls	r3, r3, #16
        (float)((int32_t)(message_buf[72] + (message_buf[73] << 8) +
 800afa0:	441a      	add	r2, r3
                          (message_buf[74] << 16) + (message_buf[75] << 24))) /
 800afa2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800afa6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800afaa:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800afae:	061b      	lsls	r3, r3, #24
 800afb0:	4413      	add	r3, r2
        (float)((int32_t)(message_buf[72] + (message_buf[73] << 8) +
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7f5 feda 	bl	8000d6c <__aeabi_i2f>
 800afb8:	4603      	mov	r3, r0
                          (message_buf[74] << 16) + (message_buf[75] << 24))) /
 800afba:	4913      	ldr	r1, [pc, #76]	; (800b008 <max_m10s_poll_fix+0x838>)
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f5 ffdd 	bl	8000f7c <__aeabi_fdiv>
 800afc2:	4603      	mov	r3, r0
 800afc4:	461a      	mov	r2, r3
    fix->accuracy_hdg =
 800afc6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800afca:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	645a      	str	r2, [r3, #68]	; 0x44
        1000.0;
    fix->invalid_llh = message_buf[78] & 0x1;
 800afd2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800afd6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800afda:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800afe8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return STATUS_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	46b5      	mov	sp, r6
 800aff6:	4618      	mov	r0, r3
 800aff8:	f507 7751 	add.w	r7, r7, #836	; 0x344
 800affc:	46bd      	mov	sp, r7
 800affe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b002:	bf00      	nop
 800b004:	47c35000 	.word	0x47c35000
 800b008:	447a0000 	.word	0x447a0000

0800b00c <ds18b20_init>:
#include "stdio.h"
#include "math.h"
#include "hab_timer.h"

Status ds18b20_init(OneWireDevice* device)
{
 800b00c:	b5b0      	push	{r4, r5, r7, lr}
 800b00e:	b0a8      	sub	sp, #160	; 0xa0
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
	uint8_t buf[ONEWIRE_MAX_LEN];
	uint8_t len = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c

	// Reset Sequence
	if(onewire_reset(device) != STATUS_OK)
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7f7 fd92 	bl	8002b44 <onewire_reset>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <ds18b20_init+0x1e>
	{
		return STATUS_ERROR;
 800b026:	2302      	movs	r3, #2
 800b028:	e156      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Write skip ROM 0xCC
	buf[0] = 0xCC;
 800b02a:	23cc      	movs	r3, #204	; 0xcc
 800b02c:	733b      	strb	r3, [r7, #12]
	len = 1;
 800b02e:	2301      	movs	r3, #1
 800b030:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b034:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b038:	f107 030c 	add.w	r3, r7, #12
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7f7 fde4 	bl	8002c0c <onewire_readwrite>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <ds18b20_init+0x42>
	{
		return STATUS_ERROR;
 800b04a:	2302      	movs	r3, #2
 800b04c:	e144      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Write write scratchpad 0x4E
	buf[0] = 0x4E;
 800b04e:	234e      	movs	r3, #78	; 0x4e
 800b050:	733b      	strb	r3, [r7, #12]
	len = 1;
 800b052:	2301      	movs	r3, #1
 800b054:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b058:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b05c:	f107 030c 	add.w	r3, r7, #12
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7f7 fdd2 	bl	8002c0c <onewire_readwrite>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <ds18b20_init+0x66>
	{
		return STATUS_ERROR;
 800b06e:	2302      	movs	r3, #2
 800b070:	e132      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Write scratchpad data
	buf[0] = 0; buf[1] = 0; buf[2] = 0x1F;
 800b072:	2300      	movs	r3, #0
 800b074:	733b      	strb	r3, [r7, #12]
 800b076:	2300      	movs	r3, #0
 800b078:	737b      	strb	r3, [r7, #13]
 800b07a:	231f      	movs	r3, #31
 800b07c:	73bb      	strb	r3, [r7, #14]
	len = 3;
 800b07e:	2303      	movs	r3, #3
 800b080:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b084:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b088:	f107 030c 	add.w	r3, r7, #12
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7f7 fdbc 	bl	8002c0c <onewire_readwrite>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <ds18b20_init+0x92>
	{
		return STATUS_ERROR;
 800b09a:	2302      	movs	r3, #2
 800b09c:	e11c      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Reset Sequence
	if(onewire_reset(device) != STATUS_OK)
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7f7 fd50 	bl	8002b44 <onewire_reset>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <ds18b20_init+0xa2>
	{
		return STATUS_ERROR;
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	e114      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Write skip ROM 0xCC
	buf[0] = 0xCC;
 800b0ae:	23cc      	movs	r3, #204	; 0xcc
 800b0b0:	733b      	strb	r3, [r7, #12]
	len = 1;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b0b8:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b0bc:	f107 030c 	add.w	r3, r7, #12
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7f7 fda2 	bl	8002c0c <onewire_readwrite>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <ds18b20_init+0xc6>
	{
		return STATUS_ERROR;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e102      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Write read scratchpad 0xBE
	buf[0] = 0xBE;
 800b0d2:	23be      	movs	r3, #190	; 0xbe
 800b0d4:	733b      	strb	r3, [r7, #12]
	len = 1;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b0dc:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b0e0:	f107 030c 	add.w	r3, r7, #12
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7f7 fd90 	bl	8002c0c <onewire_readwrite>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <ds18b20_init+0xea>
	{
		return STATUS_ERROR;
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	e0f0      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Read scratchpad
	uint8_t crc_reg = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	buf[0] = 0xFF;
 800b0fc:	23ff      	movs	r3, #255	; 0xff
 800b0fe:	733b      	strb	r3, [r7, #12]
	buf[1] = 0xFF;
 800b100:	23ff      	movs	r3, #255	; 0xff
 800b102:	737b      	strb	r3, [r7, #13]
	buf[2] = 0xFF;
 800b104:	23ff      	movs	r3, #255	; 0xff
 800b106:	73bb      	strb	r3, [r7, #14]
	buf[3] = 0xFF;
 800b108:	23ff      	movs	r3, #255	; 0xff
 800b10a:	73fb      	strb	r3, [r7, #15]
	buf[4] = 0xFF;
 800b10c:	23ff      	movs	r3, #255	; 0xff
 800b10e:	743b      	strb	r3, [r7, #16]
	buf[5] = 0xFF;
 800b110:	23ff      	movs	r3, #255	; 0xff
 800b112:	747b      	strb	r3, [r7, #17]
	buf[6] = 0xFF;
 800b114:	23ff      	movs	r3, #255	; 0xff
 800b116:	74bb      	strb	r3, [r7, #18]
	buf[7] = 0xFF;
 800b118:	23ff      	movs	r3, #255	; 0xff
 800b11a:	74fb      	strb	r3, [r7, #19]
	buf[8] = 0xFF;
 800b11c:	23ff      	movs	r3, #255	; 0xff
 800b11e:	753b      	strb	r3, [r7, #20]
	len = 9;
 800b120:	2309      	movs	r3, #9
 800b122:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b126:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b12a:	f107 030c 	add.w	r3, r7, #12
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7f7 fd6b 	bl	8002c0c <onewire_readwrite>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <ds18b20_init+0x134>
	{
		return STATUS_ERROR;
 800b13c:	2302      	movs	r3, #2
 800b13e:	e0cb      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}
	for (uint8_t i = 0; i < 8; i++) {
 800b140:	2300      	movs	r3, #0
 800b142:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800b146:	e069      	b.n	800b21c <ds18b20_init+0x210>
		for (uint8_t j = 0; j < 8; j++) {
 800b148:	2300      	movs	r3, #0
 800b14a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 800b14e:	e05c      	b.n	800b20a <ds18b20_init+0x1fe>
			uint8_t lsb = crc_reg & 0x01;
 800b150:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			crc_reg >>= 1;
 800b15c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b160:	085b      	lsrs	r3, r3, #1
 800b162:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			uint8_t input = lsb ^ ((buf[i] >> j) & 0x01);
 800b166:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800b16a:	33a0      	adds	r3, #160	; 0xa0
 800b16c:	443b      	add	r3, r7
 800b16e:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800b172:	461a      	mov	r2, r3
 800b174:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800b178:	fa42 f303 	asr.w	r3, r2, r3
 800b17c:	b25b      	sxtb	r3, r3
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	b25a      	sxtb	r2, r3
 800b184:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800b188:	4053      	eors	r3, r2
 800b18a:	b25b      	sxtb	r3, r3
 800b18c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			crc_reg |= input << 7;
 800b190:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800b194:	01db      	lsls	r3, r3, #7
 800b196:	b25a      	sxtb	r2, r3
 800b198:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b19c:	4313      	orrs	r3, r2
 800b19e:	b25b      	sxtb	r3, r3
 800b1a0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if (((crc_reg >> 3) & 0x01) ^ input)
 800b1a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b1a8:	08db      	lsrs	r3, r3, #3
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	f003 0201 	and.w	r2, r3, #1
 800b1b0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d006      	beq.n	800b1c6 <ds18b20_init+0x1ba>
			{
				crc_reg |= (1 << 3);
 800b1b8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b1bc:	f043 0308 	orr.w	r3, r3, #8
 800b1c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800b1c4:	e005      	b.n	800b1d2 <ds18b20_init+0x1c6>
			}
			else
			{
				crc_reg &= ~(1 << 3);
 800b1c6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b1ca:	f023 0308 	bic.w	r3, r3, #8
 800b1ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
			if (((crc_reg >> 2) & 0x01) ^ input)
 800b1d2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b1d6:	089b      	lsrs	r3, r3, #2
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	f003 0201 	and.w	r2, r3, #1
 800b1de:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d006      	beq.n	800b1f4 <ds18b20_init+0x1e8>
			{
				crc_reg |= (1 << 2);
 800b1e6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b1ea:	f043 0304 	orr.w	r3, r3, #4
 800b1ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800b1f2:	e005      	b.n	800b200 <ds18b20_init+0x1f4>
			}
			else
			{
				crc_reg &= ~(1 << 2);
 800b1f4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b1f8:	f023 0304 	bic.w	r3, r3, #4
 800b1fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		for (uint8_t j = 0; j < 8; j++) {
 800b200:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800b204:	3301      	adds	r3, #1
 800b206:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 800b20a:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800b20e:	2b07      	cmp	r3, #7
 800b210:	d99e      	bls.n	800b150 <ds18b20_init+0x144>
	for (uint8_t i = 0; i < 8; i++) {
 800b212:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800b216:	3301      	adds	r3, #1
 800b218:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800b21c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800b220:	2b07      	cmp	r3, #7
 800b222:	d991      	bls.n	800b148 <ds18b20_init+0x13c>
			}
		}
	}
	if(crc_reg != buf[8])
 800b224:	7d3b      	ldrb	r3, [r7, #20]
 800b226:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d001      	beq.n	800b232 <ds18b20_init+0x226>
	{
		return STATUS_ERROR;
 800b22e:	2302      	movs	r3, #2
 800b230:	e052      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Reset Sequence
	if(onewire_reset(device) != STATUS_OK)
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f7 fc86 	bl	8002b44 <onewire_reset>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <ds18b20_init+0x236>
	{
		return STATUS_ERROR;
 800b23e:	2302      	movs	r3, #2
 800b240:	e04a      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Write skip ROM 0xCC
	buf[0] = 0xCC;
 800b242:	23cc      	movs	r3, #204	; 0xcc
 800b244:	733b      	strb	r3, [r7, #12]
	len = 1;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b24c:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7f7 fcd8 	bl	8002c0c <onewire_readwrite>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <ds18b20_init+0x25a>
	{
		return STATUS_ERROR;
 800b262:	2302      	movs	r3, #2
 800b264:	e038      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Write copy scratchpad 0x48
	buf[0] = 0x48;
 800b266:	2348      	movs	r3, #72	; 0x48
 800b268:	733b      	strb	r3, [r7, #12]
	len = 1;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b270:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b274:	f107 030c 	add.w	r3, r7, #12
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7f7 fcc6 	bl	8002c0c <onewire_readwrite>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <ds18b20_init+0x27e>
	{
		return STATUS_ERROR;
 800b286:	2302      	movs	r3, #2
 800b288:	e026      	b.n	800b2d8 <ds18b20_init+0x2cc>
	}

	// Read wait for copy to finish
	uint64_t timeout = MILLIS();
 800b28a:	f7f6 fe59 	bl	8001f40 <MILLIS>
 800b28e:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
	len = 1;
 800b292:	2301      	movs	r3, #1
 800b294:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	do {
		if(MILLIS() - timeout > 100)
 800b298:	f7f6 fe52 	bl	8001f40 <MILLIS>
 800b29c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800b2a0:	1a84      	subs	r4, r0, r2
 800b2a2:	eb61 0503 	sbc.w	r5, r1, r3
 800b2a6:	2c65      	cmp	r4, #101	; 0x65
 800b2a8:	f175 0300 	sbcs.w	r3, r5, #0
 800b2ac:	d301      	bcc.n	800b2b2 <ds18b20_init+0x2a6>
		{
			return STATUS_TIMEOUT;
 800b2ae:	2307      	movs	r3, #7
 800b2b0:	e012      	b.n	800b2d8 <ds18b20_init+0x2cc>
		}
		buf[0] = 0xFF;
 800b2b2:	23ff      	movs	r3, #255	; 0xff
 800b2b4:	733b      	strb	r3, [r7, #12]
		if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b2b6:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b2ba:	f107 030c 	add.w	r3, r7, #12
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7f7 fca3 	bl	8002c0c <onewire_readwrite>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <ds18b20_init+0x2c4>
		{
			return STATUS_ERROR;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	e003      	b.n	800b2d8 <ds18b20_init+0x2cc>
		}
	} while(buf[0] != 0xFF );
 800b2d0:	7b3b      	ldrb	r3, [r7, #12]
 800b2d2:	2bff      	cmp	r3, #255	; 0xff
 800b2d4:	d1e0      	bne.n	800b298 <ds18b20_init+0x28c>

	return STATUS_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	37a0      	adds	r7, #160	; 0xa0
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bdb0      	pop	{r4, r5, r7, pc}

0800b2e0 <ds18b20_read>:

TempProbe ds18b20_read(OneWireDevice* device)
{
 800b2e0:	b5b0      	push	{r4, r5, r7, lr}
 800b2e2:	b0a8      	sub	sp, #160	; 0xa0
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	TempProbe result = {
 800b2e8:	4bb1      	ldr	r3, [pc, #708]	; (800b5b0 <ds18b20_read+0x2d0>)
 800b2ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		.temperature = NAN,
	};
	uint8_t buf[ONEWIRE_MAX_LEN];
	uint8_t len = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c

	// Reset Sequence
	if(onewire_reset(device) != STATUS_OK)
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7f7 fc25 	bl	8002b44 <onewire_reset>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <ds18b20_read+0x26>
	{
		return result;
 800b300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b304:	e14f      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}

	// Write skip ROM 0xCC
	buf[0] = 0xCC;
 800b306:	23cc      	movs	r3, #204	; 0xcc
 800b308:	723b      	strb	r3, [r7, #8]
	len = 1;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b310:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b314:	f107 0308 	add.w	r3, r7, #8
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7f7 fc76 	bl	8002c0c <onewire_readwrite>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <ds18b20_read+0x4c>
	{
		return result;
 800b326:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b32a:	e13c      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}

	// Write convert temp 0x44
	buf[0] = 0x44;
 800b32c:	2344      	movs	r3, #68	; 0x44
 800b32e:	723b      	strb	r3, [r7, #8]
	len = 1;
 800b330:	2301      	movs	r3, #1
 800b332:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b336:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7f7 fc63 	bl	8002c0c <onewire_readwrite>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <ds18b20_read+0x72>
	{
		return result;
 800b34c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b350:	e129      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}

	// Read wait for conversion to finish
	uint64_t timeout = MILLIS();
 800b352:	f7f6 fdf5 	bl	8001f40 <MILLIS>
 800b356:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
	len = 1;
 800b35a:	2301      	movs	r3, #1
 800b35c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	do {
		if(MILLIS() - timeout > 100)
 800b360:	f7f6 fdee 	bl	8001f40 <MILLIS>
 800b364:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800b368:	1a84      	subs	r4, r0, r2
 800b36a:	eb61 0503 	sbc.w	r5, r1, r3
 800b36e:	2c65      	cmp	r4, #101	; 0x65
 800b370:	f175 0300 	sbcs.w	r3, r5, #0
 800b374:	d302      	bcc.n	800b37c <ds18b20_read+0x9c>
		{
			return result;
 800b376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b37a:	e114      	b.n	800b5a6 <ds18b20_read+0x2c6>
		}
		buf[0] = 0xFF;
 800b37c:	23ff      	movs	r3, #255	; 0xff
 800b37e:	723b      	strb	r3, [r7, #8]
		if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b380:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b384:	f107 0308 	add.w	r3, r7, #8
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7f7 fc3e 	bl	8002c0c <onewire_readwrite>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <ds18b20_read+0xbc>
		{
			return result;
 800b396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b39a:	e104      	b.n	800b5a6 <ds18b20_read+0x2c6>
		}
	} while(buf[0] != 0xFF );
 800b39c:	7a3b      	ldrb	r3, [r7, #8]
 800b39e:	2bff      	cmp	r3, #255	; 0xff
 800b3a0:	d1de      	bne.n	800b360 <ds18b20_read+0x80>

	// Reset Sequence
	if(onewire_reset(device) != STATUS_OK)
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7f7 fbce 	bl	8002b44 <onewire_reset>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <ds18b20_read+0xd4>
	{
		return result;
 800b3ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3b2:	e0f8      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}

	// Write skip ROM 0xCC
	buf[0] = 0xCC;
 800b3b4:	23cc      	movs	r3, #204	; 0xcc
 800b3b6:	723b      	strb	r3, [r7, #8]
	len = 1;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b3be:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b3c2:	f107 0308 	add.w	r3, r7, #8
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7f7 fc1f 	bl	8002c0c <onewire_readwrite>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <ds18b20_read+0xfa>
	{
		return result;
 800b3d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3d8:	e0e5      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}

	// Write read scratchpad 0xBE
	buf[0] = 0xBE;
 800b3da:	23be      	movs	r3, #190	; 0xbe
 800b3dc:	723b      	strb	r3, [r7, #8]
	len = 1;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b3e4:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b3e8:	f107 0308 	add.w	r3, r7, #8
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7f7 fc0c 	bl	8002c0c <onewire_readwrite>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <ds18b20_read+0x120>
	{
		return result;
 800b3fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3fe:	e0d2      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}

	// Read scratchpad
	uint8_t crc_reg = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	buf[0] = 0xFF;
 800b406:	23ff      	movs	r3, #255	; 0xff
 800b408:	723b      	strb	r3, [r7, #8]
	buf[1] = 0xFF;
 800b40a:	23ff      	movs	r3, #255	; 0xff
 800b40c:	727b      	strb	r3, [r7, #9]
	buf[2] = 0xFF;
 800b40e:	23ff      	movs	r3, #255	; 0xff
 800b410:	72bb      	strb	r3, [r7, #10]
	buf[3] = 0xFF;
 800b412:	23ff      	movs	r3, #255	; 0xff
 800b414:	72fb      	strb	r3, [r7, #11]
	buf[4] = 0xFF;
 800b416:	23ff      	movs	r3, #255	; 0xff
 800b418:	733b      	strb	r3, [r7, #12]
	buf[5] = 0xFF;
 800b41a:	23ff      	movs	r3, #255	; 0xff
 800b41c:	737b      	strb	r3, [r7, #13]
	buf[6] = 0xFF;
 800b41e:	23ff      	movs	r3, #255	; 0xff
 800b420:	73bb      	strb	r3, [r7, #14]
	buf[7] = 0xFF;
 800b422:	23ff      	movs	r3, #255	; 0xff
 800b424:	73fb      	strb	r3, [r7, #15]
	buf[8] = 0xFF;
 800b426:	23ff      	movs	r3, #255	; 0xff
 800b428:	743b      	strb	r3, [r7, #16]
	len = 9;
 800b42a:	2309      	movs	r3, #9
 800b42c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	if(onewire_readwrite(device, buf, len) != STATUS_OK)
 800b430:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7f7 fbe6 	bl	8002c0c <onewire_readwrite>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <ds18b20_read+0x16c>
	{
		return result;
 800b446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b44a:	e0ac      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}
	for (uint8_t i = 0; i < 8; i++) {
 800b44c:	2300      	movs	r3, #0
 800b44e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800b452:	e069      	b.n	800b528 <ds18b20_read+0x248>
		for (uint8_t j = 0; j < 8; j++) {
 800b454:	2300      	movs	r3, #0
 800b456:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 800b45a:	e05c      	b.n	800b516 <ds18b20_read+0x236>
			uint8_t lsb = crc_reg & 0x01;
 800b45c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			crc_reg >>= 1;
 800b468:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b46c:	085b      	lsrs	r3, r3, #1
 800b46e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			uint8_t input = lsb ^ ((buf[i] >> j) & 0x01);
 800b472:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800b476:	33a0      	adds	r3, #160	; 0xa0
 800b478:	443b      	add	r3, r7
 800b47a:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 800b47e:	461a      	mov	r2, r3
 800b480:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800b484:	fa42 f303 	asr.w	r3, r2, r3
 800b488:	b25b      	sxtb	r3, r3
 800b48a:	f003 0301 	and.w	r3, r3, #1
 800b48e:	b25a      	sxtb	r2, r3
 800b490:	f997 308d 	ldrsb.w	r3, [r7, #141]	; 0x8d
 800b494:	4053      	eors	r3, r2
 800b496:	b25b      	sxtb	r3, r3
 800b498:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			crc_reg |= input << 7;
 800b49c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800b4a0:	01db      	lsls	r3, r3, #7
 800b4a2:	b25a      	sxtb	r2, r3
 800b4a4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if (((crc_reg >> 3) & 0x01) ^ input)
 800b4b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b4b4:	08db      	lsrs	r3, r3, #3
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	f003 0201 	and.w	r2, r3, #1
 800b4bc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d006      	beq.n	800b4d2 <ds18b20_read+0x1f2>
			{
				crc_reg |= (1 << 3);
 800b4c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b4c8:	f043 0308 	orr.w	r3, r3, #8
 800b4cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800b4d0:	e005      	b.n	800b4de <ds18b20_read+0x1fe>
			}
			else
			{
				crc_reg &= ~(1 << 3);
 800b4d2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b4d6:	f023 0308 	bic.w	r3, r3, #8
 800b4da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
			if (((crc_reg >> 2) & 0x01) ^ input) {
 800b4de:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b4e2:	089b      	lsrs	r3, r3, #2
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	f003 0201 	and.w	r2, r3, #1
 800b4ea:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d006      	beq.n	800b500 <ds18b20_read+0x220>
				crc_reg |= (1 << 2);
 800b4f2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b4f6:	f043 0304 	orr.w	r3, r3, #4
 800b4fa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800b4fe:	e005      	b.n	800b50c <ds18b20_read+0x22c>
			}
			else
			{
				crc_reg &= ~(1 << 2);
 800b500:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b504:	f023 0304 	bic.w	r3, r3, #4
 800b508:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		for (uint8_t j = 0; j < 8; j++) {
 800b50c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800b510:	3301      	adds	r3, #1
 800b512:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 800b516:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800b51a:	2b07      	cmp	r3, #7
 800b51c:	d99e      	bls.n	800b45c <ds18b20_read+0x17c>
	for (uint8_t i = 0; i < 8; i++) {
 800b51e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800b522:	3301      	adds	r3, #1
 800b524:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800b528:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800b52c:	2b07      	cmp	r3, #7
 800b52e:	d991      	bls.n	800b454 <ds18b20_read+0x174>
			}
		}
	}
	if(crc_reg != buf[8])
 800b530:	7c3b      	ldrb	r3, [r7, #16]
 800b532:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800b536:	429a      	cmp	r2, r3
 800b538:	d002      	beq.n	800b540 <ds18b20_read+0x260>
	{
		return result;
 800b53a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b53e:	e032      	b.n	800b5a6 <ds18b20_read+0x2c6>
	}

	uint16_t temp_raw = ((uint16_t) buf[1] << 8) | buf[0];
 800b540:	7a7b      	ldrb	r3, [r7, #9]
 800b542:	021b      	lsls	r3, r3, #8
 800b544:	b21a      	sxth	r2, r3
 800b546:	7a3b      	ldrb	r3, [r7, #8]
 800b548:	b21b      	sxth	r3, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	b21b      	sxth	r3, r3
 800b54e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	result.temperature = ((temp_raw & 0x7F8) / 16.0);
 800b552:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b556:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f4 ffba 	bl	80004d4 <__aeabi_i2d>
 800b560:	f04f 0200 	mov.w	r2, #0
 800b564:	4b13      	ldr	r3, [pc, #76]	; (800b5b4 <ds18b20_read+0x2d4>)
 800b566:	f7f5 f949 	bl	80007fc <__aeabi_ddiv>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4610      	mov	r0, r2
 800b570:	4619      	mov	r1, r3
 800b572:	f7f5 faf1 	bl	8000b58 <__aeabi_d2f>
 800b576:	4603      	mov	r3, r0
 800b578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	result.temperature *= temp_raw & 0xF800 ? -1 : 1;
 800b57c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b580:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b584:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <ds18b20_read+0x2b0>
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <ds18b20_read+0x2d8>)
 800b58e:	e001      	b.n	800b594 <ds18b20_read+0x2b4>
 800b590:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b594:	4611      	mov	r1, r2
 800b596:	4618      	mov	r0, r3
 800b598:	f7f5 fc3c 	bl	8000e14 <__aeabi_fmul>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	return result;
 800b5a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	37a0      	adds	r7, #160	; 0xa0
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	7fc00000 	.word	0x7fc00000
 800b5b4:	40300000 	.word	0x40300000
 800b5b8:	bf800000 	.word	0xbf800000

0800b5bc <iis2mdc_init>:
#include <string.h>
#include <stdio.h>

#include "hab_timer.h"

Status iis2mdc_init(I2cDevice* device, Iis2mdcODR odr) {
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[2];

    // Read WHO_AM_I register to confirm we're connected
    buf[0] = IIS2MDC_WHO_AM_I;
 800b5c8:	234f      	movs	r3, #79	; 0x4f
 800b5ca:	733b      	strb	r3, [r7, #12]
    if (i2c_write(device, buf, 1) != STATUS_OK) {
 800b5cc:	f107 030c 	add.w	r3, r7, #12
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7f6 fded 	bl	80021b4 <i2c_write>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <iis2mdc_init+0x28>
    	return STATUS_ERROR;
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	e027      	b.n	800b634 <iis2mdc_init+0x78>
    }
    if (i2c_read(device, buf, 1) != STATUS_OK) {
 800b5e4:	f107 030c 	add.w	r3, r7, #12
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7f6 fe0d 	bl	800220c <i2c_read>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <iis2mdc_init+0x40>
        return STATUS_ERROR;
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e01b      	b.n	800b634 <iis2mdc_init+0x78>
    }
    if (buf[0] != 0b01000000) {
 800b5fc:	7b3b      	ldrb	r3, [r7, #12]
 800b5fe:	2b40      	cmp	r3, #64	; 0x40
 800b600:	d001      	beq.n	800b606 <iis2mdc_init+0x4a>
        return STATUS_ERROR;
 800b602:	2302      	movs	r3, #2
 800b604:	e016      	b.n	800b634 <iis2mdc_init+0x78>
    }

    // Perform configuration
    buf[0] = IIS2MDC_CFG_A;
 800b606:	2360      	movs	r3, #96	; 0x60
 800b608:	733b      	strb	r3, [r7, #12]
    buf[1] = ((1 << 7) |     // Enable temperature compensation
              (odr << 2) |   // Set output data rate from args
 800b60a:	78fb      	ldrb	r3, [r7, #3]
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	b25b      	sxtb	r3, r3
 800b610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b614:	b25b      	sxtb	r3, r3
 800b616:	b2db      	uxtb	r3, r3
    buf[1] = ((1 << 7) |     // Enable temperature compensation
 800b618:	737b      	strb	r3, [r7, #13]
              (0b00 << 0));  // Set operation mode to continuous
    if (i2c_write(device, buf, 2) != STATUS_OK) {
 800b61a:	f107 030c 	add.w	r3, r7, #12
 800b61e:	2202      	movs	r2, #2
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7f6 fdc6 	bl	80021b4 <i2c_write>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <iis2mdc_init+0x76>
        return STATUS_ERROR;
 800b62e:	2302      	movs	r3, #2
 800b630:	e000      	b.n	800b634 <iis2mdc_init+0x78>
    }

    return STATUS_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <iis2mdc_read>:

Mag iis2mdc_read(I2cDevice* device) {
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b089      	sub	sp, #36	; 0x24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    Mag mag = {NAN, NAN, NAN};
 800b646:	4a4d      	ldr	r2, [pc, #308]	; (800b77c <iis2mdc_read+0x140>)
 800b648:	f107 030c 	add.w	r3, r7, #12
 800b64c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b64e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    buf[0] = IIS2MDC_OUT | 0x80;  // Set MSb for auto increment
 800b652:	23e8      	movs	r3, #232	; 0xe8
 800b654:	763b      	strb	r3, [r7, #24]
    if (i2c_write(device, buf, 1) != STATUS_OK) {
 800b656:	f107 0318 	add.w	r3, r7, #24
 800b65a:	2201      	movs	r2, #1
 800b65c:	4619      	mov	r1, r3
 800b65e:	6838      	ldr	r0, [r7, #0]
 800b660:	f7f6 fda8 	bl	80021b4 <i2c_write>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d008      	beq.n	800b67c <iis2mdc_read+0x40>
        return mag;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	461c      	mov	r4, r3
 800b66e:	f107 030c 	add.w	r3, r7, #12
 800b672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b67a:	e07a      	b.n	800b772 <iis2mdc_read+0x136>
    }
    if (i2c_read(device, buf, 6) != STATUS_OK) {
 800b67c:	f107 0318 	add.w	r3, r7, #24
 800b680:	2206      	movs	r2, #6
 800b682:	4619      	mov	r1, r3
 800b684:	6838      	ldr	r0, [r7, #0]
 800b686:	f7f6 fdc1 	bl	800220c <i2c_read>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d008      	beq.n	800b6a2 <iis2mdc_read+0x66>
        return mag;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	461c      	mov	r4, r3
 800b694:	f107 030c 	add.w	r3, r7, #12
 800b698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b69c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b6a0:	e067      	b.n	800b772 <iis2mdc_read+0x136>
    }

    mag.magX =
        (int16_t)(((uint16_t)buf[1] << 8) | (uint16_t)buf[0]) * 1.5 / 1000;
 800b6a2:	7e7b      	ldrb	r3, [r7, #25]
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	b21a      	sxth	r2, r3
 800b6a8:	7e3b      	ldrb	r3, [r7, #24]
 800b6aa:	b21b      	sxth	r3, r3
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	b21b      	sxth	r3, r3
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f4 ff0f 	bl	80004d4 <__aeabi_i2d>
 800b6b6:	f04f 0200 	mov.w	r2, #0
 800b6ba:	4b31      	ldr	r3, [pc, #196]	; (800b780 <iis2mdc_read+0x144>)
 800b6bc:	f7f4 ff74 	bl	80005a8 <__aeabi_dmul>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f04f 0200 	mov.w	r2, #0
 800b6cc:	4b2d      	ldr	r3, [pc, #180]	; (800b784 <iis2mdc_read+0x148>)
 800b6ce:	f7f5 f895 	bl	80007fc <__aeabi_ddiv>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f7f5 fa3d 	bl	8000b58 <__aeabi_d2f>
 800b6de:	4603      	mov	r3, r0
    mag.magX =
 800b6e0:	60fb      	str	r3, [r7, #12]
    mag.magY =
        (int16_t)(((uint16_t)buf[3] << 8) | (uint16_t)buf[2]) * 1.5 / 1000;
 800b6e2:	7efb      	ldrb	r3, [r7, #27]
 800b6e4:	021b      	lsls	r3, r3, #8
 800b6e6:	b21a      	sxth	r2, r3
 800b6e8:	7ebb      	ldrb	r3, [r7, #26]
 800b6ea:	b21b      	sxth	r3, r3
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	b21b      	sxth	r3, r3
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7f4 feef 	bl	80004d4 <__aeabi_i2d>
 800b6f6:	f04f 0200 	mov.w	r2, #0
 800b6fa:	4b21      	ldr	r3, [pc, #132]	; (800b780 <iis2mdc_read+0x144>)
 800b6fc:	f7f4 ff54 	bl	80005a8 <__aeabi_dmul>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4610      	mov	r0, r2
 800b706:	4619      	mov	r1, r3
 800b708:	f04f 0200 	mov.w	r2, #0
 800b70c:	4b1d      	ldr	r3, [pc, #116]	; (800b784 <iis2mdc_read+0x148>)
 800b70e:	f7f5 f875 	bl	80007fc <__aeabi_ddiv>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	4610      	mov	r0, r2
 800b718:	4619      	mov	r1, r3
 800b71a:	f7f5 fa1d 	bl	8000b58 <__aeabi_d2f>
 800b71e:	4603      	mov	r3, r0
    mag.magY =
 800b720:	613b      	str	r3, [r7, #16]
    mag.magZ =
        (int16_t)(((uint16_t)buf[5] << 8) | (uint16_t)buf[4]) * 1.5 / 1000;
 800b722:	7f7b      	ldrb	r3, [r7, #29]
 800b724:	021b      	lsls	r3, r3, #8
 800b726:	b21a      	sxth	r2, r3
 800b728:	7f3b      	ldrb	r3, [r7, #28]
 800b72a:	b21b      	sxth	r3, r3
 800b72c:	4313      	orrs	r3, r2
 800b72e:	b21b      	sxth	r3, r3
 800b730:	4618      	mov	r0, r3
 800b732:	f7f4 fecf 	bl	80004d4 <__aeabi_i2d>
 800b736:	f04f 0200 	mov.w	r2, #0
 800b73a:	4b11      	ldr	r3, [pc, #68]	; (800b780 <iis2mdc_read+0x144>)
 800b73c:	f7f4 ff34 	bl	80005a8 <__aeabi_dmul>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4610      	mov	r0, r2
 800b746:	4619      	mov	r1, r3
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	4b0d      	ldr	r3, [pc, #52]	; (800b784 <iis2mdc_read+0x148>)
 800b74e:	f7f5 f855 	bl	80007fc <__aeabi_ddiv>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4610      	mov	r0, r2
 800b758:	4619      	mov	r1, r3
 800b75a:	f7f5 f9fd 	bl	8000b58 <__aeabi_d2f>
 800b75e:	4603      	mov	r3, r0
    mag.magZ =
 800b760:	617b      	str	r3, [r7, #20]

    return mag;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	461c      	mov	r4, r3
 800b766:	f107 030c 	add.w	r3, r7, #12
 800b76a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b76e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	3724      	adds	r7, #36	; 0x24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd90      	pop	{r4, r7, pc}
 800b77a:	bf00      	nop
 800b77c:	0801a164 	.word	0x0801a164
 800b780:	3ff80000 	.word	0x3ff80000
 800b784:	408f4000 	.word	0x408f4000

0800b788 <lsm6dsox_init>:
#include "stdio.h"

Lsm6dsoxAccelRange g_current_accel_range = LSM6DSOX_XL_RANGE_16_G;
Lsm6dsoxGyroRange g_current_gyro_range = LSM6DSOX_G_RANGE_2000_DPS;

Status lsm6dsox_init(I2cDevice* device) {
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
	uint8_t buf[2];

	// Read WHO_AM_I register to confirm we're connected
	buf[0] = LSM6DSOX_WHO_AM_I;
 800b790:	230f      	movs	r3, #15
 800b792:	733b      	strb	r3, [r7, #12]
	if (i2c_write(device, buf, 1) != STATUS_OK) {
 800b794:	f107 030c 	add.w	r3, r7, #12
 800b798:	2201      	movs	r2, #1
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7f6 fd09 	bl	80021b4 <i2c_write>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <lsm6dsox_init+0x24>
		return STATUS_ERROR;
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e051      	b.n	800b850 <lsm6dsox_init+0xc8>
	}
	if (i2c_read(device, buf, 1) != STATUS_OK) {
 800b7ac:	f107 030c 	add.w	r3, r7, #12
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7f6 fd29 	bl	800220c <i2c_read>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <lsm6dsox_init+0x3c>
		return STATUS_ERROR;
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e045      	b.n	800b850 <lsm6dsox_init+0xc8>
	}
	if (buf[0] != 0x6C) {
 800b7c4:	7b3b      	ldrb	r3, [r7, #12]
 800b7c6:	2b6c      	cmp	r3, #108	; 0x6c
 800b7c8:	d001      	beq.n	800b7ce <lsm6dsox_init+0x46>
		return STATUS_ERROR;
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	e040      	b.n	800b850 <lsm6dsox_init+0xc8>
	}

	// Perform configuration
	buf[0] = LSM6DSOX_CTRL3_C;
 800b7ce:	2312      	movs	r3, #18
 800b7d0:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x85;  // Reset
 800b7d2:	2385      	movs	r3, #133	; 0x85
 800b7d4:	737b      	strb	r3, [r7, #13]
	if (i2c_write(device, buf, 2) != STATUS_OK) {
 800b7d6:	f107 030c 	add.w	r3, r7, #12
 800b7da:	2202      	movs	r2, #2
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7f6 fce8 	bl	80021b4 <i2c_write>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <lsm6dsox_init+0x66>
		return STATUS_ERROR;
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	e030      	b.n	800b850 <lsm6dsox_init+0xc8>
	}

	// Disable I3C and DEN value
	buf[0] = LSM6DSOX_CTRL9_XL;
 800b7ee:	2318      	movs	r3, #24
 800b7f0:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x02;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	737b      	strb	r3, [r7, #13]
	if (i2c_write(device, buf, 2) != STATUS_OK) {
 800b7f6:	f107 030c 	add.w	r3, r7, #12
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7f6 fcd8 	bl	80021b4 <i2c_write>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <lsm6dsox_init+0x86>
		return STATUS_ERROR;
 800b80a:	2302      	movs	r3, #2
 800b80c:	e020      	b.n	800b850 <lsm6dsox_init+0xc8>
	}

	// Enable and configure the accel to 16g range and 6.66khz rate
	buf[0] = LSM6DSOX_CTRL1_XL;
 800b80e:	2310      	movs	r3, #16
 800b810:	733b      	strb	r3, [r7, #12]
	buf[1] = LSM6DSOX_XL_RANGE_16_G | LSM6DSOX_XL_RATE_6_66_KHZ;
 800b812:	23a4      	movs	r3, #164	; 0xa4
 800b814:	737b      	strb	r3, [r7, #13]
	if (i2c_write(device, buf, 2) != STATUS_OK) {
 800b816:	f107 030c 	add.w	r3, r7, #12
 800b81a:	2202      	movs	r2, #2
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7f6 fcc8 	bl	80021b4 <i2c_write>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <lsm6dsox_init+0xa6>
		return STATUS_ERROR;
 800b82a:	2302      	movs	r3, #2
 800b82c:	e010      	b.n	800b850 <lsm6dsox_init+0xc8>
	}

	// Enable and configure the gyro to 2000dps range and 6.66khz rate
	buf[0] = LSM6DSOX_CTRL2_G;
 800b82e:	2311      	movs	r3, #17
 800b830:	733b      	strb	r3, [r7, #12]
	buf[1] = LSM6DSOX_G_RANGE_2000_DPS | LSM6DSOX_G_RATE_6_66_KHZ;
 800b832:	23ac      	movs	r3, #172	; 0xac
 800b834:	737b      	strb	r3, [r7, #13]
	if (i2c_write(device, buf, 2) != STATUS_OK) {
 800b836:	f107 030c 	add.w	r3, r7, #12
 800b83a:	2202      	movs	r2, #2
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7f6 fcb8 	bl	80021b4 <i2c_write>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <lsm6dsox_init+0xc6>
		return STATUS_ERROR;
 800b84a:	2302      	movs	r3, #2
 800b84c:	e000      	b.n	800b850 <lsm6dsox_init+0xc8>
	}

	return STATUS_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <lsm6dsox_read_accel>:

Accel lsm6dsox_read_accel(I2cDevice* device) {
 800b858:	b590      	push	{r4, r7, lr}
 800b85a:	b08f      	sub	sp, #60	; 0x3c
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
    Accel result;

    // Read all 6 registers at once
    uint8_t rx_buf[6];
    rx_buf[0] = LSM6DSOX_OUT_A;
 800b862:	2328      	movs	r3, #40	; 0x28
 800b864:	733b      	strb	r3, [r7, #12]
    if (i2c_write(device, rx_buf, 1) != STATUS_OK) {
 800b866:	f107 030c 	add.w	r3, r7, #12
 800b86a:	2201      	movs	r2, #1
 800b86c:	4619      	mov	r1, r3
 800b86e:	6838      	ldr	r0, [r7, #0]
 800b870:	f7f6 fca0 	bl	80021b4 <i2c_write>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00e      	beq.n	800b898 <lsm6dsox_read_accel+0x40>
    	result.accelX = NAN;
 800b87a:	4b59      	ldr	r3, [pc, #356]	; (800b9e0 <lsm6dsox_read_accel+0x188>)
 800b87c:	617b      	str	r3, [r7, #20]
		result.accelY = NAN;
 800b87e:	4b58      	ldr	r3, [pc, #352]	; (800b9e0 <lsm6dsox_read_accel+0x188>)
 800b880:	61bb      	str	r3, [r7, #24]
		result.accelZ = NAN;
 800b882:	4b57      	ldr	r3, [pc, #348]	; (800b9e0 <lsm6dsox_read_accel+0x188>)
 800b884:	61fb      	str	r3, [r7, #28]
		return result;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	461c      	mov	r4, r3
 800b88a:	f107 0314 	add.w	r3, r7, #20
 800b88e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b892:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b896:	e09e      	b.n	800b9d6 <lsm6dsox_read_accel+0x17e>
	}
    if (i2c_read(device, rx_buf, 6) != STATUS_OK) {
 800b898:	f107 030c 	add.w	r3, r7, #12
 800b89c:	2206      	movs	r2, #6
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6838      	ldr	r0, [r7, #0]
 800b8a2:	f7f6 fcb3 	bl	800220c <i2c_read>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00e      	beq.n	800b8ca <lsm6dsox_read_accel+0x72>
        result.accelX = NAN;
 800b8ac:	4b4c      	ldr	r3, [pc, #304]	; (800b9e0 <lsm6dsox_read_accel+0x188>)
 800b8ae:	617b      	str	r3, [r7, #20]
        result.accelY = NAN;
 800b8b0:	4b4b      	ldr	r3, [pc, #300]	; (800b9e0 <lsm6dsox_read_accel+0x188>)
 800b8b2:	61bb      	str	r3, [r7, #24]
        result.accelZ = NAN;
 800b8b4:	4b4a      	ldr	r3, [pc, #296]	; (800b9e0 <lsm6dsox_read_accel+0x188>)
 800b8b6:	61fb      	str	r3, [r7, #28]
        return result;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	461c      	mov	r4, r3
 800b8bc:	f107 0314 	add.w	r3, r7, #20
 800b8c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8c8:	e085      	b.n	800b9d6 <lsm6dsox_read_accel+0x17e>
    }

    // Convert unsigned 8-bit halves to signed 16-bit numbers
    int16_t acc_x_raw = ((int16_t)(((uint16_t)rx_buf[1] << 8) | rx_buf[0]));
 800b8ca:	7b7b      	ldrb	r3, [r7, #13]
 800b8cc:	021b      	lsls	r3, r3, #8
 800b8ce:	b21a      	sxth	r2, r3
 800b8d0:	7b3b      	ldrb	r3, [r7, #12]
 800b8d2:	b21b      	sxth	r3, r3
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	867b      	strh	r3, [r7, #50]	; 0x32
    int16_t acc_y_raw = ((int16_t)(((uint16_t)rx_buf[3] << 8) | rx_buf[2]));
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	b21a      	sxth	r2, r3
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	b21b      	sxth	r3, r3
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	863b      	strh	r3, [r7, #48]	; 0x30
    int16_t acc_z_raw = ((int16_t)(((uint16_t)rx_buf[5] << 8) | rx_buf[4]));
 800b8e6:	7c7b      	ldrb	r3, [r7, #17]
 800b8e8:	021b      	lsls	r3, r3, #8
 800b8ea:	b21a      	sxth	r2, r3
 800b8ec:	7c3b      	ldrb	r3, [r7, #16]
 800b8ee:	b21b      	sxth	r3, r3
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    // Convert data to units of g
    float conversion_factor = 0;
 800b8f4:	f04f 0300 	mov.w	r3, #0
 800b8f8:	637b      	str	r3, [r7, #52]	; 0x34
    switch (g_current_accel_range) {
 800b8fa:	4b3a      	ldr	r3, [pc, #232]	; (800b9e4 <lsm6dsox_read_accel+0x18c>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b0c      	cmp	r3, #12
 800b900:	d828      	bhi.n	800b954 <lsm6dsox_read_accel+0xfc>
 800b902:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <lsm6dsox_read_accel+0xb0>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b93d 	.word	0x0800b93d
 800b90c:	0800b955 	.word	0x0800b955
 800b910:	0800b955 	.word	0x0800b955
 800b914:	0800b955 	.word	0x0800b955
 800b918:	0800b94f 	.word	0x0800b94f
 800b91c:	0800b955 	.word	0x0800b955
 800b920:	0800b955 	.word	0x0800b955
 800b924:	0800b955 	.word	0x0800b955
 800b928:	0800b943 	.word	0x0800b943
 800b92c:	0800b955 	.word	0x0800b955
 800b930:	0800b955 	.word	0x0800b955
 800b934:	0800b955 	.word	0x0800b955
 800b938:	0800b949 	.word	0x0800b949
        case LSM6DSOX_XL_RANGE_2_G:
            conversion_factor = 0.061;
 800b93c:	4b2a      	ldr	r3, [pc, #168]	; (800b9e8 <lsm6dsox_read_accel+0x190>)
 800b93e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b940:	e008      	b.n	800b954 <lsm6dsox_read_accel+0xfc>
        case LSM6DSOX_XL_RANGE_4_G:
            conversion_factor = 0.122;
 800b942:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <lsm6dsox_read_accel+0x194>)
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b946:	e005      	b.n	800b954 <lsm6dsox_read_accel+0xfc>
        case LSM6DSOX_XL_RANGE_8_G:
            conversion_factor = 0.244;
 800b948:	4b29      	ldr	r3, [pc, #164]	; (800b9f0 <lsm6dsox_read_accel+0x198>)
 800b94a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b94c:	e002      	b.n	800b954 <lsm6dsox_read_accel+0xfc>
        case LSM6DSOX_XL_RANGE_16_G:
            conversion_factor = 0.488;
 800b94e:	4b29      	ldr	r3, [pc, #164]	; (800b9f4 <lsm6dsox_read_accel+0x19c>)
 800b950:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b952:	bf00      	nop
    }

    float acc_x = ((float)acc_x_raw * conversion_factor) / 1000;
 800b954:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b958:	4618      	mov	r0, r3
 800b95a:	f7f5 fa07 	bl	8000d6c <__aeabi_i2f>
 800b95e:	4603      	mov	r3, r0
 800b960:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b962:	4618      	mov	r0, r3
 800b964:	f7f5 fa56 	bl	8000e14 <__aeabi_fmul>
 800b968:	4603      	mov	r3, r0
 800b96a:	4923      	ldr	r1, [pc, #140]	; (800b9f8 <lsm6dsox_read_accel+0x1a0>)
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7f5 fb05 	bl	8000f7c <__aeabi_fdiv>
 800b972:	4603      	mov	r3, r0
 800b974:	62bb      	str	r3, [r7, #40]	; 0x28
    float acc_y = ((float)acc_y_raw * conversion_factor) / 1000;
 800b976:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7f5 f9f6 	bl	8000d6c <__aeabi_i2f>
 800b980:	4603      	mov	r3, r0
 800b982:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b984:	4618      	mov	r0, r3
 800b986:	f7f5 fa45 	bl	8000e14 <__aeabi_fmul>
 800b98a:	4603      	mov	r3, r0
 800b98c:	491a      	ldr	r1, [pc, #104]	; (800b9f8 <lsm6dsox_read_accel+0x1a0>)
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f5 faf4 	bl	8000f7c <__aeabi_fdiv>
 800b994:	4603      	mov	r3, r0
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
    float acc_z = ((float)acc_z_raw * conversion_factor) / 1000;
 800b998:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7f5 f9e5 	bl	8000d6c <__aeabi_i2f>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f5 fa34 	bl	8000e14 <__aeabi_fmul>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	4912      	ldr	r1, [pc, #72]	; (800b9f8 <lsm6dsox_read_accel+0x1a0>)
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f5 fae3 	bl	8000f7c <__aeabi_fdiv>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	623b      	str	r3, [r7, #32]

    result.accelX = acc_x;
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	617b      	str	r3, [r7, #20]
    result.accelY = acc_y;
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	61bb      	str	r3, [r7, #24]
    result.accelZ = acc_z;
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	61fb      	str	r3, [r7, #28]

    return result;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	461c      	mov	r4, r3
 800b9ca:	f107 0314 	add.w	r3, r7, #20
 800b9ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b9d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	373c      	adds	r7, #60	; 0x3c
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd90      	pop	{r4, r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	7fc00000 	.word	0x7fc00000
 800b9e4:	20000648 	.word	0x20000648
 800b9e8:	3d79db23 	.word	0x3d79db23
 800b9ec:	3df9db23 	.word	0x3df9db23
 800b9f0:	3e79db23 	.word	0x3e79db23
 800b9f4:	3ef9db23 	.word	0x3ef9db23
 800b9f8:	447a0000 	.word	0x447a0000

0800b9fc <lsm6dsox_read_gyro>:

Gyro lsm6dsox_read_gyro(I2cDevice* device) {
 800b9fc:	b590      	push	{r4, r7, lr}
 800b9fe:	b08f      	sub	sp, #60	; 0x3c
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
    Gyro result;

    // Read all 6 registers at once
    uint8_t rx_buf[6];
    rx_buf[0] = LSM6DSOX_OUT_G;
 800ba06:	2322      	movs	r3, #34	; 0x22
 800ba08:	733b      	strb	r3, [r7, #12]
	if (i2c_write(device, rx_buf, 1) != STATUS_OK) {
 800ba0a:	f107 030c 	add.w	r3, r7, #12
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4619      	mov	r1, r3
 800ba12:	6838      	ldr	r0, [r7, #0]
 800ba14:	f7f6 fbce 	bl	80021b4 <i2c_write>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00e      	beq.n	800ba3c <lsm6dsox_read_gyro+0x40>
		result.gyroX = NAN;
 800ba1e:	4b5d      	ldr	r3, [pc, #372]	; (800bb94 <lsm6dsox_read_gyro+0x198>)
 800ba20:	617b      	str	r3, [r7, #20]
		result.gyroY = NAN;
 800ba22:	4b5c      	ldr	r3, [pc, #368]	; (800bb94 <lsm6dsox_read_gyro+0x198>)
 800ba24:	61bb      	str	r3, [r7, #24]
		result.gyroZ = NAN;
 800ba26:	4b5b      	ldr	r3, [pc, #364]	; (800bb94 <lsm6dsox_read_gyro+0x198>)
 800ba28:	61fb      	str	r3, [r7, #28]
		return result;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	461c      	mov	r4, r3
 800ba2e:	f107 0314 	add.w	r3, r7, #20
 800ba32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba3a:	e0a7      	b.n	800bb8c <lsm6dsox_read_gyro+0x190>
	}
	if (i2c_read(device, rx_buf, 6) != STATUS_OK) {
 800ba3c:	f107 030c 	add.w	r3, r7, #12
 800ba40:	2206      	movs	r2, #6
 800ba42:	4619      	mov	r1, r3
 800ba44:	6838      	ldr	r0, [r7, #0]
 800ba46:	f7f6 fbe1 	bl	800220c <i2c_read>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00e      	beq.n	800ba6e <lsm6dsox_read_gyro+0x72>
		result.gyroX = NAN;
 800ba50:	4b50      	ldr	r3, [pc, #320]	; (800bb94 <lsm6dsox_read_gyro+0x198>)
 800ba52:	617b      	str	r3, [r7, #20]
		result.gyroY = NAN;
 800ba54:	4b4f      	ldr	r3, [pc, #316]	; (800bb94 <lsm6dsox_read_gyro+0x198>)
 800ba56:	61bb      	str	r3, [r7, #24]
		result.gyroZ = NAN;
 800ba58:	4b4e      	ldr	r3, [pc, #312]	; (800bb94 <lsm6dsox_read_gyro+0x198>)
 800ba5a:	61fb      	str	r3, [r7, #28]
		return result;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	461c      	mov	r4, r3
 800ba60:	f107 0314 	add.w	r3, r7, #20
 800ba64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba6c:	e08e      	b.n	800bb8c <lsm6dsox_read_gyro+0x190>
	}

    // Convert unsigned 8-bit halves to signed 16-bit numbers
    int16_t g_x_raw = (int16_t)(((uint16_t)rx_buf[1] << 8) | rx_buf[0]);
 800ba6e:	7b7b      	ldrb	r3, [r7, #13]
 800ba70:	021b      	lsls	r3, r3, #8
 800ba72:	b21a      	sxth	r2, r3
 800ba74:	7b3b      	ldrb	r3, [r7, #12]
 800ba76:	b21b      	sxth	r3, r3
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	867b      	strh	r3, [r7, #50]	; 0x32
    int16_t g_y_raw = (int16_t)(((uint16_t)rx_buf[3] << 8) | rx_buf[2]);
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	b21a      	sxth	r2, r3
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	b21b      	sxth	r3, r3
 800ba86:	4313      	orrs	r3, r2
 800ba88:	863b      	strh	r3, [r7, #48]	; 0x30
    int16_t g_z_raw = (int16_t)(((uint16_t)rx_buf[5] << 8) | rx_buf[4]);
 800ba8a:	7c7b      	ldrb	r3, [r7, #17]
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	b21a      	sxth	r2, r3
 800ba90:	7c3b      	ldrb	r3, [r7, #16]
 800ba92:	b21b      	sxth	r3, r3
 800ba94:	4313      	orrs	r3, r2
 800ba96:	85fb      	strh	r3, [r7, #46]	; 0x2e

    // Convert data to units of dps
    float conversion_factor = 0;
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	637b      	str	r3, [r7, #52]	; 0x34
    switch (g_current_gyro_range) {
 800ba9e:	4b3e      	ldr	r3, [pc, #248]	; (800bb98 <lsm6dsox_read_gyro+0x19c>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	2b0c      	cmp	r3, #12
 800baa4:	dc20      	bgt.n	800bae8 <lsm6dsox_read_gyro+0xec>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	db2f      	blt.n	800bb0a <lsm6dsox_read_gyro+0x10e>
 800baaa:	2b0c      	cmp	r3, #12
 800baac:	d82d      	bhi.n	800bb0a <lsm6dsox_read_gyro+0x10e>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <lsm6dsox_read_gyro+0xb8>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800baf3 	.word	0x0800baf3
 800bab8:	0800bb0b 	.word	0x0800bb0b
 800babc:	0800bb0b 	.word	0x0800bb0b
 800bac0:	0800bb0b 	.word	0x0800bb0b
 800bac4:	0800baf9 	.word	0x0800baf9
 800bac8:	0800bb0b 	.word	0x0800bb0b
 800bacc:	0800bb0b 	.word	0x0800bb0b
 800bad0:	0800bb0b 	.word	0x0800bb0b
 800bad4:	0800baff 	.word	0x0800baff
 800bad8:	0800bb0b 	.word	0x0800bb0b
 800badc:	0800bb0b 	.word	0x0800bb0b
 800bae0:	0800bb0b 	.word	0x0800bb0b
 800bae4:	0800bb05 	.word	0x0800bb05
 800bae8:	2bff      	cmp	r3, #255	; 0xff
 800baea:	d10e      	bne.n	800bb0a <lsm6dsox_read_gyro+0x10e>
        case LSM6DSOX_G_RANGE_125_DPS:
            conversion_factor = 4.375;
 800baec:	4b2b      	ldr	r3, [pc, #172]	; (800bb9c <lsm6dsox_read_gyro+0x1a0>)
 800baee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800baf0:	e00b      	b.n	800bb0a <lsm6dsox_read_gyro+0x10e>
        case LSM6DSOX_G_RANGE_250_DPS:
            conversion_factor = 8.75;
 800baf2:	4b2b      	ldr	r3, [pc, #172]	; (800bba0 <lsm6dsox_read_gyro+0x1a4>)
 800baf4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800baf6:	e008      	b.n	800bb0a <lsm6dsox_read_gyro+0x10e>
        case LSM6DSOX_G_RANGE_500_DPS:
            conversion_factor = 17.5;
 800baf8:	4b2a      	ldr	r3, [pc, #168]	; (800bba4 <lsm6dsox_read_gyro+0x1a8>)
 800bafa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bafc:	e005      	b.n	800bb0a <lsm6dsox_read_gyro+0x10e>
        case LSM6DSOX_G_RANGE_1000_DPS:
            conversion_factor = 35.0;
 800bafe:	4b2a      	ldr	r3, [pc, #168]	; (800bba8 <lsm6dsox_read_gyro+0x1ac>)
 800bb00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bb02:	e002      	b.n	800bb0a <lsm6dsox_read_gyro+0x10e>
        case LSM6DSOX_G_RANGE_2000_DPS:
            conversion_factor = 70.0;
 800bb04:	4b29      	ldr	r3, [pc, #164]	; (800bbac <lsm6dsox_read_gyro+0x1b0>)
 800bb06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bb08:	bf00      	nop
    }

    float g_x = ((float)g_x_raw * conversion_factor) / 1000;
 800bb0a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f5 f92c 	bl	8000d6c <__aeabi_i2f>
 800bb14:	4603      	mov	r3, r0
 800bb16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f5 f97b 	bl	8000e14 <__aeabi_fmul>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4923      	ldr	r1, [pc, #140]	; (800bbb0 <lsm6dsox_read_gyro+0x1b4>)
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7f5 fa2a 	bl	8000f7c <__aeabi_fdiv>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	62bb      	str	r3, [r7, #40]	; 0x28
    float g_y = ((float)g_y_raw * conversion_factor) / 1000;
 800bb2c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7f5 f91b 	bl	8000d6c <__aeabi_i2f>
 800bb36:	4603      	mov	r3, r0
 800bb38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f5 f96a 	bl	8000e14 <__aeabi_fmul>
 800bb40:	4603      	mov	r3, r0
 800bb42:	491b      	ldr	r1, [pc, #108]	; (800bbb0 <lsm6dsox_read_gyro+0x1b4>)
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f5 fa19 	bl	8000f7c <__aeabi_fdiv>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
    float g_z = ((float)g_z_raw * conversion_factor) / 1000;
 800bb4e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f5 f90a 	bl	8000d6c <__aeabi_i2f>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f5 f959 	bl	8000e14 <__aeabi_fmul>
 800bb62:	4603      	mov	r3, r0
 800bb64:	4912      	ldr	r1, [pc, #72]	; (800bbb0 <lsm6dsox_read_gyro+0x1b4>)
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f5 fa08 	bl	8000f7c <__aeabi_fdiv>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	623b      	str	r3, [r7, #32]

    result.gyroX = g_x;
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	617b      	str	r3, [r7, #20]
    result.gyroY = g_y;
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	61bb      	str	r3, [r7, #24]
    result.gyroZ = g_z;
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	61fb      	str	r3, [r7, #28]

    return result;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	461c      	mov	r4, r3
 800bb80:	f107 0314 	add.w	r3, r7, #20
 800bb84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	373c      	adds	r7, #60	; 0x3c
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd90      	pop	{r4, r7, pc}
 800bb94:	7fc00000 	.word	0x7fc00000
 800bb98:	20000649 	.word	0x20000649
 800bb9c:	408c0000 	.word	0x408c0000
 800bba0:	410c0000 	.word	0x410c0000
 800bba4:	418c0000 	.word	0x418c0000
 800bba8:	420c0000 	.word	0x420c0000
 800bbac:	428c0000 	.word	0x428c0000
 800bbb0:	447a0000 	.word	0x447a0000

0800bbb4 <lsm6dsox_config_accel>:

Status lsm6dsox_config_accel(I2cDevice* device, Lsm6dsoxAccelDataRate rate,
                             Lsm6dsoxAccelRange range) {
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	70bb      	strb	r3, [r7, #2]
    uint8_t tx_buf[2];
    tx_buf[0] = LSM6DSOX_CTRL1_XL;
 800bbc4:	2310      	movs	r3, #16
 800bbc6:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = rate | range;
 800bbc8:	78fa      	ldrb	r2, [r7, #3]
 800bbca:	78bb      	ldrb	r3, [r7, #2]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	737b      	strb	r3, [r7, #13]

    // Configure the accelerometer to the specified range and measurement rate
    if (i2c_write(device, tx_buf, 2) != STATUS_OK) {
 800bbd2:	f107 030c 	add.w	r3, r7, #12
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7f6 faea 	bl	80021b4 <i2c_write>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <lsm6dsox_config_accel+0x36>
        return STATUS_ERROR;
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e02d      	b.n	800bc46 <lsm6dsox_config_accel+0x92>
    }

    uint8_t rx_buf = LSM6DSOX_CTRL1_XL;
 800bbea:	2310      	movs	r3, #16
 800bbec:	72fb      	strb	r3, [r7, #11]

    if (i2c_write(device, &rx_buf, 1) != STATUS_OK) { // Verify the settings
 800bbee:	f107 030b 	add.w	r3, r7, #11
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7f6 fadc 	bl	80021b4 <i2c_write>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d001      	beq.n	800bc06 <lsm6dsox_config_accel+0x52>
        return STATUS_ERROR;
 800bc02:	2302      	movs	r3, #2
 800bc04:	e01f      	b.n	800bc46 <lsm6dsox_config_accel+0x92>
    }

	if (i2c_read(device, &rx_buf, 1) != STATUS_OK) {
 800bc06:	f107 030b 	add.w	r3, r7, #11
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7f6 fafc 	bl	800220c <i2c_read>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <lsm6dsox_config_accel+0x6a>
		return STATUS_ERROR;
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	e013      	b.n	800bc46 <lsm6dsox_config_accel+0x92>
	}

    if ((rx_buf & 0xF0) != rate) {
 800bc1e:	7afb      	ldrb	r3, [r7, #11]
 800bc20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bc24:	78fb      	ldrb	r3, [r7, #3]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d001      	beq.n	800bc2e <lsm6dsox_config_accel+0x7a>
        return STATUS_ERROR;
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e00b      	b.n	800bc46 <lsm6dsox_config_accel+0x92>
    }
    if ((rx_buf & 0x0C) != range) {
 800bc2e:	7afb      	ldrb	r3, [r7, #11]
 800bc30:	f003 020c 	and.w	r2, r3, #12
 800bc34:	78bb      	ldrb	r3, [r7, #2]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d001      	beq.n	800bc3e <lsm6dsox_config_accel+0x8a>
        return STATUS_ERROR;
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	e003      	b.n	800bc46 <lsm6dsox_config_accel+0x92>
    }
    g_current_accel_range = range;
 800bc3e:	4a04      	ldr	r2, [pc, #16]	; (800bc50 <lsm6dsox_config_accel+0x9c>)
 800bc40:	78bb      	ldrb	r3, [r7, #2]
 800bc42:	7013      	strb	r3, [r2, #0]

    return STATUS_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000648 	.word	0x20000648

0800bc54 <lsm6dsox_config_gyro>:

Status lsm6dsox_config_gyro(I2cDevice* device, Lsm6dsoxGyroDataRate rate,
                            Lsm6dsoxGyroRange range) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	70fb      	strb	r3, [r7, #3]
 800bc60:	4613      	mov	r3, r2
 800bc62:	70bb      	strb	r3, [r7, #2]

    uint8_t tx_buf[2];
	tx_buf[0] = LSM6DSOX_CTRL2_G;
 800bc64:	2311      	movs	r3, #17
 800bc66:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = rate | range;
 800bc68:	78fa      	ldrb	r2, [r7, #3]
 800bc6a:	78bb      	ldrb	r3, [r7, #2]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	737b      	strb	r3, [r7, #13]
	if (range == LSM6DSOX_G_RANGE_125_DPS) {
 800bc72:	78bb      	ldrb	r3, [r7, #2]
 800bc74:	2bff      	cmp	r3, #255	; 0xff
 800bc76:	d104      	bne.n	800bc82 <lsm6dsox_config_gyro+0x2e>
		tx_buf[1] |= 0x02;
 800bc78:	7b7b      	ldrb	r3, [r7, #13]
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	737b      	strb	r3, [r7, #13]
	}

	// Configure the gyroscope to the specified range and measurement rate
	if (i2c_write(device, tx_buf, 2) != STATUS_OK) {
 800bc82:	f107 030c 	add.w	r3, r7, #12
 800bc86:	2202      	movs	r2, #2
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7f6 fa92 	bl	80021b4 <i2c_write>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <lsm6dsox_config_gyro+0x46>
		return STATUS_ERROR;
 800bc96:	2302      	movs	r3, #2
 800bc98:	e037      	b.n	800bd0a <lsm6dsox_config_gyro+0xb6>
	}

    uint8_t rx_buf = LSM6DSOX_CTRL2_G;
 800bc9a:	2311      	movs	r3, #17
 800bc9c:	72fb      	strb	r3, [r7, #11]

	if (i2c_write(device, &rx_buf, 1) != STATUS_OK) { // Verify the settings
 800bc9e:	f107 030b 	add.w	r3, r7, #11
 800bca2:	2201      	movs	r2, #1
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7f6 fa84 	bl	80021b4 <i2c_write>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <lsm6dsox_config_gyro+0x62>
		return STATUS_ERROR;
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	e029      	b.n	800bd0a <lsm6dsox_config_gyro+0xb6>
	}

	if (i2c_read(device, &rx_buf, 1) != STATUS_OK) {
 800bcb6:	f107 030b 	add.w	r3, r7, #11
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7f6 faa4 	bl	800220c <i2c_read>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <lsm6dsox_config_gyro+0x7a>
		return STATUS_ERROR;
 800bcca:	2302      	movs	r3, #2
 800bccc:	e01d      	b.n	800bd0a <lsm6dsox_config_gyro+0xb6>
	}

    if ((rx_buf & 0xF0) != rate) {
 800bcce:	7afb      	ldrb	r3, [r7, #11]
 800bcd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bcd4:	78fb      	ldrb	r3, [r7, #3]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d001      	beq.n	800bcde <lsm6dsox_config_gyro+0x8a>
        return STATUS_ERROR;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	e015      	b.n	800bd0a <lsm6dsox_config_gyro+0xb6>
    }
    if (range != LSM6DSOX_G_RANGE_125_DPS) {
 800bcde:	78bb      	ldrb	r3, [r7, #2]
 800bce0:	2bff      	cmp	r3, #255	; 0xff
 800bce2:	d007      	beq.n	800bcf4 <lsm6dsox_config_gyro+0xa0>
        if ((rx_buf & 0x0C) != range) {
 800bce4:	7afb      	ldrb	r3, [r7, #11]
 800bce6:	f003 020c 	and.w	r2, r3, #12
 800bcea:	78bb      	ldrb	r3, [r7, #2]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d008      	beq.n	800bd02 <lsm6dsox_config_gyro+0xae>
            return STATUS_ERROR;
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	e00a      	b.n	800bd0a <lsm6dsox_config_gyro+0xb6>
        }
    } else {
        if (!(rx_buf & 0x02)) {
 800bcf4:	7afb      	ldrb	r3, [r7, #11]
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <lsm6dsox_config_gyro+0xae>
            return STATUS_ERROR;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e003      	b.n	800bd0a <lsm6dsox_config_gyro+0xb6>
        }
    }

    g_current_gyro_range = range;
 800bd02:	4a04      	ldr	r2, [pc, #16]	; (800bd14 <lsm6dsox_config_gyro+0xc0>)
 800bd04:	78bb      	ldrb	r3, [r7, #2]
 800bd06:	7013      	strb	r3, [r2, #0]

    return STATUS_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20000649 	.word	0x20000649

0800bd18 <ms5637_init>:
I2cDevice *device;
CalibrationData data;

uint8_t conversion_delay_ms[] = {1, 2, 3, 5, 9, 17};

Status ms5637_init(I2cDevice* device) {
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    uint8_t rx_buf[2];
    uint8_t tx_buf[1] = {0x1E};
 800bd20:	231e      	movs	r3, #30
 800bd22:	723b      	strb	r3, [r7, #8]

    // Send Reset Command
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bd24:	f107 0308 	add.w	r3, r7, #8
 800bd28:	2201      	movs	r2, #1
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7f6 fa41 	bl	80021b4 <i2c_write>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <ms5637_init+0x24>
        return STATUS_ERROR;
 800bd38:	2302      	movs	r3, #2
 800bd3a:	e0d8      	b.n	800beee <ms5637_init+0x1d6>
    };

    // Read Constants
    // Read C1
    tx_buf[0] = 0xA0 | (1 << 1);
 800bd3c:	23a2      	movs	r3, #162	; 0xa2
 800bd3e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bd40:	f107 0308 	add.w	r3, r7, #8
 800bd44:	2201      	movs	r2, #1
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7f6 fa33 	bl	80021b4 <i2c_write>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <ms5637_init+0x40>
        return STATUS_ERROR;
 800bd54:	2302      	movs	r3, #2
 800bd56:	e0ca      	b.n	800beee <ms5637_init+0x1d6>
    };
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800bd58:	f107 030c 	add.w	r3, r7, #12
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7f6 fa53 	bl	800220c <i2c_read>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <ms5637_init+0x58>
        return STATUS_ERROR;
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e0be      	b.n	800beee <ms5637_init+0x1d6>
    };
    data.C1 = ((uint16_t)rx_buf[0] << 8) | rx_buf[1];
 800bd70:	7b3b      	ldrb	r3, [r7, #12]
 800bd72:	021b      	lsls	r3, r3, #8
 800bd74:	b21a      	sxth	r2, r3
 800bd76:	7b7b      	ldrb	r3, [r7, #13]
 800bd78:	b21b      	sxth	r3, r3
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	b21b      	sxth	r3, r3
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	4b5d      	ldr	r3, [pc, #372]	; (800bef8 <ms5637_init+0x1e0>)
 800bd82:	801a      	strh	r2, [r3, #0]

    // Read C2
    tx_buf[0] = 0xA0 | (2 << 1);
 800bd84:	23a4      	movs	r3, #164	; 0xa4
 800bd86:	723b      	strb	r3, [r7, #8]
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bd88:	f107 0308 	add.w	r3, r7, #8
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7f6 fa0f 	bl	80021b4 <i2c_write>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <ms5637_init+0x88>
        return STATUS_ERROR;
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	e0a6      	b.n	800beee <ms5637_init+0x1d6>
    };
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800bda0:	f107 030c 	add.w	r3, r7, #12
 800bda4:	2202      	movs	r2, #2
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7f6 fa2f 	bl	800220c <i2c_read>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <ms5637_init+0xa0>
        return STATUS_ERROR;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	e09a      	b.n	800beee <ms5637_init+0x1d6>
    };
    data.C2 = ((uint16_t)rx_buf[0] << 8) | rx_buf[1];
 800bdb8:	7b3b      	ldrb	r3, [r7, #12]
 800bdba:	021b      	lsls	r3, r3, #8
 800bdbc:	b21a      	sxth	r2, r3
 800bdbe:	7b7b      	ldrb	r3, [r7, #13]
 800bdc0:	b21b      	sxth	r3, r3
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	b21b      	sxth	r3, r3
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	4b4b      	ldr	r3, [pc, #300]	; (800bef8 <ms5637_init+0x1e0>)
 800bdca:	805a      	strh	r2, [r3, #2]

    // Read C3
    tx_buf[0] = 0xA0 | (3 << 1);
 800bdcc:	23a6      	movs	r3, #166	; 0xa6
 800bdce:	723b      	strb	r3, [r7, #8]
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bdd0:	f107 0308 	add.w	r3, r7, #8
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7f6 f9eb 	bl	80021b4 <i2c_write>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <ms5637_init+0xd0>
        return STATUS_ERROR;
 800bde4:	2302      	movs	r3, #2
 800bde6:	e082      	b.n	800beee <ms5637_init+0x1d6>
    };
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800bde8:	f107 030c 	add.w	r3, r7, #12
 800bdec:	2202      	movs	r2, #2
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7f6 fa0b 	bl	800220c <i2c_read>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <ms5637_init+0xe8>
        return STATUS_ERROR;
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	e076      	b.n	800beee <ms5637_init+0x1d6>
    };
    data.C3 = ((uint16_t)rx_buf[0] << 8) | rx_buf[1];
 800be00:	7b3b      	ldrb	r3, [r7, #12]
 800be02:	021b      	lsls	r3, r3, #8
 800be04:	b21a      	sxth	r2, r3
 800be06:	7b7b      	ldrb	r3, [r7, #13]
 800be08:	b21b      	sxth	r3, r3
 800be0a:	4313      	orrs	r3, r2
 800be0c:	b21b      	sxth	r3, r3
 800be0e:	b29a      	uxth	r2, r3
 800be10:	4b39      	ldr	r3, [pc, #228]	; (800bef8 <ms5637_init+0x1e0>)
 800be12:	809a      	strh	r2, [r3, #4]

    // Read C4
    tx_buf[0] = 0xA0 | (4 << 1);
 800be14:	23a8      	movs	r3, #168	; 0xa8
 800be16:	723b      	strb	r3, [r7, #8]
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800be18:	f107 0308 	add.w	r3, r7, #8
 800be1c:	2201      	movs	r2, #1
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7f6 f9c7 	bl	80021b4 <i2c_write>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <ms5637_init+0x118>
        return STATUS_ERROR;
 800be2c:	2302      	movs	r3, #2
 800be2e:	e05e      	b.n	800beee <ms5637_init+0x1d6>
    };
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800be30:	f107 030c 	add.w	r3, r7, #12
 800be34:	2202      	movs	r2, #2
 800be36:	4619      	mov	r1, r3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7f6 f9e7 	bl	800220c <i2c_read>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <ms5637_init+0x130>
        return STATUS_ERROR;
 800be44:	2302      	movs	r3, #2
 800be46:	e052      	b.n	800beee <ms5637_init+0x1d6>
    };
    data.C4 = ((uint16_t)rx_buf[0] << 8) | rx_buf[1];
 800be48:	7b3b      	ldrb	r3, [r7, #12]
 800be4a:	021b      	lsls	r3, r3, #8
 800be4c:	b21a      	sxth	r2, r3
 800be4e:	7b7b      	ldrb	r3, [r7, #13]
 800be50:	b21b      	sxth	r3, r3
 800be52:	4313      	orrs	r3, r2
 800be54:	b21b      	sxth	r3, r3
 800be56:	b29a      	uxth	r2, r3
 800be58:	4b27      	ldr	r3, [pc, #156]	; (800bef8 <ms5637_init+0x1e0>)
 800be5a:	80da      	strh	r2, [r3, #6]

    // Read C5
    tx_buf[0] = 0xA0 | (5 << 1);
 800be5c:	23aa      	movs	r3, #170	; 0xaa
 800be5e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800be60:	f107 0308 	add.w	r3, r7, #8
 800be64:	2201      	movs	r2, #1
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7f6 f9a3 	bl	80021b4 <i2c_write>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <ms5637_init+0x160>
        return STATUS_ERROR;
 800be74:	2302      	movs	r3, #2
 800be76:	e03a      	b.n	800beee <ms5637_init+0x1d6>
    };
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800be78:	f107 030c 	add.w	r3, r7, #12
 800be7c:	2202      	movs	r2, #2
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7f6 f9c3 	bl	800220c <i2c_read>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <ms5637_init+0x178>
        return STATUS_ERROR;
 800be8c:	2302      	movs	r3, #2
 800be8e:	e02e      	b.n	800beee <ms5637_init+0x1d6>
    };
    data.C5 = ((uint16_t)rx_buf[0] << 8) | rx_buf[1];
 800be90:	7b3b      	ldrb	r3, [r7, #12]
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	b21a      	sxth	r2, r3
 800be96:	7b7b      	ldrb	r3, [r7, #13]
 800be98:	b21b      	sxth	r3, r3
 800be9a:	4313      	orrs	r3, r2
 800be9c:	b21b      	sxth	r3, r3
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	4b15      	ldr	r3, [pc, #84]	; (800bef8 <ms5637_init+0x1e0>)
 800bea2:	811a      	strh	r2, [r3, #8]

    // Read C6
    tx_buf[0] = 0xA0 | (6 << 1);
 800bea4:	23ac      	movs	r3, #172	; 0xac
 800bea6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bea8:	f107 0308 	add.w	r3, r7, #8
 800beac:	2201      	movs	r2, #1
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7f6 f97f 	bl	80021b4 <i2c_write>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <ms5637_init+0x1a8>
        return STATUS_ERROR;
 800bebc:	2302      	movs	r3, #2
 800bebe:	e016      	b.n	800beee <ms5637_init+0x1d6>
    };
    if (i2c_read(device, rx_buf, 2) != STATUS_OK) {
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	2202      	movs	r2, #2
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7f6 f99f 	bl	800220c <i2c_read>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <ms5637_init+0x1c0>
        return STATUS_ERROR;
 800bed4:	2302      	movs	r3, #2
 800bed6:	e00a      	b.n	800beee <ms5637_init+0x1d6>
    };
    data.C6 = ((uint16_t)rx_buf[0] << 8) | rx_buf[1];
 800bed8:	7b3b      	ldrb	r3, [r7, #12]
 800beda:	021b      	lsls	r3, r3, #8
 800bedc:	b21a      	sxth	r2, r3
 800bede:	7b7b      	ldrb	r3, [r7, #13]
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	4313      	orrs	r3, r2
 800bee4:	b21b      	sxth	r3, r3
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	4b03      	ldr	r3, [pc, #12]	; (800bef8 <ms5637_init+0x1e0>)
 800beea:	815a      	strh	r2, [r3, #10]

    return STATUS_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20006d14 	.word	0x20006d14

0800befc <read_D1>:

static uint32_t read_D1(I2cDevice* device, AdcSpeed speed) {
 800befc:	b5b0      	push	{r4, r5, r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	460b      	mov	r3, r1
 800bf06:	70fb      	strb	r3, [r7, #3]
    uint32_t D1 = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	617b      	str	r3, [r7, #20]
    uint8_t rx_buf[3];
    uint8_t tx_buf[1] = {0x40 | speed};
 800bf0c:	78fb      	ldrb	r3, [r7, #3]
 800bf0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	733b      	strb	r3, [r7, #12]
    // Start ADC conversion
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bf16:	f107 030c 	add.w	r3, r7, #12
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7f6 f948 	bl	80021b4 <i2c_write>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d002      	beq.n	800bf30 <read_D1+0x34>
        return D_READ_ERROR;
 800bf2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2e:	e036      	b.n	800bf9e <read_D1+0xa2>
    }
    DELAY(conversion_delay_ms[speed / 2] + 1);
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	085b      	lsrs	r3, r3, #1
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	461a      	mov	r2, r3
 800bf38:	4b1b      	ldr	r3, [pc, #108]	; (800bfa8 <read_D1+0xac>)
 800bf3a:	5c9b      	ldrb	r3, [r3, r2]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	17da      	asrs	r2, r3, #31
 800bf40:	461c      	mov	r4, r3
 800bf42:	4615      	mov	r5, r2
 800bf44:	4620      	mov	r0, r4
 800bf46:	4629      	mov	r1, r5
 800bf48:	f7f6 f809 	bl	8001f5e <DELAY>
    tx_buf[0] = 0x00;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	733b      	strb	r3, [r7, #12]
    while (!D1) {
 800bf50:	e021      	b.n	800bf96 <read_D1+0x9a>
        // Send ADC read command
        if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bf52:	f107 030c 	add.w	r3, r7, #12
 800bf56:	2201      	movs	r2, #1
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7f6 f92a 	bl	80021b4 <i2c_write>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <read_D1+0x70>
            return D_READ_ERROR;
 800bf66:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6a:	e018      	b.n	800bf9e <read_D1+0xa2>
        }
        if (i2c_read(device, rx_buf, 3) != STATUS_OK) {
 800bf6c:	f107 0310 	add.w	r3, r7, #16
 800bf70:	2203      	movs	r2, #3
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7f6 f949 	bl	800220c <i2c_read>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <read_D1+0x8a>
            return D_READ_ERROR;
 800bf80:	f04f 33ff 	mov.w	r3, #4294967295
 800bf84:	e00b      	b.n	800bf9e <read_D1+0xa2>
        }
        D1 = ((uint32_t)rx_buf[0] << 16) | ((uint32_t)rx_buf[1] << 8) |
 800bf86:	7c3b      	ldrb	r3, [r7, #16]
 800bf88:	041a      	lsls	r2, r3, #16
 800bf8a:	7c7b      	ldrb	r3, [r7, #17]
 800bf8c:	021b      	lsls	r3, r3, #8
 800bf8e:	4313      	orrs	r3, r2
             rx_buf[2];
 800bf90:	7cba      	ldrb	r2, [r7, #18]
        D1 = ((uint32_t)rx_buf[0] << 16) | ((uint32_t)rx_buf[1] << 8) |
 800bf92:	4313      	orrs	r3, r2
 800bf94:	617b      	str	r3, [r7, #20]
    while (!D1) {
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0da      	beq.n	800bf52 <read_D1+0x56>
    }
    return D1;
 800bf9c:	697b      	ldr	r3, [r7, #20]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bdb0      	pop	{r4, r5, r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	2000064c 	.word	0x2000064c

0800bfac <read_D2>:

static uint32_t read_D2(I2cDevice* device, AdcSpeed speed) {
 800bfac:	b5b0      	push	{r4, r5, r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
    uint32_t D2 = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	617b      	str	r3, [r7, #20]
    uint8_t rx_buf[3];
    uint8_t tx_buf[1] = {0x50 | speed};
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	733b      	strb	r3, [r7, #12]
    // Start ADC conversion
    if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800bfc6:	f107 030c 	add.w	r3, r7, #12
 800bfca:	2201      	movs	r2, #1
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7f6 f8f0 	bl	80021b4 <i2c_write>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <read_D2+0x34>
        return D_READ_ERROR;
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	e036      	b.n	800c04e <read_D2+0xa2>
    }
    DELAY(conversion_delay_ms[speed / 2] + 1);
 800bfe0:	78fb      	ldrb	r3, [r7, #3]
 800bfe2:	085b      	lsrs	r3, r3, #1
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	4b1b      	ldr	r3, [pc, #108]	; (800c058 <read_D2+0xac>)
 800bfea:	5c9b      	ldrb	r3, [r3, r2]
 800bfec:	3301      	adds	r3, #1
 800bfee:	17da      	asrs	r2, r3, #31
 800bff0:	461c      	mov	r4, r3
 800bff2:	4615      	mov	r5, r2
 800bff4:	4620      	mov	r0, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	f7f5 ffb1 	bl	8001f5e <DELAY>
    tx_buf[0] = 0x00;
 800bffc:	2300      	movs	r3, #0
 800bffe:	733b      	strb	r3, [r7, #12]
    while (!D2) {
 800c000:	e021      	b.n	800c046 <read_D2+0x9a>
        // Send ADC read command
        if (i2c_write(device, tx_buf, 1) != STATUS_OK) {
 800c002:	f107 030c 	add.w	r3, r7, #12
 800c006:	2201      	movs	r2, #1
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7f6 f8d2 	bl	80021b4 <i2c_write>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d002      	beq.n	800c01c <read_D2+0x70>
            return D_READ_ERROR;
 800c016:	f04f 33ff 	mov.w	r3, #4294967295
 800c01a:	e018      	b.n	800c04e <read_D2+0xa2>
        }
        if (i2c_read(device, rx_buf, 3) != STATUS_OK) {
 800c01c:	f107 0310 	add.w	r3, r7, #16
 800c020:	2203      	movs	r2, #3
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7f6 f8f1 	bl	800220c <i2c_read>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <read_D2+0x8a>
            return D_READ_ERROR;
 800c030:	f04f 33ff 	mov.w	r3, #4294967295
 800c034:	e00b      	b.n	800c04e <read_D2+0xa2>
        }
        D2 = ((uint32_t)rx_buf[0] << 16) | ((uint32_t)rx_buf[1] << 8) |
 800c036:	7c3b      	ldrb	r3, [r7, #16]
 800c038:	041a      	lsls	r2, r3, #16
 800c03a:	7c7b      	ldrb	r3, [r7, #17]
 800c03c:	021b      	lsls	r3, r3, #8
 800c03e:	4313      	orrs	r3, r2
             rx_buf[2];
 800c040:	7cba      	ldrb	r2, [r7, #18]
        D2 = ((uint32_t)rx_buf[0] << 16) | ((uint32_t)rx_buf[1] << 8) |
 800c042:	4313      	orrs	r3, r2
 800c044:	617b      	str	r3, [r7, #20]
    while (!D2) {
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0da      	beq.n	800c002 <read_D2+0x56>
    }
    return D2;
 800c04c:	697b      	ldr	r3, [r7, #20]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bdb0      	pop	{r4, r5, r7, pc}
 800c056:	bf00      	nop
 800c058:	2000064c 	.word	0x2000064c

0800c05c <ms5637_read>:

BaroData ms5637_read(I2cDevice* device, AdcSpeed speed) {
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800c064:	af00      	add	r7, sp, #0
 800c066:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 800c06a:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 800c06e:	4613      	mov	r3, r2
 800c070:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
    BaroData result;
    result.pressure = NAN;
 800c074:	4b1a      	ldr	r3, [pc, #104]	; (800c0e0 <ms5637_read+0x84>)
 800c076:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    result.temperature = NAN;
 800c07a:	4b19      	ldr	r3, [pc, #100]	; (800c0e0 <ms5637_read+0x84>)
 800c07c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    uint32_t D1;
    uint32_t D2;

    if ((D1 = read_D1(device, speed)) == D_READ_ERROR) {
 800c080:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800c084:	4619      	mov	r1, r3
 800c086:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 800c08a:	f7ff ff37 	bl	800befc <read_D1>
 800c08e:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
 800c092:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09a:	d109      	bne.n	800c0b0 <ms5637_read+0x54>
        return result;
 800c09c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800c0a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0aa:	e882 0003 	stmia.w	r2, {r0, r1}
 800c0ae:	e3f0      	b.n	800c892 <ms5637_read+0x836>
    }
    if ((D2 = read_D2(device, speed)) == D_READ_ERROR) {
 800c0b0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 800c0ba:	f7ff ff77 	bl	800bfac <read_D2>
 800c0be:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
 800c0c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d10b      	bne.n	800c0e4 <ms5637_read+0x88>
        return result;
 800c0cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800c0d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0da:	e882 0003 	stmia.w	r2, {r0, r1}
 800c0de:	e3d8      	b.n	800c892 <ms5637_read+0x836>
 800c0e0:	7fc00000 	.word	0x7fc00000
    }
    int32_t dT = D2 - (data.C5 * 256);
 800c0e4:	4bc5      	ldr	r3, [pc, #788]	; (800c3fc <ms5637_read+0x3a0>)
 800c0e6:	891b      	ldrh	r3, [r3, #8]
 800c0e8:	021b      	lsls	r3, r3, #8
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c0f0:	1a9b      	subs	r3, r3, r2
 800c0f2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    int32_t TEMP = (int32_t)(2000 + (dT * ((float)data.C6 / 8388608)));
 800c0f6:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800c0fa:	f7f4 fe37 	bl	8000d6c <__aeabi_i2f>
 800c0fe:	4606      	mov	r6, r0
 800c100:	4bbe      	ldr	r3, [pc, #760]	; (800c3fc <ms5637_read+0x3a0>)
 800c102:	895b      	ldrh	r3, [r3, #10]
 800c104:	4618      	mov	r0, r3
 800c106:	f7f4 fe2d 	bl	8000d64 <__aeabi_ui2f>
 800c10a:	4603      	mov	r3, r0
 800c10c:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800c110:	4618      	mov	r0, r3
 800c112:	f7f4 ff33 	bl	8000f7c <__aeabi_fdiv>
 800c116:	4603      	mov	r3, r0
 800c118:	4619      	mov	r1, r3
 800c11a:	4630      	mov	r0, r6
 800c11c:	f7f4 fe7a 	bl	8000e14 <__aeabi_fmul>
 800c120:	4603      	mov	r3, r0
 800c122:	49b7      	ldr	r1, [pc, #732]	; (800c400 <ms5637_read+0x3a4>)
 800c124:	4618      	mov	r0, r3
 800c126:	f7f4 fd6d 	bl	8000c04 <__addsf3>
 800c12a:	4603      	mov	r3, r0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f5 f84d 	bl	80011cc <__aeabi_f2iz>
 800c132:	4603      	mov	r3, r0
 800c134:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    int64_t OFF = ((int64_t)data.C2 << 17) + (((int64_t)data.C4 * dT) >> 6);
 800c138:	4bb0      	ldr	r3, [pc, #704]	; (800c3fc <ms5637_read+0x3a0>)
 800c13a:	885b      	ldrh	r3, [r3, #2]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	2200      	movs	r2, #0
 800c140:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800c144:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800c148:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	; 0x160
 800c14c:	460b      	mov	r3, r1
 800c14e:	0bdb      	lsrs	r3, r3, #15
 800c150:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800c154:	460b      	mov	r3, r1
 800c156:	045b      	lsls	r3, r3, #17
 800c158:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800c15c:	4ba7      	ldr	r3, [pc, #668]	; (800c3fc <ms5637_read+0x3a0>)
 800c15e:	88db      	ldrh	r3, [r3, #6]
 800c160:	b29b      	uxth	r3, r3
 800c162:	2200      	movs	r2, #0
 800c164:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c168:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800c16c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800c170:	17da      	asrs	r2, r3, #31
 800c172:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800c176:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800c17a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c17e:	460b      	mov	r3, r1
 800c180:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800c184:	fb02 f203 	mul.w	r2, r2, r3
 800c188:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800c18c:	4606      	mov	r6, r0
 800c18e:	fb06 f303 	mul.w	r3, r6, r3
 800c192:	4413      	add	r3, r2
 800c194:	4602      	mov	r2, r0
 800c196:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800c19a:	fba2 4501 	umull	r4, r5, r2, r1
 800c19e:	442b      	add	r3, r5
 800c1a0:	461d      	mov	r5, r3
 800c1a2:	f04f 0200 	mov.w	r2, #0
 800c1a6:	f04f 0300 	mov.w	r3, #0
 800c1aa:	09a2      	lsrs	r2, r4, #6
 800c1ac:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800c1b0:	11ab      	asrs	r3, r5, #6
 800c1b2:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	1889      	adds	r1, r1, r2
 800c1ba:	64b9      	str	r1, [r7, #72]	; 0x48
 800c1bc:	4629      	mov	r1, r5
 800c1be:	eb43 0101 	adc.w	r1, r3, r1
 800c1c2:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c1c4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c1c8:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
    int64_t SENS = ((int64_t)data.C1 << 16) + (((int64_t)data.C3 * dT) >> 7);
 800c1cc:	4b8b      	ldr	r3, [pc, #556]	; (800c3fc <ms5637_read+0x3a0>)
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c1d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800c1dc:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	; 0x148
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	0c1b      	lsrs	r3, r3, #16
 800c1e4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	041b      	lsls	r3, r3, #16
 800c1ec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800c1f0:	4b82      	ldr	r3, [pc, #520]	; (800c3fc <ms5637_read+0x3a0>)
 800c1f2:	889b      	ldrh	r3, [r3, #4]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800c1fc:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800c200:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800c204:	17da      	asrs	r2, r3, #31
 800c206:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800c20a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800c20e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800c212:	4622      	mov	r2, r4
 800c214:	e9d7 564c 	ldrd	r5, r6, [r7, #304]	; 0x130
 800c218:	4629      	mov	r1, r5
 800c21a:	fb01 f202 	mul.w	r2, r1, r2
 800c21e:	46b4      	mov	ip, r6
 800c220:	4618      	mov	r0, r3
 800c222:	4621      	mov	r1, r4
 800c224:	4603      	mov	r3, r0
 800c226:	fb03 f30c 	mul.w	r3, r3, ip
 800c22a:	4413      	add	r3, r2
 800c22c:	4602      	mov	r2, r0
 800c22e:	4629      	mov	r1, r5
 800c230:	fba2 ab01 	umull	sl, fp, r2, r1
 800c234:	445b      	add	r3, fp
 800c236:	469b      	mov	fp, r3
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	f04f 0300 	mov.w	r3, #0
 800c240:	ea4f 12da 	mov.w	r2, sl, lsr #7
 800c244:	ea42 624b 	orr.w	r2, r2, fp, lsl #25
 800c248:	ea4f 13eb 	mov.w	r3, fp, asr #7
 800c24c:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800c250:	4621      	mov	r1, r4
 800c252:	1889      	adds	r1, r1, r2
 800c254:	6439      	str	r1, [r7, #64]	; 0x40
 800c256:	4629      	mov	r1, r5
 800c258:	eb43 0101 	adc.w	r1, r3, r1
 800c25c:	6479      	str	r1, [r7, #68]	; 0x44
 800c25e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c262:	e9c7 3472 	strd	r3, r4, [r7, #456]	; 0x1c8
    int32_t T2;
    int64_t OFF2;
    int64_t SENS2;
    if (TEMP < 2000) {
 800c266:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c26a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c26e:	f280 8235 	bge.w	800c6dc <ms5637_read+0x680>
        T2 = 3 * ((int64_t)dT * (int64_t)dT) >> 33;
 800c272:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800c276:	17da      	asrs	r2, r3, #31
 800c278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c27c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800c280:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800c284:	17da      	asrs	r2, r3, #31
 800c286:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c28a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800c28e:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800c292:	4622      	mov	r2, r4
 800c294:	e9d7 5648 	ldrd	r5, r6, [r7, #288]	; 0x120
 800c298:	4629      	mov	r1, r5
 800c29a:	fb01 f202 	mul.w	r2, r1, r2
 800c29e:	46b4      	mov	ip, r6
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	fb03 f30c 	mul.w	r3, r3, ip
 800c2aa:	4413      	add	r3, r2
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	fba2 2101 	umull	r2, r1, r2, r1
 800c2b4:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 800c2b8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800c2bc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800c2c6:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800c2ca:	4622      	mov	r2, r4
 800c2cc:	462b      	mov	r3, r5
 800c2ce:	1891      	adds	r1, r2, r2
 800c2d0:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2d2:	415b      	adcs	r3, r3
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2da:	4621      	mov	r1, r4
 800c2dc:	1851      	adds	r1, r2, r1
 800c2de:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	eb43 0101 	adc.w	r1, r3, r1
 800c2e8:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800c2ec:	f04f 0200 	mov.w	r2, #0
 800c2f0:	f04f 0300 	mov.w	r3, #0
 800c2f4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	104a      	asrs	r2, r1, #1
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	17cb      	asrs	r3, r1, #31
 800c300:	4613      	mov	r3, r2
 800c302:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16;
 800c306:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c30a:	17da      	asrs	r2, r3, #31
 800c30c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c310:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800c314:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800c318:	461a      	mov	r2, r3
 800c31a:	f5b2 62fa 	subs.w	r2, r2, #2000	; 0x7d0
 800c31e:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800c322:	4623      	mov	r3, r4
 800c324:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c328:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c32c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c330:	17da      	asrs	r2, r3, #31
 800c332:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c336:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c33a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800c33e:	461a      	mov	r2, r3
 800c340:	f5b2 62fa 	subs.w	r2, r2, #2000	; 0x7d0
 800c344:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800c348:	4623      	mov	r3, r4
 800c34a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c34e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c352:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800c356:	4622      	mov	r2, r4
 800c358:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	; 0xf8
 800c35c:	4629      	mov	r1, r5
 800c35e:	fb01 f202 	mul.w	r2, r1, r2
 800c362:	46b4      	mov	ip, r6
 800c364:	4618      	mov	r0, r3
 800c366:	4621      	mov	r1, r4
 800c368:	4603      	mov	r3, r0
 800c36a:	fb03 f30c 	mul.w	r3, r3, ip
 800c36e:	4413      	add	r3, r2
 800c370:	4602      	mov	r2, r0
 800c372:	4629      	mov	r1, r5
 800c374:	fba2 2101 	umull	r2, r1, r2, r1
 800c378:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 800c37c:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 800c380:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800c384:	4413      	add	r3, r2
 800c386:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800c38a:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 800c38e:	4622      	mov	r2, r4
 800c390:	462b      	mov	r3, r5
 800c392:	f04f 0000 	mov.w	r0, #0
 800c396:	f04f 0100 	mov.w	r1, #0
 800c39a:	0119      	lsls	r1, r3, #4
 800c39c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800c3a0:	0110      	lsls	r0, r2, #4
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	ebb2 0804 	subs.w	r8, r2, r4
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	eb63 0904 	sbc.w	r9, r3, r4
 800c3b6:	f04f 0200 	mov.w	r2, #0
 800c3ba:	f04f 0300 	mov.w	r3, #0
 800c3be:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c3c2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c3c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c3ca:	4690      	mov	r8, r2
 800c3cc:	4699      	mov	r9, r3
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	eb18 0303 	adds.w	r3, r8, r3
 800c3d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	eb49 0303 	adc.w	r3, r9, r3
 800c3de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c3e2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	da0c      	bge.n	800c404 <ms5637_read+0x3a8>
 800c3ea:	f112 010f 	adds.w	r1, r2, #15
 800c3ee:	6339      	str	r1, [r7, #48]	; 0x30
 800c3f0:	f143 0300 	adc.w	r3, r3, #0
 800c3f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c3fa:	e003      	b.n	800c404 <ms5637_read+0x3a8>
 800c3fc:	20006d14 	.word	0x20006d14
 800c400:	44fa0000 	.word	0x44fa0000
 800c404:	f04f 0000 	mov.w	r0, #0
 800c408:	f04f 0100 	mov.w	r1, #0
 800c40c:	0910      	lsrs	r0, r2, #4
 800c40e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c412:	1119      	asrs	r1, r3, #4
 800c414:	e9c7 017c 	strd	r0, r1, [r7, #496]	; 0x1f0
        SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16;
 800c418:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c41c:	17da      	asrs	r2, r3, #31
 800c41e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c426:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c42a:	461a      	mov	r2, r3
 800c42c:	f5b2 62fa 	subs.w	r2, r2, #2000	; 0x7d0
 800c430:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800c434:	4623      	mov	r3, r4
 800c436:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c43a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c43e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c442:	17da      	asrs	r2, r3, #31
 800c444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c448:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c44c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c450:	461a      	mov	r2, r3
 800c452:	f5b2 62fa 	subs.w	r2, r2, #2000	; 0x7d0
 800c456:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800c45a:	4623      	mov	r3, r4
 800c45c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c460:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c464:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c468:	4622      	mov	r2, r4
 800c46a:	e9d7 5634 	ldrd	r5, r6, [r7, #208]	; 0xd0
 800c46e:	4629      	mov	r1, r5
 800c470:	fb01 f202 	mul.w	r2, r1, r2
 800c474:	46b4      	mov	ip, r6
 800c476:	4618      	mov	r0, r3
 800c478:	4621      	mov	r1, r4
 800c47a:	4603      	mov	r3, r0
 800c47c:	fb03 f30c 	mul.w	r3, r3, ip
 800c480:	4413      	add	r3, r2
 800c482:	4602      	mov	r2, r0
 800c484:	4629      	mov	r1, r5
 800c486:	fba2 2101 	umull	r2, r1, r2, r1
 800c48a:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 800c48e:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800c492:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800c496:	4413      	add	r3, r2
 800c498:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800c49c:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	f04f 0000 	mov.w	r0, #0
 800c4a8:	f04f 0100 	mov.w	r1, #0
 800c4ac:	00d9      	lsls	r1, r3, #3
 800c4ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c4b2:	00d0      	lsls	r0, r2, #3
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	1a51      	subs	r1, r2, r1
 800c4bc:	62b9      	str	r1, [r7, #40]	; 0x28
 800c4be:	4629      	mov	r1, r5
 800c4c0:	eb63 0301 	sbc.w	r3, r3, r1
 800c4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4c6:	f04f 0200 	mov.w	r2, #0
 800c4ca:	f04f 0300 	mov.w	r3, #0
 800c4ce:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c4d2:	4649      	mov	r1, r9
 800c4d4:	008b      	lsls	r3, r1, #2
 800c4d6:	4646      	mov	r6, r8
 800c4d8:	ea43 7396 	orr.w	r3, r3, r6, lsr #30
 800c4dc:	4641      	mov	r1, r8
 800c4de:	008a      	lsls	r2, r1, #2
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	189b      	adds	r3, r3, r2
 800c4ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c4ee:	462b      	mov	r3, r5
 800c4f0:	460a      	mov	r2, r1
 800c4f2:	eb42 0303 	adc.w	r3, r2, r3
 800c4f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c4fa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	da07      	bge.n	800c512 <ms5637_read+0x4b6>
 800c502:	f112 010f 	adds.w	r1, r2, #15
 800c506:	6239      	str	r1, [r7, #32]
 800c508:	f143 0300 	adc.w	r3, r3, #0
 800c50c:	627b      	str	r3, [r7, #36]	; 0x24
 800c50e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f04f 0100 	mov.w	r1, #0
 800c51a:	0910      	lsrs	r0, r2, #4
 800c51c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c520:	1119      	asrs	r1, r3, #4
 800c522:	e9c7 017a 	strd	r0, r1, [r7, #488]	; 0x1e8
        if (TEMP < -1500) {
 800c526:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800c52a:	4b6b      	ldr	r3, [pc, #428]	; (800c6d8 <ms5637_read+0x67c>)
 800c52c:	429a      	cmp	r2, r3
 800c52e:	f280 8129 	bge.w	800c784 <ms5637_read+0x728>
            OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500);
 800c532:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c536:	17da      	asrs	r2, r3, #31
 800c538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c53c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c540:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c544:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c548:	4602      	mov	r2, r0
 800c54a:	18d3      	adds	r3, r2, r3
 800c54c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c550:	460b      	mov	r3, r1
 800c552:	f143 0300 	adc.w	r3, r3, #0
 800c556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c55a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c55e:	17da      	asrs	r2, r3, #31
 800c560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c564:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c568:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c56c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c570:	4602      	mov	r2, r0
 800c572:	18d3      	adds	r3, r2, r3
 800c574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c578:	460b      	mov	r3, r1
 800c57a:	f143 0300 	adc.w	r3, r3, #0
 800c57e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c582:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800c586:	4622      	mov	r2, r4
 800c588:	e9d7 562a 	ldrd	r5, r6, [r7, #168]	; 0xa8
 800c58c:	4629      	mov	r1, r5
 800c58e:	fb01 f202 	mul.w	r2, r1, r2
 800c592:	46b4      	mov	ip, r6
 800c594:	4618      	mov	r0, r3
 800c596:	4621      	mov	r1, r4
 800c598:	4603      	mov	r3, r0
 800c59a:	fb03 f30c 	mul.w	r3, r3, ip
 800c59e:	4413      	add	r3, r2
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	fba2 2101 	umull	r2, r1, r2, r1
 800c5a8:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 800c5ac:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800c5b0:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800c5ba:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800c5be:	4622      	mov	r2, r4
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	f04f 0000 	mov.w	r0, #0
 800c5c6:	f04f 0100 	mov.w	r1, #0
 800c5ca:	0119      	lsls	r1, r3, #4
 800c5cc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800c5d0:	0110      	lsls	r0, r2, #4
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	1851      	adds	r1, r2, r1
 800c5da:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800c5de:	4629      	mov	r1, r5
 800c5e0:	eb43 0101 	adc.w	r1, r3, r1
 800c5e4:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800c5e8:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800c5ec:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	1851      	adds	r1, r2, r1
 800c5f4:	61b9      	str	r1, [r7, #24]
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	eb43 0101 	adc.w	r1, r3, r1
 800c5fc:	61f9      	str	r1, [r7, #28]
 800c5fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c602:	e9c7 347c 	strd	r3, r4, [r7, #496]	; 0x1f0
            SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500);
 800c606:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c60a:	17da      	asrs	r2, r3, #31
 800c60c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c610:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c614:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c61c:	4602      	mov	r2, r0
 800c61e:	18d3      	adds	r3, r2, r3
 800c620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c624:	460b      	mov	r3, r1
 800c626:	f143 0300 	adc.w	r3, r3, #0
 800c62a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c62e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800c632:	17da      	asrs	r2, r3, #31
 800c634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c638:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c63c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c640:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800c644:	4602      	mov	r2, r0
 800c646:	18d3      	adds	r3, r2, r3
 800c648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c64c:	460b      	mov	r3, r1
 800c64e:	f143 0300 	adc.w	r3, r3, #0
 800c652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c656:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c65a:	4622      	mov	r2, r4
 800c65c:	e9d7 5620 	ldrd	r5, r6, [r7, #128]	; 0x80
 800c660:	4629      	mov	r1, r5
 800c662:	fb01 f202 	mul.w	r2, r1, r2
 800c666:	46b4      	mov	ip, r6
 800c668:	4618      	mov	r0, r3
 800c66a:	4621      	mov	r1, r4
 800c66c:	4603      	mov	r3, r0
 800c66e:	fb03 f30c 	mul.w	r3, r3, ip
 800c672:	4413      	add	r3, r2
 800c674:	4602      	mov	r2, r0
 800c676:	4629      	mov	r1, r5
 800c678:	fba2 2101 	umull	r2, r1, r2, r1
 800c67c:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 800c680:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800c684:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800c688:	4413      	add	r3, r2
 800c68a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c68e:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800c692:	4622      	mov	r2, r4
 800c694:	462b      	mov	r3, r5
 800c696:	f04f 0000 	mov.w	r0, #0
 800c69a:	f04f 0100 	mov.w	r1, #0
 800c69e:	00d9      	lsls	r1, r3, #3
 800c6a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c6a4:	00d0      	lsls	r0, r2, #3
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	1851      	adds	r1, r2, r1
 800c6ae:	67b9      	str	r1, [r7, #120]	; 0x78
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	eb43 0101 	adc.w	r1, r3, r1
 800c6b6:	67f9      	str	r1, [r7, #124]	; 0x7c
 800c6b8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800c6bc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	1851      	adds	r1, r2, r1
 800c6c4:	6139      	str	r1, [r7, #16]
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	eb43 0101 	adc.w	r1, r3, r1
 800c6cc:	6179      	str	r1, [r7, #20]
 800c6ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c6d2:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
 800c6d6:	e055      	b.n	800c784 <ms5637_read+0x728>
 800c6d8:	fffffa24 	.word	0xfffffa24
        }
    } else {
        T2 = (5 * ((int64_t)dT * (int64_t)dT)) >> 38;
 800c6dc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800c6e0:	17da      	asrs	r2, r3, #31
 800c6e2:	673b      	str	r3, [r7, #112]	; 0x70
 800c6e4:	677a      	str	r2, [r7, #116]	; 0x74
 800c6e6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800c6ea:	17da      	asrs	r2, r3, #31
 800c6ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c6f0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	e9d7 561a 	ldrd	r5, r6, [r7, #104]	; 0x68
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	fb01 f202 	mul.w	r2, r1, r2
 800c700:	46b4      	mov	ip, r6
 800c702:	4618      	mov	r0, r3
 800c704:	4621      	mov	r1, r4
 800c706:	4603      	mov	r3, r0
 800c708:	fb03 f30c 	mul.w	r3, r3, ip
 800c70c:	4413      	add	r3, r2
 800c70e:	4602      	mov	r2, r0
 800c710:	4629      	mov	r1, r5
 800c712:	fba2 2101 	umull	r2, r1, r2, r1
 800c716:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 800c71a:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800c71e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800c722:	4413      	add	r3, r2
 800c724:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800c728:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 800c72c:	4622      	mov	r2, r4
 800c72e:	462b      	mov	r3, r5
 800c730:	f04f 0000 	mov.w	r0, #0
 800c734:	f04f 0100 	mov.w	r1, #0
 800c738:	0099      	lsls	r1, r3, #2
 800c73a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c73e:	0090      	lsls	r0, r2, #2
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4621      	mov	r1, r4
 800c746:	1851      	adds	r1, r2, r1
 800c748:	6639      	str	r1, [r7, #96]	; 0x60
 800c74a:	4629      	mov	r1, r5
 800c74c:	eb43 0101 	adc.w	r1, r3, r1
 800c750:	6679      	str	r1, [r7, #100]	; 0x64
 800c752:	f04f 0200 	mov.w	r2, #0
 800c756:	f04f 0300 	mov.w	r3, #0
 800c75a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c75e:	4629      	mov	r1, r5
 800c760:	118a      	asrs	r2, r1, #6
 800c762:	4629      	mov	r1, r5
 800c764:	17cb      	asrs	r3, r1, #31
 800c766:	4613      	mov	r3, r2
 800c768:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        OFF2 = 0;
 800c76c:	f04f 0200 	mov.w	r2, #0
 800c770:	f04f 0300 	mov.w	r3, #0
 800c774:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
        SENS2 = 0;
 800c778:	f04f 0200 	mov.w	r2, #0
 800c77c:	f04f 0300 	mov.w	r3, #0
 800c780:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
    }
    TEMP -= T2;
 800c784:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800c788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    OFF -= OFF2;
 800c792:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800c796:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800c79a:	1a84      	subs	r4, r0, r2
 800c79c:	60bc      	str	r4, [r7, #8]
 800c79e:	eb61 0303 	sbc.w	r3, r1, r3
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c7a8:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
    SENS -= SENS2;
 800c7ac:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800c7b0:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800c7b4:	1a84      	subs	r4, r0, r2
 800c7b6:	603c      	str	r4, [r7, #0]
 800c7b8:	eb61 0303 	sbc.w	r3, r1, r3
 800c7bc:	607b      	str	r3, [r7, #4]
 800c7be:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c7c2:	e9c7 3472 	strd	r3, r4, [r7, #456]	; 0x1c8

    int64_t P = (((D1 * SENS) >> 21) - OFF) >> 15;
 800c7c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c7d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800c7d4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c7d8:	462a      	mov	r2, r5
 800c7da:	fb02 f203 	mul.w	r2, r2, r3
 800c7de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	fb01 f303 	mul.w	r3, r1, r3
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	fba2 2101 	umull	r2, r1, r2, r1
 800c7f4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 800c7f8:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800c7fc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800c800:	4413      	add	r3, r2
 800c802:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800c806:	f04f 0200 	mov.w	r2, #0
 800c80a:	f04f 0300 	mov.w	r3, #0
 800c80e:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 800c812:	4621      	mov	r1, r4
 800c814:	0d4a      	lsrs	r2, r1, #21
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	460c      	mov	r4, r1
 800c81c:	ea42 22c4 	orr.w	r2, r2, r4, lsl #11
 800c820:	154b      	asrs	r3, r1, #21
 800c822:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800c826:	1a14      	subs	r4, r2, r0
 800c828:	653c      	str	r4, [r7, #80]	; 0x50
 800c82a:	eb63 0301 	sbc.w	r3, r3, r1
 800c82e:	657b      	str	r3, [r7, #84]	; 0x54
 800c830:	f04f 0200 	mov.w	r2, #0
 800c834:	f04f 0300 	mov.w	r3, #0
 800c838:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800c83c:	4621      	mov	r1, r4
 800c83e:	0bca      	lsrs	r2, r1, #15
 800c840:	4620      	mov	r0, r4
 800c842:	4629      	mov	r1, r5
 800c844:	460c      	mov	r4, r1
 800c846:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
 800c84a:	13cb      	asrs	r3, r1, #15
 800c84c:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0

    result.pressure = (float)P / 100;
 800c850:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c854:	f7f4 faa0 	bl	8000d98 <__aeabi_l2f>
 800c858:	4603      	mov	r3, r0
 800c85a:	4911      	ldr	r1, [pc, #68]	; (800c8a0 <ms5637_read+0x844>)
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f4 fb8d 	bl	8000f7c <__aeabi_fdiv>
 800c862:	4603      	mov	r3, r0
 800c864:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    result.temperature = (float)TEMP / 100;
 800c868:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 800c86c:	f7f4 fa7e 	bl	8000d6c <__aeabi_i2f>
 800c870:	4603      	mov	r3, r0
 800c872:	490b      	ldr	r1, [pc, #44]	; (800c8a0 <ms5637_read+0x844>)
 800c874:	4618      	mov	r0, r3
 800c876:	f7f4 fb81 	bl	8000f7c <__aeabi_fdiv>
 800c87a:	4603      	mov	r3, r0
 800c87c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    return result;
 800c880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800c884:	461a      	mov	r2, r3
 800c886:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800c88a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c88e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800c892:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 800c896:	f507 7701 	add.w	r7, r7, #516	; 0x204
 800c89a:	46bd      	mov	sp, r7
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	42c80000 	.word	0x42c80000

0800c8a4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800c8ac:	4a18      	ldr	r2, [pc, #96]	; (800c910 <RadioInit+0x6c>)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800c8b2:	4b18      	ldr	r3, [pc, #96]	; (800c914 <RadioInit+0x70>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800c8b8:	4b16      	ldr	r3, [pc, #88]	; (800c914 <RadioInit+0x70>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800c8be:	4b15      	ldr	r3, [pc, #84]	; (800c914 <RadioInit+0x70>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800c8c4:	4b13      	ldr	r3, [pc, #76]	; (800c914 <RadioInit+0x70>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800c8ca:	4813      	ldr	r0, [pc, #76]	; (800c918 <RadioInit+0x74>)
 800c8cc:	f001 ff52 	bl	800e774 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800c8d0:	4b10      	ldr	r3, [pc, #64]	; (800c914 <RadioInit+0x70>)
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800c8d6:	4b0f      	ldr	r3, [pc, #60]	; (800c914 <RadioInit+0x70>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800c8dc:	f002 f9e6 	bl	800ecac <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	f002 fdb2 	bl	800f44c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	f002 fb6f 	bl	800efd0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c8fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c8fe:	f002 fa9f 	bl	800ee40 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800c902:	f000 fe77 	bl	800d5f4 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
    //TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
    //TimerStop( &TxTimeoutTimer );
    //TimerStop( &RxTimeoutTimer );
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20006e20 	.word	0x20006e20
 800c914:	20006e24 	.word	0x20006e24
 800c918:	0800d925 	.word	0x0800d925

0800c91c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800c920:	f001 ff70 	bl	800e804 <SUBGRF_GetOperatingMode>
 800c924:	4603      	mov	r3, r0
 800c926:	2b07      	cmp	r3, #7
 800c928:	d00a      	beq.n	800c940 <RadioGetStatus+0x24>
 800c92a:	2b07      	cmp	r3, #7
 800c92c:	dc0a      	bgt.n	800c944 <RadioGetStatus+0x28>
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d002      	beq.n	800c938 <RadioGetStatus+0x1c>
 800c932:	2b05      	cmp	r3, #5
 800c934:	d002      	beq.n	800c93c <RadioGetStatus+0x20>
 800c936:	e005      	b.n	800c944 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800c938:	2302      	movs	r3, #2
 800c93a:	e004      	b.n	800c946 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e002      	b.n	800c946 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800c940:	2303      	movs	r3, #3
 800c942:	e000      	b.n	800c946 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800c944:	2300      	movs	r3, #0
    }
}
 800c946:	4618      	mov	r0, r3
 800c948:	bd80      	pop	{r7, pc}
	...

0800c94c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	4603      	mov	r3, r0
 800c954:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800c956:	4a2a      	ldr	r2, [pc, #168]	; (800ca00 <RadioSetModem+0xb4>)
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800c95c:	79fb      	ldrb	r3, [r7, #7]
 800c95e:	4618      	mov	r0, r3
 800c960:	f003 f947 	bl	800fbf2 <RFW_SetRadioModem>
    switch( modem )
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	2b05      	cmp	r3, #5
 800c968:	d80e      	bhi.n	800c988 <RadioSetModem+0x3c>
 800c96a:	a201      	add	r2, pc, #4	; (adr r2, 800c970 <RadioSetModem+0x24>)
 800c96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c970:	0800c997 	.word	0x0800c997
 800c974:	0800c9a5 	.word	0x0800c9a5
 800c978:	0800c989 	.word	0x0800c989
 800c97c:	0800c9cb 	.word	0x0800c9cb
 800c980:	0800c9d9 	.word	0x0800c9d9
 800c984:	0800c9e7 	.word	0x0800c9e7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800c988:	2003      	movs	r0, #3
 800c98a:	f002 fafb 	bl	800ef84 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c98e:	4b1c      	ldr	r3, [pc, #112]	; (800ca00 <RadioSetModem+0xb4>)
 800c990:	2200      	movs	r2, #0
 800c992:	735a      	strb	r2, [r3, #13]
        break;
 800c994:	e02f      	b.n	800c9f6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800c996:	2000      	movs	r0, #0
 800c998:	f002 faf4 	bl	800ef84 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c99c:	4b18      	ldr	r3, [pc, #96]	; (800ca00 <RadioSetModem+0xb4>)
 800c99e:	2200      	movs	r2, #0
 800c9a0:	735a      	strb	r2, [r3, #13]
        break;
 800c9a2:	e028      	b.n	800c9f6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800c9a4:	2001      	movs	r0, #1
 800c9a6:	f002 faed 	bl	800ef84 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800c9aa:	4b15      	ldr	r3, [pc, #84]	; (800ca00 <RadioSetModem+0xb4>)
 800c9ac:	7b5a      	ldrb	r2, [r3, #13]
 800c9ae:	4b14      	ldr	r3, [pc, #80]	; (800ca00 <RadioSetModem+0xb4>)
 800c9b0:	7b1b      	ldrb	r3, [r3, #12]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d01e      	beq.n	800c9f4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800c9b6:	4b12      	ldr	r3, [pc, #72]	; (800ca00 <RadioSetModem+0xb4>)
 800c9b8:	7b1a      	ldrb	r2, [r3, #12]
 800c9ba:	4b11      	ldr	r3, [pc, #68]	; (800ca00 <RadioSetModem+0xb4>)
 800c9bc:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800c9be:	4b10      	ldr	r3, [pc, #64]	; (800ca00 <RadioSetModem+0xb4>)
 800c9c0:	7b5b      	ldrb	r3, [r3, #13]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 ff78 	bl	800d8b8 <RadioSetPublicNetwork>
        }
        break;
 800c9c8:	e014      	b.n	800c9f4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800c9ca:	2002      	movs	r0, #2
 800c9cc:	f002 fada 	bl	800ef84 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ca00 <RadioSetModem+0xb4>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	735a      	strb	r2, [r3, #13]
        break;
 800c9d6:	e00e      	b.n	800c9f6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800c9d8:	2002      	movs	r0, #2
 800c9da:	f002 fad3 	bl	800ef84 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c9de:	4b08      	ldr	r3, [pc, #32]	; (800ca00 <RadioSetModem+0xb4>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	735a      	strb	r2, [r3, #13]
        break;
 800c9e4:	e007      	b.n	800c9f6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	f002 facc 	bl	800ef84 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c9ec:	4b04      	ldr	r3, [pc, #16]	; (800ca00 <RadioSetModem+0xb4>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	735a      	strb	r2, [r3, #13]
        break;
 800c9f2:	e000      	b.n	800c9f6 <RadioSetModem+0xaa>
        break;
 800c9f4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800c9f6:	bf00      	nop
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20006e24 	.word	0x20006e24

0800ca04 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f002 fa73 	bl	800eef8 <SUBGRF_SetRfFrequency>
}
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800ca1a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca1e:	b090      	sub	sp, #64	; 0x40
 800ca20:	af0a      	add	r7, sp, #40	; 0x28
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	603b      	str	r3, [r7, #0]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800ca38:	f000 fdef 	bl	800d61a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	f7ff ff85 	bl	800c94c <RadioSetModem>

    RadioSetChannel( freq );
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f7ff ffde 	bl	800ca04 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800ca48:	2301      	movs	r3, #1
 800ca4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9308      	str	r3, [sp, #32]
 800ca50:	2300      	movs	r3, #0
 800ca52:	9307      	str	r3, [sp, #28]
 800ca54:	2300      	movs	r3, #0
 800ca56:	9306      	str	r3, [sp, #24]
 800ca58:	2300      	movs	r3, #0
 800ca5a:	9305      	str	r3, [sp, #20]
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	9304      	str	r3, [sp, #16]
 800ca60:	2300      	movs	r3, #0
 800ca62:	9303      	str	r3, [sp, #12]
 800ca64:	2300      	movs	r3, #0
 800ca66:	9302      	str	r3, [sp, #8]
 800ca68:	2303      	movs	r3, #3
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	2300      	movs	r3, #0
 800ca72:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ca76:	68b9      	ldr	r1, [r7, #8]
 800ca78:	2000      	movs	r0, #0
 800ca7a:	f000 f84d 	bl	800cb18 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f000 fdd2 	bl	800d628 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800ca84:	f000 ff46 	bl	800d914 <RadioGetWakeupTime>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f003 fa26 	bl	800fedc <HAL_Delay>

    carrierSenseTime = MILLIS();
 800ca90:	f7f5 fa56 	bl	8001f40 <MILLIS>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	4613      	mov	r3, r2
 800ca9a:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( MILLIS() - carrierSenseTime < maxCarrierSenseTime )
 800ca9c:	e00d      	b.n	800caba <RadioIsChannelFree+0xa0>
    {
        rssi = RadioRssi( MODEM_FSK );
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f000 fe88 	bl	800d7b4 <RadioRssi>
 800caa4:	4603      	mov	r3, r0
 800caa6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800caa8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800caac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	dd02      	ble.n	800caba <RadioIsChannelFree+0xa0>
        {
            status = false;
 800cab4:	2300      	movs	r3, #0
 800cab6:	75fb      	strb	r3, [r7, #23]
            break;
 800cab8:	e013      	b.n	800cae2 <RadioIsChannelFree+0xc8>
    while( MILLIS() - carrierSenseTime < maxCarrierSenseTime )
 800caba:	f7f5 fa41 	bl	8001f40 <MILLIS>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	6939      	ldr	r1, [r7, #16]
 800cac4:	2000      	movs	r0, #0
 800cac6:	468a      	mov	sl, r1
 800cac8:	4683      	mov	fp, r0
 800caca:	ebb2 040a 	subs.w	r4, r2, sl
 800cace:	eb63 050b 	sbc.w	r5, r3, fp
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2200      	movs	r2, #0
 800cad6:	4698      	mov	r8, r3
 800cad8:	4691      	mov	r9, r2
 800cada:	4544      	cmp	r4, r8
 800cadc:	eb75 0309 	sbcs.w	r3, r5, r9
 800cae0:	d3dd      	bcc.n	800ca9e <RadioIsChannelFree+0x84>
        }
    }
    RadioStandby( );
 800cae2:	f000 fd9a 	bl	800d61a <RadioStandby>

    return status;
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3718      	adds	r7, #24
 800caec:	46bd      	mov	sp, r7
 800caee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800caf2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b082      	sub	sp, #8
 800caf6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cafc:	2300      	movs	r3, #0
 800cafe:	2200      	movs	r2, #0
 800cb00:	2100      	movs	r1, #0
 800cb02:	2000      	movs	r0, #0
 800cb04:	f002 f99c 	bl	800ee40 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800cb08:	f001 ff4d 	bl	800e9a6 <SUBGRF_GetRandom>
 800cb0c:	6078      	str	r0, [r7, #4]

    return rnd;
 800cb0e:	687b      	ldr	r3, [r7, #4]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08a      	sub	sp, #40	; 0x28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	607a      	str	r2, [r7, #4]
 800cb22:	461a      	mov	r2, r3
 800cb24:	4603      	mov	r3, r0
 800cb26:	73fb      	strb	r3, [r7, #15]
 800cb28:	4613      	mov	r3, r2
 800cb2a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800cb2c:	4ab9      	ldr	r2, [pc, #740]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cb2e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cb32:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800cb34:	f003 f81b 	bl	800fb6e <RFW_DeInit>
    if( rxContinuous == true )
 800cb38:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800cb40:	2300      	movs	r3, #0
 800cb42:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800cb44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d004      	beq.n	800cb56 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800cb4c:	4ab2      	ldr	r2, [pc, #712]	; (800ce18 <RadioSetRxConfig+0x300>)
 800cb4e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb52:	7013      	strb	r3, [r2, #0]
 800cb54:	e002      	b.n	800cb5c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800cb56:	4bb0      	ldr	r3, [pc, #704]	; (800ce18 <RadioSetRxConfig+0x300>)
 800cb58:	22ff      	movs	r2, #255	; 0xff
 800cb5a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d009      	beq.n	800cb76 <RadioSetRxConfig+0x5e>
 800cb62:	2b05      	cmp	r3, #5
 800cb64:	f300 81d7 	bgt.w	800cf16 <RadioSetRxConfig+0x3fe>
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 80bf 	beq.w	800ccec <RadioSetRxConfig+0x1d4>
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	f000 8124 	beq.w	800cdbc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800cb74:	e1cf      	b.n	800cf16 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800cb76:	2001      	movs	r0, #1
 800cb78:	f002 f85a 	bl	800ec30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cb7c:	4ba5      	ldr	r3, [pc, #660]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cb84:	4aa3      	ldr	r2, [pc, #652]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800cb8a:	4ba2      	ldr	r3, [pc, #648]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cb8c:	2209      	movs	r2, #9
 800cb8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800cb92:	4ba0      	ldr	r3, [pc, #640]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cb94:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cb98:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cb9a:	68b8      	ldr	r0, [r7, #8]
 800cb9c:	f002 ff1a 	bl	800f9d4 <SUBGRF_GetFskBandwidthRegValue>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	4b9b      	ldr	r3, [pc, #620]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cbaa:	4b9a      	ldr	r3, [pc, #616]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cbb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	4b97      	ldr	r3, [pc, #604]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbb8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800cbba:	4b96      	ldr	r3, [pc, #600]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800cbc0:	4b94      	ldr	r3, [pc, #592]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbc2:	2210      	movs	r2, #16
 800cbc4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800cbc6:	4b93      	ldr	r3, [pc, #588]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800cbcc:	4b91      	ldr	r3, [pc, #580]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800cbd2:	4b91      	ldr	r3, [pc, #580]	; (800ce18 <RadioSetRxConfig+0x300>)
 800cbd4:	781a      	ldrb	r2, [r3, #0]
 800cbd6:	4b8f      	ldr	r3, [pc, #572]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbd8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800cbda:	4b8e      	ldr	r3, [pc, #568]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800cbe0:	4b8c      	ldr	r3, [pc, #560]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800cbe6:	2005      	movs	r0, #5
 800cbe8:	f7ff feb0 	bl	800c94c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cbec:	488b      	ldr	r0, [pc, #556]	; (800ce1c <RadioSetRxConfig+0x304>)
 800cbee:	f002 fabd 	bl	800f16c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cbf2:	488b      	ldr	r0, [pc, #556]	; (800ce20 <RadioSetRxConfig+0x308>)
 800cbf4:	f002 fb8c 	bl	800f310 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800cbf8:	4a8a      	ldr	r2, [pc, #552]	; (800ce24 <RadioSetRxConfig+0x30c>)
 800cbfa:	f107 031c 	add.w	r3, r7, #28
 800cbfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc02:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc06:	f107 031c 	add.w	r3, r7, #28
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f001 fe49 	bl	800e8a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800cc10:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cc14:	f001 fe94 	bl	800e940 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800cc18:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800cc1c:	f000 fde9 	bl	800d7f2 <RadioRead>
 800cc20:	4603      	mov	r3, r0
 800cc22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800cc26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc2a:	f023 0310 	bic.w	r3, r3, #16
 800cc2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800cc32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc36:	4619      	mov	r1, r3
 800cc38:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800cc3c:	f000 fdc7 	bl	800d7ce <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800cc40:	2104      	movs	r1, #4
 800cc42:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800cc46:	f000 fdc2 	bl	800d7ce <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800cc4a:	f640 009b 	movw	r0, #2203	; 0x89b
 800cc4e:	f000 fdd0 	bl	800d7f2 <RadioRead>
 800cc52:	4603      	mov	r3, r0
 800cc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800cc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc5c:	f023 031c 	bic.w	r3, r3, #28
 800cc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc68:	f043 0308 	orr.w	r3, r3, #8
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	4619      	mov	r1, r3
 800cc70:	f640 009b 	movw	r0, #2203	; 0x89b
 800cc74:	f000 fdab 	bl	800d7ce <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800cc78:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800cc7c:	f000 fdb9 	bl	800d7f2 <RadioRead>
 800cc80:	4603      	mov	r3, r0
 800cc82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800cc86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc8a:	f023 0318 	bic.w	r3, r3, #24
 800cc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800cc92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc96:	f043 0318 	orr.w	r3, r3, #24
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800cca2:	f000 fd94 	bl	800d7ce <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800cca6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800ccaa:	f000 fda2 	bl	800d7f2 <RadioRead>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800ccb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	4619      	mov	r1, r3
 800cccc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800ccd0:	f000 fd7d 	bl	800d7ce <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ccd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ccd6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ccda:	fb02 f303 	mul.w	r3, r2, r3
 800ccde:	461a      	mov	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce6:	4a4b      	ldr	r2, [pc, #300]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cce8:	6093      	str	r3, [r2, #8]
            break;
 800ccea:	e115      	b.n	800cf18 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800ccec:	2000      	movs	r0, #0
 800ccee:	f001 ff9f 	bl	800ec30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ccf2:	4b48      	ldr	r3, [pc, #288]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800ccfa:	4a46      	ldr	r2, [pc, #280]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800cd00:	4b44      	ldr	r3, [pc, #272]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd02:	220b      	movs	r2, #11
 800cd04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cd08:	68b8      	ldr	r0, [r7, #8]
 800cd0a:	f002 fe63 	bl	800f9d4 <SUBGRF_GetFskBandwidthRegValue>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	461a      	mov	r2, r3
 800cd12:	4b40      	ldr	r3, [pc, #256]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cd18:	4b3e      	ldr	r3, [pc, #248]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cd1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	4b3b      	ldr	r3, [pc, #236]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd26:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800cd28:	4b3a      	ldr	r3, [pc, #232]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd2a:	2204      	movs	r2, #4
 800cd2c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800cd2e:	4b39      	ldr	r3, [pc, #228]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd30:	2218      	movs	r2, #24
 800cd32:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800cd34:	4b37      	ldr	r3, [pc, #220]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800cd3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd3e:	f083 0301 	eor.w	r3, r3, #1
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	461a      	mov	r2, r3
 800cd46:	4b33      	ldr	r3, [pc, #204]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd48:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800cd4a:	4b33      	ldr	r3, [pc, #204]	; (800ce18 <RadioSetRxConfig+0x300>)
 800cd4c:	781a      	ldrb	r2, [r3, #0]
 800cd4e:	4b31      	ldr	r3, [pc, #196]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd50:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800cd52:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d003      	beq.n	800cd62 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800cd5a:	4b2e      	ldr	r3, [pc, #184]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd5c:	22f2      	movs	r2, #242	; 0xf2
 800cd5e:	75da      	strb	r2, [r3, #23]
 800cd60:	e002      	b.n	800cd68 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800cd62:	4b2c      	ldr	r3, [pc, #176]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800cd68:	4b2a      	ldr	r3, [pc, #168]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800cd6e:	f000 fc54 	bl	800d61a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800cd72:	2000      	movs	r0, #0
 800cd74:	f7ff fdea 	bl	800c94c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cd78:	4828      	ldr	r0, [pc, #160]	; (800ce1c <RadioSetRxConfig+0x304>)
 800cd7a:	f002 f9f7 	bl	800f16c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cd7e:	4828      	ldr	r0, [pc, #160]	; (800ce20 <RadioSetRxConfig+0x308>)
 800cd80:	f002 fac6 	bl	800f310 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800cd84:	4a28      	ldr	r2, [pc, #160]	; (800ce28 <RadioSetRxConfig+0x310>)
 800cd86:	f107 0314 	add.w	r3, r7, #20
 800cd8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800cd92:	f107 0314 	add.w	r3, r7, #20
 800cd96:	4618      	mov	r0, r3
 800cd98:	f001 fd83 	bl	800e8a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800cd9c:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cda0:	f001 fdce 	bl	800e940 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800cda4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cda6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cdaa:	fb02 f303 	mul.w	r3, r2, r3
 800cdae:	461a      	mov	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb6:	4a17      	ldr	r2, [pc, #92]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cdb8:	6093      	str	r3, [r2, #8]
            break;
 800cdba:	e0ad      	b.n	800cf18 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	f001 ff37 	bl	800ec30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800cdc2:	4b14      	ldr	r3, [pc, #80]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	4b11      	ldr	r3, [pc, #68]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cdd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800cdd4:	4a15      	ldr	r2, [pc, #84]	; (800ce2c <RadioSetRxConfig+0x314>)
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	4413      	add	r3, r2
 800cdda:	781a      	ldrb	r2, [r3, #0]
 800cddc:	4b0d      	ldr	r3, [pc, #52]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cdde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800cde2:	4a0c      	ldr	r2, [pc, #48]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
 800cde6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d105      	bne.n	800cdfc <RadioSetRxConfig+0x2e4>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b0b      	cmp	r3, #11
 800cdf4:	d008      	beq.n	800ce08 <RadioSetRxConfig+0x2f0>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b0c      	cmp	r3, #12
 800cdfa:	d005      	beq.n	800ce08 <RadioSetRxConfig+0x2f0>
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d116      	bne.n	800ce30 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2b0c      	cmp	r3, #12
 800ce06:	d113      	bne.n	800ce30 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800ce08:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <RadioSetRxConfig+0x2fc>)
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800ce10:	e012      	b.n	800ce38 <RadioSetRxConfig+0x320>
 800ce12:	bf00      	nop
 800ce14:	20006e24 	.word	0x20006e24
 800ce18:	20000652 	.word	0x20000652
 800ce1c:	20006e5c 	.word	0x20006e5c
 800ce20:	20006e32 	.word	0x20006e32
 800ce24:	0801a170 	.word	0x0801a170
 800ce28:	0801a178 	.word	0x0801a178
 800ce2c:	0801aa1c 	.word	0x0801aa1c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800ce30:	4b3b      	ldr	r3, [pc, #236]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ce38:	4b39      	ldr	r3, [pc, #228]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800ce3e:	4b38      	ldr	r3, [pc, #224]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ce44:	2b05      	cmp	r3, #5
 800ce46:	d004      	beq.n	800ce52 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800ce48:	4b35      	ldr	r3, [pc, #212]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800ce4e:	2b06      	cmp	r3, #6
 800ce50:	d10a      	bne.n	800ce68 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800ce52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce54:	2b0b      	cmp	r3, #11
 800ce56:	d803      	bhi.n	800ce60 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800ce58:	4b31      	ldr	r3, [pc, #196]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce5a:	220c      	movs	r2, #12
 800ce5c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800ce5e:	e006      	b.n	800ce6e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ce60:	4a2f      	ldr	r2, [pc, #188]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce64:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800ce66:	e002      	b.n	800ce6e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ce68:	4a2d      	ldr	r2, [pc, #180]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce6c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800ce6e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800ce72:	4b2b      	ldr	r3, [pc, #172]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce74:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ce76:	4b2b      	ldr	r3, [pc, #172]	; (800cf24 <RadioSetRxConfig+0x40c>)
 800ce78:	781a      	ldrb	r2, [r3, #0]
 800ce7a:	4b29      	ldr	r3, [pc, #164]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce7c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800ce7e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800ce82:	4b27      	ldr	r3, [pc, #156]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce84:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800ce88:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ce8c:	4b24      	ldr	r3, [pc, #144]	; (800cf20 <RadioSetRxConfig+0x408>)
 800ce8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800ce92:	f000 fbc2 	bl	800d61a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800ce96:	2001      	movs	r0, #1
 800ce98:	f7ff fd58 	bl	800c94c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ce9c:	4822      	ldr	r0, [pc, #136]	; (800cf28 <RadioSetRxConfig+0x410>)
 800ce9e:	f002 f965 	bl	800f16c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cea2:	4822      	ldr	r0, [pc, #136]	; (800cf2c <RadioSetRxConfig+0x414>)
 800cea4:	f002 fa34 	bl	800f310 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800cea8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	4618      	mov	r0, r3
 800ceae:	f001 fece 	bl	800ec4e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800ceb2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800ceb6:	f002 fb87 	bl	800f5c8 <SUBGRF_ReadRegister>
 800ceba:	4603      	mov	r3, r0
 800cebc:	f003 0301 	and.w	r3, r3, #1
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	4619      	mov	r1, r3
 800cec4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800cec8:	f002 fb6a 	bl	800f5a0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800cecc:	4b14      	ldr	r3, [pc, #80]	; (800cf20 <RadioSetRxConfig+0x408>)
 800cece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d10d      	bne.n	800cef2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800ced6:	f240 7036 	movw	r0, #1846	; 0x736
 800ceda:	f002 fb75 	bl	800f5c8 <SUBGRF_ReadRegister>
 800cede:	4603      	mov	r3, r0
 800cee0:	f023 0304 	bic.w	r3, r3, #4
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	4619      	mov	r1, r3
 800cee8:	f240 7036 	movw	r0, #1846	; 0x736
 800ceec:	f002 fb58 	bl	800f5a0 <SUBGRF_WriteRegister>
 800cef0:	e00c      	b.n	800cf0c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800cef2:	f240 7036 	movw	r0, #1846	; 0x736
 800cef6:	f002 fb67 	bl	800f5c8 <SUBGRF_ReadRegister>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f043 0304 	orr.w	r3, r3, #4
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	4619      	mov	r1, r3
 800cf04:	f240 7036 	movw	r0, #1846	; 0x736
 800cf08:	f002 fb4a 	bl	800f5a0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800cf0c:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <RadioSetRxConfig+0x408>)
 800cf0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf12:	609a      	str	r2, [r3, #8]
            break;
 800cf14:	e000      	b.n	800cf18 <RadioSetRxConfig+0x400>
            break;
 800cf16:	bf00      	nop
    }
}
 800cf18:	bf00      	nop
 800cf1a:	3728      	adds	r7, #40	; 0x28
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	20006e24 	.word	0x20006e24
 800cf24:	20000652 	.word	0x20000652
 800cf28:	20006e5c 	.word	0x20006e5c
 800cf2c:	20006e32 	.word	0x20006e32

0800cf30 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60ba      	str	r2, [r7, #8]
 800cf38:	607b      	str	r3, [r7, #4]
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73fb      	strb	r3, [r7, #15]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800cf42:	f002 fe14 	bl	800fb6e <RFW_DeInit>
    switch( modem )
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
 800cf48:	2b04      	cmp	r3, #4
 800cf4a:	f000 80c7 	beq.w	800d0dc <RadioSetTxConfig+0x1ac>
 800cf4e:	2b04      	cmp	r3, #4
 800cf50:	f300 80d6 	bgt.w	800d100 <RadioSetTxConfig+0x1d0>
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <RadioSetTxConfig+0x2e>
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d059      	beq.n	800d010 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800cf5c:	e0d0      	b.n	800d100 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cf5e:	4b77      	ldr	r3, [pc, #476]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cf66:	4a75      	ldr	r2, [pc, #468]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800cf6c:	4b73      	ldr	r3, [pc, #460]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf6e:	220b      	movs	r2, #11
 800cf70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f002 fd2d 	bl	800f9d4 <SUBGRF_GetFskBandwidthRegValue>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4b6f      	ldr	r3, [pc, #444]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800cf84:	4a6d      	ldr	r2, [pc, #436]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cf8a:	4b6c      	ldr	r3, [pc, #432]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cf90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	4b69      	ldr	r3, [pc, #420]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf98:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800cf9a:	4b68      	ldr	r3, [pc, #416]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cf9c:	2204      	movs	r2, #4
 800cf9e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800cfa0:	4b66      	ldr	r3, [pc, #408]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cfa2:	2218      	movs	r2, #24
 800cfa4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800cfa6:	4b65      	ldr	r3, [pc, #404]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800cfac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cfb0:	f083 0301 	eor.w	r3, r3, #1
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	4b60      	ldr	r3, [pc, #384]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cfba:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800cfbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800cfc4:	4b5d      	ldr	r3, [pc, #372]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cfc6:	22f2      	movs	r2, #242	; 0xf2
 800cfc8:	75da      	strb	r2, [r3, #23]
 800cfca:	e002      	b.n	800cfd2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800cfcc:	4b5b      	ldr	r3, [pc, #364]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cfce:	2201      	movs	r2, #1
 800cfd0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800cfd2:	4b5a      	ldr	r3, [pc, #360]	; (800d13c <RadioSetTxConfig+0x20c>)
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800cfd8:	f000 fb1f 	bl	800d61a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800cfdc:	2000      	movs	r0, #0
 800cfde:	f7ff fcb5 	bl	800c94c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cfe2:	4857      	ldr	r0, [pc, #348]	; (800d140 <RadioSetTxConfig+0x210>)
 800cfe4:	f002 f8c2 	bl	800f16c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cfe8:	4856      	ldr	r0, [pc, #344]	; (800d144 <RadioSetTxConfig+0x214>)
 800cfea:	f002 f991 	bl	800f310 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800cfee:	4a56      	ldr	r2, [pc, #344]	; (800d148 <RadioSetTxConfig+0x218>)
 800cff0:	f107 0310 	add.w	r3, r7, #16
 800cff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cff8:	e883 0003 	stmia.w	r3, {r0, r1}
 800cffc:	f107 0310 	add.w	r3, r7, #16
 800d000:	4618      	mov	r0, r3
 800d002:	f001 fc4e 	bl	800e8a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800d006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d00a:	f001 fc99 	bl	800e940 <SUBGRF_SetWhiteningSeed>
            break;
 800d00e:	e078      	b.n	800d102 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d010:	4b4a      	ldr	r3, [pc, #296]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d012:	2201      	movs	r2, #1
 800d014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	4b47      	ldr	r3, [pc, #284]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d01e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800d022:	4a4a      	ldr	r2, [pc, #296]	; (800d14c <RadioSetTxConfig+0x21c>)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4413      	add	r3, r2
 800d028:	781a      	ldrb	r2, [r3, #0]
 800d02a:	4b44      	ldr	r3, [pc, #272]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d02c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800d030:	4a42      	ldr	r2, [pc, #264]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d032:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d036:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d105      	bne.n	800d04c <RadioSetTxConfig+0x11c>
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	2b0b      	cmp	r3, #11
 800d044:	d008      	beq.n	800d058 <RadioSetTxConfig+0x128>
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	2b0c      	cmp	r3, #12
 800d04a:	d005      	beq.n	800d058 <RadioSetTxConfig+0x128>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d107      	bne.n	800d062 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	2b0c      	cmp	r3, #12
 800d056:	d104      	bne.n	800d062 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800d058:	4b38      	ldr	r3, [pc, #224]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800d060:	e003      	b.n	800d06a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d062:	4b36      	ldr	r3, [pc, #216]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d06a:	4b34      	ldr	r3, [pc, #208]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d06c:	2201      	movs	r2, #1
 800d06e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d070:	4b32      	ldr	r3, [pc, #200]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d076:	2b05      	cmp	r3, #5
 800d078:	d004      	beq.n	800d084 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800d07a:	4b30      	ldr	r3, [pc, #192]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d07c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d080:	2b06      	cmp	r3, #6
 800d082:	d10a      	bne.n	800d09a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800d084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d086:	2b0b      	cmp	r3, #11
 800d088:	d803      	bhi.n	800d092 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800d08a:	4b2c      	ldr	r3, [pc, #176]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d08c:	220c      	movs	r2, #12
 800d08e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800d090:	e006      	b.n	800d0a0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d092:	4a2a      	ldr	r2, [pc, #168]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d096:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800d098:	e002      	b.n	800d0a0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d09a:	4a28      	ldr	r2, [pc, #160]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d09c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d09e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800d0a0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d0a4:	4b25      	ldr	r3, [pc, #148]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d0a6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800d0a8:	4b29      	ldr	r3, [pc, #164]	; (800d150 <RadioSetTxConfig+0x220>)
 800d0aa:	781a      	ldrb	r2, [r3, #0]
 800d0ac:	4b23      	ldr	r3, [pc, #140]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d0ae:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800d0b0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d0b4:	4b21      	ldr	r3, [pc, #132]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d0b6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800d0ba:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800d0be:	4b1f      	ldr	r3, [pc, #124]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d0c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800d0c4:	f000 faa9 	bl	800d61a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	f7ff fc3f 	bl	800c94c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d0ce:	481c      	ldr	r0, [pc, #112]	; (800d140 <RadioSetTxConfig+0x210>)
 800d0d0:	f002 f84c 	bl	800f16c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d0d4:	481b      	ldr	r0, [pc, #108]	; (800d144 <RadioSetTxConfig+0x214>)
 800d0d6:	f002 f91b 	bl	800f310 <SUBGRF_SetPacketParams>
            break;
 800d0da:	e012      	b.n	800d102 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800d0dc:	2004      	movs	r0, #4
 800d0de:	f7ff fc35 	bl	800c94c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800d0e2:	4b16      	ldr	r3, [pc, #88]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800d0ea:	4a14      	ldr	r2, [pc, #80]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800d0f0:	4b12      	ldr	r3, [pc, #72]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d0f2:	2216      	movs	r2, #22
 800d0f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d0f8:	4811      	ldr	r0, [pc, #68]	; (800d140 <RadioSetTxConfig+0x210>)
 800d0fa:	f002 f837 	bl	800f16c <SUBGRF_SetModulationParams>
            break;
 800d0fe:	e000      	b.n	800d102 <RadioSetTxConfig+0x1d2>
            break;
 800d100:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800d102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d106:	4618      	mov	r0, r3
 800d108:	f002 fb66 	bl	800f7d8 <SUBGRF_SetRfTxPower>
 800d10c:	4603      	mov	r3, r0
 800d10e:	461a      	mov	r2, r3
 800d110:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d112:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800d116:	210e      	movs	r1, #14
 800d118:	f640 101f 	movw	r0, #2335	; 0x91f
 800d11c:	f002 fa40 	bl	800f5a0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800d120:	4b06      	ldr	r3, [pc, #24]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d122:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d126:	4618      	mov	r0, r3
 800d128:	f002 fd35 	bl	800fb96 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800d12c:	4a03      	ldr	r2, [pc, #12]	; (800d13c <RadioSetTxConfig+0x20c>)
 800d12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d130:	6053      	str	r3, [r2, #4]
}
 800d132:	bf00      	nop
 800d134:	3718      	adds	r7, #24
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20006e24 	.word	0x20006e24
 800d140:	20006e5c 	.word	0x20006e5c
 800d144:	20006e32 	.word	0x20006e32
 800d148:	0801a178 	.word	0x0801a178
 800d14c:	0801aa1c 	.word	0x0801aa1c
 800d150:	20000652 	.word	0x20000652

0800d154 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
    return true;
 800d15c:	2301      	movs	r3, #1
}
 800d15e:	4618      	mov	r0, r3
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	bc80      	pop	{r7}
 800d166:	4770      	bx	lr

0800d168 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	2b0a      	cmp	r3, #10
 800d17a:	d83e      	bhi.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
 800d17c:	a201      	add	r2, pc, #4	; (adr r2, 800d184 <RadioGetLoRaBandwidthInHz+0x1c>)
 800d17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d182:	bf00      	nop
 800d184:	0800d1b1 	.word	0x0800d1b1
 800d188:	0800d1c1 	.word	0x0800d1c1
 800d18c:	0800d1d1 	.word	0x0800d1d1
 800d190:	0800d1e1 	.word	0x0800d1e1
 800d194:	0800d1e9 	.word	0x0800d1e9
 800d198:	0800d1ef 	.word	0x0800d1ef
 800d19c:	0800d1f5 	.word	0x0800d1f5
 800d1a0:	0800d1fb 	.word	0x0800d1fb
 800d1a4:	0800d1b9 	.word	0x0800d1b9
 800d1a8:	0800d1c9 	.word	0x0800d1c9
 800d1ac:	0800d1d9 	.word	0x0800d1d9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800d1b0:	f641 6384 	movw	r3, #7812	; 0x1e84
 800d1b4:	60fb      	str	r3, [r7, #12]
        break;
 800d1b6:	e020      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800d1b8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800d1bc:	60fb      	str	r3, [r7, #12]
        break;
 800d1be:	e01c      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800d1c0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800d1c4:	60fb      	str	r3, [r7, #12]
        break;
 800d1c6:	e018      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800d1c8:	f245 1361 	movw	r3, #20833	; 0x5161
 800d1cc:	60fb      	str	r3, [r7, #12]
        break;
 800d1ce:	e014      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800d1d0:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d1d4:	60fb      	str	r3, [r7, #12]
        break;
 800d1d6:	e010      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800d1d8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800d1dc:	60fb      	str	r3, [r7, #12]
        break;
 800d1de:	e00c      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800d1e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d1e4:	60fb      	str	r3, [r7, #12]
        break;
 800d1e6:	e008      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800d1e8:	4b07      	ldr	r3, [pc, #28]	; (800d208 <RadioGetLoRaBandwidthInHz+0xa0>)
 800d1ea:	60fb      	str	r3, [r7, #12]
        break;
 800d1ec:	e005      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800d1ee:	4b07      	ldr	r3, [pc, #28]	; (800d20c <RadioGetLoRaBandwidthInHz+0xa4>)
 800d1f0:	60fb      	str	r3, [r7, #12]
        break;
 800d1f2:	e002      	b.n	800d1fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800d1f4:	4b06      	ldr	r3, [pc, #24]	; (800d210 <RadioGetLoRaBandwidthInHz+0xa8>)
 800d1f6:	60fb      	str	r3, [r7, #12]
        break;
 800d1f8:	bf00      	nop
    }

    return bandwidthInHz;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	bc80      	pop	{r7}
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	0001e848 	.word	0x0001e848
 800d20c:	0003d090 	.word	0x0003d090
 800d210:	0007a120 	.word	0x0007a120

0800d214 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	4608      	mov	r0, r1
 800d21e:	4611      	mov	r1, r2
 800d220:	461a      	mov	r2, r3
 800d222:	4603      	mov	r3, r0
 800d224:	70fb      	strb	r3, [r7, #3]
 800d226:	460b      	mov	r3, r1
 800d228:	803b      	strh	r3, [r7, #0]
 800d22a:	4613      	mov	r3, r2
 800d22c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800d22e:	883b      	ldrh	r3, [r7, #0]
 800d230:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d232:	78ba      	ldrb	r2, [r7, #2]
 800d234:	f082 0201 	eor.w	r2, r2, #1
 800d238:	b2d2      	uxtb	r2, r2
 800d23a:	2a00      	cmp	r2, #0
 800d23c:	d001      	beq.n	800d242 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800d23e:	2208      	movs	r2, #8
 800d240:	e000      	b.n	800d244 <RadioGetGfskTimeOnAirNumerator+0x30>
 800d242:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800d244:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d246:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800d24a:	7c3b      	ldrb	r3, [r7, #16]
 800d24c:	7d39      	ldrb	r1, [r7, #20]
 800d24e:	2900      	cmp	r1, #0
 800d250:	d001      	beq.n	800d256 <RadioGetGfskTimeOnAirNumerator+0x42>
 800d252:	2102      	movs	r1, #2
 800d254:	e000      	b.n	800d258 <RadioGetGfskTimeOnAirNumerator+0x44>
 800d256:	2100      	movs	r1, #0
 800d258:	440b      	add	r3, r1
 800d25a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d25c:	4413      	add	r3, r2
}
 800d25e:	4618      	mov	r0, r3
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	bc80      	pop	{r7}
 800d266:	4770      	bx	lr

0800d268 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800d268:	b480      	push	{r7}
 800d26a:	b08b      	sub	sp, #44	; 0x2c
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	4611      	mov	r1, r2
 800d274:	461a      	mov	r2, r3
 800d276:	460b      	mov	r3, r1
 800d278:	71fb      	strb	r3, [r7, #7]
 800d27a:	4613      	mov	r3, r2
 800d27c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	3304      	adds	r3, #4
 800d282:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800d284:	2300      	movs	r3, #0
 800d286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	2b05      	cmp	r3, #5
 800d28e:	d002      	beq.n	800d296 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	2b06      	cmp	r3, #6
 800d294:	d104      	bne.n	800d2a0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800d296:	88bb      	ldrh	r3, [r7, #4]
 800d298:	2b0b      	cmp	r3, #11
 800d29a:	d801      	bhi.n	800d2a0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800d29c:	230c      	movs	r3, #12
 800d29e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d105      	bne.n	800d2b2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	2b0b      	cmp	r3, #11
 800d2aa:	d008      	beq.n	800d2be <RadioGetLoRaTimeOnAirNumerator+0x56>
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	2b0c      	cmp	r3, #12
 800d2b0:	d005      	beq.n	800d2be <RadioGetLoRaTimeOnAirNumerator+0x56>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d105      	bne.n	800d2c4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	2b0c      	cmp	r3, #12
 800d2bc:	d102      	bne.n	800d2c4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d2c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d2c8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800d2ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d2ce:	2a00      	cmp	r2, #0
 800d2d0:	d001      	beq.n	800d2d6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800d2d2:	2210      	movs	r2, #16
 800d2d4:	e000      	b.n	800d2d8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800d2d6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d2d8:	4413      	add	r3, r2
 800d2da:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800d2e0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800d2e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d2e6:	2a00      	cmp	r2, #0
 800d2e8:	d001      	beq.n	800d2ee <RadioGetLoRaTimeOnAirNumerator+0x86>
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	e000      	b.n	800d2f0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800d2ee:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800d2f0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d2f2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2b06      	cmp	r3, #6
 800d2f8:	d803      	bhi.n	800d302 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	623b      	str	r3, [r7, #32]
 800d300:	e00e      	b.n	800d320 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	3308      	adds	r3, #8
 800d306:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800d308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d004      	beq.n	800d31a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	3b02      	subs	r3, #2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	623b      	str	r3, [r7, #32]
 800d318:	e002      	b.n	800d320 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	2b00      	cmp	r3, #0
 800d324:	da01      	bge.n	800d32a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d32a:	69fa      	ldr	r2, [r7, #28]
 800d32c:	6a3b      	ldr	r3, [r7, #32]
 800d32e:	4413      	add	r3, r2
 800d330:	1e5a      	subs	r2, r3, #1
 800d332:	6a3b      	ldr	r3, [r7, #32]
 800d334:	fb92 f3f3 	sdiv	r3, r2, r3
 800d338:	697a      	ldr	r2, [r7, #20]
 800d33a:	fb03 f202 	mul.w	r2, r3, r2
 800d33e:	88bb      	ldrh	r3, [r7, #4]
 800d340:	4413      	add	r3, r2
    int32_t intermediate =
 800d342:	330c      	adds	r3, #12
 800d344:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b06      	cmp	r3, #6
 800d34a:	d802      	bhi.n	800d352 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	3302      	adds	r3, #2
 800d350:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	3b02      	subs	r3, #2
 800d35c:	fa02 f303 	lsl.w	r3, r2, r3
}
 800d360:	4618      	mov	r0, r3
 800d362:	372c      	adds	r7, #44	; 0x2c
 800d364:	46bd      	mov	sp, r7
 800d366:	bc80      	pop	{r7}
 800d368:	4770      	bx	lr
	...

0800d36c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08a      	sub	sp, #40	; 0x28
 800d370:	af04      	add	r7, sp, #16
 800d372:	60b9      	str	r1, [r7, #8]
 800d374:	607a      	str	r2, [r7, #4]
 800d376:	461a      	mov	r2, r3
 800d378:	4603      	mov	r3, r0
 800d37a:	73fb      	strb	r3, [r7, #15]
 800d37c:	4613      	mov	r3, r2
 800d37e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800d384:	2301      	movs	r3, #1
 800d386:	613b      	str	r3, [r7, #16]

    switch( modem )
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <RadioTimeOnAir+0x28>
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d017      	beq.n	800d3c2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800d392:	e035      	b.n	800d400 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800d394:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800d398:	8c3a      	ldrh	r2, [r7, #32]
 800d39a:	7bb9      	ldrb	r1, [r7, #14]
 800d39c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7ff ff32 	bl	800d214 <RadioGetGfskTimeOnAirNumerator>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3b6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ba:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	613b      	str	r3, [r7, #16]
        break;
 800d3c0:	e01e      	b.n	800d400 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800d3c2:	8c39      	ldrh	r1, [r7, #32]
 800d3c4:	7bba      	ldrb	r2, [r7, #14]
 800d3c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3ca:	9302      	str	r3, [sp, #8]
 800d3cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	6879      	ldr	r1, [r7, #4]
 800d3dc:	68b8      	ldr	r0, [r7, #8]
 800d3de:	f7ff ff43 	bl	800d268 <RadioGetLoRaTimeOnAirNumerator>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3e8:	fb02 f303 	mul.w	r3, r2, r3
 800d3ec:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800d3ee:	4a0a      	ldr	r2, [pc, #40]	; (800d418 <RadioTimeOnAir+0xac>)
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7ff feb6 	bl	800d168 <RadioGetLoRaBandwidthInHz>
 800d3fc:	6138      	str	r0, [r7, #16]
        break;
 800d3fe:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	4413      	add	r3, r2
 800d406:	1e5a      	subs	r2, r3, #1
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	0801aa1c 	.word	0x0801aa1c

0800d41c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800d428:	2300      	movs	r3, #0
 800d42a:	2200      	movs	r2, #0
 800d42c:	f240 2101 	movw	r1, #513	; 0x201
 800d430:	f240 2001 	movw	r0, #513	; 0x201
 800d434:	f001 fd04 	bl	800ee40 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800d438:	4b6b      	ldr	r3, [pc, #428]	; (800d5e8 <RadioSend+0x1cc>)
 800d43a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d43e:	2101      	movs	r1, #1
 800d440:	4618      	mov	r0, r3
 800d442:	f002 f9a1 	bl	800f788 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800d446:	4b68      	ldr	r3, [pc, #416]	; (800d5e8 <RadioSend+0x1cc>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d112      	bne.n	800d474 <RadioSend+0x58>
 800d44e:	4b66      	ldr	r3, [pc, #408]	; (800d5e8 <RadioSend+0x1cc>)
 800d450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d454:	2b06      	cmp	r3, #6
 800d456:	d10d      	bne.n	800d474 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800d458:	f640 0089 	movw	r0, #2185	; 0x889
 800d45c:	f002 f8b4 	bl	800f5c8 <SUBGRF_ReadRegister>
 800d460:	4603      	mov	r3, r0
 800d462:	f023 0304 	bic.w	r3, r3, #4
 800d466:	b2db      	uxtb	r3, r3
 800d468:	4619      	mov	r1, r3
 800d46a:	f640 0089 	movw	r0, #2185	; 0x889
 800d46e:	f002 f897 	bl	800f5a0 <SUBGRF_WriteRegister>
 800d472:	e00c      	b.n	800d48e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800d474:	f640 0089 	movw	r0, #2185	; 0x889
 800d478:	f002 f8a6 	bl	800f5c8 <SUBGRF_ReadRegister>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f043 0304 	orr.w	r3, r3, #4
 800d482:	b2db      	uxtb	r3, r3
 800d484:	4619      	mov	r1, r3
 800d486:	f640 0089 	movw	r0, #2185	; 0x889
 800d48a:	f002 f889 	bl	800f5a0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800d48e:	4b56      	ldr	r3, [pc, #344]	; (800d5e8 <RadioSend+0x1cc>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2b04      	cmp	r3, #4
 800d494:	f200 80a2 	bhi.w	800d5dc <RadioSend+0x1c0>
 800d498:	a201      	add	r2, pc, #4	; (adr r2, 800d4a0 <RadioSend+0x84>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d4cf 	.word	0x0800d4cf
 800d4a4:	0800d4b5 	.word	0x0800d4b5
 800d4a8:	0800d4cf 	.word	0x0800d4cf
 800d4ac:	0800d525 	.word	0x0800d525
 800d4b0:	0800d545 	.word	0x0800d545
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800d4b4:	4a4c      	ldr	r2, [pc, #304]	; (800d5e8 <RadioSend+0x1cc>)
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d4ba:	484c      	ldr	r0, [pc, #304]	; (800d5ec <RadioSend+0x1d0>)
 800d4bc:	f001 ff28 	bl	800f310 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800d4c0:	78fb      	ldrb	r3, [r7, #3]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f001 f9d8 	bl	800e87c <SUBGRF_SendPayload>
            break;
 800d4cc:	e087      	b.n	800d5de <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800d4ce:	f002 fb54 	bl	800fb7a <RFW_Is_Init>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d118      	bne.n	800d50a <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800d4d8:	f107 020d 	add.w	r2, r7, #13
 800d4dc:	78fb      	ldrb	r3, [r7, #3]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f002 fb62 	bl	800fbaa <RFW_TransmitInit>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10c      	bne.n	800d506 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800d4ec:	7b7a      	ldrb	r2, [r7, #13]
 800d4ee:	4b3e      	ldr	r3, [pc, #248]	; (800d5e8 <RadioSend+0x1cc>)
 800d4f0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d4f2:	483e      	ldr	r0, [pc, #248]	; (800d5ec <RadioSend+0x1d0>)
 800d4f4:	f001 ff0c 	bl	800f310 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800d4f8:	7b7b      	ldrb	r3, [r7, #13]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f001 f9bc 	bl	800e87c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800d504:	e06b      	b.n	800d5de <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800d506:	2303      	movs	r3, #3
 800d508:	e06a      	b.n	800d5e0 <RadioSend+0x1c4>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800d50a:	4a37      	ldr	r2, [pc, #220]	; (800d5e8 <RadioSend+0x1cc>)
 800d50c:	78fb      	ldrb	r3, [r7, #3]
 800d50e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d510:	4836      	ldr	r0, [pc, #216]	; (800d5ec <RadioSend+0x1d0>)
 800d512:	f001 fefd 	bl	800f310 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800d516:	78fb      	ldrb	r3, [r7, #3]
 800d518:	2200      	movs	r2, #0
 800d51a:	4619      	mov	r1, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f001 f9ad 	bl	800e87c <SUBGRF_SendPayload>
            break;
 800d522:	e05c      	b.n	800d5de <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800d524:	4b30      	ldr	r3, [pc, #192]	; (800d5e8 <RadioSend+0x1cc>)
 800d526:	2202      	movs	r2, #2
 800d528:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800d52a:	4a2f      	ldr	r2, [pc, #188]	; (800d5e8 <RadioSend+0x1cc>)
 800d52c:	78fb      	ldrb	r3, [r7, #3]
 800d52e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d530:	482e      	ldr	r0, [pc, #184]	; (800d5ec <RadioSend+0x1d0>)
 800d532:	f001 feed 	bl	800f310 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800d536:	78fb      	ldrb	r3, [r7, #3]
 800d538:	2200      	movs	r2, #0
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f001 f99d 	bl	800e87c <SUBGRF_SendPayload>
            break;
 800d542:	e04c      	b.n	800d5de <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	461a      	mov	r2, r3
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	4829      	ldr	r0, [pc, #164]	; (800d5f0 <RadioSend+0x1d4>)
 800d54c:	f000 fc10 	bl	800dd70 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800d550:	4b25      	ldr	r3, [pc, #148]	; (800d5e8 <RadioSend+0x1cc>)
 800d552:	2202      	movs	r2, #2
 800d554:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800d556:	78fb      	ldrb	r3, [r7, #3]
 800d558:	3301      	adds	r3, #1
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	4b22      	ldr	r3, [pc, #136]	; (800d5e8 <RadioSend+0x1cc>)
 800d55e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d560:	4822      	ldr	r0, [pc, #136]	; (800d5ec <RadioSend+0x1d0>)
 800d562:	f001 fed5 	bl	800f310 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800d566:	2100      	movs	r1, #0
 800d568:	20f1      	movs	r0, #241	; 0xf1
 800d56a:	f000 f930 	bl	800d7ce <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800d56e:	2100      	movs	r1, #0
 800d570:	20f0      	movs	r0, #240	; 0xf0
 800d572:	f000 f92c 	bl	800d7ce <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800d576:	4b1c      	ldr	r3, [pc, #112]	; (800d5e8 <RadioSend+0x1cc>)
 800d578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d57a:	2b64      	cmp	r3, #100	; 0x64
 800d57c:	d108      	bne.n	800d590 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800d57e:	2170      	movs	r1, #112	; 0x70
 800d580:	20f3      	movs	r0, #243	; 0xf3
 800d582:	f000 f924 	bl	800d7ce <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800d586:	211d      	movs	r1, #29
 800d588:	20f2      	movs	r0, #242	; 0xf2
 800d58a:	f000 f920 	bl	800d7ce <RadioWrite>
 800d58e:	e007      	b.n	800d5a0 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800d590:	21e1      	movs	r1, #225	; 0xe1
 800d592:	20f3      	movs	r0, #243	; 0xf3
 800d594:	f000 f91b 	bl	800d7ce <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800d598:	2104      	movs	r1, #4
 800d59a:	20f2      	movs	r0, #242	; 0xf2
 800d59c:	f000 f917 	bl	800d7ce <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	3302      	adds	r3, #2
 800d5aa:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800d5ac:	89fb      	ldrh	r3, [r7, #14]
 800d5ae:	0a1b      	lsrs	r3, r3, #8
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	20f4      	movs	r0, #244	; 0xf4
 800d5b8:	f000 f909 	bl	800d7ce <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800d5bc:	89fb      	ldrh	r3, [r7, #14]
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	20f5      	movs	r0, #245	; 0xf5
 800d5c4:	f000 f903 	bl	800d7ce <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800d5c8:	78fb      	ldrb	r3, [r7, #3]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	4806      	ldr	r0, [pc, #24]	; (800d5f0 <RadioSend+0x1d4>)
 800d5d6:	f001 f951 	bl	800e87c <SUBGRF_SendPayload>
            break;
 800d5da:	e000      	b.n	800d5de <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800d5dc:	bf00      	nop

        //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
        //TimerStart( &TxTimeoutTimer );
    }

    return RADIO_STATUS_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	20006e24 	.word	0x20006e24
 800d5ec:	20006e32 	.word	0x20006e32
 800d5f0:	20006d20 	.word	0x20006d20

0800d5f4 <RadioSleep>:

static void RadioSleep( void )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800d5fe:	793b      	ldrb	r3, [r7, #4]
 800d600:	f043 0304 	orr.w	r3, r3, #4
 800d604:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800d606:	7938      	ldrb	r0, [r7, #4]
 800d608:	f001 fa14 	bl	800ea34 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800d60c:	2002      	movs	r0, #2
 800d60e:	f002 fc65 	bl	800fedc <HAL_Delay>
}
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <RadioStandby>:

static void RadioStandby( void )
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800d61e:	2000      	movs	r0, #0
 800d620:	f001 fa3a 	bl	800ea98 <SUBGRF_SetStandby>
}
 800d624:	bf00      	nop
 800d626:	bd80      	pop	{r7, pc}

0800d628 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800d630:	f002 faa3 	bl	800fb7a <RFW_Is_Init>
 800d634:	4603      	mov	r3, r0
 800d636:	2b01      	cmp	r3, #1
 800d638:	d102      	bne.n	800d640 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800d63a:	f002 fac6 	bl	800fbca <RFW_ReceiveInit>
 800d63e:	e007      	b.n	800d650 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d640:	2300      	movs	r3, #0
 800d642:	2200      	movs	r2, #0
 800d644:	f240 2162 	movw	r1, #610	; 0x262
 800d648:	f240 2062 	movw	r0, #610	; 0x262
 800d64c:	f001 fbf8 	bl	800ee40 <SUBGRF_SetDioIrqParams>
    {
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800d650:	4b0e      	ldr	r3, [pc, #56]	; (800d68c <RadioRx+0x64>)
 800d652:	2200      	movs	r2, #0
 800d654:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800d656:	4b0d      	ldr	r3, [pc, #52]	; (800d68c <RadioRx+0x64>)
 800d658:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d65c:	2100      	movs	r1, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f002 f892 	bl	800f788 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800d664:	4b09      	ldr	r3, [pc, #36]	; (800d68c <RadioRx+0x64>)
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d004      	beq.n	800d676 <RadioRx+0x4e>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800d66c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d670:	f001 fa4e 	bl	800eb10 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800d674:	e005      	b.n	800d682 <RadioRx+0x5a>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <RadioRx+0x64>)
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	019b      	lsls	r3, r3, #6
 800d67c:	4618      	mov	r0, r3
 800d67e:	f001 fa47 	bl	800eb10 <SUBGRF_SetRx>
}
 800d682:	bf00      	nop
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	20006e24 	.word	0x20006e24

0800d690 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800d698:	f002 fa6f 	bl	800fb7a <RFW_Is_Init>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d102      	bne.n	800d6a8 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800d6a2:	f002 fa92 	bl	800fbca <RFW_ReceiveInit>
 800d6a6:	e007      	b.n	800d6b8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f240 2162 	movw	r1, #610	; 0x262
 800d6b0:	f240 2062 	movw	r0, #610	; 0x262
 800d6b4:	f001 fbc4 	bl	800ee40 <SUBGRF_SetDioIrqParams>
    {
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800d6b8:	4b0e      	ldr	r3, [pc, #56]	; (800d6f4 <RadioRxBoosted+0x64>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800d6be:	4b0d      	ldr	r3, [pc, #52]	; (800d6f4 <RadioRxBoosted+0x64>)
 800d6c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f002 f85e 	bl	800f788 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800d6cc:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <RadioRxBoosted+0x64>)
 800d6ce:	785b      	ldrb	r3, [r3, #1]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d004      	beq.n	800d6de <RadioRxBoosted+0x4e>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800d6d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d6d8:	f001 fa3a 	bl	800eb50 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800d6dc:	e005      	b.n	800d6ea <RadioRxBoosted+0x5a>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800d6de:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <RadioRxBoosted+0x64>)
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	019b      	lsls	r3, r3, #6
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f001 fa33 	bl	800eb50 <SUBGRF_SetRxBoosted>
}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	20006e24 	.word	0x20006e24

0800d6f8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	005a      	lsls	r2, r3, #1
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	4413      	add	r3, r2
 800d70a:	4a0c      	ldr	r2, [pc, #48]	; (800d73c <RadioSetRxDutyCycle+0x44>)
 800d70c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d70e:	2300      	movs	r3, #0
 800d710:	2200      	movs	r2, #0
 800d712:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d716:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d71a:	f001 fb91 	bl	800ee40 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800d71e:	4b07      	ldr	r3, [pc, #28]	; (800d73c <RadioSetRxDutyCycle+0x44>)
 800d720:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d724:	2100      	movs	r1, #0
 800d726:	4618      	mov	r0, r3
 800d728:	f002 f82e 	bl	800f788 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f001 fa32 	bl	800eb98 <SUBGRF_SetRxDutyCycle>
}
 800d734:	bf00      	nop
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	20006e24 	.word	0x20006e24

0800d740 <RadioStartCad>:

static void RadioStartCad( void )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800d744:	4b09      	ldr	r3, [pc, #36]	; (800d76c <RadioStartCad+0x2c>)
 800d746:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d74a:	2100      	movs	r1, #0
 800d74c:	4618      	mov	r0, r3
 800d74e:	f002 f81b 	bl	800f788 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800d752:	2300      	movs	r3, #0
 800d754:	2200      	movs	r2, #0
 800d756:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800d75a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800d75e:	f001 fb6f 	bl	800ee40 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800d762:	f001 fa45 	bl	800ebf0 <SUBGRF_SetCad>
}
 800d766:	bf00      	nop
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20006e24 	.word	0x20006e24

0800d770 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
 800d77c:	4613      	mov	r3, r2
 800d77e:	803b      	strh	r3, [r7, #0]
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    //uint32_t timeout = ( uint32_t )time * 1000;
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f001 fbb9 	bl	800eef8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800d786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f002 f824 	bl	800f7d8 <SUBGRF_SetRfTxPower>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800d794:	210e      	movs	r1, #14
 800d796:	f640 101f 	movw	r0, #2335	; 0x91f
 800d79a:	f001 ff01 	bl	800f5a0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
 800d7a0:	2101      	movs	r1, #1
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 fff0 	bl	800f788 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800d7a8:	f001 fa30 	bl	800ec0c <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 800d7ac:	bf00      	nop
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800d7be:	f001 fe5c 	bl	800f47a <SUBGRF_GetRssiInst>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	b21b      	sxth	r3, r3
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	460a      	mov	r2, r1
 800d7d8:	80fb      	strh	r3, [r7, #6]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800d7de:	797a      	ldrb	r2, [r7, #5]
 800d7e0:	88fb      	ldrh	r3, [r7, #6]
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f001 fedb 	bl	800f5a0 <SUBGRF_WriteRegister>
}
 800d7ea:	bf00      	nop
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b082      	sub	sp, #8
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800d7fc:	88fb      	ldrh	r3, [r7, #6]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fee2 	bl	800f5c8 <SUBGRF_ReadRegister>
 800d804:	4603      	mov	r3, r0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	4603      	mov	r3, r0
 800d816:	6039      	str	r1, [r7, #0]
 800d818:	80fb      	strh	r3, [r7, #6]
 800d81a:	4613      	mov	r3, r2
 800d81c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800d81e:	797b      	ldrb	r3, [r7, #5]
 800d820:	b29a      	uxth	r2, r3
 800d822:	88fb      	ldrh	r3, [r7, #6]
 800d824:	6839      	ldr	r1, [r7, #0]
 800d826:	4618      	mov	r0, r3
 800d828:	f001 fee2 	bl	800f5f0 <SUBGRF_WriteRegisters>
}
 800d82c:	bf00      	nop
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	80fb      	strh	r3, [r7, #6]
 800d840:	4613      	mov	r3, r2
 800d842:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800d844:	797b      	ldrb	r3, [r7, #5]
 800d846:	b29a      	uxth	r2, r3
 800d848:	88fb      	ldrh	r3, [r7, #6]
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f001 fef1 	bl	800f634 <SUBGRF_ReadRegisters>
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	4603      	mov	r3, r0
 800d864:	460a      	mov	r2, r1
 800d866:	71fb      	strb	r3, [r7, #7]
 800d868:	4613      	mov	r3, r2
 800d86a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800d86c:	79fb      	ldrb	r3, [r7, #7]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d10a      	bne.n	800d888 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800d872:	4a0e      	ldr	r2, [pc, #56]	; (800d8ac <RadioSetMaxPayloadLength+0x50>)
 800d874:	79bb      	ldrb	r3, [r7, #6]
 800d876:	7013      	strb	r3, [r2, #0]
 800d878:	4b0c      	ldr	r3, [pc, #48]	; (800d8ac <RadioSetMaxPayloadLength+0x50>)
 800d87a:	781a      	ldrb	r2, [r3, #0]
 800d87c:	4b0c      	ldr	r3, [pc, #48]	; (800d8b0 <RadioSetMaxPayloadLength+0x54>)
 800d87e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d880:	480c      	ldr	r0, [pc, #48]	; (800d8b4 <RadioSetMaxPayloadLength+0x58>)
 800d882:	f001 fd45 	bl	800f310 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800d886:	e00d      	b.n	800d8a4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800d888:	4b09      	ldr	r3, [pc, #36]	; (800d8b0 <RadioSetMaxPayloadLength+0x54>)
 800d88a:	7d5b      	ldrb	r3, [r3, #21]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d109      	bne.n	800d8a4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800d890:	4a06      	ldr	r2, [pc, #24]	; (800d8ac <RadioSetMaxPayloadLength+0x50>)
 800d892:	79bb      	ldrb	r3, [r7, #6]
 800d894:	7013      	strb	r3, [r2, #0]
 800d896:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <RadioSetMaxPayloadLength+0x50>)
 800d898:	781a      	ldrb	r2, [r3, #0]
 800d89a:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <RadioSetMaxPayloadLength+0x54>)
 800d89c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d89e:	4805      	ldr	r0, [pc, #20]	; (800d8b4 <RadioSetMaxPayloadLength+0x58>)
 800d8a0:	f001 fd36 	bl	800f310 <SUBGRF_SetPacketParams>
}
 800d8a4:	bf00      	nop
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	20000652 	.word	0x20000652
 800d8b0:	20006e24 	.word	0x20006e24
 800d8b4:	20006e32 	.word	0x20006e32

0800d8b8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800d8c2:	4a13      	ldr	r2, [pc, #76]	; (800d910 <RadioSetPublicNetwork+0x58>)
 800d8c4:	79fb      	ldrb	r3, [r7, #7]
 800d8c6:	7313      	strb	r3, [r2, #12]
 800d8c8:	4b11      	ldr	r3, [pc, #68]	; (800d910 <RadioSetPublicNetwork+0x58>)
 800d8ca:	7b1a      	ldrb	r2, [r3, #12]
 800d8cc:	4b10      	ldr	r3, [pc, #64]	; (800d910 <RadioSetPublicNetwork+0x58>)
 800d8ce:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800d8d0:	2001      	movs	r0, #1
 800d8d2:	f7ff f83b 	bl	800c94c <RadioSetModem>
    if( enable == true )
 800d8d6:	79fb      	ldrb	r3, [r7, #7]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00a      	beq.n	800d8f2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800d8dc:	2134      	movs	r1, #52	; 0x34
 800d8de:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d8e2:	f001 fe5d 	bl	800f5a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800d8e6:	2144      	movs	r1, #68	; 0x44
 800d8e8:	f240 7041 	movw	r0, #1857	; 0x741
 800d8ec:	f001 fe58 	bl	800f5a0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800d8f0:	e009      	b.n	800d906 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800d8f2:	2114      	movs	r1, #20
 800d8f4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d8f8:	f001 fe52 	bl	800f5a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800d8fc:	2124      	movs	r1, #36	; 0x24
 800d8fe:	f240 7041 	movw	r0, #1857	; 0x741
 800d902:	f001 fe4d 	bl	800f5a0 <SUBGRF_WriteRegister>
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	20006e24 	.word	0x20006e24

0800d914 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800d918:	f001 ff92 	bl	800f840 <SUBGRF_GetRadioWakeUpTime>
 800d91c:	4603      	mov	r3, r0
 800d91e:	3303      	adds	r3, #3
}
 800d920:	4618      	mov	r0, r3
 800d922:	bd80      	pop	{r7, pc}

0800d924 <RadioOnDioIrq>:
    }
}
*/

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800d92e:	4a05      	ldr	r2, [pc, #20]	; (800d944 <RadioOnDioIrq+0x20>)
 800d930:	88fb      	ldrh	r3, [r7, #6]
 800d932:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800d936:	f000 f807 	bl	800d948 <RadioIrqProcess>
}
 800d93a:	bf00      	nop
 800d93c:	3708      	adds	r7, #8
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	20006e24 	.word	0x20006e24

0800d948 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800d948:	b590      	push	{r4, r7, lr}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800d956:	4b9f      	ldr	r3, [pc, #636]	; (800dbd4 <RadioIrqProcess+0x28c>)
 800d958:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d95c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d960:	f000 8106 	beq.w	800db70 <RadioIrqProcess+0x228>
 800d964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d968:	f300 81ad 	bgt.w	800dcc6 <RadioIrqProcess+0x37e>
 800d96c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d970:	f000 80ea 	beq.w	800db48 <RadioIrqProcess+0x200>
 800d974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d978:	f300 81a5 	bgt.w	800dcc6 <RadioIrqProcess+0x37e>
 800d97c:	2b80      	cmp	r3, #128	; 0x80
 800d97e:	f000 80cf 	beq.w	800db20 <RadioIrqProcess+0x1d8>
 800d982:	2b80      	cmp	r3, #128	; 0x80
 800d984:	f300 819f 	bgt.w	800dcc6 <RadioIrqProcess+0x37e>
 800d988:	2b20      	cmp	r3, #32
 800d98a:	dc49      	bgt.n	800da20 <RadioIrqProcess+0xd8>
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f340 819a 	ble.w	800dcc6 <RadioIrqProcess+0x37e>
 800d992:	3b01      	subs	r3, #1
 800d994:	2b1f      	cmp	r3, #31
 800d996:	f200 8196 	bhi.w	800dcc6 <RadioIrqProcess+0x37e>
 800d99a:	a201      	add	r2, pc, #4	; (adr r2, 800d9a0 <RadioIrqProcess+0x58>)
 800d99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a0:	0800da29 	.word	0x0800da29
 800d9a4:	0800da5d 	.word	0x0800da5d
 800d9a8:	0800dcc7 	.word	0x0800dcc7
 800d9ac:	0800dbe9 	.word	0x0800dbe9
 800d9b0:	0800dcc7 	.word	0x0800dcc7
 800d9b4:	0800dcc7 	.word	0x0800dcc7
 800d9b8:	0800dcc7 	.word	0x0800dcc7
 800d9bc:	0800dc57 	.word	0x0800dc57
 800d9c0:	0800dcc7 	.word	0x0800dcc7
 800d9c4:	0800dcc7 	.word	0x0800dcc7
 800d9c8:	0800dcc7 	.word	0x0800dcc7
 800d9cc:	0800dcc7 	.word	0x0800dcc7
 800d9d0:	0800dcc7 	.word	0x0800dcc7
 800d9d4:	0800dcc7 	.word	0x0800dcc7
 800d9d8:	0800dcc7 	.word	0x0800dcc7
 800d9dc:	0800dcc7 	.word	0x0800dcc7
 800d9e0:	0800dcc7 	.word	0x0800dcc7
 800d9e4:	0800dcc7 	.word	0x0800dcc7
 800d9e8:	0800dcc7 	.word	0x0800dcc7
 800d9ec:	0800dcc7 	.word	0x0800dcc7
 800d9f0:	0800dcc7 	.word	0x0800dcc7
 800d9f4:	0800dcc7 	.word	0x0800dcc7
 800d9f8:	0800dcc7 	.word	0x0800dcc7
 800d9fc:	0800dcc7 	.word	0x0800dcc7
 800da00:	0800dcc7 	.word	0x0800dcc7
 800da04:	0800dcc7 	.word	0x0800dcc7
 800da08:	0800dcc7 	.word	0x0800dcc7
 800da0c:	0800dcc7 	.word	0x0800dcc7
 800da10:	0800dcc7 	.word	0x0800dcc7
 800da14:	0800dcc7 	.word	0x0800dcc7
 800da18:	0800dcc7 	.word	0x0800dcc7
 800da1c:	0800dc67 	.word	0x0800dc67
 800da20:	2b40      	cmp	r3, #64	; 0x40
 800da22:	f000 8138 	beq.w	800dc96 <RadioIrqProcess+0x34e>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800da26:	e14e      	b.n	800dcc6 <RadioIrqProcess+0x37e>
        SUBGRF_SetStandby( STDBY_RC );
 800da28:	2000      	movs	r0, #0
 800da2a:	f001 f835 	bl	800ea98 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800da2e:	f002 f8ab 	bl	800fb88 <RFW_Is_LongPacketModeEnabled>
 800da32:	4603      	mov	r3, r0
 800da34:	2b01      	cmp	r3, #1
 800da36:	d101      	bne.n	800da3c <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 800da38:	f002 f8cf 	bl	800fbda <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800da3c:	4b66      	ldr	r3, [pc, #408]	; (800dbd8 <RadioIrqProcess+0x290>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f000 8142 	beq.w	800dcca <RadioIrqProcess+0x382>
 800da46:	4b64      	ldr	r3, [pc, #400]	; (800dbd8 <RadioIrqProcess+0x290>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 813c 	beq.w	800dcca <RadioIrqProcess+0x382>
            RadioEvents->TxDone( );
 800da52:	4b61      	ldr	r3, [pc, #388]	; (800dbd8 <RadioIrqProcess+0x290>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4798      	blx	r3
        break;
 800da5a:	e136      	b.n	800dcca <RadioIrqProcess+0x382>
        if( SubgRf.RxContinuous == false )
 800da5c:	4b5d      	ldr	r3, [pc, #372]	; (800dbd4 <RadioIrqProcess+0x28c>)
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	f083 0301 	eor.w	r3, r3, #1
 800da64:	b2db      	uxtb	r3, r3
 800da66:	2b00      	cmp	r3, #0
 800da68:	d014      	beq.n	800da94 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 800da6a:	2000      	movs	r0, #0
 800da6c:	f001 f814 	bl	800ea98 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800da70:	2100      	movs	r1, #0
 800da72:	f640 1002 	movw	r0, #2306	; 0x902
 800da76:	f001 fd93 	bl	800f5a0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800da7a:	f640 1044 	movw	r0, #2372	; 0x944
 800da7e:	f001 fda3 	bl	800f5c8 <SUBGRF_ReadRegister>
 800da82:	4603      	mov	r3, r0
 800da84:	f043 0302 	orr.w	r3, r3, #2
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	4619      	mov	r1, r3
 800da8c:	f640 1044 	movw	r0, #2372	; 0x944
 800da90:	f001 fd86 	bl	800f5a0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800da94:	1dfb      	adds	r3, r7, #7
 800da96:	22ff      	movs	r2, #255	; 0xff
 800da98:	4619      	mov	r1, r3
 800da9a:	4850      	ldr	r0, [pc, #320]	; (800dbdc <RadioIrqProcess+0x294>)
 800da9c:	f000 fecc 	bl	800e838 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800daa0:	484f      	ldr	r0, [pc, #316]	; (800dbe0 <RadioIrqProcess+0x298>)
 800daa2:	f001 fd2b 	bl	800f4fc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800daa6:	4b4c      	ldr	r3, [pc, #304]	; (800dbd8 <RadioIrqProcess+0x290>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d036      	beq.n	800db1c <RadioIrqProcess+0x1d4>
 800daae:	4b4a      	ldr	r3, [pc, #296]	; (800dbd8 <RadioIrqProcess+0x290>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d031      	beq.n	800db1c <RadioIrqProcess+0x1d4>
            switch( SubgRf.PacketStatus.packetType )
 800dab8:	4b46      	ldr	r3, [pc, #280]	; (800dbd4 <RadioIrqProcess+0x28c>)
 800daba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d10e      	bne.n	800dae0 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800dac2:	4b45      	ldr	r3, [pc, #276]	; (800dbd8 <RadioIrqProcess+0x290>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689c      	ldr	r4, [r3, #8]
 800dac8:	79fb      	ldrb	r3, [r7, #7]
 800daca:	b299      	uxth	r1, r3
 800dacc:	4b41      	ldr	r3, [pc, #260]	; (800dbd4 <RadioIrqProcess+0x28c>)
 800dace:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800dad2:	b21a      	sxth	r2, r3
 800dad4:	4b3f      	ldr	r3, [pc, #252]	; (800dbd4 <RadioIrqProcess+0x28c>)
 800dad6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800dada:	4840      	ldr	r0, [pc, #256]	; (800dbdc <RadioIrqProcess+0x294>)
 800dadc:	47a0      	blx	r4
                break;
 800dade:	e01e      	b.n	800db1e <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800dae0:	4b3c      	ldr	r3, [pc, #240]	; (800dbd4 <RadioIrqProcess+0x28c>)
 800dae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae4:	463a      	mov	r2, r7
 800dae6:	4611      	mov	r1, r2
 800dae8:	4618      	mov	r0, r3
 800daea:	f001 ff9b 	bl	800fa24 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800daee:	4b3a      	ldr	r3, [pc, #232]	; (800dbd8 <RadioIrqProcess+0x290>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	689c      	ldr	r4, [r3, #8]
 800daf4:	79fb      	ldrb	r3, [r7, #7]
 800daf6:	b299      	uxth	r1, r3
 800daf8:	4b36      	ldr	r3, [pc, #216]	; (800dbd4 <RadioIrqProcess+0x28c>)
 800dafa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800dafe:	b218      	sxth	r0, r3
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800db06:	4a37      	ldr	r2, [pc, #220]	; (800dbe4 <RadioIrqProcess+0x29c>)
 800db08:	fb82 c203 	smull	ip, r2, r2, r3
 800db0c:	1192      	asrs	r2, r2, #6
 800db0e:	17db      	asrs	r3, r3, #31
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	b25b      	sxtb	r3, r3
 800db14:	4602      	mov	r2, r0
 800db16:	4831      	ldr	r0, [pc, #196]	; (800dbdc <RadioIrqProcess+0x294>)
 800db18:	47a0      	blx	r4
                break;
 800db1a:	e000      	b.n	800db1e <RadioIrqProcess+0x1d6>
        }
 800db1c:	bf00      	nop
        break;
 800db1e:	e0e3      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        SUBGRF_SetStandby( STDBY_RC );
 800db20:	2000      	movs	r0, #0
 800db22:	f000 ffb9 	bl	800ea98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800db26:	4b2c      	ldr	r3, [pc, #176]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 80cf 	beq.w	800dcce <RadioIrqProcess+0x386>
 800db30:	4b29      	ldr	r3, [pc, #164]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	2b00      	cmp	r3, #0
 800db38:	f000 80c9 	beq.w	800dcce <RadioIrqProcess+0x386>
            RadioEvents->CadDone( false );
 800db3c:	4b26      	ldr	r3, [pc, #152]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	2000      	movs	r0, #0
 800db44:	4798      	blx	r3
        break;
 800db46:	e0c2      	b.n	800dcce <RadioIrqProcess+0x386>
        SUBGRF_SetStandby( STDBY_RC );
 800db48:	2000      	movs	r0, #0
 800db4a:	f000 ffa5 	bl	800ea98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800db4e:	4b22      	ldr	r3, [pc, #136]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	f000 80bd 	beq.w	800dcd2 <RadioIrqProcess+0x38a>
 800db58:	4b1f      	ldr	r3, [pc, #124]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	699b      	ldr	r3, [r3, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f000 80b7 	beq.w	800dcd2 <RadioIrqProcess+0x38a>
            RadioEvents->CadDone( true );
 800db64:	4b1c      	ldr	r3, [pc, #112]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	2001      	movs	r0, #1
 800db6c:	4798      	blx	r3
        break;
 800db6e:	e0b0      	b.n	800dcd2 <RadioIrqProcess+0x38a>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800db70:	f000 fe48 	bl	800e804 <SUBGRF_GetOperatingMode>
 800db74:	4603      	mov	r3, r0
 800db76:	2b04      	cmp	r3, #4
 800db78:	d112      	bne.n	800dba0 <RadioIrqProcess+0x258>
            SUBGRF_SetStandby( STDBY_RC );
 800db7a:	2000      	movs	r0, #0
 800db7c:	f000 ff8c 	bl	800ea98 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800db80:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 80a6 	beq.w	800dcd6 <RadioIrqProcess+0x38e>
 800db8a:	4b13      	ldr	r3, [pc, #76]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 80a0 	beq.w	800dcd6 <RadioIrqProcess+0x38e>
                RadioEvents->TxTimeout( );
 800db96:	4b10      	ldr	r3, [pc, #64]	; (800dbd8 <RadioIrqProcess+0x290>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	4798      	blx	r3
        break;
 800db9e:	e09a      	b.n	800dcd6 <RadioIrqProcess+0x38e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800dba0:	f000 fe30 	bl	800e804 <SUBGRF_GetOperatingMode>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b05      	cmp	r3, #5
 800dba8:	f040 8095 	bne.w	800dcd6 <RadioIrqProcess+0x38e>
            SUBGRF_SetStandby( STDBY_RC );
 800dbac:	2000      	movs	r0, #0
 800dbae:	f000 ff73 	bl	800ea98 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800dbb2:	4b09      	ldr	r3, [pc, #36]	; (800dbd8 <RadioIrqProcess+0x290>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 808d 	beq.w	800dcd6 <RadioIrqProcess+0x38e>
 800dbbc:	4b06      	ldr	r3, [pc, #24]	; (800dbd8 <RadioIrqProcess+0x290>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 8087 	beq.w	800dcd6 <RadioIrqProcess+0x38e>
                RadioEvents->RxTimeout( );
 800dbc8:	4b03      	ldr	r3, [pc, #12]	; (800dbd8 <RadioIrqProcess+0x290>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	4798      	blx	r3
        break;
 800dbd0:	e081      	b.n	800dcd6 <RadioIrqProcess+0x38e>
 800dbd2:	bf00      	nop
 800dbd4:	20006e24 	.word	0x20006e24
 800dbd8:	20006e20 	.word	0x20006e20
 800dbdc:	20006d20 	.word	0x20006d20
 800dbe0:	20006e48 	.word	0x20006e48
 800dbe4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800dbe8:	4b41      	ldr	r3, [pc, #260]	; (800dcf0 <RadioIrqProcess+0x3a8>)
 800dbea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d074      	beq.n	800dcda <RadioIrqProcess+0x392>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800dbf0:	4a40      	ldr	r2, [pc, #256]	; (800dcf4 <RadioIrqProcess+0x3ac>)
 800dbf2:	4b3f      	ldr	r3, [pc, #252]	; (800dcf0 <RadioIrqProcess+0x3a8>)
 800dbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf6:	0c1b      	lsrs	r3, r3, #16
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	f640 1003 	movw	r0, #2307	; 0x903
 800dc00:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800dc02:	4a3c      	ldr	r2, [pc, #240]	; (800dcf4 <RadioIrqProcess+0x3ac>)
 800dc04:	4b3a      	ldr	r3, [pc, #232]	; (800dcf0 <RadioIrqProcess+0x3a8>)
 800dc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc08:	0a1b      	lsrs	r3, r3, #8
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	f640 1004 	movw	r0, #2308	; 0x904
 800dc12:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800dc14:	4a37      	ldr	r2, [pc, #220]	; (800dcf4 <RadioIrqProcess+0x3ac>)
 800dc16:	4b36      	ldr	r3, [pc, #216]	; (800dcf0 <RadioIrqProcess+0x3a8>)
 800dc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	f640 1005 	movw	r0, #2309	; 0x905
 800dc22:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800dc24:	4c33      	ldr	r4, [pc, #204]	; (800dcf4 <RadioIrqProcess+0x3ac>)
 800dc26:	4b34      	ldr	r3, [pc, #208]	; (800dcf8 <RadioIrqProcess+0x3b0>)
 800dc28:	f640 1002 	movw	r0, #2306	; 0x902
 800dc2c:	4798      	blx	r3
 800dc2e:	4603      	mov	r3, r0
 800dc30:	f043 0301 	orr.w	r3, r3, #1
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	4619      	mov	r1, r3
 800dc38:	f640 1002 	movw	r0, #2306	; 0x902
 800dc3c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800dc3e:	4b2c      	ldr	r3, [pc, #176]	; (800dcf0 <RadioIrqProcess+0x3a8>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800dc44:	2300      	movs	r3, #0
 800dc46:	2200      	movs	r2, #0
 800dc48:	f240 2162 	movw	r1, #610	; 0x262
 800dc4c:	f240 2062 	movw	r0, #610	; 0x262
 800dc50:	f001 f8f6 	bl	800ee40 <SUBGRF_SetDioIrqParams>
        break;
 800dc54:	e041      	b.n	800dcda <RadioIrqProcess+0x392>
        if( 1UL == RFW_Is_Init( ) )
 800dc56:	f001 ff90 	bl	800fb7a <RFW_Is_Init>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d13e      	bne.n	800dcde <RadioIrqProcess+0x396>
            RFW_ReceivePayload( );
 800dc60:	f001 ffc1 	bl	800fbe6 <RFW_ReceivePayload>
        break;
 800dc64:	e03b      	b.n	800dcde <RadioIrqProcess+0x396>
        if( SubgRf.RxContinuous == false )
 800dc66:	4b22      	ldr	r3, [pc, #136]	; (800dcf0 <RadioIrqProcess+0x3a8>)
 800dc68:	785b      	ldrb	r3, [r3, #1]
 800dc6a:	f083 0301 	eor.w	r3, r3, #1
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <RadioIrqProcess+0x332>
            SUBGRF_SetStandby( STDBY_RC );
 800dc74:	2000      	movs	r0, #0
 800dc76:	f000 ff0f 	bl	800ea98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800dc7a:	4b20      	ldr	r3, [pc, #128]	; (800dcfc <RadioIrqProcess+0x3b4>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d02f      	beq.n	800dce2 <RadioIrqProcess+0x39a>
 800dc82:	4b1e      	ldr	r3, [pc, #120]	; (800dcfc <RadioIrqProcess+0x3b4>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d02a      	beq.n	800dce2 <RadioIrqProcess+0x39a>
            RadioEvents->RxTimeout( );
 800dc8c:	4b1b      	ldr	r3, [pc, #108]	; (800dcfc <RadioIrqProcess+0x3b4>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	4798      	blx	r3
        break;
 800dc94:	e025      	b.n	800dce2 <RadioIrqProcess+0x39a>
        if( SubgRf.RxContinuous == false )
 800dc96:	4b16      	ldr	r3, [pc, #88]	; (800dcf0 <RadioIrqProcess+0x3a8>)
 800dc98:	785b      	ldrb	r3, [r3, #1]
 800dc9a:	f083 0301 	eor.w	r3, r3, #1
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <RadioIrqProcess+0x362>
            SUBGRF_SetStandby( STDBY_RC );
 800dca4:	2000      	movs	r0, #0
 800dca6:	f000 fef7 	bl	800ea98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800dcaa:	4b14      	ldr	r3, [pc, #80]	; (800dcfc <RadioIrqProcess+0x3b4>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d019      	beq.n	800dce6 <RadioIrqProcess+0x39e>
 800dcb2:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <RadioIrqProcess+0x3b4>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d014      	beq.n	800dce6 <RadioIrqProcess+0x39e>
            RadioEvents->RxError( );
 800dcbc:	4b0f      	ldr	r3, [pc, #60]	; (800dcfc <RadioIrqProcess+0x3b4>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	4798      	blx	r3
        break;
 800dcc4:	e00f      	b.n	800dce6 <RadioIrqProcess+0x39e>
        break;
 800dcc6:	bf00      	nop
 800dcc8:	e00e      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dcca:	bf00      	nop
 800dccc:	e00c      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dcce:	bf00      	nop
 800dcd0:	e00a      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dcd2:	bf00      	nop
 800dcd4:	e008      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dcd6:	bf00      	nop
 800dcd8:	e006      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dcda:	bf00      	nop
 800dcdc:	e004      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dcde:	bf00      	nop
 800dce0:	e002      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dce2:	bf00      	nop
 800dce4:	e000      	b.n	800dce8 <RadioIrqProcess+0x3a0>
        break;
 800dce6:	bf00      	nop
    }
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd90      	pop	{r4, r7, pc}
 800dcf0:	20006e24 	.word	0x20006e24
 800dcf4:	0800d7cf 	.word	0x0800d7cf
 800dcf8:	0800d7f3 	.word	0x0800d7f3
 800dcfc:	20006e20 	.word	0x20006e20

0800dd00 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800dd04:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <RadioTxPrbs+0x2c>)
 800dd06:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800dd0a:	2101      	movs	r1, #1
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f001 fd3b 	bl	800f788 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800dd12:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <RadioTxPrbs+0x30>)
 800dd14:	212d      	movs	r1, #45	; 0x2d
 800dd16:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800dd1a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800dd1c:	f000 ff7f 	bl	800ec1e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800dd20:	4804      	ldr	r0, [pc, #16]	; (800dd34 <RadioTxPrbs+0x34>)
 800dd22:	f000 fed5 	bl	800ead0 <SUBGRF_SetTx>
}
 800dd26:	bf00      	nop
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20006e24 	.word	0x20006e24
 800dd30:	0800d7cf 	.word	0x0800d7cf
 800dd34:	000fffff 	.word	0x000fffff

0800dd38 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800dd42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f001 fd46 	bl	800f7d8 <SUBGRF_SetRfTxPower>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800dd50:	210e      	movs	r1, #14
 800dd52:	f640 101f 	movw	r0, #2335	; 0x91f
 800dd56:	f001 fc23 	bl	800f5a0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f001 fd12 	bl	800f788 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800dd64:	f000 ff52 	bl	800ec0c <SUBGRF_SetTxContinuousWave>
}
 800dd68:	bf00      	nop
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800dd70:	b480      	push	{r7}
 800dd72:	b089      	sub	sp, #36	; 0x24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800dd82:	2300      	movs	r3, #0
 800dd84:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800dd86:	2300      	movs	r3, #0
 800dd88:	61bb      	str	r3, [r7, #24]
 800dd8a:	e011      	b.n	800ddb0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	4413      	add	r3, r2
 800dd92:	781a      	ldrb	r2, [r3, #0]
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	68b9      	ldr	r1, [r7, #8]
 800dd98:	440b      	add	r3, r1
 800dd9a:	43d2      	mvns	r2, r2
 800dd9c:	b2d2      	uxtb	r2, r2
 800dd9e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	4413      	add	r3, r2
 800dda6:	2200      	movs	r2, #0
 800dda8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	3301      	adds	r3, #1
 800ddae:	61bb      	str	r3, [r7, #24]
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	69ba      	ldr	r2, [r7, #24]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	dbe9      	blt.n	800dd8c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800ddb8:	2300      	movs	r3, #0
 800ddba:	61bb      	str	r3, [r7, #24]
 800ddbc:	e049      	b.n	800de52 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	425a      	negs	r2, r3
 800ddc2:	f003 0307 	and.w	r3, r3, #7
 800ddc6:	f002 0207 	and.w	r2, r2, #7
 800ddca:	bf58      	it	pl
 800ddcc:	4253      	negpl	r3, r2
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	f1c3 0307 	rsb	r3, r3, #7
 800ddd4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	da00      	bge.n	800ddde <payload_integration+0x6e>
 800dddc:	3307      	adds	r3, #7
 800ddde:	10db      	asrs	r3, r3, #3
 800dde0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	3301      	adds	r3, #1
 800dde6:	425a      	negs	r2, r3
 800dde8:	f003 0307 	and.w	r3, r3, #7
 800ddec:	f002 0207 	and.w	r2, r2, #7
 800ddf0:	bf58      	it	pl
 800ddf2:	4253      	negpl	r3, r2
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	f1c3 0307 	rsb	r3, r3, #7
 800ddfa:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	3301      	adds	r3, #1
 800de00:	2b00      	cmp	r3, #0
 800de02:	da00      	bge.n	800de06 <payload_integration+0x96>
 800de04:	3307      	adds	r3, #7
 800de06:	10db      	asrs	r3, r3, #3
 800de08:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800de0a:	7dbb      	ldrb	r3, [r7, #22]
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	4413      	add	r3, r2
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	7dfb      	ldrb	r3, [r7, #23]
 800de16:	fa42 f303 	asr.w	r3, r2, r3
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800de22:	7ffa      	ldrb	r2, [r7, #31]
 800de24:	7cfb      	ldrb	r3, [r7, #19]
 800de26:	4053      	eors	r3, r2
 800de28:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800de2a:	7d3b      	ldrb	r3, [r7, #20]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	4413      	add	r3, r2
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	b25a      	sxtb	r2, r3
 800de34:	7ff9      	ldrb	r1, [r7, #31]
 800de36:	7d7b      	ldrb	r3, [r7, #21]
 800de38:	fa01 f303 	lsl.w	r3, r1, r3
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	4313      	orrs	r3, r2
 800de40:	b259      	sxtb	r1, r3
 800de42:	7d3b      	ldrb	r3, [r7, #20]
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	4413      	add	r3, r2
 800de48:	b2ca      	uxtb	r2, r1
 800de4a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	3301      	adds	r3, #1
 800de50:	61bb      	str	r3, [r7, #24]
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	69ba      	ldr	r2, [r7, #24]
 800de58:	429a      	cmp	r2, r3
 800de5a:	dbb0      	blt.n	800ddbe <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800de5c:	7ffb      	ldrb	r3, [r7, #31]
 800de5e:	01db      	lsls	r3, r3, #7
 800de60:	b25a      	sxtb	r2, r3
 800de62:	7ffb      	ldrb	r3, [r7, #31]
 800de64:	019b      	lsls	r3, r3, #6
 800de66:	b25b      	sxtb	r3, r3
 800de68:	4313      	orrs	r3, r2
 800de6a:	b25b      	sxtb	r3, r3
 800de6c:	7ffa      	ldrb	r2, [r7, #31]
 800de6e:	2a00      	cmp	r2, #0
 800de70:	d101      	bne.n	800de76 <payload_integration+0x106>
 800de72:	2220      	movs	r2, #32
 800de74:	e000      	b.n	800de78 <payload_integration+0x108>
 800de76:	2200      	movs	r2, #0
 800de78:	4313      	orrs	r3, r2
 800de7a:	b259      	sxtb	r1, r3
 800de7c:	79fb      	ldrb	r3, [r7, #7]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	4413      	add	r3, r2
 800de82:	b2ca      	uxtb	r2, r1
 800de84:	701a      	strb	r2, [r3, #0]
}
 800de86:	bf00      	nop
 800de88:	3724      	adds	r7, #36	; 0x24
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bc80      	pop	{r7}
 800de8e:	4770      	bx	lr

0800de90 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08c      	sub	sp, #48	; 0x30
 800de94:	af00      	add	r7, sp, #0
 800de96:	60b9      	str	r1, [r7, #8]
 800de98:	607a      	str	r2, [r7, #4]
 800de9a:	603b      	str	r3, [r7, #0]
 800de9c:	4603      	mov	r3, r0
 800de9e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800dea0:	2300      	movs	r3, #0
 800dea2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800dea4:	2300      	movs	r3, #0
 800dea6:	623b      	str	r3, [r7, #32]
 800dea8:	2300      	movs	r3, #0
 800deaa:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800deac:	f001 fe5f 	bl	800fb6e <RFW_DeInit>

    if( rxContinuous != 0 )
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	bf14      	ite	ne
 800dec0:	2301      	movne	r3, #1
 800dec2:	2300      	moveq	r3, #0
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	4ba3      	ldr	r3, [pc, #652]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800dec8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d003      	beq.n	800ded8 <RadioSetRxGenericConfig+0x48>
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	f000 80dc 	beq.w	800e08e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800ded6:	e194      	b.n	800e202 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d003      	beq.n	800dee8 <RadioSetRxGenericConfig+0x58>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d102      	bne.n	800deee <RadioSetRxGenericConfig+0x5e>
            return -1;
 800dee8:	f04f 33ff 	mov.w	r3, #4294967295
 800deec:	e18a      	b.n	800e204 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	7f9b      	ldrb	r3, [r3, #30]
 800def2:	2b08      	cmp	r3, #8
 800def4:	d902      	bls.n	800defc <RadioSetRxGenericConfig+0x6c>
            return -1;
 800def6:	f04f 33ff 	mov.w	r3, #4294967295
 800defa:	e183      	b.n	800e204 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	6919      	ldr	r1, [r3, #16]
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	7f9b      	ldrb	r3, [r3, #30]
 800df04:	b29a      	uxth	r2, r3
 800df06:	f107 0320 	add.w	r3, r7, #32
 800df0a:	4618      	mov	r0, r3
 800df0c:	f008 fe3c 	bl	8016b88 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	bf14      	ite	ne
 800df18:	2301      	movne	r3, #1
 800df1a:	2300      	moveq	r3, #0
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 fe86 	bl	800ec30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800df24:	4b8b      	ldr	r3, [pc, #556]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df26:	2200      	movs	r2, #0
 800df28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	4a88      	ldr	r2, [pc, #544]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df32:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df3a:	4b86      	ldr	r3, [pc, #536]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	f001 fd45 	bl	800f9d4 <SUBGRF_GetFskBandwidthRegValue>
 800df4a:	4603      	mov	r3, r0
 800df4c:	461a      	mov	r2, r3
 800df4e:	4b81      	ldr	r3, [pc, #516]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800df54:	4b7f      	ldr	r3, [pc, #508]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df56:	2200      	movs	r2, #0
 800df58:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	b29b      	uxth	r3, r3
 800df60:	00db      	lsls	r3, r3, #3
 800df62:	b29a      	uxth	r2, r3
 800df64:	4b7b      	ldr	r3, [pc, #492]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df66:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	7fda      	ldrb	r2, [r3, #31]
 800df6c:	4b79      	ldr	r3, [pc, #484]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df6e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	7f9b      	ldrb	r3, [r3, #30]
 800df74:	00db      	lsls	r3, r3, #3
 800df76:	b2da      	uxtb	r2, r3
 800df78:	4b76      	ldr	r3, [pc, #472]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df7a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df82:	4b74      	ldr	r3, [pc, #464]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df84:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d105      	bne.n	800df9c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	695b      	ldr	r3, [r3, #20]
 800df94:	b2da      	uxtb	r2, r3
 800df96:	4b6f      	ldr	r3, [pc, #444]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800df98:	759a      	strb	r2, [r3, #22]
 800df9a:	e00b      	b.n	800dfb4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	d103      	bne.n	800dfae <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800dfa6:	4b6b      	ldr	r3, [pc, #428]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800dfa8:	22ff      	movs	r2, #255	; 0xff
 800dfaa:	759a      	strb	r2, [r3, #22]
 800dfac:	e002      	b.n	800dfb4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800dfae:	4b69      	ldr	r3, [pc, #420]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800dfb0:	22ff      	movs	r2, #255	; 0xff
 800dfb2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d004      	beq.n	800dfc8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d12d      	bne.n	800e024 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dfce:	2bf1      	cmp	r3, #241	; 0xf1
 800dfd0:	d00c      	beq.n	800dfec <RadioSetRxGenericConfig+0x15c>
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dfd8:	2bf2      	cmp	r3, #242	; 0xf2
 800dfda:	d007      	beq.n	800dfec <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d002      	beq.n	800dfec <RadioSetRxGenericConfig+0x15c>
                return -1;
 800dfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfea:	e10b      	b.n	800e204 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800dfec:	2300      	movs	r3, #0
 800dfee:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800dff4:	4b58      	ldr	r3, [pc, #352]	; (800e158 <RadioSetRxGenericConfig+0x2c8>)
 800dff6:	6819      	ldr	r1, [r3, #0]
 800dff8:	f107 0314 	add.w	r3, r7, #20
 800dffc:	4a57      	ldr	r2, [pc, #348]	; (800e15c <RadioSetRxGenericConfig+0x2cc>)
 800dffe:	4618      	mov	r0, r3
 800e000:	f001 fda8 	bl	800fb54 <RFW_Init>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <RadioSetRxGenericConfig+0x180>
                return -1;
 800e00a:	f04f 33ff 	mov.w	r3, #4294967295
 800e00e:	e0f9      	b.n	800e204 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e010:	4b50      	ldr	r3, [pc, #320]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e012:	2200      	movs	r2, #0
 800e014:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800e016:	4b4f      	ldr	r3, [pc, #316]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e018:	2201      	movs	r2, #1
 800e01a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e01c:	4b4d      	ldr	r3, [pc, #308]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e01e:	2200      	movs	r2, #0
 800e020:	755a      	strb	r2, [r3, #21]
        {
 800e022:	e00e      	b.n	800e042 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800e02a:	4b4a      	ldr	r3, [pc, #296]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e02c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e034:	4b47      	ldr	r3, [pc, #284]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e036:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800e03e:	4b45      	ldr	r3, [pc, #276]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e040:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800e042:	f7ff faea 	bl	800d61a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e046:	2000      	movs	r0, #0
 800e048:	f7fe fc80 	bl	800c94c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e04c:	4844      	ldr	r0, [pc, #272]	; (800e160 <RadioSetRxGenericConfig+0x2d0>)
 800e04e:	f001 f88d 	bl	800f16c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e052:	4844      	ldr	r0, [pc, #272]	; (800e164 <RadioSetRxGenericConfig+0x2d4>)
 800e054:	f001 f95c 	bl	800f310 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e058:	f107 0320 	add.w	r3, r7, #32
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 fc20 	bl	800e8a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	8b9b      	ldrh	r3, [r3, #28]
 800e066:	4618      	mov	r0, r3
 800e068:	f000 fc6a 	bl	800e940 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	8b1b      	ldrh	r3, [r3, #24]
 800e070:	4618      	mov	r0, r3
 800e072:	f000 fc45 	bl	800e900 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e07c:	fb03 f202 	mul.w	r2, r3, r2
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	fbb2 f3f3 	udiv	r3, r2, r3
 800e088:	4a32      	ldr	r2, [pc, #200]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e08a:	6093      	str	r3, [r2, #8]
        break;
 800e08c:	e0b9      	b.n	800e202 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e092:	2b00      	cmp	r3, #0
 800e094:	d102      	bne.n	800e09c <RadioSetRxGenericConfig+0x20c>
            return -1;
 800e096:	f04f 33ff 	mov.w	r3, #4294967295
 800e09a:	e0b3      	b.n	800e204 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d104      	bne.n	800e0b0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e0ae:	e002      	b.n	800e0b6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800e0b0:	23ff      	movs	r3, #255	; 0xff
 800e0b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	bf14      	ite	ne
 800e0be:	2301      	movne	r3, #1
 800e0c0:	2300      	moveq	r3, #0
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 fdb3 	bl	800ec30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f000 fdbd 	bl	800ec4e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e0d4:	4b1f      	ldr	r3, [pc, #124]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e0e2:	4b1c      	ldr	r3, [pc, #112]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e0e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800e0ee:	4b19      	ldr	r3, [pc, #100]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e0f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800e0fa:	4b16      	ldr	r3, [pc, #88]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e0fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e106:	2b02      	cmp	r3, #2
 800e108:	d010      	beq.n	800e12c <RadioSetRxGenericConfig+0x29c>
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	dc2c      	bgt.n	800e168 <RadioSetRxGenericConfig+0x2d8>
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <RadioSetRxGenericConfig+0x288>
 800e112:	2b01      	cmp	r3, #1
 800e114:	d005      	beq.n	800e122 <RadioSetRxGenericConfig+0x292>
            break;
 800e116:	e027      	b.n	800e168 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e118:	4b0e      	ldr	r3, [pc, #56]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e120:	e023      	b.n	800e16a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e122:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e12a:	e01e      	b.n	800e16a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e132:	2b0b      	cmp	r3, #11
 800e134:	d004      	beq.n	800e140 <RadioSetRxGenericConfig+0x2b0>
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e13c:	2b0c      	cmp	r3, #12
 800e13e:	d104      	bne.n	800e14a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e140:	4b04      	ldr	r3, [pc, #16]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e142:	2201      	movs	r2, #1
 800e144:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e148:	e00f      	b.n	800e16a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e14a:	4b02      	ldr	r3, [pc, #8]	; (800e154 <RadioSetRxGenericConfig+0x2c4>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e152:	e00a      	b.n	800e16a <RadioSetRxGenericConfig+0x2da>
 800e154:	20006e24 	.word	0x20006e24
 800e158:	20006e20 	.word	0x20006e20
 800e15c:	20006e84 	.word	0x20006e84
 800e160:	20006e5c 	.word	0x20006e5c
 800e164:	20006e32 	.word	0x20006e32
            break;
 800e168:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e16a:	4b28      	ldr	r3, [pc, #160]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e16c:	2201      	movs	r2, #1
 800e16e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800e174:	4b25      	ldr	r3, [pc, #148]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e176:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800e17e:	4b23      	ldr	r3, [pc, #140]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e180:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e182:	4a22      	ldr	r2, [pc, #136]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e188:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e190:	4b1e      	ldr	r3, [pc, #120]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e192:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800e19c:	4b1b      	ldr	r3, [pc, #108]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e19e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800e1a2:	f7ff fa3a 	bl	800d61a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	f7fe fbd0 	bl	800c94c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e1ac:	4818      	ldr	r0, [pc, #96]	; (800e210 <RadioSetRxGenericConfig+0x380>)
 800e1ae:	f000 ffdd 	bl	800f16c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e1b2:	4818      	ldr	r0, [pc, #96]	; (800e214 <RadioSetRxGenericConfig+0x384>)
 800e1b4:	f001 f8ac 	bl	800f310 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e1b8:	4b14      	ldr	r3, [pc, #80]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e1ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d10d      	bne.n	800e1de <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800e1c2:	f240 7036 	movw	r0, #1846	; 0x736
 800e1c6:	f001 f9ff 	bl	800f5c8 <SUBGRF_ReadRegister>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	f023 0304 	bic.w	r3, r3, #4
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	f240 7036 	movw	r0, #1846	; 0x736
 800e1d8:	f001 f9e2 	bl	800f5a0 <SUBGRF_WriteRegister>
 800e1dc:	e00c      	b.n	800e1f8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800e1de:	f240 7036 	movw	r0, #1846	; 0x736
 800e1e2:	f001 f9f1 	bl	800f5c8 <SUBGRF_ReadRegister>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	f043 0304 	orr.w	r3, r3, #4
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	f240 7036 	movw	r0, #1846	; 0x736
 800e1f4:	f001 f9d4 	bl	800f5a0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800e1f8:	4b04      	ldr	r3, [pc, #16]	; (800e20c <RadioSetRxGenericConfig+0x37c>)
 800e1fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1fe:	609a      	str	r2, [r3, #8]
        break;
 800e200:	bf00      	nop
    }
    return status;
 800e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800e204:	4618      	mov	r0, r3
 800e206:	3730      	adds	r7, #48	; 0x30
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	20006e24 	.word	0x20006e24
 800e210:	20006e5c 	.word	0x20006e5c
 800e214:	20006e32 	.word	0x20006e32

0800e218 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b08e      	sub	sp, #56	; 0x38
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60b9      	str	r1, [r7, #8]
 800e220:	607b      	str	r3, [r7, #4]
 800e222:	4603      	mov	r3, r0
 800e224:	73fb      	strb	r3, [r7, #15]
 800e226:	4613      	mov	r3, r2
 800e228:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800e22a:	2300      	movs	r3, #0
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e22e:	2300      	movs	r3, #0
 800e230:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800e232:	f001 fc9c 	bl	800fb6e <RFW_DeInit>
    switch( modem )
 800e236:	7bfb      	ldrb	r3, [r7, #15]
 800e238:	2b03      	cmp	r3, #3
 800e23a:	f200 8204 	bhi.w	800e646 <RadioSetTxGenericConfig+0x42e>
 800e23e:	a201      	add	r2, pc, #4	; (adr r2, 800e244 <RadioSetTxGenericConfig+0x2c>)
 800e240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e244:	0800e3c9 	.word	0x0800e3c9
 800e248:	0800e511 	.word	0x0800e511
 800e24c:	0800e609 	.word	0x0800e609
 800e250:	0800e255 	.word	0x0800e255
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	7c9b      	ldrb	r3, [r3, #18]
 800e258:	2b08      	cmp	r3, #8
 800e25a:	d902      	bls.n	800e262 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800e25c:	f04f 33ff 	mov.w	r3, #4294967295
 800e260:	e206      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	6899      	ldr	r1, [r3, #8]
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	7c9b      	ldrb	r3, [r3, #18]
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e270:	4618      	mov	r0, r3
 800e272:	f008 fc89 	bl	8016b88 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d102      	bne.n	800e284 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800e27e:	f04f 33ff 	mov.w	r3, #4294967295
 800e282:	e1f5      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f242 7210 	movw	r2, #10000	; 0x2710
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d813      	bhi.n	800e2b8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800e290:	2302      	movs	r3, #2
 800e292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800e296:	4b99      	ldr	r3, [pc, #612]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e298:	2203      	movs	r2, #3
 800e29a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800e29c:	4b97      	ldr	r3, [pc, #604]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e29e:	2203      	movs	r2, #3
 800e2a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a94      	ldr	r2, [pc, #592]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2aa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	7cda      	ldrb	r2, [r3, #19]
 800e2b0:	4b92      	ldr	r3, [pc, #584]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2b6:	e017      	b.n	800e2e8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e2be:	4b8f      	ldr	r3, [pc, #572]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e2c4:	4b8d      	ldr	r3, [pc, #564]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a8a      	ldr	r2, [pc, #552]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2d2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	7cda      	ldrb	r2, [r3, #19]
 800e2d8:	4b88      	ldr	r3, [pc, #544]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	089b      	lsrs	r3, r3, #2
 800e2e4:	4a85      	ldr	r2, [pc, #532]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2e6:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	4b82      	ldr	r3, [pc, #520]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2f4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800e2f6:	4b81      	ldr	r3, [pc, #516]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e2f8:	2204      	movs	r2, #4
 800e2fa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	7c9b      	ldrb	r3, [r3, #18]
 800e300:	00db      	lsls	r3, r3, #3
 800e302:	b2da      	uxtb	r2, r3
 800e304:	4b7d      	ldr	r3, [pc, #500]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e306:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800e308:	4b7c      	ldr	r3, [pc, #496]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	7d9b      	ldrb	r3, [r3, #22]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d003      	beq.n	800e31e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	7d1b      	ldrb	r3, [r3, #20]
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d12b      	bne.n	800e376 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	7d5b      	ldrb	r3, [r3, #21]
 800e322:	2bf1      	cmp	r3, #241	; 0xf1
 800e324:	d00a      	beq.n	800e33c <RadioSetTxGenericConfig+0x124>
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	7d5b      	ldrb	r3, [r3, #21]
 800e32a:	2bf2      	cmp	r3, #242	; 0xf2
 800e32c:	d006      	beq.n	800e33c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	7d5b      	ldrb	r3, [r3, #21]
 800e332:	2b01      	cmp	r3, #1
 800e334:	d002      	beq.n	800e33c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800e336:	f04f 33ff 	mov.w	r3, #4294967295
 800e33a:	e199      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800e340:	2301      	movs	r3, #1
 800e342:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800e346:	4b6e      	ldr	r3, [pc, #440]	; (800e500 <RadioSetTxGenericConfig+0x2e8>)
 800e348:	6819      	ldr	r1, [r3, #0]
 800e34a:	f107 0320 	add.w	r3, r7, #32
 800e34e:	4a6d      	ldr	r2, [pc, #436]	; (800e504 <RadioSetTxGenericConfig+0x2ec>)
 800e350:	4618      	mov	r0, r3
 800e352:	f001 fbff 	bl	800fb54 <RFW_Init>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d002      	beq.n	800e362 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800e35c:	f04f 33ff 	mov.w	r3, #4294967295
 800e360:	e186      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e362:	4b66      	ldr	r3, [pc, #408]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e364:	2200      	movs	r2, #0
 800e366:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800e368:	4b64      	ldr	r3, [pc, #400]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e36a:	2201      	movs	r2, #1
 800e36c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e36e:	4b63      	ldr	r3, [pc, #396]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e370:	2200      	movs	r2, #0
 800e372:	755a      	strb	r2, [r3, #21]
        {
 800e374:	e00b      	b.n	800e38e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	7d5a      	ldrb	r2, [r3, #21]
 800e37a:	4b60      	ldr	r3, [pc, #384]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e37c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	7d9a      	ldrb	r2, [r3, #22]
 800e382:	4b5e      	ldr	r3, [pc, #376]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e384:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	7d1a      	ldrb	r2, [r3, #20]
 800e38a:	4b5c      	ldr	r3, [pc, #368]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e38c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800e38e:	f7ff f944 	bl	800d61a <RadioStandby>
        RadioSetModem( radio_modem );
 800e392:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e396:	4618      	mov	r0, r3
 800e398:	f7fe fad8 	bl	800c94c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e39c:	485a      	ldr	r0, [pc, #360]	; (800e508 <RadioSetTxGenericConfig+0x2f0>)
 800e39e:	f000 fee5 	bl	800f16c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e3a2:	485a      	ldr	r0, [pc, #360]	; (800e50c <RadioSetTxGenericConfig+0x2f4>)
 800e3a4:	f000 ffb4 	bl	800f310 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e3a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f000 fa78 	bl	800e8a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	8a1b      	ldrh	r3, [r3, #16]
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f000 fac2 	bl	800e940 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	899b      	ldrh	r3, [r3, #12]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 fa9d 	bl	800e900 <SUBGRF_SetCrcPolynomial>
        break;
 800e3c6:	e13f      	b.n	800e648 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d102      	bne.n	800e3d6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800e3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d4:	e14c      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	7c9b      	ldrb	r3, [r3, #18]
 800e3da:	2b08      	cmp	r3, #8
 800e3dc:	d902      	bls.n	800e3e4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800e3de:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e2:	e145      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	6899      	ldr	r1, [r3, #8]
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	7c9b      	ldrb	r3, [r3, #18]
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f008 fbc8 	bl	8016b88 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e3f8:	4b40      	ldr	r3, [pc, #256]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a3d      	ldr	r2, [pc, #244]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e406:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	7cda      	ldrb	r2, [r3, #19]
 800e40c:	4b3b      	ldr	r3, [pc, #236]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	4a39      	ldr	r2, [pc, #228]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e418:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e41a:	4b38      	ldr	r3, [pc, #224]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	b29b      	uxth	r3, r3
 800e426:	00db      	lsls	r3, r3, #3
 800e428:	b29a      	uxth	r2, r3
 800e42a:	4b34      	ldr	r3, [pc, #208]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e42c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800e42e:	4b33      	ldr	r3, [pc, #204]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e430:	2204      	movs	r2, #4
 800e432:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	7c9b      	ldrb	r3, [r3, #18]
 800e438:	00db      	lsls	r3, r3, #3
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	4b2f      	ldr	r3, [pc, #188]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e43e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800e440:	4b2e      	ldr	r3, [pc, #184]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e442:	2200      	movs	r2, #0
 800e444:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	7d9b      	ldrb	r3, [r3, #22]
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d003      	beq.n	800e456 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	7d1b      	ldrb	r3, [r3, #20]
 800e452:	2b02      	cmp	r3, #2
 800e454:	d12a      	bne.n	800e4ac <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	7d5b      	ldrb	r3, [r3, #21]
 800e45a:	2bf1      	cmp	r3, #241	; 0xf1
 800e45c:	d00a      	beq.n	800e474 <RadioSetTxGenericConfig+0x25c>
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	7d5b      	ldrb	r3, [r3, #21]
 800e462:	2bf2      	cmp	r3, #242	; 0xf2
 800e464:	d006      	beq.n	800e474 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	7d5b      	ldrb	r3, [r3, #21]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d002      	beq.n	800e474 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800e46e:	f04f 33ff 	mov.w	r3, #4294967295
 800e472:	e0fd      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800e474:	2301      	movs	r3, #1
 800e476:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800e47c:	4b20      	ldr	r3, [pc, #128]	; (800e500 <RadioSetTxGenericConfig+0x2e8>)
 800e47e:	6819      	ldr	r1, [r3, #0]
 800e480:	f107 0314 	add.w	r3, r7, #20
 800e484:	4a1f      	ldr	r2, [pc, #124]	; (800e504 <RadioSetTxGenericConfig+0x2ec>)
 800e486:	4618      	mov	r0, r3
 800e488:	f001 fb64 	bl	800fb54 <RFW_Init>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d002      	beq.n	800e498 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800e492:	f04f 33ff 	mov.w	r3, #4294967295
 800e496:	e0eb      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e498:	4b18      	ldr	r3, [pc, #96]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800e49e:	4b17      	ldr	r3, [pc, #92]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e4a4:	4b15      	ldr	r3, [pc, #84]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	755a      	strb	r2, [r3, #21]
        {
 800e4aa:	e00b      	b.n	800e4c4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	7d5a      	ldrb	r2, [r3, #21]
 800e4b0:	4b12      	ldr	r3, [pc, #72]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e4b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	7d9a      	ldrb	r2, [r3, #22]
 800e4b8:	4b10      	ldr	r3, [pc, #64]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e4ba:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	7d1a      	ldrb	r2, [r3, #20]
 800e4c0:	4b0e      	ldr	r3, [pc, #56]	; (800e4fc <RadioSetTxGenericConfig+0x2e4>)
 800e4c2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800e4c4:	f7ff f8a9 	bl	800d61a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	f7fe fa3f 	bl	800c94c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e4ce:	480e      	ldr	r0, [pc, #56]	; (800e508 <RadioSetTxGenericConfig+0x2f0>)
 800e4d0:	f000 fe4c 	bl	800f16c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e4d4:	480d      	ldr	r0, [pc, #52]	; (800e50c <RadioSetTxGenericConfig+0x2f4>)
 800e4d6:	f000 ff1b 	bl	800f310 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e4da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 f9df 	bl	800e8a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	8a1b      	ldrh	r3, [r3, #16]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 fa29 	bl	800e940 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	899b      	ldrh	r3, [r3, #12]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f000 fa04 	bl	800e900 <SUBGRF_SetCrcPolynomial>
        break;
 800e4f8:	e0a6      	b.n	800e648 <RadioSetTxGenericConfig+0x430>
 800e4fa:	bf00      	nop
 800e4fc:	20006e24 	.word	0x20006e24
 800e500:	20006e20 	.word	0x20006e20
 800e504:	20006e80 	.word	0x20006e80
 800e508:	20006e5c 	.word	0x20006e5c
 800e50c:	20006e32 	.word	0x20006e32
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e510:	4b59      	ldr	r3, [pc, #356]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e512:	2201      	movs	r2, #1
 800e514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	781a      	ldrb	r2, [r3, #0]
 800e51c:	4b56      	ldr	r3, [pc, #344]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e51e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	785a      	ldrb	r2, [r3, #1]
 800e526:	4b54      	ldr	r3, [pc, #336]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	789a      	ldrb	r2, [r3, #2]
 800e530:	4b51      	ldr	r3, [pc, #324]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e532:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	78db      	ldrb	r3, [r3, #3]
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d010      	beq.n	800e560 <RadioSetTxGenericConfig+0x348>
 800e53e:	2b02      	cmp	r3, #2
 800e540:	dc20      	bgt.n	800e584 <RadioSetTxGenericConfig+0x36c>
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <RadioSetTxGenericConfig+0x334>
 800e546:	2b01      	cmp	r3, #1
 800e548:	d005      	beq.n	800e556 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800e54a:	e01b      	b.n	800e584 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e54c:	4b4a      	ldr	r3, [pc, #296]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e54e:	2200      	movs	r2, #0
 800e550:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e554:	e017      	b.n	800e586 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e556:	4b48      	ldr	r3, [pc, #288]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e558:	2201      	movs	r2, #1
 800e55a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e55e:	e012      	b.n	800e586 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	2b0b      	cmp	r3, #11
 800e566:	d003      	beq.n	800e570 <RadioSetTxGenericConfig+0x358>
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	2b0c      	cmp	r3, #12
 800e56e:	d104      	bne.n	800e57a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e570:	4b41      	ldr	r3, [pc, #260]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e572:	2201      	movs	r2, #1
 800e574:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e578:	e005      	b.n	800e586 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e57a:	4b3f      	ldr	r3, [pc, #252]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e582:	e000      	b.n	800e586 <RadioSetTxGenericConfig+0x36e>
            break;
 800e584:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e586:	4b3c      	ldr	r3, [pc, #240]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e588:	2201      	movs	r2, #1
 800e58a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	889a      	ldrh	r2, [r3, #4]
 800e590:	4b39      	ldr	r3, [pc, #228]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e592:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	799a      	ldrb	r2, [r3, #6]
 800e598:	4b37      	ldr	r3, [pc, #220]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e59a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	79da      	ldrb	r2, [r3, #7]
 800e5a0:	4b35      	ldr	r3, [pc, #212]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e5a2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	7a1a      	ldrb	r2, [r3, #8]
 800e5aa:	4b33      	ldr	r3, [pc, #204]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e5ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800e5b0:	f7ff f833 	bl	800d61a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e5b4:	2001      	movs	r0, #1
 800e5b6:	f7fe f9c9 	bl	800c94c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e5ba:	4830      	ldr	r0, [pc, #192]	; (800e67c <RadioSetTxGenericConfig+0x464>)
 800e5bc:	f000 fdd6 	bl	800f16c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e5c0:	482f      	ldr	r0, [pc, #188]	; (800e680 <RadioSetTxGenericConfig+0x468>)
 800e5c2:	f000 fea5 	bl	800f310 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800e5c6:	4b2c      	ldr	r3, [pc, #176]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e5c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5cc:	2b06      	cmp	r3, #6
 800e5ce:	d10d      	bne.n	800e5ec <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800e5d0:	f640 0089 	movw	r0, #2185	; 0x889
 800e5d4:	f000 fff8 	bl	800f5c8 <SUBGRF_ReadRegister>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	f023 0304 	bic.w	r3, r3, #4
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f640 0089 	movw	r0, #2185	; 0x889
 800e5e6:	f000 ffdb 	bl	800f5a0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800e5ea:	e02d      	b.n	800e648 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800e5ec:	f640 0089 	movw	r0, #2185	; 0x889
 800e5f0:	f000 ffea 	bl	800f5c8 <SUBGRF_ReadRegister>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f043 0304 	orr.w	r3, r3, #4
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	f640 0089 	movw	r0, #2185	; 0x889
 800e602:	f000 ffcd 	bl	800f5a0 <SUBGRF_WriteRegister>
        break;
 800e606:	e01f      	b.n	800e648 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d004      	beq.n	800e61a <RadioSetTxGenericConfig+0x402>
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e618:	d902      	bls.n	800e620 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800e61a:	f04f 33ff 	mov.w	r3, #4294967295
 800e61e:	e027      	b.n	800e670 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800e620:	2003      	movs	r0, #3
 800e622:	f7fe f993 	bl	800c94c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800e626:	4b14      	ldr	r3, [pc, #80]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e628:	2202      	movs	r2, #2
 800e62a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a11      	ldr	r2, [pc, #68]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e634:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800e636:	4b10      	ldr	r3, [pc, #64]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e638:	2216      	movs	r2, #22
 800e63a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e63e:	480f      	ldr	r0, [pc, #60]	; (800e67c <RadioSetTxGenericConfig+0x464>)
 800e640:	f000 fd94 	bl	800f16c <SUBGRF_SetModulationParams>
        break;
 800e644:	e000      	b.n	800e648 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800e646:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800e648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f001 f8c3 	bl	800f7d8 <SUBGRF_SetRfTxPower>
 800e652:	4603      	mov	r3, r0
 800e654:	461a      	mov	r2, r3
 800e656:	4b08      	ldr	r3, [pc, #32]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e658:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800e65c:	4b06      	ldr	r3, [pc, #24]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e65e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e662:	4618      	mov	r0, r3
 800e664:	f001 fa97 	bl	800fb96 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800e668:	4a03      	ldr	r2, [pc, #12]	; (800e678 <RadioSetTxGenericConfig+0x460>)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6053      	str	r3, [r2, #4]
    return 0;
 800e66e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800e670:	4618      	mov	r0, r3
 800e672:	3738      	adds	r7, #56	; 0x38
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	20006e24 	.word	0x20006e24
 800e67c:	20006e5c 	.word	0x20006e5c
 800e680:	20006e32 	.word	0x20006e32

0800e684 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800e68c:	2301      	movs	r3, #1
 800e68e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800e690:	7bfb      	ldrb	r3, [r7, #15]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3714      	adds	r7, #20
 800e696:	46bd      	mov	sp, r7
 800e698:	bc80      	pop	{r7}
 800e69a:	4770      	bx	lr

0800e69c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800e6a6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bc80      	pop	{r7}
 800e6b0:	4770      	bx	lr

0800e6b2 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800e6b2:	b480      	push	{r7}
 800e6b4:	b083      	sub	sp, #12
 800e6b6:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800e6bc:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bc80      	pop	{r7}
 800e6c6:	4770      	bx	lr

0800e6c8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
  switch(Config)
 800e6d6:	79fb      	ldrb	r3, [r7, #7]
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	dc02      	bgt.n	800e6e2 <RBI_ConfigRFSwitch+0x1a>
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	da04      	bge.n	800e6ea <RBI_ConfigRFSwitch+0x22>
 800e6e0:	e00d      	b.n	800e6fe <RBI_ConfigRFSwitch+0x36>
 800e6e2:	3b02      	subs	r3, #2
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d80a      	bhi.n	800e6fe <RBI_ConfigRFSwitch+0x36>
 800e6e8:	e004      	b.n	800e6f4 <RBI_ConfigRFSwitch+0x2c>
  {
  case RBI_SWITCH_OFF:
  case RBI_SWITCH_RX:
	  gpio_write(PIN_PB2, GPIO_HIGH);
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	2012      	movs	r0, #18
 800e6ee:	f7f2 ff15 	bl	800151c <gpio_write>
	  break;
 800e6f2:	e004      	b.n	800e6fe <RBI_ConfigRFSwitch+0x36>
  case RBI_SWITCH_RFO_LP:
  case RBI_SWITCH_RFO_HP:
	  gpio_write(PIN_PB2, GPIO_LOW);
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	2012      	movs	r0, #18
 800e6f8:	f7f2 ff10 	bl	800151c <gpio_write>
	  break;
 800e6fc:	bf00      	nop
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800e70e:	2302      	movs	r3, #2
 800e710:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800e712:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800e714:	4618      	mov	r0, r3
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	bc80      	pop	{r7}
 800e71c:	4770      	bx	lr

0800e71e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800e71e:	b480      	push	{r7}
 800e720:	b083      	sub	sp, #12
 800e722:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800e724:	2301      	movs	r3, #1
 800e726:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800e728:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	370c      	adds	r7, #12
 800e72e:	46bd      	mov	sp, r7
 800e730:	bc80      	pop	{r7}
 800e732:	4770      	bx	lr

0800e734 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800e73a:	2301      	movs	r3, #1
 800e73c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800e73e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800e740:	4618      	mov	r0, r3
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	bc80      	pop	{r7}
 800e748:	4770      	bx	lr

0800e74a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800e74a:	b480      	push	{r7}
 800e74c:	b085      	sub	sp, #20
 800e74e:	af00      	add	r7, sp, #0
 800e750:	4603      	mov	r3, r0
 800e752:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800e754:	2300      	movs	r3, #0
 800e756:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
  if (Config == RBI_RFO_LP_MAXPOWER)
 800e758:	79fb      	ldrb	r3, [r7, #7]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d102      	bne.n	800e764 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800e75e:	230f      	movs	r3, #15
 800e760:	60fb      	str	r3, [r7, #12]
 800e762:	e001      	b.n	800e768 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800e764:	2316      	movs	r3, #22
 800e766:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800e768:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	bc80      	pop	{r7}
 800e772:	4770      	bx	lr

0800e774 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d002      	beq.n	800e788 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800e782:	4a1d      	ldr	r2, [pc, #116]	; (800e7f8 <SUBGRF_Init+0x84>)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800e788:	f7f3 ff72 	bl	8002670 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800e78c:	2002      	movs	r0, #2
 800e78e:	f001 f8ff 	bl	800f990 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800e792:	4b1a      	ldr	r3, [pc, #104]	; (800e7fc <SUBGRF_Init+0x88>)
 800e794:	2200      	movs	r2, #0
 800e796:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800e798:	2000      	movs	r0, #0
 800e79a:	f000 f97d 	bl	800ea98 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800e79e:	f7ff ffbe 	bl	800e71e <RBI_IsTCXO>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d10e      	bne.n	800e7c6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800e7a8:	2140      	movs	r1, #64	; 0x40
 800e7aa:	2007      	movs	r0, #7
 800e7ac:	f000 fb82 	bl	800eeb4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	f640 1011 	movw	r0, #2321	; 0x911
 800e7b6:	f000 fef3 	bl	800f5a0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800e7ba:	237f      	movs	r3, #127	; 0x7f
 800e7bc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800e7be:	7b38      	ldrb	r0, [r7, #12]
 800e7c0:	f000 fa8b 	bl	800ecda <SUBGRF_Calibrate>
 800e7c4:	e009      	b.n	800e7da <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800e7c6:	2120      	movs	r1, #32
 800e7c8:	f640 1011 	movw	r0, #2321	; 0x911
 800e7cc:	f000 fee8 	bl	800f5a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800e7d0:	2120      	movs	r1, #32
 800e7d2:	f640 1012 	movw	r0, #2322	; 0x912
 800e7d6:	f000 fee3 	bl	800f5a0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800e7da:	210e      	movs	r1, #14
 800e7dc:	f640 101f 	movw	r0, #2335	; 0x91f
 800e7e0:	f000 fede 	bl	800f5a0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800e7e4:	f7ff ff65 	bl	800e6b2 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800e7e8:	4b05      	ldr	r3, [pc, #20]	; (800e800 <SUBGRF_Init+0x8c>)
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	701a      	strb	r2, [r3, #0]
}
 800e7ee:	bf00      	nop
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20006e94 	.word	0x20006e94
 800e7fc:	20006e90 	.word	0x20006e90
 800e800:	20006e88 	.word	0x20006e88

0800e804 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800e804:	b480      	push	{r7}
 800e806:	af00      	add	r7, sp, #0
    return OperatingMode;
 800e808:	4b02      	ldr	r3, [pc, #8]	; (800e814 <SUBGRF_GetOperatingMode+0x10>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	46bd      	mov	sp, r7
 800e810:	bc80      	pop	{r7}
 800e812:	4770      	bx	lr
 800e814:	20006e88 	.word	0x20006e88

0800e818 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	461a      	mov	r2, r3
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	2000      	movs	r0, #0
 800e82c:	f000 ff24 	bl	800f678 <SUBGRF_WriteBuffer>
}
 800e830:	bf00      	nop
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	4613      	mov	r3, r2
 800e844:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800e846:	2300      	movs	r3, #0
 800e848:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800e84a:	f107 0317 	add.w	r3, r7, #23
 800e84e:	4619      	mov	r1, r3
 800e850:	68b8      	ldr	r0, [r7, #8]
 800e852:	f000 fe27 	bl	800f4a4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	79fa      	ldrb	r2, [r7, #7]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d201      	bcs.n	800e864 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800e860:	2301      	movs	r3, #1
 800e862:	e007      	b.n	800e874 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800e864:	7df8      	ldrb	r0, [r7, #23]
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	461a      	mov	r2, r3
 800e86c:	68f9      	ldr	r1, [r7, #12]
 800e86e:	f000 ff25 	bl	800f6bc <SUBGRF_ReadBuffer>

    return 0;
 800e872:	2300      	movs	r3, #0
}
 800e874:	4618      	mov	r0, r3
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	460b      	mov	r3, r1
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800e88a:	7afb      	ldrb	r3, [r7, #11]
 800e88c:	4619      	mov	r1, r3
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f7ff ffc2 	bl	800e818 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f91b 	bl	800ead0 <SUBGRF_SetTx>
}
 800e89a:	bf00      	nop
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b082      	sub	sp, #8
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800e8aa:	2208      	movs	r2, #8
 800e8ac:	6879      	ldr	r1, [r7, #4]
 800e8ae:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800e8b2:	f000 fe9d 	bl	800f5f0 <SUBGRF_WriteRegisters>
    return 0;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800e8ca:	88fb      	ldrh	r3, [r7, #6]
 800e8cc:	0a1b      	lsrs	r3, r3, #8
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800e8d4:	88fb      	ldrh	r3, [r7, #6]
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e8da:	f000 fb6f 	bl	800efbc <SUBGRF_GetPacketType>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d108      	bne.n	800e8f6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800e8e4:	f107 030c 	add.w	r3, r7, #12
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800e8f0:	f000 fe7e 	bl	800f5f0 <SUBGRF_WriteRegisters>
            break;
 800e8f4:	e000      	b.n	800e8f8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800e8f6:	bf00      	nop
    }
}
 800e8f8:	bf00      	nop
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	4603      	mov	r3, r0
 800e908:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800e90a:	88fb      	ldrh	r3, [r7, #6]
 800e90c:	0a1b      	lsrs	r3, r3, #8
 800e90e:	b29b      	uxth	r3, r3
 800e910:	b2db      	uxtb	r3, r3
 800e912:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800e914:	88fb      	ldrh	r3, [r7, #6]
 800e916:	b2db      	uxtb	r3, r3
 800e918:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e91a:	f000 fb4f 	bl	800efbc <SUBGRF_GetPacketType>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d108      	bne.n	800e936 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800e924:	f107 030c 	add.w	r3, r7, #12
 800e928:	2202      	movs	r2, #2
 800e92a:	4619      	mov	r1, r3
 800e92c:	f240 60be 	movw	r0, #1726	; 0x6be
 800e930:	f000 fe5e 	bl	800f5f0 <SUBGRF_WriteRegisters>
            break;
 800e934:	e000      	b.n	800e938 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800e936:	bf00      	nop
    }
}
 800e938:	bf00      	nop
 800e93a:	3710      	adds	r7, #16
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	4603      	mov	r3, r0
 800e948:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800e94e:	f000 fb35 	bl	800efbc <SUBGRF_GetPacketType>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d121      	bne.n	800e99c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800e958:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e95c:	f000 fe34 	bl	800f5c8 <SUBGRF_ReadRegister>
 800e960:	4603      	mov	r3, r0
 800e962:	f023 0301 	bic.w	r3, r3, #1
 800e966:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800e968:	88fb      	ldrh	r3, [r7, #6]
 800e96a:	0a1b      	lsrs	r3, r3, #8
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	b25b      	sxtb	r3, r3
 800e970:	f003 0301 	and.w	r3, r3, #1
 800e974:	b25a      	sxtb	r2, r3
 800e976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	b25b      	sxtb	r3, r3
 800e97e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	4619      	mov	r1, r3
 800e984:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e988:	f000 fe0a 	bl	800f5a0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800e98c:	88fb      	ldrh	r3, [r7, #6]
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	4619      	mov	r1, r3
 800e992:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800e996:	f000 fe03 	bl	800f5a0 <SUBGRF_WriteRegister>
            break;
 800e99a:	e000      	b.n	800e99e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800e99c:	bf00      	nop
    }
}
 800e99e:	bf00      	nop
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b082      	sub	sp, #8
 800e9aa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800e9b8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e9bc:	f000 fe04 	bl	800f5c8 <SUBGRF_ReadRegister>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	f023 0301 	bic.w	r3, r3, #1
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e9d2:	f000 fde5 	bl	800f5a0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800e9d6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e9da:	f000 fdf5 	bl	800f5c8 <SUBGRF_ReadRegister>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e9e2:	79bb      	ldrb	r3, [r7, #6]
 800e9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e9f0:	f000 fdd6 	bl	800f5a0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800e9f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e9f8:	f000 f88a 	bl	800eb10 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800e9fc:	463b      	mov	r3, r7
 800e9fe:	2204      	movs	r2, #4
 800ea00:	4619      	mov	r1, r3
 800ea02:	f640 0019 	movw	r0, #2073	; 0x819
 800ea06:	f000 fe15 	bl	800f634 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	f000 f844 	bl	800ea98 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800ea10:	79fb      	ldrb	r3, [r7, #7]
 800ea12:	4619      	mov	r1, r3
 800ea14:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800ea18:	f000 fdc2 	bl	800f5a0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800ea1c:	79bb      	ldrb	r3, [r7, #6]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800ea24:	f000 fdbc 	bl	800f5a0 <SUBGRF_WriteRegister>

    return number;
 800ea28:	683b      	ldr	r3, [r7, #0]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
	...

0800ea34 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	f7ff fe43 	bl	800e6c8 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800ea42:	2002      	movs	r0, #2
 800ea44:	f000 ffa4 	bl	800f990 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ea48:	793b      	ldrb	r3, [r7, #4]
 800ea4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800ea54:	793b      	ldrb	r3, [r7, #4]
 800ea56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ea5e:	b25b      	sxtb	r3, r3
 800ea60:	4313      	orrs	r3, r2
 800ea62:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800ea64:	793b      	ldrb	r3, [r7, #4]
 800ea66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	b25b      	sxtb	r3, r3
 800ea72:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ea74:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800ea76:	f107 030f 	add.w	r3, r7, #15
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	2084      	movs	r0, #132	; 0x84
 800ea80:	f000 fe3e 	bl	800f700 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800ea84:	4b03      	ldr	r3, [pc, #12]	; (800ea94 <SUBGRF_SetSleep+0x60>)
 800ea86:	2200      	movs	r2, #0
 800ea88:	701a      	strb	r2, [r3, #0]
}
 800ea8a:	bf00      	nop
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	20006e88 	.word	0x20006e88

0800ea98 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800eaa2:	1dfb      	adds	r3, r7, #7
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	2080      	movs	r0, #128	; 0x80
 800eaaa:	f000 fe29 	bl	800f700 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800eaae:	79fb      	ldrb	r3, [r7, #7]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d103      	bne.n	800eabc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <SUBGRF_SetStandby+0x34>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800eaba:	e002      	b.n	800eac2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800eabc:	4b03      	ldr	r3, [pc, #12]	; (800eacc <SUBGRF_SetStandby+0x34>)
 800eabe:	2202      	movs	r2, #2
 800eac0:	701a      	strb	r2, [r3, #0]
}
 800eac2:	bf00      	nop
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20006e88 	.word	0x20006e88

0800ead0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800ead8:	4b0c      	ldr	r3, [pc, #48]	; (800eb0c <SUBGRF_SetTx+0x3c>)
 800eada:	2204      	movs	r2, #4
 800eadc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	0c1b      	lsrs	r3, r3, #16
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	0a1b      	lsrs	r3, r3, #8
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800eaf4:	f107 030c 	add.w	r3, r7, #12
 800eaf8:	2203      	movs	r2, #3
 800eafa:	4619      	mov	r1, r3
 800eafc:	2083      	movs	r0, #131	; 0x83
 800eafe:	f000 fdff 	bl	800f700 <SUBGRF_WriteCommand>
}
 800eb02:	bf00      	nop
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20006e88 	.word	0x20006e88

0800eb10 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800eb18:	4b0c      	ldr	r3, [pc, #48]	; (800eb4c <SUBGRF_SetRx+0x3c>)
 800eb1a:	2205      	movs	r2, #5
 800eb1c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	0c1b      	lsrs	r3, r3, #16
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	0a1b      	lsrs	r3, r3, #8
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800eb34:	f107 030c 	add.w	r3, r7, #12
 800eb38:	2203      	movs	r2, #3
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	2082      	movs	r0, #130	; 0x82
 800eb3e:	f000 fddf 	bl	800f700 <SUBGRF_WriteCommand>
}
 800eb42:	bf00      	nop
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	20006e88 	.word	0x20006e88

0800eb50 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800eb58:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <SUBGRF_SetRxBoosted+0x44>)
 800eb5a:	2205      	movs	r2, #5
 800eb5c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800eb5e:	2197      	movs	r1, #151	; 0x97
 800eb60:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800eb64:	f000 fd1c 	bl	800f5a0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	0c1b      	lsrs	r3, r3, #16
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	0a1b      	lsrs	r3, r3, #8
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800eb7e:	f107 030c 	add.w	r3, r7, #12
 800eb82:	2203      	movs	r2, #3
 800eb84:	4619      	mov	r1, r3
 800eb86:	2082      	movs	r0, #130	; 0x82
 800eb88:	f000 fdba 	bl	800f700 <SUBGRF_WriteCommand>
}
 800eb8c:	bf00      	nop
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	20006e88 	.word	0x20006e88

0800eb98 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	0c1b      	lsrs	r3, r3, #16
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	0a1b      	lsrs	r3, r3, #8
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	0c1b      	lsrs	r3, r3, #16
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	0a1b      	lsrs	r3, r3, #8
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800ebce:	f107 0308 	add.w	r3, r7, #8
 800ebd2:	2206      	movs	r2, #6
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	2094      	movs	r0, #148	; 0x94
 800ebd8:	f000 fd92 	bl	800f700 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800ebdc:	4b03      	ldr	r3, [pc, #12]	; (800ebec <SUBGRF_SetRxDutyCycle+0x54>)
 800ebde:	2206      	movs	r2, #6
 800ebe0:	701a      	strb	r2, [r3, #0]
}
 800ebe2:	bf00      	nop
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	20006e88 	.word	0x20006e88

0800ebf0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	20c5      	movs	r0, #197	; 0xc5
 800ebfa:	f000 fd81 	bl	800f700 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800ebfe:	4b02      	ldr	r3, [pc, #8]	; (800ec08 <SUBGRF_SetCad+0x18>)
 800ec00:	2207      	movs	r2, #7
 800ec02:	701a      	strb	r2, [r3, #0]
}
 800ec04:	bf00      	nop
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20006e88 	.word	0x20006e88

0800ec0c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800ec10:	2200      	movs	r2, #0
 800ec12:	2100      	movs	r1, #0
 800ec14:	20d1      	movs	r0, #209	; 0xd1
 800ec16:	f000 fd73 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ec1a:	bf00      	nop
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800ec22:	2200      	movs	r2, #0
 800ec24:	2100      	movs	r1, #0
 800ec26:	20d2      	movs	r0, #210	; 0xd2
 800ec28:	f000 fd6a 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ec2c:	bf00      	nop
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	4603      	mov	r3, r0
 800ec38:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800ec3a:	1dfb      	adds	r3, r7, #7
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	4619      	mov	r1, r3
 800ec40:	209f      	movs	r0, #159	; 0x9f
 800ec42:	f000 fd5d 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	4603      	mov	r3, r0
 800ec56:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800ec58:	1dfb      	adds	r3, r7, #7
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	20a0      	movs	r0, #160	; 0xa0
 800ec60:	f000 fd4e 	bl	800f700 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800ec64:	79fb      	ldrb	r3, [r7, #7]
 800ec66:	2b3f      	cmp	r3, #63	; 0x3f
 800ec68:	d91c      	bls.n	800eca4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800ec6a:	79fb      	ldrb	r3, [r7, #7]
 800ec6c:	085b      	lsrs	r3, r3, #1
 800ec6e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800ec70:	2300      	movs	r3, #0
 800ec72:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800ec74:	2300      	movs	r3, #0
 800ec76:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800ec78:	e005      	b.n	800ec86 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	089b      	lsrs	r3, r3, #2
 800ec7e:	73fb      	strb	r3, [r7, #15]
            exp++;
 800ec80:	7bbb      	ldrb	r3, [r7, #14]
 800ec82:	3301      	adds	r3, #1
 800ec84:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800ec86:	7bfb      	ldrb	r3, [r7, #15]
 800ec88:	2b1f      	cmp	r3, #31
 800ec8a:	d8f6      	bhi.n	800ec7a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	7bbb      	ldrb	r3, [r7, #14]
 800ec94:	4413      	add	r3, r2
 800ec96:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800ec98:	7b7b      	ldrb	r3, [r7, #13]
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	f240 7006 	movw	r0, #1798	; 0x706
 800eca0:	f000 fc7e 	bl	800f5a0 <SUBGRF_WriteRegister>
    }
}
 800eca4:	bf00      	nop
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800ecb2:	f7ff fd3f 	bl	800e734 <RBI_IsDCDC>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d102      	bne.n	800ecc2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	71fb      	strb	r3, [r7, #7]
 800ecc0:	e001      	b.n	800ecc6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ecc6:	1dfb      	adds	r3, r7, #7
 800ecc8:	2201      	movs	r2, #1
 800ecca:	4619      	mov	r1, r3
 800eccc:	2096      	movs	r0, #150	; 0x96
 800ecce:	f000 fd17 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b084      	sub	sp, #16
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ece2:	793b      	ldrb	r3, [r7, #4]
 800ece4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	019b      	lsls	r3, r3, #6
 800ecec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ecee:	793b      	ldrb	r3, [r7, #4]
 800ecf0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ecf8:	b25b      	sxtb	r3, r3
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ecfe:	793b      	ldrb	r3, [r7, #4]
 800ed00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ed08:	b25b      	sxtb	r3, r3
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ed0e:	793b      	ldrb	r3, [r7, #4]
 800ed10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ed18:	b25b      	sxtb	r3, r3
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ed1e:	793b      	ldrb	r3, [r7, #4]
 800ed20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ed28:	b25b      	sxtb	r3, r3
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ed2e:	793b      	ldrb	r3, [r7, #4]
 800ed30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ed38:	b25b      	sxtb	r3, r3
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800ed3e:	793b      	ldrb	r3, [r7, #4]
 800ed40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	b25b      	sxtb	r3, r3
 800ed4c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ed4e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800ed50:	f107 030f 	add.w	r3, r7, #15
 800ed54:	2201      	movs	r2, #1
 800ed56:	4619      	mov	r1, r3
 800ed58:	2089      	movs	r0, #137	; 0x89
 800ed5a:	f000 fcd1 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ed5e:	bf00      	nop
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a1d      	ldr	r2, [pc, #116]	; (800ede8 <SUBGRF_CalibrateImage+0x80>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d904      	bls.n	800ed82 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800ed78:	23e1      	movs	r3, #225	; 0xe1
 800ed7a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800ed7c:	23e9      	movs	r3, #233	; 0xe9
 800ed7e:	737b      	strb	r3, [r7, #13]
 800ed80:	e027      	b.n	800edd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a19      	ldr	r2, [pc, #100]	; (800edec <SUBGRF_CalibrateImage+0x84>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d904      	bls.n	800ed94 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800ed8a:	23d7      	movs	r3, #215	; 0xd7
 800ed8c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800ed8e:	23db      	movs	r3, #219	; 0xdb
 800ed90:	737b      	strb	r3, [r7, #13]
 800ed92:	e01e      	b.n	800edd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a16      	ldr	r2, [pc, #88]	; (800edf0 <SUBGRF_CalibrateImage+0x88>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d904      	bls.n	800eda6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800ed9c:	23c1      	movs	r3, #193	; 0xc1
 800ed9e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800eda0:	23c5      	movs	r3, #197	; 0xc5
 800eda2:	737b      	strb	r3, [r7, #13]
 800eda4:	e015      	b.n	800edd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	4a12      	ldr	r2, [pc, #72]	; (800edf4 <SUBGRF_CalibrateImage+0x8c>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d904      	bls.n	800edb8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800edae:	2375      	movs	r3, #117	; 0x75
 800edb0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800edb2:	2381      	movs	r3, #129	; 0x81
 800edb4:	737b      	strb	r3, [r7, #13]
 800edb6:	e00c      	b.n	800edd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a0f      	ldr	r2, [pc, #60]	; (800edf8 <SUBGRF_CalibrateImage+0x90>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d904      	bls.n	800edca <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800edc0:	236b      	movs	r3, #107	; 0x6b
 800edc2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800edc4:	236f      	movs	r3, #111	; 0x6f
 800edc6:	737b      	strb	r3, [r7, #13]
 800edc8:	e003      	b.n	800edd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800edca:	2329      	movs	r3, #41	; 0x29
 800edcc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800edce:	232b      	movs	r3, #43	; 0x2b
 800edd0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800edd2:	f107 030c 	add.w	r3, r7, #12
 800edd6:	2202      	movs	r2, #2
 800edd8:	4619      	mov	r1, r3
 800edda:	2098      	movs	r0, #152	; 0x98
 800eddc:	f000 fc90 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ede0:	bf00      	nop
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	35a4e900 	.word	0x35a4e900
 800edec:	32a9f880 	.word	0x32a9f880
 800edf0:	2de54480 	.word	0x2de54480
 800edf4:	1b6b0b00 	.word	0x1b6b0b00
 800edf8:	1954fc40 	.word	0x1954fc40

0800edfc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800edfc:	b590      	push	{r4, r7, lr}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4604      	mov	r4, r0
 800ee04:	4608      	mov	r0, r1
 800ee06:	4611      	mov	r1, r2
 800ee08:	461a      	mov	r2, r3
 800ee0a:	4623      	mov	r3, r4
 800ee0c:	71fb      	strb	r3, [r7, #7]
 800ee0e:	4603      	mov	r3, r0
 800ee10:	71bb      	strb	r3, [r7, #6]
 800ee12:	460b      	mov	r3, r1
 800ee14:	717b      	strb	r3, [r7, #5]
 800ee16:	4613      	mov	r3, r2
 800ee18:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800ee1e:	79bb      	ldrb	r3, [r7, #6]
 800ee20:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800ee22:	797b      	ldrb	r3, [r7, #5]
 800ee24:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800ee26:	793b      	ldrb	r3, [r7, #4]
 800ee28:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ee2a:	f107 030c 	add.w	r3, r7, #12
 800ee2e:	2204      	movs	r2, #4
 800ee30:	4619      	mov	r1, r3
 800ee32:	2095      	movs	r0, #149	; 0x95
 800ee34:	f000 fc64 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ee38:	bf00      	nop
 800ee3a:	3714      	adds	r7, #20
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd90      	pop	{r4, r7, pc}

0800ee40 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800ee40:	b590      	push	{r4, r7, lr}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4604      	mov	r4, r0
 800ee48:	4608      	mov	r0, r1
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	4623      	mov	r3, r4
 800ee50:	80fb      	strh	r3, [r7, #6]
 800ee52:	4603      	mov	r3, r0
 800ee54:	80bb      	strh	r3, [r7, #4]
 800ee56:	460b      	mov	r3, r1
 800ee58:	807b      	strh	r3, [r7, #2]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ee5e:	88fb      	ldrh	r3, [r7, #6]
 800ee60:	0a1b      	lsrs	r3, r3, #8
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800ee68:	88fb      	ldrh	r3, [r7, #6]
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ee6e:	88bb      	ldrh	r3, [r7, #4]
 800ee70:	0a1b      	lsrs	r3, r3, #8
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800ee78:	88bb      	ldrh	r3, [r7, #4]
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ee7e:	887b      	ldrh	r3, [r7, #2]
 800ee80:	0a1b      	lsrs	r3, r3, #8
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800ee88:	887b      	ldrh	r3, [r7, #2]
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ee8e:	883b      	ldrh	r3, [r7, #0]
 800ee90:	0a1b      	lsrs	r3, r3, #8
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800ee98:	883b      	ldrh	r3, [r7, #0]
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ee9e:	f107 0308 	add.w	r3, r7, #8
 800eea2:	2208      	movs	r2, #8
 800eea4:	4619      	mov	r1, r3
 800eea6:	2008      	movs	r0, #8
 800eea8:	f000 fc2a 	bl	800f700 <SUBGRF_WriteCommand>
}
 800eeac:	bf00      	nop
 800eeae:	3714      	adds	r7, #20
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd90      	pop	{r4, r7, pc}

0800eeb4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	4603      	mov	r3, r0
 800eebc:	6039      	str	r1, [r7, #0]
 800eebe:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800eec0:	79fb      	ldrb	r3, [r7, #7]
 800eec2:	f003 0307 	and.w	r3, r3, #7
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	0c1b      	lsrs	r3, r3, #16
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	0a1b      	lsrs	r3, r3, #8
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800eee0:	f107 030c 	add.w	r3, r7, #12
 800eee4:	2204      	movs	r2, #4
 800eee6:	4619      	mov	r1, r3
 800eee8:	2097      	movs	r0, #151	; 0x97
 800eeea:	f000 fc09 	bl	800f700 <SUBGRF_WriteCommand>
}
 800eeee:	bf00      	nop
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
	...

0800eef8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800eef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800eefc:	b084      	sub	sp, #16
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800ef06:	4b1d      	ldr	r3, [pc, #116]	; (800ef7c <SUBGRF_SetRfFrequency+0x84>)
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	f083 0301 	eor.w	r3, r3, #1
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d005      	beq.n	800ef20 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7ff ff27 	bl	800ed68 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800ef1a:	4b18      	ldr	r3, [pc, #96]	; (800ef7c <SUBGRF_SetRfFrequency+0x84>)
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	461c      	mov	r4, r3
 800ef26:	4615      	mov	r5, r2
 800ef28:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800ef2c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800ef30:	4a13      	ldr	r2, [pc, #76]	; (800ef80 <SUBGRF_SetRfFrequency+0x88>)
 800ef32:	f04f 0300 	mov.w	r3, #0
 800ef36:	4640      	mov	r0, r8
 800ef38:	4649      	mov	r1, r9
 800ef3a:	f7f2 f96d 	bl	8001218 <__aeabi_uldivmod>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4613      	mov	r3, r2
 800ef44:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	0e1b      	lsrs	r3, r3, #24
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	0c1b      	lsrs	r3, r3, #16
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	0a1b      	lsrs	r3, r3, #8
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800ef64:	f107 0308 	add.w	r3, r7, #8
 800ef68:	2204      	movs	r2, #4
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	2086      	movs	r0, #134	; 0x86
 800ef6e:	f000 fbc7 	bl	800f700 <SUBGRF_WriteCommand>
}
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ef7c:	20006e90 	.word	0x20006e90
 800ef80:	01e84800 	.word	0x01e84800

0800ef84 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800ef8e:	79fa      	ldrb	r2, [r7, #7]
 800ef90:	4b09      	ldr	r3, [pc, #36]	; (800efb8 <SUBGRF_SetPacketType+0x34>)
 800ef92:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d104      	bne.n	800efa4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800efa0:	f000 fafe 	bl	800f5a0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800efa4:	1dfb      	adds	r3, r7, #7
 800efa6:	2201      	movs	r2, #1
 800efa8:	4619      	mov	r1, r3
 800efaa:	208a      	movs	r0, #138	; 0x8a
 800efac:	f000 fba8 	bl	800f700 <SUBGRF_WriteCommand>
}
 800efb0:	bf00      	nop
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	20006e89 	.word	0x20006e89

0800efbc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800efbc:	b480      	push	{r7}
 800efbe:	af00      	add	r7, sp, #0
    return PacketType;
 800efc0:	4b02      	ldr	r3, [pc, #8]	; (800efcc <SUBGRF_GetPacketType+0x10>)
 800efc2:	781b      	ldrb	r3, [r3, #0]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bc80      	pop	{r7}
 800efca:	4770      	bx	lr
 800efcc:	20006e89 	.word	0x20006e89

0800efd0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	71fb      	strb	r3, [r7, #7]
 800efda:	460b      	mov	r3, r1
 800efdc:	71bb      	strb	r3, [r7, #6]
 800efde:	4613      	mov	r3, r2
 800efe0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d149      	bne.n	800f07c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800efe8:	2000      	movs	r0, #0
 800efea:	f7ff fbae 	bl	800e74a <RBI_GetRFOMaxPowerConfig>
 800efee:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800eff0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	da01      	bge.n	800effe <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2b0e      	cmp	r3, #14
 800f002:	d10e      	bne.n	800f022 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800f004:	2301      	movs	r3, #1
 800f006:	2201      	movs	r2, #1
 800f008:	2100      	movs	r1, #0
 800f00a:	2004      	movs	r0, #4
 800f00c:	f7ff fef6 	bl	800edfc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800f010:	79ba      	ldrb	r2, [r7, #6]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	b2db      	uxtb	r3, r3
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	330e      	adds	r3, #14
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	71bb      	strb	r3, [r7, #6]
 800f020:	e01f      	b.n	800f062 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2b0a      	cmp	r3, #10
 800f026:	d10e      	bne.n	800f046 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800f028:	2301      	movs	r3, #1
 800f02a:	2201      	movs	r2, #1
 800f02c:	2100      	movs	r1, #0
 800f02e:	2001      	movs	r0, #1
 800f030:	f7ff fee4 	bl	800edfc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800f034:	79ba      	ldrb	r2, [r7, #6]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	1ad3      	subs	r3, r2, r3
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	330d      	adds	r3, #13
 800f040:	b2db      	uxtb	r3, r3
 800f042:	71bb      	strb	r3, [r7, #6]
 800f044:	e00d      	b.n	800f062 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800f046:	2301      	movs	r3, #1
 800f048:	2201      	movs	r2, #1
 800f04a:	2100      	movs	r1, #0
 800f04c:	2007      	movs	r0, #7
 800f04e:	f7ff fed5 	bl	800edfc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800f052:	79ba      	ldrb	r2, [r7, #6]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	b2db      	uxtb	r3, r3
 800f058:	1ad3      	subs	r3, r2, r3
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	330e      	adds	r3, #14
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800f062:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f066:	f113 0f11 	cmn.w	r3, #17
 800f06a:	da01      	bge.n	800f070 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800f06c:	23ef      	movs	r3, #239	; 0xef
 800f06e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800f070:	2118      	movs	r1, #24
 800f072:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800f076:	f000 fa93 	bl	800f5a0 <SUBGRF_WriteRegister>
 800f07a:	e067      	b.n	800f14c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800f07c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800f080:	f000 faa2 	bl	800f5c8 <SUBGRF_ReadRegister>
 800f084:	4603      	mov	r3, r0
 800f086:	f043 031e 	orr.w	r3, r3, #30
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	4619      	mov	r1, r3
 800f08e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800f092:	f000 fa85 	bl	800f5a0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800f096:	2001      	movs	r0, #1
 800f098:	f7ff fb57 	bl	800e74a <RBI_GetRFOMaxPowerConfig>
 800f09c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800f09e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	da01      	bge.n	800f0ac <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b14      	cmp	r3, #20
 800f0b0:	d10e      	bne.n	800f0d0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2105      	movs	r1, #5
 800f0b8:	2003      	movs	r0, #3
 800f0ba:	f7ff fe9f 	bl	800edfc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800f0be:	79ba      	ldrb	r2, [r7, #6]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	1ad3      	subs	r3, r2, r3
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	3316      	adds	r3, #22
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	71bb      	strb	r3, [r7, #6]
 800f0ce:	e031      	b.n	800f134 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b11      	cmp	r3, #17
 800f0d4:	d10e      	bne.n	800f0f4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2103      	movs	r1, #3
 800f0dc:	2002      	movs	r0, #2
 800f0de:	f7ff fe8d 	bl	800edfc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800f0e2:	79ba      	ldrb	r2, [r7, #6]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	3316      	adds	r3, #22
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	71bb      	strb	r3, [r7, #6]
 800f0f2:	e01f      	b.n	800f134 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b0e      	cmp	r3, #14
 800f0f8:	d10e      	bne.n	800f118 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	2102      	movs	r1, #2
 800f100:	2002      	movs	r0, #2
 800f102:	f7ff fe7b 	bl	800edfc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800f106:	79ba      	ldrb	r2, [r7, #6]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	1ad3      	subs	r3, r2, r3
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	330e      	adds	r3, #14
 800f112:	b2db      	uxtb	r3, r3
 800f114:	71bb      	strb	r3, [r7, #6]
 800f116:	e00d      	b.n	800f134 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800f118:	2301      	movs	r3, #1
 800f11a:	2200      	movs	r2, #0
 800f11c:	2107      	movs	r1, #7
 800f11e:	2004      	movs	r0, #4
 800f120:	f7ff fe6c 	bl	800edfc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800f124:	79ba      	ldrb	r2, [r7, #6]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	3316      	adds	r3, #22
 800f130:	b2db      	uxtb	r3, r3
 800f132:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800f134:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f138:	f113 0f09 	cmn.w	r3, #9
 800f13c:	da01      	bge.n	800f142 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800f13e:	23f7      	movs	r3, #247	; 0xf7
 800f140:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800f142:	2138      	movs	r1, #56	; 0x38
 800f144:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800f148:	f000 fa2a 	bl	800f5a0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800f14c:	79bb      	ldrb	r3, [r7, #6]
 800f14e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800f150:	797b      	ldrb	r3, [r7, #5]
 800f152:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800f154:	f107 0308 	add.w	r3, r7, #8
 800f158:	2202      	movs	r2, #2
 800f15a:	4619      	mov	r1, r3
 800f15c:	208e      	movs	r0, #142	; 0x8e
 800f15e:	f000 facf 	bl	800f700 <SUBGRF_WriteCommand>
}
 800f162:	bf00      	nop
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
	...

0800f16c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800f16c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f170:	b086      	sub	sp, #24
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f17a:	4a61      	ldr	r2, [pc, #388]	; (800f300 <SUBGRF_SetModulationParams+0x194>)
 800f17c:	f107 0308 	add.w	r3, r7, #8
 800f180:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f184:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	781a      	ldrb	r2, [r3, #0]
 800f18c:	4b5d      	ldr	r3, [pc, #372]	; (800f304 <SUBGRF_SetModulationParams+0x198>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	429a      	cmp	r2, r3
 800f192:	d004      	beq.n	800f19e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	4618      	mov	r0, r3
 800f19a:	f7ff fef3 	bl	800ef84 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	f200 80a5 	bhi.w	800f2f2 <SUBGRF_SetModulationParams+0x186>
 800f1a8:	a201      	add	r2, pc, #4	; (adr r2, 800f1b0 <SUBGRF_SetModulationParams+0x44>)
 800f1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ae:	bf00      	nop
 800f1b0:	0800f1c1 	.word	0x0800f1c1
 800f1b4:	0800f281 	.word	0x0800f281
 800f1b8:	0800f243 	.word	0x0800f243
 800f1bc:	0800f2af 	.word	0x0800f2af
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800f1c0:	2308      	movs	r3, #8
 800f1c2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	4a4f      	ldr	r2, [pc, #316]	; (800f308 <SUBGRF_SetModulationParams+0x19c>)
 800f1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1ce:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	0c1b      	lsrs	r3, r3, #16
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	0a1b      	lsrs	r3, r3, #8
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	7b1b      	ldrb	r3, [r3, #12]
 800f1ea:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	7b5b      	ldrb	r3, [r3, #13]
 800f1f0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	461c      	mov	r4, r3
 800f1fa:	4615      	mov	r5, r2
 800f1fc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800f200:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800f204:	4a41      	ldr	r2, [pc, #260]	; (800f30c <SUBGRF_SetModulationParams+0x1a0>)
 800f206:	f04f 0300 	mov.w	r3, #0
 800f20a:	4640      	mov	r0, r8
 800f20c:	4649      	mov	r1, r9
 800f20e:	f7f2 f803 	bl	8001218 <__aeabi_uldivmod>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	4613      	mov	r3, r2
 800f218:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	0c1b      	lsrs	r3, r3, #16
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	0a1b      	lsrs	r3, r3, #8
 800f226:	b2db      	uxtb	r3, r3
 800f228:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f230:	7cfb      	ldrb	r3, [r7, #19]
 800f232:	b29a      	uxth	r2, r3
 800f234:	f107 0308 	add.w	r3, r7, #8
 800f238:	4619      	mov	r1, r3
 800f23a:	208b      	movs	r0, #139	; 0x8b
 800f23c:	f000 fa60 	bl	800f700 <SUBGRF_WriteCommand>
        break;
 800f240:	e058      	b.n	800f2f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800f242:	2304      	movs	r3, #4
 800f244:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	691b      	ldr	r3, [r3, #16]
 800f24a:	4a2f      	ldr	r2, [pc, #188]	; (800f308 <SUBGRF_SetModulationParams+0x19c>)
 800f24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f250:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	0c1b      	lsrs	r3, r3, #16
 800f256:	b2db      	uxtb	r3, r3
 800f258:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	0a1b      	lsrs	r3, r3, #8
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	b2db      	uxtb	r3, r3
 800f266:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	7d1b      	ldrb	r3, [r3, #20]
 800f26c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f26e:	7cfb      	ldrb	r3, [r7, #19]
 800f270:	b29a      	uxth	r2, r3
 800f272:	f107 0308 	add.w	r3, r7, #8
 800f276:	4619      	mov	r1, r3
 800f278:	208b      	movs	r0, #139	; 0x8b
 800f27a:	f000 fa41 	bl	800f700 <SUBGRF_WriteCommand>
        break;
 800f27e:	e039      	b.n	800f2f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800f280:	2304      	movs	r3, #4
 800f282:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	7e1b      	ldrb	r3, [r3, #24]
 800f288:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	7e5b      	ldrb	r3, [r3, #25]
 800f28e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	7e9b      	ldrb	r3, [r3, #26]
 800f294:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	7edb      	ldrb	r3, [r3, #27]
 800f29a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f29c:	7cfb      	ldrb	r3, [r7, #19]
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	f107 0308 	add.w	r3, r7, #8
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	208b      	movs	r0, #139	; 0x8b
 800f2a8:	f000 fa2a 	bl	800f700 <SUBGRF_WriteCommand>

        break;
 800f2ac:	e022      	b.n	800f2f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800f2ae:	2305      	movs	r3, #5
 800f2b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	4a14      	ldr	r2, [pc, #80]	; (800f308 <SUBGRF_SetModulationParams+0x19c>)
 800f2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	0c1b      	lsrs	r3, r3, #16
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	0a1b      	lsrs	r3, r3, #8
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	7b1b      	ldrb	r3, [r3, #12]
 800f2d8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	7b5b      	ldrb	r3, [r3, #13]
 800f2de:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f2e0:	7cfb      	ldrb	r3, [r7, #19]
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	f107 0308 	add.w	r3, r7, #8
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	208b      	movs	r0, #139	; 0x8b
 800f2ec:	f000 fa08 	bl	800f700 <SUBGRF_WriteCommand>
        break;
 800f2f0:	e000      	b.n	800f2f4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800f2f2:	bf00      	nop
    }
}
 800f2f4:	bf00      	nop
 800f2f6:	3718      	adds	r7, #24
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f2fe:	bf00      	nop
 800f300:	0801a180 	.word	0x0801a180
 800f304:	20006e89 	.word	0x20006e89
 800f308:	3d090000 	.word	0x3d090000
 800f30c:	01e84800 	.word	0x01e84800

0800f310 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b086      	sub	sp, #24
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800f318:	2300      	movs	r3, #0
 800f31a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f31c:	4a48      	ldr	r2, [pc, #288]	; (800f440 <SUBGRF_SetPacketParams+0x130>)
 800f31e:	f107 030c 	add.w	r3, r7, #12
 800f322:	ca07      	ldmia	r2, {r0, r1, r2}
 800f324:	c303      	stmia	r3!, {r0, r1}
 800f326:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	781a      	ldrb	r2, [r3, #0]
 800f32c:	4b45      	ldr	r3, [pc, #276]	; (800f444 <SUBGRF_SetPacketParams+0x134>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	429a      	cmp	r2, r3
 800f332:	d004      	beq.n	800f33e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff fe23 	bl	800ef84 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	2b03      	cmp	r3, #3
 800f344:	d878      	bhi.n	800f438 <SUBGRF_SetPacketParams+0x128>
 800f346:	a201      	add	r2, pc, #4	; (adr r2, 800f34c <SUBGRF_SetPacketParams+0x3c>)
 800f348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34c:	0800f35d 	.word	0x0800f35d
 800f350:	0800f3ed 	.word	0x0800f3ed
 800f354:	0800f3e1 	.word	0x0800f3e1
 800f358:	0800f35d 	.word	0x0800f35d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	7a5b      	ldrb	r3, [r3, #9]
 800f360:	2bf1      	cmp	r3, #241	; 0xf1
 800f362:	d10a      	bne.n	800f37a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800f364:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f368:	f7ff faaa 	bl	800e8c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800f36c:	f248 0005 	movw	r0, #32773	; 0x8005
 800f370:	f7ff fac6 	bl	800e900 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800f374:	2302      	movs	r3, #2
 800f376:	75bb      	strb	r3, [r7, #22]
 800f378:	e011      	b.n	800f39e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	7a5b      	ldrb	r3, [r3, #9]
 800f37e:	2bf2      	cmp	r3, #242	; 0xf2
 800f380:	d10a      	bne.n	800f398 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800f382:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800f386:	f7ff fa9b 	bl	800e8c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800f38a:	f241 0021 	movw	r0, #4129	; 0x1021
 800f38e:	f7ff fab7 	bl	800e900 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800f392:	2306      	movs	r3, #6
 800f394:	75bb      	strb	r3, [r7, #22]
 800f396:	e002      	b.n	800f39e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	7a5b      	ldrb	r3, [r3, #9]
 800f39c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800f39e:	2309      	movs	r3, #9
 800f3a0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	885b      	ldrh	r3, [r3, #2]
 800f3a6:	0a1b      	lsrs	r3, r3, #8
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	885b      	ldrh	r3, [r3, #2]
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	791b      	ldrb	r3, [r3, #4]
 800f3ba:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	795b      	ldrb	r3, [r3, #5]
 800f3c0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	799b      	ldrb	r3, [r3, #6]
 800f3c6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	79db      	ldrb	r3, [r3, #7]
 800f3cc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	7a1b      	ldrb	r3, [r3, #8]
 800f3d2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800f3d4:	7dbb      	ldrb	r3, [r7, #22]
 800f3d6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	7a9b      	ldrb	r3, [r3, #10]
 800f3dc:	753b      	strb	r3, [r7, #20]
        break;
 800f3de:	e022      	b.n	800f426 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7b1b      	ldrb	r3, [r3, #12]
 800f3e8:	733b      	strb	r3, [r7, #12]
        break;
 800f3ea:	e01c      	b.n	800f426 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800f3ec:	2306      	movs	r3, #6
 800f3ee:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	89db      	ldrh	r3, [r3, #14]
 800f3f4:	0a1b      	lsrs	r3, r3, #8
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	89db      	ldrh	r3, [r3, #14]
 800f400:	b2db      	uxtb	r3, r3
 800f402:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	7c1a      	ldrb	r2, [r3, #16]
 800f408:	4b0f      	ldr	r3, [pc, #60]	; (800f448 <SUBGRF_SetPacketParams+0x138>)
 800f40a:	4611      	mov	r1, r2
 800f40c:	7019      	strb	r1, [r3, #0]
 800f40e:	4613      	mov	r3, r2
 800f410:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	7c5b      	ldrb	r3, [r3, #17]
 800f416:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	7c9b      	ldrb	r3, [r3, #18]
 800f41c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	7cdb      	ldrb	r3, [r3, #19]
 800f422:	747b      	strb	r3, [r7, #17]
        break;
 800f424:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800f426:	7dfb      	ldrb	r3, [r7, #23]
 800f428:	b29a      	uxth	r2, r3
 800f42a:	f107 030c 	add.w	r3, r7, #12
 800f42e:	4619      	mov	r1, r3
 800f430:	208c      	movs	r0, #140	; 0x8c
 800f432:	f000 f965 	bl	800f700 <SUBGRF_WriteCommand>
 800f436:	e000      	b.n	800f43a <SUBGRF_SetPacketParams+0x12a>
        return;
 800f438:	bf00      	nop
}
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	0801a188 	.word	0x0801a188
 800f444:	20006e89 	.word	0x20006e89
 800f448:	20006e8a 	.word	0x20006e8a

0800f44c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	4603      	mov	r3, r0
 800f454:	460a      	mov	r2, r1
 800f456:	71fb      	strb	r3, [r7, #7]
 800f458:	4613      	mov	r3, r2
 800f45a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800f460:	79bb      	ldrb	r3, [r7, #6]
 800f462:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800f464:	f107 030c 	add.w	r3, r7, #12
 800f468:	2202      	movs	r2, #2
 800f46a:	4619      	mov	r1, r3
 800f46c:	208f      	movs	r0, #143	; 0x8f
 800f46e:	f000 f947 	bl	800f700 <SUBGRF_WriteCommand>
}
 800f472:	bf00      	nop
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b082      	sub	sp, #8
 800f47e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800f480:	2300      	movs	r3, #0
 800f482:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800f484:	1d3b      	adds	r3, r7, #4
 800f486:	2201      	movs	r2, #1
 800f488:	4619      	mov	r1, r3
 800f48a:	2015      	movs	r0, #21
 800f48c:	f000 f95a 	bl	800f744 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800f490:	793b      	ldrb	r3, [r7, #4]
 800f492:	425b      	negs	r3, r3
 800f494:	105b      	asrs	r3, r3, #1
 800f496:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800f498:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800f4ae:	f107 030c 	add.w	r3, r7, #12
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	2013      	movs	r0, #19
 800f4b8:	f000 f944 	bl	800f744 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800f4bc:	f7ff fd7e 	bl	800efbc <SUBGRF_GetPacketType>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d10d      	bne.n	800f4e2 <SUBGRF_GetRxBufferStatus+0x3e>
 800f4c6:	4b0c      	ldr	r3, [pc, #48]	; (800f4f8 <SUBGRF_GetRxBufferStatus+0x54>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d108      	bne.n	800f4e2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800f4d0:	f240 7002 	movw	r0, #1794	; 0x702
 800f4d4:	f000 f878 	bl	800f5c8 <SUBGRF_ReadRegister>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	461a      	mov	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	701a      	strb	r2, [r3, #0]
 800f4e0:	e002      	b.n	800f4e8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800f4e2:	7b3a      	ldrb	r2, [r7, #12]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800f4e8:	7b7a      	ldrb	r2, [r7, #13]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	701a      	strb	r2, [r3, #0]
}
 800f4ee:	bf00      	nop
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20006e8a 	.word	0x20006e8a

0800f4fc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800f504:	f107 030c 	add.w	r3, r7, #12
 800f508:	2203      	movs	r2, #3
 800f50a:	4619      	mov	r1, r3
 800f50c:	2014      	movs	r0, #20
 800f50e:	f000 f919 	bl	800f744 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800f512:	f7ff fd53 	bl	800efbc <SUBGRF_GetPacketType>
 800f516:	4603      	mov	r3, r0
 800f518:	461a      	mov	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d002      	beq.n	800f52c <SUBGRF_GetPacketStatus+0x30>
 800f526:	2b01      	cmp	r3, #1
 800f528:	d013      	beq.n	800f552 <SUBGRF_GetPacketStatus+0x56>
 800f52a:	e02a      	b.n	800f582 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f52c:	7b3a      	ldrb	r2, [r7, #12]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800f532:	7b7b      	ldrb	r3, [r7, #13]
 800f534:	425b      	negs	r3, r3
 800f536:	105b      	asrs	r3, r3, #1
 800f538:	b25a      	sxtb	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800f53e:	7bbb      	ldrb	r3, [r7, #14]
 800f540:	425b      	negs	r3, r3
 800f542:	105b      	asrs	r3, r3, #1
 800f544:	b25a      	sxtb	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	609a      	str	r2, [r3, #8]
            break;
 800f550:	e020      	b.n	800f594 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800f552:	7b3b      	ldrb	r3, [r7, #12]
 800f554:	425b      	negs	r3, r3
 800f556:	105b      	asrs	r3, r3, #1
 800f558:	b25a      	sxtb	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800f55e:	7b7b      	ldrb	r3, [r7, #13]
 800f560:	b25b      	sxtb	r3, r3
 800f562:	3302      	adds	r3, #2
 800f564:	109b      	asrs	r3, r3, #2
 800f566:	b25a      	sxtb	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800f56c:	7bbb      	ldrb	r3, [r7, #14]
 800f56e:	425b      	negs	r3, r3
 800f570:	105b      	asrs	r3, r3, #1
 800f572:	b25a      	sxtb	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800f578:	4b08      	ldr	r3, [pc, #32]	; (800f59c <SUBGRF_GetPacketStatus+0xa0>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	611a      	str	r2, [r3, #16]
            break;
 800f580:	e008      	b.n	800f594 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800f582:	2214      	movs	r2, #20
 800f584:	2100      	movs	r1, #0
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f007 fb1d 	bl	8016bc6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	220f      	movs	r2, #15
 800f590:	701a      	strb	r2, [r3, #0]
            break;
 800f592:	bf00      	nop
    }
}
 800f594:	bf00      	nop
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	20006e8c 	.word	0x20006e8c

0800f5a0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	460a      	mov	r2, r1
 800f5aa:	80fb      	strh	r3, [r7, #6]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800f5b0:	1d7a      	adds	r2, r7, #5
 800f5b2:	88f9      	ldrh	r1, [r7, #6]
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	4803      	ldr	r0, [pc, #12]	; (800f5c4 <SUBGRF_WriteRegister+0x24>)
 800f5b8:	f005 f942 	bl	8014840 <HAL_SUBGHZ_WriteRegisters>
}
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	20005388 	.word	0x20005388

0800f5c8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800f5d2:	f107 020f 	add.w	r2, r7, #15
 800f5d6:	88f9      	ldrh	r1, [r7, #6]
 800f5d8:	2301      	movs	r3, #1
 800f5da:	4804      	ldr	r0, [pc, #16]	; (800f5ec <SUBGRF_ReadRegister+0x24>)
 800f5dc:	f005 f98f 	bl	80148fe <HAL_SUBGHZ_ReadRegisters>
    return data;
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	20005388 	.word	0x20005388

0800f5f0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	6039      	str	r1, [r7, #0]
 800f5fa:	80fb      	strh	r3, [r7, #6]
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f600:	f3ef 8310 	mrs	r3, PRIMASK
 800f604:	60fb      	str	r3, [r7, #12]
  return(result);
 800f606:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f608:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f60a:	b672      	cpsid	i
}
 800f60c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800f60e:	88bb      	ldrh	r3, [r7, #4]
 800f610:	88f9      	ldrh	r1, [r7, #6]
 800f612:	683a      	ldr	r2, [r7, #0]
 800f614:	4806      	ldr	r0, [pc, #24]	; (800f630 <SUBGRF_WriteRegisters+0x40>)
 800f616:	f005 f913 	bl	8014840 <HAL_SUBGHZ_WriteRegisters>
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	f383 8810 	msr	PRIMASK, r3
}
 800f624:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f626:	bf00      	nop
 800f628:	3718      	adds	r7, #24
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	20005388 	.word	0x20005388

0800f634 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	6039      	str	r1, [r7, #0]
 800f63e:	80fb      	strh	r3, [r7, #6]
 800f640:	4613      	mov	r3, r2
 800f642:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f644:	f3ef 8310 	mrs	r3, PRIMASK
 800f648:	60fb      	str	r3, [r7, #12]
  return(result);
 800f64a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f64c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f64e:	b672      	cpsid	i
}
 800f650:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800f652:	88bb      	ldrh	r3, [r7, #4]
 800f654:	88f9      	ldrh	r1, [r7, #6]
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	4806      	ldr	r0, [pc, #24]	; (800f674 <SUBGRF_ReadRegisters+0x40>)
 800f65a:	f005 f950 	bl	80148fe <HAL_SUBGHZ_ReadRegisters>
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	f383 8810 	msr	PRIMASK, r3
}
 800f668:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f66a:	bf00      	nop
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20005388 	.word	0x20005388

0800f678 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	4603      	mov	r3, r0
 800f680:	6039      	str	r1, [r7, #0]
 800f682:	71fb      	strb	r3, [r7, #7]
 800f684:	4613      	mov	r3, r2
 800f686:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f688:	f3ef 8310 	mrs	r3, PRIMASK
 800f68c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f68e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f692:	b672      	cpsid	i
}
 800f694:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800f696:	79bb      	ldrb	r3, [r7, #6]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	79f9      	ldrb	r1, [r7, #7]
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	4806      	ldr	r0, [pc, #24]	; (800f6b8 <SUBGRF_WriteBuffer+0x40>)
 800f6a0:	f005 fa41 	bl	8014b26 <HAL_SUBGHZ_WriteBuffer>
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	f383 8810 	msr	PRIMASK, r3
}
 800f6ae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f6b0:	bf00      	nop
 800f6b2:	3718      	adds	r7, #24
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	20005388 	.word	0x20005388

0800f6bc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	6039      	str	r1, [r7, #0]
 800f6c6:	71fb      	strb	r3, [r7, #7]
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800f6d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f6d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6d6:	b672      	cpsid	i
}
 800f6d8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800f6da:	79bb      	ldrb	r3, [r7, #6]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	79f9      	ldrb	r1, [r7, #7]
 800f6e0:	683a      	ldr	r2, [r7, #0]
 800f6e2:	4806      	ldr	r0, [pc, #24]	; (800f6fc <SUBGRF_ReadBuffer+0x40>)
 800f6e4:	f005 fa72 	bl	8014bcc <HAL_SUBGHZ_ReadBuffer>
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	f383 8810 	msr	PRIMASK, r3
}
 800f6f2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f6f4:	bf00      	nop
 800f6f6:	3718      	adds	r7, #24
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	20005388 	.word	0x20005388

0800f700 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	6039      	str	r1, [r7, #0]
 800f70a:	71fb      	strb	r3, [r7, #7]
 800f70c:	4613      	mov	r3, r2
 800f70e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f710:	f3ef 8310 	mrs	r3, PRIMASK
 800f714:	60fb      	str	r3, [r7, #12]
  return(result);
 800f716:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f718:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f71a:	b672      	cpsid	i
}
 800f71c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f71e:	88bb      	ldrh	r3, [r7, #4]
 800f720:	79f9      	ldrb	r1, [r7, #7]
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	4806      	ldr	r0, [pc, #24]	; (800f740 <SUBGRF_WriteCommand+0x40>)
 800f726:	f005 f94b 	bl	80149c0 <HAL_SUBGHZ_ExecSetCmd>
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	f383 8810 	msr	PRIMASK, r3
}
 800f734:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f736:	bf00      	nop
 800f738:	3718      	adds	r7, #24
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20005388 	.word	0x20005388

0800f744 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	6039      	str	r1, [r7, #0]
 800f74e:	71fb      	strb	r3, [r7, #7]
 800f750:	4613      	mov	r3, r2
 800f752:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f754:	f3ef 8310 	mrs	r3, PRIMASK
 800f758:	60fb      	str	r3, [r7, #12]
  return(result);
 800f75a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f75c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f75e:	b672      	cpsid	i
}
 800f760:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f762:	88bb      	ldrh	r3, [r7, #4]
 800f764:	79f9      	ldrb	r1, [r7, #7]
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	4806      	ldr	r0, [pc, #24]	; (800f784 <SUBGRF_ReadCommand+0x40>)
 800f76a:	f005 f988 	bl	8014a7e <HAL_SUBGHZ_ExecGetCmd>
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f383 8810 	msr	PRIMASK, r3
}
 800f778:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f77a:	bf00      	nop
 800f77c:	3718      	adds	r7, #24
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	20005388 	.word	0x20005388

0800f788 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	4603      	mov	r3, r0
 800f790:	460a      	mov	r2, r1
 800f792:	71fb      	strb	r3, [r7, #7]
 800f794:	4613      	mov	r3, r2
 800f796:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800f798:	2301      	movs	r3, #1
 800f79a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800f79c:	79bb      	ldrb	r3, [r7, #6]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d10d      	bne.n	800f7be <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800f7a2:	79fb      	ldrb	r3, [r7, #7]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d104      	bne.n	800f7b2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800f7ac:	2004      	movs	r0, #4
 800f7ae:	f000 f8ef 	bl	800f990 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	d107      	bne.n	800f7c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800f7b8:	2303      	movs	r3, #3
 800f7ba:	73fb      	strb	r3, [r7, #15]
 800f7bc:	e004      	b.n	800f7c8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800f7be:	79bb      	ldrb	r3, [r7, #6]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d101      	bne.n	800f7c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe ff7c 	bl	800e6c8 <RBI_ConfigRFSwitch>
}
 800f7d0:	bf00      	nop
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	4603      	mov	r3, r0
 800f7e0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800f7e6:	f7fe ff8f 	bl	800e708 <RBI_GetTxConfig>
 800f7ea:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d016      	beq.n	800f820 <SUBGRF_SetRfTxPower+0x48>
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	dc16      	bgt.n	800f826 <SUBGRF_SetRfTxPower+0x4e>
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d003      	beq.n	800f806 <SUBGRF_SetRfTxPower+0x2e>
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b01      	cmp	r3, #1
 800f802:	d00a      	beq.n	800f81a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800f804:	e00f      	b.n	800f826 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800f806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f80a:	2b0f      	cmp	r3, #15
 800f80c:	dd02      	ble.n	800f814 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800f80e:	2302      	movs	r3, #2
 800f810:	73fb      	strb	r3, [r7, #15]
            break;
 800f812:	e009      	b.n	800f828 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800f814:	2301      	movs	r3, #1
 800f816:	73fb      	strb	r3, [r7, #15]
            break;
 800f818:	e006      	b.n	800f828 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800f81a:	2301      	movs	r3, #1
 800f81c:	73fb      	strb	r3, [r7, #15]
            break;
 800f81e:	e003      	b.n	800f828 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800f820:	2302      	movs	r3, #2
 800f822:	73fb      	strb	r3, [r7, #15]
            break;
 800f824:	e000      	b.n	800f828 <SUBGRF_SetRfTxPower+0x50>
            break;
 800f826:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800f828:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800f82c:	7bfb      	ldrb	r3, [r7, #15]
 800f82e:	2202      	movs	r2, #2
 800f830:	4618      	mov	r0, r3
 800f832:	f7ff fbcd 	bl	800efd0 <SUBGRF_SetTxParams>

    return paSelect;
 800f836:	7bfb      	ldrb	r3, [r7, #15]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800f840:	b480      	push	{r7}
 800f842:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800f844:	2301      	movs	r3, #1
}
 800f846:	4618      	mov	r0, r3
 800f848:	46bd      	mov	sp, r7
 800f84a:	bc80      	pop	{r7}
 800f84c:	4770      	bx	lr
	...

0800f850 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800f858:	4b03      	ldr	r3, [pc, #12]	; (800f868 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2001      	movs	r0, #1
 800f85e:	4798      	blx	r3
}
 800f860:	bf00      	nop
 800f862:	3708      	adds	r7, #8
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	20006e94 	.word	0x20006e94

0800f86c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800f874:	4b03      	ldr	r3, [pc, #12]	; (800f884 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2002      	movs	r0, #2
 800f87a:	4798      	blx	r3
}
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	20006e94 	.word	0x20006e94

0800f888 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800f890:	4b03      	ldr	r3, [pc, #12]	; (800f8a0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2040      	movs	r0, #64	; 0x40
 800f896:	4798      	blx	r3
}
 800f898:	bf00      	nop
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	20006e94 	.word	0x20006e94

0800f8a4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800f8b0:	78fb      	ldrb	r3, [r7, #3]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d002      	beq.n	800f8bc <HAL_SUBGHZ_CADStatusCallback+0x18>
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d005      	beq.n	800f8c6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800f8ba:	e00a      	b.n	800f8d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800f8bc:	4b07      	ldr	r3, [pc, #28]	; (800f8dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2080      	movs	r0, #128	; 0x80
 800f8c2:	4798      	blx	r3
            break;
 800f8c4:	e005      	b.n	800f8d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800f8c6:	4b05      	ldr	r3, [pc, #20]	; (800f8dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f8ce:	4798      	blx	r3
            break;
 800f8d0:	bf00      	nop
    }
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20006e94 	.word	0x20006e94

0800f8e0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800f8e8:	4b04      	ldr	r3, [pc, #16]	; (800f8fc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f8f0:	4798      	blx	r3
}
 800f8f2:	bf00      	nop
 800f8f4:	3708      	adds	r7, #8
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	20006e94 	.word	0x20006e94

0800f900 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800f908:	4b03      	ldr	r3, [pc, #12]	; (800f918 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2020      	movs	r0, #32
 800f90e:	4798      	blx	r3
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	20006e94 	.word	0x20006e94

0800f91c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800f924:	4b03      	ldr	r3, [pc, #12]	; (800f934 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2004      	movs	r0, #4
 800f92a:	4798      	blx	r3
}
 800f92c:	bf00      	nop
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	20006e94 	.word	0x20006e94

0800f938 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800f940:	4b03      	ldr	r3, [pc, #12]	; (800f950 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2008      	movs	r0, #8
 800f946:	4798      	blx	r3
}
 800f948:	bf00      	nop
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	20006e94 	.word	0x20006e94

0800f954 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800f95c:	4b03      	ldr	r3, [pc, #12]	; (800f96c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2010      	movs	r0, #16
 800f962:	4798      	blx	r3
}
 800f964:	bf00      	nop
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	20006e94 	.word	0x20006e94

0800f970 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800f978:	4b04      	ldr	r3, [pc, #16]	; (800f98c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f980:	4798      	blx	r3
}
 800f982:	bf00      	nop
 800f984:	3708      	adds	r7, #8
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20006e94 	.word	0x20006e94

0800f990 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	4603      	mov	r3, r0
 800f998:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800f99a:	f7fe fecb 	bl	800e734 <RBI_IsDCDC>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d112      	bne.n	800f9ca <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800f9a4:	f640 1023 	movw	r0, #2339	; 0x923
 800f9a8:	f7ff fe0e 	bl	800f5c8 <SUBGRF_ReadRegister>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	f023 0306 	bic.w	r3, r3, #6
 800f9b6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800f9b8:	7bfa      	ldrb	r2, [r7, #15]
 800f9ba:	79fb      	ldrb	r3, [r7, #7]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	f640 1023 	movw	r0, #2339	; 0x923
 800f9c6:	f7ff fdeb 	bl	800f5a0 <SUBGRF_WriteRegister>
  }
}
 800f9ca:	bf00      	nop
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
	...

0800f9d4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800f9e2:	231f      	movs	r3, #31
 800f9e4:	e016      	b.n	800fa14 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	73fb      	strb	r3, [r7, #15]
 800f9ea:	e00f      	b.n	800fa0c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800f9ec:	7bfb      	ldrb	r3, [r7, #15]
 800f9ee:	4a0c      	ldr	r2, [pc, #48]	; (800fa20 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800f9f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d205      	bcs.n	800fa06 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800f9fa:	7bfb      	ldrb	r3, [r7, #15]
 800f9fc:	4a08      	ldr	r2, [pc, #32]	; (800fa20 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	4413      	add	r3, r2
 800fa02:	791b      	ldrb	r3, [r3, #4]
 800fa04:	e006      	b.n	800fa14 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800fa06:	7bfb      	ldrb	r3, [r7, #15]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	73fb      	strb	r3, [r7, #15]
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
 800fa0e:	2b15      	cmp	r3, #21
 800fa10:	d9ec      	bls.n	800f9ec <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800fa12:	e7fe      	b.n	800fa12 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3714      	adds	r7, #20
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bc80      	pop	{r7}
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	0801aa20 	.word	0x0801aa20

0800fa24 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b08a      	sub	sp, #40	; 0x28
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800fa2e:	4b35      	ldr	r3, [pc, #212]	; (800fb04 <SUBGRF_GetCFO+0xe0>)
 800fa30:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800fa32:	f640 0007 	movw	r0, #2055	; 0x807
 800fa36:	f7ff fdc7 	bl	800f5c8 <SUBGRF_ReadRegister>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800fa3e:	7ffb      	ldrb	r3, [r7, #31]
 800fa40:	08db      	lsrs	r3, r3, #3
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	f003 0303 	and.w	r3, r3, #3
 800fa48:	3328      	adds	r3, #40	; 0x28
 800fa4a:	443b      	add	r3, r7
 800fa4c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800fa50:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800fa52:	7ffb      	ldrb	r3, [r7, #31]
 800fa54:	f003 0307 	and.w	r3, r3, #7
 800fa58:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800fa5a:	7fba      	ldrb	r2, [r7, #30]
 800fa5c:	7f7b      	ldrb	r3, [r7, #29]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	fa02 f303 	lsl.w	r3, r2, r3
 800fa64:	461a      	mov	r2, r3
 800fa66:	4b28      	ldr	r3, [pc, #160]	; (800fb08 <SUBGRF_GetCFO+0xe4>)
 800fa68:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa6c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800fa6e:	69ba      	ldr	r2, [r7, #24]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa76:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800fa7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa82:	697a      	ldr	r2, [r7, #20]
 800fa84:	fb02 f303 	mul.w	r3, r2, r3
 800fa88:	2b07      	cmp	r3, #7
 800fa8a:	d802      	bhi.n	800fa92 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800fa8c:	2302      	movs	r3, #2
 800fa8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800fa92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	fb02 f303 	mul.w	r3, r2, r3
 800fa9c:	2b03      	cmp	r3, #3
 800fa9e:	d802      	bhi.n	800faa6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800faa0:	2304      	movs	r3, #4
 800faa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800faa6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	fb02 f303 	mul.w	r3, r2, r3
 800fab0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800fab2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800fab6:	f7ff fd87 	bl	800f5c8 <SUBGRF_ReadRegister>
 800faba:	4603      	mov	r3, r0
 800fabc:	021b      	lsls	r3, r3, #8
 800fabe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800fac2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800fac4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800fac8:	f7ff fd7e 	bl	800f5c8 <SUBGRF_ReadRegister>
 800facc:	4603      	mov	r3, r0
 800face:	461a      	mov	r2, r3
 800fad0:	6a3b      	ldr	r3, [r7, #32]
 800fad2:	4313      	orrs	r3, r2
 800fad4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800fad6:	6a3b      	ldr	r3, [r7, #32]
 800fad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d005      	beq.n	800faec <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800fae6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800faea:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	095b      	lsrs	r3, r3, #5
 800faf0:	6a3a      	ldr	r2, [r7, #32]
 800faf2:	fb02 f303 	mul.w	r3, r2, r3
 800faf6:	11da      	asrs	r2, r3, #7
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	601a      	str	r2, [r3, #0]
}
 800fafc:	bf00      	nop
 800fafe:	3728      	adds	r7, #40	; 0x28
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	0c0a0804 	.word	0x0c0a0804
 800fb08:	01e84800 	.word	0x01e84800

0800fb0c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b087      	sub	sp, #28
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	4603      	mov	r3, r0
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
 800fb18:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800fb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb22:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800fb24:	697b      	ldr	r3, [r7, #20]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	371c      	adds	r7, #28
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bc80      	pop	{r7}
 800fb2e:	4770      	bx	lr

0800fb30 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800fb30:	b480      	push	{r7}
 800fb32:	b087      	sub	sp, #28
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	4603      	mov	r3, r0
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800fb42:	f04f 33ff 	mov.w	r3, #4294967295
 800fb46:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800fb48:	697b      	ldr	r3, [r7, #20]
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	371c      	adds	r7, #28
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bc80      	pop	{r7}
 800fb52:	4770      	bx	lr

0800fb54 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800fb60:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bc80      	pop	{r7}
 800fb6c:	4770      	bx	lr

0800fb6e <RFW_DeInit>:

void RFW_DeInit( void )
{
 800fb6e:	b480      	push	{r7}
 800fb70:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800fb72:	bf00      	nop
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bc80      	pop	{r7}
 800fb78:	4770      	bx	lr

0800fb7a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800fb7a:	b480      	push	{r7}
 800fb7c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800fb7e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bc80      	pop	{r7}
 800fb86:	4770      	bx	lr

0800fb88 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800fb88:	b480      	push	{r7}
 800fb8a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800fb8c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bc80      	pop	{r7}
 800fb94:	4770      	bx	lr

0800fb96 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800fb96:	b480      	push	{r7}
 800fb98:	b083      	sub	sp, #12
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800fba0:	bf00      	nop
 800fba2:	370c      	adds	r7, #12
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bc80      	pop	{r7}
 800fba8:	4770      	bx	lr

0800fbaa <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800fbaa:	b480      	push	{r7}
 800fbac:	b087      	sub	sp, #28
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	607a      	str	r2, [r7, #4]
 800fbb6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800fbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbbc:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800fbbe:	697b      	ldr	r3, [r7, #20]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	371c      	adds	r7, #28
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bc80      	pop	{r7}
 800fbc8:	4770      	bx	lr

0800fbca <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800fbca:	b480      	push	{r7}
 800fbcc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800fbce:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bc80      	pop	{r7}
 800fbd8:	4770      	bx	lr

0800fbda <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800fbda:	b480      	push	{r7}
 800fbdc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800fbde:	bf00      	nop
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bc80      	pop	{r7}
 800fbe4:	4770      	bx	lr

0800fbe6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800fbe6:	b480      	push	{r7}
 800fbe8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800fbea:	bf00      	nop
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bc80      	pop	{r7}
 800fbf0:	4770      	bx	lr

0800fbf2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b083      	sub	sp, #12
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800fbfc:	bf00      	nop
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bc80      	pop	{r7}
 800fc04:	4770      	bx	lr
	...

0800fc08 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800fc08:	b590      	push	{r4, r7, lr}
 800fc0a:	b08b      	sub	sp, #44	; 0x2c
 800fc0c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800fc0e:	4b2c      	ldr	r3, [pc, #176]	; (800fcc0 <SubghzApp_Init+0xb8>)
 800fc10:	4a2c      	ldr	r2, [pc, #176]	; (800fcc4 <SubghzApp_Init+0xbc>)
 800fc12:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800fc14:	4b2a      	ldr	r3, [pc, #168]	; (800fcc0 <SubghzApp_Init+0xb8>)
 800fc16:	4a2c      	ldr	r2, [pc, #176]	; (800fcc8 <SubghzApp_Init+0xc0>)
 800fc18:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800fc1a:	4b29      	ldr	r3, [pc, #164]	; (800fcc0 <SubghzApp_Init+0xb8>)
 800fc1c:	4a2b      	ldr	r2, [pc, #172]	; (800fccc <SubghzApp_Init+0xc4>)
 800fc1e:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800fc20:	4b27      	ldr	r3, [pc, #156]	; (800fcc0 <SubghzApp_Init+0xb8>)
 800fc22:	4a2b      	ldr	r2, [pc, #172]	; (800fcd0 <SubghzApp_Init+0xc8>)
 800fc24:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800fc26:	4b26      	ldr	r3, [pc, #152]	; (800fcc0 <SubghzApp_Init+0xb8>)
 800fc28:	4a2a      	ldr	r2, [pc, #168]	; (800fcd4 <SubghzApp_Init+0xcc>)
 800fc2a:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800fc2c:	4b2a      	ldr	r3, [pc, #168]	; (800fcd8 <SubghzApp_Init+0xd0>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4823      	ldr	r0, [pc, #140]	; (800fcc0 <SubghzApp_Init+0xb8>)
 800fc32:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
    /*calculate random delay for synchronization*/

    /* Radio Set frequency */
    Radio.SetChannel(RF_FREQUENCY);
 800fc34:	4b28      	ldr	r3, [pc, #160]	; (800fcd8 <SubghzApp_Init+0xd0>)
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	4828      	ldr	r0, [pc, #160]	; (800fcdc <SubghzApp_Init+0xd4>)
 800fc3a:	4798      	blx	r3

    /* Radio configuration */
  #if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
    Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800fc3c:	4b26      	ldr	r3, [pc, #152]	; (800fcd8 <SubghzApp_Init+0xd0>)
 800fc3e:	69dc      	ldr	r4, [r3, #28]
 800fc40:	f242 7310 	movw	r3, #10000	; 0x2710
 800fc44:	9308      	str	r3, [sp, #32]
 800fc46:	2300      	movs	r3, #0
 800fc48:	9307      	str	r3, [sp, #28]
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	9306      	str	r3, [sp, #24]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	9305      	str	r3, [sp, #20]
 800fc52:	2301      	movs	r3, #1
 800fc54:	9304      	str	r3, [sp, #16]
 800fc56:	2300      	movs	r3, #0
 800fc58:	9303      	str	r3, [sp, #12]
 800fc5a:	2308      	movs	r3, #8
 800fc5c:	9302      	str	r3, [sp, #8]
 800fc5e:	2301      	movs	r3, #1
 800fc60:	9301      	str	r3, [sp, #4]
 800fc62:	230c      	movs	r3, #12
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	2300      	movs	r3, #0
 800fc68:	2200      	movs	r2, #0
 800fc6a:	2116      	movs	r1, #22
 800fc6c:	2001      	movs	r0, #1
 800fc6e:	47a0      	blx	r4
                      LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                      LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                      true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800fc70:	4b19      	ldr	r3, [pc, #100]	; (800fcd8 <SubghzApp_Init+0xd0>)
 800fc72:	699c      	ldr	r4, [r3, #24]
 800fc74:	2301      	movs	r3, #1
 800fc76:	9309      	str	r3, [sp, #36]	; 0x24
 800fc78:	2300      	movs	r3, #0
 800fc7a:	9308      	str	r3, [sp, #32]
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	9307      	str	r3, [sp, #28]
 800fc80:	2300      	movs	r3, #0
 800fc82:	9306      	str	r3, [sp, #24]
 800fc84:	2301      	movs	r3, #1
 800fc86:	9305      	str	r3, [sp, #20]
 800fc88:	2300      	movs	r3, #0
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9303      	str	r3, [sp, #12]
 800fc90:	2305      	movs	r3, #5
 800fc92:	9302      	str	r3, [sp, #8]
 800fc94:	2308      	movs	r3, #8
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	2300      	movs	r3, #0
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	220c      	movs	r2, #12
 800fca0:	2100      	movs	r1, #0
 800fca2:	2001      	movs	r0, #1
 800fca4:	47a0      	blx	r4
                      LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                      LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                      0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

    Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800fca6:	4b0c      	ldr	r3, [pc, #48]	; (800fcd8 <SubghzApp_Init+0xd0>)
 800fca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcaa:	21ff      	movs	r1, #255	; 0xff
 800fcac:	2001      	movs	r0, #1
 800fcae:	4798      	blx	r3
  #endif /* USE_MODEM_LORA | USE_MODEM_FSK */

    /*set idle*/
    //gpio_write(PIN_PB5, GPIO_LOW);
    //Radio.Rx(RX_TIMEOUT_VALUE);
    lora_state = IDLE;
 800fcb0:	4b0b      	ldr	r3, [pc, #44]	; (800fce0 <SubghzApp_Init+0xd8>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SubghzApp_Init_2 */
}
 800fcb6:	bf00      	nop
 800fcb8:	3704      	adds	r7, #4
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd90      	pop	{r4, r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	20006e98 	.word	0x20006e98
 800fcc4:	0800fce5 	.word	0x0800fce5
 800fcc8:	0800fd11 	.word	0x0800fd11
 800fccc:	0800fd5d 	.word	0x0800fd5d
 800fcd0:	0800fd89 	.word	0x0800fd89
 800fcd4:	0800fdbd 	.word	0x0800fdbd
 800fcd8:	0801a990 	.word	0x0801a990
 800fcdc:	19cf0e40 	.word	0x19cf0e40
 800fce0:	20006eb4 	.word	0x20006eb4

0800fce4 <OnTxDone>:
/* USER CODE BEGIN EF */
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800fce4:	b480      	push	{r7}
 800fce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  //Radio.Rx(RX_TIMEOUT_VALUE);
  lora_state = IDLE;
 800fce8:	4b07      	ldr	r3, [pc, #28]	; (800fd08 <OnTxDone+0x24>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	701a      	strb	r2, [r3, #0]
  if(radio_in_use == 2)
 800fcee:	4b07      	ldr	r3, [pc, #28]	; (800fd0c <OnTxDone+0x28>)
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	2b02      	cmp	r3, #2
 800fcf6:	d102      	bne.n	800fcfe <OnTxDone+0x1a>
  	  radio_in_use = 0;
 800fcf8:	4b04      	ldr	r3, [pc, #16]	; (800fd0c <OnTxDone+0x28>)
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxDone */
}
 800fcfe:	bf00      	nop
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bc80      	pop	{r7}
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	20006eb4 	.word	0x20006eb4
 800fd0c:	200008dc 	.word	0x200008dc

0800fd10 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	4608      	mov	r0, r1
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	4603      	mov	r3, r0
 800fd20:	817b      	strh	r3, [r7, #10]
 800fd22:	460b      	mov	r3, r1
 800fd24:	813b      	strh	r3, [r7, #8]
 800fd26:	4613      	mov	r3, r2
 800fd28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	if(lora_state != TX)
 800fd2a:	4b0a      	ldr	r3, [pc, #40]	; (800fd54 <OnRxDone+0x44>)
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d002      	beq.n	800fd3a <OnRxDone+0x2a>
	  {
	    //Radio.Rx(RX_TIMEOUT_VALUE);
		lora_state = IDLE;
 800fd34:	4b07      	ldr	r3, [pc, #28]	; (800fd54 <OnRxDone+0x44>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	701a      	strb	r2, [r3, #0]
	  }
	if(radio_in_use == 2)
 800fd3a:	4b07      	ldr	r3, [pc, #28]	; (800fd58 <OnRxDone+0x48>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b02      	cmp	r3, #2
 800fd42:	d102      	bne.n	800fd4a <OnRxDone+0x3a>
		radio_in_use = 0;
 800fd44:	4b04      	ldr	r3, [pc, #16]	; (800fd58 <OnRxDone+0x48>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxDone */
}
 800fd4a:	bf00      	nop
 800fd4c:	3714      	adds	r7, #20
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bc80      	pop	{r7}
 800fd52:	4770      	bx	lr
 800fd54:	20006eb4 	.word	0x20006eb4
 800fd58:	200008dc 	.word	0x200008dc

0800fd5c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  //Radio.Rx(RX_TIMEOUT_VALUE);
  lora_state = IDLE;
 800fd60:	4b07      	ldr	r3, [pc, #28]	; (800fd80 <OnTxTimeout+0x24>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	701a      	strb	r2, [r3, #0]
  if(radio_in_use == 2)
 800fd66:	4b07      	ldr	r3, [pc, #28]	; (800fd84 <OnTxTimeout+0x28>)
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	d102      	bne.n	800fd76 <OnTxTimeout+0x1a>
	  radio_in_use = 0;
 800fd70:	4b04      	ldr	r3, [pc, #16]	; (800fd84 <OnTxTimeout+0x28>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxTimeout */
}
 800fd76:	bf00      	nop
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bc80      	pop	{r7}
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	20006eb4 	.word	0x20006eb4
 800fd84:	200008dc 	.word	0x200008dc

0800fd88 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  if(lora_state != TX)
 800fd8c:	4b09      	ldr	r3, [pc, #36]	; (800fdb4 <OnRxTimeout+0x2c>)
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d002      	beq.n	800fd9c <OnRxTimeout+0x14>
  {
    //Radio.Rx(RX_TIMEOUT_VALUE);
	lora_state = IDLE;
 800fd96:	4b07      	ldr	r3, [pc, #28]	; (800fdb4 <OnRxTimeout+0x2c>)
 800fd98:	2200      	movs	r2, #0
 800fd9a:	701a      	strb	r2, [r3, #0]
  }
  if(radio_in_use == 2)
 800fd9c:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <OnRxTimeout+0x30>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	2b02      	cmp	r3, #2
 800fda4:	d102      	bne.n	800fdac <OnRxTimeout+0x24>
  	  radio_in_use = 0;
 800fda6:	4b04      	ldr	r3, [pc, #16]	; (800fdb8 <OnRxTimeout+0x30>)
 800fda8:	2200      	movs	r2, #0
 800fdaa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxTimeout */
}
 800fdac:	bf00      	nop
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bc80      	pop	{r7}
 800fdb2:	4770      	bx	lr
 800fdb4:	20006eb4 	.word	0x20006eb4
 800fdb8:	200008dc 	.word	0x200008dc

0800fdbc <OnRxError>:

static void OnRxError(void)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  if(lora_state != TX)
 800fdc0:	4b09      	ldr	r3, [pc, #36]	; (800fde8 <OnRxError+0x2c>)
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d002      	beq.n	800fdd0 <OnRxError+0x14>
  {
	//Radio.Rx(RX_TIMEOUT_VALUE);
	lora_state = IDLE;
 800fdca:	4b07      	ldr	r3, [pc, #28]	; (800fde8 <OnRxError+0x2c>)
 800fdcc:	2200      	movs	r2, #0
 800fdce:	701a      	strb	r2, [r3, #0]
  }
  if(radio_in_use == 2)
 800fdd0:	4b06      	ldr	r3, [pc, #24]	; (800fdec <OnRxError+0x30>)
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d102      	bne.n	800fde0 <OnRxError+0x24>
  	  radio_in_use = 0;
 800fdda:	4b04      	ldr	r3, [pc, #16]	; (800fdec <OnRxError+0x30>)
 800fddc:	2200      	movs	r2, #0
 800fdde:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxError */
}
 800fde0:	bf00      	nop
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bc80      	pop	{r7}
 800fde6:	4770      	bx	lr
 800fde8:	20006eb4 	.word	0x20006eb4
 800fdec:	200008dc 	.word	0x200008dc

0800fdf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fdfa:	2003      	movs	r0, #3
 800fdfc:	f000 f95e 	bl	80100bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fe00:	f003 fc0c 	bl	801361c <HAL_RCC_GetHCLKFreq>
 800fe04:	4603      	mov	r3, r0
 800fe06:	4a09      	ldr	r2, [pc, #36]	; (800fe2c <HAL_Init+0x3c>)
 800fe08:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800fe0a:	200f      	movs	r0, #15
 800fe0c:	f000 f810 	bl	800fe30 <HAL_InitTick>
 800fe10:	4603      	mov	r3, r0
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d002      	beq.n	800fe1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
 800fe18:	71fb      	strb	r3, [r7, #7]
 800fe1a:	e001      	b.n	800fe20 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800fe1c:	f7f3 f98a 	bl	8003134 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800fe20:	79fb      	ldrb	r3, [r7, #7]
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	20000428 	.word	0x20000428

0800fe30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800fe3c:	4b17      	ldr	r3, [pc, #92]	; (800fe9c <HAL_InitTick+0x6c>)
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d024      	beq.n	800fe8e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800fe44:	f003 fbea 	bl	801361c <HAL_RCC_GetHCLKFreq>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	4b14      	ldr	r3, [pc, #80]	; (800fe9c <HAL_InitTick+0x6c>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe54:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe58:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 f960 	bl	8010122 <HAL_SYSTICK_Config>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10f      	bne.n	800fe88 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2b0f      	cmp	r3, #15
 800fe6c:	d809      	bhi.n	800fe82 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fe6e:	2200      	movs	r2, #0
 800fe70:	6879      	ldr	r1, [r7, #4]
 800fe72:	f04f 30ff 	mov.w	r0, #4294967295
 800fe76:	f000 f92c 	bl	80100d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800fe7a:	4a09      	ldr	r2, [pc, #36]	; (800fea0 <HAL_InitTick+0x70>)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6013      	str	r3, [r2, #0]
 800fe80:	e007      	b.n	800fe92 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800fe82:	2301      	movs	r3, #1
 800fe84:	73fb      	strb	r3, [r7, #15]
 800fe86:	e004      	b.n	800fe92 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	73fb      	strb	r3, [r7, #15]
 800fe8c:	e001      	b.n	800fe92 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800fe8e:	2301      	movs	r3, #1
 800fe90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800fe92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	20000658 	.word	0x20000658
 800fea0:	20000654 	.word	0x20000654

0800fea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fea4:	b480      	push	{r7}
 800fea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800fea8:	4b05      	ldr	r3, [pc, #20]	; (800fec0 <HAL_IncTick+0x1c>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	461a      	mov	r2, r3
 800feae:	4b05      	ldr	r3, [pc, #20]	; (800fec4 <HAL_IncTick+0x20>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4413      	add	r3, r2
 800feb4:	4a03      	ldr	r2, [pc, #12]	; (800fec4 <HAL_IncTick+0x20>)
 800feb6:	6013      	str	r3, [r2, #0]
}
 800feb8:	bf00      	nop
 800feba:	46bd      	mov	sp, r7
 800febc:	bc80      	pop	{r7}
 800febe:	4770      	bx	lr
 800fec0:	20000658 	.word	0x20000658
 800fec4:	20006eb8 	.word	0x20006eb8

0800fec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fec8:	b480      	push	{r7}
 800feca:	af00      	add	r7, sp, #0
  return uwTick;
 800fecc:	4b02      	ldr	r3, [pc, #8]	; (800fed8 <HAL_GetTick+0x10>)
 800fece:	681b      	ldr	r3, [r3, #0]
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bc80      	pop	{r7}
 800fed6:	4770      	bx	lr
 800fed8:	20006eb8 	.word	0x20006eb8

0800fedc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fee4:	f7ff fff0 	bl	800fec8 <HAL_GetTick>
 800fee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef4:	d005      	beq.n	800ff02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800fef6:	4b0a      	ldr	r3, [pc, #40]	; (800ff20 <HAL_Delay+0x44>)
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	461a      	mov	r2, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	4413      	add	r3, r2
 800ff00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ff02:	bf00      	nop
 800ff04:	f7ff ffe0 	bl	800fec8 <HAL_GetTick>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	1ad3      	subs	r3, r2, r3
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d8f7      	bhi.n	800ff04 <HAL_Delay+0x28>
  {
  }
}
 800ff14:	bf00      	nop
 800ff16:	bf00      	nop
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20000658 	.word	0x20000658

0800ff24 <__NVIC_SetPriorityGrouping>:
{
 800ff24:	b480      	push	{r7}
 800ff26:	b085      	sub	sp, #20
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f003 0307 	and.w	r3, r3, #7
 800ff32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ff34:	4b0c      	ldr	r3, [pc, #48]	; (800ff68 <__NVIC_SetPriorityGrouping+0x44>)
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ff3a:	68ba      	ldr	r2, [r7, #8]
 800ff3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ff40:	4013      	ands	r3, r2
 800ff42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ff4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ff50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ff54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ff56:	4a04      	ldr	r2, [pc, #16]	; (800ff68 <__NVIC_SetPriorityGrouping+0x44>)
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	60d3      	str	r3, [r2, #12]
}
 800ff5c:	bf00      	nop
 800ff5e:	3714      	adds	r7, #20
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bc80      	pop	{r7}
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	e000ed00 	.word	0xe000ed00

0800ff6c <__NVIC_GetPriorityGrouping>:
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ff70:	4b04      	ldr	r3, [pc, #16]	; (800ff84 <__NVIC_GetPriorityGrouping+0x18>)
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	0a1b      	lsrs	r3, r3, #8
 800ff76:	f003 0307 	and.w	r3, r3, #7
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bc80      	pop	{r7}
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	e000ed00 	.word	0xe000ed00

0800ff88 <__NVIC_EnableIRQ>:
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ff92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	db0b      	blt.n	800ffb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ff9a:	79fb      	ldrb	r3, [r7, #7]
 800ff9c:	f003 021f 	and.w	r2, r3, #31
 800ffa0:	4906      	ldr	r1, [pc, #24]	; (800ffbc <__NVIC_EnableIRQ+0x34>)
 800ffa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffa6:	095b      	lsrs	r3, r3, #5
 800ffa8:	2001      	movs	r0, #1
 800ffaa:	fa00 f202 	lsl.w	r2, r0, r2
 800ffae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ffb2:	bf00      	nop
 800ffb4:	370c      	adds	r7, #12
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bc80      	pop	{r7}
 800ffba:	4770      	bx	lr
 800ffbc:	e000e100 	.word	0xe000e100

0800ffc0 <__NVIC_SetPriority>:
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	6039      	str	r1, [r7, #0]
 800ffca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ffcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	db0a      	blt.n	800ffea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	b2da      	uxtb	r2, r3
 800ffd8:	490c      	ldr	r1, [pc, #48]	; (801000c <__NVIC_SetPriority+0x4c>)
 800ffda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffde:	0112      	lsls	r2, r2, #4
 800ffe0:	b2d2      	uxtb	r2, r2
 800ffe2:	440b      	add	r3, r1
 800ffe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ffe8:	e00a      	b.n	8010000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	b2da      	uxtb	r2, r3
 800ffee:	4908      	ldr	r1, [pc, #32]	; (8010010 <__NVIC_SetPriority+0x50>)
 800fff0:	79fb      	ldrb	r3, [r7, #7]
 800fff2:	f003 030f 	and.w	r3, r3, #15
 800fff6:	3b04      	subs	r3, #4
 800fff8:	0112      	lsls	r2, r2, #4
 800fffa:	b2d2      	uxtb	r2, r2
 800fffc:	440b      	add	r3, r1
 800fffe:	761a      	strb	r2, [r3, #24]
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	bc80      	pop	{r7}
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	e000e100 	.word	0xe000e100
 8010010:	e000ed00 	.word	0xe000ed00

08010014 <NVIC_EncodePriority>:
{
 8010014:	b480      	push	{r7}
 8010016:	b089      	sub	sp, #36	; 0x24
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f003 0307 	and.w	r3, r3, #7
 8010026:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	f1c3 0307 	rsb	r3, r3, #7
 801002e:	2b04      	cmp	r3, #4
 8010030:	bf28      	it	cs
 8010032:	2304      	movcs	r3, #4
 8010034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	3304      	adds	r3, #4
 801003a:	2b06      	cmp	r3, #6
 801003c:	d902      	bls.n	8010044 <NVIC_EncodePriority+0x30>
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	3b03      	subs	r3, #3
 8010042:	e000      	b.n	8010046 <NVIC_EncodePriority+0x32>
 8010044:	2300      	movs	r3, #0
 8010046:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010048:	f04f 32ff 	mov.w	r2, #4294967295
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	fa02 f303 	lsl.w	r3, r2, r3
 8010052:	43da      	mvns	r2, r3
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	401a      	ands	r2, r3
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801005c:	f04f 31ff 	mov.w	r1, #4294967295
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	fa01 f303 	lsl.w	r3, r1, r3
 8010066:	43d9      	mvns	r1, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801006c:	4313      	orrs	r3, r2
}
 801006e:	4618      	mov	r0, r3
 8010070:	3724      	adds	r7, #36	; 0x24
 8010072:	46bd      	mov	sp, r7
 8010074:	bc80      	pop	{r7}
 8010076:	4770      	bx	lr

08010078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	3b01      	subs	r3, #1
 8010084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010088:	d301      	bcc.n	801008e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801008a:	2301      	movs	r3, #1
 801008c:	e00f      	b.n	80100ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801008e:	4a0a      	ldr	r2, [pc, #40]	; (80100b8 <SysTick_Config+0x40>)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3b01      	subs	r3, #1
 8010094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010096:	210f      	movs	r1, #15
 8010098:	f04f 30ff 	mov.w	r0, #4294967295
 801009c:	f7ff ff90 	bl	800ffc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80100a0:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <SysTick_Config+0x40>)
 80100a2:	2200      	movs	r2, #0
 80100a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80100a6:	4b04      	ldr	r3, [pc, #16]	; (80100b8 <SysTick_Config+0x40>)
 80100a8:	2207      	movs	r2, #7
 80100aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80100ac:	2300      	movs	r3, #0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	e000e010 	.word	0xe000e010

080100bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f7ff ff2d 	bl	800ff24 <__NVIC_SetPriorityGrouping>
}
 80100ca:	bf00      	nop
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b086      	sub	sp, #24
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	4603      	mov	r3, r0
 80100da:	60b9      	str	r1, [r7, #8]
 80100dc:	607a      	str	r2, [r7, #4]
 80100de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80100e0:	f7ff ff44 	bl	800ff6c <__NVIC_GetPriorityGrouping>
 80100e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	68b9      	ldr	r1, [r7, #8]
 80100ea:	6978      	ldr	r0, [r7, #20]
 80100ec:	f7ff ff92 	bl	8010014 <NVIC_EncodePriority>
 80100f0:	4602      	mov	r2, r0
 80100f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100f6:	4611      	mov	r1, r2
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7ff ff61 	bl	800ffc0 <__NVIC_SetPriority>
}
 80100fe:	bf00      	nop
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b082      	sub	sp, #8
 801010a:	af00      	add	r7, sp, #0
 801010c:	4603      	mov	r3, r0
 801010e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff ff37 	bl	800ff88 <__NVIC_EnableIRQ>
}
 801011a:	bf00      	nop
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7ff ffa4 	bl	8010078 <SysTick_Config>
 8010130:	4603      	mov	r3, r0
}
 8010132:	4618      	mov	r0, r3
 8010134:	3708      	adds	r7, #8
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 801013a:	b580      	push	{r7, lr}
 801013c:	b082      	sub	sp, #8
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d101      	bne.n	801014c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8010148:	2301      	movs	r3, #1
 801014a:	e014      	b.n	8010176 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	791b      	ldrb	r3, [r3, #4]
 8010150:	b2db      	uxtb	r3, r3
 8010152:	2b00      	cmp	r3, #0
 8010154:	d105      	bne.n	8010162 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2200      	movs	r2, #0
 801015a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7f2 ffef 	bl	8003140 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2202      	movs	r2, #2
 8010166:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2200      	movs	r2, #0
 801016c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <HAL_DAC_Start>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 801017e:	b480      	push	{r7}
 8010180:	b083      	sub	sp, #12
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
 8010186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	795b      	ldrb	r3, [r3, #5]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d101      	bne.n	8010194 <HAL_DAC_Start+0x16>
 8010190:	2302      	movs	r3, #2
 8010192:	e027      	b.n	80101e4 <HAL_DAC_Start+0x66>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2201      	movs	r2, #1
 8010198:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2202      	movs	r2, #2
 801019e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	6819      	ldr	r1, [r3, #0]
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	f003 0310 	and.w	r3, r3, #16
 80101ac:	2201      	movs	r2, #1
 80101ae:	409a      	lsls	r2, r3
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	430a      	orrs	r2, r1
 80101b6:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d107      	bne.n	80101d6 <HAL_DAC_Start+0x58>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f042 0201 	orr.w	r2, r2, #1
 80101d4:	605a      	str	r2, [r3, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2201      	movs	r2, #1
 80101da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bc80      	pop	{r7}
 80101ec:	4770      	bx	lr
	...

080101f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b086      	sub	sp, #24
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80101fe:	2300      	movs	r3, #0
 8010200:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	795b      	ldrb	r3, [r3, #5]
 8010206:	2b01      	cmp	r3, #1
 8010208:	d101      	bne.n	801020e <HAL_DAC_Start_DMA+0x1e>
 801020a:	2302      	movs	r3, #2
 801020c:	e05e      	b.n	80102cc <HAL_DAC_Start_DMA+0xdc>
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2201      	movs	r2, #1
 8010212:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2202      	movs	r2, #2
 8010218:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d129      	bne.n	8010274 <HAL_DAC_Start_DMA+0x84>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	4a2b      	ldr	r2, [pc, #172]	; (80102d4 <HAL_DAC_Start_DMA+0xe4>)
 8010226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	4a2a      	ldr	r2, [pc, #168]	; (80102d8 <HAL_DAC_Start_DMA+0xe8>)
 801022e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	689b      	ldr	r3, [r3, #8]
 8010234:	4a29      	ldr	r2, [pc, #164]	; (80102dc <HAL_DAC_Start_DMA+0xec>)
 8010236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010246:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8010248:	6a3b      	ldr	r3, [r7, #32]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <HAL_DAC_Start_DMA+0x66>
 801024e:	6a3b      	ldr	r3, [r7, #32]
 8010250:	2b04      	cmp	r3, #4
 8010252:	d005      	beq.n	8010260 <HAL_DAC_Start_DMA+0x70>
 8010254:	e009      	b.n	801026a <HAL_DAC_Start_DMA+0x7a>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	3308      	adds	r3, #8
 801025c:	617b      	str	r3, [r7, #20]
        break;
 801025e:	e00a      	b.n	8010276 <HAL_DAC_Start_DMA+0x86>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	330c      	adds	r3, #12
 8010266:	617b      	str	r3, [r7, #20]
        break;
 8010268:	e005      	b.n	8010276 <HAL_DAC_Start_DMA+0x86>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3310      	adds	r3, #16
 8010270:	617b      	str	r3, [r7, #20]
        break;
 8010272:	e000      	b.n	8010276 <HAL_DAC_Start_DMA+0x86>
    }
  }
 8010274:	bf00      	nop

  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010284:	601a      	str	r2, [r3, #0]

  /* Enable the DMA channel */
  status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6898      	ldr	r0, [r3, #8]
 801028a:	6879      	ldr	r1, [r7, #4]
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	697a      	ldr	r2, [r7, #20]
 8010290:	f000 faf4 	bl	801087c <HAL_DMA_Start_IT>
 8010294:	4603      	mov	r3, r0
 8010296:	74fb      	strb	r3, [r7, #19]

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2200      	movs	r2, #0
 801029c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 801029e:	7cfb      	ldrb	r3, [r7, #19]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10c      	bne.n	80102be <HAL_DAC_Start_DMA+0xce>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6819      	ldr	r1, [r3, #0]
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	f003 0310 	and.w	r3, r3, #16
 80102b0:	2201      	movs	r2, #1
 80102b2:	409a      	lsls	r2, r3
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	430a      	orrs	r2, r1
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	e005      	b.n	80102ca <HAL_DAC_Start_DMA+0xda>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	691b      	ldr	r3, [r3, #16]
 80102c2:	f043 0204 	orr.w	r2, r3, #4
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80102ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	08010593 	.word	0x08010593
 80102d8:	080105b5 	.word	0x080105b5
 80102dc:	080105d1 	.word	0x080105d1

080102e0 <HAL_DAC_Stop_DMA>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	6819      	ldr	r1, [r3, #0]
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	f003 0310 	and.w	r3, r3, #16
 80102f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102fa:	fa02 f303 	lsl.w	r3, r2, r3
 80102fe:	43da      	mvns	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	400a      	ands	r2, r1
 8010306:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	6819      	ldr	r1, [r3, #0]
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	f003 0310 	and.w	r3, r3, #16
 8010314:	2201      	movs	r2, #1
 8010316:	fa02 f303 	lsl.w	r3, r2, r3
 801031a:	43da      	mvns	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	400a      	ands	r2, r1
 8010322:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Disable the DMA channel */
  (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	4618      	mov	r0, r3
 801032a:	f000 fb25 	bl	8010978 <HAL_DMA_Abort>

  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801033c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2201      	movs	r2, #1
 8010342:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 801034e:	b480      	push	{r7}
 8010350:	b087      	sub	sp, #28
 8010352:	af00      	add	r7, sp, #0
 8010354:	60f8      	str	r0, [r7, #12]
 8010356:	60b9      	str	r1, [r7, #8]
 8010358:	607a      	str	r2, [r7, #4]
 801035a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 801035c:	2300      	movs	r3, #0
 801035e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d104      	bne.n	8010376 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 801036c:	697a      	ldr	r2, [r7, #20]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4413      	add	r3, r2
 8010372:	3308      	adds	r3, #8
 8010374:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	461a      	mov	r2, r3
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 801037e:	2300      	movs	r3, #0
}
 8010380:	4618      	mov	r0, r3
 8010382:	371c      	adds	r7, #28
 8010384:	46bd      	mov	sp, r7
 8010386:	bc80      	pop	{r7}
 8010388:	4770      	bx	lr

0801038a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 801038a:	b480      	push	{r7}
 801038c:	b083      	sub	sp, #12
 801038e:	af00      	add	r7, sp, #0
 8010390:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8010392:	bf00      	nop
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	bc80      	pop	{r7}
 801039a:	4770      	bx	lr

0801039c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b088      	sub	sp, #32
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80103a8:	2300      	movs	r3, #0
 80103aa:	77fb      	strb	r3, [r7, #31]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	795b      	ldrb	r3, [r3, #5]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d101      	bne.n	80103b8 <HAL_DAC_ConfigChannel+0x1c>
 80103b4:	2302      	movs	r3, #2
 80103b6:	e0e8      	b.n	801058a <HAL_DAC_ConfigChannel+0x1ee>
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2201      	movs	r2, #1
 80103bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2202      	movs	r2, #2
 80103c2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d155      	bne.n	8010478 <HAL_DAC_ConfigChannel+0xdc>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80103cc:	f7ff fd7c 	bl	800fec8 <HAL_GetTick>
 80103d0:	61b8      	str	r0, [r7, #24]

    /* SHSR1 can be written when BWST1 is cleared */
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80103d2:	e018      	b.n	8010406 <HAL_DAC_ConfigChannel+0x6a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80103d4:	f7ff fd78 	bl	800fec8 <HAL_GetTick>
 80103d8:	4602      	mov	r2, r0
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d911      	bls.n	8010406 <HAL_DAC_ConfigChannel+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00a      	beq.n	8010406 <HAL_DAC_ConfigChannel+0x6a>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	691b      	ldr	r3, [r3, #16]
 80103f4:	f043 0208 	orr.w	r2, r3, #8
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2203      	movs	r2, #3
 8010400:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8010402:	2303      	movs	r3, #3
 8010404:	e0c1      	b.n	801058a <HAL_DAC_ConfigChannel+0x1ee>
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801040c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1df      	bne.n	80103d4 <HAL_DAC_ConfigChannel+0x38>
        }
      }
    }
    hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	68ba      	ldr	r2, [r7, #8]
 801041a:	6992      	ldr	r2, [r2, #24]
 801041c:	641a      	str	r2, [r3, #64]	; 0x40

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f003 0310 	and.w	r3, r3, #16
 801042a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 801042e:	fa01 f303 	lsl.w	r3, r1, r3
 8010432:	43db      	mvns	r3, r3
 8010434:	ea02 0103 	and.w	r1, r2, r3
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	69da      	ldr	r2, [r3, #28]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f003 0310 	and.w	r3, r3, #16
 8010442:	409a      	lsls	r2, r3
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	430a      	orrs	r2, r1
 801044a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f003 0310 	and.w	r3, r3, #16
 8010458:	21ff      	movs	r1, #255	; 0xff
 801045a:	fa01 f303 	lsl.w	r3, r1, r3
 801045e:	43db      	mvns	r3, r3
 8010460:	ea02 0103 	and.w	r1, r2, r3
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	6a1a      	ldr	r2, [r3, #32]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f003 0310 	and.w	r3, r3, #16
 801046e:	409a      	lsls	r2, r3
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	430a      	orrs	r2, r1
 8010476:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	691b      	ldr	r3, [r3, #16]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d11d      	bne.n	80104bc <HAL_DAC_ConfigChannel+0x120>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010486:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f003 0310 	and.w	r3, r3, #16
 801048e:	221f      	movs	r2, #31
 8010490:	fa02 f303 	lsl.w	r3, r2, r3
 8010494:	43db      	mvns	r3, r3
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	4013      	ands	r3, r2
 801049a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	695b      	ldr	r3, [r3, #20]
 80104a0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f003 0310 	and.w	r3, r3, #16
 80104a8:	693a      	ldr	r2, [r7, #16]
 80104aa:	fa02 f303 	lsl.w	r3, r2, r3
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	4313      	orrs	r3, r2
 80104b2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	697a      	ldr	r2, [r7, #20]
 80104ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f003 0310 	and.w	r3, r3, #16
 80104ca:	2207      	movs	r2, #7
 80104cc:	fa02 f303 	lsl.w	r3, r2, r3
 80104d0:	43db      	mvns	r3, r3
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	4013      	ands	r3, r2
 80104d6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	689b      	ldr	r3, [r3, #8]
 80104e0:	431a      	orrs	r2, r3
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	4313      	orrs	r3, r2
 80104e8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f003 0310 	and.w	r3, r3, #16
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	fa02 f303 	lsl.w	r3, r2, r3
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	4313      	orrs	r3, r2
 80104fa:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	697a      	ldr	r2, [r7, #20]
 8010502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	6819      	ldr	r1, [r3, #0]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f003 0310 	and.w	r3, r3, #16
 8010510:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010514:	fa02 f303 	lsl.w	r3, r2, r3
 8010518:	43da      	mvns	r2, r3
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	400a      	ands	r2, r1
 8010520:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f003 0310 	and.w	r3, r3, #16
 8010530:	f640 72fe 	movw	r2, #4094	; 0xffe
 8010534:	fa02 f303 	lsl.w	r3, r2, r3
 8010538:	43db      	mvns	r3, r3
 801053a:	697a      	ldr	r2, [r7, #20]
 801053c:	4013      	ands	r3, r2
 801053e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f003 0310 	and.w	r3, r3, #16
 801054c:	693a      	ldr	r2, [r7, #16]
 801054e:	fa02 f303 	lsl.w	r3, r2, r3
 8010552:	697a      	ldr	r2, [r7, #20]
 8010554:	4313      	orrs	r3, r2
 8010556:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	697a      	ldr	r2, [r7, #20]
 801055e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	6819      	ldr	r1, [r3, #0]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f003 0310 	and.w	r3, r3, #16
 801056c:	22c0      	movs	r2, #192	; 0xc0
 801056e:	fa02 f303 	lsl.w	r3, r2, r3
 8010572:	43da      	mvns	r2, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	400a      	ands	r2, r1
 801057a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2201      	movs	r2, #1
 8010580:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2200      	movs	r2, #0
 8010586:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8010588:	7ffb      	ldrb	r3, [r7, #31]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3720      	adds	r7, #32
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b084      	sub	sp, #16
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801059e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f7f9 facf 	bl	8009b44 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2201      	movs	r2, #1
 80105aa:	711a      	strb	r2, [r3, #4]
}
 80105ac:	bf00      	nop
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105c0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7f9 fa80 	bl	8009ac8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80105c8:	bf00      	nop
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105dc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	691b      	ldr	r3, [r3, #16]
 80105e2:	f043 0204 	orr.w	r2, r3, #4
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7ff fecd 	bl	801038a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2201      	movs	r2, #1
 80105f4:	711a      	strb	r2, [r3, #4]
}
 80105f6:	bf00      	nop
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
	...

08010600 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d101      	bne.n	8010612 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801060e:	2301      	movs	r3, #1
 8010610:	e08e      	b.n	8010730 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	4b47      	ldr	r3, [pc, #284]	; (8010738 <HAL_DMA_Init+0x138>)
 801061a:	429a      	cmp	r2, r3
 801061c:	d80f      	bhi.n	801063e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	4b45      	ldr	r3, [pc, #276]	; (801073c <HAL_DMA_Init+0x13c>)
 8010626:	4413      	add	r3, r2
 8010628:	4a45      	ldr	r2, [pc, #276]	; (8010740 <HAL_DMA_Init+0x140>)
 801062a:	fba2 2303 	umull	r2, r3, r2, r3
 801062e:	091b      	lsrs	r3, r3, #4
 8010630:	009a      	lsls	r2, r3, #2
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4a42      	ldr	r2, [pc, #264]	; (8010744 <HAL_DMA_Init+0x144>)
 801063a:	641a      	str	r2, [r3, #64]	; 0x40
 801063c:	e00e      	b.n	801065c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	461a      	mov	r2, r3
 8010644:	4b40      	ldr	r3, [pc, #256]	; (8010748 <HAL_DMA_Init+0x148>)
 8010646:	4413      	add	r3, r2
 8010648:	4a3d      	ldr	r2, [pc, #244]	; (8010740 <HAL_DMA_Init+0x140>)
 801064a:	fba2 2303 	umull	r2, r3, r2, r3
 801064e:	091b      	lsrs	r3, r3, #4
 8010650:	009a      	lsls	r2, r3, #2
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4a3c      	ldr	r2, [pc, #240]	; (801074c <HAL_DMA_Init+0x14c>)
 801065a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2202      	movs	r2, #2
 8010660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	6812      	ldr	r2, [r2, #0]
 801066e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8010672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010676:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	6819      	ldr	r1, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	689a      	ldr	r2, [r3, #8]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	431a      	orrs	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	691b      	ldr	r3, [r3, #16]
 801068c:	431a      	orrs	r2, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	695b      	ldr	r3, [r3, #20]
 8010692:	431a      	orrs	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	699b      	ldr	r3, [r3, #24]
 8010698:	431a      	orrs	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	69db      	ldr	r3, [r3, #28]
 801069e:	431a      	orrs	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6a1b      	ldr	r3, [r3, #32]
 80106a4:	431a      	orrs	r2, r3
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	430a      	orrs	r2, r1
 80106ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 fac4 	bl	8010c3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80106bc:	d102      	bne.n	80106c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685a      	ldr	r2, [r3, #4]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80106d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80106da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d010      	beq.n	8010706 <HAL_DMA_Init+0x106>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	2b04      	cmp	r3, #4
 80106ea:	d80c      	bhi.n	8010706 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 faed 	bl	8010ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010702:	605a      	str	r2, [r3, #4]
 8010704:	e008      	b.n	8010718 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2201      	movs	r2, #1
 8010722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	40020407 	.word	0x40020407
 801073c:	bffdfff8 	.word	0xbffdfff8
 8010740:	cccccccd 	.word	0xcccccccd
 8010744:	40020000 	.word	0x40020000
 8010748:	bffdfbf8 	.word	0xbffdfbf8
 801074c:	40020400 	.word	0x40020400

08010750 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801075e:	2301      	movs	r3, #1
 8010760:	e07b      	b.n	801085a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f022 0201 	bic.w	r2, r2, #1
 8010770:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	461a      	mov	r2, r3
 8010778:	4b3a      	ldr	r3, [pc, #232]	; (8010864 <HAL_DMA_DeInit+0x114>)
 801077a:	429a      	cmp	r2, r3
 801077c:	d80f      	bhi.n	801079e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	4b38      	ldr	r3, [pc, #224]	; (8010868 <HAL_DMA_DeInit+0x118>)
 8010786:	4413      	add	r3, r2
 8010788:	4a38      	ldr	r2, [pc, #224]	; (801086c <HAL_DMA_DeInit+0x11c>)
 801078a:	fba2 2303 	umull	r2, r3, r2, r3
 801078e:	091b      	lsrs	r3, r3, #4
 8010790:	009a      	lsls	r2, r3, #2
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4a35      	ldr	r2, [pc, #212]	; (8010870 <HAL_DMA_DeInit+0x120>)
 801079a:	641a      	str	r2, [r3, #64]	; 0x40
 801079c:	e00e      	b.n	80107bc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	461a      	mov	r2, r3
 80107a4:	4b33      	ldr	r3, [pc, #204]	; (8010874 <HAL_DMA_DeInit+0x124>)
 80107a6:	4413      	add	r3, r2
 80107a8:	4a30      	ldr	r2, [pc, #192]	; (801086c <HAL_DMA_DeInit+0x11c>)
 80107aa:	fba2 2303 	umull	r2, r3, r2, r3
 80107ae:	091b      	lsrs	r3, r3, #4
 80107b0:	009a      	lsls	r2, r3, #2
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a2f      	ldr	r2, [pc, #188]	; (8010878 <HAL_DMA_DeInit+0x128>)
 80107ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2200      	movs	r2, #0
 80107c2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c8:	f003 021c 	and.w	r2, r3, #28
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d0:	2101      	movs	r1, #1
 80107d2:	fa01 f202 	lsl.w	r2, r1, r2
 80107d6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 fa2f 	bl	8010c3c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107e2:	2200      	movs	r2, #0
 80107e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80107ee:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00f      	beq.n	8010818 <HAL_DMA_DeInit+0xc8>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	2b04      	cmp	r3, #4
 80107fe:	d80b      	bhi.n	8010818 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fa63 	bl	8010ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801080a:	2200      	movs	r2, #0
 801080c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010816:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2200      	movs	r2, #0
 801082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2200      	movs	r2, #0
 8010840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2200      	movs	r2, #0
 8010846:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3708      	adds	r7, #8
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	40020407 	.word	0x40020407
 8010868:	bffdfff8 	.word	0xbffdfff8
 801086c:	cccccccd 	.word	0xcccccccd
 8010870:	40020000 	.word	0x40020000
 8010874:	bffdfbf8 	.word	0xbffdfbf8
 8010878:	40020400 	.word	0x40020400

0801087c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b086      	sub	sp, #24
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
 8010888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801088a:	2300      	movs	r3, #0
 801088c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010894:	2b01      	cmp	r3, #1
 8010896:	d101      	bne.n	801089c <HAL_DMA_Start_IT+0x20>
 8010898:	2302      	movs	r3, #2
 801089a:	e069      	b.n	8010970 <HAL_DMA_Start_IT+0xf4>
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2201      	movs	r2, #1
 80108a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d155      	bne.n	801095c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2202      	movs	r2, #2
 80108b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f022 0201 	bic.w	r2, r2, #1
 80108cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f000 f973 	bl	8010bc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d008      	beq.n	80108f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f042 020e 	orr.w	r2, r2, #14
 80108f0:	601a      	str	r2, [r3, #0]
 80108f2:	e00f      	b.n	8010914 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f022 0204 	bic.w	r2, r2, #4
 8010902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f042 020a 	orr.w	r2, r2, #10
 8010912:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801091e:	2b00      	cmp	r3, #0
 8010920:	d007      	beq.n	8010932 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801092c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010930:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010936:	2b00      	cmp	r3, #0
 8010938:	d007      	beq.n	801094a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801093e:	681a      	ldr	r2, [r3, #0]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010948:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f042 0201 	orr.w	r2, r2, #1
 8010958:	601a      	str	r2, [r3, #0]
 801095a:	e008      	b.n	801096e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2280      	movs	r2, #128	; 0x80
 8010960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2200      	movs	r2, #0
 8010966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 801096a:	2301      	movs	r3, #1
 801096c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 801096e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3718      	adds	r7, #24
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d101      	bne.n	801098a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8010986:	2301      	movs	r3, #1
 8010988:	e04f      	b.n	8010a2a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010990:	b2db      	uxtb	r3, r3
 8010992:	2b02      	cmp	r3, #2
 8010994:	d008      	beq.n	80109a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2204      	movs	r2, #4
 801099a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80109a4:	2301      	movs	r3, #1
 80109a6:	e040      	b.n	8010a2a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f022 020e 	bic.w	r2, r2, #14
 80109b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80109c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f022 0201 	bic.w	r2, r2, #1
 80109d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109dc:	f003 021c 	and.w	r2, r3, #28
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e4:	2101      	movs	r1, #1
 80109e6:	fa01 f202 	lsl.w	r2, r1, r2
 80109ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80109f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00c      	beq.n	8010a18 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010a0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010a16:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8010a28:	2300      	movs	r3, #0
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	370c      	adds	r7, #12
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bc80      	pop	{r7}
 8010a32:	4770      	bx	lr

08010a34 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a50:	f003 031c 	and.w	r3, r3, #28
 8010a54:	2204      	movs	r2, #4
 8010a56:	409a      	lsls	r2, r3
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	4013      	ands	r3, r2
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d027      	beq.n	8010ab0 <HAL_DMA_IRQHandler+0x7c>
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	f003 0304 	and.w	r3, r3, #4
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d022      	beq.n	8010ab0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f003 0320 	and.w	r3, r3, #32
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d107      	bne.n	8010a88 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f022 0204 	bic.w	r2, r2, #4
 8010a86:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a8c:	f003 021c 	and.w	r2, r3, #28
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a94:	2104      	movs	r1, #4
 8010a96:	fa01 f202 	lsl.w	r2, r1, r2
 8010a9a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f000 8081 	beq.w	8010ba8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8010aae:	e07b      	b.n	8010ba8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ab4:	f003 031c 	and.w	r3, r3, #28
 8010ab8:	2202      	movs	r2, #2
 8010aba:	409a      	lsls	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	4013      	ands	r3, r2
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d03d      	beq.n	8010b40 <HAL_DMA_IRQHandler+0x10c>
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	f003 0302 	and.w	r3, r3, #2
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d038      	beq.n	8010b40 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f003 0320 	and.w	r3, r3, #32
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10b      	bne.n	8010af4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f022 020a 	bic.w	r2, r2, #10
 8010aea:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	461a      	mov	r2, r3
 8010afa:	4b2e      	ldr	r3, [pc, #184]	; (8010bb4 <HAL_DMA_IRQHandler+0x180>)
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d909      	bls.n	8010b14 <HAL_DMA_IRQHandler+0xe0>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b04:	f003 031c 	and.w	r3, r3, #28
 8010b08:	4a2b      	ldr	r2, [pc, #172]	; (8010bb8 <HAL_DMA_IRQHandler+0x184>)
 8010b0a:	2102      	movs	r1, #2
 8010b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8010b10:	6053      	str	r3, [r2, #4]
 8010b12:	e008      	b.n	8010b26 <HAL_DMA_IRQHandler+0xf2>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b18:	f003 031c 	and.w	r3, r3, #28
 8010b1c:	4a27      	ldr	r2, [pc, #156]	; (8010bbc <HAL_DMA_IRQHandler+0x188>)
 8010b1e:	2102      	movs	r1, #2
 8010b20:	fa01 f303 	lsl.w	r3, r1, r3
 8010b24:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d038      	beq.n	8010ba8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8010b3e:	e033      	b.n	8010ba8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b44:	f003 031c 	and.w	r3, r3, #28
 8010b48:	2208      	movs	r2, #8
 8010b4a:	409a      	lsls	r2, r3
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	4013      	ands	r3, r2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d02a      	beq.n	8010baa <HAL_DMA_IRQHandler+0x176>
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	f003 0308 	and.w	r3, r3, #8
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d025      	beq.n	8010baa <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f022 020e 	bic.w	r2, r2, #14
 8010b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b72:	f003 021c 	and.w	r2, r3, #28
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b7a:	2101      	movs	r1, #1
 8010b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8010b80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2201      	movs	r2, #1
 8010b86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d004      	beq.n	8010baa <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8010ba8:	bf00      	nop
 8010baa:	bf00      	nop
}
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	40020080 	.word	0x40020080
 8010bb8:	40020400 	.word	0x40020400
 8010bbc:	40020000 	.word	0x40020000

08010bc0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	607a      	str	r2, [r7, #4]
 8010bcc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010bd6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010be8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bee:	f003 021c 	and.w	r2, r3, #28
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	2101      	movs	r1, #1
 8010bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8010bfc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	683a      	ldr	r2, [r7, #0]
 8010c04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	689b      	ldr	r3, [r3, #8]
 8010c0a:	2b10      	cmp	r3, #16
 8010c0c:	d108      	bne.n	8010c20 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	68ba      	ldr	r2, [r7, #8]
 8010c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8010c1e:	e007      	b.n	8010c30 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	60da      	str	r2, [r3, #12]
}
 8010c30:	bf00      	nop
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bc80      	pop	{r7}
 8010c38:	4770      	bx	lr
	...

08010c3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	461a      	mov	r2, r3
 8010c4a:	4b1c      	ldr	r3, [pc, #112]	; (8010cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d813      	bhi.n	8010c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c54:	089b      	lsrs	r3, r3, #2
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010c5c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	3b08      	subs	r3, #8
 8010c6c:	4a14      	ldr	r2, [pc, #80]	; (8010cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8010c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c72:	091b      	lsrs	r3, r3, #4
 8010c74:	60fb      	str	r3, [r7, #12]
 8010c76:	e011      	b.n	8010c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c7c:	089b      	lsrs	r3, r3, #2
 8010c7e:	009a      	lsls	r2, r3, #2
 8010c80:	4b10      	ldr	r3, [pc, #64]	; (8010cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8010c82:	4413      	add	r3, r2
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	3b08      	subs	r3, #8
 8010c90:	4a0b      	ldr	r2, [pc, #44]	; (8010cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8010c92:	fba2 2303 	umull	r2, r3, r2, r3
 8010c96:	091b      	lsrs	r3, r3, #4
 8010c98:	3307      	adds	r3, #7
 8010c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4a0a      	ldr	r2, [pc, #40]	; (8010cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8010ca0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f003 031f 	and.w	r3, r3, #31
 8010ca8:	2201      	movs	r2, #1
 8010caa:	409a      	lsls	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8010cb0:	bf00      	nop
 8010cb2:	3714      	adds	r7, #20
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bc80      	pop	{r7}
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	40020407 	.word	0x40020407
 8010cc0:	cccccccd 	.word	0xcccccccd
 8010cc4:	4002081c 	.word	0x4002081c
 8010cc8:	40020880 	.word	0x40020880

08010ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cdc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	4b0a      	ldr	r3, [pc, #40]	; (8010d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8010ce2:	4413      	add	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4a08      	ldr	r2, [pc, #32]	; (8010d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8010cf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	3b01      	subs	r3, #1
 8010cf6:	f003 0303 	and.w	r3, r3, #3
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	409a      	lsls	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8010d02:	bf00      	nop
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bc80      	pop	{r7}
 8010d0a:	4770      	bx	lr
 8010d0c:	1000823f 	.word	0x1000823f
 8010d10:	40020940 	.word	0x40020940

08010d14 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b087      	sub	sp, #28
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010d22:	e140      	b.n	8010fa6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	2101      	movs	r1, #1
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010d30:	4013      	ands	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f000 8132 	beq.w	8010fa0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	f003 0303 	and.w	r3, r3, #3
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	d005      	beq.n	8010d54 <HAL_GPIO_Init+0x40>
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	f003 0303 	and.w	r3, r3, #3
 8010d50:	2b02      	cmp	r3, #2
 8010d52:	d130      	bne.n	8010db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	689b      	ldr	r3, [r3, #8]
 8010d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	2203      	movs	r2, #3
 8010d60:	fa02 f303 	lsl.w	r3, r2, r3
 8010d64:	43db      	mvns	r3, r3
 8010d66:	693a      	ldr	r2, [r7, #16]
 8010d68:	4013      	ands	r3, r2
 8010d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	68da      	ldr	r2, [r3, #12]
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	005b      	lsls	r3, r3, #1
 8010d74:	fa02 f303 	lsl.w	r3, r2, r3
 8010d78:	693a      	ldr	r2, [r7, #16]
 8010d7a:	4313      	orrs	r3, r2
 8010d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	693a      	ldr	r2, [r7, #16]
 8010d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d92:	43db      	mvns	r3, r3
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	4013      	ands	r3, r2
 8010d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	091b      	lsrs	r3, r3, #4
 8010da0:	f003 0201 	and.w	r2, r3, #1
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	fa02 f303 	lsl.w	r3, r2, r3
 8010daa:	693a      	ldr	r2, [r7, #16]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	693a      	ldr	r2, [r7, #16]
 8010db4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	f003 0303 	and.w	r3, r3, #3
 8010dbe:	2b03      	cmp	r3, #3
 8010dc0:	d017      	beq.n	8010df2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	2203      	movs	r2, #3
 8010dce:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd2:	43db      	mvns	r3, r3
 8010dd4:	693a      	ldr	r2, [r7, #16]
 8010dd6:	4013      	ands	r3, r2
 8010dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	689a      	ldr	r2, [r3, #8]
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	fa02 f303 	lsl.w	r3, r2, r3
 8010de6:	693a      	ldr	r2, [r7, #16]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	693a      	ldr	r2, [r7, #16]
 8010df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	f003 0303 	and.w	r3, r3, #3
 8010dfa:	2b02      	cmp	r3, #2
 8010dfc:	d123      	bne.n	8010e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	08da      	lsrs	r2, r3, #3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	3208      	adds	r2, #8
 8010e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	f003 0307 	and.w	r3, r3, #7
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	220f      	movs	r2, #15
 8010e16:	fa02 f303 	lsl.w	r3, r2, r3
 8010e1a:	43db      	mvns	r3, r3
 8010e1c:	693a      	ldr	r2, [r7, #16]
 8010e1e:	4013      	ands	r3, r2
 8010e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	691a      	ldr	r2, [r3, #16]
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f003 0307 	and.w	r3, r3, #7
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e32:	693a      	ldr	r2, [r7, #16]
 8010e34:	4313      	orrs	r3, r2
 8010e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	08da      	lsrs	r2, r3, #3
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	3208      	adds	r2, #8
 8010e40:	6939      	ldr	r1, [r7, #16]
 8010e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	005b      	lsls	r3, r3, #1
 8010e50:	2203      	movs	r2, #3
 8010e52:	fa02 f303 	lsl.w	r3, r2, r3
 8010e56:	43db      	mvns	r3, r3
 8010e58:	693a      	ldr	r2, [r7, #16]
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	f003 0203 	and.w	r2, r3, #3
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	005b      	lsls	r3, r3, #1
 8010e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6e:	693a      	ldr	r2, [r7, #16]
 8010e70:	4313      	orrs	r3, r2
 8010e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	693a      	ldr	r2, [r7, #16]
 8010e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f000 808c 	beq.w	8010fa0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8010e88:	4a4e      	ldr	r2, [pc, #312]	; (8010fc4 <HAL_GPIO_Init+0x2b0>)
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	089b      	lsrs	r3, r3, #2
 8010e8e:	3302      	adds	r3, #2
 8010e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f003 0303 	and.w	r3, r3, #3
 8010e9c:	009b      	lsls	r3, r3, #2
 8010e9e:	2207      	movs	r2, #7
 8010ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea4:	43db      	mvns	r3, r3
 8010ea6:	693a      	ldr	r2, [r7, #16]
 8010ea8:	4013      	ands	r3, r2
 8010eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8010eb2:	d00d      	beq.n	8010ed0 <HAL_GPIO_Init+0x1bc>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4a44      	ldr	r2, [pc, #272]	; (8010fc8 <HAL_GPIO_Init+0x2b4>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d007      	beq.n	8010ecc <HAL_GPIO_Init+0x1b8>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	4a43      	ldr	r2, [pc, #268]	; (8010fcc <HAL_GPIO_Init+0x2b8>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d101      	bne.n	8010ec8 <HAL_GPIO_Init+0x1b4>
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	e004      	b.n	8010ed2 <HAL_GPIO_Init+0x1be>
 8010ec8:	2307      	movs	r3, #7
 8010eca:	e002      	b.n	8010ed2 <HAL_GPIO_Init+0x1be>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	e000      	b.n	8010ed2 <HAL_GPIO_Init+0x1be>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	697a      	ldr	r2, [r7, #20]
 8010ed4:	f002 0203 	and.w	r2, r2, #3
 8010ed8:	0092      	lsls	r2, r2, #2
 8010eda:	4093      	lsls	r3, r2
 8010edc:	693a      	ldr	r2, [r7, #16]
 8010ede:	4313      	orrs	r3, r2
 8010ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8010ee2:	4938      	ldr	r1, [pc, #224]	; (8010fc4 <HAL_GPIO_Init+0x2b0>)
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	089b      	lsrs	r3, r3, #2
 8010ee8:	3302      	adds	r3, #2
 8010eea:	693a      	ldr	r2, [r7, #16]
 8010eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010ef0:	4b37      	ldr	r3, [pc, #220]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	43db      	mvns	r3, r3
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	4013      	ands	r3, r2
 8010efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d003      	beq.n	8010f14 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8010f0c:	693a      	ldr	r2, [r7, #16]
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	4313      	orrs	r3, r2
 8010f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8010f14:	4a2e      	ldr	r2, [pc, #184]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8010f1a:	4b2d      	ldr	r3, [pc, #180]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	43db      	mvns	r3, r3
 8010f24:	693a      	ldr	r2, [r7, #16]
 8010f26:	4013      	ands	r3, r2
 8010f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d003      	beq.n	8010f3e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8010f36:	693a      	ldr	r2, [r7, #16]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010f3e:	4a24      	ldr	r2, [pc, #144]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8010f44:	4b22      	ldr	r3, [pc, #136]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f4a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	43db      	mvns	r3, r3
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	4013      	ands	r3, r2
 8010f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d003      	beq.n	8010f6a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8010f62:	693a      	ldr	r2, [r7, #16]
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	4313      	orrs	r3, r2
 8010f68:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8010f6a:	4a19      	ldr	r2, [pc, #100]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8010f72:	4b17      	ldr	r3, [pc, #92]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f78:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	43db      	mvns	r3, r3
 8010f7e:	693a      	ldr	r2, [r7, #16]
 8010f80:	4013      	ands	r3, r2
 8010f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d003      	beq.n	8010f98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8010f90:	693a      	ldr	r2, [r7, #16]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8010f98:	4a0d      	ldr	r2, [pc, #52]	; (8010fd0 <HAL_GPIO_Init+0x2bc>)
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	fa22 f303 	lsr.w	r3, r2, r3
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f47f aeb7 	bne.w	8010d24 <HAL_GPIO_Init+0x10>
  }
}
 8010fb6:	bf00      	nop
 8010fb8:	bf00      	nop
 8010fba:	371c      	adds	r7, #28
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bc80      	pop	{r7}
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	40010000 	.word	0x40010000
 8010fc8:	48000400 	.word	0x48000400
 8010fcc:	48000800 	.word	0x48000800
 8010fd0:	58000800 	.word	0x58000800

08010fd4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b087      	sub	sp, #28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8010fe2:	e0af      	b.n	8011144 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	4013      	ands	r3, r2
 8010ff0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	f000 80a2 	beq.w	801113e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8010ffa:	4a59      	ldr	r2, [pc, #356]	; (8011160 <HAL_GPIO_DeInit+0x18c>)
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	089b      	lsrs	r3, r3, #2
 8011000:	3302      	adds	r3, #2
 8011002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011006:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	f003 0303 	and.w	r3, r3, #3
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	2207      	movs	r2, #7
 8011012:	fa02 f303 	lsl.w	r3, r2, r3
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	4013      	ands	r3, r2
 801101a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8011022:	d00d      	beq.n	8011040 <HAL_GPIO_DeInit+0x6c>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a4f      	ldr	r2, [pc, #316]	; (8011164 <HAL_GPIO_DeInit+0x190>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d007      	beq.n	801103c <HAL_GPIO_DeInit+0x68>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4a4e      	ldr	r2, [pc, #312]	; (8011168 <HAL_GPIO_DeInit+0x194>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d101      	bne.n	8011038 <HAL_GPIO_DeInit+0x64>
 8011034:	2302      	movs	r3, #2
 8011036:	e004      	b.n	8011042 <HAL_GPIO_DeInit+0x6e>
 8011038:	2307      	movs	r3, #7
 801103a:	e002      	b.n	8011042 <HAL_GPIO_DeInit+0x6e>
 801103c:	2301      	movs	r3, #1
 801103e:	e000      	b.n	8011042 <HAL_GPIO_DeInit+0x6e>
 8011040:	2300      	movs	r3, #0
 8011042:	697a      	ldr	r2, [r7, #20]
 8011044:	f002 0203 	and.w	r2, r2, #3
 8011048:	0092      	lsls	r2, r2, #2
 801104a:	4093      	lsls	r3, r2
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	429a      	cmp	r2, r3
 8011050:	d136      	bne.n	80110c0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8011052:	4b46      	ldr	r3, [pc, #280]	; (801116c <HAL_GPIO_DeInit+0x198>)
 8011054:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	43db      	mvns	r3, r3
 801105c:	4943      	ldr	r1, [pc, #268]	; (801116c <HAL_GPIO_DeInit+0x198>)
 801105e:	4013      	ands	r3, r2
 8011060:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8011064:	4b41      	ldr	r3, [pc, #260]	; (801116c <HAL_GPIO_DeInit+0x198>)
 8011066:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	43db      	mvns	r3, r3
 801106e:	493f      	ldr	r1, [pc, #252]	; (801116c <HAL_GPIO_DeInit+0x198>)
 8011070:	4013      	ands	r3, r2
 8011072:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8011076:	4b3d      	ldr	r3, [pc, #244]	; (801116c <HAL_GPIO_DeInit+0x198>)
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	43db      	mvns	r3, r3
 801107e:	493b      	ldr	r1, [pc, #236]	; (801116c <HAL_GPIO_DeInit+0x198>)
 8011080:	4013      	ands	r3, r2
 8011082:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8011084:	4b39      	ldr	r3, [pc, #228]	; (801116c <HAL_GPIO_DeInit+0x198>)
 8011086:	685a      	ldr	r2, [r3, #4]
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	43db      	mvns	r3, r3
 801108c:	4937      	ldr	r1, [pc, #220]	; (801116c <HAL_GPIO_DeInit+0x198>)
 801108e:	4013      	ands	r3, r2
 8011090:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	f003 0303 	and.w	r3, r3, #3
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	2207      	movs	r2, #7
 801109c:	fa02 f303 	lsl.w	r3, r2, r3
 80110a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80110a2:	4a2f      	ldr	r2, [pc, #188]	; (8011160 <HAL_GPIO_DeInit+0x18c>)
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	089b      	lsrs	r3, r3, #2
 80110a8:	3302      	adds	r3, #2
 80110aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	43da      	mvns	r2, r3
 80110b2:	482b      	ldr	r0, [pc, #172]	; (8011160 <HAL_GPIO_DeInit+0x18c>)
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	089b      	lsrs	r3, r3, #2
 80110b8:	400a      	ands	r2, r1
 80110ba:	3302      	adds	r3, #2
 80110bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	2103      	movs	r1, #3
 80110ca:	fa01 f303 	lsl.w	r3, r1, r3
 80110ce:	431a      	orrs	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	08da      	lsrs	r2, r3, #3
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	3208      	adds	r2, #8
 80110dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	f003 0307 	and.w	r3, r3, #7
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	220f      	movs	r2, #15
 80110ea:	fa02 f303 	lsl.w	r3, r2, r3
 80110ee:	43db      	mvns	r3, r3
 80110f0:	697a      	ldr	r2, [r7, #20]
 80110f2:	08d2      	lsrs	r2, r2, #3
 80110f4:	4019      	ands	r1, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	3208      	adds	r2, #8
 80110fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	689a      	ldr	r2, [r3, #8]
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	005b      	lsls	r3, r3, #1
 8011106:	2103      	movs	r1, #3
 8011108:	fa01 f303 	lsl.w	r3, r1, r3
 801110c:	43db      	mvns	r3, r3
 801110e:	401a      	ands	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	685a      	ldr	r2, [r3, #4]
 8011118:	2101      	movs	r1, #1
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	fa01 f303 	lsl.w	r3, r1, r3
 8011120:	43db      	mvns	r3, r3
 8011122:	401a      	ands	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	68da      	ldr	r2, [r3, #12]
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	005b      	lsls	r3, r3, #1
 8011130:	2103      	movs	r1, #3
 8011132:	fa01 f303 	lsl.w	r3, r1, r3
 8011136:	43db      	mvns	r3, r3
 8011138:	401a      	ands	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	60da      	str	r2, [r3, #12]
    }

    position++;
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	3301      	adds	r3, #1
 8011142:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8011144:	683a      	ldr	r2, [r7, #0]
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	fa22 f303 	lsr.w	r3, r2, r3
 801114c:	2b00      	cmp	r3, #0
 801114e:	f47f af49 	bne.w	8010fe4 <HAL_GPIO_DeInit+0x10>
  }
}
 8011152:	bf00      	nop
 8011154:	bf00      	nop
 8011156:	371c      	adds	r7, #28
 8011158:	46bd      	mov	sp, r7
 801115a:	bc80      	pop	{r7}
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	40010000 	.word	0x40010000
 8011164:	48000400 	.word	0x48000400
 8011168:	48000800 	.word	0x48000800
 801116c:	58000800 	.word	0x58000800

08011170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	460b      	mov	r3, r1
 801117a:	807b      	strh	r3, [r7, #2]
 801117c:	4613      	mov	r3, r2
 801117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011180:	787b      	ldrb	r3, [r7, #1]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d003      	beq.n	801118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011186:	887a      	ldrh	r2, [r7, #2]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801118c:	e002      	b.n	8011194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801118e:	887a      	ldrh	r2, [r7, #2]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011194:	bf00      	nop
 8011196:	370c      	adds	r7, #12
 8011198:	46bd      	mov	sp, r7
 801119a:	bc80      	pop	{r7}
 801119c:	4770      	bx	lr

0801119e <HAL_GPIO_LockPin>:
  * @param GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801119e:	b480      	push	{r7}
 80111a0:	b085      	sub	sp, #20
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	460b      	mov	r3, r1
 80111a8:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80111aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80111ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 80111b0:	887a      	ldrh	r2, [r7, #2]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	4313      	orrs	r3, r2
 80111b6:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80111be:	887a      	ldrh	r2, [r7, #2]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	69db      	ldr	r3, [r3, #28]
 80111ce:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	69db      	ldr	r3, [r3, #28]
 80111d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80111dc:	2300      	movs	r3, #0
 80111de:	e000      	b.n	80111e2 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80111e0:	2301      	movs	r3, #1
  }
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3714      	adds	r7, #20
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bc80      	pop	{r7}
 80111ea:	4770      	bx	lr

080111ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d101      	bne.n	80111fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80111fa:	2301      	movs	r3, #1
 80111fc:	e081      	b.n	8011302 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011204:	b2db      	uxtb	r3, r3
 8011206:	2b00      	cmp	r3, #0
 8011208:	d106      	bne.n	8011218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2200      	movs	r2, #0
 801120e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7f1 ffee 	bl	80031f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2224      	movs	r2, #36	; 0x24
 801121c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	f022 0201 	bic.w	r2, r2, #1
 801122e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	685a      	ldr	r2, [r3, #4]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801123c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	689a      	ldr	r2, [r3, #8]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801124c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d107      	bne.n	8011266 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	689a      	ldr	r2, [r3, #8]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011262:	609a      	str	r2, [r3, #8]
 8011264:	e006      	b.n	8011274 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	689a      	ldr	r2, [r3, #8]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011272:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	2b02      	cmp	r3, #2
 801127a:	d104      	bne.n	8011286 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	6812      	ldr	r2, [r2, #0]
 8011290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	68da      	ldr	r2, [r3, #12]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80112a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	691a      	ldr	r2, [r3, #16]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	695b      	ldr	r3, [r3, #20]
 80112b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	699b      	ldr	r3, [r3, #24]
 80112ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	69d9      	ldr	r1, [r3, #28]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6a1a      	ldr	r2, [r3, #32]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	430a      	orrs	r2, r1
 80112d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f042 0201 	orr.w	r2, r2, #1
 80112e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2200      	movs	r2, #0
 80112e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2220      	movs	r2, #32
 80112ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2200      	movs	r2, #0
 80112f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2200      	movs	r2, #0
 80112fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011300:	2300      	movs	r3, #0
}
 8011302:	4618      	mov	r0, r3
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
	...

0801130c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b088      	sub	sp, #32
 8011310:	af02      	add	r7, sp, #8
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	607a      	str	r2, [r7, #4]
 8011316:	461a      	mov	r2, r3
 8011318:	460b      	mov	r3, r1
 801131a:	817b      	strh	r3, [r7, #10]
 801131c:	4613      	mov	r3, r2
 801131e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011326:	b2db      	uxtb	r3, r3
 8011328:	2b20      	cmp	r3, #32
 801132a:	f040 80da 	bne.w	80114e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011334:	2b01      	cmp	r3, #1
 8011336:	d101      	bne.n	801133c <HAL_I2C_Master_Transmit+0x30>
 8011338:	2302      	movs	r3, #2
 801133a:	e0d3      	b.n	80114e4 <HAL_I2C_Master_Transmit+0x1d8>
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2201      	movs	r2, #1
 8011340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011344:	f7fe fdc0 	bl	800fec8 <HAL_GetTick>
 8011348:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	9300      	str	r3, [sp, #0]
 801134e:	2319      	movs	r3, #25
 8011350:	2201      	movs	r2, #1
 8011352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f000 f9e5 	bl	8011726 <I2C_WaitOnFlagUntilTimeout>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d001      	beq.n	8011366 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	e0be      	b.n	80114e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	2221      	movs	r2, #33	; 0x21
 801136a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2210      	movs	r2, #16
 8011372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2200      	movs	r2, #0
 801137a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	893a      	ldrh	r2, [r7, #8]
 8011386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2200      	movs	r2, #0
 801138c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011392:	b29b      	uxth	r3, r3
 8011394:	2bff      	cmp	r3, #255	; 0xff
 8011396:	d90e      	bls.n	80113b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	22ff      	movs	r2, #255	; 0xff
 801139c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113a2:	b2da      	uxtb	r2, r3
 80113a4:	8979      	ldrh	r1, [r7, #10]
 80113a6:	4b51      	ldr	r3, [pc, #324]	; (80114ec <HAL_I2C_Master_Transmit+0x1e0>)
 80113a8:	9300      	str	r3, [sp, #0]
 80113aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f000 fbd0 	bl	8011b54 <I2C_TransferConfig>
 80113b4:	e06c      	b.n	8011490 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113c4:	b2da      	uxtb	r2, r3
 80113c6:	8979      	ldrh	r1, [r7, #10]
 80113c8:	4b48      	ldr	r3, [pc, #288]	; (80114ec <HAL_I2C_Master_Transmit+0x1e0>)
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	f000 fbbf 	bl	8011b54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80113d6:	e05b      	b.n	8011490 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80113d8:	697a      	ldr	r2, [r7, #20]
 80113da:	6a39      	ldr	r1, [r7, #32]
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f000 f9e2 	bl	80117a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d001      	beq.n	80113ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80113e8:	2301      	movs	r3, #1
 80113ea:	e07b      	b.n	80114e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f0:	781a      	ldrb	r2, [r3, #0]
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113fc:	1c5a      	adds	r2, r3, #1
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011406:	b29b      	uxth	r3, r3
 8011408:	3b01      	subs	r3, #1
 801140a:	b29a      	uxth	r2, r3
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011414:	3b01      	subs	r3, #1
 8011416:	b29a      	uxth	r2, r3
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011420:	b29b      	uxth	r3, r3
 8011422:	2b00      	cmp	r3, #0
 8011424:	d034      	beq.n	8011490 <HAL_I2C_Master_Transmit+0x184>
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801142a:	2b00      	cmp	r3, #0
 801142c:	d130      	bne.n	8011490 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	9300      	str	r3, [sp, #0]
 8011432:	6a3b      	ldr	r3, [r7, #32]
 8011434:	2200      	movs	r2, #0
 8011436:	2180      	movs	r1, #128	; 0x80
 8011438:	68f8      	ldr	r0, [r7, #12]
 801143a:	f000 f974 	bl	8011726 <I2C_WaitOnFlagUntilTimeout>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d001      	beq.n	8011448 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8011444:	2301      	movs	r3, #1
 8011446:	e04d      	b.n	80114e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801144c:	b29b      	uxth	r3, r3
 801144e:	2bff      	cmp	r3, #255	; 0xff
 8011450:	d90e      	bls.n	8011470 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	22ff      	movs	r2, #255	; 0xff
 8011456:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801145c:	b2da      	uxtb	r2, r3
 801145e:	8979      	ldrh	r1, [r7, #10]
 8011460:	2300      	movs	r3, #0
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f000 fb73 	bl	8011b54 <I2C_TransferConfig>
 801146e:	e00f      	b.n	8011490 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011474:	b29a      	uxth	r2, r3
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801147e:	b2da      	uxtb	r2, r3
 8011480:	8979      	ldrh	r1, [r7, #10]
 8011482:	2300      	movs	r3, #0
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	f000 fb62 	bl	8011b54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011494:	b29b      	uxth	r3, r3
 8011496:	2b00      	cmp	r3, #0
 8011498:	d19e      	bne.n	80113d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	6a39      	ldr	r1, [r7, #32]
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f000 f9c1 	bl	8011826 <I2C_WaitOnSTOPFlagUntilTimeout>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d001      	beq.n	80114ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80114aa:	2301      	movs	r3, #1
 80114ac:	e01a      	b.n	80114e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2220      	movs	r2, #32
 80114b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	6859      	ldr	r1, [r3, #4]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	4b0b      	ldr	r3, [pc, #44]	; (80114f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80114c2:	400b      	ands	r3, r1
 80114c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2220      	movs	r2, #32
 80114ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2200      	movs	r2, #0
 80114d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2200      	movs	r2, #0
 80114da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80114de:	2300      	movs	r3, #0
 80114e0:	e000      	b.n	80114e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80114e2:	2302      	movs	r3, #2
  }
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3718      	adds	r7, #24
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	80002000 	.word	0x80002000
 80114f0:	fe00e800 	.word	0xfe00e800

080114f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af02      	add	r7, sp, #8
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	607a      	str	r2, [r7, #4]
 80114fe:	461a      	mov	r2, r3
 8011500:	460b      	mov	r3, r1
 8011502:	817b      	strh	r3, [r7, #10]
 8011504:	4613      	mov	r3, r2
 8011506:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801150e:	b2db      	uxtb	r3, r3
 8011510:	2b20      	cmp	r3, #32
 8011512:	f040 80db 	bne.w	80116cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801151c:	2b01      	cmp	r3, #1
 801151e:	d101      	bne.n	8011524 <HAL_I2C_Master_Receive+0x30>
 8011520:	2302      	movs	r3, #2
 8011522:	e0d4      	b.n	80116ce <HAL_I2C_Master_Receive+0x1da>
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2201      	movs	r2, #1
 8011528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801152c:	f7fe fccc 	bl	800fec8 <HAL_GetTick>
 8011530:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	9300      	str	r3, [sp, #0]
 8011536:	2319      	movs	r3, #25
 8011538:	2201      	movs	r2, #1
 801153a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	f000 f8f1 	bl	8011726 <I2C_WaitOnFlagUntilTimeout>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d001      	beq.n	801154e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801154a:	2301      	movs	r3, #1
 801154c:	e0bf      	b.n	80116ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2222      	movs	r2, #34	; 0x22
 8011552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	2210      	movs	r2, #16
 801155a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2200      	movs	r2, #0
 8011562:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	893a      	ldrh	r2, [r7, #8]
 801156e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2200      	movs	r2, #0
 8011574:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801157a:	b29b      	uxth	r3, r3
 801157c:	2bff      	cmp	r3, #255	; 0xff
 801157e:	d90e      	bls.n	801159e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	22ff      	movs	r2, #255	; 0xff
 8011584:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801158a:	b2da      	uxtb	r2, r3
 801158c:	8979      	ldrh	r1, [r7, #10]
 801158e:	4b52      	ldr	r3, [pc, #328]	; (80116d8 <HAL_I2C_Master_Receive+0x1e4>)
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f000 fadc 	bl	8011b54 <I2C_TransferConfig>
 801159c:	e06d      	b.n	801167a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115ac:	b2da      	uxtb	r2, r3
 80115ae:	8979      	ldrh	r1, [r7, #10]
 80115b0:	4b49      	ldr	r3, [pc, #292]	; (80116d8 <HAL_I2C_Master_Receive+0x1e4>)
 80115b2:	9300      	str	r3, [sp, #0]
 80115b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f000 facb 	bl	8011b54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80115be:	e05c      	b.n	801167a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80115c0:	697a      	ldr	r2, [r7, #20]
 80115c2:	6a39      	ldr	r1, [r7, #32]
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f000 f96b 	bl	80118a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d001      	beq.n	80115d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80115d0:	2301      	movs	r3, #1
 80115d2:	e07c      	b.n	80116ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115de:	b2d2      	uxtb	r2, r2
 80115e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e6:	1c5a      	adds	r2, r3, #1
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115f0:	3b01      	subs	r3, #1
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	3b01      	subs	r3, #1
 8011600:	b29a      	uxth	r2, r3
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801160a:	b29b      	uxth	r3, r3
 801160c:	2b00      	cmp	r3, #0
 801160e:	d034      	beq.n	801167a <HAL_I2C_Master_Receive+0x186>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011614:	2b00      	cmp	r3, #0
 8011616:	d130      	bne.n	801167a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	2200      	movs	r2, #0
 8011620:	2180      	movs	r1, #128	; 0x80
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f000 f87f 	bl	8011726 <I2C_WaitOnFlagUntilTimeout>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d001      	beq.n	8011632 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801162e:	2301      	movs	r3, #1
 8011630:	e04d      	b.n	80116ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011636:	b29b      	uxth	r3, r3
 8011638:	2bff      	cmp	r3, #255	; 0xff
 801163a:	d90e      	bls.n	801165a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	22ff      	movs	r2, #255	; 0xff
 8011640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011646:	b2da      	uxtb	r2, r3
 8011648:	8979      	ldrh	r1, [r7, #10]
 801164a:	2300      	movs	r3, #0
 801164c:	9300      	str	r3, [sp, #0]
 801164e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011652:	68f8      	ldr	r0, [r7, #12]
 8011654:	f000 fa7e 	bl	8011b54 <I2C_TransferConfig>
 8011658:	e00f      	b.n	801167a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801165e:	b29a      	uxth	r2, r3
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011668:	b2da      	uxtb	r2, r3
 801166a:	8979      	ldrh	r1, [r7, #10]
 801166c:	2300      	movs	r3, #0
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f000 fa6d 	bl	8011b54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801167e:	b29b      	uxth	r3, r3
 8011680:	2b00      	cmp	r3, #0
 8011682:	d19d      	bne.n	80115c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011684:	697a      	ldr	r2, [r7, #20]
 8011686:	6a39      	ldr	r1, [r7, #32]
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f000 f8cc 	bl	8011826 <I2C_WaitOnSTOPFlagUntilTimeout>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d001      	beq.n	8011698 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8011694:	2301      	movs	r3, #1
 8011696:	e01a      	b.n	80116ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2220      	movs	r2, #32
 801169e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	6859      	ldr	r1, [r3, #4]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	4b0c      	ldr	r3, [pc, #48]	; (80116dc <HAL_I2C_Master_Receive+0x1e8>)
 80116ac:	400b      	ands	r3, r1
 80116ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2220      	movs	r2, #32
 80116b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2200      	movs	r2, #0
 80116bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2200      	movs	r2, #0
 80116c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80116c8:	2300      	movs	r3, #0
 80116ca:	e000      	b.n	80116ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80116cc:	2302      	movs	r3, #2
  }
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3718      	adds	r7, #24
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	80002400 	.word	0x80002400
 80116dc:	fe00e800 	.word	0xfe00e800

080116e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	699b      	ldr	r3, [r3, #24]
 80116ee:	f003 0302 	and.w	r3, r3, #2
 80116f2:	2b02      	cmp	r3, #2
 80116f4:	d103      	bne.n	80116fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2200      	movs	r2, #0
 80116fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	699b      	ldr	r3, [r3, #24]
 8011704:	f003 0301 	and.w	r3, r3, #1
 8011708:	2b01      	cmp	r3, #1
 801170a:	d007      	beq.n	801171c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	699a      	ldr	r2, [r3, #24]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f042 0201 	orr.w	r2, r2, #1
 801171a:	619a      	str	r2, [r3, #24]
  }
}
 801171c:	bf00      	nop
 801171e:	370c      	adds	r7, #12
 8011720:	46bd      	mov	sp, r7
 8011722:	bc80      	pop	{r7}
 8011724:	4770      	bx	lr

08011726 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011726:	b580      	push	{r7, lr}
 8011728:	b084      	sub	sp, #16
 801172a:	af00      	add	r7, sp, #0
 801172c:	60f8      	str	r0, [r7, #12]
 801172e:	60b9      	str	r1, [r7, #8]
 8011730:	603b      	str	r3, [r7, #0]
 8011732:	4613      	mov	r3, r2
 8011734:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011736:	e022      	b.n	801177e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173e:	d01e      	beq.n	801177e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011740:	f7fe fbc2 	bl	800fec8 <HAL_GetTick>
 8011744:	4602      	mov	r2, r0
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	429a      	cmp	r2, r3
 801174e:	d302      	bcc.n	8011756 <I2C_WaitOnFlagUntilTimeout+0x30>
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d113      	bne.n	801177e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801175a:	f043 0220 	orr.w	r2, r3, #32
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2220      	movs	r2, #32
 8011766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2200      	movs	r2, #0
 801176e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2200      	movs	r2, #0
 8011776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801177a:	2301      	movs	r3, #1
 801177c:	e00f      	b.n	801179e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	699a      	ldr	r2, [r3, #24]
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	4013      	ands	r3, r2
 8011788:	68ba      	ldr	r2, [r7, #8]
 801178a:	429a      	cmp	r2, r3
 801178c:	bf0c      	ite	eq
 801178e:	2301      	moveq	r3, #1
 8011790:	2300      	movne	r3, #0
 8011792:	b2db      	uxtb	r3, r3
 8011794:	461a      	mov	r2, r3
 8011796:	79fb      	ldrb	r3, [r7, #7]
 8011798:	429a      	cmp	r2, r3
 801179a:	d0cd      	beq.n	8011738 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801179c:	2300      	movs	r3, #0
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b084      	sub	sp, #16
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	60f8      	str	r0, [r7, #12]
 80117ae:	60b9      	str	r1, [r7, #8]
 80117b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80117b2:	e02c      	b.n	801180e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80117b4:	687a      	ldr	r2, [r7, #4]
 80117b6:	68b9      	ldr	r1, [r7, #8]
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f000 f8eb 	bl	8011994 <I2C_IsErrorOccurred>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d001      	beq.n	80117c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80117c4:	2301      	movs	r3, #1
 80117c6:	e02a      	b.n	801181e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ce:	d01e      	beq.n	801180e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117d0:	f7fe fb7a 	bl	800fec8 <HAL_GetTick>
 80117d4:	4602      	mov	r2, r0
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	1ad3      	subs	r3, r2, r3
 80117da:	68ba      	ldr	r2, [r7, #8]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d302      	bcc.n	80117e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d113      	bne.n	801180e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117ea:	f043 0220 	orr.w	r2, r3, #32
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2220      	movs	r2, #32
 80117f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801180a:	2301      	movs	r3, #1
 801180c:	e007      	b.n	801181e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	699b      	ldr	r3, [r3, #24]
 8011814:	f003 0302 	and.w	r3, r3, #2
 8011818:	2b02      	cmp	r3, #2
 801181a:	d1cb      	bne.n	80117b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	3710      	adds	r7, #16
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011826:	b580      	push	{r7, lr}
 8011828:	b084      	sub	sp, #16
 801182a:	af00      	add	r7, sp, #0
 801182c:	60f8      	str	r0, [r7, #12]
 801182e:	60b9      	str	r1, [r7, #8]
 8011830:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011832:	e028      	b.n	8011886 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	68b9      	ldr	r1, [r7, #8]
 8011838:	68f8      	ldr	r0, [r7, #12]
 801183a:	f000 f8ab 	bl	8011994 <I2C_IsErrorOccurred>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011844:	2301      	movs	r3, #1
 8011846:	e026      	b.n	8011896 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011848:	f7fe fb3e 	bl	800fec8 <HAL_GetTick>
 801184c:	4602      	mov	r2, r0
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	1ad3      	subs	r3, r2, r3
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	429a      	cmp	r2, r3
 8011856:	d302      	bcc.n	801185e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d113      	bne.n	8011886 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011862:	f043 0220 	orr.w	r2, r3, #32
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2220      	movs	r2, #32
 801186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2200      	movs	r2, #0
 8011876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011882:	2301      	movs	r3, #1
 8011884:	e007      	b.n	8011896 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	699b      	ldr	r3, [r3, #24]
 801188c:	f003 0320 	and.w	r3, r3, #32
 8011890:	2b20      	cmp	r3, #32
 8011892:	d1cf      	bne.n	8011834 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
	...

080118a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80118ac:	e064      	b.n	8011978 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	68b9      	ldr	r1, [r7, #8]
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	f000 f86e 	bl	8011994 <I2C_IsErrorOccurred>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d001      	beq.n	80118c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80118be:	2301      	movs	r3, #1
 80118c0:	e062      	b.n	8011988 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	699b      	ldr	r3, [r3, #24]
 80118c8:	f003 0320 	and.w	r3, r3, #32
 80118cc:	2b20      	cmp	r3, #32
 80118ce:	d138      	bne.n	8011942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	699b      	ldr	r3, [r3, #24]
 80118d6:	f003 0304 	and.w	r3, r3, #4
 80118da:	2b04      	cmp	r3, #4
 80118dc:	d105      	bne.n	80118ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80118e6:	2300      	movs	r3, #0
 80118e8:	e04e      	b.n	8011988 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	699b      	ldr	r3, [r3, #24]
 80118f0:	f003 0310 	and.w	r3, r3, #16
 80118f4:	2b10      	cmp	r3, #16
 80118f6:	d107      	bne.n	8011908 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2210      	movs	r2, #16
 80118fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2204      	movs	r2, #4
 8011904:	645a      	str	r2, [r3, #68]	; 0x44
 8011906:	e002      	b.n	801190e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2200      	movs	r2, #0
 801190c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2220      	movs	r2, #32
 8011914:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	6859      	ldr	r1, [r3, #4]
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	4b1b      	ldr	r3, [pc, #108]	; (8011990 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8011922:	400b      	ands	r3, r1
 8011924:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	2220      	movs	r2, #32
 801192a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2200      	movs	r2, #0
 8011932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2200      	movs	r2, #0
 801193a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801193e:	2301      	movs	r3, #1
 8011940:	e022      	b.n	8011988 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011942:	f7fe fac1 	bl	800fec8 <HAL_GetTick>
 8011946:	4602      	mov	r2, r0
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	1ad3      	subs	r3, r2, r3
 801194c:	68ba      	ldr	r2, [r7, #8]
 801194e:	429a      	cmp	r2, r3
 8011950:	d302      	bcc.n	8011958 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d10f      	bne.n	8011978 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801195c:	f043 0220 	orr.w	r2, r3, #32
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	2220      	movs	r2, #32
 8011968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2200      	movs	r2, #0
 8011970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011974:	2301      	movs	r3, #1
 8011976:	e007      	b.n	8011988 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	699b      	ldr	r3, [r3, #24]
 801197e:	f003 0304 	and.w	r3, r3, #4
 8011982:	2b04      	cmp	r3, #4
 8011984:	d193      	bne.n	80118ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011986:	2300      	movs	r3, #0
}
 8011988:	4618      	mov	r0, r3
 801198a:	3710      	adds	r7, #16
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	fe00e800 	.word	0xfe00e800

08011994 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b08a      	sub	sp, #40	; 0x28
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80119a0:	2300      	movs	r3, #0
 80119a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	699b      	ldr	r3, [r3, #24]
 80119ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80119ae:	2300      	movs	r3, #0
 80119b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	f003 0310 	and.w	r3, r3, #16
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d068      	beq.n	8011a92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2210      	movs	r2, #16
 80119c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80119c8:	e049      	b.n	8011a5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d0:	d045      	beq.n	8011a5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80119d2:	f7fe fa79 	bl	800fec8 <HAL_GetTick>
 80119d6:	4602      	mov	r2, r0
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d302      	bcc.n	80119e8 <I2C_IsErrorOccurred+0x54>
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d13a      	bne.n	8011a5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	699b      	ldr	r3, [r3, #24]
 8011a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a0a:	d121      	bne.n	8011a50 <I2C_IsErrorOccurred+0xbc>
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a12:	d01d      	beq.n	8011a50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8011a14:	7cfb      	ldrb	r3, [r7, #19]
 8011a16:	2b20      	cmp	r3, #32
 8011a18:	d01a      	beq.n	8011a50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	685a      	ldr	r2, [r3, #4]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011a28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011a2a:	f7fe fa4d 	bl	800fec8 <HAL_GetTick>
 8011a2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a30:	e00e      	b.n	8011a50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011a32:	f7fe fa49 	bl	800fec8 <HAL_GetTick>
 8011a36:	4602      	mov	r2, r0
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	2b19      	cmp	r3, #25
 8011a3e:	d907      	bls.n	8011a50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8011a40:	6a3b      	ldr	r3, [r7, #32]
 8011a42:	f043 0320 	orr.w	r3, r3, #32
 8011a46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011a48:	2301      	movs	r3, #1
 8011a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8011a4e:	e006      	b.n	8011a5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	699b      	ldr	r3, [r3, #24]
 8011a56:	f003 0320 	and.w	r3, r3, #32
 8011a5a:	2b20      	cmp	r3, #32
 8011a5c:	d1e9      	bne.n	8011a32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	699b      	ldr	r3, [r3, #24]
 8011a64:	f003 0320 	and.w	r3, r3, #32
 8011a68:	2b20      	cmp	r3, #32
 8011a6a:	d003      	beq.n	8011a74 <I2C_IsErrorOccurred+0xe0>
 8011a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d0aa      	beq.n	80119ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d103      	bne.n	8011a84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2220      	movs	r2, #32
 8011a82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011a84:	6a3b      	ldr	r3, [r7, #32]
 8011a86:	f043 0304 	orr.w	r3, r3, #4
 8011a8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	699b      	ldr	r3, [r3, #24]
 8011a98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00b      	beq.n	8011abc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011aa4:	6a3b      	ldr	r3, [r7, #32]
 8011aa6:	f043 0301 	orr.w	r3, r3, #1
 8011aaa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ab4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00b      	beq.n	8011ade <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011ac6:	6a3b      	ldr	r3, [r7, #32]
 8011ac8:	f043 0308 	orr.w	r3, r3, #8
 8011acc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00b      	beq.n	8011b00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011ae8:	6a3b      	ldr	r3, [r7, #32]
 8011aea:	f043 0302 	orr.w	r3, r3, #2
 8011aee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011afa:	2301      	movs	r3, #1
 8011afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8011b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d01c      	beq.n	8011b42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011b08:	68f8      	ldr	r0, [r7, #12]
 8011b0a:	f7ff fde9 	bl	80116e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	6859      	ldr	r1, [r3, #4]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	681a      	ldr	r2, [r3, #0]
 8011b18:	4b0d      	ldr	r3, [pc, #52]	; (8011b50 <I2C_IsErrorOccurred+0x1bc>)
 8011b1a:	400b      	ands	r3, r1
 8011b1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b22:	6a3b      	ldr	r3, [r7, #32]
 8011b24:	431a      	orrs	r2, r3
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2220      	movs	r2, #32
 8011b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2200      	movs	r2, #0
 8011b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8011b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3728      	adds	r7, #40	; 0x28
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	fe00e800 	.word	0xfe00e800

08011b54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b087      	sub	sp, #28
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	607b      	str	r3, [r7, #4]
 8011b5e:	460b      	mov	r3, r1
 8011b60:	817b      	strh	r3, [r7, #10]
 8011b62:	4613      	mov	r3, r2
 8011b64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011b66:	897b      	ldrh	r3, [r7, #10]
 8011b68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011b6c:	7a7b      	ldrb	r3, [r7, #9]
 8011b6e:	041b      	lsls	r3, r3, #16
 8011b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011b74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	685a      	ldr	r2, [r3, #4]
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	0d5b      	lsrs	r3, r3, #21
 8011b8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8011b92:	4b07      	ldr	r3, [pc, #28]	; (8011bb0 <I2C_TransferConfig+0x5c>)
 8011b94:	430b      	orrs	r3, r1
 8011b96:	43db      	mvns	r3, r3
 8011b98:	ea02 0103 	and.w	r1, r2, r3
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	697a      	ldr	r2, [r7, #20]
 8011ba2:	430a      	orrs	r2, r1
 8011ba4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011ba6:	bf00      	nop
 8011ba8:	371c      	adds	r7, #28
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bc80      	pop	{r7}
 8011bae:	4770      	bx	lr
 8011bb0:	03ff63ff 	.word	0x03ff63ff

08011bb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	2b20      	cmp	r3, #32
 8011bc8:	d138      	bne.n	8011c3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d101      	bne.n	8011bd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011bd4:	2302      	movs	r3, #2
 8011bd6:	e032      	b.n	8011c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2201      	movs	r2, #1
 8011bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2224      	movs	r2, #36	; 0x24
 8011be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f022 0201 	bic.w	r2, r2, #1
 8011bf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011c06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	6819      	ldr	r1, [r3, #0]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	683a      	ldr	r2, [r7, #0]
 8011c14:	430a      	orrs	r2, r1
 8011c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f042 0201 	orr.w	r2, r2, #1
 8011c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2220      	movs	r2, #32
 8011c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2200      	movs	r2, #0
 8011c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e000      	b.n	8011c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011c3c:	2302      	movs	r3, #2
  }
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bc80      	pop	{r7}
 8011c46:	4770      	bx	lr

08011c48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	2b20      	cmp	r3, #32
 8011c5c:	d139      	bne.n	8011cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d101      	bne.n	8011c6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011c68:	2302      	movs	r3, #2
 8011c6a:	e033      	b.n	8011cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2201      	movs	r2, #1
 8011c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2224      	movs	r2, #36	; 0x24
 8011c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f022 0201 	bic.w	r2, r2, #1
 8011c8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011c9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	021b      	lsls	r3, r3, #8
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f042 0201 	orr.w	r2, r2, #1
 8011cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2220      	movs	r2, #32
 8011cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e000      	b.n	8011cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011cd2:	2302      	movs	r3, #2
  }
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3714      	adds	r7, #20
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bc80      	pop	{r7}
 8011cdc:	4770      	bx	lr

08011cde <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8011cde:	b480      	push	{r7}
 8011ce0:	b083      	sub	sp, #12
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8011ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011cea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	0c1b      	lsrs	r3, r3, #16
 8011cf2:	041b      	lsls	r3, r3, #16
 8011cf4:	43db      	mvns	r3, r3
 8011cf6:	401a      	ands	r2, r3
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	041b      	lsls	r3, r3, #16
 8011cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011d00:	4313      	orrs	r3, r2
 8011d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8011d06:	bf00      	nop
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bc80      	pop	{r7}
 8011d0e:	4770      	bx	lr

08011d10 <LL_RCC_GetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE

  */
__STATIC_INLINE uint32_t LL_RCC_GetLPTIMClockSource(uint32_t LPTIMx)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8011d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	4013      	ands	r3, r2
 8011d24:	0c1a      	lsrs	r2, r3, #16
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	4313      	orrs	r3, r2
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	370c      	adds	r7, #12
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bc80      	pop	{r7}
 8011d32:	4770      	bx	lr

08011d34 <LL_APB1_GRP1_ForceReset>:
{
 8011d34:	b480      	push	{r7}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8011d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4313      	orrs	r3, r2
 8011d4a:	638b      	str	r3, [r1, #56]	; 0x38
}
 8011d4c:	bf00      	nop
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bc80      	pop	{r7}
 8011d54:	4770      	bx	lr

08011d56 <LL_APB1_GRP2_ForceReset>:
{
 8011d56:	b480      	push	{r7}
 8011d58:	b083      	sub	sp, #12
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8011d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8011d6e:	bf00      	nop
 8011d70:	370c      	adds	r7, #12
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bc80      	pop	{r7}
 8011d76:	4770      	bx	lr

08011d78 <LL_APB1_GRP1_ReleaseReset>:
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8011d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	43db      	mvns	r3, r3
 8011d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011d8e:	4013      	ands	r3, r2
 8011d90:	638b      	str	r3, [r1, #56]	; 0x38
}
 8011d92:	bf00      	nop
 8011d94:	370c      	adds	r7, #12
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bc80      	pop	{r7}
 8011d9a:	4770      	bx	lr

08011d9c <LL_APB1_GRP2_ReleaseReset>:
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8011da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	43db      	mvns	r3, r3
 8011dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011db2:	4013      	ands	r3, r2
 8011db4:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8011db6:	bf00      	nop
 8011db8:	370c      	adds	r7, #12
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bc80      	pop	{r7}
 8011dbe:	4770      	bx	lr

08011dc0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d101      	bne.n	8011dd2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e0b6      	b.n	8011f40 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d106      	bne.n	8011df2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7f1 fa79 	bl	80032e4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2202      	movs	r2, #2
 8011df6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	691a      	ldr	r2, [r3, #16]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f042 0201 	orr.w	r2, r2, #1
 8011e08:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e12:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011e1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8011e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 faa0 	bl	8012368 <LPTIM_WaitForFlag>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b03      	cmp	r3, #3
 8011e2c:	d101      	bne.n	8011e32 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8011e2e:	2303      	movs	r3, #3
 8011e30:	e086      	b.n	8011f40 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 fac8 	bl	80123c8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f000 fa88 	bl	801234e <HAL_LPTIM_GetState>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b03      	cmp	r3, #3
 8011e42:	d101      	bne.n	8011e48 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8011e44:	2303      	movs	r3, #3
 8011e46:	e07b      	b.n	8011f40 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d004      	beq.n	8011e62 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011e60:	d103      	bne.n	8011e6a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f023 031e 	bic.w	r3, r3, #30
 8011e68:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	695b      	ldr	r3, [r3, #20]
 8011e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d005      	beq.n	8011e82 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011e7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011e80:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	4b30      	ldr	r3, [pc, #192]	; (8011f48 <HAL_LPTIM_Init+0x188>)
 8011e86:	4013      	ands	r3, r2
 8011e88:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8011e92:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8011e98:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8011e9e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8011ea4:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	4313      	orrs	r3, r2
 8011eaa:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d107      	bne.n	8011ec4 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	68fa      	ldr	r2, [r7, #12]
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d004      	beq.n	8011ed6 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011ed4:	d107      	bne.n	8011ee6 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	68fa      	ldr	r2, [r7, #12]
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	695b      	ldr	r3, [r3, #20]
 8011eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d00a      	beq.n	8011f08 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8011efa:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8011f00:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	4313      	orrs	r3, r2
 8011f06:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	68fa      	ldr	r2, [r7, #12]
 8011f0e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a0d      	ldr	r2, [pc, #52]	; (8011f4c <HAL_LPTIM_Init+0x18c>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d108      	bne.n	8011f2c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	430a      	orrs	r2, r1
 8011f28:	621a      	str	r2, [r3, #32]
 8011f2a:	e004      	b.n	8011f36 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011f34:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2201      	movs	r2, #1
 8011f3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8011f3e:	2300      	movs	r3, #0
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3710      	adds	r7, #16
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	ff19f1fe 	.word	0xff19f1fe
 8011f4c:	40007c00 	.word	0x40007c00

08011f50 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2202      	movs	r2, #2
 8011f5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d00c      	beq.n	8011f84 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011f72:	d107      	bne.n	8011f84 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	68da      	ldr	r2, [r3, #12]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8011f82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	691a      	ldr	r2, [r3, #16]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f042 0201 	orr.w	r2, r2, #1
 8011f92:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2210      	movs	r2, #16
 8011f9a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	683a      	ldr	r2, [r7, #0]
 8011fa2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8011fa4:	2110      	movs	r1, #16
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 f9de 	bl	8012368 <LPTIM_WaitForFlag>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b03      	cmp	r3, #3
 8011fb0:	d101      	bne.n	8011fb6 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 8011fb2:	2303      	movs	r3, #3
 8011fb4:	e00c      	b.n	8011fd0 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	691a      	ldr	r2, [r3, #16]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f042 0204 	orr.w	r2, r2, #4
 8011fc4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2201      	movs	r2, #1
 8011fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8011fce:	2300      	movs	r3, #0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3708      	adds	r7, #8
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2202      	movs	r2, #2
 8011fe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4a48      	ldr	r2, [pc, #288]	; (8012110 <HAL_LPTIM_Counter_Start_IT+0x138>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d108      	bne.n	8012006 <HAL_LPTIM_Counter_Start_IT+0x2e>
 8011ff4:	4b47      	ldr	r3, [pc, #284]	; (8012114 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8011ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011ffa:	4a46      	ldr	r2, [pc, #280]	; (8012114 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8011ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8012004:	e015      	b.n	8012032 <HAL_LPTIM_Counter_Start_IT+0x5a>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4a43      	ldr	r2, [pc, #268]	; (8012118 <HAL_LPTIM_Counter_Start_IT+0x140>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d108      	bne.n	8012022 <HAL_LPTIM_Counter_Start_IT+0x4a>
 8012010:	4b40      	ldr	r3, [pc, #256]	; (8012114 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8012012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012016:	4a3f      	ldr	r2, [pc, #252]	; (8012114 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8012018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801201c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8012020:	e007      	b.n	8012032 <HAL_LPTIM_Counter_Start_IT+0x5a>
 8012022:	4b3c      	ldr	r3, [pc, #240]	; (8012114 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8012024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012028:	4a3a      	ldr	r2, [pc, #232]	; (8012114 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801202a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801202e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	2b01      	cmp	r3, #1
 8012038:	d00c      	beq.n	8012054 <HAL_LPTIM_Counter_Start_IT+0x7c>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801203e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012042:	d107      	bne.n	8012054 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	68da      	ldr	r2, [r3, #12]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8012052:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	691a      	ldr	r2, [r3, #16]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f042 0201 	orr.w	r2, r2, #1
 8012062:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2210      	movs	r2, #16
 801206a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	683a      	ldr	r2, [r7, #0]
 8012072:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8012074:	2110      	movs	r1, #16
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 f976 	bl	8012368 <LPTIM_WaitForFlag>
 801207c:	4603      	mov	r3, r0
 801207e:	2b03      	cmp	r3, #3
 8012080:	d101      	bne.n	8012086 <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 8012082:	2303      	movs	r3, #3
 8012084:	e03f      	b.n	8012106 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f000 f99e 	bl	80123c8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f95e 	bl	801234e <HAL_LPTIM_GetState>
 8012092:	4603      	mov	r3, r0
 8012094:	2b03      	cmp	r3, #3
 8012096:	d101      	bne.n	801209c <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8012098:	2303      	movs	r3, #3
 801209a:	e034      	b.n	8012106 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	689a      	ldr	r2, [r3, #8]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	f042 0210 	orr.w	r2, r2, #16
 80120aa:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	689a      	ldr	r2, [r3, #8]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f042 0202 	orr.w	r2, r2, #2
 80120ba:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	689a      	ldr	r2, [r3, #8]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120ca:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	689a      	ldr	r2, [r3, #8]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80120da:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	691a      	ldr	r2, [r3, #16]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f042 0201 	orr.w	r2, r2, #1
 80120ea:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	691a      	ldr	r2, [r3, #16]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f042 0204 	orr.w	r2, r2, #4
 80120fa:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2201      	movs	r2, #1
 8012100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	40007c00 	.word	0x40007c00
 8012114:	58000800 	.word	0x58000800
 8012118:	40009400 	.word	0x40009400

0801211c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f003 0301 	and.w	r3, r3, #1
 801212e:	2b01      	cmp	r3, #1
 8012130:	d10d      	bne.n	801214e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	689b      	ldr	r3, [r3, #8]
 8012138:	f003 0301 	and.w	r3, r3, #1
 801213c:	2b01      	cmp	r3, #1
 801213e:	d106      	bne.n	801214e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2201      	movs	r2, #1
 8012146:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f000 f8af 	bl	80122ac <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f003 0302 	and.w	r3, r3, #2
 8012158:	2b02      	cmp	r3, #2
 801215a:	d10d      	bne.n	8012178 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	f003 0302 	and.w	r3, r3, #2
 8012166:	2b02      	cmp	r3, #2
 8012168:	d106      	bne.n	8012178 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2202      	movs	r2, #2
 8012170:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f000 f8a3 	bl	80122be <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f003 0304 	and.w	r3, r3, #4
 8012182:	2b04      	cmp	r3, #4
 8012184:	d10d      	bne.n	80121a2 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	689b      	ldr	r3, [r3, #8]
 801218c:	f003 0304 	and.w	r3, r3, #4
 8012190:	2b04      	cmp	r3, #4
 8012192:	d106      	bne.n	80121a2 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2204      	movs	r2, #4
 801219a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f000 f897 	bl	80122d0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	f003 0308 	and.w	r3, r3, #8
 80121ac:	2b08      	cmp	r3, #8
 80121ae:	d10d      	bne.n	80121cc <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	689b      	ldr	r3, [r3, #8]
 80121b6:	f003 0308 	and.w	r3, r3, #8
 80121ba:	2b08      	cmp	r3, #8
 80121bc:	d106      	bne.n	80121cc <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2208      	movs	r2, #8
 80121c4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 f88b 	bl	80122e2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f003 0310 	and.w	r3, r3, #16
 80121d6:	2b10      	cmp	r3, #16
 80121d8:	d10d      	bne.n	80121f6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	689b      	ldr	r3, [r3, #8]
 80121e0:	f003 0310 	and.w	r3, r3, #16
 80121e4:	2b10      	cmp	r3, #16
 80121e6:	d106      	bne.n	80121f6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2210      	movs	r2, #16
 80121ee:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f000 f87f 	bl	80122f4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f003 0320 	and.w	r3, r3, #32
 8012200:	2b20      	cmp	r3, #32
 8012202:	d10d      	bne.n	8012220 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	f003 0320 	and.w	r3, r3, #32
 801220e:	2b20      	cmp	r3, #32
 8012210:	d106      	bne.n	8012220 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2220      	movs	r2, #32
 8012218:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 f873 	bl	8012306 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801222a:	2b40      	cmp	r3, #64	; 0x40
 801222c:	d10d      	bne.n	801224a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	689b      	ldr	r3, [r3, #8]
 8012234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012238:	2b40      	cmp	r3, #64	; 0x40
 801223a:	d106      	bne.n	801224a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2240      	movs	r2, #64	; 0x40
 8012242:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 f867 	bl	8012318 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012254:	2b80      	cmp	r3, #128	; 0x80
 8012256:	d10d      	bne.n	8012274 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012262:	2b80      	cmp	r3, #128	; 0x80
 8012264:	d106      	bne.n	8012274 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2280      	movs	r2, #128	; 0x80
 801226c:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 f85b 	bl	801232a <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012282:	d10f      	bne.n	80122a4 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	689b      	ldr	r3, [r3, #8]
 801228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801228e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012292:	d107      	bne.n	80122a4 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f44f 7280 	mov.w	r2, #256	; 0x100
 801229c:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 f84c 	bl	801233c <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80122a4:	bf00      	nop
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b083      	sub	sp, #12
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80122b4:	bf00      	nop
 80122b6:	370c      	adds	r7, #12
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bc80      	pop	{r7}
 80122bc:	4770      	bx	lr

080122be <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80122be:	b480      	push	{r7}
 80122c0:	b083      	sub	sp, #12
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80122c6:	bf00      	nop
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bc80      	pop	{r7}
 80122ce:	4770      	bx	lr

080122d0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80122d8:	bf00      	nop
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	bc80      	pop	{r7}
 80122e0:	4770      	bx	lr

080122e2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80122ea:	bf00      	nop
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bc80      	pop	{r7}
 80122f2:	4770      	bx	lr

080122f4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80122fc:	bf00      	nop
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	bc80      	pop	{r7}
 8012304:	4770      	bx	lr

08012306 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8012306:	b480      	push	{r7}
 8012308:	b083      	sub	sp, #12
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 801230e:	bf00      	nop
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	bc80      	pop	{r7}
 8012316:	4770      	bx	lr

08012318 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8012320:	bf00      	nop
 8012322:	370c      	adds	r7, #12
 8012324:	46bd      	mov	sp, r7
 8012326:	bc80      	pop	{r7}
 8012328:	4770      	bx	lr

0801232a <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 801232a:	b480      	push	{r7}
 801232c:	b083      	sub	sp, #12
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8012332:	bf00      	nop
 8012334:	370c      	adds	r7, #12
 8012336:	46bd      	mov	sp, r7
 8012338:	bc80      	pop	{r7}
 801233a:	4770      	bx	lr

0801233c <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8012344:	bf00      	nop
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	bc80      	pop	{r7}
 801234c:	4770      	bx	lr

0801234e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 801234e:	b480      	push	{r7}
 8012350:	b083      	sub	sp, #12
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801235c:	b2db      	uxtb	r3, r3
}
 801235e:	4618      	mov	r0, r3
 8012360:	370c      	adds	r7, #12
 8012362:	46bd      	mov	sp, r7
 8012364:	bc80      	pop	{r7}
 8012366:	4770      	bx	lr

08012368 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8012368:	b480      	push	{r7}
 801236a:	b085      	sub	sp, #20
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8012372:	2300      	movs	r3, #0
 8012374:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8012376:	4b12      	ldr	r3, [pc, #72]	; (80123c0 <LPTIM_WaitForFlag+0x58>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4a12      	ldr	r2, [pc, #72]	; (80123c4 <LPTIM_WaitForFlag+0x5c>)
 801237c:	fba2 2303 	umull	r2, r3, r2, r3
 8012380:	0b9b      	lsrs	r3, r3, #14
 8012382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012386:	fb02 f303 	mul.w	r3, r2, r3
 801238a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	3b01      	subs	r3, #1
 8012390:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d101      	bne.n	801239c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8012398:	2303      	movs	r3, #3
 801239a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	4013      	ands	r3, r2
 80123a6:	683a      	ldr	r2, [r7, #0]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d002      	beq.n	80123b2 <LPTIM_WaitForFlag+0x4a>
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d1ec      	bne.n	801238c <LPTIM_WaitForFlag+0x24>

  return result;
 80123b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3714      	adds	r7, #20
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bc80      	pop	{r7}
 80123bc:	4770      	bx	lr
 80123be:	bf00      	nop
 80123c0:	20000428 	.word	0x20000428
 80123c4:	d1b71759 	.word	0xd1b71759

080123c8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b08e      	sub	sp, #56	; 0x38
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80123d0:	2300      	movs	r3, #0
 80123d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123d4:	f3ef 8310 	mrs	r3, PRIMASK
 80123d8:	613b      	str	r3, [r7, #16]
  return(result);
 80123da:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80123dc:	633b      	str	r3, [r7, #48]	; 0x30
 80123de:	2301      	movs	r3, #1
 80123e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	f383 8810 	msr	PRIMASK, r3
}
 80123e8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	4a90      	ldr	r2, [pc, #576]	; (8012630 <LPTIM_Disable+0x268>)
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d015      	beq.n	8012420 <LPTIM_Disable+0x58>
 80123f4:	4a8e      	ldr	r2, [pc, #568]	; (8012630 <LPTIM_Disable+0x268>)
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d818      	bhi.n	801242c <LPTIM_Disable+0x64>
 80123fa:	4a8e      	ldr	r2, [pc, #568]	; (8012634 <LPTIM_Disable+0x26c>)
 80123fc:	4293      	cmp	r3, r2
 80123fe:	d003      	beq.n	8012408 <LPTIM_Disable+0x40>
 8012400:	4a8d      	ldr	r2, [pc, #564]	; (8012638 <LPTIM_Disable+0x270>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d006      	beq.n	8012414 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8012406:	e011      	b.n	801242c <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8012408:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 801240c:	f7ff fc80 	bl	8011d10 <LL_RCC_GetLPTIMClockSource>
 8012410:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8012412:	e00c      	b.n	801242e <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8012414:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8012418:	f7ff fc7a 	bl	8011d10 <LL_RCC_GetLPTIMClockSource>
 801241c:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 801241e:	e006      	b.n	801242e <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8012420:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8012424:	f7ff fc74 	bl	8011d10 <LL_RCC_GetLPTIMClockSource>
 8012428:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 801242a:	e000      	b.n	801242e <LPTIM_Disable+0x66>
      break;
 801242c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	695b      	ldr	r3, [r3, #20]
 8012444:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	6a1b      	ldr	r3, [r3, #32]
 8012454:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801245c:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	4a73      	ldr	r2, [pc, #460]	; (8012630 <LPTIM_Disable+0x268>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d019      	beq.n	801249c <LPTIM_Disable+0xd4>
 8012468:	4a71      	ldr	r2, [pc, #452]	; (8012630 <LPTIM_Disable+0x268>)
 801246a:	4293      	cmp	r3, r2
 801246c:	d81d      	bhi.n	80124aa <LPTIM_Disable+0xe2>
 801246e:	4a71      	ldr	r2, [pc, #452]	; (8012634 <LPTIM_Disable+0x26c>)
 8012470:	4293      	cmp	r3, r2
 8012472:	d003      	beq.n	801247c <LPTIM_Disable+0xb4>
 8012474:	4a70      	ldr	r2, [pc, #448]	; (8012638 <LPTIM_Disable+0x270>)
 8012476:	4293      	cmp	r3, r2
 8012478:	d009      	beq.n	801248e <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 801247a:	e016      	b.n	80124aa <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 801247c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8012480:	f7ff fc58 	bl	8011d34 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8012484:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8012488:	f7ff fc76 	bl	8011d78 <LL_APB1_GRP1_ReleaseReset>
      break;
 801248c:	e00e      	b.n	80124ac <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 801248e:	2020      	movs	r0, #32
 8012490:	f7ff fc61 	bl	8011d56 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8012494:	2020      	movs	r0, #32
 8012496:	f7ff fc81 	bl	8011d9c <LL_APB1_GRP2_ReleaseReset>
      break;
 801249a:	e007      	b.n	80124ac <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 801249c:	2040      	movs	r0, #64	; 0x40
 801249e:	f7ff fc5a 	bl	8011d56 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80124a2:	2040      	movs	r0, #64	; 0x40
 80124a4:	f7ff fc7a 	bl	8011d9c <LL_APB1_GRP2_ReleaseReset>
      break;
 80124a8:	e000      	b.n	80124ac <LPTIM_Disable+0xe4>
      break;
 80124aa:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 80124ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d106      	bne.n	80124c0 <LPTIM_Disable+0xf8>
 80124b2:	6a3b      	ldr	r3, [r7, #32]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d103      	bne.n	80124c0 <LPTIM_Disable+0xf8>
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 8096 	beq.w	80125ec <LPTIM_Disable+0x224>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	4a5a      	ldr	r2, [pc, #360]	; (8012630 <LPTIM_Disable+0x268>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d013      	beq.n	80124f2 <LPTIM_Disable+0x12a>
 80124ca:	4a59      	ldr	r2, [pc, #356]	; (8012630 <LPTIM_Disable+0x268>)
 80124cc:	4293      	cmp	r3, r2
 80124ce:	d815      	bhi.n	80124fc <LPTIM_Disable+0x134>
 80124d0:	4a58      	ldr	r2, [pc, #352]	; (8012634 <LPTIM_Disable+0x26c>)
 80124d2:	4293      	cmp	r3, r2
 80124d4:	d003      	beq.n	80124de <LPTIM_Disable+0x116>
 80124d6:	4a58      	ldr	r2, [pc, #352]	; (8012638 <LPTIM_Disable+0x270>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d005      	beq.n	80124e8 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80124dc:	e00e      	b.n	80124fc <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80124de:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80124e2:	f7ff fbfc 	bl	8011cde <LL_RCC_SetLPTIMClockSource>
        break;
 80124e6:	e00a      	b.n	80124fe <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80124e8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80124ec:	f7ff fbf7 	bl	8011cde <LL_RCC_SetLPTIMClockSource>
        break;
 80124f0:	e005      	b.n	80124fe <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 80124f2:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80124f6:	f7ff fbf2 	bl	8011cde <LL_RCC_SetLPTIMClockSource>
        break;
 80124fa:	e000      	b.n	80124fe <LPTIM_Disable+0x136>
        break;
 80124fc:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80124fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012500:	2b00      	cmp	r3, #0
 8012502:	d01a      	beq.n	801253a <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	691a      	ldr	r2, [r3, #16]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f042 0201 	orr.w	r2, r2, #1
 8012512:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801251a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 801251c:	2108      	movs	r1, #8
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f7ff ff22 	bl	8012368 <LPTIM_WaitForFlag>
 8012524:	4603      	mov	r3, r0
 8012526:	2b03      	cmp	r3, #3
 8012528:	d103      	bne.n	8012532 <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2203      	movs	r2, #3
 801252e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2208      	movs	r2, #8
 8012538:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 801253a:	6a3b      	ldr	r3, [r7, #32]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d01a      	beq.n	8012576 <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	691a      	ldr	r2, [r3, #16]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	f042 0201 	orr.w	r2, r2, #1
 801254e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	6a3a      	ldr	r2, [r7, #32]
 8012556:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8012558:	2110      	movs	r1, #16
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f7ff ff04 	bl	8012368 <LPTIM_WaitForFlag>
 8012560:	4603      	mov	r3, r0
 8012562:	2b03      	cmp	r3, #3
 8012564:	d103      	bne.n	801256e <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2203      	movs	r2, #3
 801256a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	2210      	movs	r2, #16
 8012574:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d01c      	beq.n	80125b6 <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	691a      	ldr	r2, [r3, #16]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f042 0201 	orr.w	r2, r2, #1
 801258a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	69ba      	ldr	r2, [r7, #24]
 8012592:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8012594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f7ff fee5 	bl	8012368 <LPTIM_WaitForFlag>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b03      	cmp	r3, #3
 80125a2:	d103      	bne.n	80125ac <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2203      	movs	r2, #3
 80125a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80125b4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4a1d      	ldr	r2, [pc, #116]	; (8012630 <LPTIM_Disable+0x268>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d011      	beq.n	80125e4 <LPTIM_Disable+0x21c>
 80125c0:	4a1b      	ldr	r2, [pc, #108]	; (8012630 <LPTIM_Disable+0x268>)
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d814      	bhi.n	80125f0 <LPTIM_Disable+0x228>
 80125c6:	4a1b      	ldr	r2, [pc, #108]	; (8012634 <LPTIM_Disable+0x26c>)
 80125c8:	4293      	cmp	r3, r2
 80125ca:	d003      	beq.n	80125d4 <LPTIM_Disable+0x20c>
 80125cc:	4a1a      	ldr	r2, [pc, #104]	; (8012638 <LPTIM_Disable+0x270>)
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d004      	beq.n	80125dc <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 80125d2:	e00d      	b.n	80125f0 <LPTIM_Disable+0x228>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80125d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80125d6:	f7ff fb82 	bl	8011cde <LL_RCC_SetLPTIMClockSource>
        break;
 80125da:	e00a      	b.n	80125f2 <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80125dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80125de:	f7ff fb7e 	bl	8011cde <LL_RCC_SetLPTIMClockSource>
        break;
 80125e2:	e006      	b.n	80125f2 <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80125e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80125e6:	f7ff fb7a 	bl	8011cde <LL_RCC_SetLPTIMClockSource>
        break;
 80125ea:	e002      	b.n	80125f2 <LPTIM_Disable+0x22a>
    }
  }
 80125ec:	bf00      	nop
 80125ee:	e000      	b.n	80125f2 <LPTIM_Disable+0x22a>
        break;
 80125f0:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	691a      	ldr	r2, [r3, #16]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f022 0201 	bic.w	r2, r2, #1
 8012600:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012608:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012610:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	69fa      	ldr	r2, [r7, #28]
 8012618:	621a      	str	r2, [r3, #32]
 801261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	f383 8810 	msr	PRIMASK, r3
}
 8012624:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8012626:	bf00      	nop
 8012628:	3738      	adds	r7, #56	; 0x38
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	40009800 	.word	0x40009800
 8012634:	40007c00 	.word	0x40007c00
 8012638:	40009400 	.word	0x40009400

0801263c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801263c:	b480      	push	{r7}
 801263e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012640:	4b04      	ldr	r3, [pc, #16]	; (8012654 <HAL_PWR_EnableBkUpAccess+0x18>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	4a03      	ldr	r2, [pc, #12]	; (8012654 <HAL_PWR_EnableBkUpAccess+0x18>)
 8012646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801264a:	6013      	str	r3, [r2, #0]
}
 801264c:	bf00      	nop
 801264e:	46bd      	mov	sp, r7
 8012650:	bc80      	pop	{r7}
 8012652:	4770      	bx	lr
 8012654:	58000400 	.word	0x58000400

08012658 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8012658:	b480      	push	{r7}
 801265a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 801265c:	4b03      	ldr	r3, [pc, #12]	; (801266c <HAL_PWREx_GetVoltageRange+0x14>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8012664:	4618      	mov	r0, r3
 8012666:	46bd      	mov	sp, r7
 8012668:	bc80      	pop	{r7}
 801266a:	4770      	bx	lr
 801266c:	58000400 	.word	0x58000400

08012670 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8012670:	b480      	push	{r7}
 8012672:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8012674:	4b06      	ldr	r3, [pc, #24]	; (8012690 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801267c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012680:	d101      	bne.n	8012686 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8012682:	2301      	movs	r3, #1
 8012684:	e000      	b.n	8012688 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	46bd      	mov	sp, r7
 801268c:	bc80      	pop	{r7}
 801268e:	4770      	bx	lr
 8012690:	58000400 	.word	0x58000400

08012694 <LL_RCC_HSE_EnableTcxo>:
{
 8012694:	b480      	push	{r7}
 8012696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8012698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80126a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80126a6:	6013      	str	r3, [r2, #0]
}
 80126a8:	bf00      	nop
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bc80      	pop	{r7}
 80126ae:	4770      	bx	lr

080126b0 <LL_RCC_HSE_DisableTcxo>:
{
 80126b0:	b480      	push	{r7}
 80126b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80126b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80126be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80126c2:	6013      	str	r3, [r2, #0]
}
 80126c4:	bf00      	nop
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bc80      	pop	{r7}
 80126ca:	4770      	bx	lr

080126cc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80126cc:	b480      	push	{r7}
 80126ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80126d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80126de:	d101      	bne.n	80126e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80126e0:	2301      	movs	r3, #1
 80126e2:	e000      	b.n	80126e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80126e4:	2300      	movs	r3, #0
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bc80      	pop	{r7}
 80126ec:	4770      	bx	lr

080126ee <LL_RCC_HSE_Enable>:
{
 80126ee:	b480      	push	{r7}
 80126f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80126f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80126fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012700:	6013      	str	r3, [r2, #0]
}
 8012702:	bf00      	nop
 8012704:	46bd      	mov	sp, r7
 8012706:	bc80      	pop	{r7}
 8012708:	4770      	bx	lr

0801270a <LL_RCC_HSE_Disable>:
{
 801270a:	b480      	push	{r7}
 801270c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801271c:	6013      	str	r3, [r2, #0]
}
 801271e:	bf00      	nop
 8012720:	46bd      	mov	sp, r7
 8012722:	bc80      	pop	{r7}
 8012724:	4770      	bx	lr

08012726 <LL_RCC_HSE_IsReady>:
{
 8012726:	b480      	push	{r7}
 8012728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012738:	d101      	bne.n	801273e <LL_RCC_HSE_IsReady+0x18>
 801273a:	2301      	movs	r3, #1
 801273c:	e000      	b.n	8012740 <LL_RCC_HSE_IsReady+0x1a>
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	46bd      	mov	sp, r7
 8012744:	bc80      	pop	{r7}
 8012746:	4770      	bx	lr

08012748 <LL_RCC_HSI_Enable>:
{
 8012748:	b480      	push	{r7}
 801274a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801274c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801275a:	6013      	str	r3, [r2, #0]
}
 801275c:	bf00      	nop
 801275e:	46bd      	mov	sp, r7
 8012760:	bc80      	pop	{r7}
 8012762:	4770      	bx	lr

08012764 <LL_RCC_HSI_Disable>:
{
 8012764:	b480      	push	{r7}
 8012766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8012768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012776:	6013      	str	r3, [r2, #0]
}
 8012778:	bf00      	nop
 801277a:	46bd      	mov	sp, r7
 801277c:	bc80      	pop	{r7}
 801277e:	4770      	bx	lr

08012780 <LL_RCC_HSI_IsReady>:
{
 8012780:	b480      	push	{r7}
 8012782:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8012784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012792:	d101      	bne.n	8012798 <LL_RCC_HSI_IsReady+0x18>
 8012794:	2301      	movs	r3, #1
 8012796:	e000      	b.n	801279a <LL_RCC_HSI_IsReady+0x1a>
 8012798:	2300      	movs	r3, #0
}
 801279a:	4618      	mov	r0, r3
 801279c:	46bd      	mov	sp, r7
 801279e:	bc80      	pop	{r7}
 80127a0:	4770      	bx	lr

080127a2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80127a2:	b480      	push	{r7}
 80127a4:	b083      	sub	sp, #12
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80127aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	061b      	lsls	r3, r3, #24
 80127b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80127bc:	4313      	orrs	r3, r2
 80127be:	604b      	str	r3, [r1, #4]
}
 80127c0:	bf00      	nop
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bc80      	pop	{r7}
 80127c8:	4770      	bx	lr

080127ca <LL_RCC_LSE_IsReady>:
{
 80127ca:	b480      	push	{r7}
 80127cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80127ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80127d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127d6:	f003 0302 	and.w	r3, r3, #2
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d101      	bne.n	80127e2 <LL_RCC_LSE_IsReady+0x18>
 80127de:	2301      	movs	r3, #1
 80127e0:	e000      	b.n	80127e4 <LL_RCC_LSE_IsReady+0x1a>
 80127e2:	2300      	movs	r3, #0
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bc80      	pop	{r7}
 80127ea:	4770      	bx	lr

080127ec <LL_RCC_LSI_Enable>:
{
 80127ec:	b480      	push	{r7}
 80127ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80127f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80127f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80127f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80127fc:	f043 0301 	orr.w	r3, r3, #1
 8012800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8012804:	bf00      	nop
 8012806:	46bd      	mov	sp, r7
 8012808:	bc80      	pop	{r7}
 801280a:	4770      	bx	lr

0801280c <LL_RCC_LSI_Disable>:
{
 801280c:	b480      	push	{r7}
 801280e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8012810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801281c:	f023 0301 	bic.w	r3, r3, #1
 8012820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8012824:	bf00      	nop
 8012826:	46bd      	mov	sp, r7
 8012828:	bc80      	pop	{r7}
 801282a:	4770      	bx	lr

0801282c <LL_RCC_LSI_IsReady>:
{
 801282c:	b480      	push	{r7}
 801282e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8012830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012838:	f003 0302 	and.w	r3, r3, #2
 801283c:	2b02      	cmp	r3, #2
 801283e:	d101      	bne.n	8012844 <LL_RCC_LSI_IsReady+0x18>
 8012840:	2301      	movs	r3, #1
 8012842:	e000      	b.n	8012846 <LL_RCC_LSI_IsReady+0x1a>
 8012844:	2300      	movs	r3, #0
}
 8012846:	4618      	mov	r0, r3
 8012848:	46bd      	mov	sp, r7
 801284a:	bc80      	pop	{r7}
 801284c:	4770      	bx	lr

0801284e <LL_RCC_MSI_Enable>:
{
 801284e:	b480      	push	{r7}
 8012850:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8012852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801285c:	f043 0301 	orr.w	r3, r3, #1
 8012860:	6013      	str	r3, [r2, #0]
}
 8012862:	bf00      	nop
 8012864:	46bd      	mov	sp, r7
 8012866:	bc80      	pop	{r7}
 8012868:	4770      	bx	lr

0801286a <LL_RCC_MSI_Disable>:
{
 801286a:	b480      	push	{r7}
 801286c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801286e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012878:	f023 0301 	bic.w	r3, r3, #1
 801287c:	6013      	str	r3, [r2, #0]
}
 801287e:	bf00      	nop
 8012880:	46bd      	mov	sp, r7
 8012882:	bc80      	pop	{r7}
 8012884:	4770      	bx	lr

08012886 <LL_RCC_MSI_IsReady>:
{
 8012886:	b480      	push	{r7}
 8012888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 801288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	f003 0302 	and.w	r3, r3, #2
 8012894:	2b02      	cmp	r3, #2
 8012896:	d101      	bne.n	801289c <LL_RCC_MSI_IsReady+0x16>
 8012898:	2301      	movs	r3, #1
 801289a:	e000      	b.n	801289e <LL_RCC_MSI_IsReady+0x18>
 801289c:	2300      	movs	r3, #0
}
 801289e:	4618      	mov	r0, r3
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bc80      	pop	{r7}
 80128a4:	4770      	bx	lr

080128a6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80128a6:	b480      	push	{r7}
 80128a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80128aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f003 0308 	and.w	r3, r3, #8
 80128b4:	2b08      	cmp	r3, #8
 80128b6:	d101      	bne.n	80128bc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80128b8:	2301      	movs	r3, #1
 80128ba:	e000      	b.n	80128be <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80128bc:	2300      	movs	r3, #0
}
 80128be:	4618      	mov	r0, r3
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bc80      	pop	{r7}
 80128c4:	4770      	bx	lr

080128c6 <LL_RCC_MSI_GetRange>:
{
 80128c6:	b480      	push	{r7}
 80128c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80128ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bc80      	pop	{r7}
 80128da:	4770      	bx	lr

080128dc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80128e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80128e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80128e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bc80      	pop	{r7}
 80128f2:	4770      	bx	lr

080128f4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80128fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	021b      	lsls	r3, r3, #8
 801290a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801290e:	4313      	orrs	r3, r2
 8012910:	604b      	str	r3, [r1, #4]
}
 8012912:	bf00      	nop
 8012914:	370c      	adds	r7, #12
 8012916:	46bd      	mov	sp, r7
 8012918:	bc80      	pop	{r7}
 801291a:	4770      	bx	lr

0801291c <LL_RCC_SetSysClkSource>:
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8012924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	f023 0203 	bic.w	r2, r3, #3
 801292e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	4313      	orrs	r3, r2
 8012936:	608b      	str	r3, [r1, #8]
}
 8012938:	bf00      	nop
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	bc80      	pop	{r7}
 8012940:	4770      	bx	lr

08012942 <LL_RCC_GetSysClkSource>:
{
 8012942:	b480      	push	{r7}
 8012944:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8012946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	f003 030c 	and.w	r3, r3, #12
}
 8012950:	4618      	mov	r0, r3
 8012952:	46bd      	mov	sp, r7
 8012954:	bc80      	pop	{r7}
 8012956:	4770      	bx	lr

08012958 <LL_RCC_SetAHBPrescaler>:
{
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8012960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801296a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4313      	orrs	r3, r2
 8012972:	608b      	str	r3, [r1, #8]
}
 8012974:	bf00      	nop
 8012976:	370c      	adds	r7, #12
 8012978:	46bd      	mov	sp, r7
 801297a:	bc80      	pop	{r7}
 801297c:	4770      	bx	lr

0801297e <LL_RCC_SetAHB3Prescaler>:
{
 801297e:	b480      	push	{r7}
 8012980:	b083      	sub	sp, #12
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8012986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801298a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801298e:	f023 020f 	bic.w	r2, r3, #15
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	091b      	lsrs	r3, r3, #4
 8012996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801299a:	4313      	orrs	r3, r2
 801299c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80129a0:	bf00      	nop
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bc80      	pop	{r7}
 80129a8:	4770      	bx	lr

080129aa <LL_RCC_SetAPB1Prescaler>:
{
 80129aa:	b480      	push	{r7}
 80129ac:	b083      	sub	sp, #12
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80129b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129b6:	689b      	ldr	r3, [r3, #8]
 80129b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80129bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4313      	orrs	r3, r2
 80129c4:	608b      	str	r3, [r1, #8]
}
 80129c6:	bf00      	nop
 80129c8:	370c      	adds	r7, #12
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bc80      	pop	{r7}
 80129ce:	4770      	bx	lr

080129d0 <LL_RCC_SetAPB2Prescaler>:
{
 80129d0:	b480      	push	{r7}
 80129d2:	b083      	sub	sp, #12
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80129d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129dc:	689b      	ldr	r3, [r3, #8]
 80129de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80129e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	4313      	orrs	r3, r2
 80129ea:	608b      	str	r3, [r1, #8]
}
 80129ec:	bf00      	nop
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bc80      	pop	{r7}
 80129f4:	4770      	bx	lr

080129f6 <LL_RCC_GetAHBPrescaler>:
{
 80129f6:	b480      	push	{r7}
 80129f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80129fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129fe:	689b      	ldr	r3, [r3, #8]
 8012a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bc80      	pop	{r7}
 8012a0a:	4770      	bx	lr

08012a0c <LL_RCC_GetAHB3Prescaler>:
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8012a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8012a18:	011b      	lsls	r3, r3, #4
 8012a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bc80      	pop	{r7}
 8012a24:	4770      	bx	lr

08012a26 <LL_RCC_GetAPB1Prescaler>:
{
 8012a26:	b480      	push	{r7}
 8012a28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8012a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a2e:	689b      	ldr	r3, [r3, #8]
 8012a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bc80      	pop	{r7}
 8012a3a:	4770      	bx	lr

08012a3c <LL_RCC_GetAPB2Prescaler>:
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8012a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a44:	689b      	ldr	r3, [r3, #8]
 8012a46:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bc80      	pop	{r7}
 8012a50:	4770      	bx	lr

08012a52 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8012a52:	b480      	push	{r7}
 8012a54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8012a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a64:	6013      	str	r3, [r2, #0]
}
 8012a66:	bf00      	nop
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bc80      	pop	{r7}
 8012a6c:	4770      	bx	lr

08012a6e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8012a6e:	b480      	push	{r7}
 8012a70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8012a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012a80:	6013      	str	r3, [r2, #0]
}
 8012a82:	bf00      	nop
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bc80      	pop	{r7}
 8012a88:	4770      	bx	lr

08012a8a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8012a8a:	b480      	push	{r7}
 8012a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8012a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012a9c:	d101      	bne.n	8012aa2 <LL_RCC_PLL_IsReady+0x18>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e000      	b.n	8012aa4 <LL_RCC_PLL_IsReady+0x1a>
 8012aa2:	2300      	movs	r3, #0
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bc80      	pop	{r7}
 8012aaa:	4770      	bx	lr

08012aac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8012aac:	b480      	push	{r7}
 8012aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8012ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012ab4:	68db      	ldr	r3, [r3, #12]
 8012ab6:	0a1b      	lsrs	r3, r3, #8
 8012ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bc80      	pop	{r7}
 8012ac2:	4770      	bx	lr

08012ac4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8012ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bc80      	pop	{r7}
 8012ad8:	4770      	bx	lr

08012ada <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8012ada:	b480      	push	{r7}
 8012adc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8012ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bc80      	pop	{r7}
 8012aee:	4770      	bx	lr

08012af0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8012af0:	b480      	push	{r7}
 8012af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8012af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	f003 0303 	and.w	r3, r3, #3
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bc80      	pop	{r7}
 8012b04:	4770      	bx	lr

08012b06 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8012b06:	b480      	push	{r7}
 8012b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8012b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b18:	d101      	bne.n	8012b1e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e000      	b.n	8012b20 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8012b1e:	2300      	movs	r3, #0
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bc80      	pop	{r7}
 8012b26:	4770      	bx	lr

08012b28 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8012b28:	b480      	push	{r7}
 8012b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8012b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8012b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b3c:	d101      	bne.n	8012b42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8012b3e:	2301      	movs	r3, #1
 8012b40:	e000      	b.n	8012b44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8012b42:	2300      	movs	r3, #0
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bc80      	pop	{r7}
 8012b4a:	4770      	bx	lr

08012b4c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8012b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b54:	689b      	ldr	r3, [r3, #8]
 8012b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012b5e:	d101      	bne.n	8012b64 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8012b60:	2301      	movs	r3, #1
 8012b62:	e000      	b.n	8012b66 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8012b64:	2300      	movs	r3, #0
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bc80      	pop	{r7}
 8012b6c:	4770      	bx	lr

08012b6e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8012b6e:	b480      	push	{r7}
 8012b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8012b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012b80:	d101      	bne.n	8012b86 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8012b82:	2301      	movs	r3, #1
 8012b84:	e000      	b.n	8012b88 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8012b86:	2300      	movs	r3, #0
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bc80      	pop	{r7}
 8012b8e:	4770      	bx	lr

08012b90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b088      	sub	sp, #32
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d101      	bne.n	8012ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	e36f      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012ba2:	f7ff fece 	bl	8012942 <LL_RCC_GetSysClkSource>
 8012ba6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012ba8:	f7ff ffa2 	bl	8012af0 <LL_RCC_PLL_GetMainSource>
 8012bac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	f003 0320 	and.w	r3, r3, #32
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	f000 80c4 	beq.w	8012d44 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8012bbc:	69fb      	ldr	r3, [r7, #28]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d005      	beq.n	8012bce <HAL_RCC_OscConfig+0x3e>
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	2b0c      	cmp	r3, #12
 8012bc6:	d176      	bne.n	8012cb6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8012bc8:	69bb      	ldr	r3, [r7, #24]
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d173      	bne.n	8012cb6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6a1b      	ldr	r3, [r3, #32]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d101      	bne.n	8012bda <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e353      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	f003 0308 	and.w	r3, r3, #8
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <HAL_RCC_OscConfig+0x68>
 8012bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012bf6:	e006      	b.n	8012c06 <HAL_RCC_OscConfig+0x76>
 8012bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012c00:	091b      	lsrs	r3, r3, #4
 8012c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d222      	bcs.n	8012c50 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f000 fd3c 	bl	801368c <RCC_SetFlashLatencyFromMSIRange>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	e331      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012c28:	f043 0308 	orr.w	r3, r3, #8
 8012c2c:	6013      	str	r3, [r2, #0]
 8012c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012c40:	4313      	orrs	r3, r2
 8012c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff fe53 	bl	80128f4 <LL_RCC_MSI_SetCalibTrimming>
 8012c4e:	e021      	b.n	8012c94 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012c5a:	f043 0308 	orr.w	r3, r3, #8
 8012c5e:	6013      	str	r3, [r2, #0]
 8012c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012c72:	4313      	orrs	r3, r2
 8012c74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ff fe3a 	bl	80128f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c84:	4618      	mov	r0, r3
 8012c86:	f000 fd01 	bl	801368c <RCC_SetFlashLatencyFromMSIRange>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d001      	beq.n	8012c94 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8012c90:	2301      	movs	r3, #1
 8012c92:	e2f6      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8012c94:	f000 fcc2 	bl	801361c <HAL_RCC_GetHCLKFreq>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	4aa7      	ldr	r2, [pc, #668]	; (8012f38 <HAL_RCC_OscConfig+0x3a8>)
 8012c9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8012c9e:	4ba7      	ldr	r3, [pc, #668]	; (8012f3c <HAL_RCC_OscConfig+0x3ac>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7fd f8c4 	bl	800fe30 <HAL_InitTick>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8012cac:	7cfb      	ldrb	r3, [r7, #19]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d047      	beq.n	8012d42 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8012cb2:	7cfb      	ldrb	r3, [r7, #19]
 8012cb4:	e2e5      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6a1b      	ldr	r3, [r3, #32]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d02c      	beq.n	8012d18 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8012cbe:	f7ff fdc6 	bl	801284e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012cc2:	f7fd f901 	bl	800fec8 <HAL_GetTick>
 8012cc6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8012cc8:	e008      	b.n	8012cdc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8012cca:	f7fd f8fd 	bl	800fec8 <HAL_GetTick>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	1ad3      	subs	r3, r2, r3
 8012cd4:	2b02      	cmp	r3, #2
 8012cd6:	d901      	bls.n	8012cdc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8012cd8:	2303      	movs	r3, #3
 8012cda:	e2d2      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8012cdc:	f7ff fdd3 	bl	8012886 <LL_RCC_MSI_IsReady>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d0f1      	beq.n	8012cca <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012cf0:	f043 0308 	orr.w	r3, r3, #8
 8012cf4:	6013      	str	r3, [r2, #0]
 8012cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012d08:	4313      	orrs	r3, r2
 8012d0a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7ff fdef 	bl	80128f4 <LL_RCC_MSI_SetCalibTrimming>
 8012d16:	e015      	b.n	8012d44 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8012d18:	f7ff fda7 	bl	801286a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012d1c:	f7fd f8d4 	bl	800fec8 <HAL_GetTick>
 8012d20:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8012d22:	e008      	b.n	8012d36 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8012d24:	f7fd f8d0 	bl	800fec8 <HAL_GetTick>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	2b02      	cmp	r3, #2
 8012d30:	d901      	bls.n	8012d36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8012d32:	2303      	movs	r3, #3
 8012d34:	e2a5      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8012d36:	f7ff fda6 	bl	8012886 <LL_RCC_MSI_IsReady>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d1f1      	bne.n	8012d24 <HAL_RCC_OscConfig+0x194>
 8012d40:	e000      	b.n	8012d44 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8012d42:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d058      	beq.n	8012e02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	2b08      	cmp	r3, #8
 8012d54:	d005      	beq.n	8012d62 <HAL_RCC_OscConfig+0x1d2>
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	2b0c      	cmp	r3, #12
 8012d5a:	d108      	bne.n	8012d6e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8012d5c:	69bb      	ldr	r3, [r7, #24]
 8012d5e:	2b03      	cmp	r3, #3
 8012d60:	d105      	bne.n	8012d6e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d14b      	bne.n	8012e02 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e289      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8012d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	689b      	ldr	r3, [r3, #8]
 8012d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012d80:	4313      	orrs	r3, r2
 8012d82:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d8c:	d102      	bne.n	8012d94 <HAL_RCC_OscConfig+0x204>
 8012d8e:	f7ff fcae 	bl	80126ee <LL_RCC_HSE_Enable>
 8012d92:	e00d      	b.n	8012db0 <HAL_RCC_OscConfig+0x220>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	685b      	ldr	r3, [r3, #4]
 8012d98:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8012d9c:	d104      	bne.n	8012da8 <HAL_RCC_OscConfig+0x218>
 8012d9e:	f7ff fc79 	bl	8012694 <LL_RCC_HSE_EnableTcxo>
 8012da2:	f7ff fca4 	bl	80126ee <LL_RCC_HSE_Enable>
 8012da6:	e003      	b.n	8012db0 <HAL_RCC_OscConfig+0x220>
 8012da8:	f7ff fcaf 	bl	801270a <LL_RCC_HSE_Disable>
 8012dac:	f7ff fc80 	bl	80126b0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d012      	beq.n	8012dde <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012db8:	f7fd f886 	bl	800fec8 <HAL_GetTick>
 8012dbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8012dbe:	e008      	b.n	8012dd2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012dc0:	f7fd f882 	bl	800fec8 <HAL_GetTick>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	1ad3      	subs	r3, r2, r3
 8012dca:	2b64      	cmp	r3, #100	; 0x64
 8012dcc:	d901      	bls.n	8012dd2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8012dce:	2303      	movs	r3, #3
 8012dd0:	e257      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8012dd2:	f7ff fca8 	bl	8012726 <LL_RCC_HSE_IsReady>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d0f1      	beq.n	8012dc0 <HAL_RCC_OscConfig+0x230>
 8012ddc:	e011      	b.n	8012e02 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012dde:	f7fd f873 	bl	800fec8 <HAL_GetTick>
 8012de2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8012de4:	e008      	b.n	8012df8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012de6:	f7fd f86f 	bl	800fec8 <HAL_GetTick>
 8012dea:	4602      	mov	r2, r0
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	1ad3      	subs	r3, r2, r3
 8012df0:	2b64      	cmp	r3, #100	; 0x64
 8012df2:	d901      	bls.n	8012df8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8012df4:	2303      	movs	r3, #3
 8012df6:	e244      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8012df8:	f7ff fc95 	bl	8012726 <LL_RCC_HSE_IsReady>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d1f1      	bne.n	8012de6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f003 0302 	and.w	r3, r3, #2
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d046      	beq.n	8012e9c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	2b04      	cmp	r3, #4
 8012e12:	d005      	beq.n	8012e20 <HAL_RCC_OscConfig+0x290>
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	2b0c      	cmp	r3, #12
 8012e18:	d10e      	bne.n	8012e38 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	2b02      	cmp	r3, #2
 8012e1e:	d10b      	bne.n	8012e38 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	691b      	ldr	r3, [r3, #16]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d101      	bne.n	8012e2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	e22a      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	695b      	ldr	r3, [r3, #20]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff fcb6 	bl	80127a2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8012e36:	e031      	b.n	8012e9c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	691b      	ldr	r3, [r3, #16]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d019      	beq.n	8012e74 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012e40:	f7ff fc82 	bl	8012748 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e44:	f7fd f840 	bl	800fec8 <HAL_GetTick>
 8012e48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8012e4a:	e008      	b.n	8012e5e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012e4c:	f7fd f83c 	bl	800fec8 <HAL_GetTick>
 8012e50:	4602      	mov	r2, r0
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	2b02      	cmp	r3, #2
 8012e58:	d901      	bls.n	8012e5e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	e211      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8012e5e:	f7ff fc8f 	bl	8012780 <LL_RCC_HSI_IsReady>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d0f1      	beq.n	8012e4c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	695b      	ldr	r3, [r3, #20]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7ff fc98 	bl	80127a2 <LL_RCC_HSI_SetCalibTrimming>
 8012e72:	e013      	b.n	8012e9c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012e74:	f7ff fc76 	bl	8012764 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e78:	f7fd f826 	bl	800fec8 <HAL_GetTick>
 8012e7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8012e7e:	e008      	b.n	8012e92 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012e80:	f7fd f822 	bl	800fec8 <HAL_GetTick>
 8012e84:	4602      	mov	r2, r0
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	1ad3      	subs	r3, r2, r3
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d901      	bls.n	8012e92 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8012e8e:	2303      	movs	r3, #3
 8012e90:	e1f7      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8012e92:	f7ff fc75 	bl	8012780 <LL_RCC_HSI_IsReady>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d1f1      	bne.n	8012e80 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f003 0308 	and.w	r3, r3, #8
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d06e      	beq.n	8012f86 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	699b      	ldr	r3, [r3, #24]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d056      	beq.n	8012f5e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8012eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012eb8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	69da      	ldr	r2, [r3, #28]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f003 0310 	and.w	r3, r3, #16
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d031      	beq.n	8012f2c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f003 0302 	and.w	r3, r3, #2
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d006      	beq.n	8012ee0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8012edc:	2301      	movs	r3, #1
 8012ede:	e1d0      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	f003 0301 	and.w	r3, r3, #1
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d013      	beq.n	8012f12 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8012eea:	f7ff fc8f 	bl	801280c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012eee:	f7fc ffeb 	bl	800fec8 <HAL_GetTick>
 8012ef2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8012ef4:	e008      	b.n	8012f08 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012ef6:	f7fc ffe7 	bl	800fec8 <HAL_GetTick>
 8012efa:	4602      	mov	r2, r0
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	2b11      	cmp	r3, #17
 8012f02:	d901      	bls.n	8012f08 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8012f04:	2303      	movs	r3, #3
 8012f06:	e1bc      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8012f08:	f7ff fc90 	bl	801282c <LL_RCC_LSI_IsReady>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d1f1      	bne.n	8012ef6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8012f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012f1a:	f023 0210 	bic.w	r2, r3, #16
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	69db      	ldr	r3, [r3, #28]
 8012f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012f26:	4313      	orrs	r3, r2
 8012f28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012f2c:	f7ff fc5e 	bl	80127ec <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012f30:	f7fc ffca 	bl	800fec8 <HAL_GetTick>
 8012f34:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8012f36:	e00c      	b.n	8012f52 <HAL_RCC_OscConfig+0x3c2>
 8012f38:	20000428 	.word	0x20000428
 8012f3c:	20000654 	.word	0x20000654
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012f40:	f7fc ffc2 	bl	800fec8 <HAL_GetTick>
 8012f44:	4602      	mov	r2, r0
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	1ad3      	subs	r3, r2, r3
 8012f4a:	2b11      	cmp	r3, #17
 8012f4c:	d901      	bls.n	8012f52 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8012f4e:	2303      	movs	r3, #3
 8012f50:	e197      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8012f52:	f7ff fc6b 	bl	801282c <LL_RCC_LSI_IsReady>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d0f1      	beq.n	8012f40 <HAL_RCC_OscConfig+0x3b0>
 8012f5c:	e013      	b.n	8012f86 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012f5e:	f7ff fc55 	bl	801280c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012f62:	f7fc ffb1 	bl	800fec8 <HAL_GetTick>
 8012f66:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8012f68:	e008      	b.n	8012f7c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012f6a:	f7fc ffad 	bl	800fec8 <HAL_GetTick>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	1ad3      	subs	r3, r2, r3
 8012f74:	2b11      	cmp	r3, #17
 8012f76:	d901      	bls.n	8012f7c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8012f78:	2303      	movs	r3, #3
 8012f7a:	e182      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8012f7c:	f7ff fc56 	bl	801282c <LL_RCC_LSI_IsReady>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d1f1      	bne.n	8012f6a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	f003 0304 	and.w	r3, r3, #4
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	f000 80d8 	beq.w	8013144 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8012f94:	f7ff fb6c 	bl	8012670 <LL_PWR_IsEnabledBkUpAccess>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d113      	bne.n	8012fc6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8012f9e:	f7ff fb4d 	bl	801263c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012fa2:	f7fc ff91 	bl	800fec8 <HAL_GetTick>
 8012fa6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8012fa8:	e008      	b.n	8012fbc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012faa:	f7fc ff8d 	bl	800fec8 <HAL_GetTick>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	1ad3      	subs	r3, r2, r3
 8012fb4:	2b02      	cmp	r3, #2
 8012fb6:	d901      	bls.n	8012fbc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8012fb8:	2303      	movs	r3, #3
 8012fba:	e162      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8012fbc:	f7ff fb58 	bl	8012670 <LL_PWR_IsEnabledBkUpAccess>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d0f1      	beq.n	8012faa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d07b      	beq.n	80130c6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	2b85      	cmp	r3, #133	; 0x85
 8012fd4:	d003      	beq.n	8012fde <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	68db      	ldr	r3, [r3, #12]
 8012fda:	2b05      	cmp	r3, #5
 8012fdc:	d109      	bne.n	8012ff2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8012fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8012fea:	f043 0304 	orr.w	r3, r3, #4
 8012fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012ff2:	f7fc ff69 	bl	800fec8 <HAL_GetTick>
 8012ff6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8012ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013004:	f043 0301 	orr.w	r3, r3, #1
 8013008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801300c:	e00a      	b.n	8013024 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801300e:	f7fc ff5b 	bl	800fec8 <HAL_GetTick>
 8013012:	4602      	mov	r2, r0
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	1ad3      	subs	r3, r2, r3
 8013018:	f241 3288 	movw	r2, #5000	; 0x1388
 801301c:	4293      	cmp	r3, r2
 801301e:	d901      	bls.n	8013024 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8013020:	2303      	movs	r3, #3
 8013022:	e12e      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8013024:	f7ff fbd1 	bl	80127ca <LL_RCC_LSE_IsReady>
 8013028:	4603      	mov	r3, r0
 801302a:	2b00      	cmp	r3, #0
 801302c:	d0ef      	beq.n	801300e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	68db      	ldr	r3, [r3, #12]
 8013032:	2b81      	cmp	r3, #129	; 0x81
 8013034:	d003      	beq.n	801303e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	2b85      	cmp	r3, #133	; 0x85
 801303c:	d121      	bne.n	8013082 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801303e:	f7fc ff43 	bl	800fec8 <HAL_GetTick>
 8013042:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801304c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013058:	e00a      	b.n	8013070 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801305a:	f7fc ff35 	bl	800fec8 <HAL_GetTick>
 801305e:	4602      	mov	r2, r0
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	f241 3288 	movw	r2, #5000	; 0x1388
 8013068:	4293      	cmp	r3, r2
 801306a:	d901      	bls.n	8013070 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 801306c:	2303      	movs	r3, #3
 801306e:	e108      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801307c:	2b00      	cmp	r3, #0
 801307e:	d0ec      	beq.n	801305a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8013080:	e060      	b.n	8013144 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013082:	f7fc ff21 	bl	800fec8 <HAL_GetTick>
 8013086:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801309c:	e00a      	b.n	80130b4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801309e:	f7fc ff13 	bl	800fec8 <HAL_GetTick>
 80130a2:	4602      	mov	r2, r0
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	1ad3      	subs	r3, r2, r3
 80130a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80130ac:	4293      	cmp	r3, r2
 80130ae:	d901      	bls.n	80130b4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80130b0:	2303      	movs	r3, #3
 80130b2:	e0e6      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80130b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d1ec      	bne.n	801309e <HAL_RCC_OscConfig+0x50e>
 80130c4:	e03e      	b.n	8013144 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80130c6:	f7fc feff 	bl	800fec8 <HAL_GetTick>
 80130ca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80130cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80130d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80130e0:	e00a      	b.n	80130f8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80130e2:	f7fc fef1 	bl	800fec8 <HAL_GetTick>
 80130e6:	4602      	mov	r2, r0
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80130f0:	4293      	cmp	r3, r2
 80130f2:	d901      	bls.n	80130f8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80130f4:	2303      	movs	r3, #3
 80130f6:	e0c4      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80130f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1ec      	bne.n	80130e2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013108:	f7fc fede 	bl	800fec8 <HAL_GetTick>
 801310c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801310e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801311a:	f023 0301 	bic.w	r3, r3, #1
 801311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8013122:	e00a      	b.n	801313a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013124:	f7fc fed0 	bl	800fec8 <HAL_GetTick>
 8013128:	4602      	mov	r2, r0
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	1ad3      	subs	r3, r2, r3
 801312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013132:	4293      	cmp	r3, r2
 8013134:	d901      	bls.n	801313a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8013136:	2303      	movs	r3, #3
 8013138:	e0a3      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 801313a:	f7ff fb46 	bl	80127ca <LL_RCC_LSE_IsReady>
 801313e:	4603      	mov	r3, r0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d1ef      	bne.n	8013124 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013148:	2b00      	cmp	r3, #0
 801314a:	f000 8099 	beq.w	8013280 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	2b0c      	cmp	r3, #12
 8013152:	d06c      	beq.n	801322e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013158:	2b02      	cmp	r3, #2
 801315a:	d14b      	bne.n	80131f4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801315c:	f7ff fc87 	bl	8012a6e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013160:	f7fc feb2 	bl	800fec8 <HAL_GetTick>
 8013164:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8013166:	e008      	b.n	801317a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013168:	f7fc feae 	bl	800fec8 <HAL_GetTick>
 801316c:	4602      	mov	r2, r0
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	1ad3      	subs	r3, r2, r3
 8013172:	2b0a      	cmp	r3, #10
 8013174:	d901      	bls.n	801317a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8013176:	2303      	movs	r3, #3
 8013178:	e083      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 801317a:	f7ff fc86 	bl	8012a8a <LL_RCC_PLL_IsReady>
 801317e:	4603      	mov	r3, r0
 8013180:	2b00      	cmp	r3, #0
 8013182:	d1f1      	bne.n	8013168 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013188:	68da      	ldr	r2, [r3, #12]
 801318a:	4b40      	ldr	r3, [pc, #256]	; (801328c <HAL_RCC_OscConfig+0x6fc>)
 801318c:	4013      	ands	r3, r2
 801318e:	687a      	ldr	r2, [r7, #4]
 8013190:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013196:	4311      	orrs	r1, r2
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801319c:	0212      	lsls	r2, r2, #8
 801319e:	4311      	orrs	r1, r2
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80131a4:	4311      	orrs	r1, r2
 80131a6:	687a      	ldr	r2, [r7, #4]
 80131a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80131aa:	4311      	orrs	r1, r2
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80131b0:	430a      	orrs	r2, r1
 80131b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80131b6:	4313      	orrs	r3, r2
 80131b8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80131ba:	f7ff fc4a 	bl	8012a52 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80131be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131c2:	68db      	ldr	r3, [r3, #12]
 80131c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80131c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131cc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131ce:	f7fc fe7b 	bl	800fec8 <HAL_GetTick>
 80131d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80131d4:	e008      	b.n	80131e8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80131d6:	f7fc fe77 	bl	800fec8 <HAL_GetTick>
 80131da:	4602      	mov	r2, r0
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	2b0a      	cmp	r3, #10
 80131e2:	d901      	bls.n	80131e8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80131e4:	2303      	movs	r3, #3
 80131e6:	e04c      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80131e8:	f7ff fc4f 	bl	8012a8a <LL_RCC_PLL_IsReady>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d0f1      	beq.n	80131d6 <HAL_RCC_OscConfig+0x646>
 80131f2:	e045      	b.n	8013280 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80131f4:	f7ff fc3b 	bl	8012a6e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131f8:	f7fc fe66 	bl	800fec8 <HAL_GetTick>
 80131fc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80131fe:	e008      	b.n	8013212 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013200:	f7fc fe62 	bl	800fec8 <HAL_GetTick>
 8013204:	4602      	mov	r2, r0
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	1ad3      	subs	r3, r2, r3
 801320a:	2b0a      	cmp	r3, #10
 801320c:	d901      	bls.n	8013212 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801320e:	2303      	movs	r3, #3
 8013210:	e037      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8013212:	f7ff fc3a 	bl	8012a8a <LL_RCC_PLL_IsReady>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1f1      	bne.n	8013200 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013220:	68da      	ldr	r2, [r3, #12]
 8013222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013226:	4b1a      	ldr	r3, [pc, #104]	; (8013290 <HAL_RCC_OscConfig+0x700>)
 8013228:	4013      	ands	r3, r2
 801322a:	60cb      	str	r3, [r1, #12]
 801322c:	e028      	b.n	8013280 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013232:	2b01      	cmp	r3, #1
 8013234:	d101      	bne.n	801323a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8013236:	2301      	movs	r3, #1
 8013238:	e023      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	f003 0203 	and.w	r2, r3, #3
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801324c:	429a      	cmp	r2, r3
 801324e:	d115      	bne.n	801327c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801325a:	429a      	cmp	r2, r3
 801325c:	d10e      	bne.n	801327c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013268:	021b      	lsls	r3, r3, #8
 801326a:	429a      	cmp	r2, r3
 801326c:	d106      	bne.n	801327c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 801326e:	69bb      	ldr	r3, [r7, #24]
 8013270:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013278:	429a      	cmp	r2, r3
 801327a:	d001      	beq.n	8013280 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 801327c:	2301      	movs	r3, #1
 801327e:	e000      	b.n	8013282 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8013280:	2300      	movs	r3, #0
}
 8013282:	4618      	mov	r0, r3
 8013284:	3720      	adds	r7, #32
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	11c1808c 	.word	0x11c1808c
 8013290:	eefefffc 	.word	0xeefefffc

08013294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b084      	sub	sp, #16
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d101      	bne.n	80132a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80132a4:	2301      	movs	r3, #1
 80132a6:	e10f      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80132a8:	4b89      	ldr	r3, [pc, #548]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f003 0307 	and.w	r3, r3, #7
 80132b0:	683a      	ldr	r2, [r7, #0]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d91b      	bls.n	80132ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80132b6:	4b86      	ldr	r3, [pc, #536]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f023 0207 	bic.w	r2, r3, #7
 80132be:	4984      	ldr	r1, [pc, #528]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	4313      	orrs	r3, r2
 80132c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80132c6:	f7fc fdff 	bl	800fec8 <HAL_GetTick>
 80132ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80132cc:	e008      	b.n	80132e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80132ce:	f7fc fdfb 	bl	800fec8 <HAL_GetTick>
 80132d2:	4602      	mov	r2, r0
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	1ad3      	subs	r3, r2, r3
 80132d8:	2b02      	cmp	r3, #2
 80132da:	d901      	bls.n	80132e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80132dc:	2303      	movs	r3, #3
 80132de:	e0f3      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80132e0:	4b7b      	ldr	r3, [pc, #492]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f003 0307 	and.w	r3, r3, #7
 80132e8:	683a      	ldr	r2, [r7, #0]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d1ef      	bne.n	80132ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f003 0302 	and.w	r3, r3, #2
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d016      	beq.n	8013328 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	689b      	ldr	r3, [r3, #8]
 80132fe:	4618      	mov	r0, r3
 8013300:	f7ff fb2a 	bl	8012958 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013304:	f7fc fde0 	bl	800fec8 <HAL_GetTick>
 8013308:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801330a:	e008      	b.n	801331e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801330c:	f7fc fddc 	bl	800fec8 <HAL_GetTick>
 8013310:	4602      	mov	r2, r0
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	2b02      	cmp	r3, #2
 8013318:	d901      	bls.n	801331e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801331a:	2303      	movs	r3, #3
 801331c:	e0d4      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801331e:	f7ff fbf2 	bl	8012b06 <LL_RCC_IsActiveFlag_HPRE>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d0f1      	beq.n	801330c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013330:	2b00      	cmp	r3, #0
 8013332:	d016      	beq.n	8013362 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	695b      	ldr	r3, [r3, #20]
 8013338:	4618      	mov	r0, r3
 801333a:	f7ff fb20 	bl	801297e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801333e:	f7fc fdc3 	bl	800fec8 <HAL_GetTick>
 8013342:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8013344:	e008      	b.n	8013358 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013346:	f7fc fdbf 	bl	800fec8 <HAL_GetTick>
 801334a:	4602      	mov	r2, r0
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	1ad3      	subs	r3, r2, r3
 8013350:	2b02      	cmp	r3, #2
 8013352:	d901      	bls.n	8013358 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8013354:	2303      	movs	r3, #3
 8013356:	e0b7      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8013358:	f7ff fbe6 	bl	8012b28 <LL_RCC_IsActiveFlag_SHDHPRE>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d0f1      	beq.n	8013346 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f003 0304 	and.w	r3, r3, #4
 801336a:	2b00      	cmp	r3, #0
 801336c:	d016      	beq.n	801339c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	4618      	mov	r0, r3
 8013374:	f7ff fb19 	bl	80129aa <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013378:	f7fc fda6 	bl	800fec8 <HAL_GetTick>
 801337c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801337e:	e008      	b.n	8013392 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013380:	f7fc fda2 	bl	800fec8 <HAL_GetTick>
 8013384:	4602      	mov	r2, r0
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	1ad3      	subs	r3, r2, r3
 801338a:	2b02      	cmp	r3, #2
 801338c:	d901      	bls.n	8013392 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801338e:	2303      	movs	r3, #3
 8013390:	e09a      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8013392:	f7ff fbdb 	bl	8012b4c <LL_RCC_IsActiveFlag_PPRE1>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d0f1      	beq.n	8013380 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f003 0308 	and.w	r3, r3, #8
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d017      	beq.n	80133d8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	691b      	ldr	r3, [r3, #16]
 80133ac:	00db      	lsls	r3, r3, #3
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7ff fb0e 	bl	80129d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80133b4:	f7fc fd88 	bl	800fec8 <HAL_GetTick>
 80133b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80133ba:	e008      	b.n	80133ce <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80133bc:	f7fc fd84 	bl	800fec8 <HAL_GetTick>
 80133c0:	4602      	mov	r2, r0
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	1ad3      	subs	r3, r2, r3
 80133c6:	2b02      	cmp	r3, #2
 80133c8:	d901      	bls.n	80133ce <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80133ca:	2303      	movs	r3, #3
 80133cc:	e07c      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80133ce:	f7ff fbce 	bl	8012b6e <LL_RCC_IsActiveFlag_PPRE2>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d0f1      	beq.n	80133bc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	f003 0301 	and.w	r3, r3, #1
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d043      	beq.n	801346c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	2b02      	cmp	r3, #2
 80133ea:	d106      	bne.n	80133fa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80133ec:	f7ff f99b 	bl	8012726 <LL_RCC_HSE_IsReady>
 80133f0:	4603      	mov	r3, r0
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d11e      	bne.n	8013434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80133f6:	2301      	movs	r3, #1
 80133f8:	e066      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	2b03      	cmp	r3, #3
 8013400:	d106      	bne.n	8013410 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8013402:	f7ff fb42 	bl	8012a8a <LL_RCC_PLL_IsReady>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d113      	bne.n	8013434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801340c:	2301      	movs	r3, #1
 801340e:	e05b      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d106      	bne.n	8013426 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8013418:	f7ff fa35 	bl	8012886 <LL_RCC_MSI_IsReady>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d108      	bne.n	8013434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013422:	2301      	movs	r3, #1
 8013424:	e050      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8013426:	f7ff f9ab 	bl	8012780 <LL_RCC_HSI_IsReady>
 801342a:	4603      	mov	r3, r0
 801342c:	2b00      	cmp	r3, #0
 801342e:	d101      	bne.n	8013434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013430:	2301      	movs	r3, #1
 8013432:	e049      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	4618      	mov	r0, r3
 801343a:	f7ff fa6f 	bl	801291c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801343e:	f7fc fd43 	bl	800fec8 <HAL_GetTick>
 8013442:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013444:	e00a      	b.n	801345c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013446:	f7fc fd3f 	bl	800fec8 <HAL_GetTick>
 801344a:	4602      	mov	r2, r0
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	f241 3288 	movw	r2, #5000	; 0x1388
 8013454:	4293      	cmp	r3, r2
 8013456:	d901      	bls.n	801345c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8013458:	2303      	movs	r3, #3
 801345a:	e035      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801345c:	f7ff fa71 	bl	8012942 <LL_RCC_GetSysClkSource>
 8013460:	4602      	mov	r2, r0
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	429a      	cmp	r2, r3
 801346a:	d1ec      	bne.n	8013446 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801346c:	4b18      	ldr	r3, [pc, #96]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f003 0307 	and.w	r3, r3, #7
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	429a      	cmp	r2, r3
 8013478:	d21b      	bcs.n	80134b2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801347a:	4b15      	ldr	r3, [pc, #84]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f023 0207 	bic.w	r2, r3, #7
 8013482:	4913      	ldr	r1, [pc, #76]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	4313      	orrs	r3, r2
 8013488:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801348a:	f7fc fd1d 	bl	800fec8 <HAL_GetTick>
 801348e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013490:	e008      	b.n	80134a4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8013492:	f7fc fd19 	bl	800fec8 <HAL_GetTick>
 8013496:	4602      	mov	r2, r0
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	1ad3      	subs	r3, r2, r3
 801349c:	2b02      	cmp	r3, #2
 801349e:	d901      	bls.n	80134a4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80134a0:	2303      	movs	r3, #3
 80134a2:	e011      	b.n	80134c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80134a4:	4b0a      	ldr	r3, [pc, #40]	; (80134d0 <HAL_RCC_ClockConfig+0x23c>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	f003 0307 	and.w	r3, r3, #7
 80134ac:	683a      	ldr	r2, [r7, #0]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d1ef      	bne.n	8013492 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80134b2:	f000 f8b3 	bl	801361c <HAL_RCC_GetHCLKFreq>
 80134b6:	4603      	mov	r3, r0
 80134b8:	4a06      	ldr	r2, [pc, #24]	; (80134d4 <HAL_RCC_ClockConfig+0x240>)
 80134ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80134bc:	4b06      	ldr	r3, [pc, #24]	; (80134d8 <HAL_RCC_ClockConfig+0x244>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7fc fcb5 	bl	800fe30 <HAL_InitTick>
 80134c6:	4603      	mov	r3, r0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3710      	adds	r7, #16
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	58004000 	.word	0x58004000
 80134d4:	20000428 	.word	0x20000428
 80134d8:	20000654 	.word	0x20000654

080134dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80134dc:	b590      	push	{r4, r7, lr}
 80134de:	b087      	sub	sp, #28
 80134e0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80134e2:	2300      	movs	r3, #0
 80134e4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80134e6:	2300      	movs	r3, #0
 80134e8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80134ea:	f7ff fa2a 	bl	8012942 <LL_RCC_GetSysClkSource>
 80134ee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80134f0:	f7ff fafe 	bl	8012af0 <LL_RCC_PLL_GetMainSource>
 80134f4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d005      	beq.n	8013508 <HAL_RCC_GetSysClockFreq+0x2c>
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2b0c      	cmp	r3, #12
 8013500:	d139      	bne.n	8013576 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b01      	cmp	r3, #1
 8013506:	d136      	bne.n	8013576 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8013508:	f7ff f9cd 	bl	80128a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 801350c:	4603      	mov	r3, r0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d115      	bne.n	801353e <HAL_RCC_GetSysClockFreq+0x62>
 8013512:	f7ff f9c8 	bl	80128a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013516:	4603      	mov	r3, r0
 8013518:	2b01      	cmp	r3, #1
 801351a:	d106      	bne.n	801352a <HAL_RCC_GetSysClockFreq+0x4e>
 801351c:	f7ff f9d3 	bl	80128c6 <LL_RCC_MSI_GetRange>
 8013520:	4603      	mov	r3, r0
 8013522:	0a1b      	lsrs	r3, r3, #8
 8013524:	f003 030f 	and.w	r3, r3, #15
 8013528:	e005      	b.n	8013536 <HAL_RCC_GetSysClockFreq+0x5a>
 801352a:	f7ff f9d7 	bl	80128dc <LL_RCC_MSI_GetRangeAfterStandby>
 801352e:	4603      	mov	r3, r0
 8013530:	0a1b      	lsrs	r3, r3, #8
 8013532:	f003 030f 	and.w	r3, r3, #15
 8013536:	4a36      	ldr	r2, [pc, #216]	; (8013610 <HAL_RCC_GetSysClockFreq+0x134>)
 8013538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801353c:	e014      	b.n	8013568 <HAL_RCC_GetSysClockFreq+0x8c>
 801353e:	f7ff f9b2 	bl	80128a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013542:	4603      	mov	r3, r0
 8013544:	2b01      	cmp	r3, #1
 8013546:	d106      	bne.n	8013556 <HAL_RCC_GetSysClockFreq+0x7a>
 8013548:	f7ff f9bd 	bl	80128c6 <LL_RCC_MSI_GetRange>
 801354c:	4603      	mov	r3, r0
 801354e:	091b      	lsrs	r3, r3, #4
 8013550:	f003 030f 	and.w	r3, r3, #15
 8013554:	e005      	b.n	8013562 <HAL_RCC_GetSysClockFreq+0x86>
 8013556:	f7ff f9c1 	bl	80128dc <LL_RCC_MSI_GetRangeAfterStandby>
 801355a:	4603      	mov	r3, r0
 801355c:	091b      	lsrs	r3, r3, #4
 801355e:	f003 030f 	and.w	r3, r3, #15
 8013562:	4a2b      	ldr	r2, [pc, #172]	; (8013610 <HAL_RCC_GetSysClockFreq+0x134>)
 8013564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013568:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d115      	bne.n	801359c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8013574:	e012      	b.n	801359c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	2b04      	cmp	r3, #4
 801357a:	d102      	bne.n	8013582 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801357c:	4b25      	ldr	r3, [pc, #148]	; (8013614 <HAL_RCC_GetSysClockFreq+0x138>)
 801357e:	617b      	str	r3, [r7, #20]
 8013580:	e00c      	b.n	801359c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	2b08      	cmp	r3, #8
 8013586:	d109      	bne.n	801359c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8013588:	f7ff f8a0 	bl	80126cc <LL_RCC_HSE_IsEnabledDiv2>
 801358c:	4603      	mov	r3, r0
 801358e:	2b01      	cmp	r3, #1
 8013590:	d102      	bne.n	8013598 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8013592:	4b20      	ldr	r3, [pc, #128]	; (8013614 <HAL_RCC_GetSysClockFreq+0x138>)
 8013594:	617b      	str	r3, [r7, #20]
 8013596:	e001      	b.n	801359c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8013598:	4b1f      	ldr	r3, [pc, #124]	; (8013618 <HAL_RCC_GetSysClockFreq+0x13c>)
 801359a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801359c:	f7ff f9d1 	bl	8012942 <LL_RCC_GetSysClkSource>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b0c      	cmp	r3, #12
 80135a4:	d12f      	bne.n	8013606 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80135a6:	f7ff faa3 	bl	8012af0 <LL_RCC_PLL_GetMainSource>
 80135aa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b02      	cmp	r3, #2
 80135b0:	d003      	beq.n	80135ba <HAL_RCC_GetSysClockFreq+0xde>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2b03      	cmp	r3, #3
 80135b6:	d003      	beq.n	80135c0 <HAL_RCC_GetSysClockFreq+0xe4>
 80135b8:	e00d      	b.n	80135d6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80135ba:	4b16      	ldr	r3, [pc, #88]	; (8013614 <HAL_RCC_GetSysClockFreq+0x138>)
 80135bc:	60fb      	str	r3, [r7, #12]
        break;
 80135be:	e00d      	b.n	80135dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80135c0:	f7ff f884 	bl	80126cc <LL_RCC_HSE_IsEnabledDiv2>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d102      	bne.n	80135d0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80135ca:	4b12      	ldr	r3, [pc, #72]	; (8013614 <HAL_RCC_GetSysClockFreq+0x138>)
 80135cc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80135ce:	e005      	b.n	80135dc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80135d0:	4b11      	ldr	r3, [pc, #68]	; (8013618 <HAL_RCC_GetSysClockFreq+0x13c>)
 80135d2:	60fb      	str	r3, [r7, #12]
        break;
 80135d4:	e002      	b.n	80135dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	60fb      	str	r3, [r7, #12]
        break;
 80135da:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80135dc:	f7ff fa66 	bl	8012aac <LL_RCC_PLL_GetN>
 80135e0:	4602      	mov	r2, r0
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	fb03 f402 	mul.w	r4, r3, r2
 80135e8:	f7ff fa77 	bl	8012ada <LL_RCC_PLL_GetDivider>
 80135ec:	4603      	mov	r3, r0
 80135ee:	091b      	lsrs	r3, r3, #4
 80135f0:	3301      	adds	r3, #1
 80135f2:	fbb4 f4f3 	udiv	r4, r4, r3
 80135f6:	f7ff fa65 	bl	8012ac4 <LL_RCC_PLL_GetR>
 80135fa:	4603      	mov	r3, r0
 80135fc:	0f5b      	lsrs	r3, r3, #29
 80135fe:	3301      	adds	r3, #1
 8013600:	fbb4 f3f3 	udiv	r3, r4, r3
 8013604:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8013606:	697b      	ldr	r3, [r7, #20]
}
 8013608:	4618      	mov	r0, r3
 801360a:	371c      	adds	r7, #28
 801360c:	46bd      	mov	sp, r7
 801360e:	bd90      	pop	{r4, r7, pc}
 8013610:	0801a210 	.word	0x0801a210
 8013614:	00f42400 	.word	0x00f42400
 8013618:	01e84800 	.word	0x01e84800

0801361c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801361c:	b598      	push	{r3, r4, r7, lr}
 801361e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8013620:	f7ff ff5c 	bl	80134dc <HAL_RCC_GetSysClockFreq>
 8013624:	4604      	mov	r4, r0
 8013626:	f7ff f9e6 	bl	80129f6 <LL_RCC_GetAHBPrescaler>
 801362a:	4603      	mov	r3, r0
 801362c:	091b      	lsrs	r3, r3, #4
 801362e:	f003 030f 	and.w	r3, r3, #15
 8013632:	4a03      	ldr	r2, [pc, #12]	; (8013640 <HAL_RCC_GetHCLKFreq+0x24>)
 8013634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013638:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801363c:	4618      	mov	r0, r3
 801363e:	bd98      	pop	{r3, r4, r7, pc}
 8013640:	0801a1b0 	.word	0x0801a1b0

08013644 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013644:	b598      	push	{r3, r4, r7, lr}
 8013646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8013648:	f7ff ffe8 	bl	801361c <HAL_RCC_GetHCLKFreq>
 801364c:	4604      	mov	r4, r0
 801364e:	f7ff f9ea 	bl	8012a26 <LL_RCC_GetAPB1Prescaler>
 8013652:	4603      	mov	r3, r0
 8013654:	0a1b      	lsrs	r3, r3, #8
 8013656:	4a03      	ldr	r2, [pc, #12]	; (8013664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801365c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8013660:	4618      	mov	r0, r3
 8013662:	bd98      	pop	{r3, r4, r7, pc}
 8013664:	0801a1f0 	.word	0x0801a1f0

08013668 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013668:	b598      	push	{r3, r4, r7, lr}
 801366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801366c:	f7ff ffd6 	bl	801361c <HAL_RCC_GetHCLKFreq>
 8013670:	4604      	mov	r4, r0
 8013672:	f7ff f9e3 	bl	8012a3c <LL_RCC_GetAPB2Prescaler>
 8013676:	4603      	mov	r3, r0
 8013678:	0adb      	lsrs	r3, r3, #11
 801367a:	4a03      	ldr	r2, [pc, #12]	; (8013688 <HAL_RCC_GetPCLK2Freq+0x20>)
 801367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013680:	fa24 f303 	lsr.w	r3, r4, r3
}
 8013684:	4618      	mov	r0, r3
 8013686:	bd98      	pop	{r3, r4, r7, pc}
 8013688:	0801a1f0 	.word	0x0801a1f0

0801368c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 801368c:	b590      	push	{r4, r7, lr}
 801368e:	b085      	sub	sp, #20
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	091b      	lsrs	r3, r3, #4
 8013698:	f003 030f 	and.w	r3, r3, #15
 801369c:	4a10      	ldr	r2, [pc, #64]	; (80136e0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 801369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136a2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80136a4:	f7ff f9b2 	bl	8012a0c <LL_RCC_GetAHB3Prescaler>
 80136a8:	4603      	mov	r3, r0
 80136aa:	091b      	lsrs	r3, r3, #4
 80136ac:	f003 030f 	and.w	r3, r3, #15
 80136b0:	4a0c      	ldr	r2, [pc, #48]	; (80136e4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80136b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80136bc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	4a09      	ldr	r2, [pc, #36]	; (80136e8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80136c2:	fba2 2303 	umull	r2, r3, r2, r3
 80136c6:	0c9c      	lsrs	r4, r3, #18
 80136c8:	f7fe ffc6 	bl	8012658 <HAL_PWREx_GetVoltageRange>
 80136cc:	4603      	mov	r3, r0
 80136ce:	4619      	mov	r1, r3
 80136d0:	4620      	mov	r0, r4
 80136d2:	f000 f80b 	bl	80136ec <RCC_SetFlashLatency>
 80136d6:	4603      	mov	r3, r0
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3714      	adds	r7, #20
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd90      	pop	{r4, r7, pc}
 80136e0:	0801a210 	.word	0x0801a210
 80136e4:	0801a1b0 	.word	0x0801a1b0
 80136e8:	431bde83 	.word	0x431bde83

080136ec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b08e      	sub	sp, #56	; 0x38
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80136f6:	4a3a      	ldr	r2, [pc, #232]	; (80137e0 <RCC_SetFlashLatency+0xf4>)
 80136f8:	f107 0320 	add.w	r3, r7, #32
 80136fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013700:	6018      	str	r0, [r3, #0]
 8013702:	3304      	adds	r3, #4
 8013704:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8013706:	4a37      	ldr	r2, [pc, #220]	; (80137e4 <RCC_SetFlashLatency+0xf8>)
 8013708:	f107 0318 	add.w	r3, r7, #24
 801370c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013710:	6018      	str	r0, [r3, #0]
 8013712:	3304      	adds	r3, #4
 8013714:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8013716:	4a34      	ldr	r2, [pc, #208]	; (80137e8 <RCC_SetFlashLatency+0xfc>)
 8013718:	f107 030c 	add.w	r3, r7, #12
 801371c:	ca07      	ldmia	r2, {r0, r1, r2}
 801371e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8013722:	2300      	movs	r3, #0
 8013724:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801372c:	d11b      	bne.n	8013766 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801372e:	2300      	movs	r3, #0
 8013730:	633b      	str	r3, [r7, #48]	; 0x30
 8013732:	e014      	b.n	801375e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8013734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013736:	005b      	lsls	r3, r3, #1
 8013738:	3338      	adds	r3, #56	; 0x38
 801373a:	443b      	add	r3, r7
 801373c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8013740:	461a      	mov	r2, r3
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	4293      	cmp	r3, r2
 8013746:	d807      	bhi.n	8013758 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8013748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	3338      	adds	r3, #56	; 0x38
 801374e:	443b      	add	r3, r7
 8013750:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8013754:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8013756:	e021      	b.n	801379c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8013758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375a:	3301      	adds	r3, #1
 801375c:	633b      	str	r3, [r7, #48]	; 0x30
 801375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013760:	2b02      	cmp	r3, #2
 8013762:	d9e7      	bls.n	8013734 <RCC_SetFlashLatency+0x48>
 8013764:	e01a      	b.n	801379c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8013766:	2300      	movs	r3, #0
 8013768:	62fb      	str	r3, [r7, #44]	; 0x2c
 801376a:	e014      	b.n	8013796 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376e:	005b      	lsls	r3, r3, #1
 8013770:	3338      	adds	r3, #56	; 0x38
 8013772:	443b      	add	r3, r7
 8013774:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8013778:	461a      	mov	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4293      	cmp	r3, r2
 801377e:	d807      	bhi.n	8013790 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8013780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	3338      	adds	r3, #56	; 0x38
 8013786:	443b      	add	r3, r7
 8013788:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801378c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801378e:	e005      	b.n	801379c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8013790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013792:	3301      	adds	r3, #1
 8013794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013798:	2b02      	cmp	r3, #2
 801379a:	d9e7      	bls.n	801376c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801379c:	4b13      	ldr	r3, [pc, #76]	; (80137ec <RCC_SetFlashLatency+0x100>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	f023 0207 	bic.w	r2, r3, #7
 80137a4:	4911      	ldr	r1, [pc, #68]	; (80137ec <RCC_SetFlashLatency+0x100>)
 80137a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a8:	4313      	orrs	r3, r2
 80137aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80137ac:	f7fc fb8c 	bl	800fec8 <HAL_GetTick>
 80137b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80137b2:	e008      	b.n	80137c6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80137b4:	f7fc fb88 	bl	800fec8 <HAL_GetTick>
 80137b8:	4602      	mov	r2, r0
 80137ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	2b02      	cmp	r3, #2
 80137c0:	d901      	bls.n	80137c6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e007      	b.n	80137d6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80137c6:	4b09      	ldr	r3, [pc, #36]	; (80137ec <RCC_SetFlashLatency+0x100>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f003 0307 	and.w	r3, r3, #7
 80137ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d1ef      	bne.n	80137b4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80137d4:	2300      	movs	r3, #0
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3738      	adds	r7, #56	; 0x38
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	0801a194 	.word	0x0801a194
 80137e4:	0801a19c 	.word	0x0801a19c
 80137e8:	0801a1a4 	.word	0x0801a1a4
 80137ec:	58004000 	.word	0x58004000

080137f0 <LL_RCC_LSE_IsReady>:
{
 80137f0:	b480      	push	{r7}
 80137f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80137f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80137f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137fc:	f003 0302 	and.w	r3, r3, #2
 8013800:	2b02      	cmp	r3, #2
 8013802:	d101      	bne.n	8013808 <LL_RCC_LSE_IsReady+0x18>
 8013804:	2301      	movs	r3, #1
 8013806:	e000      	b.n	801380a <LL_RCC_LSE_IsReady+0x1a>
 8013808:	2300      	movs	r3, #0
}
 801380a:	4618      	mov	r0, r3
 801380c:	46bd      	mov	sp, r7
 801380e:	bc80      	pop	{r7}
 8013810:	4770      	bx	lr

08013812 <LL_RCC_SetUSARTClockSource>:
{
 8013812:	b480      	push	{r7}
 8013814:	b083      	sub	sp, #12
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 801381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801381e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	0c1b      	lsrs	r3, r3, #16
 8013826:	43db      	mvns	r3, r3
 8013828:	401a      	ands	r2, r3
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	b29b      	uxth	r3, r3
 801382e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013832:	4313      	orrs	r3, r2
 8013834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8013838:	bf00      	nop
 801383a:	370c      	adds	r7, #12
 801383c:	46bd      	mov	sp, r7
 801383e:	bc80      	pop	{r7}
 8013840:	4770      	bx	lr

08013842 <LL_RCC_SetI2SClockSource>:
{
 8013842:	b480      	push	{r7}
 8013844:	b083      	sub	sp, #12
 8013846:	af00      	add	r7, sp, #0
 8013848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 801384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4313      	orrs	r3, r2
 801385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8013862:	bf00      	nop
 8013864:	370c      	adds	r7, #12
 8013866:	46bd      	mov	sp, r7
 8013868:	bc80      	pop	{r7}
 801386a:	4770      	bx	lr

0801386c <LL_RCC_SetLPUARTClockSource>:
{
 801386c:	b480      	push	{r7}
 801386e:	b083      	sub	sp, #12
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8013874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801387c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	4313      	orrs	r3, r2
 8013888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801388c:	bf00      	nop
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	bc80      	pop	{r7}
 8013894:	4770      	bx	lr

08013896 <LL_RCC_SetI2CClockSource>:
{
 8013896:	b480      	push	{r7}
 8013898:	b083      	sub	sp, #12
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80138a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	091b      	lsrs	r3, r3, #4
 80138aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80138ae:	43db      	mvns	r3, r3
 80138b0:	401a      	ands	r2, r3
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	011b      	lsls	r3, r3, #4
 80138b6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80138ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80138be:	4313      	orrs	r3, r2
 80138c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80138c4:	bf00      	nop
 80138c6:	370c      	adds	r7, #12
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bc80      	pop	{r7}
 80138cc:	4770      	bx	lr

080138ce <LL_RCC_SetLPTIMClockSource>:
{
 80138ce:	b480      	push	{r7}
 80138d0:	b083      	sub	sp, #12
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80138d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80138da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	0c1b      	lsrs	r3, r3, #16
 80138e2:	041b      	lsls	r3, r3, #16
 80138e4:	43db      	mvns	r3, r3
 80138e6:	401a      	ands	r2, r3
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	041b      	lsls	r3, r3, #16
 80138ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80138f0:	4313      	orrs	r3, r2
 80138f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80138f6:	bf00      	nop
 80138f8:	370c      	adds	r7, #12
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bc80      	pop	{r7}
 80138fe:	4770      	bx	lr

08013900 <LL_RCC_SetRNGClockSource>:
{
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8013908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013910:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8013914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	4313      	orrs	r3, r2
 801391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8013920:	bf00      	nop
 8013922:	370c      	adds	r7, #12
 8013924:	46bd      	mov	sp, r7
 8013926:	bc80      	pop	{r7}
 8013928:	4770      	bx	lr

0801392a <LL_RCC_SetADCClockSource>:
{
 801392a:	b480      	push	{r7}
 801392c:	b083      	sub	sp, #12
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8013932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801393a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801393e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4313      	orrs	r3, r2
 8013946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801394a:	bf00      	nop
 801394c:	370c      	adds	r7, #12
 801394e:	46bd      	mov	sp, r7
 8013950:	bc80      	pop	{r7}
 8013952:	4770      	bx	lr

08013954 <LL_RCC_SetRTCClockSource>:
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801395c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	4313      	orrs	r3, r2
 8013970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8013974:	bf00      	nop
 8013976:	370c      	adds	r7, #12
 8013978:	46bd      	mov	sp, r7
 801397a:	bc80      	pop	{r7}
 801397c:	4770      	bx	lr

0801397e <LL_RCC_GetRTCClockSource>:
{
 801397e:	b480      	push	{r7}
 8013980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8013982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801398e:	4618      	mov	r0, r3
 8013990:	46bd      	mov	sp, r7
 8013992:	bc80      	pop	{r7}
 8013994:	4770      	bx	lr

08013996 <LL_RCC_ForceBackupDomainReset>:
{
 8013996:	b480      	push	{r7}
 8013998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801399a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80139a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80139aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80139ae:	bf00      	nop
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bc80      	pop	{r7}
 80139b4:	4770      	bx	lr

080139b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80139b6:	b480      	push	{r7}
 80139b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80139ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80139be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80139c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80139ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80139ce:	bf00      	nop
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bc80      	pop	{r7}
 80139d4:	4770      	bx	lr
	...

080139d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b086      	sub	sp, #24
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80139e0:	2300      	movs	r3, #0
 80139e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80139e4:	2300      	movs	r3, #0
 80139e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80139e8:	2300      	movs	r3, #0
 80139ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d058      	beq.n	8013aaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80139f8:	f7fe fe20 	bl	801263c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80139fc:	f7fc fa64 	bl	800fec8 <HAL_GetTick>
 8013a00:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8013a02:	e009      	b.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013a04:	f7fc fa60 	bl	800fec8 <HAL_GetTick>
 8013a08:	4602      	mov	r2, r0
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	1ad3      	subs	r3, r2, r3
 8013a0e:	2b02      	cmp	r3, #2
 8013a10:	d902      	bls.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8013a12:	2303      	movs	r3, #3
 8013a14:	74fb      	strb	r3, [r7, #19]
        break;
 8013a16:	e006      	b.n	8013a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8013a18:	4b7b      	ldr	r3, [pc, #492]	; (8013c08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a24:	d1ee      	bne.n	8013a04 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8013a26:	7cfb      	ldrb	r3, [r7, #19]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d13c      	bne.n	8013aa6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8013a2c:	f7ff ffa7 	bl	801397e <LL_RCC_GetRTCClockSource>
 8013a30:	4602      	mov	r2, r0
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d00f      	beq.n	8013a5a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8013a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013a46:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013a48:	f7ff ffa5 	bl	8013996 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013a4c:	f7ff ffb3 	bl	80139b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8013a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	f003 0302 	and.w	r3, r3, #2
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d014      	beq.n	8013a8e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a64:	f7fc fa30 	bl	800fec8 <HAL_GetTick>
 8013a68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8013a6a:	e00b      	b.n	8013a84 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013a6c:	f7fc fa2c 	bl	800fec8 <HAL_GetTick>
 8013a70:	4602      	mov	r2, r0
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	1ad3      	subs	r3, r2, r3
 8013a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a7a:	4293      	cmp	r3, r2
 8013a7c:	d902      	bls.n	8013a84 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8013a7e:	2303      	movs	r3, #3
 8013a80:	74fb      	strb	r3, [r7, #19]
            break;
 8013a82:	e004      	b.n	8013a8e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8013a84:	f7ff feb4 	bl	80137f0 <LL_RCC_LSE_IsReady>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d1ee      	bne.n	8013a6c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8013a8e:	7cfb      	ldrb	r3, [r7, #19]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d105      	bne.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7ff ff5b 	bl	8013954 <LL_RCC_SetRTCClockSource>
 8013a9e:	e004      	b.n	8013aaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013aa0:	7cfb      	ldrb	r3, [r7, #19]
 8013aa2:	74bb      	strb	r3, [r7, #18]
 8013aa4:	e001      	b.n	8013aaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013aa6:	7cfb      	ldrb	r3, [r7, #19]
 8013aa8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f003 0301 	and.w	r3, r3, #1
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d004      	beq.n	8013ac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7ff fea9 	bl	8013812 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f003 0302 	and.w	r3, r3, #2
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d004      	beq.n	8013ad6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7ff fe9e 	bl	8013812 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f003 0320 	and.w	r3, r3, #32
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d004      	beq.n	8013aec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	691b      	ldr	r3, [r3, #16]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ff fec0 	bl	801386c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d004      	beq.n	8013b02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6a1b      	ldr	r3, [r3, #32]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7ff fee6 	bl	80138ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d004      	beq.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff fedb 	bl	80138ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d004      	beq.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7ff fed0 	bl	80138ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d004      	beq.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	695b      	ldr	r3, [r3, #20]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7ff fea9 	bl	8013896 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d004      	beq.n	8013b5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	699b      	ldr	r3, [r3, #24]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff fe9e 	bl	8013896 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d004      	beq.n	8013b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	69db      	ldr	r3, [r3, #28]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7ff fe93 	bl	8013896 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	f003 0310 	and.w	r3, r3, #16
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d011      	beq.n	8013ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7ff fe5e 	bl	8013842 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	68db      	ldr	r3, [r3, #12]
 8013b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b8e:	d107      	bne.n	8013ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8013b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013b9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d010      	beq.n	8013bce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7ff fea5 	bl	8013900 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d107      	bne.n	8013bce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8013bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013bcc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d011      	beq.n	8013bfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7ff fea3 	bl	801392a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013bec:	d107      	bne.n	8013bfe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8013bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013bfc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8013bfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3718      	adds	r7, #24
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	58000400 	.word	0x58000400

08013c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d101      	bne.n	8013c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e0c6      	b.n	8013dac <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d108      	bne.n	8013c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c2e:	d009      	beq.n	8013c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	61da      	str	r2, [r3, #28]
 8013c36:	e005      	b.n	8013c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2200      	movs	r2, #0
 8013c42:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d106      	bne.n	8013c5e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7ef fb91 	bl	8003380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2202      	movs	r2, #2
 8013c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013c74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013c7e:	d902      	bls.n	8013c86 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013c80:	2300      	movs	r3, #0
 8013c82:	60fb      	str	r3, [r7, #12]
 8013c84:	e002      	b.n	8013c8c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013c94:	d007      	beq.n	8013ca6 <HAL_SPI_Init+0x9a>
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	68db      	ldr	r3, [r3, #12]
 8013c9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013c9e:	d002      	beq.n	8013ca6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	689b      	ldr	r3, [r3, #8]
 8013cb2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013cb6:	431a      	orrs	r2, r3
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	691b      	ldr	r3, [r3, #16]
 8013cbc:	f003 0302 	and.w	r3, r3, #2
 8013cc0:	431a      	orrs	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	695b      	ldr	r3, [r3, #20]
 8013cc6:	f003 0301 	and.w	r3, r3, #1
 8013cca:	431a      	orrs	r2, r3
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	699b      	ldr	r3, [r3, #24]
 8013cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013cd4:	431a      	orrs	r2, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	69db      	ldr	r3, [r3, #28]
 8013cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013cde:	431a      	orrs	r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6a1b      	ldr	r3, [r3, #32]
 8013ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ce8:	ea42 0103 	orr.w	r1, r2, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cf0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	430a      	orrs	r2, r1
 8013cfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013d04:	d11b      	bne.n	8013d3e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d10b      	bne.n	8013d26 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013d16:	d903      	bls.n	8013d20 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2202      	movs	r2, #2
 8013d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8013d1e:	e002      	b.n	8013d26 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2201      	movs	r2, #1
 8013d24:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d2a:	2b02      	cmp	r3, #2
 8013d2c:	d107      	bne.n	8013d3e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013d3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	699b      	ldr	r3, [r3, #24]
 8013d42:	0c1b      	lsrs	r3, r3, #16
 8013d44:	f003 0204 	and.w	r2, r3, #4
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d4c:	f003 0310 	and.w	r3, r3, #16
 8013d50:	431a      	orrs	r2, r3
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d56:	f003 0308 	and.w	r3, r3, #8
 8013d5a:	431a      	orrs	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013d64:	ea42 0103 	orr.w	r1, r2, r3
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	430a      	orrs	r2, r1
 8013d74:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013d7e:	d105      	bne.n	8013d8c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	b292      	uxth	r2, r2
 8013d8a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	69da      	ldr	r2, [r3, #28]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013d9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2201      	movs	r2, #1
 8013da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013daa:	2300      	movs	r3, #0
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3710      	adds	r7, #16
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b092      	sub	sp, #72	; 0x48
 8013db8:	af02      	add	r7, sp, #8
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	607a      	str	r2, [r7, #4]
 8013dc0:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013dca:	2301      	movs	r3, #1
 8013dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013dda:	2b01      	cmp	r3, #1
 8013ddc:	d101      	bne.n	8013de2 <HAL_SPI_TransmitReceive+0x2e>
 8013dde:	2302      	movs	r3, #2
 8013de0:	e2c8      	b.n	8014374 <HAL_SPI_TransmitReceive+0x5c0>
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2201      	movs	r2, #1
 8013de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013dea:	f7fc f86d 	bl	800fec8 <HAL_GetTick>
 8013dee:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8013e00:	887b      	ldrh	r3, [r7, #2]
 8013e02:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8013e04:	887b      	ldrh	r3, [r7, #2]
 8013e06:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013e18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d00f      	beq.n	8013e40 <HAL_SPI_TransmitReceive+0x8c>
 8013e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e26:	d107      	bne.n	8013e38 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	689b      	ldr	r3, [r3, #8]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d103      	bne.n	8013e38 <HAL_SPI_TransmitReceive+0x84>
 8013e30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e34:	2b04      	cmp	r3, #4
 8013e36:	d003      	beq.n	8013e40 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8013e38:	2302      	movs	r3, #2
 8013e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8013e3e:	e28f      	b.n	8014360 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d005      	beq.n	8013e52 <HAL_SPI_TransmitReceive+0x9e>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d002      	beq.n	8013e52 <HAL_SPI_TransmitReceive+0x9e>
 8013e4c:	887b      	ldrh	r3, [r7, #2]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d103      	bne.n	8013e5a <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8013e52:	2301      	movs	r3, #1
 8013e54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8013e58:	e282      	b.n	8014360 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	2b04      	cmp	r3, #4
 8013e64:	d003      	beq.n	8013e6e <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2205      	movs	r2, #5
 8013e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2200      	movs	r2, #0
 8013e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	887a      	ldrh	r2, [r7, #2]
 8013e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	887a      	ldrh	r2, [r7, #2]
 8013e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	68ba      	ldr	r2, [r7, #8]
 8013e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	887a      	ldrh	r2, [r7, #2]
 8013e94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	887a      	ldrh	r2, [r7, #2]
 8013e9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013eb0:	d10f      	bne.n	8013ed2 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013ec0:	601a      	str	r2, [r3, #0]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013ed0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	68db      	ldr	r3, [r3, #12]
 8013ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013eda:	d802      	bhi.n	8013ee2 <HAL_SPI_TransmitReceive+0x12e>
 8013edc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	d908      	bls.n	8013ef4 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	685a      	ldr	r2, [r3, #4]
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013ef0:	605a      	str	r2, [r3, #4]
 8013ef2:	e007      	b.n	8013f04 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	685a      	ldr	r2, [r3, #4]
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013f02:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f0e:	2b40      	cmp	r3, #64	; 0x40
 8013f10:	d007      	beq.n	8013f22 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	681a      	ldr	r2, [r3, #0]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013f2a:	f240 80a4 	bls.w	8014076 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d003      	beq.n	8013f3e <HAL_SPI_TransmitReceive+0x18a>
 8013f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013f38:	2b01      	cmp	r3, #1
 8013f3a:	f040 808e 	bne.w	801405a <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f42:	881a      	ldrh	r2, [r3, #0]
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f4e:	1c9a      	adds	r2, r3, #2
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	3b01      	subs	r3, #1
 8013f5c:	b29a      	uxth	r2, r3
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013f62:	e07a      	b.n	801405a <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	689b      	ldr	r3, [r3, #8]
 8013f6a:	f003 0302 	and.w	r3, r3, #2
 8013f6e:	2b02      	cmp	r3, #2
 8013f70:	d13f      	bne.n	8013ff2 <HAL_SPI_TransmitReceive+0x23e>
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d03a      	beq.n	8013ff2 <HAL_SPI_TransmitReceive+0x23e>
 8013f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d137      	bne.n	8013ff2 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f86:	881a      	ldrh	r2, [r3, #0]
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f92:	1c9a      	adds	r2, r3, #2
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	b29a      	uxth	r2, r3
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d11e      	bne.n	8013ff2 <HAL_SPI_TransmitReceive+0x23e>
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013fbc:	d119      	bne.n	8013ff2 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc0:	f003 0304 	and.w	r3, r3, #4
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d10c      	bne.n	8013fe2 <HAL_SPI_TransmitReceive+0x22e>
 8013fc8:	6a3b      	ldr	r3, [r7, #32]
 8013fca:	f003 0308 	and.w	r3, r3, #8
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d007      	beq.n	8013fe2 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013fe0:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013ff0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	689b      	ldr	r3, [r3, #8]
 8013ff8:	f003 0301 	and.w	r3, r3, #1
 8013ffc:	2b01      	cmp	r3, #1
 8013ffe:	d11c      	bne.n	801403a <HAL_SPI_TransmitReceive+0x286>
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014006:	b29b      	uxth	r3, r3
 8014008:	2b00      	cmp	r3, #0
 801400a:	d016      	beq.n	801403a <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	68da      	ldr	r2, [r3, #12]
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014016:	b292      	uxth	r2, r2
 8014018:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801401e:	1c9a      	adds	r2, r3, #2
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801402a:	b29b      	uxth	r3, r3
 801402c:	3b01      	subs	r3, #1
 801402e:	b29a      	uxth	r2, r3
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014036:	2301      	movs	r3, #1
 8014038:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801403a:	f7fb ff45 	bl	800fec8 <HAL_GetTick>
 801403e:	4602      	mov	r2, r0
 8014040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014042:	1ad3      	subs	r3, r2, r3
 8014044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014046:	429a      	cmp	r2, r3
 8014048:	d807      	bhi.n	801405a <HAL_SPI_TransmitReceive+0x2a6>
 801404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014050:	d003      	beq.n	801405a <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8014052:	2303      	movs	r3, #3
 8014054:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8014058:	e182      	b.n	8014360 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801405e:	b29b      	uxth	r3, r3
 8014060:	2b00      	cmp	r3, #0
 8014062:	f47f af7f 	bne.w	8013f64 <HAL_SPI_TransmitReceive+0x1b0>
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801406c:	b29b      	uxth	r3, r3
 801406e:	2b00      	cmp	r3, #0
 8014070:	f47f af78 	bne.w	8013f64 <HAL_SPI_TransmitReceive+0x1b0>
 8014074:	e103      	b.n	801427e <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	685b      	ldr	r3, [r3, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d003      	beq.n	8014086 <HAL_SPI_TransmitReceive+0x2d2>
 801407e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014080:	2b01      	cmp	r3, #1
 8014082:	f040 80ef 	bne.w	8014264 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801408a:	b29b      	uxth	r3, r3
 801408c:	2b01      	cmp	r3, #1
 801408e:	d912      	bls.n	80140b6 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014094:	881a      	ldrh	r2, [r3, #0]
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140a0:	1c9a      	adds	r2, r3, #2
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	3b02      	subs	r3, #2
 80140ae:	b29a      	uxth	r2, r3
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80140b4:	e0d6      	b.n	8014264 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	330c      	adds	r3, #12
 80140c0:	7812      	ldrb	r2, [r2, #0]
 80140c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140c8:	1c5a      	adds	r2, r3, #1
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	3b01      	subs	r3, #1
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80140dc:	e0c2      	b.n	8014264 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	689b      	ldr	r3, [r3, #8]
 80140e4:	f003 0302 	and.w	r3, r3, #2
 80140e8:	2b02      	cmp	r3, #2
 80140ea:	d158      	bne.n	801419e <HAL_SPI_TransmitReceive+0x3ea>
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d053      	beq.n	801419e <HAL_SPI_TransmitReceive+0x3ea>
 80140f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d150      	bne.n	801419e <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014100:	b29b      	uxth	r3, r3
 8014102:	2b01      	cmp	r3, #1
 8014104:	d912      	bls.n	801412c <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801410a:	881a      	ldrh	r2, [r3, #0]
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014116:	1c9a      	adds	r2, r3, #2
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014120:	b29b      	uxth	r3, r3
 8014122:	3b02      	subs	r3, #2
 8014124:	b29a      	uxth	r2, r3
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	87da      	strh	r2, [r3, #62]	; 0x3e
 801412a:	e012      	b.n	8014152 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	330c      	adds	r3, #12
 8014136:	7812      	ldrb	r2, [r2, #0]
 8014138:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801413e:	1c5a      	adds	r2, r3, #1
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014148:	b29b      	uxth	r3, r3
 801414a:	3b01      	subs	r3, #1
 801414c:	b29a      	uxth	r2, r3
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014152:	2300      	movs	r3, #0
 8014154:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801415a:	b29b      	uxth	r3, r3
 801415c:	2b00      	cmp	r3, #0
 801415e:	d11e      	bne.n	801419e <HAL_SPI_TransmitReceive+0x3ea>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014168:	d119      	bne.n	801419e <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 801416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416c:	f003 0304 	and.w	r3, r3, #4
 8014170:	2b00      	cmp	r3, #0
 8014172:	d10c      	bne.n	801418e <HAL_SPI_TransmitReceive+0x3da>
 8014174:	6a3b      	ldr	r3, [r7, #32]
 8014176:	f003 0308 	and.w	r3, r3, #8
 801417a:	2b00      	cmp	r3, #0
 801417c:	d007      	beq.n	801418e <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801418c:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	681a      	ldr	r2, [r3, #0]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801419c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	689b      	ldr	r3, [r3, #8]
 80141a4:	f003 0301 	and.w	r3, r3, #1
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d148      	bne.n	801423e <HAL_SPI_TransmitReceive+0x48a>
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d042      	beq.n	801423e <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80141be:	b29b      	uxth	r3, r3
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d923      	bls.n	801420c <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	68da      	ldr	r2, [r3, #12]
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141ce:	b292      	uxth	r2, r2
 80141d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d6:	1c9a      	adds	r2, r3, #2
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80141e2:	b29b      	uxth	r3, r3
 80141e4:	3b02      	subs	r3, #2
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	2b01      	cmp	r3, #1
 80141f8:	d81f      	bhi.n	801423a <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	685a      	ldr	r2, [r3, #4]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014208:	605a      	str	r2, [r3, #4]
 801420a:	e016      	b.n	801423a <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	f103 020c 	add.w	r2, r3, #12
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014218:	7812      	ldrb	r2, [r2, #0]
 801421a:	b2d2      	uxtb	r2, r2
 801421c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014222:	1c5a      	adds	r2, r3, #1
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801422e:	b29b      	uxth	r3, r3
 8014230:	3b01      	subs	r3, #1
 8014232:	b29a      	uxth	r2, r3
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801423a:	2301      	movs	r3, #1
 801423c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801423e:	f7fb fe43 	bl	800fec8 <HAL_GetTick>
 8014242:	4602      	mov	r2, r0
 8014244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801424a:	429a      	cmp	r2, r3
 801424c:	d803      	bhi.n	8014256 <HAL_SPI_TransmitReceive+0x4a2>
 801424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014254:	d102      	bne.n	801425c <HAL_SPI_TransmitReceive+0x4a8>
 8014256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014258:	2b00      	cmp	r3, #0
 801425a:	d103      	bne.n	8014264 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 801425c:	2303      	movs	r3, #3
 801425e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8014262:	e07d      	b.n	8014360 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014268:	b29b      	uxth	r3, r3
 801426a:	2b00      	cmp	r3, #0
 801426c:	f47f af37 	bne.w	80140de <HAL_SPI_TransmitReceive+0x32a>
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014276:	b29b      	uxth	r3, r3
 8014278:	2b00      	cmp	r3, #0
 801427a:	f47f af30 	bne.w	80140de <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014286:	d146      	bne.n	8014316 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8014288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801428a:	9300      	str	r3, [sp, #0]
 801428c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801428e:	2201      	movs	r2, #1
 8014290:	2101      	movs	r1, #1
 8014292:	68f8      	ldr	r0, [r7, #12]
 8014294:	f000 f872 	bl	801437c <SPI_WaitFlagStateUntilTimeout>
 8014298:	4603      	mov	r3, r0
 801429a:	2b00      	cmp	r3, #0
 801429c:	d009      	beq.n	80142b2 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80142a2:	f043 0202 	orr.w	r2, r3, #2
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80142aa:	2303      	movs	r3, #3
 80142ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80142b0:	e056      	b.n	8014360 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80142ba:	d105      	bne.n	80142c8 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	68db      	ldr	r3, [r3, #12]
 80142c2:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	e026      	b.n	8014316 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	330c      	adds	r3, #12
 80142ce:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80142d8:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142de:	2b02      	cmp	r3, #2
 80142e0:	d119      	bne.n	8014316 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80142e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142e4:	9300      	str	r3, [sp, #0]
 80142e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142e8:	2201      	movs	r2, #1
 80142ea:	2101      	movs	r1, #1
 80142ec:	68f8      	ldr	r0, [r7, #12]
 80142ee:	f000 f845 	bl	801437c <SPI_WaitFlagStateUntilTimeout>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d009      	beq.n	801430c <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80142fc:	f043 0202 	orr.w	r2, r3, #2
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8014304:	2303      	movs	r3, #3
 8014306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 801430a:	e029      	b.n	8014360 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	b2db      	uxtb	r3, r3
 8014312:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8014314:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	689b      	ldr	r3, [r3, #8]
 801431c:	f003 0310 	and.w	r3, r3, #16
 8014320:	2b10      	cmp	r3, #16
 8014322:	d10d      	bne.n	8014340 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014328:	f043 0202 	orr.w	r2, r3, #2
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8014338:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 801433a:	2301      	movs	r3, #1
 801433c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014342:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014344:	68f8      	ldr	r0, [r7, #12]
 8014346:	f000 f937 	bl	80145b8 <SPI_EndRxTxTransaction>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d006      	beq.n	801435e <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8014350:	2301      	movs	r3, #1
 8014352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	2220      	movs	r2, #32
 801435a:	661a      	str	r2, [r3, #96]	; 0x60
 801435c:	e000      	b.n	8014360 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 801435e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	2201      	movs	r2, #1
 8014364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2200      	movs	r2, #0
 801436c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014370:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8014374:	4618      	mov	r0, r3
 8014376:	3740      	adds	r7, #64	; 0x40
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b088      	sub	sp, #32
 8014380:	af00      	add	r7, sp, #0
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	603b      	str	r3, [r7, #0]
 8014388:	4613      	mov	r3, r2
 801438a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801438c:	f7fb fd9c 	bl	800fec8 <HAL_GetTick>
 8014390:	4602      	mov	r2, r0
 8014392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014394:	1a9b      	subs	r3, r3, r2
 8014396:	683a      	ldr	r2, [r7, #0]
 8014398:	4413      	add	r3, r2
 801439a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801439c:	f7fb fd94 	bl	800fec8 <HAL_GetTick>
 80143a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80143a2:	4b39      	ldr	r3, [pc, #228]	; (8014488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	015b      	lsls	r3, r3, #5
 80143a8:	0d1b      	lsrs	r3, r3, #20
 80143aa:	69fa      	ldr	r2, [r7, #28]
 80143ac:	fb02 f303 	mul.w	r3, r2, r3
 80143b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80143b2:	e054      	b.n	801445e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ba:	d050      	beq.n	801445e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80143bc:	f7fb fd84 	bl	800fec8 <HAL_GetTick>
 80143c0:	4602      	mov	r2, r0
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	69fa      	ldr	r2, [r7, #28]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d902      	bls.n	80143d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d13d      	bne.n	801444e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	685a      	ldr	r2, [r3, #4]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80143e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80143ea:	d111      	bne.n	8014410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	689b      	ldr	r3, [r3, #8]
 80143f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80143f4:	d004      	beq.n	8014400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	689b      	ldr	r3, [r3, #8]
 80143fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80143fe:	d107      	bne.n	8014410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801440e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014418:	d10f      	bne.n	801443a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	681a      	ldr	r2, [r3, #0]
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014428:	601a      	str	r2, [r3, #0]
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	2201      	movs	r2, #1
 801443e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	2200      	movs	r2, #0
 8014446:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801444a:	2303      	movs	r3, #3
 801444c:	e017      	b.n	801447e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d101      	bne.n	8014458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014454:	2300      	movs	r3, #0
 8014456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	3b01      	subs	r3, #1
 801445c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	689a      	ldr	r2, [r3, #8]
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	4013      	ands	r3, r2
 8014468:	68ba      	ldr	r2, [r7, #8]
 801446a:	429a      	cmp	r2, r3
 801446c:	bf0c      	ite	eq
 801446e:	2301      	moveq	r3, #1
 8014470:	2300      	movne	r3, #0
 8014472:	b2db      	uxtb	r3, r3
 8014474:	461a      	mov	r2, r3
 8014476:	79fb      	ldrb	r3, [r7, #7]
 8014478:	429a      	cmp	r2, r3
 801447a:	d19b      	bne.n	80143b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801447c:	2300      	movs	r3, #0
}
 801447e:	4618      	mov	r0, r3
 8014480:	3720      	adds	r7, #32
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	20000428 	.word	0x20000428

0801448c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b08a      	sub	sp, #40	; 0x28
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	607a      	str	r2, [r7, #4]
 8014498:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801449a:	2300      	movs	r3, #0
 801449c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801449e:	f7fb fd13 	bl	800fec8 <HAL_GetTick>
 80144a2:	4602      	mov	r2, r0
 80144a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a6:	1a9b      	subs	r3, r3, r2
 80144a8:	683a      	ldr	r2, [r7, #0]
 80144aa:	4413      	add	r3, r2
 80144ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80144ae:	f7fb fd0b 	bl	800fec8 <HAL_GetTick>
 80144b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	330c      	adds	r3, #12
 80144ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80144bc:	4b3d      	ldr	r3, [pc, #244]	; (80145b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	4613      	mov	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	4413      	add	r3, r2
 80144c6:	00da      	lsls	r2, r3, #3
 80144c8:	1ad3      	subs	r3, r2, r3
 80144ca:	0d1b      	lsrs	r3, r3, #20
 80144cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144ce:	fb02 f303 	mul.w	r3, r2, r3
 80144d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80144d4:	e060      	b.n	8014598 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80144dc:	d107      	bne.n	80144ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d104      	bne.n	80144ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	b2db      	uxtb	r3, r3
 80144ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80144ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144f4:	d050      	beq.n	8014598 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80144f6:	f7fb fce7 	bl	800fec8 <HAL_GetTick>
 80144fa:	4602      	mov	r2, r0
 80144fc:	6a3b      	ldr	r3, [r7, #32]
 80144fe:	1ad3      	subs	r3, r2, r3
 8014500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014502:	429a      	cmp	r2, r3
 8014504:	d902      	bls.n	801450c <SPI_WaitFifoStateUntilTimeout+0x80>
 8014506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014508:	2b00      	cmp	r3, #0
 801450a:	d13d      	bne.n	8014588 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	685a      	ldr	r2, [r3, #4]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801451a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014524:	d111      	bne.n	801454a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	689b      	ldr	r3, [r3, #8]
 801452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801452e:	d004      	beq.n	801453a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	689b      	ldr	r3, [r3, #8]
 8014534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014538:	d107      	bne.n	801454a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	681a      	ldr	r2, [r3, #0]
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014548:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801454e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014552:	d10f      	bne.n	8014574 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014562:	601a      	str	r2, [r3, #0]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	681a      	ldr	r2, [r3, #0]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014572:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2201      	movs	r2, #1
 8014578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2200      	movs	r2, #0
 8014580:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8014584:	2303      	movs	r3, #3
 8014586:	e010      	b.n	80145aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d101      	bne.n	8014592 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801458e:	2300      	movs	r3, #0
 8014590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	3b01      	subs	r3, #1
 8014596:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	689a      	ldr	r2, [r3, #8]
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	4013      	ands	r3, r2
 80145a2:	687a      	ldr	r2, [r7, #4]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d196      	bne.n	80144d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80145a8:	2300      	movs	r3, #0
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3728      	adds	r7, #40	; 0x28
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	20000428 	.word	0x20000428

080145b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b086      	sub	sp, #24
 80145bc:	af02      	add	r7, sp, #8
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	9300      	str	r3, [sp, #0]
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	2200      	movs	r2, #0
 80145cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f7ff ff5b 	bl	801448c <SPI_WaitFifoStateUntilTimeout>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d007      	beq.n	80145ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80145e0:	f043 0220 	orr.w	r2, r3, #32
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80145e8:	2303      	movs	r3, #3
 80145ea:	e027      	b.n	801463c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	9300      	str	r3, [sp, #0]
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	2200      	movs	r2, #0
 80145f4:	2180      	movs	r1, #128	; 0x80
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f7ff fec0 	bl	801437c <SPI_WaitFlagStateUntilTimeout>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d007      	beq.n	8014612 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014606:	f043 0220 	orr.w	r2, r3, #32
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801460e:	2303      	movs	r3, #3
 8014610:	e014      	b.n	801463c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	9300      	str	r3, [sp, #0]
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	2200      	movs	r2, #0
 801461a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801461e:	68f8      	ldr	r0, [r7, #12]
 8014620:	f7ff ff34 	bl	801448c <SPI_WaitFifoStateUntilTimeout>
 8014624:	4603      	mov	r3, r0
 8014626:	2b00      	cmp	r3, #0
 8014628:	d007      	beq.n	801463a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801462e:	f043 0220 	orr.w	r2, r3, #32
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014636:	2303      	movs	r3, #3
 8014638:	e000      	b.n	801463c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801463a:	2300      	movs	r3, #0
}
 801463c:	4618      	mov	r0, r3
 801463e:	3710      	adds	r7, #16
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 801464c:	4b06      	ldr	r3, [pc, #24]	; (8014668 <LL_PWR_SetRadioBusyTrigger+0x24>)
 801464e:	689b      	ldr	r3, [r3, #8]
 8014650:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014654:	4904      	ldr	r1, [pc, #16]	; (8014668 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	4313      	orrs	r3, r2
 801465a:	608b      	str	r3, [r1, #8]
}
 801465c:	bf00      	nop
 801465e:	370c      	adds	r7, #12
 8014660:	46bd      	mov	sp, r7
 8014662:	bc80      	pop	{r7}
 8014664:	4770      	bx	lr
 8014666:	bf00      	nop
 8014668:	58000400 	.word	0x58000400

0801466c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 801466c:	b480      	push	{r7}
 801466e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8014670:	4b05      	ldr	r3, [pc, #20]	; (8014688 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8014672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014676:	4a04      	ldr	r2, [pc, #16]	; (8014688 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8014678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8014680:	bf00      	nop
 8014682:	46bd      	mov	sp, r7
 8014684:	bc80      	pop	{r7}
 8014686:	4770      	bx	lr
 8014688:	58000400 	.word	0x58000400

0801468c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 801468c:	b480      	push	{r7}
 801468e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8014690:	4b05      	ldr	r3, [pc, #20]	; (80146a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8014692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014696:	4a04      	ldr	r2, [pc, #16]	; (80146a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8014698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801469c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80146a0:	bf00      	nop
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bc80      	pop	{r7}
 80146a6:	4770      	bx	lr
 80146a8:	58000400 	.word	0x58000400

080146ac <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80146ac:	b480      	push	{r7}
 80146ae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80146b0:	4b03      	ldr	r3, [pc, #12]	; (80146c0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80146b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80146b6:	619a      	str	r2, [r3, #24]
}
 80146b8:	bf00      	nop
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bc80      	pop	{r7}
 80146be:	4770      	bx	lr
 80146c0:	58000400 	.word	0x58000400

080146c4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80146c4:	b480      	push	{r7}
 80146c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80146c8:	4b06      	ldr	r3, [pc, #24]	; (80146e4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80146ca:	695b      	ldr	r3, [r3, #20]
 80146cc:	f003 0302 	and.w	r3, r3, #2
 80146d0:	2b02      	cmp	r3, #2
 80146d2:	d101      	bne.n	80146d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80146d4:	2301      	movs	r3, #1
 80146d6:	e000      	b.n	80146da <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	46bd      	mov	sp, r7
 80146de:	bc80      	pop	{r7}
 80146e0:	4770      	bx	lr
 80146e2:	bf00      	nop
 80146e4:	58000400 	.word	0x58000400

080146e8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80146e8:	b480      	push	{r7}
 80146ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80146ec:	4b06      	ldr	r3, [pc, #24]	; (8014708 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80146ee:	695b      	ldr	r3, [r3, #20]
 80146f0:	f003 0304 	and.w	r3, r3, #4
 80146f4:	2b04      	cmp	r3, #4
 80146f6:	d101      	bne.n	80146fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80146f8:	2301      	movs	r3, #1
 80146fa:	e000      	b.n	80146fe <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80146fc:	2300      	movs	r3, #0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	46bd      	mov	sp, r7
 8014702:	bc80      	pop	{r7}
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop
 8014708:	58000400 	.word	0x58000400

0801470c <LL_RCC_RF_DisableReset>:
{
 801470c:	b480      	push	{r7}
 801470e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8014710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801471c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8014724:	bf00      	nop
 8014726:	46bd      	mov	sp, r7
 8014728:	bc80      	pop	{r7}
 801472a:	4770      	bx	lr

0801472c <LL_RCC_IsRFUnderReset>:
{
 801472c:	b480      	push	{r7}
 801472e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8014730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801473c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014740:	d101      	bne.n	8014746 <LL_RCC_IsRFUnderReset+0x1a>
 8014742:	2301      	movs	r3, #1
 8014744:	e000      	b.n	8014748 <LL_RCC_IsRFUnderReset+0x1c>
 8014746:	2300      	movs	r3, #0
}
 8014748:	4618      	mov	r0, r3
 801474a:	46bd      	mov	sp, r7
 801474c:	bc80      	pop	{r7}
 801474e:	4770      	bx	lr

08014750 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8014750:	b480      	push	{r7}
 8014752:	b083      	sub	sp, #12
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8014758:	4b06      	ldr	r3, [pc, #24]	; (8014774 <LL_EXTI_EnableIT_32_63+0x24>)
 801475a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801475e:	4905      	ldr	r1, [pc, #20]	; (8014774 <LL_EXTI_EnableIT_32_63+0x24>)
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	4313      	orrs	r3, r2
 8014764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8014768:	bf00      	nop
 801476a:	370c      	adds	r7, #12
 801476c:	46bd      	mov	sp, r7
 801476e:	bc80      	pop	{r7}
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	58000800 	.word	0x58000800

08014778 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d103      	bne.n	801478e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8014786:	2301      	movs	r3, #1
 8014788:	73fb      	strb	r3, [r7, #15]
    return status;
 801478a:	7bfb      	ldrb	r3, [r7, #15]
 801478c:	e052      	b.n	8014834 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 801478e:	2300      	movs	r3, #0
 8014790:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	799b      	ldrb	r3, [r3, #6]
 8014796:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8014798:	7bbb      	ldrb	r3, [r7, #14]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d002      	beq.n	80147a4 <HAL_SUBGHZ_Init+0x2c>
 801479e:	7bbb      	ldrb	r3, [r7, #14]
 80147a0:	2b03      	cmp	r3, #3
 80147a2:	d109      	bne.n	80147b8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f7ee fe18 	bl	80033e0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80147b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80147b4:	f7ff ffcc 	bl	8014750 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80147b8:	7bbb      	ldrb	r3, [r7, #14]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d126      	bne.n	801480c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2202      	movs	r2, #2
 80147c2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80147c4:	f7ff ffa2 	bl	801470c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80147c8:	4b1c      	ldr	r3, [pc, #112]	; (801483c <HAL_SUBGHZ_Init+0xc4>)
 80147ca:	681a      	ldr	r2, [r3, #0]
 80147cc:	4613      	mov	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	1a9b      	subs	r3, r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	0cdb      	lsrs	r3, r3, #19
 80147d6:	2264      	movs	r2, #100	; 0x64
 80147d8:	fb02 f303 	mul.w	r3, r2, r3
 80147dc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d105      	bne.n	80147f0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80147e4:	2301      	movs	r3, #1
 80147e6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2201      	movs	r2, #1
 80147ec:	609a      	str	r2, [r3, #8]
        break;
 80147ee:	e007      	b.n	8014800 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	3b01      	subs	r3, #1
 80147f4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80147f6:	f7ff ff99 	bl	801472c <LL_RCC_IsRFUnderReset>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d1ee      	bne.n	80147de <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8014800:	f7ff ff34 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8014804:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014808:	f7ff ff1c 	bl	8014644 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 801480c:	f7ff ff4e 	bl	80146ac <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8014810:	7bfb      	ldrb	r3, [r7, #15]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d10a      	bne.n	801482c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	4618      	mov	r0, r3
 801481c:	f000 fab6 	bl	8014d8c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2201      	movs	r2, #1
 8014824:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2200      	movs	r2, #0
 801482a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2201      	movs	r2, #1
 8014830:	719a      	strb	r2, [r3, #6]

  return status;
 8014832:	7bfb      	ldrb	r3, [r7, #15]
}
 8014834:	4618      	mov	r0, r3
 8014836:	3710      	adds	r7, #16
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	20000428 	.word	0x20000428

08014840 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	607a      	str	r2, [r7, #4]
 801484a:	461a      	mov	r2, r3
 801484c:	460b      	mov	r3, r1
 801484e:	817b      	strh	r3, [r7, #10]
 8014850:	4613      	mov	r3, r2
 8014852:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	799b      	ldrb	r3, [r3, #6]
 8014858:	b2db      	uxtb	r3, r3
 801485a:	2b01      	cmp	r3, #1
 801485c:	d14a      	bne.n	80148f4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	795b      	ldrb	r3, [r3, #5]
 8014862:	2b01      	cmp	r3, #1
 8014864:	d101      	bne.n	801486a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8014866:	2302      	movs	r3, #2
 8014868:	e045      	b.n	80148f6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	2201      	movs	r2, #1
 801486e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2202      	movs	r2, #2
 8014874:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8014876:	68f8      	ldr	r0, [r7, #12]
 8014878:	f000 fb56 	bl	8014f28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 801487c:	f7ff ff06 	bl	801468c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8014880:	210d      	movs	r1, #13
 8014882:	68f8      	ldr	r0, [r7, #12]
 8014884:	f000 faa2 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8014888:	897b      	ldrh	r3, [r7, #10]
 801488a:	0a1b      	lsrs	r3, r3, #8
 801488c:	b29b      	uxth	r3, r3
 801488e:	b2db      	uxtb	r3, r3
 8014890:	4619      	mov	r1, r3
 8014892:	68f8      	ldr	r0, [r7, #12]
 8014894:	f000 fa9a 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8014898:	897b      	ldrh	r3, [r7, #10]
 801489a:	b2db      	uxtb	r3, r3
 801489c:	4619      	mov	r1, r3
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f000 fa94 	bl	8014dcc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80148a4:	2300      	movs	r3, #0
 80148a6:	82bb      	strh	r3, [r7, #20]
 80148a8:	e00a      	b.n	80148c0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80148aa:	8abb      	ldrh	r3, [r7, #20]
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	4413      	add	r3, r2
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	4619      	mov	r1, r3
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f000 fa89 	bl	8014dcc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80148ba:	8abb      	ldrh	r3, [r7, #20]
 80148bc:	3301      	adds	r3, #1
 80148be:	82bb      	strh	r3, [r7, #20]
 80148c0:	8aba      	ldrh	r2, [r7, #20]
 80148c2:	893b      	ldrh	r3, [r7, #8]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d3f0      	bcc.n	80148aa <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80148c8:	f7ff fed0 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f000 fb4f 	bl	8014f70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	689b      	ldr	r3, [r3, #8]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d002      	beq.n	80148e0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80148da:	2301      	movs	r3, #1
 80148dc:	75fb      	strb	r3, [r7, #23]
 80148de:	e001      	b.n	80148e4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80148e0:	2300      	movs	r3, #0
 80148e2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2201      	movs	r2, #1
 80148e8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2200      	movs	r2, #0
 80148ee:	715a      	strb	r2, [r3, #5]

    return status;
 80148f0:	7dfb      	ldrb	r3, [r7, #23]
 80148f2:	e000      	b.n	80148f6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80148f4:	2302      	movs	r3, #2
  }
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3718      	adds	r7, #24
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}

080148fe <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80148fe:	b580      	push	{r7, lr}
 8014900:	b088      	sub	sp, #32
 8014902:	af00      	add	r7, sp, #0
 8014904:	60f8      	str	r0, [r7, #12]
 8014906:	607a      	str	r2, [r7, #4]
 8014908:	461a      	mov	r2, r3
 801490a:	460b      	mov	r3, r1
 801490c:	817b      	strh	r3, [r7, #10]
 801490e:	4613      	mov	r3, r2
 8014910:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	799b      	ldrb	r3, [r3, #6]
 801491a:	b2db      	uxtb	r3, r3
 801491c:	2b01      	cmp	r3, #1
 801491e:	d14a      	bne.n	80149b6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	795b      	ldrb	r3, [r3, #5]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d101      	bne.n	801492c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8014928:	2302      	movs	r3, #2
 801492a:	e045      	b.n	80149b8 <HAL_SUBGHZ_ReadRegisters+0xba>
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2201      	movs	r2, #1
 8014930:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8014932:	68f8      	ldr	r0, [r7, #12]
 8014934:	f000 faf8 	bl	8014f28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8014938:	f7ff fea8 	bl	801468c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 801493c:	211d      	movs	r1, #29
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f000 fa44 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8014944:	897b      	ldrh	r3, [r7, #10]
 8014946:	0a1b      	lsrs	r3, r3, #8
 8014948:	b29b      	uxth	r3, r3
 801494a:	b2db      	uxtb	r3, r3
 801494c:	4619      	mov	r1, r3
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f000 fa3c 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8014954:	897b      	ldrh	r3, [r7, #10]
 8014956:	b2db      	uxtb	r3, r3
 8014958:	4619      	mov	r1, r3
 801495a:	68f8      	ldr	r0, [r7, #12]
 801495c:	f000 fa36 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8014960:	2100      	movs	r1, #0
 8014962:	68f8      	ldr	r0, [r7, #12]
 8014964:	f000 fa32 	bl	8014dcc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8014968:	2300      	movs	r3, #0
 801496a:	82fb      	strh	r3, [r7, #22]
 801496c:	e009      	b.n	8014982 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 801496e:	69b9      	ldr	r1, [r7, #24]
 8014970:	68f8      	ldr	r0, [r7, #12]
 8014972:	f000 fa81 	bl	8014e78 <SUBGHZSPI_Receive>
      pData++;
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	3301      	adds	r3, #1
 801497a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 801497c:	8afb      	ldrh	r3, [r7, #22]
 801497e:	3301      	adds	r3, #1
 8014980:	82fb      	strh	r3, [r7, #22]
 8014982:	8afa      	ldrh	r2, [r7, #22]
 8014984:	893b      	ldrh	r3, [r7, #8]
 8014986:	429a      	cmp	r2, r3
 8014988:	d3f1      	bcc.n	801496e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 801498a:	f7ff fe6f 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 801498e:	68f8      	ldr	r0, [r7, #12]
 8014990:	f000 faee 	bl	8014f70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	689b      	ldr	r3, [r3, #8]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d002      	beq.n	80149a2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 801499c:	2301      	movs	r3, #1
 801499e:	77fb      	strb	r3, [r7, #31]
 80149a0:	e001      	b.n	80149a6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80149a2:	2300      	movs	r3, #0
 80149a4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	2201      	movs	r2, #1
 80149aa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	2200      	movs	r2, #0
 80149b0:	715a      	strb	r2, [r3, #5]

    return status;
 80149b2:	7ffb      	ldrb	r3, [r7, #31]
 80149b4:	e000      	b.n	80149b8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80149b6:	2302      	movs	r3, #2
  }
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3720      	adds	r7, #32
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}

080149c0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b086      	sub	sp, #24
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	607a      	str	r2, [r7, #4]
 80149ca:	461a      	mov	r2, r3
 80149cc:	460b      	mov	r3, r1
 80149ce:	72fb      	strb	r3, [r7, #11]
 80149d0:	4613      	mov	r3, r2
 80149d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	799b      	ldrb	r3, [r3, #6]
 80149d8:	b2db      	uxtb	r3, r3
 80149da:	2b01      	cmp	r3, #1
 80149dc:	d14a      	bne.n	8014a74 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	795b      	ldrb	r3, [r3, #5]
 80149e2:	2b01      	cmp	r3, #1
 80149e4:	d101      	bne.n	80149ea <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80149e6:	2302      	movs	r3, #2
 80149e8:	e045      	b.n	8014a76 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2201      	movs	r2, #1
 80149ee:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80149f0:	68f8      	ldr	r0, [r7, #12]
 80149f2:	f000 fa99 	bl	8014f28 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80149f6:	7afb      	ldrb	r3, [r7, #11]
 80149f8:	2b84      	cmp	r3, #132	; 0x84
 80149fa:	d002      	beq.n	8014a02 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80149fc:	7afb      	ldrb	r3, [r7, #11]
 80149fe:	2b94      	cmp	r3, #148	; 0x94
 8014a00:	d103      	bne.n	8014a0a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	2201      	movs	r2, #1
 8014a06:	711a      	strb	r2, [r3, #4]
 8014a08:	e002      	b.n	8014a10 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8014a10:	f7ff fe3c 	bl	801468c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8014a14:	7afb      	ldrb	r3, [r7, #11]
 8014a16:	4619      	mov	r1, r3
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f000 f9d7 	bl	8014dcc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8014a1e:	2300      	movs	r3, #0
 8014a20:	82bb      	strh	r3, [r7, #20]
 8014a22:	e00a      	b.n	8014a3a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8014a24:	8abb      	ldrh	r3, [r7, #20]
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	4413      	add	r3, r2
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f000 f9cc 	bl	8014dcc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8014a34:	8abb      	ldrh	r3, [r7, #20]
 8014a36:	3301      	adds	r3, #1
 8014a38:	82bb      	strh	r3, [r7, #20]
 8014a3a:	8aba      	ldrh	r2, [r7, #20]
 8014a3c:	893b      	ldrh	r3, [r7, #8]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d3f0      	bcc.n	8014a24 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8014a42:	f7ff fe13 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8014a46:	7afb      	ldrb	r3, [r7, #11]
 8014a48:	2b84      	cmp	r3, #132	; 0x84
 8014a4a:	d002      	beq.n	8014a52 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f000 fa8f 	bl	8014f70 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	689b      	ldr	r3, [r3, #8]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d002      	beq.n	8014a60 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	75fb      	strb	r3, [r7, #23]
 8014a5e:	e001      	b.n	8014a64 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8014a60:	2300      	movs	r3, #0
 8014a62:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	2201      	movs	r2, #1
 8014a68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	715a      	strb	r2, [r3, #5]

    return status;
 8014a70:	7dfb      	ldrb	r3, [r7, #23]
 8014a72:	e000      	b.n	8014a76 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8014a74:	2302      	movs	r3, #2
  }
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3718      	adds	r7, #24
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b088      	sub	sp, #32
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	60f8      	str	r0, [r7, #12]
 8014a86:	607a      	str	r2, [r7, #4]
 8014a88:	461a      	mov	r2, r3
 8014a8a:	460b      	mov	r3, r1
 8014a8c:	72fb      	strb	r3, [r7, #11]
 8014a8e:	4613      	mov	r3, r2
 8014a90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	799b      	ldrb	r3, [r3, #6]
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d13d      	bne.n	8014b1c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	795b      	ldrb	r3, [r3, #5]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d101      	bne.n	8014aac <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8014aa8:	2302      	movs	r3, #2
 8014aaa:	e038      	b.n	8014b1e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2201      	movs	r2, #1
 8014ab0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8014ab2:	68f8      	ldr	r0, [r7, #12]
 8014ab4:	f000 fa38 	bl	8014f28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8014ab8:	f7ff fde8 	bl	801468c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8014abc:	7afb      	ldrb	r3, [r7, #11]
 8014abe:	4619      	mov	r1, r3
 8014ac0:	68f8      	ldr	r0, [r7, #12]
 8014ac2:	f000 f983 	bl	8014dcc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8014ac6:	2100      	movs	r1, #0
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f000 f97f 	bl	8014dcc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8014ace:	2300      	movs	r3, #0
 8014ad0:	82fb      	strh	r3, [r7, #22]
 8014ad2:	e009      	b.n	8014ae8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8014ad4:	69b9      	ldr	r1, [r7, #24]
 8014ad6:	68f8      	ldr	r0, [r7, #12]
 8014ad8:	f000 f9ce 	bl	8014e78 <SUBGHZSPI_Receive>
      pData++;
 8014adc:	69bb      	ldr	r3, [r7, #24]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8014ae2:	8afb      	ldrh	r3, [r7, #22]
 8014ae4:	3301      	adds	r3, #1
 8014ae6:	82fb      	strh	r3, [r7, #22]
 8014ae8:	8afa      	ldrh	r2, [r7, #22]
 8014aea:	893b      	ldrh	r3, [r7, #8]
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d3f1      	bcc.n	8014ad4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8014af0:	f7ff fdbc 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8014af4:	68f8      	ldr	r0, [r7, #12]
 8014af6:	f000 fa3b 	bl	8014f70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	689b      	ldr	r3, [r3, #8]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d002      	beq.n	8014b08 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8014b02:	2301      	movs	r3, #1
 8014b04:	77fb      	strb	r3, [r7, #31]
 8014b06:	e001      	b.n	8014b0c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2201      	movs	r2, #1
 8014b10:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2200      	movs	r2, #0
 8014b16:	715a      	strb	r2, [r3, #5]

    return status;
 8014b18:	7ffb      	ldrb	r3, [r7, #31]
 8014b1a:	e000      	b.n	8014b1e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014b1c:	2302      	movs	r3, #2
  }
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3720      	adds	r7, #32
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}

08014b26 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8014b26:	b580      	push	{r7, lr}
 8014b28:	b086      	sub	sp, #24
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	60f8      	str	r0, [r7, #12]
 8014b2e:	607a      	str	r2, [r7, #4]
 8014b30:	461a      	mov	r2, r3
 8014b32:	460b      	mov	r3, r1
 8014b34:	72fb      	strb	r3, [r7, #11]
 8014b36:	4613      	mov	r3, r2
 8014b38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	799b      	ldrb	r3, [r3, #6]
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d13e      	bne.n	8014bc2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	795b      	ldrb	r3, [r3, #5]
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	d101      	bne.n	8014b50 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8014b4c:	2302      	movs	r3, #2
 8014b4e:	e039      	b.n	8014bc4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	2201      	movs	r2, #1
 8014b54:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8014b56:	68f8      	ldr	r0, [r7, #12]
 8014b58:	f000 f9e6 	bl	8014f28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8014b5c:	f7ff fd96 	bl	801468c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8014b60:	210e      	movs	r1, #14
 8014b62:	68f8      	ldr	r0, [r7, #12]
 8014b64:	f000 f932 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8014b68:	7afb      	ldrb	r3, [r7, #11]
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	68f8      	ldr	r0, [r7, #12]
 8014b6e:	f000 f92d 	bl	8014dcc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8014b72:	2300      	movs	r3, #0
 8014b74:	82bb      	strh	r3, [r7, #20]
 8014b76:	e00a      	b.n	8014b8e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8014b78:	8abb      	ldrh	r3, [r7, #20]
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	4619      	mov	r1, r3
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f000 f922 	bl	8014dcc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8014b88:	8abb      	ldrh	r3, [r7, #20]
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	82bb      	strh	r3, [r7, #20]
 8014b8e:	8aba      	ldrh	r2, [r7, #20]
 8014b90:	893b      	ldrh	r3, [r7, #8]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d3f0      	bcc.n	8014b78 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8014b96:	f7ff fd69 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8014b9a:	68f8      	ldr	r0, [r7, #12]
 8014b9c:	f000 f9e8 	bl	8014f70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	689b      	ldr	r3, [r3, #8]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d002      	beq.n	8014bae <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8014ba8:	2301      	movs	r3, #1
 8014baa:	75fb      	strb	r3, [r7, #23]
 8014bac:	e001      	b.n	8014bb2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	715a      	strb	r2, [r3, #5]

    return status;
 8014bbe:	7dfb      	ldrb	r3, [r7, #23]
 8014bc0:	e000      	b.n	8014bc4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8014bc2:	2302      	movs	r3, #2
  }
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3718      	adds	r7, #24
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}

08014bcc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b088      	sub	sp, #32
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	607a      	str	r2, [r7, #4]
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	460b      	mov	r3, r1
 8014bda:	72fb      	strb	r3, [r7, #11]
 8014bdc:	4613      	mov	r3, r2
 8014bde:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	799b      	ldrb	r3, [r3, #6]
 8014be8:	b2db      	uxtb	r3, r3
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d141      	bne.n	8014c72 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	795b      	ldrb	r3, [r3, #5]
 8014bf2:	2b01      	cmp	r3, #1
 8014bf4:	d101      	bne.n	8014bfa <HAL_SUBGHZ_ReadBuffer+0x2e>
 8014bf6:	2302      	movs	r3, #2
 8014bf8:	e03c      	b.n	8014c74 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2201      	movs	r2, #1
 8014bfe:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8014c00:	68f8      	ldr	r0, [r7, #12]
 8014c02:	f000 f991 	bl	8014f28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8014c06:	f7ff fd41 	bl	801468c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8014c0a:	211e      	movs	r1, #30
 8014c0c:	68f8      	ldr	r0, [r7, #12]
 8014c0e:	f000 f8dd 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8014c12:	7afb      	ldrb	r3, [r7, #11]
 8014c14:	4619      	mov	r1, r3
 8014c16:	68f8      	ldr	r0, [r7, #12]
 8014c18:	f000 f8d8 	bl	8014dcc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8014c1c:	2100      	movs	r1, #0
 8014c1e:	68f8      	ldr	r0, [r7, #12]
 8014c20:	f000 f8d4 	bl	8014dcc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8014c24:	2300      	movs	r3, #0
 8014c26:	82fb      	strh	r3, [r7, #22]
 8014c28:	e009      	b.n	8014c3e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8014c2a:	69b9      	ldr	r1, [r7, #24]
 8014c2c:	68f8      	ldr	r0, [r7, #12]
 8014c2e:	f000 f923 	bl	8014e78 <SUBGHZSPI_Receive>
      pData++;
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	3301      	adds	r3, #1
 8014c36:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8014c38:	8afb      	ldrh	r3, [r7, #22]
 8014c3a:	3301      	adds	r3, #1
 8014c3c:	82fb      	strh	r3, [r7, #22]
 8014c3e:	8afa      	ldrh	r2, [r7, #22]
 8014c40:	893b      	ldrh	r3, [r7, #8]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d3f1      	bcc.n	8014c2a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8014c46:	f7ff fd11 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8014c4a:	68f8      	ldr	r0, [r7, #12]
 8014c4c:	f000 f990 	bl	8014f70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	689b      	ldr	r3, [r3, #8]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d002      	beq.n	8014c5e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8014c58:	2301      	movs	r3, #1
 8014c5a:	77fb      	strb	r3, [r7, #31]
 8014c5c:	e001      	b.n	8014c62 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2201      	movs	r2, #1
 8014c66:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	715a      	strb	r2, [r3, #5]

    return status;
 8014c6e:	7ffb      	ldrb	r3, [r7, #31]
 8014c70:	e000      	b.n	8014c74 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8014c72:	2302      	movs	r3, #2
  }
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3720      	adds	r7, #32
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b084      	sub	sp, #16
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8014c84:	2300      	movs	r3, #0
 8014c86:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8014c88:	f107 020c 	add.w	r2, r7, #12
 8014c8c:	2302      	movs	r3, #2
 8014c8e:	2112      	movs	r1, #18
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7ff fef4 	bl	8014a7e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8014c96:	7b3b      	ldrb	r3, [r7, #12]
 8014c98:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8014c9a:	89fb      	ldrh	r3, [r7, #14]
 8014c9c:	021b      	lsls	r3, r3, #8
 8014c9e:	b21a      	sxth	r2, r3
 8014ca0:	7b7b      	ldrb	r3, [r7, #13]
 8014ca2:	b21b      	sxth	r3, r3
 8014ca4:	4313      	orrs	r3, r2
 8014ca6:	b21b      	sxth	r3, r3
 8014ca8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8014caa:	f107 020c 	add.w	r2, r7, #12
 8014cae:	2302      	movs	r3, #2
 8014cb0:	2102      	movs	r1, #2
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff fe84 	bl	80149c0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8014cb8:	89fb      	ldrh	r3, [r7, #14]
 8014cba:	f003 0301 	and.w	r3, r3, #1
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d002      	beq.n	8014cc8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f7fa fdc4 	bl	800f850 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8014cc8:	89fb      	ldrh	r3, [r7, #14]
 8014cca:	085b      	lsrs	r3, r3, #1
 8014ccc:	f003 0301 	and.w	r3, r3, #1
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d002      	beq.n	8014cda <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f7fa fdc9 	bl	800f86c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8014cda:	89fb      	ldrh	r3, [r7, #14]
 8014cdc:	089b      	lsrs	r3, r3, #2
 8014cde:	f003 0301 	and.w	r3, r3, #1
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d002      	beq.n	8014cec <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f7fa fe18 	bl	800f91c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8014cec:	89fb      	ldrh	r3, [r7, #14]
 8014cee:	08db      	lsrs	r3, r3, #3
 8014cf0:	f003 0301 	and.w	r3, r3, #1
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d002      	beq.n	8014cfe <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7fa fe1d 	bl	800f938 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8014cfe:	89fb      	ldrh	r3, [r7, #14]
 8014d00:	091b      	lsrs	r3, r3, #4
 8014d02:	f003 0301 	and.w	r3, r3, #1
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d002      	beq.n	8014d10 <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7fa fe22 	bl	800f954 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8014d10:	89fb      	ldrh	r3, [r7, #14]
 8014d12:	095b      	lsrs	r3, r3, #5
 8014d14:	f003 0301 	and.w	r3, r3, #1
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d002      	beq.n	8014d22 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f7fa fdef 	bl	800f900 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8014d22:	89fb      	ldrh	r3, [r7, #14]
 8014d24:	099b      	lsrs	r3, r3, #6
 8014d26:	f003 0301 	and.w	r3, r3, #1
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d002      	beq.n	8014d34 <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f7fa fdaa 	bl	800f888 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8014d34:	89fb      	ldrh	r3, [r7, #14]
 8014d36:	09db      	lsrs	r3, r3, #7
 8014d38:	f003 0301 	and.w	r3, r3, #1
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d00e      	beq.n	8014d5e <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8014d40:	89fb      	ldrh	r3, [r7, #14]
 8014d42:	0a1b      	lsrs	r3, r3, #8
 8014d44:	f003 0301 	and.w	r3, r3, #1
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d004      	beq.n	8014d56 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8014d4c:	2101      	movs	r1, #1
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	f7fa fda8 	bl	800f8a4 <HAL_SUBGHZ_CADStatusCallback>
 8014d54:	e003      	b.n	8014d5e <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8014d56:	2100      	movs	r1, #0
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f7fa fda3 	bl	800f8a4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8014d5e:	89fb      	ldrh	r3, [r7, #14]
 8014d60:	0a5b      	lsrs	r3, r3, #9
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d002      	beq.n	8014d70 <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7fa fdb8 	bl	800f8e0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8014d70:	89fb      	ldrh	r3, [r7, #14]
 8014d72:	0b9b      	lsrs	r3, r3, #14
 8014d74:	f003 0301 	and.w	r3, r3, #1
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d002      	beq.n	8014d82 <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f7fa fdf7 	bl	800f970 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8014d82:	bf00      	nop
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
	...

08014d8c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b083      	sub	sp, #12
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8014d94:	4b0c      	ldr	r3, [pc, #48]	; (8014dc8 <SUBGHZSPI_Init+0x3c>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	4a0b      	ldr	r2, [pc, #44]	; (8014dc8 <SUBGHZSPI_Init+0x3c>)
 8014d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014d9e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8014da0:	4a09      	ldr	r2, [pc, #36]	; (8014dc8 <SUBGHZSPI_Init+0x3c>)
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8014da8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8014daa:	4b07      	ldr	r3, [pc, #28]	; (8014dc8 <SUBGHZSPI_Init+0x3c>)
 8014dac:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8014db0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8014db2:	4b05      	ldr	r3, [pc, #20]	; (8014dc8 <SUBGHZSPI_Init+0x3c>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	4a04      	ldr	r2, [pc, #16]	; (8014dc8 <SUBGHZSPI_Init+0x3c>)
 8014db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dbc:	6013      	str	r3, [r2, #0]
}
 8014dbe:	bf00      	nop
 8014dc0:	370c      	adds	r7, #12
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bc80      	pop	{r7}
 8014dc6:	4770      	bx	lr
 8014dc8:	58010000 	.word	0x58010000

08014dcc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b087      	sub	sp, #28
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8014ddc:	4b23      	ldr	r3, [pc, #140]	; (8014e6c <SUBGHZSPI_Transmit+0xa0>)
 8014dde:	681a      	ldr	r2, [r3, #0]
 8014de0:	4613      	mov	r3, r2
 8014de2:	00db      	lsls	r3, r3, #3
 8014de4:	1a9b      	subs	r3, r3, r2
 8014de6:	009b      	lsls	r3, r3, #2
 8014de8:	0cdb      	lsrs	r3, r3, #19
 8014dea:	2264      	movs	r2, #100	; 0x64
 8014dec:	fb02 f303 	mul.w	r3, r2, r3
 8014df0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d105      	bne.n	8014e04 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2201      	movs	r2, #1
 8014e00:	609a      	str	r2, [r3, #8]
      break;
 8014e02:	e008      	b.n	8014e16 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	3b01      	subs	r3, #1
 8014e08:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8014e0a:	4b19      	ldr	r3, [pc, #100]	; (8014e70 <SUBGHZSPI_Transmit+0xa4>)
 8014e0c:	689b      	ldr	r3, [r3, #8]
 8014e0e:	f003 0302 	and.w	r3, r3, #2
 8014e12:	2b02      	cmp	r3, #2
 8014e14:	d1ed      	bne.n	8014df2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8014e16:	4b17      	ldr	r3, [pc, #92]	; (8014e74 <SUBGHZSPI_Transmit+0xa8>)
 8014e18:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	78fa      	ldrb	r2, [r7, #3]
 8014e1e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8014e20:	4b12      	ldr	r3, [pc, #72]	; (8014e6c <SUBGHZSPI_Transmit+0xa0>)
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	4613      	mov	r3, r2
 8014e26:	00db      	lsls	r3, r3, #3
 8014e28:	1a9b      	subs	r3, r3, r2
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	0cdb      	lsrs	r3, r3, #19
 8014e2e:	2264      	movs	r2, #100	; 0x64
 8014e30:	fb02 f303 	mul.w	r3, r2, r3
 8014e34:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d105      	bne.n	8014e48 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2201      	movs	r2, #1
 8014e44:	609a      	str	r2, [r3, #8]
      break;
 8014e46:	e008      	b.n	8014e5a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	3b01      	subs	r3, #1
 8014e4c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8014e4e:	4b08      	ldr	r3, [pc, #32]	; (8014e70 <SUBGHZSPI_Transmit+0xa4>)
 8014e50:	689b      	ldr	r3, [r3, #8]
 8014e52:	f003 0301 	and.w	r3, r3, #1
 8014e56:	2b01      	cmp	r3, #1
 8014e58:	d1ed      	bne.n	8014e36 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8014e5a:	4b05      	ldr	r3, [pc, #20]	; (8014e70 <SUBGHZSPI_Transmit+0xa4>)
 8014e5c:	68db      	ldr	r3, [r3, #12]

  return status;
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	371c      	adds	r7, #28
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bc80      	pop	{r7}
 8014e68:	4770      	bx	lr
 8014e6a:	bf00      	nop
 8014e6c:	20000428 	.word	0x20000428
 8014e70:	58010000 	.word	0x58010000
 8014e74:	5801000c 	.word	0x5801000c

08014e78 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8014e78:	b480      	push	{r7}
 8014e7a:	b087      	sub	sp, #28
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014e82:	2300      	movs	r3, #0
 8014e84:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8014e86:	4b25      	ldr	r3, [pc, #148]	; (8014f1c <SUBGHZSPI_Receive+0xa4>)
 8014e88:	681a      	ldr	r2, [r3, #0]
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	00db      	lsls	r3, r3, #3
 8014e8e:	1a9b      	subs	r3, r3, r2
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	0cdb      	lsrs	r3, r3, #19
 8014e94:	2264      	movs	r2, #100	; 0x64
 8014e96:	fb02 f303 	mul.w	r3, r2, r3
 8014e9a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d105      	bne.n	8014eae <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2201      	movs	r2, #1
 8014eaa:	609a      	str	r2, [r3, #8]
      break;
 8014eac:	e008      	b.n	8014ec0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	3b01      	subs	r3, #1
 8014eb2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8014eb4:	4b1a      	ldr	r3, [pc, #104]	; (8014f20 <SUBGHZSPI_Receive+0xa8>)
 8014eb6:	689b      	ldr	r3, [r3, #8]
 8014eb8:	f003 0302 	and.w	r3, r3, #2
 8014ebc:	2b02      	cmp	r3, #2
 8014ebe:	d1ed      	bne.n	8014e9c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8014ec0:	4b18      	ldr	r3, [pc, #96]	; (8014f24 <SUBGHZSPI_Receive+0xac>)
 8014ec2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	22ff      	movs	r2, #255	; 0xff
 8014ec8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8014eca:	4b14      	ldr	r3, [pc, #80]	; (8014f1c <SUBGHZSPI_Receive+0xa4>)
 8014ecc:	681a      	ldr	r2, [r3, #0]
 8014ece:	4613      	mov	r3, r2
 8014ed0:	00db      	lsls	r3, r3, #3
 8014ed2:	1a9b      	subs	r3, r3, r2
 8014ed4:	009b      	lsls	r3, r3, #2
 8014ed6:	0cdb      	lsrs	r3, r3, #19
 8014ed8:	2264      	movs	r2, #100	; 0x64
 8014eda:	fb02 f303 	mul.w	r3, r2, r3
 8014ede:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d105      	bne.n	8014ef2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2201      	movs	r2, #1
 8014eee:	609a      	str	r2, [r3, #8]
      break;
 8014ef0:	e008      	b.n	8014f04 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8014ef8:	4b09      	ldr	r3, [pc, #36]	; (8014f20 <SUBGHZSPI_Receive+0xa8>)
 8014efa:	689b      	ldr	r3, [r3, #8]
 8014efc:	f003 0301 	and.w	r3, r3, #1
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d1ed      	bne.n	8014ee0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8014f04:	4b06      	ldr	r3, [pc, #24]	; (8014f20 <SUBGHZSPI_Receive+0xa8>)
 8014f06:	68db      	ldr	r3, [r3, #12]
 8014f08:	b2da      	uxtb	r2, r3
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	701a      	strb	r2, [r3, #0]

  return status;
 8014f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f10:	4618      	mov	r0, r3
 8014f12:	371c      	adds	r7, #28
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bc80      	pop	{r7}
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop
 8014f1c:	20000428 	.word	0x20000428
 8014f20:	58010000 	.word	0x58010000
 8014f24:	5801000c 	.word	0x5801000c

08014f28 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b084      	sub	sp, #16
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	791b      	ldrb	r3, [r3, #4]
 8014f34:	2b01      	cmp	r3, #1
 8014f36:	d111      	bne.n	8014f5c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8014f38:	4b0c      	ldr	r3, [pc, #48]	; (8014f6c <SUBGHZ_CheckDeviceReady+0x44>)
 8014f3a:	681a      	ldr	r2, [r3, #0]
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	005b      	lsls	r3, r3, #1
 8014f40:	4413      	add	r3, r2
 8014f42:	00db      	lsls	r3, r3, #3
 8014f44:	0c1b      	lsrs	r3, r3, #16
 8014f46:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8014f48:	f7ff fba0 	bl	801468c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	3b01      	subs	r3, #1
 8014f50:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d1f9      	bne.n	8014f4c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8014f58:	f7ff fb88 	bl	801466c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f000 f807 	bl	8014f70 <SUBGHZ_WaitOnBusy>
 8014f62:	4603      	mov	r3, r0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3710      	adds	r7, #16
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}
 8014f6c:	20000428 	.word	0x20000428

08014f70 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b086      	sub	sp, #24
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8014f7c:	4b12      	ldr	r3, [pc, #72]	; (8014fc8 <SUBGHZ_WaitOnBusy+0x58>)
 8014f7e:	681a      	ldr	r2, [r3, #0]
 8014f80:	4613      	mov	r3, r2
 8014f82:	005b      	lsls	r3, r3, #1
 8014f84:	4413      	add	r3, r2
 8014f86:	00db      	lsls	r3, r3, #3
 8014f88:	0d1b      	lsrs	r3, r3, #20
 8014f8a:	2264      	movs	r2, #100	; 0x64
 8014f8c:	fb02 f303 	mul.w	r3, r2, r3
 8014f90:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8014f92:	f7ff fba9 	bl	80146e8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8014f96:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d105      	bne.n	8014faa <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2202      	movs	r2, #2
 8014fa6:	609a      	str	r2, [r3, #8]
      break;
 8014fa8:	e009      	b.n	8014fbe <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	3b01      	subs	r3, #1
 8014fae:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8014fb0:	f7ff fb88 	bl	80146c4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8014fb4:	4602      	mov	r2, r0
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	4013      	ands	r3, r2
 8014fba:	2b01      	cmp	r3, #1
 8014fbc:	d0e9      	beq.n	8014f92 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8014fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3718      	adds	r7, #24
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	20000428 	.word	0x20000428

08014fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d101      	bne.n	8014fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014fda:	2301      	movs	r3, #1
 8014fdc:	e049      	b.n	8015072 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014fe4:	b2db      	uxtb	r3, r3
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d106      	bne.n	8014ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2200      	movs	r2, #0
 8014fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f7ee fa08 	bl	8003408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2202      	movs	r2, #2
 8014ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681a      	ldr	r2, [r3, #0]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	3304      	adds	r3, #4
 8015008:	4619      	mov	r1, r3
 801500a:	4610      	mov	r0, r2
 801500c:	f000 f986 	bl	801531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2201      	movs	r2, #1
 8015014:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2201      	movs	r2, #1
 801501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2201      	movs	r2, #1
 8015024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2201      	movs	r2, #1
 801502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2201      	movs	r2, #1
 8015034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2201      	movs	r2, #1
 801503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2201      	movs	r2, #1
 8015044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2201      	movs	r2, #1
 801504c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2201      	movs	r2, #1
 8015054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2201      	movs	r2, #1
 8015064:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2201      	movs	r2, #1
 801506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015070:	2300      	movs	r3, #0
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
	...

0801507c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801507c:	b480      	push	{r7}
 801507e:	b085      	sub	sp, #20
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801508a:	b2db      	uxtb	r3, r3
 801508c:	2b01      	cmp	r3, #1
 801508e:	d001      	beq.n	8015094 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015090:	2301      	movs	r3, #1
 8015092:	e02e      	b.n	80150f2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2202      	movs	r2, #2
 8015098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	4a16      	ldr	r2, [pc, #88]	; (80150fc <HAL_TIM_Base_Start+0x80>)
 80150a2:	4293      	cmp	r3, r2
 80150a4:	d004      	beq.n	80150b0 <HAL_TIM_Base_Start+0x34>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150ae:	d115      	bne.n	80150dc <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	689a      	ldr	r2, [r3, #8]
 80150b6:	4b12      	ldr	r3, [pc, #72]	; (8015100 <HAL_TIM_Base_Start+0x84>)
 80150b8:	4013      	ands	r3, r2
 80150ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2b06      	cmp	r3, #6
 80150c0:	d015      	beq.n	80150ee <HAL_TIM_Base_Start+0x72>
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150c8:	d011      	beq.n	80150ee <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f042 0201 	orr.w	r2, r2, #1
 80150d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80150da:	e008      	b.n	80150ee <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	f042 0201 	orr.w	r2, r2, #1
 80150ea:	601a      	str	r2, [r3, #0]
 80150ec:	e000      	b.n	80150f0 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80150ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80150f0:	2300      	movs	r3, #0
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3714      	adds	r7, #20
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bc80      	pop	{r7}
 80150fa:	4770      	bx	lr
 80150fc:	40012c00 	.word	0x40012c00
 8015100:	00010007 	.word	0x00010007

08015104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801510e:	2300      	movs	r3, #0
 8015110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015118:	2b01      	cmp	r3, #1
 801511a:	d101      	bne.n	8015120 <HAL_TIM_ConfigClockSource+0x1c>
 801511c:	2302      	movs	r3, #2
 801511e:	e0b6      	b.n	801528e <HAL_TIM_ConfigClockSource+0x18a>
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2201      	movs	r2, #1
 8015124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2202      	movs	r2, #2
 801512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	689b      	ldr	r3, [r3, #8]
 8015136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801513e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801514a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	68ba      	ldr	r2, [r7, #8]
 8015152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801515c:	d03e      	beq.n	80151dc <HAL_TIM_ConfigClockSource+0xd8>
 801515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015162:	f200 8087 	bhi.w	8015274 <HAL_TIM_ConfigClockSource+0x170>
 8015166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801516a:	f000 8086 	beq.w	801527a <HAL_TIM_ConfigClockSource+0x176>
 801516e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015172:	d87f      	bhi.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
 8015174:	2b70      	cmp	r3, #112	; 0x70
 8015176:	d01a      	beq.n	80151ae <HAL_TIM_ConfigClockSource+0xaa>
 8015178:	2b70      	cmp	r3, #112	; 0x70
 801517a:	d87b      	bhi.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
 801517c:	2b60      	cmp	r3, #96	; 0x60
 801517e:	d050      	beq.n	8015222 <HAL_TIM_ConfigClockSource+0x11e>
 8015180:	2b60      	cmp	r3, #96	; 0x60
 8015182:	d877      	bhi.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
 8015184:	2b50      	cmp	r3, #80	; 0x50
 8015186:	d03c      	beq.n	8015202 <HAL_TIM_ConfigClockSource+0xfe>
 8015188:	2b50      	cmp	r3, #80	; 0x50
 801518a:	d873      	bhi.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
 801518c:	2b40      	cmp	r3, #64	; 0x40
 801518e:	d058      	beq.n	8015242 <HAL_TIM_ConfigClockSource+0x13e>
 8015190:	2b40      	cmp	r3, #64	; 0x40
 8015192:	d86f      	bhi.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
 8015194:	2b30      	cmp	r3, #48	; 0x30
 8015196:	d064      	beq.n	8015262 <HAL_TIM_ConfigClockSource+0x15e>
 8015198:	2b30      	cmp	r3, #48	; 0x30
 801519a:	d86b      	bhi.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
 801519c:	2b20      	cmp	r3, #32
 801519e:	d060      	beq.n	8015262 <HAL_TIM_ConfigClockSource+0x15e>
 80151a0:	2b20      	cmp	r3, #32
 80151a2:	d867      	bhi.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d05c      	beq.n	8015262 <HAL_TIM_ConfigClockSource+0x15e>
 80151a8:	2b10      	cmp	r3, #16
 80151aa:	d05a      	beq.n	8015262 <HAL_TIM_ConfigClockSource+0x15e>
 80151ac:	e062      	b.n	8015274 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	6818      	ldr	r0, [r3, #0]
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	6899      	ldr	r1, [r3, #8]
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	685a      	ldr	r2, [r3, #4]
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	68db      	ldr	r3, [r3, #12]
 80151be:	f000 fa1d 	bl	80155fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80151d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	68ba      	ldr	r2, [r7, #8]
 80151d8:	609a      	str	r2, [r3, #8]
      break;
 80151da:	e04f      	b.n	801527c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6818      	ldr	r0, [r3, #0]
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	6899      	ldr	r1, [r3, #8]
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	685a      	ldr	r2, [r3, #4]
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	f000 fa06 	bl	80155fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	689a      	ldr	r2, [r3, #8]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80151fe:	609a      	str	r2, [r3, #8]
      break;
 8015200:	e03c      	b.n	801527c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6818      	ldr	r0, [r3, #0]
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	6859      	ldr	r1, [r3, #4]
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	461a      	mov	r2, r3
 8015210:	f000 f97b 	bl	801550a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	2150      	movs	r1, #80	; 0x50
 801521a:	4618      	mov	r0, r3
 801521c:	f000 f9d2 	bl	80155c4 <TIM_ITRx_SetConfig>
      break;
 8015220:	e02c      	b.n	801527c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6818      	ldr	r0, [r3, #0]
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	6859      	ldr	r1, [r3, #4]
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	68db      	ldr	r3, [r3, #12]
 801522e:	461a      	mov	r2, r3
 8015230:	f000 f999 	bl	8015566 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	2160      	movs	r1, #96	; 0x60
 801523a:	4618      	mov	r0, r3
 801523c:	f000 f9c2 	bl	80155c4 <TIM_ITRx_SetConfig>
      break;
 8015240:	e01c      	b.n	801527c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	6818      	ldr	r0, [r3, #0]
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	6859      	ldr	r1, [r3, #4]
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	461a      	mov	r2, r3
 8015250:	f000 f95b 	bl	801550a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	2140      	movs	r1, #64	; 0x40
 801525a:	4618      	mov	r0, r3
 801525c:	f000 f9b2 	bl	80155c4 <TIM_ITRx_SetConfig>
      break;
 8015260:	e00c      	b.n	801527c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	4619      	mov	r1, r3
 801526c:	4610      	mov	r0, r2
 801526e:	f000 f9a9 	bl	80155c4 <TIM_ITRx_SetConfig>
      break;
 8015272:	e003      	b.n	801527c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8015274:	2301      	movs	r3, #1
 8015276:	73fb      	strb	r3, [r7, #15]
      break;
 8015278:	e000      	b.n	801527c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801527a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2201      	movs	r2, #1
 8015280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2200      	movs	r2, #0
 8015288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801528c:	7bfb      	ldrb	r3, [r7, #15]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3710      	adds	r7, #16
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}

08015296 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8015296:	b580      	push	{r7, lr}
 8015298:	b082      	sub	sp, #8
 801529a:	af00      	add	r7, sp, #0
 801529c:	6078      	str	r0, [r7, #4]
 801529e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80152a6:	2b01      	cmp	r3, #1
 80152a8:	d101      	bne.n	80152ae <HAL_TIM_SlaveConfigSynchro+0x18>
 80152aa:	2302      	movs	r3, #2
 80152ac:	e031      	b.n	8015312 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2201      	movs	r2, #1
 80152b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2202      	movs	r2, #2
 80152ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80152be:	6839      	ldr	r1, [r7, #0]
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f000 f88d 	bl	80153e0 <TIM_SlaveTimer_SetConfig>
 80152c6:	4603      	mov	r3, r0
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d009      	beq.n	80152e0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2201      	movs	r2, #1
 80152d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80152dc:	2301      	movs	r3, #1
 80152de:	e018      	b.n	8015312 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	68da      	ldr	r2, [r3, #12]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80152ee:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	68da      	ldr	r2, [r3, #12]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80152fe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2201      	movs	r2, #1
 8015304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2200      	movs	r2, #0
 801530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015310:	2300      	movs	r3, #0
}
 8015312:	4618      	mov	r0, r3
 8015314:	3708      	adds	r7, #8
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}
	...

0801531c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801531c:	b480      	push	{r7}
 801531e:	b085      	sub	sp, #20
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	4a29      	ldr	r2, [pc, #164]	; (80153d4 <TIM_Base_SetConfig+0xb8>)
 8015330:	4293      	cmp	r3, r2
 8015332:	d003      	beq.n	801533c <TIM_Base_SetConfig+0x20>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801533a:	d108      	bne.n	801534e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	685b      	ldr	r3, [r3, #4]
 8015348:	68fa      	ldr	r2, [r7, #12]
 801534a:	4313      	orrs	r3, r2
 801534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	4a20      	ldr	r2, [pc, #128]	; (80153d4 <TIM_Base_SetConfig+0xb8>)
 8015352:	4293      	cmp	r3, r2
 8015354:	d00b      	beq.n	801536e <TIM_Base_SetConfig+0x52>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801535c:	d007      	beq.n	801536e <TIM_Base_SetConfig+0x52>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	4a1d      	ldr	r2, [pc, #116]	; (80153d8 <TIM_Base_SetConfig+0xbc>)
 8015362:	4293      	cmp	r3, r2
 8015364:	d003      	beq.n	801536e <TIM_Base_SetConfig+0x52>
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	4a1c      	ldr	r2, [pc, #112]	; (80153dc <TIM_Base_SetConfig+0xc0>)
 801536a:	4293      	cmp	r3, r2
 801536c:	d108      	bne.n	8015380 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	68fa      	ldr	r2, [r7, #12]
 801537c:	4313      	orrs	r3, r2
 801537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	695b      	ldr	r3, [r3, #20]
 801538a:	4313      	orrs	r3, r2
 801538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	68fa      	ldr	r2, [r7, #12]
 8015392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	689a      	ldr	r2, [r3, #8]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	681a      	ldr	r2, [r3, #0]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	4a0b      	ldr	r2, [pc, #44]	; (80153d4 <TIM_Base_SetConfig+0xb8>)
 80153a8:	4293      	cmp	r3, r2
 80153aa:	d007      	beq.n	80153bc <TIM_Base_SetConfig+0xa0>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	4a0a      	ldr	r2, [pc, #40]	; (80153d8 <TIM_Base_SetConfig+0xbc>)
 80153b0:	4293      	cmp	r3, r2
 80153b2:	d003      	beq.n	80153bc <TIM_Base_SetConfig+0xa0>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	4a09      	ldr	r2, [pc, #36]	; (80153dc <TIM_Base_SetConfig+0xc0>)
 80153b8:	4293      	cmp	r3, r2
 80153ba:	d103      	bne.n	80153c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	691a      	ldr	r2, [r3, #16]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2201      	movs	r2, #1
 80153c8:	615a      	str	r2, [r3, #20]
}
 80153ca:	bf00      	nop
 80153cc:	3714      	adds	r7, #20
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bc80      	pop	{r7}
 80153d2:	4770      	bx	lr
 80153d4:	40012c00 	.word	0x40012c00
 80153d8:	40014400 	.word	0x40014400
 80153dc:	40014800 	.word	0x40014800

080153e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b086      	sub	sp, #24
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80153ea:	2300      	movs	r3, #0
 80153ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	689b      	ldr	r3, [r3, #8]
 80153f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80153fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015400:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8015402:	683b      	ldr	r3, [r7, #0]
 8015404:	685b      	ldr	r3, [r3, #4]
 8015406:	693a      	ldr	r2, [r7, #16]
 8015408:	4313      	orrs	r3, r2
 801540a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015412:	f023 0307 	bic.w	r3, r3, #7
 8015416:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	693a      	ldr	r2, [r7, #16]
 801541e:	4313      	orrs	r3, r2
 8015420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	693a      	ldr	r2, [r7, #16]
 8015428:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	2b70      	cmp	r3, #112	; 0x70
 8015430:	d01a      	beq.n	8015468 <TIM_SlaveTimer_SetConfig+0x88>
 8015432:	2b70      	cmp	r3, #112	; 0x70
 8015434:	d860      	bhi.n	80154f8 <TIM_SlaveTimer_SetConfig+0x118>
 8015436:	2b60      	cmp	r3, #96	; 0x60
 8015438:	d054      	beq.n	80154e4 <TIM_SlaveTimer_SetConfig+0x104>
 801543a:	2b60      	cmp	r3, #96	; 0x60
 801543c:	d85c      	bhi.n	80154f8 <TIM_SlaveTimer_SetConfig+0x118>
 801543e:	2b50      	cmp	r3, #80	; 0x50
 8015440:	d046      	beq.n	80154d0 <TIM_SlaveTimer_SetConfig+0xf0>
 8015442:	2b50      	cmp	r3, #80	; 0x50
 8015444:	d858      	bhi.n	80154f8 <TIM_SlaveTimer_SetConfig+0x118>
 8015446:	2b40      	cmp	r3, #64	; 0x40
 8015448:	d019      	beq.n	801547e <TIM_SlaveTimer_SetConfig+0x9e>
 801544a:	2b40      	cmp	r3, #64	; 0x40
 801544c:	d854      	bhi.n	80154f8 <TIM_SlaveTimer_SetConfig+0x118>
 801544e:	2b30      	cmp	r3, #48	; 0x30
 8015450:	d055      	beq.n	80154fe <TIM_SlaveTimer_SetConfig+0x11e>
 8015452:	2b30      	cmp	r3, #48	; 0x30
 8015454:	d850      	bhi.n	80154f8 <TIM_SlaveTimer_SetConfig+0x118>
 8015456:	2b20      	cmp	r3, #32
 8015458:	d051      	beq.n	80154fe <TIM_SlaveTimer_SetConfig+0x11e>
 801545a:	2b20      	cmp	r3, #32
 801545c:	d84c      	bhi.n	80154f8 <TIM_SlaveTimer_SetConfig+0x118>
 801545e:	2b00      	cmp	r3, #0
 8015460:	d04d      	beq.n	80154fe <TIM_SlaveTimer_SetConfig+0x11e>
 8015462:	2b10      	cmp	r3, #16
 8015464:	d04b      	beq.n	80154fe <TIM_SlaveTimer_SetConfig+0x11e>
 8015466:	e047      	b.n	80154f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6818      	ldr	r0, [r3, #0]
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	68d9      	ldr	r1, [r3, #12]
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	689a      	ldr	r2, [r3, #8]
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	691b      	ldr	r3, [r3, #16]
 8015478:	f000 f8c0 	bl	80155fc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 801547c:	e040      	b.n	8015500 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	2b05      	cmp	r3, #5
 8015484:	d101      	bne.n	801548a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8015486:	2301      	movs	r3, #1
 8015488:	e03b      	b.n	8015502 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	6a1b      	ldr	r3, [r3, #32]
 8015490:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	6a1a      	ldr	r2, [r3, #32]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	f022 0201 	bic.w	r2, r2, #1
 80154a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	699b      	ldr	r3, [r3, #24]
 80154a8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80154b0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	691b      	ldr	r3, [r3, #16]
 80154b6:	011b      	lsls	r3, r3, #4
 80154b8:	68ba      	ldr	r2, [r7, #8]
 80154ba:	4313      	orrs	r3, r2
 80154bc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	68ba      	ldr	r2, [r7, #8]
 80154c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	68fa      	ldr	r2, [r7, #12]
 80154cc:	621a      	str	r2, [r3, #32]
      break;
 80154ce:	e017      	b.n	8015500 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	6818      	ldr	r0, [r3, #0]
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	6899      	ldr	r1, [r3, #8]
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	691b      	ldr	r3, [r3, #16]
 80154dc:	461a      	mov	r2, r3
 80154de:	f000 f814 	bl	801550a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80154e2:	e00d      	b.n	8015500 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	6818      	ldr	r0, [r3, #0]
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	6899      	ldr	r1, [r3, #8]
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	691b      	ldr	r3, [r3, #16]
 80154f0:	461a      	mov	r2, r3
 80154f2:	f000 f838 	bl	8015566 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80154f6:	e003      	b.n	8015500 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80154f8:	2301      	movs	r3, #1
 80154fa:	75fb      	strb	r3, [r7, #23]
      break;
 80154fc:	e000      	b.n	8015500 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 80154fe:	bf00      	nop
  }

  return status;
 8015500:	7dfb      	ldrb	r3, [r7, #23]
}
 8015502:	4618      	mov	r0, r3
 8015504:	3718      	adds	r7, #24
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}

0801550a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801550a:	b480      	push	{r7}
 801550c:	b087      	sub	sp, #28
 801550e:	af00      	add	r7, sp, #0
 8015510:	60f8      	str	r0, [r7, #12]
 8015512:	60b9      	str	r1, [r7, #8]
 8015514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	6a1b      	ldr	r3, [r3, #32]
 801551a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	6a1b      	ldr	r3, [r3, #32]
 8015520:	f023 0201 	bic.w	r2, r3, #1
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	699b      	ldr	r3, [r3, #24]
 801552c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	011b      	lsls	r3, r3, #4
 801553a:	693a      	ldr	r2, [r7, #16]
 801553c:	4313      	orrs	r3, r2
 801553e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	f023 030a 	bic.w	r3, r3, #10
 8015546:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015548:	697a      	ldr	r2, [r7, #20]
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	4313      	orrs	r3, r2
 801554e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	693a      	ldr	r2, [r7, #16]
 8015554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	697a      	ldr	r2, [r7, #20]
 801555a:	621a      	str	r2, [r3, #32]
}
 801555c:	bf00      	nop
 801555e:	371c      	adds	r7, #28
 8015560:	46bd      	mov	sp, r7
 8015562:	bc80      	pop	{r7}
 8015564:	4770      	bx	lr

08015566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015566:	b480      	push	{r7}
 8015568:	b087      	sub	sp, #28
 801556a:	af00      	add	r7, sp, #0
 801556c:	60f8      	str	r0, [r7, #12]
 801556e:	60b9      	str	r1, [r7, #8]
 8015570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	6a1b      	ldr	r3, [r3, #32]
 8015576:	f023 0210 	bic.w	r2, r3, #16
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	699b      	ldr	r3, [r3, #24]
 8015582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	6a1b      	ldr	r3, [r3, #32]
 8015588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	031b      	lsls	r3, r3, #12
 8015596:	697a      	ldr	r2, [r7, #20]
 8015598:	4313      	orrs	r3, r2
 801559a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80155a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	011b      	lsls	r3, r3, #4
 80155a8:	693a      	ldr	r2, [r7, #16]
 80155aa:	4313      	orrs	r3, r2
 80155ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	697a      	ldr	r2, [r7, #20]
 80155b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	693a      	ldr	r2, [r7, #16]
 80155b8:	621a      	str	r2, [r3, #32]
}
 80155ba:	bf00      	nop
 80155bc:	371c      	adds	r7, #28
 80155be:	46bd      	mov	sp, r7
 80155c0:	bc80      	pop	{r7}
 80155c2:	4770      	bx	lr

080155c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80155c4:	b480      	push	{r7}
 80155c6:	b085      	sub	sp, #20
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	689b      	ldr	r3, [r3, #8]
 80155d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80155da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80155de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80155e0:	683a      	ldr	r2, [r7, #0]
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	4313      	orrs	r3, r2
 80155e6:	f043 0307 	orr.w	r3, r3, #7
 80155ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	68fa      	ldr	r2, [r7, #12]
 80155f0:	609a      	str	r2, [r3, #8]
}
 80155f2:	bf00      	nop
 80155f4:	3714      	adds	r7, #20
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bc80      	pop	{r7}
 80155fa:	4770      	bx	lr

080155fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80155fc:	b480      	push	{r7}
 80155fe:	b087      	sub	sp, #28
 8015600:	af00      	add	r7, sp, #0
 8015602:	60f8      	str	r0, [r7, #12]
 8015604:	60b9      	str	r1, [r7, #8]
 8015606:	607a      	str	r2, [r7, #4]
 8015608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	689b      	ldr	r3, [r3, #8]
 801560e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	021a      	lsls	r2, r3, #8
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	431a      	orrs	r2, r3
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	4313      	orrs	r3, r2
 8015624:	697a      	ldr	r2, [r7, #20]
 8015626:	4313      	orrs	r3, r2
 8015628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	697a      	ldr	r2, [r7, #20]
 801562e:	609a      	str	r2, [r3, #8]
}
 8015630:	bf00      	nop
 8015632:	371c      	adds	r7, #28
 8015634:	46bd      	mov	sp, r7
 8015636:	bc80      	pop	{r7}
 8015638:	4770      	bx	lr
	...

0801563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801563c:	b480      	push	{r7}
 801563e:	b085      	sub	sp, #20
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
 8015644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801564c:	2b01      	cmp	r3, #1
 801564e:	d101      	bne.n	8015654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015650:	2302      	movs	r3, #2
 8015652:	e04a      	b.n	80156ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2201      	movs	r2, #1
 8015658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2202      	movs	r2, #2
 8015660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	685b      	ldr	r3, [r3, #4]
 801566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	689b      	ldr	r3, [r3, #8]
 8015672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	4a1e      	ldr	r2, [pc, #120]	; (80156f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801567a:	4293      	cmp	r3, r2
 801567c:	d108      	bne.n	8015690 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015684:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	68fa      	ldr	r2, [r7, #12]
 801568c:	4313      	orrs	r3, r2
 801568e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	68fa      	ldr	r2, [r7, #12]
 801569e:	4313      	orrs	r3, r2
 80156a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	68fa      	ldr	r2, [r7, #12]
 80156a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	4a11      	ldr	r2, [pc, #68]	; (80156f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80156b0:	4293      	cmp	r3, r2
 80156b2:	d004      	beq.n	80156be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80156bc:	d10c      	bne.n	80156d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80156c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	689b      	ldr	r3, [r3, #8]
 80156ca:	68ba      	ldr	r2, [r7, #8]
 80156cc:	4313      	orrs	r3, r2
 80156ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2201      	movs	r2, #1
 80156dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2200      	movs	r2, #0
 80156e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80156e8:	2300      	movs	r3, #0
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3714      	adds	r7, #20
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bc80      	pop	{r7}
 80156f2:	4770      	bx	lr
 80156f4:	40012c00 	.word	0x40012c00

080156f8 <LL_RCC_GetUSARTClockSource>:
{
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8015700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015704:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	401a      	ands	r2, r3
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	041b      	lsls	r3, r3, #16
 8015710:	4313      	orrs	r3, r2
}
 8015712:	4618      	mov	r0, r3
 8015714:	370c      	adds	r7, #12
 8015716:	46bd      	mov	sp, r7
 8015718:	bc80      	pop	{r7}
 801571a:	4770      	bx	lr

0801571c <LL_RCC_GetLPUARTClockSource>:
{
 801571c:	b480      	push	{r7}
 801571e:	b083      	sub	sp, #12
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8015724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015728:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	4013      	ands	r3, r2
}
 8015730:	4618      	mov	r0, r3
 8015732:	370c      	adds	r7, #12
 8015734:	46bd      	mov	sp, r7
 8015736:	bc80      	pop	{r7}
 8015738:	4770      	bx	lr

0801573a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801573a:	b580      	push	{r7, lr}
 801573c:	b082      	sub	sp, #8
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d101      	bne.n	801574c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015748:	2301      	movs	r3, #1
 801574a:	e042      	b.n	80157d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015752:	2b00      	cmp	r3, #0
 8015754:	d106      	bne.n	8015764 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2200      	movs	r2, #0
 801575a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7ed fe6e 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2224      	movs	r2, #36	; 0x24
 8015768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	681a      	ldr	r2, [r3, #0]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	f022 0201 	bic.w	r2, r2, #1
 801577a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f000 fa3b 	bl	8015bf8 <UART_SetConfig>
 8015782:	4603      	mov	r3, r0
 8015784:	2b01      	cmp	r3, #1
 8015786:	d101      	bne.n	801578c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8015788:	2301      	movs	r3, #1
 801578a:	e022      	b.n	80157d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015790:	2b00      	cmp	r3, #0
 8015792:	d002      	beq.n	801579a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 fca3 	bl	80160e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	685a      	ldr	r2, [r3, #4]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80157a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	689a      	ldr	r2, [r3, #8]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80157b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	f042 0201 	orr.w	r2, r2, #1
 80157c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f000 fd29 	bl	8016222 <UART_CheckIdleState>
 80157d0:	4603      	mov	r3, r0
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3708      	adds	r7, #8
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}

080157da <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80157da:	b580      	push	{r7, lr}
 80157dc:	b082      	sub	sp, #8
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d101      	bne.n	80157ec <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80157e8:	2301      	movs	r3, #1
 80157ea:	e04a      	b.n	8015882 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d106      	bne.n	8015804 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2200      	movs	r2, #0
 80157fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f7ed fe1e 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2224      	movs	r2, #36	; 0x24
 8015808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	681a      	ldr	r2, [r3, #0]
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	f022 0201 	bic.w	r2, r2, #1
 801581a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f000 f9eb 	bl	8015bf8 <UART_SetConfig>
 8015822:	4603      	mov	r3, r0
 8015824:	2b01      	cmp	r3, #1
 8015826:	d101      	bne.n	801582c <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8015828:	2301      	movs	r3, #1
 801582a:	e02a      	b.n	8015882 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015830:	2b00      	cmp	r3, #0
 8015832:	d002      	beq.n	801583a <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f000 fc53 	bl	80160e0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	685a      	ldr	r2, [r3, #4]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015848:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	689a      	ldr	r2, [r3, #8]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8015858:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	689a      	ldr	r2, [r3, #8]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	f042 0208 	orr.w	r2, r2, #8
 8015868:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	f042 0201 	orr.w	r2, r2, #1
 8015878:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f000 fcd1 	bl	8016222 <UART_CheckIdleState>
 8015880:	4603      	mov	r3, r0
}
 8015882:	4618      	mov	r0, r3
 8015884:	3708      	adds	r7, #8
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}

0801588a <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 801588a:	b580      	push	{r7, lr}
 801588c:	b082      	sub	sp, #8
 801588e:	af00      	add	r7, sp, #0
 8015890:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d101      	bne.n	801589c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8015898:	2301      	movs	r3, #1
 801589a:	e031      	b.n	8015900 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2224      	movs	r2, #36	; 0x24
 80158a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f022 0201 	bic.w	r2, r2, #1
 80158b2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	2200      	movs	r2, #0
 80158ba:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2200      	movs	r2, #0
 80158c2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2200      	movs	r2, #0
 80158ca:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f7ed fe87 	bl	80035e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2200      	movs	r2, #0
 80158d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2200      	movs	r2, #0
 80158de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2200      	movs	r2, #0
 80158e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2200      	movs	r2, #0
 80158ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2200      	movs	r2, #0
 80158f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	2200      	movs	r2, #0
 80158fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80158fe:	2300      	movs	r3, #0
}
 8015900:	4618      	mov	r0, r3
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b08a      	sub	sp, #40	; 0x28
 801590c:	af02      	add	r7, sp, #8
 801590e:	60f8      	str	r0, [r7, #12]
 8015910:	60b9      	str	r1, [r7, #8]
 8015912:	603b      	str	r3, [r7, #0]
 8015914:	4613      	mov	r3, r2
 8015916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801591e:	2b20      	cmp	r3, #32
 8015920:	d173      	bne.n	8015a0a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8015922:	68bb      	ldr	r3, [r7, #8]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d002      	beq.n	801592e <HAL_UART_Transmit+0x26>
 8015928:	88fb      	ldrh	r3, [r7, #6]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d101      	bne.n	8015932 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801592e:	2301      	movs	r3, #1
 8015930:	e06c      	b.n	8015a0c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	2200      	movs	r2, #0
 8015936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	2221      	movs	r2, #33	; 0x21
 801593e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015942:	f7fa fac1 	bl	800fec8 <HAL_GetTick>
 8015946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	88fa      	ldrh	r2, [r7, #6]
 801594c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	88fa      	ldrh	r2, [r7, #6]
 8015954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	689b      	ldr	r3, [r3, #8]
 801595c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015960:	d108      	bne.n	8015974 <HAL_UART_Transmit+0x6c>
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	691b      	ldr	r3, [r3, #16]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d104      	bne.n	8015974 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801596a:	2300      	movs	r3, #0
 801596c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	61bb      	str	r3, [r7, #24]
 8015972:	e003      	b.n	801597c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015978:	2300      	movs	r3, #0
 801597a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801597c:	e02c      	b.n	80159d8 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	9300      	str	r3, [sp, #0]
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	2200      	movs	r2, #0
 8015986:	2180      	movs	r1, #128	; 0x80
 8015988:	68f8      	ldr	r0, [r7, #12]
 801598a:	f000 fc98 	bl	80162be <UART_WaitOnFlagUntilTimeout>
 801598e:	4603      	mov	r3, r0
 8015990:	2b00      	cmp	r3, #0
 8015992:	d001      	beq.n	8015998 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8015994:	2303      	movs	r3, #3
 8015996:	e039      	b.n	8015a0c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d10b      	bne.n	80159b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	881b      	ldrh	r3, [r3, #0]
 80159a2:	461a      	mov	r2, r3
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80159ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80159ae:	69bb      	ldr	r3, [r7, #24]
 80159b0:	3302      	adds	r3, #2
 80159b2:	61bb      	str	r3, [r7, #24]
 80159b4:	e007      	b.n	80159c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	781a      	ldrb	r2, [r3, #0]
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	3301      	adds	r3, #1
 80159c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	3b01      	subs	r3, #1
 80159d0:	b29a      	uxth	r2, r3
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80159de:	b29b      	uxth	r3, r3
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d1cc      	bne.n	801597e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	9300      	str	r3, [sp, #0]
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	2200      	movs	r2, #0
 80159ec:	2140      	movs	r1, #64	; 0x40
 80159ee:	68f8      	ldr	r0, [r7, #12]
 80159f0:	f000 fc65 	bl	80162be <UART_WaitOnFlagUntilTimeout>
 80159f4:	4603      	mov	r3, r0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d001      	beq.n	80159fe <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80159fa:	2303      	movs	r3, #3
 80159fc:	e006      	b.n	8015a0c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	2220      	movs	r2, #32
 8015a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8015a06:	2300      	movs	r3, #0
 8015a08:	e000      	b.n	8015a0c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8015a0a:	2302      	movs	r3, #2
  }
}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3720      	adds	r7, #32
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}

08015a14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b08a      	sub	sp, #40	; 0x28
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	60f8      	str	r0, [r7, #12]
 8015a1c:	60b9      	str	r1, [r7, #8]
 8015a1e:	4613      	mov	r3, r2
 8015a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a28:	2b20      	cmp	r3, #32
 8015a2a:	d167      	bne.n	8015afc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d002      	beq.n	8015a38 <HAL_UART_Transmit_DMA+0x24>
 8015a32:	88fb      	ldrh	r3, [r7, #6]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d101      	bne.n	8015a3c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8015a38:	2301      	movs	r3, #1
 8015a3a:	e060      	b.n	8015afe <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	68ba      	ldr	r2, [r7, #8]
 8015a40:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	88fa      	ldrh	r2, [r7, #6]
 8015a46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	88fa      	ldrh	r2, [r7, #6]
 8015a4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2200      	movs	r2, #0
 8015a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	2221      	movs	r2, #33	; 0x21
 8015a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d028      	beq.n	8015abc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a6e:	4a26      	ldr	r2, [pc, #152]	; (8015b08 <HAL_UART_Transmit_DMA+0xf4>)
 8015a70:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a76:	4a25      	ldr	r2, [pc, #148]	; (8015b0c <HAL_UART_Transmit_DMA+0xf8>)
 8015a78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a7e:	4a24      	ldr	r2, [pc, #144]	; (8015b10 <HAL_UART_Transmit_DMA+0xfc>)
 8015a80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a86:	2200      	movs	r2, #0
 8015a88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a92:	4619      	mov	r1, r3
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	3328      	adds	r3, #40	; 0x28
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	88fb      	ldrh	r3, [r7, #6]
 8015a9e:	f7fa feed 	bl	801087c <HAL_DMA_Start_IT>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d009      	beq.n	8015abc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2210      	movs	r2, #16
 8015aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2220      	movs	r2, #32
 8015ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8015ab8:	2301      	movs	r3, #1
 8015aba:	e020      	b.n	8015afe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	2240      	movs	r2, #64	; 0x40
 8015ac2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	3308      	adds	r3, #8
 8015aca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	e853 3f00 	ldrex	r3, [r3]
 8015ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ada:	627b      	str	r3, [r7, #36]	; 0x24
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	3308      	adds	r3, #8
 8015ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ae4:	623a      	str	r2, [r7, #32]
 8015ae6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ae8:	69f9      	ldr	r1, [r7, #28]
 8015aea:	6a3a      	ldr	r2, [r7, #32]
 8015aec:	e841 2300 	strex	r3, r2, [r1]
 8015af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8015af2:	69bb      	ldr	r3, [r7, #24]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d1e5      	bne.n	8015ac4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8015af8:	2300      	movs	r3, #0
 8015afa:	e000      	b.n	8015afe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8015afc:	2302      	movs	r3, #2
  }
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3728      	adds	r7, #40	; 0x28
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	080166e7 	.word	0x080166e7
 8015b0c:	08016781 	.word	0x08016781
 8015b10:	08016907 	.word	0x08016907

08015b14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b08a      	sub	sp, #40	; 0x28
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	60f8      	str	r0, [r7, #12]
 8015b1c:	60b9      	str	r1, [r7, #8]
 8015b1e:	4613      	mov	r3, r2
 8015b20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b28:	2b20      	cmp	r3, #32
 8015b2a:	d137      	bne.n	8015b9c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d002      	beq.n	8015b38 <HAL_UART_Receive_DMA+0x24>
 8015b32:	88fb      	ldrh	r3, [r7, #6]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d101      	bne.n	8015b3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8015b38:	2301      	movs	r3, #1
 8015b3a:	e030      	b.n	8015b9e <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	4a18      	ldr	r2, [pc, #96]	; (8015ba8 <HAL_UART_Receive_DMA+0x94>)
 8015b48:	4293      	cmp	r3, r2
 8015b4a:	d01f      	beq.n	8015b8c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d018      	beq.n	8015b8c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	e853 3f00 	ldrex	r3, [r3]
 8015b66:	613b      	str	r3, [r7, #16]
   return(result);
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	461a      	mov	r2, r3
 8015b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b78:	623b      	str	r3, [r7, #32]
 8015b7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b7c:	69f9      	ldr	r1, [r7, #28]
 8015b7e:	6a3a      	ldr	r2, [r7, #32]
 8015b80:	e841 2300 	strex	r3, r2, [r1]
 8015b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8015b86:	69bb      	ldr	r3, [r7, #24]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d1e6      	bne.n	8015b5a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015b8c:	88fb      	ldrh	r3, [r7, #6]
 8015b8e:	461a      	mov	r2, r3
 8015b90:	68b9      	ldr	r1, [r7, #8]
 8015b92:	68f8      	ldr	r0, [r7, #12]
 8015b94:	f000 fc5c 	bl	8016450 <UART_Start_Receive_DMA>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	e000      	b.n	8015b9e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8015b9c:	2302      	movs	r3, #2
  }
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3728      	adds	r7, #40	; 0x28
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	40008000 	.word	0x40008000

08015bac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015bac:	b480      	push	{r7}
 8015bae:	b083      	sub	sp, #12
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8015bb4:	bf00      	nop
 8015bb6:	370c      	adds	r7, #12
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bc80      	pop	{r7}
 8015bbc:	4770      	bx	lr

08015bbe <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015bbe:	b480      	push	{r7}
 8015bc0:	b083      	sub	sp, #12
 8015bc2:	af00      	add	r7, sp, #0
 8015bc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8015bc6:	bf00      	nop
 8015bc8:	370c      	adds	r7, #12
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bc80      	pop	{r7}
 8015bce:	4770      	bx	lr

08015bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b083      	sub	sp, #12
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015bd8:	bf00      	nop
 8015bda:	370c      	adds	r7, #12
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bc80      	pop	{r7}
 8015be0:	4770      	bx	lr

08015be2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015be2:	b480      	push	{r7}
 8015be4:	b083      	sub	sp, #12
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]
 8015bea:	460b      	mov	r3, r1
 8015bec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015bee:	bf00      	nop
 8015bf0:	370c      	adds	r7, #12
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bc80      	pop	{r7}
 8015bf6:	4770      	bx	lr

08015bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015bfc:	b08c      	sub	sp, #48	; 0x30
 8015bfe:	af00      	add	r7, sp, #0
 8015c00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015c02:	2300      	movs	r3, #0
 8015c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	689a      	ldr	r2, [r3, #8]
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	691b      	ldr	r3, [r3, #16]
 8015c10:	431a      	orrs	r2, r3
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	695b      	ldr	r3, [r3, #20]
 8015c16:	431a      	orrs	r2, r3
 8015c18:	697b      	ldr	r3, [r7, #20]
 8015c1a:	69db      	ldr	r3, [r3, #28]
 8015c1c:	4313      	orrs	r3, r2
 8015c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	681a      	ldr	r2, [r3, #0]
 8015c26:	4b94      	ldr	r3, [pc, #592]	; (8015e78 <UART_SetConfig+0x280>)
 8015c28:	4013      	ands	r3, r2
 8015c2a:	697a      	ldr	r2, [r7, #20]
 8015c2c:	6812      	ldr	r2, [r2, #0]
 8015c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c30:	430b      	orrs	r3, r1
 8015c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	68da      	ldr	r2, [r3, #12]
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	430a      	orrs	r2, r1
 8015c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	699b      	ldr	r3, [r3, #24]
 8015c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4a89      	ldr	r2, [pc, #548]	; (8015e7c <UART_SetConfig+0x284>)
 8015c56:	4293      	cmp	r3, r2
 8015c58:	d004      	beq.n	8015c64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015c5a:	697b      	ldr	r3, [r7, #20]
 8015c5c:	6a1b      	ldr	r3, [r3, #32]
 8015c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c60:	4313      	orrs	r3, r2
 8015c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	689b      	ldr	r3, [r3, #8]
 8015c6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8015c6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8015c72:	697a      	ldr	r2, [r7, #20]
 8015c74:	6812      	ldr	r2, [r2, #0]
 8015c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c78:	430b      	orrs	r3, r1
 8015c7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c82:	f023 010f 	bic.w	r1, r3, #15
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	430a      	orrs	r2, r1
 8015c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	4a7a      	ldr	r2, [pc, #488]	; (8015e80 <UART_SetConfig+0x288>)
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	d127      	bne.n	8015cec <UART_SetConfig+0xf4>
 8015c9c:	2003      	movs	r0, #3
 8015c9e:	f7ff fd2b 	bl	80156f8 <LL_RCC_GetUSARTClockSource>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8015ca8:	2b03      	cmp	r3, #3
 8015caa:	d81b      	bhi.n	8015ce4 <UART_SetConfig+0xec>
 8015cac:	a201      	add	r2, pc, #4	; (adr r2, 8015cb4 <UART_SetConfig+0xbc>)
 8015cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cb2:	bf00      	nop
 8015cb4:	08015cc5 	.word	0x08015cc5
 8015cb8:	08015cd5 	.word	0x08015cd5
 8015cbc:	08015ccd 	.word	0x08015ccd
 8015cc0:	08015cdd 	.word	0x08015cdd
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015cca:	e080      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015ccc:	2302      	movs	r3, #2
 8015cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015cd2:	e07c      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015cd4:	2304      	movs	r3, #4
 8015cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015cda:	e078      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015cdc:	2308      	movs	r3, #8
 8015cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015ce2:	e074      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015ce4:	2310      	movs	r3, #16
 8015ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015cea:	e070      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	4a64      	ldr	r2, [pc, #400]	; (8015e84 <UART_SetConfig+0x28c>)
 8015cf2:	4293      	cmp	r3, r2
 8015cf4:	d138      	bne.n	8015d68 <UART_SetConfig+0x170>
 8015cf6:	200c      	movs	r0, #12
 8015cf8:	f7ff fcfe 	bl	80156f8 <LL_RCC_GetUSARTClockSource>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8015d02:	2b0c      	cmp	r3, #12
 8015d04:	d82c      	bhi.n	8015d60 <UART_SetConfig+0x168>
 8015d06:	a201      	add	r2, pc, #4	; (adr r2, 8015d0c <UART_SetConfig+0x114>)
 8015d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d0c:	08015d41 	.word	0x08015d41
 8015d10:	08015d61 	.word	0x08015d61
 8015d14:	08015d61 	.word	0x08015d61
 8015d18:	08015d61 	.word	0x08015d61
 8015d1c:	08015d51 	.word	0x08015d51
 8015d20:	08015d61 	.word	0x08015d61
 8015d24:	08015d61 	.word	0x08015d61
 8015d28:	08015d61 	.word	0x08015d61
 8015d2c:	08015d49 	.word	0x08015d49
 8015d30:	08015d61 	.word	0x08015d61
 8015d34:	08015d61 	.word	0x08015d61
 8015d38:	08015d61 	.word	0x08015d61
 8015d3c:	08015d59 	.word	0x08015d59
 8015d40:	2300      	movs	r3, #0
 8015d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015d46:	e042      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015d48:	2302      	movs	r3, #2
 8015d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015d4e:	e03e      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015d50:	2304      	movs	r3, #4
 8015d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015d56:	e03a      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015d58:	2308      	movs	r3, #8
 8015d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015d5e:	e036      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015d60:	2310      	movs	r3, #16
 8015d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015d66:	e032      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	4a43      	ldr	r2, [pc, #268]	; (8015e7c <UART_SetConfig+0x284>)
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	d12a      	bne.n	8015dc8 <UART_SetConfig+0x1d0>
 8015d72:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8015d76:	f7ff fcd1 	bl	801571c <LL_RCC_GetLPUARTClockSource>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015d80:	d01a      	beq.n	8015db8 <UART_SetConfig+0x1c0>
 8015d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015d86:	d81b      	bhi.n	8015dc0 <UART_SetConfig+0x1c8>
 8015d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015d8c:	d00c      	beq.n	8015da8 <UART_SetConfig+0x1b0>
 8015d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015d92:	d815      	bhi.n	8015dc0 <UART_SetConfig+0x1c8>
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d003      	beq.n	8015da0 <UART_SetConfig+0x1a8>
 8015d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015d9c:	d008      	beq.n	8015db0 <UART_SetConfig+0x1b8>
 8015d9e:	e00f      	b.n	8015dc0 <UART_SetConfig+0x1c8>
 8015da0:	2300      	movs	r3, #0
 8015da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015da6:	e012      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015da8:	2302      	movs	r3, #2
 8015daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015dae:	e00e      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015db0:	2304      	movs	r3, #4
 8015db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015db6:	e00a      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015db8:	2308      	movs	r3, #8
 8015dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015dbe:	e006      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015dc0:	2310      	movs	r3, #16
 8015dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015dc6:	e002      	b.n	8015dce <UART_SetConfig+0x1d6>
 8015dc8:	2310      	movs	r3, #16
 8015dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	4a2a      	ldr	r2, [pc, #168]	; (8015e7c <UART_SetConfig+0x284>)
 8015dd4:	4293      	cmp	r3, r2
 8015dd6:	f040 80a4 	bne.w	8015f22 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015dda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015dde:	2b08      	cmp	r3, #8
 8015de0:	d823      	bhi.n	8015e2a <UART_SetConfig+0x232>
 8015de2:	a201      	add	r2, pc, #4	; (adr r2, 8015de8 <UART_SetConfig+0x1f0>)
 8015de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015de8:	08015e0d 	.word	0x08015e0d
 8015dec:	08015e2b 	.word	0x08015e2b
 8015df0:	08015e15 	.word	0x08015e15
 8015df4:	08015e2b 	.word	0x08015e2b
 8015df8:	08015e1b 	.word	0x08015e1b
 8015dfc:	08015e2b 	.word	0x08015e2b
 8015e00:	08015e2b 	.word	0x08015e2b
 8015e04:	08015e2b 	.word	0x08015e2b
 8015e08:	08015e23 	.word	0x08015e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015e0c:	f7fd fc1a 	bl	8013644 <HAL_RCC_GetPCLK1Freq>
 8015e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015e12:	e010      	b.n	8015e36 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015e14:	4b1c      	ldr	r3, [pc, #112]	; (8015e88 <UART_SetConfig+0x290>)
 8015e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015e18:	e00d      	b.n	8015e36 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015e1a:	f7fd fb5f 	bl	80134dc <HAL_RCC_GetSysClockFreq>
 8015e1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015e20:	e009      	b.n	8015e36 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015e28:	e005      	b.n	8015e36 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8015e34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	f000 8137 	beq.w	80160ac <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e42:	4a12      	ldr	r2, [pc, #72]	; (8015e8c <UART_SetConfig+0x294>)
 8015e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015e48:	461a      	mov	r2, r3
 8015e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	685a      	ldr	r2, [r3, #4]
 8015e56:	4613      	mov	r3, r2
 8015e58:	005b      	lsls	r3, r3, #1
 8015e5a:	4413      	add	r3, r2
 8015e5c:	69ba      	ldr	r2, [r7, #24]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d305      	bcc.n	8015e6e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015e62:	697b      	ldr	r3, [r7, #20]
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015e68:	69ba      	ldr	r2, [r7, #24]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d910      	bls.n	8015e90 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8015e6e:	2301      	movs	r3, #1
 8015e70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8015e74:	e11a      	b.n	80160ac <UART_SetConfig+0x4b4>
 8015e76:	bf00      	nop
 8015e78:	cfff69f3 	.word	0xcfff69f3
 8015e7c:	40008000 	.word	0x40008000
 8015e80:	40013800 	.word	0x40013800
 8015e84:	40004400 	.word	0x40004400
 8015e88:	00f42400 	.word	0x00f42400
 8015e8c:	0801aad0 	.word	0x0801aad0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e92:	2200      	movs	r2, #0
 8015e94:	60bb      	str	r3, [r7, #8]
 8015e96:	60fa      	str	r2, [r7, #12]
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e9c:	4a8e      	ldr	r2, [pc, #568]	; (80160d8 <UART_SetConfig+0x4e0>)
 8015e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	603b      	str	r3, [r7, #0]
 8015ea8:	607a      	str	r2, [r7, #4]
 8015eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015eb2:	f7eb f9b1 	bl	8001218 <__aeabi_uldivmod>
 8015eb6:	4602      	mov	r2, r0
 8015eb8:	460b      	mov	r3, r1
 8015eba:	4610      	mov	r0, r2
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	f04f 0200 	mov.w	r2, #0
 8015ec2:	f04f 0300 	mov.w	r3, #0
 8015ec6:	020b      	lsls	r3, r1, #8
 8015ec8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015ecc:	0202      	lsls	r2, r0, #8
 8015ece:	6979      	ldr	r1, [r7, #20]
 8015ed0:	6849      	ldr	r1, [r1, #4]
 8015ed2:	0849      	lsrs	r1, r1, #1
 8015ed4:	2000      	movs	r0, #0
 8015ed6:	460c      	mov	r4, r1
 8015ed8:	4605      	mov	r5, r0
 8015eda:	eb12 0804 	adds.w	r8, r2, r4
 8015ede:	eb43 0905 	adc.w	r9, r3, r5
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	469a      	mov	sl, r3
 8015eea:	4693      	mov	fp, r2
 8015eec:	4652      	mov	r2, sl
 8015eee:	465b      	mov	r3, fp
 8015ef0:	4640      	mov	r0, r8
 8015ef2:	4649      	mov	r1, r9
 8015ef4:	f7eb f990 	bl	8001218 <__aeabi_uldivmod>
 8015ef8:	4602      	mov	r2, r0
 8015efa:	460b      	mov	r3, r1
 8015efc:	4613      	mov	r3, r2
 8015efe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015f00:	6a3b      	ldr	r3, [r7, #32]
 8015f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015f06:	d308      	bcc.n	8015f1a <UART_SetConfig+0x322>
 8015f08:	6a3b      	ldr	r3, [r7, #32]
 8015f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015f0e:	d204      	bcs.n	8015f1a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	6a3a      	ldr	r2, [r7, #32]
 8015f16:	60da      	str	r2, [r3, #12]
 8015f18:	e0c8      	b.n	80160ac <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8015f20:	e0c4      	b.n	80160ac <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	69db      	ldr	r3, [r3, #28]
 8015f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015f2a:	d167      	bne.n	8015ffc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8015f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015f30:	2b08      	cmp	r3, #8
 8015f32:	d828      	bhi.n	8015f86 <UART_SetConfig+0x38e>
 8015f34:	a201      	add	r2, pc, #4	; (adr r2, 8015f3c <UART_SetConfig+0x344>)
 8015f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f3a:	bf00      	nop
 8015f3c:	08015f61 	.word	0x08015f61
 8015f40:	08015f69 	.word	0x08015f69
 8015f44:	08015f71 	.word	0x08015f71
 8015f48:	08015f87 	.word	0x08015f87
 8015f4c:	08015f77 	.word	0x08015f77
 8015f50:	08015f87 	.word	0x08015f87
 8015f54:	08015f87 	.word	0x08015f87
 8015f58:	08015f87 	.word	0x08015f87
 8015f5c:	08015f7f 	.word	0x08015f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015f60:	f7fd fb70 	bl	8013644 <HAL_RCC_GetPCLK1Freq>
 8015f64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015f66:	e014      	b.n	8015f92 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015f68:	f7fd fb7e 	bl	8013668 <HAL_RCC_GetPCLK2Freq>
 8015f6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015f6e:	e010      	b.n	8015f92 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015f70:	4b5a      	ldr	r3, [pc, #360]	; (80160dc <UART_SetConfig+0x4e4>)
 8015f72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015f74:	e00d      	b.n	8015f92 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015f76:	f7fd fab1 	bl	80134dc <HAL_RCC_GetSysClockFreq>
 8015f7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8015f7c:	e009      	b.n	8015f92 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015f84:	e005      	b.n	8015f92 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8015f86:	2300      	movs	r3, #0
 8015f88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8015f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f000 8089 	beq.w	80160ac <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015f9a:	697b      	ldr	r3, [r7, #20]
 8015f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f9e:	4a4e      	ldr	r2, [pc, #312]	; (80160d8 <UART_SetConfig+0x4e0>)
 8015fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8015fac:	005a      	lsls	r2, r3, #1
 8015fae:	697b      	ldr	r3, [r7, #20]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	085b      	lsrs	r3, r3, #1
 8015fb4:	441a      	add	r2, r3
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	685b      	ldr	r3, [r3, #4]
 8015fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015fc0:	6a3b      	ldr	r3, [r7, #32]
 8015fc2:	2b0f      	cmp	r3, #15
 8015fc4:	d916      	bls.n	8015ff4 <UART_SetConfig+0x3fc>
 8015fc6:	6a3b      	ldr	r3, [r7, #32]
 8015fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015fcc:	d212      	bcs.n	8015ff4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015fce:	6a3b      	ldr	r3, [r7, #32]
 8015fd0:	b29b      	uxth	r3, r3
 8015fd2:	f023 030f 	bic.w	r3, r3, #15
 8015fd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015fd8:	6a3b      	ldr	r3, [r7, #32]
 8015fda:	085b      	lsrs	r3, r3, #1
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	f003 0307 	and.w	r3, r3, #7
 8015fe2:	b29a      	uxth	r2, r3
 8015fe4:	8bfb      	ldrh	r3, [r7, #30]
 8015fe6:	4313      	orrs	r3, r2
 8015fe8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	8bfa      	ldrh	r2, [r7, #30]
 8015ff0:	60da      	str	r2, [r3, #12]
 8015ff2:	e05b      	b.n	80160ac <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8015ffa:	e057      	b.n	80160ac <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016000:	2b08      	cmp	r3, #8
 8016002:	d828      	bhi.n	8016056 <UART_SetConfig+0x45e>
 8016004:	a201      	add	r2, pc, #4	; (adr r2, 801600c <UART_SetConfig+0x414>)
 8016006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801600a:	bf00      	nop
 801600c:	08016031 	.word	0x08016031
 8016010:	08016039 	.word	0x08016039
 8016014:	08016041 	.word	0x08016041
 8016018:	08016057 	.word	0x08016057
 801601c:	08016047 	.word	0x08016047
 8016020:	08016057 	.word	0x08016057
 8016024:	08016057 	.word	0x08016057
 8016028:	08016057 	.word	0x08016057
 801602c:	0801604f 	.word	0x0801604f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016030:	f7fd fb08 	bl	8013644 <HAL_RCC_GetPCLK1Freq>
 8016034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016036:	e014      	b.n	8016062 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016038:	f7fd fb16 	bl	8013668 <HAL_RCC_GetPCLK2Freq>
 801603c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801603e:	e010      	b.n	8016062 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016040:	4b26      	ldr	r3, [pc, #152]	; (80160dc <UART_SetConfig+0x4e4>)
 8016042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016044:	e00d      	b.n	8016062 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016046:	f7fd fa49 	bl	80134dc <HAL_RCC_GetSysClockFreq>
 801604a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801604c:	e009      	b.n	8016062 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801604e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016054:	e005      	b.n	8016062 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8016056:	2300      	movs	r3, #0
 8016058:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801605a:	2301      	movs	r3, #1
 801605c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016060:	bf00      	nop
    }

    if (pclk != 0U)
 8016062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016064:	2b00      	cmp	r3, #0
 8016066:	d021      	beq.n	80160ac <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016068:	697b      	ldr	r3, [r7, #20]
 801606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801606c:	4a1a      	ldr	r2, [pc, #104]	; (80160d8 <UART_SetConfig+0x4e0>)
 801606e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016072:	461a      	mov	r2, r3
 8016074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016076:	fbb3 f2f2 	udiv	r2, r3, r2
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	685b      	ldr	r3, [r3, #4]
 801607e:	085b      	lsrs	r3, r3, #1
 8016080:	441a      	add	r2, r3
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	685b      	ldr	r3, [r3, #4]
 8016086:	fbb2 f3f3 	udiv	r3, r2, r3
 801608a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801608c:	6a3b      	ldr	r3, [r7, #32]
 801608e:	2b0f      	cmp	r3, #15
 8016090:	d909      	bls.n	80160a6 <UART_SetConfig+0x4ae>
 8016092:	6a3b      	ldr	r3, [r7, #32]
 8016094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016098:	d205      	bcs.n	80160a6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801609a:	6a3b      	ldr	r3, [r7, #32]
 801609c:	b29a      	uxth	r2, r3
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	60da      	str	r2, [r3, #12]
 80160a4:	e002      	b.n	80160ac <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80160a6:	2301      	movs	r3, #1
 80160a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	2201      	movs	r2, #1
 80160b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	2201      	movs	r2, #1
 80160b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80160bc:	697b      	ldr	r3, [r7, #20]
 80160be:	2200      	movs	r2, #0
 80160c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	2200      	movs	r2, #0
 80160c6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80160c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3730      	adds	r7, #48	; 0x30
 80160d0:	46bd      	mov	sp, r7
 80160d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80160d6:	bf00      	nop
 80160d8:	0801aad0 	.word	0x0801aad0
 80160dc:	00f42400 	.word	0x00f42400

080160e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80160e0:	b480      	push	{r7}
 80160e2:	b083      	sub	sp, #12
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160ec:	f003 0301 	and.w	r3, r3, #1
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00a      	beq.n	801610a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	685b      	ldr	r3, [r3, #4]
 80160fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	430a      	orrs	r2, r1
 8016108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801610e:	f003 0302 	and.w	r3, r3, #2
 8016112:	2b00      	cmp	r3, #0
 8016114:	d00a      	beq.n	801612c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	685b      	ldr	r3, [r3, #4]
 801611c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	430a      	orrs	r2, r1
 801612a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016130:	f003 0304 	and.w	r3, r3, #4
 8016134:	2b00      	cmp	r3, #0
 8016136:	d00a      	beq.n	801614e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	685b      	ldr	r3, [r3, #4]
 801613e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	430a      	orrs	r2, r1
 801614c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016152:	f003 0308 	and.w	r3, r3, #8
 8016156:	2b00      	cmp	r3, #0
 8016158:	d00a      	beq.n	8016170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	430a      	orrs	r2, r1
 801616e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016174:	f003 0310 	and.w	r3, r3, #16
 8016178:	2b00      	cmp	r3, #0
 801617a:	d00a      	beq.n	8016192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	689b      	ldr	r3, [r3, #8]
 8016182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	430a      	orrs	r2, r1
 8016190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016196:	f003 0320 	and.w	r3, r3, #32
 801619a:	2b00      	cmp	r3, #0
 801619c:	d00a      	beq.n	80161b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	689b      	ldr	r3, [r3, #8]
 80161a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	430a      	orrs	r2, r1
 80161b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d01a      	beq.n	80161f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	685b      	ldr	r3, [r3, #4]
 80161c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	430a      	orrs	r2, r1
 80161d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80161de:	d10a      	bne.n	80161f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	430a      	orrs	r2, r1
 80161f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d00a      	beq.n	8016218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	430a      	orrs	r2, r1
 8016216:	605a      	str	r2, [r3, #4]
  }
}
 8016218:	bf00      	nop
 801621a:	370c      	adds	r7, #12
 801621c:	46bd      	mov	sp, r7
 801621e:	bc80      	pop	{r7}
 8016220:	4770      	bx	lr

08016222 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016222:	b580      	push	{r7, lr}
 8016224:	b086      	sub	sp, #24
 8016226:	af02      	add	r7, sp, #8
 8016228:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2200      	movs	r2, #0
 801622e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016232:	f7f9 fe49 	bl	800fec8 <HAL_GetTick>
 8016236:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	f003 0308 	and.w	r3, r3, #8
 8016242:	2b08      	cmp	r3, #8
 8016244:	d10e      	bne.n	8016264 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801624a:	9300      	str	r3, [sp, #0]
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	2200      	movs	r2, #0
 8016250:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 f832 	bl	80162be <UART_WaitOnFlagUntilTimeout>
 801625a:	4603      	mov	r3, r0
 801625c:	2b00      	cmp	r3, #0
 801625e:	d001      	beq.n	8016264 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016260:	2303      	movs	r3, #3
 8016262:	e028      	b.n	80162b6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f003 0304 	and.w	r3, r3, #4
 801626e:	2b04      	cmp	r3, #4
 8016270:	d10e      	bne.n	8016290 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016272:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016276:	9300      	str	r3, [sp, #0]
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	2200      	movs	r2, #0
 801627c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f000 f81c 	bl	80162be <UART_WaitOnFlagUntilTimeout>
 8016286:	4603      	mov	r3, r0
 8016288:	2b00      	cmp	r3, #0
 801628a:	d001      	beq.n	8016290 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801628c:	2303      	movs	r3, #3
 801628e:	e012      	b.n	80162b6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2220      	movs	r2, #32
 8016294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2220      	movs	r2, #32
 801629c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2200      	movs	r2, #0
 80162a4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2200      	movs	r2, #0
 80162aa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2200      	movs	r2, #0
 80162b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80162b4:	2300      	movs	r3, #0
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3710      	adds	r7, #16
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}

080162be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80162be:	b580      	push	{r7, lr}
 80162c0:	b09c      	sub	sp, #112	; 0x70
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	60f8      	str	r0, [r7, #12]
 80162c6:	60b9      	str	r1, [r7, #8]
 80162c8:	603b      	str	r3, [r7, #0]
 80162ca:	4613      	mov	r3, r2
 80162cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80162ce:	e0a9      	b.n	8016424 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80162d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80162d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162d6:	f000 80a5 	beq.w	8016424 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80162da:	f7f9 fdf5 	bl	800fec8 <HAL_GetTick>
 80162de:	4602      	mov	r2, r0
 80162e0:	683b      	ldr	r3, [r7, #0]
 80162e2:	1ad3      	subs	r3, r2, r3
 80162e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d302      	bcc.n	80162f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80162ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d140      	bne.n	8016372 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162f8:	e853 3f00 	ldrex	r3, [r3]
 80162fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80162fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016304:	667b      	str	r3, [r7, #100]	; 0x64
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	461a      	mov	r2, r3
 801630c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801630e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016310:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016316:	e841 2300 	strex	r3, r2, [r1]
 801631a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801631c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801631e:	2b00      	cmp	r3, #0
 8016320:	d1e6      	bne.n	80162f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	3308      	adds	r3, #8
 8016328:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801632a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801632c:	e853 3f00 	ldrex	r3, [r3]
 8016330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016334:	f023 0301 	bic.w	r3, r3, #1
 8016338:	663b      	str	r3, [r7, #96]	; 0x60
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	3308      	adds	r3, #8
 8016340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016342:	64ba      	str	r2, [r7, #72]	; 0x48
 8016344:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801634a:	e841 2300 	strex	r3, r2, [r1]
 801634e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016352:	2b00      	cmp	r3, #0
 8016354:	d1e5      	bne.n	8016322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2220      	movs	r2, #32
 801635a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	2220      	movs	r2, #32
 8016362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	2200      	movs	r2, #0
 801636a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 801636e:	2303      	movs	r3, #3
 8016370:	e069      	b.n	8016446 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	f003 0304 	and.w	r3, r3, #4
 801637c:	2b00      	cmp	r3, #0
 801637e:	d051      	beq.n	8016424 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	69db      	ldr	r3, [r3, #28]
 8016386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801638a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801638e:	d149      	bne.n	8016424 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016398:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a2:	e853 3f00 	ldrex	r3, [r3]
 80163a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80163a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80163ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	461a      	mov	r2, r3
 80163b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80163b8:	637b      	str	r3, [r7, #52]	; 0x34
 80163ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80163be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163c0:	e841 2300 	strex	r3, r2, [r1]
 80163c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80163c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1e6      	bne.n	801639a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	3308      	adds	r3, #8
 80163d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	e853 3f00 	ldrex	r3, [r3]
 80163da:	613b      	str	r3, [r7, #16]
   return(result);
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	f023 0301 	bic.w	r3, r3, #1
 80163e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	3308      	adds	r3, #8
 80163ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80163ec:	623a      	str	r2, [r7, #32]
 80163ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163f0:	69f9      	ldr	r1, [r7, #28]
 80163f2:	6a3a      	ldr	r2, [r7, #32]
 80163f4:	e841 2300 	strex	r3, r2, [r1]
 80163f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80163fa:	69bb      	ldr	r3, [r7, #24]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d1e5      	bne.n	80163cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2220      	movs	r2, #32
 8016404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	2220      	movs	r2, #32
 801640c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	2220      	movs	r2, #32
 8016414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2200      	movs	r2, #0
 801641c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8016420:	2303      	movs	r3, #3
 8016422:	e010      	b.n	8016446 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	69da      	ldr	r2, [r3, #28]
 801642a:	68bb      	ldr	r3, [r7, #8]
 801642c:	4013      	ands	r3, r2
 801642e:	68ba      	ldr	r2, [r7, #8]
 8016430:	429a      	cmp	r2, r3
 8016432:	bf0c      	ite	eq
 8016434:	2301      	moveq	r3, #1
 8016436:	2300      	movne	r3, #0
 8016438:	b2db      	uxtb	r3, r3
 801643a:	461a      	mov	r2, r3
 801643c:	79fb      	ldrb	r3, [r7, #7]
 801643e:	429a      	cmp	r2, r3
 8016440:	f43f af46 	beq.w	80162d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016444:	2300      	movs	r3, #0
}
 8016446:	4618      	mov	r0, r3
 8016448:	3770      	adds	r7, #112	; 0x70
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
	...

08016450 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b096      	sub	sp, #88	; 0x58
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	60b9      	str	r1, [r7, #8]
 801645a:	4613      	mov	r3, r2
 801645c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	88fa      	ldrh	r2, [r7, #6]
 8016468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2200      	movs	r2, #0
 8016470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2222      	movs	r2, #34	; 0x22
 8016478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016482:	2b00      	cmp	r3, #0
 8016484:	d02d      	beq.n	80164e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801648c:	4a40      	ldr	r2, [pc, #256]	; (8016590 <UART_Start_Receive_DMA+0x140>)
 801648e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016496:	4a3f      	ldr	r2, [pc, #252]	; (8016594 <UART_Start_Receive_DMA+0x144>)
 8016498:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80164a0:	4a3d      	ldr	r2, [pc, #244]	; (8016598 <UART_Start_Receive_DMA+0x148>)
 80164a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80164aa:	2200      	movs	r2, #0
 80164ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	3324      	adds	r3, #36	; 0x24
 80164ba:	4619      	mov	r1, r3
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164c0:	461a      	mov	r2, r3
 80164c2:	88fb      	ldrh	r3, [r7, #6]
 80164c4:	f7fa f9da 	bl	801087c <HAL_DMA_Start_IT>
 80164c8:	4603      	mov	r3, r0
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d009      	beq.n	80164e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	2210      	movs	r2, #16
 80164d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	2220      	movs	r2, #32
 80164da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80164de:	2301      	movs	r3, #1
 80164e0:	e051      	b.n	8016586 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	691b      	ldr	r3, [r3, #16]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d018      	beq.n	801651c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164f2:	e853 3f00 	ldrex	r3, [r3]
 80164f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80164f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80164fe:	657b      	str	r3, [r7, #84]	; 0x54
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	461a      	mov	r2, r3
 8016506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016508:	64bb      	str	r3, [r7, #72]	; 0x48
 801650a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801650c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801650e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016510:	e841 2300 	strex	r3, r2, [r1]
 8016514:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016518:	2b00      	cmp	r3, #0
 801651a:	d1e6      	bne.n	80164ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	3308      	adds	r3, #8
 8016522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016526:	e853 3f00 	ldrex	r3, [r3]
 801652a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652e:	f043 0301 	orr.w	r3, r3, #1
 8016532:	653b      	str	r3, [r7, #80]	; 0x50
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	3308      	adds	r3, #8
 801653a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801653c:	637a      	str	r2, [r7, #52]	; 0x34
 801653e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016544:	e841 2300 	strex	r3, r2, [r1]
 8016548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1e5      	bne.n	801651c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	3308      	adds	r3, #8
 8016556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	e853 3f00 	ldrex	r3, [r3]
 801655e:	613b      	str	r3, [r7, #16]
   return(result);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	3308      	adds	r3, #8
 801656e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016570:	623a      	str	r2, [r7, #32]
 8016572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016574:	69f9      	ldr	r1, [r7, #28]
 8016576:	6a3a      	ldr	r2, [r7, #32]
 8016578:	e841 2300 	strex	r3, r2, [r1]
 801657c:	61bb      	str	r3, [r7, #24]
   return(result);
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d1e5      	bne.n	8016550 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	3758      	adds	r7, #88	; 0x58
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	0801679d 	.word	0x0801679d
 8016594:	080168c9 	.word	0x080168c9
 8016598:	08016907 	.word	0x08016907

0801659c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801659c:	b480      	push	{r7}
 801659e:	b08f      	sub	sp, #60	; 0x3c
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165aa:	6a3b      	ldr	r3, [r7, #32]
 80165ac:	e853 3f00 	ldrex	r3, [r3]
 80165b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80165b2:	69fb      	ldr	r3, [r7, #28]
 80165b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80165b8:	637b      	str	r3, [r7, #52]	; 0x34
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	461a      	mov	r2, r3
 80165c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165ca:	e841 2300 	strex	r3, r2, [r1]
 80165ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80165d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d1e6      	bne.n	80165a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	3308      	adds	r3, #8
 80165dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	e853 3f00 	ldrex	r3, [r3]
 80165e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80165e6:	68bb      	ldr	r3, [r7, #8]
 80165e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80165ec:	633b      	str	r3, [r7, #48]	; 0x30
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	3308      	adds	r3, #8
 80165f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165f6:	61ba      	str	r2, [r7, #24]
 80165f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165fa:	6979      	ldr	r1, [r7, #20]
 80165fc:	69ba      	ldr	r2, [r7, #24]
 80165fe:	e841 2300 	strex	r3, r2, [r1]
 8016602:	613b      	str	r3, [r7, #16]
   return(result);
 8016604:	693b      	ldr	r3, [r7, #16]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1e5      	bne.n	80165d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2220      	movs	r2, #32
 801660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8016612:	bf00      	nop
 8016614:	373c      	adds	r7, #60	; 0x3c
 8016616:	46bd      	mov	sp, r7
 8016618:	bc80      	pop	{r7}
 801661a:	4770      	bx	lr

0801661c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801661c:	b480      	push	{r7}
 801661e:	b095      	sub	sp, #84	; 0x54
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801662c:	e853 3f00 	ldrex	r3, [r3]
 8016630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016638:	64fb      	str	r3, [r7, #76]	; 0x4c
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	461a      	mov	r2, r3
 8016640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016642:	643b      	str	r3, [r7, #64]	; 0x40
 8016644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801664a:	e841 2300 	strex	r3, r2, [r1]
 801664e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016652:	2b00      	cmp	r3, #0
 8016654:	d1e6      	bne.n	8016624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	3308      	adds	r3, #8
 801665c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801665e:	6a3b      	ldr	r3, [r7, #32]
 8016660:	e853 3f00 	ldrex	r3, [r3]
 8016664:	61fb      	str	r3, [r7, #28]
   return(result);
 8016666:	69fb      	ldr	r3, [r7, #28]
 8016668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801666c:	f023 0301 	bic.w	r3, r3, #1
 8016670:	64bb      	str	r3, [r7, #72]	; 0x48
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	3308      	adds	r3, #8
 8016678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801667a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801667c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801667e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016682:	e841 2300 	strex	r3, r2, [r1]
 8016686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801668a:	2b00      	cmp	r3, #0
 801668c:	d1e3      	bne.n	8016656 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016692:	2b01      	cmp	r3, #1
 8016694:	d118      	bne.n	80166c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	e853 3f00 	ldrex	r3, [r3]
 80166a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	f023 0310 	bic.w	r3, r3, #16
 80166aa:	647b      	str	r3, [r7, #68]	; 0x44
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	461a      	mov	r2, r3
 80166b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166b4:	61bb      	str	r3, [r7, #24]
 80166b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166b8:	6979      	ldr	r1, [r7, #20]
 80166ba:	69ba      	ldr	r2, [r7, #24]
 80166bc:	e841 2300 	strex	r3, r2, [r1]
 80166c0:	613b      	str	r3, [r7, #16]
   return(result);
 80166c2:	693b      	ldr	r3, [r7, #16]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d1e6      	bne.n	8016696 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2220      	movs	r2, #32
 80166cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2200      	movs	r2, #0
 80166d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	2200      	movs	r2, #0
 80166da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80166dc:	bf00      	nop
 80166de:	3754      	adds	r7, #84	; 0x54
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bc80      	pop	{r7}
 80166e4:	4770      	bx	lr

080166e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80166e6:	b580      	push	{r7, lr}
 80166e8:	b090      	sub	sp, #64	; 0x40
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	f003 0320 	and.w	r3, r3, #32
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d137      	bne.n	8016772 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8016702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016704:	2200      	movs	r2, #0
 8016706:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801670a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	3308      	adds	r3, #8
 8016710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016714:	e853 3f00 	ldrex	r3, [r3]
 8016718:	623b      	str	r3, [r7, #32]
   return(result);
 801671a:	6a3b      	ldr	r3, [r7, #32]
 801671c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016720:	63bb      	str	r3, [r7, #56]	; 0x38
 8016722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	3308      	adds	r3, #8
 8016728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801672a:	633a      	str	r2, [r7, #48]	; 0x30
 801672c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801672e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016732:	e841 2300 	strex	r3, r2, [r1]
 8016736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801673a:	2b00      	cmp	r3, #0
 801673c:	d1e5      	bne.n	801670a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801673e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	e853 3f00 	ldrex	r3, [r3]
 801674a:	60fb      	str	r3, [r7, #12]
   return(result);
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016752:	637b      	str	r3, [r7, #52]	; 0x34
 8016754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	461a      	mov	r2, r3
 801675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801675c:	61fb      	str	r3, [r7, #28]
 801675e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016760:	69b9      	ldr	r1, [r7, #24]
 8016762:	69fa      	ldr	r2, [r7, #28]
 8016764:	e841 2300 	strex	r3, r2, [r1]
 8016768:	617b      	str	r3, [r7, #20]
   return(result);
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d1e6      	bne.n	801673e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016770:	e002      	b.n	8016778 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8016772:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016774:	f7ec f90e 	bl	8002994 <HAL_UART_TxCpltCallback>
}
 8016778:	bf00      	nop
 801677a:	3740      	adds	r7, #64	; 0x40
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801678c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801678e:	68f8      	ldr	r0, [r7, #12]
 8016790:	f7ff fa0c 	bl	8015bac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016794:	bf00      	nop
 8016796:	3710      	adds	r7, #16
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}

0801679c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b09c      	sub	sp, #112	; 0x70
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	f003 0320 	and.w	r3, r3, #32
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d171      	bne.n	801689c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80167b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167ba:	2200      	movs	r2, #0
 80167bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80167c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167c8:	e853 3f00 	ldrex	r3, [r3]
 80167cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80167ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80167d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	461a      	mov	r2, r3
 80167dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80167de:	65bb      	str	r3, [r7, #88]	; 0x58
 80167e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80167e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80167e6:	e841 2300 	strex	r3, r2, [r1]
 80167ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80167ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d1e6      	bne.n	80167c0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80167f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	3308      	adds	r3, #8
 80167f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167fc:	e853 3f00 	ldrex	r3, [r3]
 8016800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016804:	f023 0301 	bic.w	r3, r3, #1
 8016808:	667b      	str	r3, [r7, #100]	; 0x64
 801680a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	3308      	adds	r3, #8
 8016810:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016812:	647a      	str	r2, [r7, #68]	; 0x44
 8016814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801681a:	e841 2300 	strex	r3, r2, [r1]
 801681e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016822:	2b00      	cmp	r3, #0
 8016824:	d1e5      	bne.n	80167f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	3308      	adds	r3, #8
 801682c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016830:	e853 3f00 	ldrex	r3, [r3]
 8016834:	623b      	str	r3, [r7, #32]
   return(result);
 8016836:	6a3b      	ldr	r3, [r7, #32]
 8016838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801683c:	663b      	str	r3, [r7, #96]	; 0x60
 801683e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	3308      	adds	r3, #8
 8016844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016846:	633a      	str	r2, [r7, #48]	; 0x30
 8016848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801684a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801684e:	e841 2300 	strex	r3, r2, [r1]
 8016852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016856:	2b00      	cmp	r3, #0
 8016858:	d1e5      	bne.n	8016826 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801685a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801685c:	2220      	movs	r2, #32
 801685e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016866:	2b01      	cmp	r3, #1
 8016868:	d118      	bne.n	801689c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801686a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016870:	693b      	ldr	r3, [r7, #16]
 8016872:	e853 3f00 	ldrex	r3, [r3]
 8016876:	60fb      	str	r3, [r7, #12]
   return(result);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	f023 0310 	bic.w	r3, r3, #16
 801687e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	461a      	mov	r2, r3
 8016886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016888:	61fb      	str	r3, [r7, #28]
 801688a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801688c:	69b9      	ldr	r1, [r7, #24]
 801688e:	69fa      	ldr	r2, [r7, #28]
 8016890:	e841 2300 	strex	r3, r2, [r1]
 8016894:	617b      	str	r3, [r7, #20]
   return(result);
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d1e6      	bne.n	801686a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801689c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801689e:	2200      	movs	r2, #0
 80168a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80168a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168a6:	2b01      	cmp	r3, #1
 80168a8:	d107      	bne.n	80168ba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80168aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80168ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80168b0:	4619      	mov	r1, r3
 80168b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80168b4:	f7ff f995 	bl	8015be2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80168b8:	e002      	b.n	80168c0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80168ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80168bc:	f7ec f87c 	bl	80029b8 <HAL_UART_RxCpltCallback>
}
 80168c0:	bf00      	nop
 80168c2:	3770      	adds	r7, #112	; 0x70
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	2201      	movs	r2, #1
 80168da:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	d109      	bne.n	80168f8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80168ea:	085b      	lsrs	r3, r3, #1
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	4619      	mov	r1, r3
 80168f0:	68f8      	ldr	r0, [r7, #12]
 80168f2:	f7ff f976 	bl	8015be2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80168f6:	e002      	b.n	80168fe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	f7ff f960 	bl	8015bbe <HAL_UART_RxHalfCpltCallback>
}
 80168fe:	bf00      	nop
 8016900:	3710      	adds	r7, #16
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}

08016906 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8016906:	b580      	push	{r7, lr}
 8016908:	b086      	sub	sp, #24
 801690a:	af00      	add	r7, sp, #0
 801690c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016912:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801691a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016922:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	689b      	ldr	r3, [r3, #8]
 801692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801692e:	2b80      	cmp	r3, #128	; 0x80
 8016930:	d109      	bne.n	8016946 <UART_DMAError+0x40>
 8016932:	693b      	ldr	r3, [r7, #16]
 8016934:	2b21      	cmp	r3, #33	; 0x21
 8016936:	d106      	bne.n	8016946 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	2200      	movs	r2, #0
 801693c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8016940:	6978      	ldr	r0, [r7, #20]
 8016942:	f7ff fe2b 	bl	801659c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	689b      	ldr	r3, [r3, #8]
 801694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016950:	2b40      	cmp	r3, #64	; 0x40
 8016952:	d109      	bne.n	8016968 <UART_DMAError+0x62>
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	2b22      	cmp	r3, #34	; 0x22
 8016958:	d106      	bne.n	8016968 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	2200      	movs	r2, #0
 801695e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8016962:	6978      	ldr	r0, [r7, #20]
 8016964:	f7ff fe5a 	bl	801661c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801696e:	f043 0210 	orr.w	r2, r3, #16
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016978:	6978      	ldr	r0, [r7, #20]
 801697a:	f7ff f929 	bl	8015bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801697e:	bf00      	nop
 8016980:	3718      	adds	r7, #24
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016986:	b480      	push	{r7}
 8016988:	b085      	sub	sp, #20
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016994:	2b01      	cmp	r3, #1
 8016996:	d101      	bne.n	801699c <HAL_UARTEx_DisableFifoMode+0x16>
 8016998:	2302      	movs	r3, #2
 801699a:	e027      	b.n	80169ec <HAL_UARTEx_DisableFifoMode+0x66>
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2201      	movs	r2, #1
 80169a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2224      	movs	r2, #36	; 0x24
 80169a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	681a      	ldr	r2, [r3, #0]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	f022 0201 	bic.w	r2, r2, #1
 80169c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80169ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2200      	movs	r2, #0
 80169d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	68fa      	ldr	r2, [r7, #12]
 80169d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2220      	movs	r2, #32
 80169de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	2200      	movs	r2, #0
 80169e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80169ea:	2300      	movs	r3, #0
}
 80169ec:	4618      	mov	r0, r3
 80169ee:	3714      	adds	r7, #20
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bc80      	pop	{r7}
 80169f4:	4770      	bx	lr

080169f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80169f6:	b580      	push	{r7, lr}
 80169f8:	b084      	sub	sp, #16
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	6078      	str	r0, [r7, #4]
 80169fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	d101      	bne.n	8016a0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016a0a:	2302      	movs	r3, #2
 8016a0c:	e02d      	b.n	8016a6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2201      	movs	r2, #1
 8016a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2224      	movs	r2, #36	; 0x24
 8016a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	681a      	ldr	r2, [r3, #0]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	f022 0201 	bic.w	r2, r2, #1
 8016a34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	689b      	ldr	r3, [r3, #8]
 8016a3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	683a      	ldr	r2, [r7, #0]
 8016a46:	430a      	orrs	r2, r1
 8016a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f000 f850 	bl	8016af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	68fa      	ldr	r2, [r7, #12]
 8016a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2220      	movs	r2, #32
 8016a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2200      	movs	r2, #0
 8016a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016a68:	2300      	movs	r3, #0
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3710      	adds	r7, #16
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b084      	sub	sp, #16
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	6078      	str	r0, [r7, #4]
 8016a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016a82:	2b01      	cmp	r3, #1
 8016a84:	d101      	bne.n	8016a8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016a86:	2302      	movs	r3, #2
 8016a88:	e02d      	b.n	8016ae6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2201      	movs	r2, #1
 8016a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2224      	movs	r2, #36	; 0x24
 8016a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	681a      	ldr	r2, [r3, #0]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	f022 0201 	bic.w	r2, r2, #1
 8016ab0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	689b      	ldr	r3, [r3, #8]
 8016ab8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	683a      	ldr	r2, [r7, #0]
 8016ac2:	430a      	orrs	r2, r1
 8016ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f000 f812 	bl	8016af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	68fa      	ldr	r2, [r7, #12]
 8016ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2220      	movs	r2, #32
 8016ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ae4:	2300      	movs	r3, #0
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3710      	adds	r7, #16
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
	...

08016af0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016af0:	b480      	push	{r7}
 8016af2:	b085      	sub	sp, #20
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d108      	bne.n	8016b12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2201      	movs	r2, #1
 8016b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016b10:	e031      	b.n	8016b76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016b12:	2308      	movs	r3, #8
 8016b14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016b16:	2308      	movs	r3, #8
 8016b18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	689b      	ldr	r3, [r3, #8]
 8016b20:	0e5b      	lsrs	r3, r3, #25
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	f003 0307 	and.w	r3, r3, #7
 8016b28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	689b      	ldr	r3, [r3, #8]
 8016b30:	0f5b      	lsrs	r3, r3, #29
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	f003 0307 	and.w	r3, r3, #7
 8016b38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b3a:	7bbb      	ldrb	r3, [r7, #14]
 8016b3c:	7b3a      	ldrb	r2, [r7, #12]
 8016b3e:	4910      	ldr	r1, [pc, #64]	; (8016b80 <UARTEx_SetNbDataToProcess+0x90>)
 8016b40:	5c8a      	ldrb	r2, [r1, r2]
 8016b42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016b46:	7b3a      	ldrb	r2, [r7, #12]
 8016b48:	490e      	ldr	r1, [pc, #56]	; (8016b84 <UARTEx_SetNbDataToProcess+0x94>)
 8016b4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b58:	7bfb      	ldrb	r3, [r7, #15]
 8016b5a:	7b7a      	ldrb	r2, [r7, #13]
 8016b5c:	4908      	ldr	r1, [pc, #32]	; (8016b80 <UARTEx_SetNbDataToProcess+0x90>)
 8016b5e:	5c8a      	ldrb	r2, [r1, r2]
 8016b60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016b64:	7b7a      	ldrb	r2, [r7, #13]
 8016b66:	4907      	ldr	r1, [pc, #28]	; (8016b84 <UARTEx_SetNbDataToProcess+0x94>)
 8016b68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016b76:	bf00      	nop
 8016b78:	3714      	adds	r7, #20
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bc80      	pop	{r7}
 8016b7e:	4770      	bx	lr
 8016b80:	0801aae8 	.word	0x0801aae8
 8016b84:	0801aaf0 	.word	0x0801aaf0

08016b88 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8016b88:	b480      	push	{r7}
 8016b8a:	b087      	sub	sp, #28
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	60f8      	str	r0, [r7, #12]
 8016b90:	60b9      	str	r1, [r7, #8]
 8016b92:	4613      	mov	r3, r2
 8016b94:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	613b      	str	r3, [r7, #16]

  while( size-- )
 8016b9e:	e007      	b.n	8016bb0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8016ba0:	693a      	ldr	r2, [r7, #16]
 8016ba2:	1c53      	adds	r3, r2, #1
 8016ba4:	613b      	str	r3, [r7, #16]
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	1c59      	adds	r1, r3, #1
 8016baa:	6179      	str	r1, [r7, #20]
 8016bac:	7812      	ldrb	r2, [r2, #0]
 8016bae:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8016bb0:	88fb      	ldrh	r3, [r7, #6]
 8016bb2:	1e5a      	subs	r2, r3, #1
 8016bb4:	80fa      	strh	r2, [r7, #6]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d1f2      	bne.n	8016ba0 <UTIL_MEM_cpy_8+0x18>
    }
}
 8016bba:	bf00      	nop
 8016bbc:	bf00      	nop
 8016bbe:	371c      	adds	r7, #28
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bc80      	pop	{r7}
 8016bc4:	4770      	bx	lr

08016bc6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8016bc6:	b480      	push	{r7}
 8016bc8:	b085      	sub	sp, #20
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
 8016bce:	460b      	mov	r3, r1
 8016bd0:	70fb      	strb	r3, [r7, #3]
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8016bda:	e004      	b.n	8016be6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	1c5a      	adds	r2, r3, #1
 8016be0:	60fa      	str	r2, [r7, #12]
 8016be2:	78fa      	ldrb	r2, [r7, #3]
 8016be4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8016be6:	883b      	ldrh	r3, [r7, #0]
 8016be8:	1e5a      	subs	r2, r3, #1
 8016bea:	803a      	strh	r2, [r7, #0]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d1f5      	bne.n	8016bdc <UTIL_MEM_set_8+0x16>
  }
}
 8016bf0:	bf00      	nop
 8016bf2:	bf00      	nop
 8016bf4:	3714      	adds	r7, #20
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bc80      	pop	{r7}
 8016bfa:	4770      	bx	lr

08016bfc <__errno>:
 8016bfc:	4b01      	ldr	r3, [pc, #4]	; (8016c04 <__errno+0x8>)
 8016bfe:	6818      	ldr	r0, [r3, #0]
 8016c00:	4770      	bx	lr
 8016c02:	bf00      	nop
 8016c04:	2000065c 	.word	0x2000065c

08016c08 <__libc_init_array>:
 8016c08:	b570      	push	{r4, r5, r6, lr}
 8016c0a:	4d0d      	ldr	r5, [pc, #52]	; (8016c40 <__libc_init_array+0x38>)
 8016c0c:	4c0d      	ldr	r4, [pc, #52]	; (8016c44 <__libc_init_array+0x3c>)
 8016c0e:	1b64      	subs	r4, r4, r5
 8016c10:	10a4      	asrs	r4, r4, #2
 8016c12:	2600      	movs	r6, #0
 8016c14:	42a6      	cmp	r6, r4
 8016c16:	d109      	bne.n	8016c2c <__libc_init_array+0x24>
 8016c18:	4d0b      	ldr	r5, [pc, #44]	; (8016c48 <__libc_init_array+0x40>)
 8016c1a:	4c0c      	ldr	r4, [pc, #48]	; (8016c4c <__libc_init_array+0x44>)
 8016c1c:	f002 ffc0 	bl	8019ba0 <_init>
 8016c20:	1b64      	subs	r4, r4, r5
 8016c22:	10a4      	asrs	r4, r4, #2
 8016c24:	2600      	movs	r6, #0
 8016c26:	42a6      	cmp	r6, r4
 8016c28:	d105      	bne.n	8016c36 <__libc_init_array+0x2e>
 8016c2a:	bd70      	pop	{r4, r5, r6, pc}
 8016c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c30:	4798      	blx	r3
 8016c32:	3601      	adds	r6, #1
 8016c34:	e7ee      	b.n	8016c14 <__libc_init_array+0xc>
 8016c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c3a:	4798      	blx	r3
 8016c3c:	3601      	adds	r6, #1
 8016c3e:	e7f2      	b.n	8016c26 <__libc_init_array+0x1e>
 8016c40:	0801aedc 	.word	0x0801aedc
 8016c44:	0801aedc 	.word	0x0801aedc
 8016c48:	0801aedc 	.word	0x0801aedc
 8016c4c:	0801aee0 	.word	0x0801aee0

08016c50 <malloc>:
 8016c50:	4b02      	ldr	r3, [pc, #8]	; (8016c5c <malloc+0xc>)
 8016c52:	4601      	mov	r1, r0
 8016c54:	6818      	ldr	r0, [r3, #0]
 8016c56:	f000 b893 	b.w	8016d80 <_malloc_r>
 8016c5a:	bf00      	nop
 8016c5c:	2000065c 	.word	0x2000065c

08016c60 <memcmp>:
 8016c60:	b510      	push	{r4, lr}
 8016c62:	3901      	subs	r1, #1
 8016c64:	4402      	add	r2, r0
 8016c66:	4290      	cmp	r0, r2
 8016c68:	d101      	bne.n	8016c6e <memcmp+0xe>
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	e005      	b.n	8016c7a <memcmp+0x1a>
 8016c6e:	7803      	ldrb	r3, [r0, #0]
 8016c70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c74:	42a3      	cmp	r3, r4
 8016c76:	d001      	beq.n	8016c7c <memcmp+0x1c>
 8016c78:	1b18      	subs	r0, r3, r4
 8016c7a:	bd10      	pop	{r4, pc}
 8016c7c:	3001      	adds	r0, #1
 8016c7e:	e7f2      	b.n	8016c66 <memcmp+0x6>

08016c80 <memcpy>:
 8016c80:	440a      	add	r2, r1
 8016c82:	4291      	cmp	r1, r2
 8016c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8016c88:	d100      	bne.n	8016c8c <memcpy+0xc>
 8016c8a:	4770      	bx	lr
 8016c8c:	b510      	push	{r4, lr}
 8016c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c96:	4291      	cmp	r1, r2
 8016c98:	d1f9      	bne.n	8016c8e <memcpy+0xe>
 8016c9a:	bd10      	pop	{r4, pc}

08016c9c <memset>:
 8016c9c:	4402      	add	r2, r0
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	d100      	bne.n	8016ca6 <memset+0xa>
 8016ca4:	4770      	bx	lr
 8016ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8016caa:	e7f9      	b.n	8016ca0 <memset+0x4>

08016cac <_free_r>:
 8016cac:	b538      	push	{r3, r4, r5, lr}
 8016cae:	4605      	mov	r5, r0
 8016cb0:	2900      	cmp	r1, #0
 8016cb2:	d041      	beq.n	8016d38 <_free_r+0x8c>
 8016cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cb8:	1f0c      	subs	r4, r1, #4
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	bfb8      	it	lt
 8016cbe:	18e4      	addlt	r4, r4, r3
 8016cc0:	f001 ff84 	bl	8018bcc <__malloc_lock>
 8016cc4:	4a1d      	ldr	r2, [pc, #116]	; (8016d3c <_free_r+0x90>)
 8016cc6:	6813      	ldr	r3, [r2, #0]
 8016cc8:	b933      	cbnz	r3, 8016cd8 <_free_r+0x2c>
 8016cca:	6063      	str	r3, [r4, #4]
 8016ccc:	6014      	str	r4, [r2, #0]
 8016cce:	4628      	mov	r0, r5
 8016cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016cd4:	f001 bf80 	b.w	8018bd8 <__malloc_unlock>
 8016cd8:	42a3      	cmp	r3, r4
 8016cda:	d908      	bls.n	8016cee <_free_r+0x42>
 8016cdc:	6820      	ldr	r0, [r4, #0]
 8016cde:	1821      	adds	r1, r4, r0
 8016ce0:	428b      	cmp	r3, r1
 8016ce2:	bf01      	itttt	eq
 8016ce4:	6819      	ldreq	r1, [r3, #0]
 8016ce6:	685b      	ldreq	r3, [r3, #4]
 8016ce8:	1809      	addeq	r1, r1, r0
 8016cea:	6021      	streq	r1, [r4, #0]
 8016cec:	e7ed      	b.n	8016cca <_free_r+0x1e>
 8016cee:	461a      	mov	r2, r3
 8016cf0:	685b      	ldr	r3, [r3, #4]
 8016cf2:	b10b      	cbz	r3, 8016cf8 <_free_r+0x4c>
 8016cf4:	42a3      	cmp	r3, r4
 8016cf6:	d9fa      	bls.n	8016cee <_free_r+0x42>
 8016cf8:	6811      	ldr	r1, [r2, #0]
 8016cfa:	1850      	adds	r0, r2, r1
 8016cfc:	42a0      	cmp	r0, r4
 8016cfe:	d10b      	bne.n	8016d18 <_free_r+0x6c>
 8016d00:	6820      	ldr	r0, [r4, #0]
 8016d02:	4401      	add	r1, r0
 8016d04:	1850      	adds	r0, r2, r1
 8016d06:	4283      	cmp	r3, r0
 8016d08:	6011      	str	r1, [r2, #0]
 8016d0a:	d1e0      	bne.n	8016cce <_free_r+0x22>
 8016d0c:	6818      	ldr	r0, [r3, #0]
 8016d0e:	685b      	ldr	r3, [r3, #4]
 8016d10:	6053      	str	r3, [r2, #4]
 8016d12:	4401      	add	r1, r0
 8016d14:	6011      	str	r1, [r2, #0]
 8016d16:	e7da      	b.n	8016cce <_free_r+0x22>
 8016d18:	d902      	bls.n	8016d20 <_free_r+0x74>
 8016d1a:	230c      	movs	r3, #12
 8016d1c:	602b      	str	r3, [r5, #0]
 8016d1e:	e7d6      	b.n	8016cce <_free_r+0x22>
 8016d20:	6820      	ldr	r0, [r4, #0]
 8016d22:	1821      	adds	r1, r4, r0
 8016d24:	428b      	cmp	r3, r1
 8016d26:	bf04      	itt	eq
 8016d28:	6819      	ldreq	r1, [r3, #0]
 8016d2a:	685b      	ldreq	r3, [r3, #4]
 8016d2c:	6063      	str	r3, [r4, #4]
 8016d2e:	bf04      	itt	eq
 8016d30:	1809      	addeq	r1, r1, r0
 8016d32:	6021      	streq	r1, [r4, #0]
 8016d34:	6054      	str	r4, [r2, #4]
 8016d36:	e7ca      	b.n	8016cce <_free_r+0x22>
 8016d38:	bd38      	pop	{r3, r4, r5, pc}
 8016d3a:	bf00      	nop
 8016d3c:	20006ebc 	.word	0x20006ebc

08016d40 <sbrk_aligned>:
 8016d40:	b570      	push	{r4, r5, r6, lr}
 8016d42:	4e0e      	ldr	r6, [pc, #56]	; (8016d7c <sbrk_aligned+0x3c>)
 8016d44:	460c      	mov	r4, r1
 8016d46:	6831      	ldr	r1, [r6, #0]
 8016d48:	4605      	mov	r5, r0
 8016d4a:	b911      	cbnz	r1, 8016d52 <sbrk_aligned+0x12>
 8016d4c:	f000 fd76 	bl	801783c <_sbrk_r>
 8016d50:	6030      	str	r0, [r6, #0]
 8016d52:	4621      	mov	r1, r4
 8016d54:	4628      	mov	r0, r5
 8016d56:	f000 fd71 	bl	801783c <_sbrk_r>
 8016d5a:	1c43      	adds	r3, r0, #1
 8016d5c:	d00a      	beq.n	8016d74 <sbrk_aligned+0x34>
 8016d5e:	1cc4      	adds	r4, r0, #3
 8016d60:	f024 0403 	bic.w	r4, r4, #3
 8016d64:	42a0      	cmp	r0, r4
 8016d66:	d007      	beq.n	8016d78 <sbrk_aligned+0x38>
 8016d68:	1a21      	subs	r1, r4, r0
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	f000 fd66 	bl	801783c <_sbrk_r>
 8016d70:	3001      	adds	r0, #1
 8016d72:	d101      	bne.n	8016d78 <sbrk_aligned+0x38>
 8016d74:	f04f 34ff 	mov.w	r4, #4294967295
 8016d78:	4620      	mov	r0, r4
 8016d7a:	bd70      	pop	{r4, r5, r6, pc}
 8016d7c:	20006ec0 	.word	0x20006ec0

08016d80 <_malloc_r>:
 8016d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d84:	1ccd      	adds	r5, r1, #3
 8016d86:	f025 0503 	bic.w	r5, r5, #3
 8016d8a:	3508      	adds	r5, #8
 8016d8c:	2d0c      	cmp	r5, #12
 8016d8e:	bf38      	it	cc
 8016d90:	250c      	movcc	r5, #12
 8016d92:	2d00      	cmp	r5, #0
 8016d94:	4607      	mov	r7, r0
 8016d96:	db01      	blt.n	8016d9c <_malloc_r+0x1c>
 8016d98:	42a9      	cmp	r1, r5
 8016d9a:	d905      	bls.n	8016da8 <_malloc_r+0x28>
 8016d9c:	230c      	movs	r3, #12
 8016d9e:	603b      	str	r3, [r7, #0]
 8016da0:	2600      	movs	r6, #0
 8016da2:	4630      	mov	r0, r6
 8016da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016da8:	4e2e      	ldr	r6, [pc, #184]	; (8016e64 <_malloc_r+0xe4>)
 8016daa:	f001 ff0f 	bl	8018bcc <__malloc_lock>
 8016dae:	6833      	ldr	r3, [r6, #0]
 8016db0:	461c      	mov	r4, r3
 8016db2:	bb34      	cbnz	r4, 8016e02 <_malloc_r+0x82>
 8016db4:	4629      	mov	r1, r5
 8016db6:	4638      	mov	r0, r7
 8016db8:	f7ff ffc2 	bl	8016d40 <sbrk_aligned>
 8016dbc:	1c43      	adds	r3, r0, #1
 8016dbe:	4604      	mov	r4, r0
 8016dc0:	d14d      	bne.n	8016e5e <_malloc_r+0xde>
 8016dc2:	6834      	ldr	r4, [r6, #0]
 8016dc4:	4626      	mov	r6, r4
 8016dc6:	2e00      	cmp	r6, #0
 8016dc8:	d140      	bne.n	8016e4c <_malloc_r+0xcc>
 8016dca:	6823      	ldr	r3, [r4, #0]
 8016dcc:	4631      	mov	r1, r6
 8016dce:	4638      	mov	r0, r7
 8016dd0:	eb04 0803 	add.w	r8, r4, r3
 8016dd4:	f000 fd32 	bl	801783c <_sbrk_r>
 8016dd8:	4580      	cmp	r8, r0
 8016dda:	d13a      	bne.n	8016e52 <_malloc_r+0xd2>
 8016ddc:	6821      	ldr	r1, [r4, #0]
 8016dde:	3503      	adds	r5, #3
 8016de0:	1a6d      	subs	r5, r5, r1
 8016de2:	f025 0503 	bic.w	r5, r5, #3
 8016de6:	3508      	adds	r5, #8
 8016de8:	2d0c      	cmp	r5, #12
 8016dea:	bf38      	it	cc
 8016dec:	250c      	movcc	r5, #12
 8016dee:	4629      	mov	r1, r5
 8016df0:	4638      	mov	r0, r7
 8016df2:	f7ff ffa5 	bl	8016d40 <sbrk_aligned>
 8016df6:	3001      	adds	r0, #1
 8016df8:	d02b      	beq.n	8016e52 <_malloc_r+0xd2>
 8016dfa:	6823      	ldr	r3, [r4, #0]
 8016dfc:	442b      	add	r3, r5
 8016dfe:	6023      	str	r3, [r4, #0]
 8016e00:	e00e      	b.n	8016e20 <_malloc_r+0xa0>
 8016e02:	6822      	ldr	r2, [r4, #0]
 8016e04:	1b52      	subs	r2, r2, r5
 8016e06:	d41e      	bmi.n	8016e46 <_malloc_r+0xc6>
 8016e08:	2a0b      	cmp	r2, #11
 8016e0a:	d916      	bls.n	8016e3a <_malloc_r+0xba>
 8016e0c:	1961      	adds	r1, r4, r5
 8016e0e:	42a3      	cmp	r3, r4
 8016e10:	6025      	str	r5, [r4, #0]
 8016e12:	bf18      	it	ne
 8016e14:	6059      	strne	r1, [r3, #4]
 8016e16:	6863      	ldr	r3, [r4, #4]
 8016e18:	bf08      	it	eq
 8016e1a:	6031      	streq	r1, [r6, #0]
 8016e1c:	5162      	str	r2, [r4, r5]
 8016e1e:	604b      	str	r3, [r1, #4]
 8016e20:	4638      	mov	r0, r7
 8016e22:	f104 060b 	add.w	r6, r4, #11
 8016e26:	f001 fed7 	bl	8018bd8 <__malloc_unlock>
 8016e2a:	f026 0607 	bic.w	r6, r6, #7
 8016e2e:	1d23      	adds	r3, r4, #4
 8016e30:	1af2      	subs	r2, r6, r3
 8016e32:	d0b6      	beq.n	8016da2 <_malloc_r+0x22>
 8016e34:	1b9b      	subs	r3, r3, r6
 8016e36:	50a3      	str	r3, [r4, r2]
 8016e38:	e7b3      	b.n	8016da2 <_malloc_r+0x22>
 8016e3a:	6862      	ldr	r2, [r4, #4]
 8016e3c:	42a3      	cmp	r3, r4
 8016e3e:	bf0c      	ite	eq
 8016e40:	6032      	streq	r2, [r6, #0]
 8016e42:	605a      	strne	r2, [r3, #4]
 8016e44:	e7ec      	b.n	8016e20 <_malloc_r+0xa0>
 8016e46:	4623      	mov	r3, r4
 8016e48:	6864      	ldr	r4, [r4, #4]
 8016e4a:	e7b2      	b.n	8016db2 <_malloc_r+0x32>
 8016e4c:	4634      	mov	r4, r6
 8016e4e:	6876      	ldr	r6, [r6, #4]
 8016e50:	e7b9      	b.n	8016dc6 <_malloc_r+0x46>
 8016e52:	230c      	movs	r3, #12
 8016e54:	603b      	str	r3, [r7, #0]
 8016e56:	4638      	mov	r0, r7
 8016e58:	f001 febe 	bl	8018bd8 <__malloc_unlock>
 8016e5c:	e7a1      	b.n	8016da2 <_malloc_r+0x22>
 8016e5e:	6025      	str	r5, [r4, #0]
 8016e60:	e7de      	b.n	8016e20 <_malloc_r+0xa0>
 8016e62:	bf00      	nop
 8016e64:	20006ebc 	.word	0x20006ebc

08016e68 <__cvt>:
 8016e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e6c:	b088      	sub	sp, #32
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	461f      	mov	r7, r3
 8016e72:	4614      	mov	r4, r2
 8016e74:	bfb8      	it	lt
 8016e76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8016e7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e7c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016e7e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8016e82:	bfb6      	itet	lt
 8016e84:	461f      	movlt	r7, r3
 8016e86:	2300      	movge	r3, #0
 8016e88:	232d      	movlt	r3, #45	; 0x2d
 8016e8a:	7013      	strb	r3, [r2, #0]
 8016e8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e8e:	f023 0820 	bic.w	r8, r3, #32
 8016e92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016e96:	d005      	beq.n	8016ea4 <__cvt+0x3c>
 8016e98:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016e9c:	d100      	bne.n	8016ea0 <__cvt+0x38>
 8016e9e:	3501      	adds	r5, #1
 8016ea0:	2302      	movs	r3, #2
 8016ea2:	e000      	b.n	8016ea6 <__cvt+0x3e>
 8016ea4:	2303      	movs	r3, #3
 8016ea6:	aa07      	add	r2, sp, #28
 8016ea8:	9204      	str	r2, [sp, #16]
 8016eaa:	aa06      	add	r2, sp, #24
 8016eac:	e9cd a202 	strd	sl, r2, [sp, #8]
 8016eb0:	e9cd 3500 	strd	r3, r5, [sp]
 8016eb4:	4622      	mov	r2, r4
 8016eb6:	463b      	mov	r3, r7
 8016eb8:	f000 fe7a 	bl	8017bb0 <_dtoa_r>
 8016ebc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016ec0:	4606      	mov	r6, r0
 8016ec2:	d102      	bne.n	8016eca <__cvt+0x62>
 8016ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ec6:	07db      	lsls	r3, r3, #31
 8016ec8:	d522      	bpl.n	8016f10 <__cvt+0xa8>
 8016eca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016ece:	eb06 0905 	add.w	r9, r6, r5
 8016ed2:	d110      	bne.n	8016ef6 <__cvt+0x8e>
 8016ed4:	7833      	ldrb	r3, [r6, #0]
 8016ed6:	2b30      	cmp	r3, #48	; 0x30
 8016ed8:	d10a      	bne.n	8016ef0 <__cvt+0x88>
 8016eda:	2200      	movs	r2, #0
 8016edc:	2300      	movs	r3, #0
 8016ede:	4620      	mov	r0, r4
 8016ee0:	4639      	mov	r1, r7
 8016ee2:	f7e9 fdc9 	bl	8000a78 <__aeabi_dcmpeq>
 8016ee6:	b918      	cbnz	r0, 8016ef0 <__cvt+0x88>
 8016ee8:	f1c5 0501 	rsb	r5, r5, #1
 8016eec:	f8ca 5000 	str.w	r5, [sl]
 8016ef0:	f8da 3000 	ldr.w	r3, [sl]
 8016ef4:	4499      	add	r9, r3
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	2300      	movs	r3, #0
 8016efa:	4620      	mov	r0, r4
 8016efc:	4639      	mov	r1, r7
 8016efe:	f7e9 fdbb 	bl	8000a78 <__aeabi_dcmpeq>
 8016f02:	b108      	cbz	r0, 8016f08 <__cvt+0xa0>
 8016f04:	f8cd 901c 	str.w	r9, [sp, #28]
 8016f08:	2230      	movs	r2, #48	; 0x30
 8016f0a:	9b07      	ldr	r3, [sp, #28]
 8016f0c:	454b      	cmp	r3, r9
 8016f0e:	d307      	bcc.n	8016f20 <__cvt+0xb8>
 8016f10:	9b07      	ldr	r3, [sp, #28]
 8016f12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016f14:	1b9b      	subs	r3, r3, r6
 8016f16:	4630      	mov	r0, r6
 8016f18:	6013      	str	r3, [r2, #0]
 8016f1a:	b008      	add	sp, #32
 8016f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f20:	1c59      	adds	r1, r3, #1
 8016f22:	9107      	str	r1, [sp, #28]
 8016f24:	701a      	strb	r2, [r3, #0]
 8016f26:	e7f0      	b.n	8016f0a <__cvt+0xa2>

08016f28 <__exponent>:
 8016f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	2900      	cmp	r1, #0
 8016f2e:	bfb8      	it	lt
 8016f30:	4249      	neglt	r1, r1
 8016f32:	f803 2b02 	strb.w	r2, [r3], #2
 8016f36:	bfb4      	ite	lt
 8016f38:	222d      	movlt	r2, #45	; 0x2d
 8016f3a:	222b      	movge	r2, #43	; 0x2b
 8016f3c:	2909      	cmp	r1, #9
 8016f3e:	7042      	strb	r2, [r0, #1]
 8016f40:	dd2a      	ble.n	8016f98 <__exponent+0x70>
 8016f42:	f10d 0407 	add.w	r4, sp, #7
 8016f46:	46a4      	mov	ip, r4
 8016f48:	270a      	movs	r7, #10
 8016f4a:	46a6      	mov	lr, r4
 8016f4c:	460a      	mov	r2, r1
 8016f4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016f52:	fb07 1516 	mls	r5, r7, r6, r1
 8016f56:	3530      	adds	r5, #48	; 0x30
 8016f58:	2a63      	cmp	r2, #99	; 0x63
 8016f5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8016f5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016f62:	4631      	mov	r1, r6
 8016f64:	dcf1      	bgt.n	8016f4a <__exponent+0x22>
 8016f66:	3130      	adds	r1, #48	; 0x30
 8016f68:	f1ae 0502 	sub.w	r5, lr, #2
 8016f6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016f70:	1c44      	adds	r4, r0, #1
 8016f72:	4629      	mov	r1, r5
 8016f74:	4561      	cmp	r1, ip
 8016f76:	d30a      	bcc.n	8016f8e <__exponent+0x66>
 8016f78:	f10d 0209 	add.w	r2, sp, #9
 8016f7c:	eba2 020e 	sub.w	r2, r2, lr
 8016f80:	4565      	cmp	r5, ip
 8016f82:	bf88      	it	hi
 8016f84:	2200      	movhi	r2, #0
 8016f86:	4413      	add	r3, r2
 8016f88:	1a18      	subs	r0, r3, r0
 8016f8a:	b003      	add	sp, #12
 8016f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016f96:	e7ed      	b.n	8016f74 <__exponent+0x4c>
 8016f98:	2330      	movs	r3, #48	; 0x30
 8016f9a:	3130      	adds	r1, #48	; 0x30
 8016f9c:	7083      	strb	r3, [r0, #2]
 8016f9e:	70c1      	strb	r1, [r0, #3]
 8016fa0:	1d03      	adds	r3, r0, #4
 8016fa2:	e7f1      	b.n	8016f88 <__exponent+0x60>

08016fa4 <_printf_float>:
 8016fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa8:	b091      	sub	sp, #68	; 0x44
 8016faa:	460c      	mov	r4, r1
 8016fac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016fb0:	4616      	mov	r6, r2
 8016fb2:	461f      	mov	r7, r3
 8016fb4:	4605      	mov	r5, r0
 8016fb6:	f001 fd9d 	bl	8018af4 <_localeconv_r>
 8016fba:	6803      	ldr	r3, [r0, #0]
 8016fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f7e9 f8de 	bl	8000180 <strlen>
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8016fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8016fcc:	900a      	str	r0, [sp, #40]	; 0x28
 8016fce:	3307      	adds	r3, #7
 8016fd0:	f023 0307 	bic.w	r3, r3, #7
 8016fd4:	f103 0208 	add.w	r2, r3, #8
 8016fd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016fdc:	f8d4 b000 	ldr.w	fp, [r4]
 8016fe0:	f8c8 2000 	str.w	r2, [r8]
 8016fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016fec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8016ff0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8016ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ff8:	4b9c      	ldr	r3, [pc, #624]	; (801726c <_printf_float+0x2c8>)
 8016ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8016ffe:	4640      	mov	r0, r8
 8017000:	f7e9 fd6c 	bl	8000adc <__aeabi_dcmpun>
 8017004:	bb70      	cbnz	r0, 8017064 <_printf_float+0xc0>
 8017006:	4b99      	ldr	r3, [pc, #612]	; (801726c <_printf_float+0x2c8>)
 8017008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801700a:	f04f 32ff 	mov.w	r2, #4294967295
 801700e:	4640      	mov	r0, r8
 8017010:	f7e9 fd46 	bl	8000aa0 <__aeabi_dcmple>
 8017014:	bb30      	cbnz	r0, 8017064 <_printf_float+0xc0>
 8017016:	2200      	movs	r2, #0
 8017018:	2300      	movs	r3, #0
 801701a:	4640      	mov	r0, r8
 801701c:	4651      	mov	r1, sl
 801701e:	f7e9 fd35 	bl	8000a8c <__aeabi_dcmplt>
 8017022:	b110      	cbz	r0, 801702a <_printf_float+0x86>
 8017024:	232d      	movs	r3, #45	; 0x2d
 8017026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801702a:	4b91      	ldr	r3, [pc, #580]	; (8017270 <_printf_float+0x2cc>)
 801702c:	4891      	ldr	r0, [pc, #580]	; (8017274 <_printf_float+0x2d0>)
 801702e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017032:	bf94      	ite	ls
 8017034:	4698      	movls	r8, r3
 8017036:	4680      	movhi	r8, r0
 8017038:	2303      	movs	r3, #3
 801703a:	6123      	str	r3, [r4, #16]
 801703c:	f02b 0304 	bic.w	r3, fp, #4
 8017040:	6023      	str	r3, [r4, #0]
 8017042:	f04f 0a00 	mov.w	sl, #0
 8017046:	9700      	str	r7, [sp, #0]
 8017048:	4633      	mov	r3, r6
 801704a:	aa0f      	add	r2, sp, #60	; 0x3c
 801704c:	4621      	mov	r1, r4
 801704e:	4628      	mov	r0, r5
 8017050:	f000 f9d2 	bl	80173f8 <_printf_common>
 8017054:	3001      	adds	r0, #1
 8017056:	f040 808f 	bne.w	8017178 <_printf_float+0x1d4>
 801705a:	f04f 30ff 	mov.w	r0, #4294967295
 801705e:	b011      	add	sp, #68	; 0x44
 8017060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017064:	4642      	mov	r2, r8
 8017066:	4653      	mov	r3, sl
 8017068:	4640      	mov	r0, r8
 801706a:	4651      	mov	r1, sl
 801706c:	f7e9 fd36 	bl	8000adc <__aeabi_dcmpun>
 8017070:	b140      	cbz	r0, 8017084 <_printf_float+0xe0>
 8017072:	f1ba 0f00 	cmp.w	sl, #0
 8017076:	bfbc      	itt	lt
 8017078:	232d      	movlt	r3, #45	; 0x2d
 801707a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801707e:	487e      	ldr	r0, [pc, #504]	; (8017278 <_printf_float+0x2d4>)
 8017080:	4b7e      	ldr	r3, [pc, #504]	; (801727c <_printf_float+0x2d8>)
 8017082:	e7d4      	b.n	801702e <_printf_float+0x8a>
 8017084:	6863      	ldr	r3, [r4, #4]
 8017086:	1c5a      	adds	r2, r3, #1
 8017088:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801708c:	d142      	bne.n	8017114 <_printf_float+0x170>
 801708e:	2306      	movs	r3, #6
 8017090:	6063      	str	r3, [r4, #4]
 8017092:	2200      	movs	r2, #0
 8017094:	9206      	str	r2, [sp, #24]
 8017096:	aa0e      	add	r2, sp, #56	; 0x38
 8017098:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801709c:	aa0d      	add	r2, sp, #52	; 0x34
 801709e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80170a2:	9203      	str	r2, [sp, #12]
 80170a4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80170a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	6863      	ldr	r3, [r4, #4]
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	4642      	mov	r2, r8
 80170b4:	4653      	mov	r3, sl
 80170b6:	4628      	mov	r0, r5
 80170b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80170ba:	f7ff fed5 	bl	8016e68 <__cvt>
 80170be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170c0:	2947      	cmp	r1, #71	; 0x47
 80170c2:	4680      	mov	r8, r0
 80170c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80170c6:	d108      	bne.n	80170da <_printf_float+0x136>
 80170c8:	1cc8      	adds	r0, r1, #3
 80170ca:	db02      	blt.n	80170d2 <_printf_float+0x12e>
 80170cc:	6863      	ldr	r3, [r4, #4]
 80170ce:	4299      	cmp	r1, r3
 80170d0:	dd40      	ble.n	8017154 <_printf_float+0x1b0>
 80170d2:	f1a9 0902 	sub.w	r9, r9, #2
 80170d6:	fa5f f989 	uxtb.w	r9, r9
 80170da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80170de:	d81f      	bhi.n	8017120 <_printf_float+0x17c>
 80170e0:	3901      	subs	r1, #1
 80170e2:	464a      	mov	r2, r9
 80170e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80170e8:	910d      	str	r1, [sp, #52]	; 0x34
 80170ea:	f7ff ff1d 	bl	8016f28 <__exponent>
 80170ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170f0:	1813      	adds	r3, r2, r0
 80170f2:	2a01      	cmp	r2, #1
 80170f4:	4682      	mov	sl, r0
 80170f6:	6123      	str	r3, [r4, #16]
 80170f8:	dc02      	bgt.n	8017100 <_printf_float+0x15c>
 80170fa:	6822      	ldr	r2, [r4, #0]
 80170fc:	07d2      	lsls	r2, r2, #31
 80170fe:	d501      	bpl.n	8017104 <_printf_float+0x160>
 8017100:	3301      	adds	r3, #1
 8017102:	6123      	str	r3, [r4, #16]
 8017104:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8017108:	2b00      	cmp	r3, #0
 801710a:	d09c      	beq.n	8017046 <_printf_float+0xa2>
 801710c:	232d      	movs	r3, #45	; 0x2d
 801710e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017112:	e798      	b.n	8017046 <_printf_float+0xa2>
 8017114:	2947      	cmp	r1, #71	; 0x47
 8017116:	d1bc      	bne.n	8017092 <_printf_float+0xee>
 8017118:	2b00      	cmp	r3, #0
 801711a:	d1ba      	bne.n	8017092 <_printf_float+0xee>
 801711c:	2301      	movs	r3, #1
 801711e:	e7b7      	b.n	8017090 <_printf_float+0xec>
 8017120:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017124:	d118      	bne.n	8017158 <_printf_float+0x1b4>
 8017126:	2900      	cmp	r1, #0
 8017128:	6863      	ldr	r3, [r4, #4]
 801712a:	dd0b      	ble.n	8017144 <_printf_float+0x1a0>
 801712c:	6121      	str	r1, [r4, #16]
 801712e:	b913      	cbnz	r3, 8017136 <_printf_float+0x192>
 8017130:	6822      	ldr	r2, [r4, #0]
 8017132:	07d0      	lsls	r0, r2, #31
 8017134:	d502      	bpl.n	801713c <_printf_float+0x198>
 8017136:	3301      	adds	r3, #1
 8017138:	440b      	add	r3, r1
 801713a:	6123      	str	r3, [r4, #16]
 801713c:	65a1      	str	r1, [r4, #88]	; 0x58
 801713e:	f04f 0a00 	mov.w	sl, #0
 8017142:	e7df      	b.n	8017104 <_printf_float+0x160>
 8017144:	b913      	cbnz	r3, 801714c <_printf_float+0x1a8>
 8017146:	6822      	ldr	r2, [r4, #0]
 8017148:	07d2      	lsls	r2, r2, #31
 801714a:	d501      	bpl.n	8017150 <_printf_float+0x1ac>
 801714c:	3302      	adds	r3, #2
 801714e:	e7f4      	b.n	801713a <_printf_float+0x196>
 8017150:	2301      	movs	r3, #1
 8017152:	e7f2      	b.n	801713a <_printf_float+0x196>
 8017154:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801715a:	4299      	cmp	r1, r3
 801715c:	db05      	blt.n	801716a <_printf_float+0x1c6>
 801715e:	6823      	ldr	r3, [r4, #0]
 8017160:	6121      	str	r1, [r4, #16]
 8017162:	07d8      	lsls	r0, r3, #31
 8017164:	d5ea      	bpl.n	801713c <_printf_float+0x198>
 8017166:	1c4b      	adds	r3, r1, #1
 8017168:	e7e7      	b.n	801713a <_printf_float+0x196>
 801716a:	2900      	cmp	r1, #0
 801716c:	bfd4      	ite	le
 801716e:	f1c1 0202 	rsble	r2, r1, #2
 8017172:	2201      	movgt	r2, #1
 8017174:	4413      	add	r3, r2
 8017176:	e7e0      	b.n	801713a <_printf_float+0x196>
 8017178:	6823      	ldr	r3, [r4, #0]
 801717a:	055a      	lsls	r2, r3, #21
 801717c:	d407      	bmi.n	801718e <_printf_float+0x1ea>
 801717e:	6923      	ldr	r3, [r4, #16]
 8017180:	4642      	mov	r2, r8
 8017182:	4631      	mov	r1, r6
 8017184:	4628      	mov	r0, r5
 8017186:	47b8      	blx	r7
 8017188:	3001      	adds	r0, #1
 801718a:	d12b      	bne.n	80171e4 <_printf_float+0x240>
 801718c:	e765      	b.n	801705a <_printf_float+0xb6>
 801718e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017192:	f240 80dc 	bls.w	801734e <_printf_float+0x3aa>
 8017196:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801719a:	2200      	movs	r2, #0
 801719c:	2300      	movs	r3, #0
 801719e:	f7e9 fc6b 	bl	8000a78 <__aeabi_dcmpeq>
 80171a2:	2800      	cmp	r0, #0
 80171a4:	d033      	beq.n	801720e <_printf_float+0x26a>
 80171a6:	4a36      	ldr	r2, [pc, #216]	; (8017280 <_printf_float+0x2dc>)
 80171a8:	2301      	movs	r3, #1
 80171aa:	4631      	mov	r1, r6
 80171ac:	4628      	mov	r0, r5
 80171ae:	47b8      	blx	r7
 80171b0:	3001      	adds	r0, #1
 80171b2:	f43f af52 	beq.w	801705a <_printf_float+0xb6>
 80171b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80171ba:	429a      	cmp	r2, r3
 80171bc:	db02      	blt.n	80171c4 <_printf_float+0x220>
 80171be:	6823      	ldr	r3, [r4, #0]
 80171c0:	07d8      	lsls	r0, r3, #31
 80171c2:	d50f      	bpl.n	80171e4 <_printf_float+0x240>
 80171c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80171c8:	4631      	mov	r1, r6
 80171ca:	4628      	mov	r0, r5
 80171cc:	47b8      	blx	r7
 80171ce:	3001      	adds	r0, #1
 80171d0:	f43f af43 	beq.w	801705a <_printf_float+0xb6>
 80171d4:	f04f 0800 	mov.w	r8, #0
 80171d8:	f104 091a 	add.w	r9, r4, #26
 80171dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171de:	3b01      	subs	r3, #1
 80171e0:	4543      	cmp	r3, r8
 80171e2:	dc09      	bgt.n	80171f8 <_printf_float+0x254>
 80171e4:	6823      	ldr	r3, [r4, #0]
 80171e6:	079b      	lsls	r3, r3, #30
 80171e8:	f100 8101 	bmi.w	80173ee <_printf_float+0x44a>
 80171ec:	68e0      	ldr	r0, [r4, #12]
 80171ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171f0:	4298      	cmp	r0, r3
 80171f2:	bfb8      	it	lt
 80171f4:	4618      	movlt	r0, r3
 80171f6:	e732      	b.n	801705e <_printf_float+0xba>
 80171f8:	2301      	movs	r3, #1
 80171fa:	464a      	mov	r2, r9
 80171fc:	4631      	mov	r1, r6
 80171fe:	4628      	mov	r0, r5
 8017200:	47b8      	blx	r7
 8017202:	3001      	adds	r0, #1
 8017204:	f43f af29 	beq.w	801705a <_printf_float+0xb6>
 8017208:	f108 0801 	add.w	r8, r8, #1
 801720c:	e7e6      	b.n	80171dc <_printf_float+0x238>
 801720e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017210:	2b00      	cmp	r3, #0
 8017212:	dc37      	bgt.n	8017284 <_printf_float+0x2e0>
 8017214:	4a1a      	ldr	r2, [pc, #104]	; (8017280 <_printf_float+0x2dc>)
 8017216:	2301      	movs	r3, #1
 8017218:	4631      	mov	r1, r6
 801721a:	4628      	mov	r0, r5
 801721c:	47b8      	blx	r7
 801721e:	3001      	adds	r0, #1
 8017220:	f43f af1b 	beq.w	801705a <_printf_float+0xb6>
 8017224:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8017228:	4313      	orrs	r3, r2
 801722a:	d102      	bne.n	8017232 <_printf_float+0x28e>
 801722c:	6823      	ldr	r3, [r4, #0]
 801722e:	07d9      	lsls	r1, r3, #31
 8017230:	d5d8      	bpl.n	80171e4 <_printf_float+0x240>
 8017232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017236:	4631      	mov	r1, r6
 8017238:	4628      	mov	r0, r5
 801723a:	47b8      	blx	r7
 801723c:	3001      	adds	r0, #1
 801723e:	f43f af0c 	beq.w	801705a <_printf_float+0xb6>
 8017242:	f04f 0900 	mov.w	r9, #0
 8017246:	f104 0a1a 	add.w	sl, r4, #26
 801724a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801724c:	425b      	negs	r3, r3
 801724e:	454b      	cmp	r3, r9
 8017250:	dc01      	bgt.n	8017256 <_printf_float+0x2b2>
 8017252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017254:	e794      	b.n	8017180 <_printf_float+0x1dc>
 8017256:	2301      	movs	r3, #1
 8017258:	4652      	mov	r2, sl
 801725a:	4631      	mov	r1, r6
 801725c:	4628      	mov	r0, r5
 801725e:	47b8      	blx	r7
 8017260:	3001      	adds	r0, #1
 8017262:	f43f aefa 	beq.w	801705a <_printf_float+0xb6>
 8017266:	f109 0901 	add.w	r9, r9, #1
 801726a:	e7ee      	b.n	801724a <_printf_float+0x2a6>
 801726c:	7fefffff 	.word	0x7fefffff
 8017270:	0801aafc 	.word	0x0801aafc
 8017274:	0801ab00 	.word	0x0801ab00
 8017278:	0801ab08 	.word	0x0801ab08
 801727c:	0801ab04 	.word	0x0801ab04
 8017280:	0801ab0c 	.word	0x0801ab0c
 8017284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017288:	429a      	cmp	r2, r3
 801728a:	bfa8      	it	ge
 801728c:	461a      	movge	r2, r3
 801728e:	2a00      	cmp	r2, #0
 8017290:	4691      	mov	r9, r2
 8017292:	dc37      	bgt.n	8017304 <_printf_float+0x360>
 8017294:	f04f 0b00 	mov.w	fp, #0
 8017298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801729c:	f104 021a 	add.w	r2, r4, #26
 80172a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80172a4:	ebaa 0309 	sub.w	r3, sl, r9
 80172a8:	455b      	cmp	r3, fp
 80172aa:	dc33      	bgt.n	8017314 <_printf_float+0x370>
 80172ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80172b0:	429a      	cmp	r2, r3
 80172b2:	db3b      	blt.n	801732c <_printf_float+0x388>
 80172b4:	6823      	ldr	r3, [r4, #0]
 80172b6:	07da      	lsls	r2, r3, #31
 80172b8:	d438      	bmi.n	801732c <_printf_float+0x388>
 80172ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80172be:	eba3 020a 	sub.w	r2, r3, sl
 80172c2:	eba3 0901 	sub.w	r9, r3, r1
 80172c6:	4591      	cmp	r9, r2
 80172c8:	bfa8      	it	ge
 80172ca:	4691      	movge	r9, r2
 80172cc:	f1b9 0f00 	cmp.w	r9, #0
 80172d0:	dc34      	bgt.n	801733c <_printf_float+0x398>
 80172d2:	f04f 0800 	mov.w	r8, #0
 80172d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80172da:	f104 0a1a 	add.w	sl, r4, #26
 80172de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80172e2:	1a9b      	subs	r3, r3, r2
 80172e4:	eba3 0309 	sub.w	r3, r3, r9
 80172e8:	4543      	cmp	r3, r8
 80172ea:	f77f af7b 	ble.w	80171e4 <_printf_float+0x240>
 80172ee:	2301      	movs	r3, #1
 80172f0:	4652      	mov	r2, sl
 80172f2:	4631      	mov	r1, r6
 80172f4:	4628      	mov	r0, r5
 80172f6:	47b8      	blx	r7
 80172f8:	3001      	adds	r0, #1
 80172fa:	f43f aeae 	beq.w	801705a <_printf_float+0xb6>
 80172fe:	f108 0801 	add.w	r8, r8, #1
 8017302:	e7ec      	b.n	80172de <_printf_float+0x33a>
 8017304:	4613      	mov	r3, r2
 8017306:	4631      	mov	r1, r6
 8017308:	4642      	mov	r2, r8
 801730a:	4628      	mov	r0, r5
 801730c:	47b8      	blx	r7
 801730e:	3001      	adds	r0, #1
 8017310:	d1c0      	bne.n	8017294 <_printf_float+0x2f0>
 8017312:	e6a2      	b.n	801705a <_printf_float+0xb6>
 8017314:	2301      	movs	r3, #1
 8017316:	4631      	mov	r1, r6
 8017318:	4628      	mov	r0, r5
 801731a:	920b      	str	r2, [sp, #44]	; 0x2c
 801731c:	47b8      	blx	r7
 801731e:	3001      	adds	r0, #1
 8017320:	f43f ae9b 	beq.w	801705a <_printf_float+0xb6>
 8017324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017326:	f10b 0b01 	add.w	fp, fp, #1
 801732a:	e7b9      	b.n	80172a0 <_printf_float+0x2fc>
 801732c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017330:	4631      	mov	r1, r6
 8017332:	4628      	mov	r0, r5
 8017334:	47b8      	blx	r7
 8017336:	3001      	adds	r0, #1
 8017338:	d1bf      	bne.n	80172ba <_printf_float+0x316>
 801733a:	e68e      	b.n	801705a <_printf_float+0xb6>
 801733c:	464b      	mov	r3, r9
 801733e:	eb08 020a 	add.w	r2, r8, sl
 8017342:	4631      	mov	r1, r6
 8017344:	4628      	mov	r0, r5
 8017346:	47b8      	blx	r7
 8017348:	3001      	adds	r0, #1
 801734a:	d1c2      	bne.n	80172d2 <_printf_float+0x32e>
 801734c:	e685      	b.n	801705a <_printf_float+0xb6>
 801734e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017350:	2a01      	cmp	r2, #1
 8017352:	dc01      	bgt.n	8017358 <_printf_float+0x3b4>
 8017354:	07db      	lsls	r3, r3, #31
 8017356:	d537      	bpl.n	80173c8 <_printf_float+0x424>
 8017358:	2301      	movs	r3, #1
 801735a:	4642      	mov	r2, r8
 801735c:	4631      	mov	r1, r6
 801735e:	4628      	mov	r0, r5
 8017360:	47b8      	blx	r7
 8017362:	3001      	adds	r0, #1
 8017364:	f43f ae79 	beq.w	801705a <_printf_float+0xb6>
 8017368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801736c:	4631      	mov	r1, r6
 801736e:	4628      	mov	r0, r5
 8017370:	47b8      	blx	r7
 8017372:	3001      	adds	r0, #1
 8017374:	f43f ae71 	beq.w	801705a <_printf_float+0xb6>
 8017378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801737c:	2200      	movs	r2, #0
 801737e:	2300      	movs	r3, #0
 8017380:	f7e9 fb7a 	bl	8000a78 <__aeabi_dcmpeq>
 8017384:	b9d8      	cbnz	r0, 80173be <_printf_float+0x41a>
 8017386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017388:	f108 0201 	add.w	r2, r8, #1
 801738c:	3b01      	subs	r3, #1
 801738e:	4631      	mov	r1, r6
 8017390:	4628      	mov	r0, r5
 8017392:	47b8      	blx	r7
 8017394:	3001      	adds	r0, #1
 8017396:	d10e      	bne.n	80173b6 <_printf_float+0x412>
 8017398:	e65f      	b.n	801705a <_printf_float+0xb6>
 801739a:	2301      	movs	r3, #1
 801739c:	464a      	mov	r2, r9
 801739e:	4631      	mov	r1, r6
 80173a0:	4628      	mov	r0, r5
 80173a2:	47b8      	blx	r7
 80173a4:	3001      	adds	r0, #1
 80173a6:	f43f ae58 	beq.w	801705a <_printf_float+0xb6>
 80173aa:	f108 0801 	add.w	r8, r8, #1
 80173ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173b0:	3b01      	subs	r3, #1
 80173b2:	4543      	cmp	r3, r8
 80173b4:	dcf1      	bgt.n	801739a <_printf_float+0x3f6>
 80173b6:	4653      	mov	r3, sl
 80173b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80173bc:	e6e1      	b.n	8017182 <_printf_float+0x1de>
 80173be:	f04f 0800 	mov.w	r8, #0
 80173c2:	f104 091a 	add.w	r9, r4, #26
 80173c6:	e7f2      	b.n	80173ae <_printf_float+0x40a>
 80173c8:	2301      	movs	r3, #1
 80173ca:	4642      	mov	r2, r8
 80173cc:	e7df      	b.n	801738e <_printf_float+0x3ea>
 80173ce:	2301      	movs	r3, #1
 80173d0:	464a      	mov	r2, r9
 80173d2:	4631      	mov	r1, r6
 80173d4:	4628      	mov	r0, r5
 80173d6:	47b8      	blx	r7
 80173d8:	3001      	adds	r0, #1
 80173da:	f43f ae3e 	beq.w	801705a <_printf_float+0xb6>
 80173de:	f108 0801 	add.w	r8, r8, #1
 80173e2:	68e3      	ldr	r3, [r4, #12]
 80173e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80173e6:	1a5b      	subs	r3, r3, r1
 80173e8:	4543      	cmp	r3, r8
 80173ea:	dcf0      	bgt.n	80173ce <_printf_float+0x42a>
 80173ec:	e6fe      	b.n	80171ec <_printf_float+0x248>
 80173ee:	f04f 0800 	mov.w	r8, #0
 80173f2:	f104 0919 	add.w	r9, r4, #25
 80173f6:	e7f4      	b.n	80173e2 <_printf_float+0x43e>

080173f8 <_printf_common>:
 80173f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173fc:	4616      	mov	r6, r2
 80173fe:	4699      	mov	r9, r3
 8017400:	688a      	ldr	r2, [r1, #8]
 8017402:	690b      	ldr	r3, [r1, #16]
 8017404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017408:	4293      	cmp	r3, r2
 801740a:	bfb8      	it	lt
 801740c:	4613      	movlt	r3, r2
 801740e:	6033      	str	r3, [r6, #0]
 8017410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017414:	4607      	mov	r7, r0
 8017416:	460c      	mov	r4, r1
 8017418:	b10a      	cbz	r2, 801741e <_printf_common+0x26>
 801741a:	3301      	adds	r3, #1
 801741c:	6033      	str	r3, [r6, #0]
 801741e:	6823      	ldr	r3, [r4, #0]
 8017420:	0699      	lsls	r1, r3, #26
 8017422:	bf42      	ittt	mi
 8017424:	6833      	ldrmi	r3, [r6, #0]
 8017426:	3302      	addmi	r3, #2
 8017428:	6033      	strmi	r3, [r6, #0]
 801742a:	6825      	ldr	r5, [r4, #0]
 801742c:	f015 0506 	ands.w	r5, r5, #6
 8017430:	d106      	bne.n	8017440 <_printf_common+0x48>
 8017432:	f104 0a19 	add.w	sl, r4, #25
 8017436:	68e3      	ldr	r3, [r4, #12]
 8017438:	6832      	ldr	r2, [r6, #0]
 801743a:	1a9b      	subs	r3, r3, r2
 801743c:	42ab      	cmp	r3, r5
 801743e:	dc26      	bgt.n	801748e <_printf_common+0x96>
 8017440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017444:	1e13      	subs	r3, r2, #0
 8017446:	6822      	ldr	r2, [r4, #0]
 8017448:	bf18      	it	ne
 801744a:	2301      	movne	r3, #1
 801744c:	0692      	lsls	r2, r2, #26
 801744e:	d42b      	bmi.n	80174a8 <_printf_common+0xb0>
 8017450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017454:	4649      	mov	r1, r9
 8017456:	4638      	mov	r0, r7
 8017458:	47c0      	blx	r8
 801745a:	3001      	adds	r0, #1
 801745c:	d01e      	beq.n	801749c <_printf_common+0xa4>
 801745e:	6823      	ldr	r3, [r4, #0]
 8017460:	68e5      	ldr	r5, [r4, #12]
 8017462:	6832      	ldr	r2, [r6, #0]
 8017464:	f003 0306 	and.w	r3, r3, #6
 8017468:	2b04      	cmp	r3, #4
 801746a:	bf08      	it	eq
 801746c:	1aad      	subeq	r5, r5, r2
 801746e:	68a3      	ldr	r3, [r4, #8]
 8017470:	6922      	ldr	r2, [r4, #16]
 8017472:	bf0c      	ite	eq
 8017474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017478:	2500      	movne	r5, #0
 801747a:	4293      	cmp	r3, r2
 801747c:	bfc4      	itt	gt
 801747e:	1a9b      	subgt	r3, r3, r2
 8017480:	18ed      	addgt	r5, r5, r3
 8017482:	2600      	movs	r6, #0
 8017484:	341a      	adds	r4, #26
 8017486:	42b5      	cmp	r5, r6
 8017488:	d11a      	bne.n	80174c0 <_printf_common+0xc8>
 801748a:	2000      	movs	r0, #0
 801748c:	e008      	b.n	80174a0 <_printf_common+0xa8>
 801748e:	2301      	movs	r3, #1
 8017490:	4652      	mov	r2, sl
 8017492:	4649      	mov	r1, r9
 8017494:	4638      	mov	r0, r7
 8017496:	47c0      	blx	r8
 8017498:	3001      	adds	r0, #1
 801749a:	d103      	bne.n	80174a4 <_printf_common+0xac>
 801749c:	f04f 30ff 	mov.w	r0, #4294967295
 80174a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174a4:	3501      	adds	r5, #1
 80174a6:	e7c6      	b.n	8017436 <_printf_common+0x3e>
 80174a8:	18e1      	adds	r1, r4, r3
 80174aa:	1c5a      	adds	r2, r3, #1
 80174ac:	2030      	movs	r0, #48	; 0x30
 80174ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80174b2:	4422      	add	r2, r4
 80174b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80174b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80174bc:	3302      	adds	r3, #2
 80174be:	e7c7      	b.n	8017450 <_printf_common+0x58>
 80174c0:	2301      	movs	r3, #1
 80174c2:	4622      	mov	r2, r4
 80174c4:	4649      	mov	r1, r9
 80174c6:	4638      	mov	r0, r7
 80174c8:	47c0      	blx	r8
 80174ca:	3001      	adds	r0, #1
 80174cc:	d0e6      	beq.n	801749c <_printf_common+0xa4>
 80174ce:	3601      	adds	r6, #1
 80174d0:	e7d9      	b.n	8017486 <_printf_common+0x8e>
	...

080174d4 <_printf_i>:
 80174d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80174d8:	7e0f      	ldrb	r7, [r1, #24]
 80174da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80174dc:	2f78      	cmp	r7, #120	; 0x78
 80174de:	4691      	mov	r9, r2
 80174e0:	4680      	mov	r8, r0
 80174e2:	460c      	mov	r4, r1
 80174e4:	469a      	mov	sl, r3
 80174e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80174ea:	d807      	bhi.n	80174fc <_printf_i+0x28>
 80174ec:	2f62      	cmp	r7, #98	; 0x62
 80174ee:	d80a      	bhi.n	8017506 <_printf_i+0x32>
 80174f0:	2f00      	cmp	r7, #0
 80174f2:	f000 80d8 	beq.w	80176a6 <_printf_i+0x1d2>
 80174f6:	2f58      	cmp	r7, #88	; 0x58
 80174f8:	f000 80a3 	beq.w	8017642 <_printf_i+0x16e>
 80174fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017504:	e03a      	b.n	801757c <_printf_i+0xa8>
 8017506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801750a:	2b15      	cmp	r3, #21
 801750c:	d8f6      	bhi.n	80174fc <_printf_i+0x28>
 801750e:	a101      	add	r1, pc, #4	; (adr r1, 8017514 <_printf_i+0x40>)
 8017510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017514:	0801756d 	.word	0x0801756d
 8017518:	08017581 	.word	0x08017581
 801751c:	080174fd 	.word	0x080174fd
 8017520:	080174fd 	.word	0x080174fd
 8017524:	080174fd 	.word	0x080174fd
 8017528:	080174fd 	.word	0x080174fd
 801752c:	08017581 	.word	0x08017581
 8017530:	080174fd 	.word	0x080174fd
 8017534:	080174fd 	.word	0x080174fd
 8017538:	080174fd 	.word	0x080174fd
 801753c:	080174fd 	.word	0x080174fd
 8017540:	0801768d 	.word	0x0801768d
 8017544:	080175b1 	.word	0x080175b1
 8017548:	0801766f 	.word	0x0801766f
 801754c:	080174fd 	.word	0x080174fd
 8017550:	080174fd 	.word	0x080174fd
 8017554:	080176af 	.word	0x080176af
 8017558:	080174fd 	.word	0x080174fd
 801755c:	080175b1 	.word	0x080175b1
 8017560:	080174fd 	.word	0x080174fd
 8017564:	080174fd 	.word	0x080174fd
 8017568:	08017677 	.word	0x08017677
 801756c:	682b      	ldr	r3, [r5, #0]
 801756e:	1d1a      	adds	r2, r3, #4
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	602a      	str	r2, [r5, #0]
 8017574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801757c:	2301      	movs	r3, #1
 801757e:	e0a3      	b.n	80176c8 <_printf_i+0x1f4>
 8017580:	6820      	ldr	r0, [r4, #0]
 8017582:	6829      	ldr	r1, [r5, #0]
 8017584:	0606      	lsls	r6, r0, #24
 8017586:	f101 0304 	add.w	r3, r1, #4
 801758a:	d50a      	bpl.n	80175a2 <_printf_i+0xce>
 801758c:	680e      	ldr	r6, [r1, #0]
 801758e:	602b      	str	r3, [r5, #0]
 8017590:	2e00      	cmp	r6, #0
 8017592:	da03      	bge.n	801759c <_printf_i+0xc8>
 8017594:	232d      	movs	r3, #45	; 0x2d
 8017596:	4276      	negs	r6, r6
 8017598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801759c:	485e      	ldr	r0, [pc, #376]	; (8017718 <_printf_i+0x244>)
 801759e:	230a      	movs	r3, #10
 80175a0:	e019      	b.n	80175d6 <_printf_i+0x102>
 80175a2:	680e      	ldr	r6, [r1, #0]
 80175a4:	602b      	str	r3, [r5, #0]
 80175a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80175aa:	bf18      	it	ne
 80175ac:	b236      	sxthne	r6, r6
 80175ae:	e7ef      	b.n	8017590 <_printf_i+0xbc>
 80175b0:	682b      	ldr	r3, [r5, #0]
 80175b2:	6820      	ldr	r0, [r4, #0]
 80175b4:	1d19      	adds	r1, r3, #4
 80175b6:	6029      	str	r1, [r5, #0]
 80175b8:	0601      	lsls	r1, r0, #24
 80175ba:	d501      	bpl.n	80175c0 <_printf_i+0xec>
 80175bc:	681e      	ldr	r6, [r3, #0]
 80175be:	e002      	b.n	80175c6 <_printf_i+0xf2>
 80175c0:	0646      	lsls	r6, r0, #25
 80175c2:	d5fb      	bpl.n	80175bc <_printf_i+0xe8>
 80175c4:	881e      	ldrh	r6, [r3, #0]
 80175c6:	4854      	ldr	r0, [pc, #336]	; (8017718 <_printf_i+0x244>)
 80175c8:	2f6f      	cmp	r7, #111	; 0x6f
 80175ca:	bf0c      	ite	eq
 80175cc:	2308      	moveq	r3, #8
 80175ce:	230a      	movne	r3, #10
 80175d0:	2100      	movs	r1, #0
 80175d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80175d6:	6865      	ldr	r5, [r4, #4]
 80175d8:	60a5      	str	r5, [r4, #8]
 80175da:	2d00      	cmp	r5, #0
 80175dc:	bfa2      	ittt	ge
 80175de:	6821      	ldrge	r1, [r4, #0]
 80175e0:	f021 0104 	bicge.w	r1, r1, #4
 80175e4:	6021      	strge	r1, [r4, #0]
 80175e6:	b90e      	cbnz	r6, 80175ec <_printf_i+0x118>
 80175e8:	2d00      	cmp	r5, #0
 80175ea:	d04d      	beq.n	8017688 <_printf_i+0x1b4>
 80175ec:	4615      	mov	r5, r2
 80175ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80175f2:	fb03 6711 	mls	r7, r3, r1, r6
 80175f6:	5dc7      	ldrb	r7, [r0, r7]
 80175f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80175fc:	4637      	mov	r7, r6
 80175fe:	42bb      	cmp	r3, r7
 8017600:	460e      	mov	r6, r1
 8017602:	d9f4      	bls.n	80175ee <_printf_i+0x11a>
 8017604:	2b08      	cmp	r3, #8
 8017606:	d10b      	bne.n	8017620 <_printf_i+0x14c>
 8017608:	6823      	ldr	r3, [r4, #0]
 801760a:	07de      	lsls	r6, r3, #31
 801760c:	d508      	bpl.n	8017620 <_printf_i+0x14c>
 801760e:	6923      	ldr	r3, [r4, #16]
 8017610:	6861      	ldr	r1, [r4, #4]
 8017612:	4299      	cmp	r1, r3
 8017614:	bfde      	ittt	le
 8017616:	2330      	movle	r3, #48	; 0x30
 8017618:	f805 3c01 	strble.w	r3, [r5, #-1]
 801761c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017620:	1b52      	subs	r2, r2, r5
 8017622:	6122      	str	r2, [r4, #16]
 8017624:	f8cd a000 	str.w	sl, [sp]
 8017628:	464b      	mov	r3, r9
 801762a:	aa03      	add	r2, sp, #12
 801762c:	4621      	mov	r1, r4
 801762e:	4640      	mov	r0, r8
 8017630:	f7ff fee2 	bl	80173f8 <_printf_common>
 8017634:	3001      	adds	r0, #1
 8017636:	d14c      	bne.n	80176d2 <_printf_i+0x1fe>
 8017638:	f04f 30ff 	mov.w	r0, #4294967295
 801763c:	b004      	add	sp, #16
 801763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017642:	4835      	ldr	r0, [pc, #212]	; (8017718 <_printf_i+0x244>)
 8017644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017648:	6829      	ldr	r1, [r5, #0]
 801764a:	6823      	ldr	r3, [r4, #0]
 801764c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017650:	6029      	str	r1, [r5, #0]
 8017652:	061d      	lsls	r5, r3, #24
 8017654:	d514      	bpl.n	8017680 <_printf_i+0x1ac>
 8017656:	07df      	lsls	r7, r3, #31
 8017658:	bf44      	itt	mi
 801765a:	f043 0320 	orrmi.w	r3, r3, #32
 801765e:	6023      	strmi	r3, [r4, #0]
 8017660:	b91e      	cbnz	r6, 801766a <_printf_i+0x196>
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	f023 0320 	bic.w	r3, r3, #32
 8017668:	6023      	str	r3, [r4, #0]
 801766a:	2310      	movs	r3, #16
 801766c:	e7b0      	b.n	80175d0 <_printf_i+0xfc>
 801766e:	6823      	ldr	r3, [r4, #0]
 8017670:	f043 0320 	orr.w	r3, r3, #32
 8017674:	6023      	str	r3, [r4, #0]
 8017676:	2378      	movs	r3, #120	; 0x78
 8017678:	4828      	ldr	r0, [pc, #160]	; (801771c <_printf_i+0x248>)
 801767a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801767e:	e7e3      	b.n	8017648 <_printf_i+0x174>
 8017680:	0659      	lsls	r1, r3, #25
 8017682:	bf48      	it	mi
 8017684:	b2b6      	uxthmi	r6, r6
 8017686:	e7e6      	b.n	8017656 <_printf_i+0x182>
 8017688:	4615      	mov	r5, r2
 801768a:	e7bb      	b.n	8017604 <_printf_i+0x130>
 801768c:	682b      	ldr	r3, [r5, #0]
 801768e:	6826      	ldr	r6, [r4, #0]
 8017690:	6961      	ldr	r1, [r4, #20]
 8017692:	1d18      	adds	r0, r3, #4
 8017694:	6028      	str	r0, [r5, #0]
 8017696:	0635      	lsls	r5, r6, #24
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	d501      	bpl.n	80176a0 <_printf_i+0x1cc>
 801769c:	6019      	str	r1, [r3, #0]
 801769e:	e002      	b.n	80176a6 <_printf_i+0x1d2>
 80176a0:	0670      	lsls	r0, r6, #25
 80176a2:	d5fb      	bpl.n	801769c <_printf_i+0x1c8>
 80176a4:	8019      	strh	r1, [r3, #0]
 80176a6:	2300      	movs	r3, #0
 80176a8:	6123      	str	r3, [r4, #16]
 80176aa:	4615      	mov	r5, r2
 80176ac:	e7ba      	b.n	8017624 <_printf_i+0x150>
 80176ae:	682b      	ldr	r3, [r5, #0]
 80176b0:	1d1a      	adds	r2, r3, #4
 80176b2:	602a      	str	r2, [r5, #0]
 80176b4:	681d      	ldr	r5, [r3, #0]
 80176b6:	6862      	ldr	r2, [r4, #4]
 80176b8:	2100      	movs	r1, #0
 80176ba:	4628      	mov	r0, r5
 80176bc:	f7e8 fd68 	bl	8000190 <memchr>
 80176c0:	b108      	cbz	r0, 80176c6 <_printf_i+0x1f2>
 80176c2:	1b40      	subs	r0, r0, r5
 80176c4:	6060      	str	r0, [r4, #4]
 80176c6:	6863      	ldr	r3, [r4, #4]
 80176c8:	6123      	str	r3, [r4, #16]
 80176ca:	2300      	movs	r3, #0
 80176cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176d0:	e7a8      	b.n	8017624 <_printf_i+0x150>
 80176d2:	6923      	ldr	r3, [r4, #16]
 80176d4:	462a      	mov	r2, r5
 80176d6:	4649      	mov	r1, r9
 80176d8:	4640      	mov	r0, r8
 80176da:	47d0      	blx	sl
 80176dc:	3001      	adds	r0, #1
 80176de:	d0ab      	beq.n	8017638 <_printf_i+0x164>
 80176e0:	6823      	ldr	r3, [r4, #0]
 80176e2:	079b      	lsls	r3, r3, #30
 80176e4:	d413      	bmi.n	801770e <_printf_i+0x23a>
 80176e6:	68e0      	ldr	r0, [r4, #12]
 80176e8:	9b03      	ldr	r3, [sp, #12]
 80176ea:	4298      	cmp	r0, r3
 80176ec:	bfb8      	it	lt
 80176ee:	4618      	movlt	r0, r3
 80176f0:	e7a4      	b.n	801763c <_printf_i+0x168>
 80176f2:	2301      	movs	r3, #1
 80176f4:	4632      	mov	r2, r6
 80176f6:	4649      	mov	r1, r9
 80176f8:	4640      	mov	r0, r8
 80176fa:	47d0      	blx	sl
 80176fc:	3001      	adds	r0, #1
 80176fe:	d09b      	beq.n	8017638 <_printf_i+0x164>
 8017700:	3501      	adds	r5, #1
 8017702:	68e3      	ldr	r3, [r4, #12]
 8017704:	9903      	ldr	r1, [sp, #12]
 8017706:	1a5b      	subs	r3, r3, r1
 8017708:	42ab      	cmp	r3, r5
 801770a:	dcf2      	bgt.n	80176f2 <_printf_i+0x21e>
 801770c:	e7eb      	b.n	80176e6 <_printf_i+0x212>
 801770e:	2500      	movs	r5, #0
 8017710:	f104 0619 	add.w	r6, r4, #25
 8017714:	e7f5      	b.n	8017702 <_printf_i+0x22e>
 8017716:	bf00      	nop
 8017718:	0801ab0e 	.word	0x0801ab0e
 801771c:	0801ab1f 	.word	0x0801ab1f

08017720 <iprintf>:
 8017720:	b40f      	push	{r0, r1, r2, r3}
 8017722:	4b0a      	ldr	r3, [pc, #40]	; (801774c <iprintf+0x2c>)
 8017724:	b513      	push	{r0, r1, r4, lr}
 8017726:	681c      	ldr	r4, [r3, #0]
 8017728:	b124      	cbz	r4, 8017734 <iprintf+0x14>
 801772a:	69a3      	ldr	r3, [r4, #24]
 801772c:	b913      	cbnz	r3, 8017734 <iprintf+0x14>
 801772e:	4620      	mov	r0, r4
 8017730:	f001 f942 	bl	80189b8 <__sinit>
 8017734:	ab05      	add	r3, sp, #20
 8017736:	9a04      	ldr	r2, [sp, #16]
 8017738:	68a1      	ldr	r1, [r4, #8]
 801773a:	9301      	str	r3, [sp, #4]
 801773c:	4620      	mov	r0, r4
 801773e:	f001 ff67 	bl	8019610 <_vfiprintf_r>
 8017742:	b002      	add	sp, #8
 8017744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017748:	b004      	add	sp, #16
 801774a:	4770      	bx	lr
 801774c:	2000065c 	.word	0x2000065c

08017750 <_puts_r>:
 8017750:	b570      	push	{r4, r5, r6, lr}
 8017752:	460e      	mov	r6, r1
 8017754:	4605      	mov	r5, r0
 8017756:	b118      	cbz	r0, 8017760 <_puts_r+0x10>
 8017758:	6983      	ldr	r3, [r0, #24]
 801775a:	b90b      	cbnz	r3, 8017760 <_puts_r+0x10>
 801775c:	f001 f92c 	bl	80189b8 <__sinit>
 8017760:	69ab      	ldr	r3, [r5, #24]
 8017762:	68ac      	ldr	r4, [r5, #8]
 8017764:	b913      	cbnz	r3, 801776c <_puts_r+0x1c>
 8017766:	4628      	mov	r0, r5
 8017768:	f001 f926 	bl	80189b8 <__sinit>
 801776c:	4b2c      	ldr	r3, [pc, #176]	; (8017820 <_puts_r+0xd0>)
 801776e:	429c      	cmp	r4, r3
 8017770:	d120      	bne.n	80177b4 <_puts_r+0x64>
 8017772:	686c      	ldr	r4, [r5, #4]
 8017774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017776:	07db      	lsls	r3, r3, #31
 8017778:	d405      	bmi.n	8017786 <_puts_r+0x36>
 801777a:	89a3      	ldrh	r3, [r4, #12]
 801777c:	0598      	lsls	r0, r3, #22
 801777e:	d402      	bmi.n	8017786 <_puts_r+0x36>
 8017780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017782:	f001 f9bc 	bl	8018afe <__retarget_lock_acquire_recursive>
 8017786:	89a3      	ldrh	r3, [r4, #12]
 8017788:	0719      	lsls	r1, r3, #28
 801778a:	d51d      	bpl.n	80177c8 <_puts_r+0x78>
 801778c:	6923      	ldr	r3, [r4, #16]
 801778e:	b1db      	cbz	r3, 80177c8 <_puts_r+0x78>
 8017790:	3e01      	subs	r6, #1
 8017792:	68a3      	ldr	r3, [r4, #8]
 8017794:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017798:	3b01      	subs	r3, #1
 801779a:	60a3      	str	r3, [r4, #8]
 801779c:	bb39      	cbnz	r1, 80177ee <_puts_r+0x9e>
 801779e:	2b00      	cmp	r3, #0
 80177a0:	da38      	bge.n	8017814 <_puts_r+0xc4>
 80177a2:	4622      	mov	r2, r4
 80177a4:	210a      	movs	r1, #10
 80177a6:	4628      	mov	r0, r5
 80177a8:	f000 f8ba 	bl	8017920 <__swbuf_r>
 80177ac:	3001      	adds	r0, #1
 80177ae:	d011      	beq.n	80177d4 <_puts_r+0x84>
 80177b0:	250a      	movs	r5, #10
 80177b2:	e011      	b.n	80177d8 <_puts_r+0x88>
 80177b4:	4b1b      	ldr	r3, [pc, #108]	; (8017824 <_puts_r+0xd4>)
 80177b6:	429c      	cmp	r4, r3
 80177b8:	d101      	bne.n	80177be <_puts_r+0x6e>
 80177ba:	68ac      	ldr	r4, [r5, #8]
 80177bc:	e7da      	b.n	8017774 <_puts_r+0x24>
 80177be:	4b1a      	ldr	r3, [pc, #104]	; (8017828 <_puts_r+0xd8>)
 80177c0:	429c      	cmp	r4, r3
 80177c2:	bf08      	it	eq
 80177c4:	68ec      	ldreq	r4, [r5, #12]
 80177c6:	e7d5      	b.n	8017774 <_puts_r+0x24>
 80177c8:	4621      	mov	r1, r4
 80177ca:	4628      	mov	r0, r5
 80177cc:	f000 f8fa 	bl	80179c4 <__swsetup_r>
 80177d0:	2800      	cmp	r0, #0
 80177d2:	d0dd      	beq.n	8017790 <_puts_r+0x40>
 80177d4:	f04f 35ff 	mov.w	r5, #4294967295
 80177d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177da:	07da      	lsls	r2, r3, #31
 80177dc:	d405      	bmi.n	80177ea <_puts_r+0x9a>
 80177de:	89a3      	ldrh	r3, [r4, #12]
 80177e0:	059b      	lsls	r3, r3, #22
 80177e2:	d402      	bmi.n	80177ea <_puts_r+0x9a>
 80177e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177e6:	f001 f98b 	bl	8018b00 <__retarget_lock_release_recursive>
 80177ea:	4628      	mov	r0, r5
 80177ec:	bd70      	pop	{r4, r5, r6, pc}
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	da04      	bge.n	80177fc <_puts_r+0xac>
 80177f2:	69a2      	ldr	r2, [r4, #24]
 80177f4:	429a      	cmp	r2, r3
 80177f6:	dc06      	bgt.n	8017806 <_puts_r+0xb6>
 80177f8:	290a      	cmp	r1, #10
 80177fa:	d004      	beq.n	8017806 <_puts_r+0xb6>
 80177fc:	6823      	ldr	r3, [r4, #0]
 80177fe:	1c5a      	adds	r2, r3, #1
 8017800:	6022      	str	r2, [r4, #0]
 8017802:	7019      	strb	r1, [r3, #0]
 8017804:	e7c5      	b.n	8017792 <_puts_r+0x42>
 8017806:	4622      	mov	r2, r4
 8017808:	4628      	mov	r0, r5
 801780a:	f000 f889 	bl	8017920 <__swbuf_r>
 801780e:	3001      	adds	r0, #1
 8017810:	d1bf      	bne.n	8017792 <_puts_r+0x42>
 8017812:	e7df      	b.n	80177d4 <_puts_r+0x84>
 8017814:	6823      	ldr	r3, [r4, #0]
 8017816:	250a      	movs	r5, #10
 8017818:	1c5a      	adds	r2, r3, #1
 801781a:	6022      	str	r2, [r4, #0]
 801781c:	701d      	strb	r5, [r3, #0]
 801781e:	e7db      	b.n	80177d8 <_puts_r+0x88>
 8017820:	0801abe0 	.word	0x0801abe0
 8017824:	0801ac00 	.word	0x0801ac00
 8017828:	0801abc0 	.word	0x0801abc0

0801782c <puts>:
 801782c:	4b02      	ldr	r3, [pc, #8]	; (8017838 <puts+0xc>)
 801782e:	4601      	mov	r1, r0
 8017830:	6818      	ldr	r0, [r3, #0]
 8017832:	f7ff bf8d 	b.w	8017750 <_puts_r>
 8017836:	bf00      	nop
 8017838:	2000065c 	.word	0x2000065c

0801783c <_sbrk_r>:
 801783c:	b538      	push	{r3, r4, r5, lr}
 801783e:	4d06      	ldr	r5, [pc, #24]	; (8017858 <_sbrk_r+0x1c>)
 8017840:	2300      	movs	r3, #0
 8017842:	4604      	mov	r4, r0
 8017844:	4608      	mov	r0, r1
 8017846:	602b      	str	r3, [r5, #0]
 8017848:	f7ec f802 	bl	8003850 <_sbrk>
 801784c:	1c43      	adds	r3, r0, #1
 801784e:	d102      	bne.n	8017856 <_sbrk_r+0x1a>
 8017850:	682b      	ldr	r3, [r5, #0]
 8017852:	b103      	cbz	r3, 8017856 <_sbrk_r+0x1a>
 8017854:	6023      	str	r3, [r4, #0]
 8017856:	bd38      	pop	{r3, r4, r5, pc}
 8017858:	20006ec8 	.word	0x20006ec8

0801785c <sniprintf>:
 801785c:	b40c      	push	{r2, r3}
 801785e:	b530      	push	{r4, r5, lr}
 8017860:	4b17      	ldr	r3, [pc, #92]	; (80178c0 <sniprintf+0x64>)
 8017862:	1e0c      	subs	r4, r1, #0
 8017864:	681d      	ldr	r5, [r3, #0]
 8017866:	b09d      	sub	sp, #116	; 0x74
 8017868:	da08      	bge.n	801787c <sniprintf+0x20>
 801786a:	238b      	movs	r3, #139	; 0x8b
 801786c:	602b      	str	r3, [r5, #0]
 801786e:	f04f 30ff 	mov.w	r0, #4294967295
 8017872:	b01d      	add	sp, #116	; 0x74
 8017874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017878:	b002      	add	sp, #8
 801787a:	4770      	bx	lr
 801787c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017880:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017884:	bf14      	ite	ne
 8017886:	f104 33ff 	addne.w	r3, r4, #4294967295
 801788a:	4623      	moveq	r3, r4
 801788c:	9304      	str	r3, [sp, #16]
 801788e:	9307      	str	r3, [sp, #28]
 8017890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017894:	9002      	str	r0, [sp, #8]
 8017896:	9006      	str	r0, [sp, #24]
 8017898:	f8ad 3016 	strh.w	r3, [sp, #22]
 801789c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801789e:	ab21      	add	r3, sp, #132	; 0x84
 80178a0:	a902      	add	r1, sp, #8
 80178a2:	4628      	mov	r0, r5
 80178a4:	9301      	str	r3, [sp, #4]
 80178a6:	f001 fd8b 	bl	80193c0 <_svfiprintf_r>
 80178aa:	1c43      	adds	r3, r0, #1
 80178ac:	bfbc      	itt	lt
 80178ae:	238b      	movlt	r3, #139	; 0x8b
 80178b0:	602b      	strlt	r3, [r5, #0]
 80178b2:	2c00      	cmp	r4, #0
 80178b4:	d0dd      	beq.n	8017872 <sniprintf+0x16>
 80178b6:	9b02      	ldr	r3, [sp, #8]
 80178b8:	2200      	movs	r2, #0
 80178ba:	701a      	strb	r2, [r3, #0]
 80178bc:	e7d9      	b.n	8017872 <sniprintf+0x16>
 80178be:	bf00      	nop
 80178c0:	2000065c 	.word	0x2000065c

080178c4 <siprintf>:
 80178c4:	b40e      	push	{r1, r2, r3}
 80178c6:	b500      	push	{lr}
 80178c8:	b09c      	sub	sp, #112	; 0x70
 80178ca:	ab1d      	add	r3, sp, #116	; 0x74
 80178cc:	9002      	str	r0, [sp, #8]
 80178ce:	9006      	str	r0, [sp, #24]
 80178d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80178d4:	4809      	ldr	r0, [pc, #36]	; (80178fc <siprintf+0x38>)
 80178d6:	9107      	str	r1, [sp, #28]
 80178d8:	9104      	str	r1, [sp, #16]
 80178da:	4909      	ldr	r1, [pc, #36]	; (8017900 <siprintf+0x3c>)
 80178dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80178e0:	9105      	str	r1, [sp, #20]
 80178e2:	6800      	ldr	r0, [r0, #0]
 80178e4:	9301      	str	r3, [sp, #4]
 80178e6:	a902      	add	r1, sp, #8
 80178e8:	f001 fd6a 	bl	80193c0 <_svfiprintf_r>
 80178ec:	9b02      	ldr	r3, [sp, #8]
 80178ee:	2200      	movs	r2, #0
 80178f0:	701a      	strb	r2, [r3, #0]
 80178f2:	b01c      	add	sp, #112	; 0x70
 80178f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80178f8:	b003      	add	sp, #12
 80178fa:	4770      	bx	lr
 80178fc:	2000065c 	.word	0x2000065c
 8017900:	ffff0208 	.word	0xffff0208

08017904 <strchr>:
 8017904:	b2c9      	uxtb	r1, r1
 8017906:	4603      	mov	r3, r0
 8017908:	4618      	mov	r0, r3
 801790a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801790e:	b112      	cbz	r2, 8017916 <strchr+0x12>
 8017910:	428a      	cmp	r2, r1
 8017912:	d1f9      	bne.n	8017908 <strchr+0x4>
 8017914:	4770      	bx	lr
 8017916:	2900      	cmp	r1, #0
 8017918:	bf18      	it	ne
 801791a:	2000      	movne	r0, #0
 801791c:	4770      	bx	lr
	...

08017920 <__swbuf_r>:
 8017920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017922:	460e      	mov	r6, r1
 8017924:	4614      	mov	r4, r2
 8017926:	4605      	mov	r5, r0
 8017928:	b118      	cbz	r0, 8017932 <__swbuf_r+0x12>
 801792a:	6983      	ldr	r3, [r0, #24]
 801792c:	b90b      	cbnz	r3, 8017932 <__swbuf_r+0x12>
 801792e:	f001 f843 	bl	80189b8 <__sinit>
 8017932:	4b21      	ldr	r3, [pc, #132]	; (80179b8 <__swbuf_r+0x98>)
 8017934:	429c      	cmp	r4, r3
 8017936:	d12b      	bne.n	8017990 <__swbuf_r+0x70>
 8017938:	686c      	ldr	r4, [r5, #4]
 801793a:	69a3      	ldr	r3, [r4, #24]
 801793c:	60a3      	str	r3, [r4, #8]
 801793e:	89a3      	ldrh	r3, [r4, #12]
 8017940:	071a      	lsls	r2, r3, #28
 8017942:	d52f      	bpl.n	80179a4 <__swbuf_r+0x84>
 8017944:	6923      	ldr	r3, [r4, #16]
 8017946:	b36b      	cbz	r3, 80179a4 <__swbuf_r+0x84>
 8017948:	6923      	ldr	r3, [r4, #16]
 801794a:	6820      	ldr	r0, [r4, #0]
 801794c:	1ac0      	subs	r0, r0, r3
 801794e:	6963      	ldr	r3, [r4, #20]
 8017950:	b2f6      	uxtb	r6, r6
 8017952:	4283      	cmp	r3, r0
 8017954:	4637      	mov	r7, r6
 8017956:	dc04      	bgt.n	8017962 <__swbuf_r+0x42>
 8017958:	4621      	mov	r1, r4
 801795a:	4628      	mov	r0, r5
 801795c:	f000 ff98 	bl	8018890 <_fflush_r>
 8017960:	bb30      	cbnz	r0, 80179b0 <__swbuf_r+0x90>
 8017962:	68a3      	ldr	r3, [r4, #8]
 8017964:	3b01      	subs	r3, #1
 8017966:	60a3      	str	r3, [r4, #8]
 8017968:	6823      	ldr	r3, [r4, #0]
 801796a:	1c5a      	adds	r2, r3, #1
 801796c:	6022      	str	r2, [r4, #0]
 801796e:	701e      	strb	r6, [r3, #0]
 8017970:	6963      	ldr	r3, [r4, #20]
 8017972:	3001      	adds	r0, #1
 8017974:	4283      	cmp	r3, r0
 8017976:	d004      	beq.n	8017982 <__swbuf_r+0x62>
 8017978:	89a3      	ldrh	r3, [r4, #12]
 801797a:	07db      	lsls	r3, r3, #31
 801797c:	d506      	bpl.n	801798c <__swbuf_r+0x6c>
 801797e:	2e0a      	cmp	r6, #10
 8017980:	d104      	bne.n	801798c <__swbuf_r+0x6c>
 8017982:	4621      	mov	r1, r4
 8017984:	4628      	mov	r0, r5
 8017986:	f000 ff83 	bl	8018890 <_fflush_r>
 801798a:	b988      	cbnz	r0, 80179b0 <__swbuf_r+0x90>
 801798c:	4638      	mov	r0, r7
 801798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017990:	4b0a      	ldr	r3, [pc, #40]	; (80179bc <__swbuf_r+0x9c>)
 8017992:	429c      	cmp	r4, r3
 8017994:	d101      	bne.n	801799a <__swbuf_r+0x7a>
 8017996:	68ac      	ldr	r4, [r5, #8]
 8017998:	e7cf      	b.n	801793a <__swbuf_r+0x1a>
 801799a:	4b09      	ldr	r3, [pc, #36]	; (80179c0 <__swbuf_r+0xa0>)
 801799c:	429c      	cmp	r4, r3
 801799e:	bf08      	it	eq
 80179a0:	68ec      	ldreq	r4, [r5, #12]
 80179a2:	e7ca      	b.n	801793a <__swbuf_r+0x1a>
 80179a4:	4621      	mov	r1, r4
 80179a6:	4628      	mov	r0, r5
 80179a8:	f000 f80c 	bl	80179c4 <__swsetup_r>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	d0cb      	beq.n	8017948 <__swbuf_r+0x28>
 80179b0:	f04f 37ff 	mov.w	r7, #4294967295
 80179b4:	e7ea      	b.n	801798c <__swbuf_r+0x6c>
 80179b6:	bf00      	nop
 80179b8:	0801abe0 	.word	0x0801abe0
 80179bc:	0801ac00 	.word	0x0801ac00
 80179c0:	0801abc0 	.word	0x0801abc0

080179c4 <__swsetup_r>:
 80179c4:	4b32      	ldr	r3, [pc, #200]	; (8017a90 <__swsetup_r+0xcc>)
 80179c6:	b570      	push	{r4, r5, r6, lr}
 80179c8:	681d      	ldr	r5, [r3, #0]
 80179ca:	4606      	mov	r6, r0
 80179cc:	460c      	mov	r4, r1
 80179ce:	b125      	cbz	r5, 80179da <__swsetup_r+0x16>
 80179d0:	69ab      	ldr	r3, [r5, #24]
 80179d2:	b913      	cbnz	r3, 80179da <__swsetup_r+0x16>
 80179d4:	4628      	mov	r0, r5
 80179d6:	f000 ffef 	bl	80189b8 <__sinit>
 80179da:	4b2e      	ldr	r3, [pc, #184]	; (8017a94 <__swsetup_r+0xd0>)
 80179dc:	429c      	cmp	r4, r3
 80179de:	d10f      	bne.n	8017a00 <__swsetup_r+0x3c>
 80179e0:	686c      	ldr	r4, [r5, #4]
 80179e2:	89a3      	ldrh	r3, [r4, #12]
 80179e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179e8:	0719      	lsls	r1, r3, #28
 80179ea:	d42c      	bmi.n	8017a46 <__swsetup_r+0x82>
 80179ec:	06dd      	lsls	r5, r3, #27
 80179ee:	d411      	bmi.n	8017a14 <__swsetup_r+0x50>
 80179f0:	2309      	movs	r3, #9
 80179f2:	6033      	str	r3, [r6, #0]
 80179f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80179f8:	81a3      	strh	r3, [r4, #12]
 80179fa:	f04f 30ff 	mov.w	r0, #4294967295
 80179fe:	e03e      	b.n	8017a7e <__swsetup_r+0xba>
 8017a00:	4b25      	ldr	r3, [pc, #148]	; (8017a98 <__swsetup_r+0xd4>)
 8017a02:	429c      	cmp	r4, r3
 8017a04:	d101      	bne.n	8017a0a <__swsetup_r+0x46>
 8017a06:	68ac      	ldr	r4, [r5, #8]
 8017a08:	e7eb      	b.n	80179e2 <__swsetup_r+0x1e>
 8017a0a:	4b24      	ldr	r3, [pc, #144]	; (8017a9c <__swsetup_r+0xd8>)
 8017a0c:	429c      	cmp	r4, r3
 8017a0e:	bf08      	it	eq
 8017a10:	68ec      	ldreq	r4, [r5, #12]
 8017a12:	e7e6      	b.n	80179e2 <__swsetup_r+0x1e>
 8017a14:	0758      	lsls	r0, r3, #29
 8017a16:	d512      	bpl.n	8017a3e <__swsetup_r+0x7a>
 8017a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a1a:	b141      	cbz	r1, 8017a2e <__swsetup_r+0x6a>
 8017a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a20:	4299      	cmp	r1, r3
 8017a22:	d002      	beq.n	8017a2a <__swsetup_r+0x66>
 8017a24:	4630      	mov	r0, r6
 8017a26:	f7ff f941 	bl	8016cac <_free_r>
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8017a2e:	89a3      	ldrh	r3, [r4, #12]
 8017a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a34:	81a3      	strh	r3, [r4, #12]
 8017a36:	2300      	movs	r3, #0
 8017a38:	6063      	str	r3, [r4, #4]
 8017a3a:	6923      	ldr	r3, [r4, #16]
 8017a3c:	6023      	str	r3, [r4, #0]
 8017a3e:	89a3      	ldrh	r3, [r4, #12]
 8017a40:	f043 0308 	orr.w	r3, r3, #8
 8017a44:	81a3      	strh	r3, [r4, #12]
 8017a46:	6923      	ldr	r3, [r4, #16]
 8017a48:	b94b      	cbnz	r3, 8017a5e <__swsetup_r+0x9a>
 8017a4a:	89a3      	ldrh	r3, [r4, #12]
 8017a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a54:	d003      	beq.n	8017a5e <__swsetup_r+0x9a>
 8017a56:	4621      	mov	r1, r4
 8017a58:	4630      	mov	r0, r6
 8017a5a:	f001 f877 	bl	8018b4c <__smakebuf_r>
 8017a5e:	89a0      	ldrh	r0, [r4, #12]
 8017a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a64:	f010 0301 	ands.w	r3, r0, #1
 8017a68:	d00a      	beq.n	8017a80 <__swsetup_r+0xbc>
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	60a3      	str	r3, [r4, #8]
 8017a6e:	6963      	ldr	r3, [r4, #20]
 8017a70:	425b      	negs	r3, r3
 8017a72:	61a3      	str	r3, [r4, #24]
 8017a74:	6923      	ldr	r3, [r4, #16]
 8017a76:	b943      	cbnz	r3, 8017a8a <__swsetup_r+0xc6>
 8017a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a7c:	d1ba      	bne.n	80179f4 <__swsetup_r+0x30>
 8017a7e:	bd70      	pop	{r4, r5, r6, pc}
 8017a80:	0781      	lsls	r1, r0, #30
 8017a82:	bf58      	it	pl
 8017a84:	6963      	ldrpl	r3, [r4, #20]
 8017a86:	60a3      	str	r3, [r4, #8]
 8017a88:	e7f4      	b.n	8017a74 <__swsetup_r+0xb0>
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	e7f7      	b.n	8017a7e <__swsetup_r+0xba>
 8017a8e:	bf00      	nop
 8017a90:	2000065c 	.word	0x2000065c
 8017a94:	0801abe0 	.word	0x0801abe0
 8017a98:	0801ac00 	.word	0x0801ac00
 8017a9c:	0801abc0 	.word	0x0801abc0

08017aa0 <quorem>:
 8017aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa4:	6903      	ldr	r3, [r0, #16]
 8017aa6:	690c      	ldr	r4, [r1, #16]
 8017aa8:	42a3      	cmp	r3, r4
 8017aaa:	4607      	mov	r7, r0
 8017aac:	db7d      	blt.n	8017baa <quorem+0x10a>
 8017aae:	3c01      	subs	r4, #1
 8017ab0:	f101 0814 	add.w	r8, r1, #20
 8017ab4:	f100 0514 	add.w	r5, r0, #20
 8017ab8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017abc:	9301      	str	r3, [sp, #4]
 8017abe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017ac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ac6:	3301      	adds	r3, #1
 8017ac8:	429a      	cmp	r2, r3
 8017aca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017ace:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017ad2:	fbb2 f6f3 	udiv	r6, r2, r3
 8017ad6:	d32e      	bcc.n	8017b36 <quorem+0x96>
 8017ad8:	f04f 0e00 	mov.w	lr, #0
 8017adc:	4640      	mov	r0, r8
 8017ade:	46ac      	mov	ip, r5
 8017ae0:	46f2      	mov	sl, lr
 8017ae2:	f850 2b04 	ldr.w	r2, [r0], #4
 8017ae6:	b293      	uxth	r3, r2
 8017ae8:	fb06 e303 	mla	r3, r6, r3, lr
 8017aec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017af0:	0c12      	lsrs	r2, r2, #16
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	fb06 e202 	mla	r2, r6, r2, lr
 8017af8:	ebaa 0303 	sub.w	r3, sl, r3
 8017afc:	f8dc a000 	ldr.w	sl, [ip]
 8017b00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b04:	b292      	uxth	r2, r2
 8017b06:	fa13 f38a 	uxtah	r3, r3, sl
 8017b0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017b0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b12:	b29b      	uxth	r3, r3
 8017b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b18:	4581      	cmp	r9, r0
 8017b1a:	f84c 3b04 	str.w	r3, [ip], #4
 8017b1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017b22:	d2de      	bcs.n	8017ae2 <quorem+0x42>
 8017b24:	f855 300b 	ldr.w	r3, [r5, fp]
 8017b28:	b92b      	cbnz	r3, 8017b36 <quorem+0x96>
 8017b2a:	9b01      	ldr	r3, [sp, #4]
 8017b2c:	3b04      	subs	r3, #4
 8017b2e:	429d      	cmp	r5, r3
 8017b30:	461a      	mov	r2, r3
 8017b32:	d32e      	bcc.n	8017b92 <quorem+0xf2>
 8017b34:	613c      	str	r4, [r7, #16]
 8017b36:	4638      	mov	r0, r7
 8017b38:	f001 fad2 	bl	80190e0 <__mcmp>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	db24      	blt.n	8017b8a <quorem+0xea>
 8017b40:	3601      	adds	r6, #1
 8017b42:	4628      	mov	r0, r5
 8017b44:	f04f 0c00 	mov.w	ip, #0
 8017b48:	f858 2b04 	ldr.w	r2, [r8], #4
 8017b4c:	f8d0 e000 	ldr.w	lr, [r0]
 8017b50:	b293      	uxth	r3, r2
 8017b52:	ebac 0303 	sub.w	r3, ip, r3
 8017b56:	0c12      	lsrs	r2, r2, #16
 8017b58:	fa13 f38e 	uxtah	r3, r3, lr
 8017b5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b6a:	45c1      	cmp	r9, r8
 8017b6c:	f840 3b04 	str.w	r3, [r0], #4
 8017b70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017b74:	d2e8      	bcs.n	8017b48 <quorem+0xa8>
 8017b76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017b7e:	b922      	cbnz	r2, 8017b8a <quorem+0xea>
 8017b80:	3b04      	subs	r3, #4
 8017b82:	429d      	cmp	r5, r3
 8017b84:	461a      	mov	r2, r3
 8017b86:	d30a      	bcc.n	8017b9e <quorem+0xfe>
 8017b88:	613c      	str	r4, [r7, #16]
 8017b8a:	4630      	mov	r0, r6
 8017b8c:	b003      	add	sp, #12
 8017b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b92:	6812      	ldr	r2, [r2, #0]
 8017b94:	3b04      	subs	r3, #4
 8017b96:	2a00      	cmp	r2, #0
 8017b98:	d1cc      	bne.n	8017b34 <quorem+0x94>
 8017b9a:	3c01      	subs	r4, #1
 8017b9c:	e7c7      	b.n	8017b2e <quorem+0x8e>
 8017b9e:	6812      	ldr	r2, [r2, #0]
 8017ba0:	3b04      	subs	r3, #4
 8017ba2:	2a00      	cmp	r2, #0
 8017ba4:	d1f0      	bne.n	8017b88 <quorem+0xe8>
 8017ba6:	3c01      	subs	r4, #1
 8017ba8:	e7eb      	b.n	8017b82 <quorem+0xe2>
 8017baa:	2000      	movs	r0, #0
 8017bac:	e7ee      	b.n	8017b8c <quorem+0xec>
	...

08017bb0 <_dtoa_r>:
 8017bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017bb6:	b099      	sub	sp, #100	; 0x64
 8017bb8:	4616      	mov	r6, r2
 8017bba:	461f      	mov	r7, r3
 8017bbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017bc0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8017bc4:	4605      	mov	r5, r0
 8017bc6:	b974      	cbnz	r4, 8017be6 <_dtoa_r+0x36>
 8017bc8:	2010      	movs	r0, #16
 8017bca:	f7ff f841 	bl	8016c50 <malloc>
 8017bce:	4602      	mov	r2, r0
 8017bd0:	6268      	str	r0, [r5, #36]	; 0x24
 8017bd2:	b920      	cbnz	r0, 8017bde <_dtoa_r+0x2e>
 8017bd4:	4ba8      	ldr	r3, [pc, #672]	; (8017e78 <_dtoa_r+0x2c8>)
 8017bd6:	21ea      	movs	r1, #234	; 0xea
 8017bd8:	48a8      	ldr	r0, [pc, #672]	; (8017e7c <_dtoa_r+0x2cc>)
 8017bda:	f001 fe9f 	bl	801991c <__assert_func>
 8017bde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017be2:	6004      	str	r4, [r0, #0]
 8017be4:	60c4      	str	r4, [r0, #12]
 8017be6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017be8:	6819      	ldr	r1, [r3, #0]
 8017bea:	b151      	cbz	r1, 8017c02 <_dtoa_r+0x52>
 8017bec:	685a      	ldr	r2, [r3, #4]
 8017bee:	604a      	str	r2, [r1, #4]
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	4093      	lsls	r3, r2
 8017bf4:	608b      	str	r3, [r1, #8]
 8017bf6:	4628      	mov	r0, r5
 8017bf8:	f001 f834 	bl	8018c64 <_Bfree>
 8017bfc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017bfe:	2200      	movs	r2, #0
 8017c00:	601a      	str	r2, [r3, #0]
 8017c02:	1e3b      	subs	r3, r7, #0
 8017c04:	bfb9      	ittee	lt
 8017c06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017c0a:	9305      	strlt	r3, [sp, #20]
 8017c0c:	2300      	movge	r3, #0
 8017c0e:	f8c8 3000 	strge.w	r3, [r8]
 8017c12:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017c16:	4b9a      	ldr	r3, [pc, #616]	; (8017e80 <_dtoa_r+0x2d0>)
 8017c18:	bfbc      	itt	lt
 8017c1a:	2201      	movlt	r2, #1
 8017c1c:	f8c8 2000 	strlt.w	r2, [r8]
 8017c20:	ea33 0309 	bics.w	r3, r3, r9
 8017c24:	d119      	bne.n	8017c5a <_dtoa_r+0xaa>
 8017c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017c28:	f242 730f 	movw	r3, #9999	; 0x270f
 8017c2c:	6013      	str	r3, [r2, #0]
 8017c2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017c32:	4333      	orrs	r3, r6
 8017c34:	f000 8580 	beq.w	8018738 <_dtoa_r+0xb88>
 8017c38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017c3a:	b953      	cbnz	r3, 8017c52 <_dtoa_r+0xa2>
 8017c3c:	4b91      	ldr	r3, [pc, #580]	; (8017e84 <_dtoa_r+0x2d4>)
 8017c3e:	e022      	b.n	8017c86 <_dtoa_r+0xd6>
 8017c40:	4b91      	ldr	r3, [pc, #580]	; (8017e88 <_dtoa_r+0x2d8>)
 8017c42:	9303      	str	r3, [sp, #12]
 8017c44:	3308      	adds	r3, #8
 8017c46:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017c48:	6013      	str	r3, [r2, #0]
 8017c4a:	9803      	ldr	r0, [sp, #12]
 8017c4c:	b019      	add	sp, #100	; 0x64
 8017c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c52:	4b8c      	ldr	r3, [pc, #560]	; (8017e84 <_dtoa_r+0x2d4>)
 8017c54:	9303      	str	r3, [sp, #12]
 8017c56:	3303      	adds	r3, #3
 8017c58:	e7f5      	b.n	8017c46 <_dtoa_r+0x96>
 8017c5a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017c5e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8017c62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c66:	2200      	movs	r2, #0
 8017c68:	2300      	movs	r3, #0
 8017c6a:	f7e8 ff05 	bl	8000a78 <__aeabi_dcmpeq>
 8017c6e:	4680      	mov	r8, r0
 8017c70:	b158      	cbz	r0, 8017c8a <_dtoa_r+0xda>
 8017c72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017c74:	2301      	movs	r3, #1
 8017c76:	6013      	str	r3, [r2, #0]
 8017c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	f000 8559 	beq.w	8018732 <_dtoa_r+0xb82>
 8017c80:	4882      	ldr	r0, [pc, #520]	; (8017e8c <_dtoa_r+0x2dc>)
 8017c82:	6018      	str	r0, [r3, #0]
 8017c84:	1e43      	subs	r3, r0, #1
 8017c86:	9303      	str	r3, [sp, #12]
 8017c88:	e7df      	b.n	8017c4a <_dtoa_r+0x9a>
 8017c8a:	ab16      	add	r3, sp, #88	; 0x58
 8017c8c:	9301      	str	r3, [sp, #4]
 8017c8e:	ab17      	add	r3, sp, #92	; 0x5c
 8017c90:	9300      	str	r3, [sp, #0]
 8017c92:	4628      	mov	r0, r5
 8017c94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c98:	f001 fac6 	bl	8019228 <__d2b>
 8017c9c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017ca0:	4683      	mov	fp, r0
 8017ca2:	2c00      	cmp	r4, #0
 8017ca4:	d07e      	beq.n	8017da4 <_dtoa_r+0x1f4>
 8017ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ca8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8017cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017cb4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8017cb8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8017cbc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8017cc0:	4b73      	ldr	r3, [pc, #460]	; (8017e90 <_dtoa_r+0x2e0>)
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	f7e8 fab8 	bl	8000238 <__aeabi_dsub>
 8017cc8:	a365      	add	r3, pc, #404	; (adr r3, 8017e60 <_dtoa_r+0x2b0>)
 8017cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cce:	f7e8 fc6b 	bl	80005a8 <__aeabi_dmul>
 8017cd2:	a365      	add	r3, pc, #404	; (adr r3, 8017e68 <_dtoa_r+0x2b8>)
 8017cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd8:	f7e8 fab0 	bl	800023c <__adddf3>
 8017cdc:	4606      	mov	r6, r0
 8017cde:	4620      	mov	r0, r4
 8017ce0:	460f      	mov	r7, r1
 8017ce2:	f7e8 fbf7 	bl	80004d4 <__aeabi_i2d>
 8017ce6:	a362      	add	r3, pc, #392	; (adr r3, 8017e70 <_dtoa_r+0x2c0>)
 8017ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cec:	f7e8 fc5c 	bl	80005a8 <__aeabi_dmul>
 8017cf0:	4602      	mov	r2, r0
 8017cf2:	460b      	mov	r3, r1
 8017cf4:	4630      	mov	r0, r6
 8017cf6:	4639      	mov	r1, r7
 8017cf8:	f7e8 faa0 	bl	800023c <__adddf3>
 8017cfc:	4606      	mov	r6, r0
 8017cfe:	460f      	mov	r7, r1
 8017d00:	f7e8 ff02 	bl	8000b08 <__aeabi_d2iz>
 8017d04:	2200      	movs	r2, #0
 8017d06:	4682      	mov	sl, r0
 8017d08:	2300      	movs	r3, #0
 8017d0a:	4630      	mov	r0, r6
 8017d0c:	4639      	mov	r1, r7
 8017d0e:	f7e8 febd 	bl	8000a8c <__aeabi_dcmplt>
 8017d12:	b148      	cbz	r0, 8017d28 <_dtoa_r+0x178>
 8017d14:	4650      	mov	r0, sl
 8017d16:	f7e8 fbdd 	bl	80004d4 <__aeabi_i2d>
 8017d1a:	4632      	mov	r2, r6
 8017d1c:	463b      	mov	r3, r7
 8017d1e:	f7e8 feab 	bl	8000a78 <__aeabi_dcmpeq>
 8017d22:	b908      	cbnz	r0, 8017d28 <_dtoa_r+0x178>
 8017d24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d28:	f1ba 0f16 	cmp.w	sl, #22
 8017d2c:	d857      	bhi.n	8017dde <_dtoa_r+0x22e>
 8017d2e:	4b59      	ldr	r3, [pc, #356]	; (8017e94 <_dtoa_r+0x2e4>)
 8017d30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017d3c:	f7e8 fea6 	bl	8000a8c <__aeabi_dcmplt>
 8017d40:	2800      	cmp	r0, #0
 8017d42:	d04e      	beq.n	8017de2 <_dtoa_r+0x232>
 8017d44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d48:	2300      	movs	r3, #0
 8017d4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017d4e:	1b1c      	subs	r4, r3, r4
 8017d50:	1e63      	subs	r3, r4, #1
 8017d52:	9309      	str	r3, [sp, #36]	; 0x24
 8017d54:	bf45      	ittet	mi
 8017d56:	f1c4 0301 	rsbmi	r3, r4, #1
 8017d5a:	9306      	strmi	r3, [sp, #24]
 8017d5c:	2300      	movpl	r3, #0
 8017d5e:	2300      	movmi	r3, #0
 8017d60:	bf4c      	ite	mi
 8017d62:	9309      	strmi	r3, [sp, #36]	; 0x24
 8017d64:	9306      	strpl	r3, [sp, #24]
 8017d66:	f1ba 0f00 	cmp.w	sl, #0
 8017d6a:	db3c      	blt.n	8017de6 <_dtoa_r+0x236>
 8017d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d6e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017d72:	4453      	add	r3, sl
 8017d74:	9309      	str	r3, [sp, #36]	; 0x24
 8017d76:	2300      	movs	r3, #0
 8017d78:	930a      	str	r3, [sp, #40]	; 0x28
 8017d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017d7c:	2b09      	cmp	r3, #9
 8017d7e:	f200 808d 	bhi.w	8017e9c <_dtoa_r+0x2ec>
 8017d82:	2b05      	cmp	r3, #5
 8017d84:	bfc4      	itt	gt
 8017d86:	3b04      	subgt	r3, #4
 8017d88:	9322      	strgt	r3, [sp, #136]	; 0x88
 8017d8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017d8c:	f1a3 0302 	sub.w	r3, r3, #2
 8017d90:	bfcc      	ite	gt
 8017d92:	2400      	movgt	r4, #0
 8017d94:	2401      	movle	r4, #1
 8017d96:	2b03      	cmp	r3, #3
 8017d98:	f200 808c 	bhi.w	8017eb4 <_dtoa_r+0x304>
 8017d9c:	e8df f003 	tbb	[pc, r3]
 8017da0:	5b4d4f2d 	.word	0x5b4d4f2d
 8017da4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8017da8:	441c      	add	r4, r3
 8017daa:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8017dae:	2b20      	cmp	r3, #32
 8017db0:	bfc3      	ittte	gt
 8017db2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017db6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8017dba:	fa09 f303 	lslgt.w	r3, r9, r3
 8017dbe:	f1c3 0320 	rsble	r3, r3, #32
 8017dc2:	bfc6      	itte	gt
 8017dc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017dc8:	4318      	orrgt	r0, r3
 8017dca:	fa06 f003 	lslle.w	r0, r6, r3
 8017dce:	f7e8 fb71 	bl	80004b4 <__aeabi_ui2d>
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8017dd8:	3c01      	subs	r4, #1
 8017dda:	9313      	str	r3, [sp, #76]	; 0x4c
 8017ddc:	e770      	b.n	8017cc0 <_dtoa_r+0x110>
 8017dde:	2301      	movs	r3, #1
 8017de0:	e7b3      	b.n	8017d4a <_dtoa_r+0x19a>
 8017de2:	900f      	str	r0, [sp, #60]	; 0x3c
 8017de4:	e7b2      	b.n	8017d4c <_dtoa_r+0x19c>
 8017de6:	9b06      	ldr	r3, [sp, #24]
 8017de8:	eba3 030a 	sub.w	r3, r3, sl
 8017dec:	9306      	str	r3, [sp, #24]
 8017dee:	f1ca 0300 	rsb	r3, sl, #0
 8017df2:	930a      	str	r3, [sp, #40]	; 0x28
 8017df4:	2300      	movs	r3, #0
 8017df6:	930e      	str	r3, [sp, #56]	; 0x38
 8017df8:	e7bf      	b.n	8017d7a <_dtoa_r+0x1ca>
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	dc5a      	bgt.n	8017eba <_dtoa_r+0x30a>
 8017e04:	f04f 0901 	mov.w	r9, #1
 8017e08:	f8cd 9020 	str.w	r9, [sp, #32]
 8017e0c:	464b      	mov	r3, r9
 8017e0e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8017e12:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8017e14:	2200      	movs	r2, #0
 8017e16:	6042      	str	r2, [r0, #4]
 8017e18:	2204      	movs	r2, #4
 8017e1a:	f102 0614 	add.w	r6, r2, #20
 8017e1e:	429e      	cmp	r6, r3
 8017e20:	6841      	ldr	r1, [r0, #4]
 8017e22:	d950      	bls.n	8017ec6 <_dtoa_r+0x316>
 8017e24:	4628      	mov	r0, r5
 8017e26:	f000 fedd 	bl	8018be4 <_Balloc>
 8017e2a:	9003      	str	r0, [sp, #12]
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	d14e      	bne.n	8017ece <_dtoa_r+0x31e>
 8017e30:	4b19      	ldr	r3, [pc, #100]	; (8017e98 <_dtoa_r+0x2e8>)
 8017e32:	4602      	mov	r2, r0
 8017e34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017e38:	e6ce      	b.n	8017bd8 <_dtoa_r+0x28>
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	e7de      	b.n	8017dfc <_dtoa_r+0x24c>
 8017e3e:	2300      	movs	r3, #0
 8017e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017e44:	eb0a 0903 	add.w	r9, sl, r3
 8017e48:	f109 0301 	add.w	r3, r9, #1
 8017e4c:	2b01      	cmp	r3, #1
 8017e4e:	9308      	str	r3, [sp, #32]
 8017e50:	bfb8      	it	lt
 8017e52:	2301      	movlt	r3, #1
 8017e54:	e7dd      	b.n	8017e12 <_dtoa_r+0x262>
 8017e56:	2301      	movs	r3, #1
 8017e58:	e7f2      	b.n	8017e40 <_dtoa_r+0x290>
 8017e5a:	bf00      	nop
 8017e5c:	f3af 8000 	nop.w
 8017e60:	636f4361 	.word	0x636f4361
 8017e64:	3fd287a7 	.word	0x3fd287a7
 8017e68:	8b60c8b3 	.word	0x8b60c8b3
 8017e6c:	3fc68a28 	.word	0x3fc68a28
 8017e70:	509f79fb 	.word	0x509f79fb
 8017e74:	3fd34413 	.word	0x3fd34413
 8017e78:	0801ab3d 	.word	0x0801ab3d
 8017e7c:	0801ab54 	.word	0x0801ab54
 8017e80:	7ff00000 	.word	0x7ff00000
 8017e84:	0801ab39 	.word	0x0801ab39
 8017e88:	0801ab30 	.word	0x0801ab30
 8017e8c:	0801ab0d 	.word	0x0801ab0d
 8017e90:	3ff80000 	.word	0x3ff80000
 8017e94:	0801aca8 	.word	0x0801aca8
 8017e98:	0801abaf 	.word	0x0801abaf
 8017e9c:	2401      	movs	r4, #1
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	9322      	str	r3, [sp, #136]	; 0x88
 8017ea2:	940b      	str	r4, [sp, #44]	; 0x2c
 8017ea4:	f04f 39ff 	mov.w	r9, #4294967295
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	f8cd 9020 	str.w	r9, [sp, #32]
 8017eae:	2312      	movs	r3, #18
 8017eb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8017eb2:	e7ae      	b.n	8017e12 <_dtoa_r+0x262>
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8017eb8:	e7f4      	b.n	8017ea4 <_dtoa_r+0x2f4>
 8017eba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8017ebe:	f8cd 9020 	str.w	r9, [sp, #32]
 8017ec2:	464b      	mov	r3, r9
 8017ec4:	e7a5      	b.n	8017e12 <_dtoa_r+0x262>
 8017ec6:	3101      	adds	r1, #1
 8017ec8:	6041      	str	r1, [r0, #4]
 8017eca:	0052      	lsls	r2, r2, #1
 8017ecc:	e7a5      	b.n	8017e1a <_dtoa_r+0x26a>
 8017ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017ed0:	9a03      	ldr	r2, [sp, #12]
 8017ed2:	601a      	str	r2, [r3, #0]
 8017ed4:	9b08      	ldr	r3, [sp, #32]
 8017ed6:	2b0e      	cmp	r3, #14
 8017ed8:	f200 80a8 	bhi.w	801802c <_dtoa_r+0x47c>
 8017edc:	2c00      	cmp	r4, #0
 8017ede:	f000 80a5 	beq.w	801802c <_dtoa_r+0x47c>
 8017ee2:	f1ba 0f00 	cmp.w	sl, #0
 8017ee6:	dd34      	ble.n	8017f52 <_dtoa_r+0x3a2>
 8017ee8:	4a9a      	ldr	r2, [pc, #616]	; (8018154 <_dtoa_r+0x5a4>)
 8017eea:	f00a 030f 	and.w	r3, sl, #15
 8017eee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017ef2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017ef6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017efa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8017efe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8017f02:	d016      	beq.n	8017f32 <_dtoa_r+0x382>
 8017f04:	4b94      	ldr	r3, [pc, #592]	; (8018158 <_dtoa_r+0x5a8>)
 8017f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017f0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f0e:	f7e8 fc75 	bl	80007fc <__aeabi_ddiv>
 8017f12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f16:	f004 040f 	and.w	r4, r4, #15
 8017f1a:	2703      	movs	r7, #3
 8017f1c:	4e8e      	ldr	r6, [pc, #568]	; (8018158 <_dtoa_r+0x5a8>)
 8017f1e:	b954      	cbnz	r4, 8017f36 <_dtoa_r+0x386>
 8017f20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017f28:	f7e8 fc68 	bl	80007fc <__aeabi_ddiv>
 8017f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f30:	e029      	b.n	8017f86 <_dtoa_r+0x3d6>
 8017f32:	2702      	movs	r7, #2
 8017f34:	e7f2      	b.n	8017f1c <_dtoa_r+0x36c>
 8017f36:	07e1      	lsls	r1, r4, #31
 8017f38:	d508      	bpl.n	8017f4c <_dtoa_r+0x39c>
 8017f3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017f3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017f42:	f7e8 fb31 	bl	80005a8 <__aeabi_dmul>
 8017f46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017f4a:	3701      	adds	r7, #1
 8017f4c:	1064      	asrs	r4, r4, #1
 8017f4e:	3608      	adds	r6, #8
 8017f50:	e7e5      	b.n	8017f1e <_dtoa_r+0x36e>
 8017f52:	f000 80a5 	beq.w	80180a0 <_dtoa_r+0x4f0>
 8017f56:	f1ca 0400 	rsb	r4, sl, #0
 8017f5a:	4b7e      	ldr	r3, [pc, #504]	; (8018154 <_dtoa_r+0x5a4>)
 8017f5c:	4e7e      	ldr	r6, [pc, #504]	; (8018158 <_dtoa_r+0x5a8>)
 8017f5e:	f004 020f 	and.w	r2, r4, #15
 8017f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017f6e:	f7e8 fb1b 	bl	80005a8 <__aeabi_dmul>
 8017f72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f76:	1124      	asrs	r4, r4, #4
 8017f78:	2300      	movs	r3, #0
 8017f7a:	2702      	movs	r7, #2
 8017f7c:	2c00      	cmp	r4, #0
 8017f7e:	f040 8084 	bne.w	801808a <_dtoa_r+0x4da>
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d1d2      	bne.n	8017f2c <_dtoa_r+0x37c>
 8017f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f000 808b 	beq.w	80180a4 <_dtoa_r+0x4f4>
 8017f8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017f92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8017f96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017f9a:	4b70      	ldr	r3, [pc, #448]	; (801815c <_dtoa_r+0x5ac>)
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	f7e8 fd75 	bl	8000a8c <__aeabi_dcmplt>
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	d07e      	beq.n	80180a4 <_dtoa_r+0x4f4>
 8017fa6:	9b08      	ldr	r3, [sp, #32]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d07b      	beq.n	80180a4 <_dtoa_r+0x4f4>
 8017fac:	f1b9 0f00 	cmp.w	r9, #0
 8017fb0:	dd38      	ble.n	8018024 <_dtoa_r+0x474>
 8017fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017fb6:	4b6a      	ldr	r3, [pc, #424]	; (8018160 <_dtoa_r+0x5b0>)
 8017fb8:	2200      	movs	r2, #0
 8017fba:	f7e8 faf5 	bl	80005a8 <__aeabi_dmul>
 8017fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017fc2:	f10a 38ff 	add.w	r8, sl, #4294967295
 8017fc6:	3701      	adds	r7, #1
 8017fc8:	464c      	mov	r4, r9
 8017fca:	4638      	mov	r0, r7
 8017fcc:	f7e8 fa82 	bl	80004d4 <__aeabi_i2d>
 8017fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017fd4:	f7e8 fae8 	bl	80005a8 <__aeabi_dmul>
 8017fd8:	4b62      	ldr	r3, [pc, #392]	; (8018164 <_dtoa_r+0x5b4>)
 8017fda:	2200      	movs	r2, #0
 8017fdc:	f7e8 f92e 	bl	800023c <__adddf3>
 8017fe0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017fe8:	9611      	str	r6, [sp, #68]	; 0x44
 8017fea:	2c00      	cmp	r4, #0
 8017fec:	d15d      	bne.n	80180aa <_dtoa_r+0x4fa>
 8017fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017ff2:	4b5d      	ldr	r3, [pc, #372]	; (8018168 <_dtoa_r+0x5b8>)
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	f7e8 f91f 	bl	8000238 <__aeabi_dsub>
 8017ffa:	4602      	mov	r2, r0
 8017ffc:	460b      	mov	r3, r1
 8017ffe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018002:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018004:	4633      	mov	r3, r6
 8018006:	f7e8 fd5f 	bl	8000ac8 <__aeabi_dcmpgt>
 801800a:	2800      	cmp	r0, #0
 801800c:	f040 829c 	bne.w	8018548 <_dtoa_r+0x998>
 8018010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018016:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801801a:	f7e8 fd37 	bl	8000a8c <__aeabi_dcmplt>
 801801e:	2800      	cmp	r0, #0
 8018020:	f040 8290 	bne.w	8018544 <_dtoa_r+0x994>
 8018024:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8018028:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801802c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801802e:	2b00      	cmp	r3, #0
 8018030:	f2c0 8152 	blt.w	80182d8 <_dtoa_r+0x728>
 8018034:	f1ba 0f0e 	cmp.w	sl, #14
 8018038:	f300 814e 	bgt.w	80182d8 <_dtoa_r+0x728>
 801803c:	4b45      	ldr	r3, [pc, #276]	; (8018154 <_dtoa_r+0x5a4>)
 801803e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018042:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018046:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801804a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801804c:	2b00      	cmp	r3, #0
 801804e:	f280 80db 	bge.w	8018208 <_dtoa_r+0x658>
 8018052:	9b08      	ldr	r3, [sp, #32]
 8018054:	2b00      	cmp	r3, #0
 8018056:	f300 80d7 	bgt.w	8018208 <_dtoa_r+0x658>
 801805a:	f040 8272 	bne.w	8018542 <_dtoa_r+0x992>
 801805e:	4b42      	ldr	r3, [pc, #264]	; (8018168 <_dtoa_r+0x5b8>)
 8018060:	2200      	movs	r2, #0
 8018062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018066:	f7e8 fa9f 	bl	80005a8 <__aeabi_dmul>
 801806a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801806e:	f7e8 fd21 	bl	8000ab4 <__aeabi_dcmpge>
 8018072:	9c08      	ldr	r4, [sp, #32]
 8018074:	4626      	mov	r6, r4
 8018076:	2800      	cmp	r0, #0
 8018078:	f040 8248 	bne.w	801850c <_dtoa_r+0x95c>
 801807c:	9f03      	ldr	r7, [sp, #12]
 801807e:	2331      	movs	r3, #49	; 0x31
 8018080:	f807 3b01 	strb.w	r3, [r7], #1
 8018084:	f10a 0a01 	add.w	sl, sl, #1
 8018088:	e244      	b.n	8018514 <_dtoa_r+0x964>
 801808a:	07e2      	lsls	r2, r4, #31
 801808c:	d505      	bpl.n	801809a <_dtoa_r+0x4ea>
 801808e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018092:	f7e8 fa89 	bl	80005a8 <__aeabi_dmul>
 8018096:	3701      	adds	r7, #1
 8018098:	2301      	movs	r3, #1
 801809a:	1064      	asrs	r4, r4, #1
 801809c:	3608      	adds	r6, #8
 801809e:	e76d      	b.n	8017f7c <_dtoa_r+0x3cc>
 80180a0:	2702      	movs	r7, #2
 80180a2:	e770      	b.n	8017f86 <_dtoa_r+0x3d6>
 80180a4:	9c08      	ldr	r4, [sp, #32]
 80180a6:	46d0      	mov	r8, sl
 80180a8:	e78f      	b.n	8017fca <_dtoa_r+0x41a>
 80180aa:	9903      	ldr	r1, [sp, #12]
 80180ac:	4b29      	ldr	r3, [pc, #164]	; (8018154 <_dtoa_r+0x5a4>)
 80180ae:	4421      	add	r1, r4
 80180b0:	9112      	str	r1, [sp, #72]	; 0x48
 80180b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80180b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80180b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80180bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80180c0:	2900      	cmp	r1, #0
 80180c2:	d055      	beq.n	8018170 <_dtoa_r+0x5c0>
 80180c4:	4929      	ldr	r1, [pc, #164]	; (801816c <_dtoa_r+0x5bc>)
 80180c6:	2000      	movs	r0, #0
 80180c8:	f7e8 fb98 	bl	80007fc <__aeabi_ddiv>
 80180cc:	463b      	mov	r3, r7
 80180ce:	4632      	mov	r2, r6
 80180d0:	f7e8 f8b2 	bl	8000238 <__aeabi_dsub>
 80180d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80180d8:	9f03      	ldr	r7, [sp, #12]
 80180da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80180de:	f7e8 fd13 	bl	8000b08 <__aeabi_d2iz>
 80180e2:	4604      	mov	r4, r0
 80180e4:	f7e8 f9f6 	bl	80004d4 <__aeabi_i2d>
 80180e8:	4602      	mov	r2, r0
 80180ea:	460b      	mov	r3, r1
 80180ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80180f0:	f7e8 f8a2 	bl	8000238 <__aeabi_dsub>
 80180f4:	3430      	adds	r4, #48	; 0x30
 80180f6:	4602      	mov	r2, r0
 80180f8:	460b      	mov	r3, r1
 80180fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80180fe:	f807 4b01 	strb.w	r4, [r7], #1
 8018102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018106:	f7e8 fcc1 	bl	8000a8c <__aeabi_dcmplt>
 801810a:	2800      	cmp	r0, #0
 801810c:	d174      	bne.n	80181f8 <_dtoa_r+0x648>
 801810e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018112:	4912      	ldr	r1, [pc, #72]	; (801815c <_dtoa_r+0x5ac>)
 8018114:	2000      	movs	r0, #0
 8018116:	f7e8 f88f 	bl	8000238 <__aeabi_dsub>
 801811a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801811e:	f7e8 fcb5 	bl	8000a8c <__aeabi_dcmplt>
 8018122:	2800      	cmp	r0, #0
 8018124:	f040 80b7 	bne.w	8018296 <_dtoa_r+0x6e6>
 8018128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801812a:	429f      	cmp	r7, r3
 801812c:	f43f af7a 	beq.w	8018024 <_dtoa_r+0x474>
 8018130:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018134:	4b0a      	ldr	r3, [pc, #40]	; (8018160 <_dtoa_r+0x5b0>)
 8018136:	2200      	movs	r2, #0
 8018138:	f7e8 fa36 	bl	80005a8 <__aeabi_dmul>
 801813c:	4b08      	ldr	r3, [pc, #32]	; (8018160 <_dtoa_r+0x5b0>)
 801813e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018142:	2200      	movs	r2, #0
 8018144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018148:	f7e8 fa2e 	bl	80005a8 <__aeabi_dmul>
 801814c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018150:	e7c3      	b.n	80180da <_dtoa_r+0x52a>
 8018152:	bf00      	nop
 8018154:	0801aca8 	.word	0x0801aca8
 8018158:	0801ac80 	.word	0x0801ac80
 801815c:	3ff00000 	.word	0x3ff00000
 8018160:	40240000 	.word	0x40240000
 8018164:	401c0000 	.word	0x401c0000
 8018168:	40140000 	.word	0x40140000
 801816c:	3fe00000 	.word	0x3fe00000
 8018170:	4630      	mov	r0, r6
 8018172:	4639      	mov	r1, r7
 8018174:	f7e8 fa18 	bl	80005a8 <__aeabi_dmul>
 8018178:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801817c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801817e:	9c03      	ldr	r4, [sp, #12]
 8018180:	9314      	str	r3, [sp, #80]	; 0x50
 8018182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018186:	f7e8 fcbf 	bl	8000b08 <__aeabi_d2iz>
 801818a:	9015      	str	r0, [sp, #84]	; 0x54
 801818c:	f7e8 f9a2 	bl	80004d4 <__aeabi_i2d>
 8018190:	4602      	mov	r2, r0
 8018192:	460b      	mov	r3, r1
 8018194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018198:	f7e8 f84e 	bl	8000238 <__aeabi_dsub>
 801819c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801819e:	3330      	adds	r3, #48	; 0x30
 80181a0:	f804 3b01 	strb.w	r3, [r4], #1
 80181a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80181a6:	429c      	cmp	r4, r3
 80181a8:	4606      	mov	r6, r0
 80181aa:	460f      	mov	r7, r1
 80181ac:	f04f 0200 	mov.w	r2, #0
 80181b0:	d124      	bne.n	80181fc <_dtoa_r+0x64c>
 80181b2:	4ba4      	ldr	r3, [pc, #656]	; (8018444 <_dtoa_r+0x894>)
 80181b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80181b8:	f7e8 f840 	bl	800023c <__adddf3>
 80181bc:	4602      	mov	r2, r0
 80181be:	460b      	mov	r3, r1
 80181c0:	4630      	mov	r0, r6
 80181c2:	4639      	mov	r1, r7
 80181c4:	f7e8 fc80 	bl	8000ac8 <__aeabi_dcmpgt>
 80181c8:	2800      	cmp	r0, #0
 80181ca:	d163      	bne.n	8018294 <_dtoa_r+0x6e4>
 80181cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80181d0:	499c      	ldr	r1, [pc, #624]	; (8018444 <_dtoa_r+0x894>)
 80181d2:	2000      	movs	r0, #0
 80181d4:	f7e8 f830 	bl	8000238 <__aeabi_dsub>
 80181d8:	4602      	mov	r2, r0
 80181da:	460b      	mov	r3, r1
 80181dc:	4630      	mov	r0, r6
 80181de:	4639      	mov	r1, r7
 80181e0:	f7e8 fc54 	bl	8000a8c <__aeabi_dcmplt>
 80181e4:	2800      	cmp	r0, #0
 80181e6:	f43f af1d 	beq.w	8018024 <_dtoa_r+0x474>
 80181ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80181ec:	1e7b      	subs	r3, r7, #1
 80181ee:	9314      	str	r3, [sp, #80]	; 0x50
 80181f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80181f4:	2b30      	cmp	r3, #48	; 0x30
 80181f6:	d0f8      	beq.n	80181ea <_dtoa_r+0x63a>
 80181f8:	46c2      	mov	sl, r8
 80181fa:	e03b      	b.n	8018274 <_dtoa_r+0x6c4>
 80181fc:	4b92      	ldr	r3, [pc, #584]	; (8018448 <_dtoa_r+0x898>)
 80181fe:	f7e8 f9d3 	bl	80005a8 <__aeabi_dmul>
 8018202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018206:	e7bc      	b.n	8018182 <_dtoa_r+0x5d2>
 8018208:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801820c:	9f03      	ldr	r7, [sp, #12]
 801820e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018212:	4640      	mov	r0, r8
 8018214:	4649      	mov	r1, r9
 8018216:	f7e8 faf1 	bl	80007fc <__aeabi_ddiv>
 801821a:	f7e8 fc75 	bl	8000b08 <__aeabi_d2iz>
 801821e:	4604      	mov	r4, r0
 8018220:	f7e8 f958 	bl	80004d4 <__aeabi_i2d>
 8018224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018228:	f7e8 f9be 	bl	80005a8 <__aeabi_dmul>
 801822c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8018230:	4602      	mov	r2, r0
 8018232:	460b      	mov	r3, r1
 8018234:	4640      	mov	r0, r8
 8018236:	4649      	mov	r1, r9
 8018238:	f7e7 fffe 	bl	8000238 <__aeabi_dsub>
 801823c:	f807 6b01 	strb.w	r6, [r7], #1
 8018240:	9e03      	ldr	r6, [sp, #12]
 8018242:	f8dd c020 	ldr.w	ip, [sp, #32]
 8018246:	1bbe      	subs	r6, r7, r6
 8018248:	45b4      	cmp	ip, r6
 801824a:	4602      	mov	r2, r0
 801824c:	460b      	mov	r3, r1
 801824e:	d136      	bne.n	80182be <_dtoa_r+0x70e>
 8018250:	f7e7 fff4 	bl	800023c <__adddf3>
 8018254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018258:	4680      	mov	r8, r0
 801825a:	4689      	mov	r9, r1
 801825c:	f7e8 fc34 	bl	8000ac8 <__aeabi_dcmpgt>
 8018260:	bb58      	cbnz	r0, 80182ba <_dtoa_r+0x70a>
 8018262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018266:	4640      	mov	r0, r8
 8018268:	4649      	mov	r1, r9
 801826a:	f7e8 fc05 	bl	8000a78 <__aeabi_dcmpeq>
 801826e:	b108      	cbz	r0, 8018274 <_dtoa_r+0x6c4>
 8018270:	07e1      	lsls	r1, r4, #31
 8018272:	d422      	bmi.n	80182ba <_dtoa_r+0x70a>
 8018274:	4628      	mov	r0, r5
 8018276:	4659      	mov	r1, fp
 8018278:	f000 fcf4 	bl	8018c64 <_Bfree>
 801827c:	2300      	movs	r3, #0
 801827e:	703b      	strb	r3, [r7, #0]
 8018280:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018282:	f10a 0001 	add.w	r0, sl, #1
 8018286:	6018      	str	r0, [r3, #0]
 8018288:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801828a:	2b00      	cmp	r3, #0
 801828c:	f43f acdd 	beq.w	8017c4a <_dtoa_r+0x9a>
 8018290:	601f      	str	r7, [r3, #0]
 8018292:	e4da      	b.n	8017c4a <_dtoa_r+0x9a>
 8018294:	4627      	mov	r7, r4
 8018296:	463b      	mov	r3, r7
 8018298:	461f      	mov	r7, r3
 801829a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801829e:	2a39      	cmp	r2, #57	; 0x39
 80182a0:	d107      	bne.n	80182b2 <_dtoa_r+0x702>
 80182a2:	9a03      	ldr	r2, [sp, #12]
 80182a4:	429a      	cmp	r2, r3
 80182a6:	d1f7      	bne.n	8018298 <_dtoa_r+0x6e8>
 80182a8:	9903      	ldr	r1, [sp, #12]
 80182aa:	2230      	movs	r2, #48	; 0x30
 80182ac:	f108 0801 	add.w	r8, r8, #1
 80182b0:	700a      	strb	r2, [r1, #0]
 80182b2:	781a      	ldrb	r2, [r3, #0]
 80182b4:	3201      	adds	r2, #1
 80182b6:	701a      	strb	r2, [r3, #0]
 80182b8:	e79e      	b.n	80181f8 <_dtoa_r+0x648>
 80182ba:	46d0      	mov	r8, sl
 80182bc:	e7eb      	b.n	8018296 <_dtoa_r+0x6e6>
 80182be:	4b62      	ldr	r3, [pc, #392]	; (8018448 <_dtoa_r+0x898>)
 80182c0:	2200      	movs	r2, #0
 80182c2:	f7e8 f971 	bl	80005a8 <__aeabi_dmul>
 80182c6:	2200      	movs	r2, #0
 80182c8:	2300      	movs	r3, #0
 80182ca:	4680      	mov	r8, r0
 80182cc:	4689      	mov	r9, r1
 80182ce:	f7e8 fbd3 	bl	8000a78 <__aeabi_dcmpeq>
 80182d2:	2800      	cmp	r0, #0
 80182d4:	d09b      	beq.n	801820e <_dtoa_r+0x65e>
 80182d6:	e7cd      	b.n	8018274 <_dtoa_r+0x6c4>
 80182d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182da:	2a00      	cmp	r2, #0
 80182dc:	f000 80d0 	beq.w	8018480 <_dtoa_r+0x8d0>
 80182e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80182e2:	2a01      	cmp	r2, #1
 80182e4:	f300 80b2 	bgt.w	801844c <_dtoa_r+0x89c>
 80182e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182ea:	2a00      	cmp	r2, #0
 80182ec:	f000 80a6 	beq.w	801843c <_dtoa_r+0x88c>
 80182f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80182f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80182f6:	9f06      	ldr	r7, [sp, #24]
 80182f8:	9a06      	ldr	r2, [sp, #24]
 80182fa:	441a      	add	r2, r3
 80182fc:	9206      	str	r2, [sp, #24]
 80182fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018300:	2101      	movs	r1, #1
 8018302:	441a      	add	r2, r3
 8018304:	4628      	mov	r0, r5
 8018306:	9209      	str	r2, [sp, #36]	; 0x24
 8018308:	f000 fd62 	bl	8018dd0 <__i2b>
 801830c:	4606      	mov	r6, r0
 801830e:	2f00      	cmp	r7, #0
 8018310:	dd0c      	ble.n	801832c <_dtoa_r+0x77c>
 8018312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018314:	2b00      	cmp	r3, #0
 8018316:	dd09      	ble.n	801832c <_dtoa_r+0x77c>
 8018318:	42bb      	cmp	r3, r7
 801831a:	9a06      	ldr	r2, [sp, #24]
 801831c:	bfa8      	it	ge
 801831e:	463b      	movge	r3, r7
 8018320:	1ad2      	subs	r2, r2, r3
 8018322:	9206      	str	r2, [sp, #24]
 8018324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018326:	1aff      	subs	r7, r7, r3
 8018328:	1ad3      	subs	r3, r2, r3
 801832a:	9309      	str	r3, [sp, #36]	; 0x24
 801832c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801832e:	b1f3      	cbz	r3, 801836e <_dtoa_r+0x7be>
 8018330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018332:	2b00      	cmp	r3, #0
 8018334:	f000 80a8 	beq.w	8018488 <_dtoa_r+0x8d8>
 8018338:	2c00      	cmp	r4, #0
 801833a:	dd10      	ble.n	801835e <_dtoa_r+0x7ae>
 801833c:	4631      	mov	r1, r6
 801833e:	4622      	mov	r2, r4
 8018340:	4628      	mov	r0, r5
 8018342:	f000 fe03 	bl	8018f4c <__pow5mult>
 8018346:	465a      	mov	r2, fp
 8018348:	4601      	mov	r1, r0
 801834a:	4606      	mov	r6, r0
 801834c:	4628      	mov	r0, r5
 801834e:	f000 fd55 	bl	8018dfc <__multiply>
 8018352:	4659      	mov	r1, fp
 8018354:	4680      	mov	r8, r0
 8018356:	4628      	mov	r0, r5
 8018358:	f000 fc84 	bl	8018c64 <_Bfree>
 801835c:	46c3      	mov	fp, r8
 801835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018360:	1b1a      	subs	r2, r3, r4
 8018362:	d004      	beq.n	801836e <_dtoa_r+0x7be>
 8018364:	4659      	mov	r1, fp
 8018366:	4628      	mov	r0, r5
 8018368:	f000 fdf0 	bl	8018f4c <__pow5mult>
 801836c:	4683      	mov	fp, r0
 801836e:	2101      	movs	r1, #1
 8018370:	4628      	mov	r0, r5
 8018372:	f000 fd2d 	bl	8018dd0 <__i2b>
 8018376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018378:	2b00      	cmp	r3, #0
 801837a:	4604      	mov	r4, r0
 801837c:	f340 8086 	ble.w	801848c <_dtoa_r+0x8dc>
 8018380:	461a      	mov	r2, r3
 8018382:	4601      	mov	r1, r0
 8018384:	4628      	mov	r0, r5
 8018386:	f000 fde1 	bl	8018f4c <__pow5mult>
 801838a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801838c:	2b01      	cmp	r3, #1
 801838e:	4604      	mov	r4, r0
 8018390:	dd7f      	ble.n	8018492 <_dtoa_r+0x8e2>
 8018392:	f04f 0800 	mov.w	r8, #0
 8018396:	6923      	ldr	r3, [r4, #16]
 8018398:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801839c:	6918      	ldr	r0, [r3, #16]
 801839e:	f000 fcc9 	bl	8018d34 <__hi0bits>
 80183a2:	f1c0 0020 	rsb	r0, r0, #32
 80183a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183a8:	4418      	add	r0, r3
 80183aa:	f010 001f 	ands.w	r0, r0, #31
 80183ae:	f000 8092 	beq.w	80184d6 <_dtoa_r+0x926>
 80183b2:	f1c0 0320 	rsb	r3, r0, #32
 80183b6:	2b04      	cmp	r3, #4
 80183b8:	f340 808a 	ble.w	80184d0 <_dtoa_r+0x920>
 80183bc:	f1c0 001c 	rsb	r0, r0, #28
 80183c0:	9b06      	ldr	r3, [sp, #24]
 80183c2:	4403      	add	r3, r0
 80183c4:	9306      	str	r3, [sp, #24]
 80183c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183c8:	4403      	add	r3, r0
 80183ca:	4407      	add	r7, r0
 80183cc:	9309      	str	r3, [sp, #36]	; 0x24
 80183ce:	9b06      	ldr	r3, [sp, #24]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	dd05      	ble.n	80183e0 <_dtoa_r+0x830>
 80183d4:	4659      	mov	r1, fp
 80183d6:	461a      	mov	r2, r3
 80183d8:	4628      	mov	r0, r5
 80183da:	f000 fe11 	bl	8019000 <__lshift>
 80183de:	4683      	mov	fp, r0
 80183e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	dd05      	ble.n	80183f2 <_dtoa_r+0x842>
 80183e6:	4621      	mov	r1, r4
 80183e8:	461a      	mov	r2, r3
 80183ea:	4628      	mov	r0, r5
 80183ec:	f000 fe08 	bl	8019000 <__lshift>
 80183f0:	4604      	mov	r4, r0
 80183f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d070      	beq.n	80184da <_dtoa_r+0x92a>
 80183f8:	4621      	mov	r1, r4
 80183fa:	4658      	mov	r0, fp
 80183fc:	f000 fe70 	bl	80190e0 <__mcmp>
 8018400:	2800      	cmp	r0, #0
 8018402:	da6a      	bge.n	80184da <_dtoa_r+0x92a>
 8018404:	2300      	movs	r3, #0
 8018406:	4659      	mov	r1, fp
 8018408:	220a      	movs	r2, #10
 801840a:	4628      	mov	r0, r5
 801840c:	f000 fc4c 	bl	8018ca8 <__multadd>
 8018410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018412:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018416:	4683      	mov	fp, r0
 8018418:	2b00      	cmp	r3, #0
 801841a:	f000 8194 	beq.w	8018746 <_dtoa_r+0xb96>
 801841e:	4631      	mov	r1, r6
 8018420:	2300      	movs	r3, #0
 8018422:	220a      	movs	r2, #10
 8018424:	4628      	mov	r0, r5
 8018426:	f000 fc3f 	bl	8018ca8 <__multadd>
 801842a:	f1b9 0f00 	cmp.w	r9, #0
 801842e:	4606      	mov	r6, r0
 8018430:	f300 8093 	bgt.w	801855a <_dtoa_r+0x9aa>
 8018434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018436:	2b02      	cmp	r3, #2
 8018438:	dc57      	bgt.n	80184ea <_dtoa_r+0x93a>
 801843a:	e08e      	b.n	801855a <_dtoa_r+0x9aa>
 801843c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801843e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018442:	e757      	b.n	80182f4 <_dtoa_r+0x744>
 8018444:	3fe00000 	.word	0x3fe00000
 8018448:	40240000 	.word	0x40240000
 801844c:	9b08      	ldr	r3, [sp, #32]
 801844e:	1e5c      	subs	r4, r3, #1
 8018450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018452:	42a3      	cmp	r3, r4
 8018454:	bfbf      	itttt	lt
 8018456:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018458:	940a      	strlt	r4, [sp, #40]	; 0x28
 801845a:	1ae2      	sublt	r2, r4, r3
 801845c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801845e:	bfb6      	itet	lt
 8018460:	189b      	addlt	r3, r3, r2
 8018462:	1b1c      	subge	r4, r3, r4
 8018464:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018466:	9b08      	ldr	r3, [sp, #32]
 8018468:	bfb8      	it	lt
 801846a:	2400      	movlt	r4, #0
 801846c:	2b00      	cmp	r3, #0
 801846e:	bfb9      	ittee	lt
 8018470:	9b06      	ldrlt	r3, [sp, #24]
 8018472:	9a08      	ldrlt	r2, [sp, #32]
 8018474:	9f06      	ldrge	r7, [sp, #24]
 8018476:	9b08      	ldrge	r3, [sp, #32]
 8018478:	bfbc      	itt	lt
 801847a:	1a9f      	sublt	r7, r3, r2
 801847c:	2300      	movlt	r3, #0
 801847e:	e73b      	b.n	80182f8 <_dtoa_r+0x748>
 8018480:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018482:	9f06      	ldr	r7, [sp, #24]
 8018484:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018486:	e742      	b.n	801830e <_dtoa_r+0x75e>
 8018488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801848a:	e76b      	b.n	8018364 <_dtoa_r+0x7b4>
 801848c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801848e:	2b01      	cmp	r3, #1
 8018490:	dc19      	bgt.n	80184c6 <_dtoa_r+0x916>
 8018492:	9b04      	ldr	r3, [sp, #16]
 8018494:	b9bb      	cbnz	r3, 80184c6 <_dtoa_r+0x916>
 8018496:	9b05      	ldr	r3, [sp, #20]
 8018498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801849c:	b99b      	cbnz	r3, 80184c6 <_dtoa_r+0x916>
 801849e:	9b05      	ldr	r3, [sp, #20]
 80184a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80184a4:	0d1b      	lsrs	r3, r3, #20
 80184a6:	051b      	lsls	r3, r3, #20
 80184a8:	b183      	cbz	r3, 80184cc <_dtoa_r+0x91c>
 80184aa:	9b06      	ldr	r3, [sp, #24]
 80184ac:	3301      	adds	r3, #1
 80184ae:	9306      	str	r3, [sp, #24]
 80184b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184b2:	3301      	adds	r3, #1
 80184b4:	9309      	str	r3, [sp, #36]	; 0x24
 80184b6:	f04f 0801 	mov.w	r8, #1
 80184ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184bc:	2b00      	cmp	r3, #0
 80184be:	f47f af6a 	bne.w	8018396 <_dtoa_r+0x7e6>
 80184c2:	2001      	movs	r0, #1
 80184c4:	e76f      	b.n	80183a6 <_dtoa_r+0x7f6>
 80184c6:	f04f 0800 	mov.w	r8, #0
 80184ca:	e7f6      	b.n	80184ba <_dtoa_r+0x90a>
 80184cc:	4698      	mov	r8, r3
 80184ce:	e7f4      	b.n	80184ba <_dtoa_r+0x90a>
 80184d0:	f43f af7d 	beq.w	80183ce <_dtoa_r+0x81e>
 80184d4:	4618      	mov	r0, r3
 80184d6:	301c      	adds	r0, #28
 80184d8:	e772      	b.n	80183c0 <_dtoa_r+0x810>
 80184da:	9b08      	ldr	r3, [sp, #32]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	dc36      	bgt.n	801854e <_dtoa_r+0x99e>
 80184e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80184e2:	2b02      	cmp	r3, #2
 80184e4:	dd33      	ble.n	801854e <_dtoa_r+0x99e>
 80184e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80184ea:	f1b9 0f00 	cmp.w	r9, #0
 80184ee:	d10d      	bne.n	801850c <_dtoa_r+0x95c>
 80184f0:	4621      	mov	r1, r4
 80184f2:	464b      	mov	r3, r9
 80184f4:	2205      	movs	r2, #5
 80184f6:	4628      	mov	r0, r5
 80184f8:	f000 fbd6 	bl	8018ca8 <__multadd>
 80184fc:	4601      	mov	r1, r0
 80184fe:	4604      	mov	r4, r0
 8018500:	4658      	mov	r0, fp
 8018502:	f000 fded 	bl	80190e0 <__mcmp>
 8018506:	2800      	cmp	r0, #0
 8018508:	f73f adb8 	bgt.w	801807c <_dtoa_r+0x4cc>
 801850c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801850e:	9f03      	ldr	r7, [sp, #12]
 8018510:	ea6f 0a03 	mvn.w	sl, r3
 8018514:	f04f 0800 	mov.w	r8, #0
 8018518:	4621      	mov	r1, r4
 801851a:	4628      	mov	r0, r5
 801851c:	f000 fba2 	bl	8018c64 <_Bfree>
 8018520:	2e00      	cmp	r6, #0
 8018522:	f43f aea7 	beq.w	8018274 <_dtoa_r+0x6c4>
 8018526:	f1b8 0f00 	cmp.w	r8, #0
 801852a:	d005      	beq.n	8018538 <_dtoa_r+0x988>
 801852c:	45b0      	cmp	r8, r6
 801852e:	d003      	beq.n	8018538 <_dtoa_r+0x988>
 8018530:	4641      	mov	r1, r8
 8018532:	4628      	mov	r0, r5
 8018534:	f000 fb96 	bl	8018c64 <_Bfree>
 8018538:	4631      	mov	r1, r6
 801853a:	4628      	mov	r0, r5
 801853c:	f000 fb92 	bl	8018c64 <_Bfree>
 8018540:	e698      	b.n	8018274 <_dtoa_r+0x6c4>
 8018542:	2400      	movs	r4, #0
 8018544:	4626      	mov	r6, r4
 8018546:	e7e1      	b.n	801850c <_dtoa_r+0x95c>
 8018548:	46c2      	mov	sl, r8
 801854a:	4626      	mov	r6, r4
 801854c:	e596      	b.n	801807c <_dtoa_r+0x4cc>
 801854e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018554:	2b00      	cmp	r3, #0
 8018556:	f000 80fd 	beq.w	8018754 <_dtoa_r+0xba4>
 801855a:	2f00      	cmp	r7, #0
 801855c:	dd05      	ble.n	801856a <_dtoa_r+0x9ba>
 801855e:	4631      	mov	r1, r6
 8018560:	463a      	mov	r2, r7
 8018562:	4628      	mov	r0, r5
 8018564:	f000 fd4c 	bl	8019000 <__lshift>
 8018568:	4606      	mov	r6, r0
 801856a:	f1b8 0f00 	cmp.w	r8, #0
 801856e:	d05c      	beq.n	801862a <_dtoa_r+0xa7a>
 8018570:	6871      	ldr	r1, [r6, #4]
 8018572:	4628      	mov	r0, r5
 8018574:	f000 fb36 	bl	8018be4 <_Balloc>
 8018578:	4607      	mov	r7, r0
 801857a:	b928      	cbnz	r0, 8018588 <_dtoa_r+0x9d8>
 801857c:	4b80      	ldr	r3, [pc, #512]	; (8018780 <_dtoa_r+0xbd0>)
 801857e:	4602      	mov	r2, r0
 8018580:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018584:	f7ff bb28 	b.w	8017bd8 <_dtoa_r+0x28>
 8018588:	6932      	ldr	r2, [r6, #16]
 801858a:	3202      	adds	r2, #2
 801858c:	0092      	lsls	r2, r2, #2
 801858e:	f106 010c 	add.w	r1, r6, #12
 8018592:	300c      	adds	r0, #12
 8018594:	f7fe fb74 	bl	8016c80 <memcpy>
 8018598:	2201      	movs	r2, #1
 801859a:	4639      	mov	r1, r7
 801859c:	4628      	mov	r0, r5
 801859e:	f000 fd2f 	bl	8019000 <__lshift>
 80185a2:	9b03      	ldr	r3, [sp, #12]
 80185a4:	3301      	adds	r3, #1
 80185a6:	9308      	str	r3, [sp, #32]
 80185a8:	9b03      	ldr	r3, [sp, #12]
 80185aa:	444b      	add	r3, r9
 80185ac:	930a      	str	r3, [sp, #40]	; 0x28
 80185ae:	9b04      	ldr	r3, [sp, #16]
 80185b0:	f003 0301 	and.w	r3, r3, #1
 80185b4:	46b0      	mov	r8, r6
 80185b6:	9309      	str	r3, [sp, #36]	; 0x24
 80185b8:	4606      	mov	r6, r0
 80185ba:	9b08      	ldr	r3, [sp, #32]
 80185bc:	4621      	mov	r1, r4
 80185be:	3b01      	subs	r3, #1
 80185c0:	4658      	mov	r0, fp
 80185c2:	9304      	str	r3, [sp, #16]
 80185c4:	f7ff fa6c 	bl	8017aa0 <quorem>
 80185c8:	4603      	mov	r3, r0
 80185ca:	3330      	adds	r3, #48	; 0x30
 80185cc:	9006      	str	r0, [sp, #24]
 80185ce:	4641      	mov	r1, r8
 80185d0:	4658      	mov	r0, fp
 80185d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80185d4:	f000 fd84 	bl	80190e0 <__mcmp>
 80185d8:	4632      	mov	r2, r6
 80185da:	4681      	mov	r9, r0
 80185dc:	4621      	mov	r1, r4
 80185de:	4628      	mov	r0, r5
 80185e0:	f000 fd9a 	bl	8019118 <__mdiff>
 80185e4:	68c2      	ldr	r2, [r0, #12]
 80185e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185e8:	4607      	mov	r7, r0
 80185ea:	bb02      	cbnz	r2, 801862e <_dtoa_r+0xa7e>
 80185ec:	4601      	mov	r1, r0
 80185ee:	4658      	mov	r0, fp
 80185f0:	f000 fd76 	bl	80190e0 <__mcmp>
 80185f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185f6:	4602      	mov	r2, r0
 80185f8:	4639      	mov	r1, r7
 80185fa:	4628      	mov	r0, r5
 80185fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8018600:	f000 fb30 	bl	8018c64 <_Bfree>
 8018604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018608:	9f08      	ldr	r7, [sp, #32]
 801860a:	ea43 0102 	orr.w	r1, r3, r2
 801860e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018610:	430b      	orrs	r3, r1
 8018612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018614:	d10d      	bne.n	8018632 <_dtoa_r+0xa82>
 8018616:	2b39      	cmp	r3, #57	; 0x39
 8018618:	d029      	beq.n	801866e <_dtoa_r+0xabe>
 801861a:	f1b9 0f00 	cmp.w	r9, #0
 801861e:	dd01      	ble.n	8018624 <_dtoa_r+0xa74>
 8018620:	9b06      	ldr	r3, [sp, #24]
 8018622:	3331      	adds	r3, #49	; 0x31
 8018624:	9a04      	ldr	r2, [sp, #16]
 8018626:	7013      	strb	r3, [r2, #0]
 8018628:	e776      	b.n	8018518 <_dtoa_r+0x968>
 801862a:	4630      	mov	r0, r6
 801862c:	e7b9      	b.n	80185a2 <_dtoa_r+0x9f2>
 801862e:	2201      	movs	r2, #1
 8018630:	e7e2      	b.n	80185f8 <_dtoa_r+0xa48>
 8018632:	f1b9 0f00 	cmp.w	r9, #0
 8018636:	db06      	blt.n	8018646 <_dtoa_r+0xa96>
 8018638:	9922      	ldr	r1, [sp, #136]	; 0x88
 801863a:	ea41 0909 	orr.w	r9, r1, r9
 801863e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018640:	ea59 0101 	orrs.w	r1, r9, r1
 8018644:	d120      	bne.n	8018688 <_dtoa_r+0xad8>
 8018646:	2a00      	cmp	r2, #0
 8018648:	ddec      	ble.n	8018624 <_dtoa_r+0xa74>
 801864a:	4659      	mov	r1, fp
 801864c:	2201      	movs	r2, #1
 801864e:	4628      	mov	r0, r5
 8018650:	9308      	str	r3, [sp, #32]
 8018652:	f000 fcd5 	bl	8019000 <__lshift>
 8018656:	4621      	mov	r1, r4
 8018658:	4683      	mov	fp, r0
 801865a:	f000 fd41 	bl	80190e0 <__mcmp>
 801865e:	2800      	cmp	r0, #0
 8018660:	9b08      	ldr	r3, [sp, #32]
 8018662:	dc02      	bgt.n	801866a <_dtoa_r+0xaba>
 8018664:	d1de      	bne.n	8018624 <_dtoa_r+0xa74>
 8018666:	07da      	lsls	r2, r3, #31
 8018668:	d5dc      	bpl.n	8018624 <_dtoa_r+0xa74>
 801866a:	2b39      	cmp	r3, #57	; 0x39
 801866c:	d1d8      	bne.n	8018620 <_dtoa_r+0xa70>
 801866e:	9a04      	ldr	r2, [sp, #16]
 8018670:	2339      	movs	r3, #57	; 0x39
 8018672:	7013      	strb	r3, [r2, #0]
 8018674:	463b      	mov	r3, r7
 8018676:	461f      	mov	r7, r3
 8018678:	3b01      	subs	r3, #1
 801867a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801867e:	2a39      	cmp	r2, #57	; 0x39
 8018680:	d050      	beq.n	8018724 <_dtoa_r+0xb74>
 8018682:	3201      	adds	r2, #1
 8018684:	701a      	strb	r2, [r3, #0]
 8018686:	e747      	b.n	8018518 <_dtoa_r+0x968>
 8018688:	2a00      	cmp	r2, #0
 801868a:	dd03      	ble.n	8018694 <_dtoa_r+0xae4>
 801868c:	2b39      	cmp	r3, #57	; 0x39
 801868e:	d0ee      	beq.n	801866e <_dtoa_r+0xabe>
 8018690:	3301      	adds	r3, #1
 8018692:	e7c7      	b.n	8018624 <_dtoa_r+0xa74>
 8018694:	9a08      	ldr	r2, [sp, #32]
 8018696:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018698:	f802 3c01 	strb.w	r3, [r2, #-1]
 801869c:	428a      	cmp	r2, r1
 801869e:	d02a      	beq.n	80186f6 <_dtoa_r+0xb46>
 80186a0:	4659      	mov	r1, fp
 80186a2:	2300      	movs	r3, #0
 80186a4:	220a      	movs	r2, #10
 80186a6:	4628      	mov	r0, r5
 80186a8:	f000 fafe 	bl	8018ca8 <__multadd>
 80186ac:	45b0      	cmp	r8, r6
 80186ae:	4683      	mov	fp, r0
 80186b0:	f04f 0300 	mov.w	r3, #0
 80186b4:	f04f 020a 	mov.w	r2, #10
 80186b8:	4641      	mov	r1, r8
 80186ba:	4628      	mov	r0, r5
 80186bc:	d107      	bne.n	80186ce <_dtoa_r+0xb1e>
 80186be:	f000 faf3 	bl	8018ca8 <__multadd>
 80186c2:	4680      	mov	r8, r0
 80186c4:	4606      	mov	r6, r0
 80186c6:	9b08      	ldr	r3, [sp, #32]
 80186c8:	3301      	adds	r3, #1
 80186ca:	9308      	str	r3, [sp, #32]
 80186cc:	e775      	b.n	80185ba <_dtoa_r+0xa0a>
 80186ce:	f000 faeb 	bl	8018ca8 <__multadd>
 80186d2:	4631      	mov	r1, r6
 80186d4:	4680      	mov	r8, r0
 80186d6:	2300      	movs	r3, #0
 80186d8:	220a      	movs	r2, #10
 80186da:	4628      	mov	r0, r5
 80186dc:	f000 fae4 	bl	8018ca8 <__multadd>
 80186e0:	4606      	mov	r6, r0
 80186e2:	e7f0      	b.n	80186c6 <_dtoa_r+0xb16>
 80186e4:	f1b9 0f00 	cmp.w	r9, #0
 80186e8:	9a03      	ldr	r2, [sp, #12]
 80186ea:	bfcc      	ite	gt
 80186ec:	464f      	movgt	r7, r9
 80186ee:	2701      	movle	r7, #1
 80186f0:	4417      	add	r7, r2
 80186f2:	f04f 0800 	mov.w	r8, #0
 80186f6:	4659      	mov	r1, fp
 80186f8:	2201      	movs	r2, #1
 80186fa:	4628      	mov	r0, r5
 80186fc:	9308      	str	r3, [sp, #32]
 80186fe:	f000 fc7f 	bl	8019000 <__lshift>
 8018702:	4621      	mov	r1, r4
 8018704:	4683      	mov	fp, r0
 8018706:	f000 fceb 	bl	80190e0 <__mcmp>
 801870a:	2800      	cmp	r0, #0
 801870c:	dcb2      	bgt.n	8018674 <_dtoa_r+0xac4>
 801870e:	d102      	bne.n	8018716 <_dtoa_r+0xb66>
 8018710:	9b08      	ldr	r3, [sp, #32]
 8018712:	07db      	lsls	r3, r3, #31
 8018714:	d4ae      	bmi.n	8018674 <_dtoa_r+0xac4>
 8018716:	463b      	mov	r3, r7
 8018718:	461f      	mov	r7, r3
 801871a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801871e:	2a30      	cmp	r2, #48	; 0x30
 8018720:	d0fa      	beq.n	8018718 <_dtoa_r+0xb68>
 8018722:	e6f9      	b.n	8018518 <_dtoa_r+0x968>
 8018724:	9a03      	ldr	r2, [sp, #12]
 8018726:	429a      	cmp	r2, r3
 8018728:	d1a5      	bne.n	8018676 <_dtoa_r+0xac6>
 801872a:	f10a 0a01 	add.w	sl, sl, #1
 801872e:	2331      	movs	r3, #49	; 0x31
 8018730:	e779      	b.n	8018626 <_dtoa_r+0xa76>
 8018732:	4b14      	ldr	r3, [pc, #80]	; (8018784 <_dtoa_r+0xbd4>)
 8018734:	f7ff baa7 	b.w	8017c86 <_dtoa_r+0xd6>
 8018738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801873a:	2b00      	cmp	r3, #0
 801873c:	f47f aa80 	bne.w	8017c40 <_dtoa_r+0x90>
 8018740:	4b11      	ldr	r3, [pc, #68]	; (8018788 <_dtoa_r+0xbd8>)
 8018742:	f7ff baa0 	b.w	8017c86 <_dtoa_r+0xd6>
 8018746:	f1b9 0f00 	cmp.w	r9, #0
 801874a:	dc03      	bgt.n	8018754 <_dtoa_r+0xba4>
 801874c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801874e:	2b02      	cmp	r3, #2
 8018750:	f73f aecb 	bgt.w	80184ea <_dtoa_r+0x93a>
 8018754:	9f03      	ldr	r7, [sp, #12]
 8018756:	4621      	mov	r1, r4
 8018758:	4658      	mov	r0, fp
 801875a:	f7ff f9a1 	bl	8017aa0 <quorem>
 801875e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018762:	f807 3b01 	strb.w	r3, [r7], #1
 8018766:	9a03      	ldr	r2, [sp, #12]
 8018768:	1aba      	subs	r2, r7, r2
 801876a:	4591      	cmp	r9, r2
 801876c:	ddba      	ble.n	80186e4 <_dtoa_r+0xb34>
 801876e:	4659      	mov	r1, fp
 8018770:	2300      	movs	r3, #0
 8018772:	220a      	movs	r2, #10
 8018774:	4628      	mov	r0, r5
 8018776:	f000 fa97 	bl	8018ca8 <__multadd>
 801877a:	4683      	mov	fp, r0
 801877c:	e7eb      	b.n	8018756 <_dtoa_r+0xba6>
 801877e:	bf00      	nop
 8018780:	0801abaf 	.word	0x0801abaf
 8018784:	0801ab0c 	.word	0x0801ab0c
 8018788:	0801ab30 	.word	0x0801ab30

0801878c <__sflush_r>:
 801878c:	898a      	ldrh	r2, [r1, #12]
 801878e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018790:	4605      	mov	r5, r0
 8018792:	0710      	lsls	r0, r2, #28
 8018794:	460c      	mov	r4, r1
 8018796:	d457      	bmi.n	8018848 <__sflush_r+0xbc>
 8018798:	684b      	ldr	r3, [r1, #4]
 801879a:	2b00      	cmp	r3, #0
 801879c:	dc04      	bgt.n	80187a8 <__sflush_r+0x1c>
 801879e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	dc01      	bgt.n	80187a8 <__sflush_r+0x1c>
 80187a4:	2000      	movs	r0, #0
 80187a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80187aa:	2e00      	cmp	r6, #0
 80187ac:	d0fa      	beq.n	80187a4 <__sflush_r+0x18>
 80187ae:	2300      	movs	r3, #0
 80187b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80187b4:	682f      	ldr	r7, [r5, #0]
 80187b6:	602b      	str	r3, [r5, #0]
 80187b8:	d032      	beq.n	8018820 <__sflush_r+0x94>
 80187ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80187bc:	89a3      	ldrh	r3, [r4, #12]
 80187be:	075a      	lsls	r2, r3, #29
 80187c0:	d505      	bpl.n	80187ce <__sflush_r+0x42>
 80187c2:	6863      	ldr	r3, [r4, #4]
 80187c4:	1ac0      	subs	r0, r0, r3
 80187c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80187c8:	b10b      	cbz	r3, 80187ce <__sflush_r+0x42>
 80187ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80187cc:	1ac0      	subs	r0, r0, r3
 80187ce:	2300      	movs	r3, #0
 80187d0:	4602      	mov	r2, r0
 80187d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80187d4:	6a21      	ldr	r1, [r4, #32]
 80187d6:	4628      	mov	r0, r5
 80187d8:	47b0      	blx	r6
 80187da:	1c43      	adds	r3, r0, #1
 80187dc:	89a3      	ldrh	r3, [r4, #12]
 80187de:	d106      	bne.n	80187ee <__sflush_r+0x62>
 80187e0:	6829      	ldr	r1, [r5, #0]
 80187e2:	291d      	cmp	r1, #29
 80187e4:	d82c      	bhi.n	8018840 <__sflush_r+0xb4>
 80187e6:	4a29      	ldr	r2, [pc, #164]	; (801888c <__sflush_r+0x100>)
 80187e8:	40ca      	lsrs	r2, r1
 80187ea:	07d6      	lsls	r6, r2, #31
 80187ec:	d528      	bpl.n	8018840 <__sflush_r+0xb4>
 80187ee:	2200      	movs	r2, #0
 80187f0:	6062      	str	r2, [r4, #4]
 80187f2:	04d9      	lsls	r1, r3, #19
 80187f4:	6922      	ldr	r2, [r4, #16]
 80187f6:	6022      	str	r2, [r4, #0]
 80187f8:	d504      	bpl.n	8018804 <__sflush_r+0x78>
 80187fa:	1c42      	adds	r2, r0, #1
 80187fc:	d101      	bne.n	8018802 <__sflush_r+0x76>
 80187fe:	682b      	ldr	r3, [r5, #0]
 8018800:	b903      	cbnz	r3, 8018804 <__sflush_r+0x78>
 8018802:	6560      	str	r0, [r4, #84]	; 0x54
 8018804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018806:	602f      	str	r7, [r5, #0]
 8018808:	2900      	cmp	r1, #0
 801880a:	d0cb      	beq.n	80187a4 <__sflush_r+0x18>
 801880c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018810:	4299      	cmp	r1, r3
 8018812:	d002      	beq.n	801881a <__sflush_r+0x8e>
 8018814:	4628      	mov	r0, r5
 8018816:	f7fe fa49 	bl	8016cac <_free_r>
 801881a:	2000      	movs	r0, #0
 801881c:	6360      	str	r0, [r4, #52]	; 0x34
 801881e:	e7c2      	b.n	80187a6 <__sflush_r+0x1a>
 8018820:	6a21      	ldr	r1, [r4, #32]
 8018822:	2301      	movs	r3, #1
 8018824:	4628      	mov	r0, r5
 8018826:	47b0      	blx	r6
 8018828:	1c41      	adds	r1, r0, #1
 801882a:	d1c7      	bne.n	80187bc <__sflush_r+0x30>
 801882c:	682b      	ldr	r3, [r5, #0]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d0c4      	beq.n	80187bc <__sflush_r+0x30>
 8018832:	2b1d      	cmp	r3, #29
 8018834:	d001      	beq.n	801883a <__sflush_r+0xae>
 8018836:	2b16      	cmp	r3, #22
 8018838:	d101      	bne.n	801883e <__sflush_r+0xb2>
 801883a:	602f      	str	r7, [r5, #0]
 801883c:	e7b2      	b.n	80187a4 <__sflush_r+0x18>
 801883e:	89a3      	ldrh	r3, [r4, #12]
 8018840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018844:	81a3      	strh	r3, [r4, #12]
 8018846:	e7ae      	b.n	80187a6 <__sflush_r+0x1a>
 8018848:	690f      	ldr	r7, [r1, #16]
 801884a:	2f00      	cmp	r7, #0
 801884c:	d0aa      	beq.n	80187a4 <__sflush_r+0x18>
 801884e:	0793      	lsls	r3, r2, #30
 8018850:	680e      	ldr	r6, [r1, #0]
 8018852:	bf08      	it	eq
 8018854:	694b      	ldreq	r3, [r1, #20]
 8018856:	600f      	str	r7, [r1, #0]
 8018858:	bf18      	it	ne
 801885a:	2300      	movne	r3, #0
 801885c:	1bf6      	subs	r6, r6, r7
 801885e:	608b      	str	r3, [r1, #8]
 8018860:	2e00      	cmp	r6, #0
 8018862:	dd9f      	ble.n	80187a4 <__sflush_r+0x18>
 8018864:	6a21      	ldr	r1, [r4, #32]
 8018866:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801886a:	4633      	mov	r3, r6
 801886c:	463a      	mov	r2, r7
 801886e:	4628      	mov	r0, r5
 8018870:	47e0      	blx	ip
 8018872:	2800      	cmp	r0, #0
 8018874:	dc06      	bgt.n	8018884 <__sflush_r+0xf8>
 8018876:	89a3      	ldrh	r3, [r4, #12]
 8018878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801887c:	81a3      	strh	r3, [r4, #12]
 801887e:	f04f 30ff 	mov.w	r0, #4294967295
 8018882:	e790      	b.n	80187a6 <__sflush_r+0x1a>
 8018884:	4407      	add	r7, r0
 8018886:	1a36      	subs	r6, r6, r0
 8018888:	e7ea      	b.n	8018860 <__sflush_r+0xd4>
 801888a:	bf00      	nop
 801888c:	20400001 	.word	0x20400001

08018890 <_fflush_r>:
 8018890:	b538      	push	{r3, r4, r5, lr}
 8018892:	690b      	ldr	r3, [r1, #16]
 8018894:	4605      	mov	r5, r0
 8018896:	460c      	mov	r4, r1
 8018898:	b913      	cbnz	r3, 80188a0 <_fflush_r+0x10>
 801889a:	2500      	movs	r5, #0
 801889c:	4628      	mov	r0, r5
 801889e:	bd38      	pop	{r3, r4, r5, pc}
 80188a0:	b118      	cbz	r0, 80188aa <_fflush_r+0x1a>
 80188a2:	6983      	ldr	r3, [r0, #24]
 80188a4:	b90b      	cbnz	r3, 80188aa <_fflush_r+0x1a>
 80188a6:	f000 f887 	bl	80189b8 <__sinit>
 80188aa:	4b14      	ldr	r3, [pc, #80]	; (80188fc <_fflush_r+0x6c>)
 80188ac:	429c      	cmp	r4, r3
 80188ae:	d11b      	bne.n	80188e8 <_fflush_r+0x58>
 80188b0:	686c      	ldr	r4, [r5, #4]
 80188b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d0ef      	beq.n	801889a <_fflush_r+0xa>
 80188ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80188bc:	07d0      	lsls	r0, r2, #31
 80188be:	d404      	bmi.n	80188ca <_fflush_r+0x3a>
 80188c0:	0599      	lsls	r1, r3, #22
 80188c2:	d402      	bmi.n	80188ca <_fflush_r+0x3a>
 80188c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80188c6:	f000 f91a 	bl	8018afe <__retarget_lock_acquire_recursive>
 80188ca:	4628      	mov	r0, r5
 80188cc:	4621      	mov	r1, r4
 80188ce:	f7ff ff5d 	bl	801878c <__sflush_r>
 80188d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80188d4:	07da      	lsls	r2, r3, #31
 80188d6:	4605      	mov	r5, r0
 80188d8:	d4e0      	bmi.n	801889c <_fflush_r+0xc>
 80188da:	89a3      	ldrh	r3, [r4, #12]
 80188dc:	059b      	lsls	r3, r3, #22
 80188de:	d4dd      	bmi.n	801889c <_fflush_r+0xc>
 80188e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80188e2:	f000 f90d 	bl	8018b00 <__retarget_lock_release_recursive>
 80188e6:	e7d9      	b.n	801889c <_fflush_r+0xc>
 80188e8:	4b05      	ldr	r3, [pc, #20]	; (8018900 <_fflush_r+0x70>)
 80188ea:	429c      	cmp	r4, r3
 80188ec:	d101      	bne.n	80188f2 <_fflush_r+0x62>
 80188ee:	68ac      	ldr	r4, [r5, #8]
 80188f0:	e7df      	b.n	80188b2 <_fflush_r+0x22>
 80188f2:	4b04      	ldr	r3, [pc, #16]	; (8018904 <_fflush_r+0x74>)
 80188f4:	429c      	cmp	r4, r3
 80188f6:	bf08      	it	eq
 80188f8:	68ec      	ldreq	r4, [r5, #12]
 80188fa:	e7da      	b.n	80188b2 <_fflush_r+0x22>
 80188fc:	0801abe0 	.word	0x0801abe0
 8018900:	0801ac00 	.word	0x0801ac00
 8018904:	0801abc0 	.word	0x0801abc0

08018908 <std>:
 8018908:	2300      	movs	r3, #0
 801890a:	b510      	push	{r4, lr}
 801890c:	4604      	mov	r4, r0
 801890e:	e9c0 3300 	strd	r3, r3, [r0]
 8018912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018916:	6083      	str	r3, [r0, #8]
 8018918:	8181      	strh	r1, [r0, #12]
 801891a:	6643      	str	r3, [r0, #100]	; 0x64
 801891c:	81c2      	strh	r2, [r0, #14]
 801891e:	6183      	str	r3, [r0, #24]
 8018920:	4619      	mov	r1, r3
 8018922:	2208      	movs	r2, #8
 8018924:	305c      	adds	r0, #92	; 0x5c
 8018926:	f7fe f9b9 	bl	8016c9c <memset>
 801892a:	4b05      	ldr	r3, [pc, #20]	; (8018940 <std+0x38>)
 801892c:	6263      	str	r3, [r4, #36]	; 0x24
 801892e:	4b05      	ldr	r3, [pc, #20]	; (8018944 <std+0x3c>)
 8018930:	62a3      	str	r3, [r4, #40]	; 0x28
 8018932:	4b05      	ldr	r3, [pc, #20]	; (8018948 <std+0x40>)
 8018934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018936:	4b05      	ldr	r3, [pc, #20]	; (801894c <std+0x44>)
 8018938:	6224      	str	r4, [r4, #32]
 801893a:	6323      	str	r3, [r4, #48]	; 0x30
 801893c:	bd10      	pop	{r4, pc}
 801893e:	bf00      	nop
 8018940:	08019871 	.word	0x08019871
 8018944:	08019893 	.word	0x08019893
 8018948:	080198cb 	.word	0x080198cb
 801894c:	080198ef 	.word	0x080198ef

08018950 <_cleanup_r>:
 8018950:	4901      	ldr	r1, [pc, #4]	; (8018958 <_cleanup_r+0x8>)
 8018952:	f000 b8af 	b.w	8018ab4 <_fwalk_reent>
 8018956:	bf00      	nop
 8018958:	08018891 	.word	0x08018891

0801895c <__sfmoreglue>:
 801895c:	b570      	push	{r4, r5, r6, lr}
 801895e:	2268      	movs	r2, #104	; 0x68
 8018960:	1e4d      	subs	r5, r1, #1
 8018962:	4355      	muls	r5, r2
 8018964:	460e      	mov	r6, r1
 8018966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801896a:	f7fe fa09 	bl	8016d80 <_malloc_r>
 801896e:	4604      	mov	r4, r0
 8018970:	b140      	cbz	r0, 8018984 <__sfmoreglue+0x28>
 8018972:	2100      	movs	r1, #0
 8018974:	e9c0 1600 	strd	r1, r6, [r0]
 8018978:	300c      	adds	r0, #12
 801897a:	60a0      	str	r0, [r4, #8]
 801897c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018980:	f7fe f98c 	bl	8016c9c <memset>
 8018984:	4620      	mov	r0, r4
 8018986:	bd70      	pop	{r4, r5, r6, pc}

08018988 <__sfp_lock_acquire>:
 8018988:	4801      	ldr	r0, [pc, #4]	; (8018990 <__sfp_lock_acquire+0x8>)
 801898a:	f000 b8b8 	b.w	8018afe <__retarget_lock_acquire_recursive>
 801898e:	bf00      	nop
 8018990:	20006ec5 	.word	0x20006ec5

08018994 <__sfp_lock_release>:
 8018994:	4801      	ldr	r0, [pc, #4]	; (801899c <__sfp_lock_release+0x8>)
 8018996:	f000 b8b3 	b.w	8018b00 <__retarget_lock_release_recursive>
 801899a:	bf00      	nop
 801899c:	20006ec5 	.word	0x20006ec5

080189a0 <__sinit_lock_acquire>:
 80189a0:	4801      	ldr	r0, [pc, #4]	; (80189a8 <__sinit_lock_acquire+0x8>)
 80189a2:	f000 b8ac 	b.w	8018afe <__retarget_lock_acquire_recursive>
 80189a6:	bf00      	nop
 80189a8:	20006ec6 	.word	0x20006ec6

080189ac <__sinit_lock_release>:
 80189ac:	4801      	ldr	r0, [pc, #4]	; (80189b4 <__sinit_lock_release+0x8>)
 80189ae:	f000 b8a7 	b.w	8018b00 <__retarget_lock_release_recursive>
 80189b2:	bf00      	nop
 80189b4:	20006ec6 	.word	0x20006ec6

080189b8 <__sinit>:
 80189b8:	b510      	push	{r4, lr}
 80189ba:	4604      	mov	r4, r0
 80189bc:	f7ff fff0 	bl	80189a0 <__sinit_lock_acquire>
 80189c0:	69a3      	ldr	r3, [r4, #24]
 80189c2:	b11b      	cbz	r3, 80189cc <__sinit+0x14>
 80189c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189c8:	f7ff bff0 	b.w	80189ac <__sinit_lock_release>
 80189cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80189d0:	6523      	str	r3, [r4, #80]	; 0x50
 80189d2:	4b13      	ldr	r3, [pc, #76]	; (8018a20 <__sinit+0x68>)
 80189d4:	4a13      	ldr	r2, [pc, #76]	; (8018a24 <__sinit+0x6c>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80189da:	42a3      	cmp	r3, r4
 80189dc:	bf04      	itt	eq
 80189de:	2301      	moveq	r3, #1
 80189e0:	61a3      	streq	r3, [r4, #24]
 80189e2:	4620      	mov	r0, r4
 80189e4:	f000 f820 	bl	8018a28 <__sfp>
 80189e8:	6060      	str	r0, [r4, #4]
 80189ea:	4620      	mov	r0, r4
 80189ec:	f000 f81c 	bl	8018a28 <__sfp>
 80189f0:	60a0      	str	r0, [r4, #8]
 80189f2:	4620      	mov	r0, r4
 80189f4:	f000 f818 	bl	8018a28 <__sfp>
 80189f8:	2200      	movs	r2, #0
 80189fa:	60e0      	str	r0, [r4, #12]
 80189fc:	2104      	movs	r1, #4
 80189fe:	6860      	ldr	r0, [r4, #4]
 8018a00:	f7ff ff82 	bl	8018908 <std>
 8018a04:	68a0      	ldr	r0, [r4, #8]
 8018a06:	2201      	movs	r2, #1
 8018a08:	2109      	movs	r1, #9
 8018a0a:	f7ff ff7d 	bl	8018908 <std>
 8018a0e:	68e0      	ldr	r0, [r4, #12]
 8018a10:	2202      	movs	r2, #2
 8018a12:	2112      	movs	r1, #18
 8018a14:	f7ff ff78 	bl	8018908 <std>
 8018a18:	2301      	movs	r3, #1
 8018a1a:	61a3      	str	r3, [r4, #24]
 8018a1c:	e7d2      	b.n	80189c4 <__sinit+0xc>
 8018a1e:	bf00      	nop
 8018a20:	0801aaf8 	.word	0x0801aaf8
 8018a24:	08018951 	.word	0x08018951

08018a28 <__sfp>:
 8018a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a2a:	4607      	mov	r7, r0
 8018a2c:	f7ff ffac 	bl	8018988 <__sfp_lock_acquire>
 8018a30:	4b1e      	ldr	r3, [pc, #120]	; (8018aac <__sfp+0x84>)
 8018a32:	681e      	ldr	r6, [r3, #0]
 8018a34:	69b3      	ldr	r3, [r6, #24]
 8018a36:	b913      	cbnz	r3, 8018a3e <__sfp+0x16>
 8018a38:	4630      	mov	r0, r6
 8018a3a:	f7ff ffbd 	bl	80189b8 <__sinit>
 8018a3e:	3648      	adds	r6, #72	; 0x48
 8018a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018a44:	3b01      	subs	r3, #1
 8018a46:	d503      	bpl.n	8018a50 <__sfp+0x28>
 8018a48:	6833      	ldr	r3, [r6, #0]
 8018a4a:	b30b      	cbz	r3, 8018a90 <__sfp+0x68>
 8018a4c:	6836      	ldr	r6, [r6, #0]
 8018a4e:	e7f7      	b.n	8018a40 <__sfp+0x18>
 8018a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018a54:	b9d5      	cbnz	r5, 8018a8c <__sfp+0x64>
 8018a56:	4b16      	ldr	r3, [pc, #88]	; (8018ab0 <__sfp+0x88>)
 8018a58:	60e3      	str	r3, [r4, #12]
 8018a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8018a60:	f000 f84c 	bl	8018afc <__retarget_lock_init_recursive>
 8018a64:	f7ff ff96 	bl	8018994 <__sfp_lock_release>
 8018a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018a70:	6025      	str	r5, [r4, #0]
 8018a72:	61a5      	str	r5, [r4, #24]
 8018a74:	2208      	movs	r2, #8
 8018a76:	4629      	mov	r1, r5
 8018a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018a7c:	f7fe f90e 	bl	8016c9c <memset>
 8018a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018a88:	4620      	mov	r0, r4
 8018a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a8c:	3468      	adds	r4, #104	; 0x68
 8018a8e:	e7d9      	b.n	8018a44 <__sfp+0x1c>
 8018a90:	2104      	movs	r1, #4
 8018a92:	4638      	mov	r0, r7
 8018a94:	f7ff ff62 	bl	801895c <__sfmoreglue>
 8018a98:	4604      	mov	r4, r0
 8018a9a:	6030      	str	r0, [r6, #0]
 8018a9c:	2800      	cmp	r0, #0
 8018a9e:	d1d5      	bne.n	8018a4c <__sfp+0x24>
 8018aa0:	f7ff ff78 	bl	8018994 <__sfp_lock_release>
 8018aa4:	230c      	movs	r3, #12
 8018aa6:	603b      	str	r3, [r7, #0]
 8018aa8:	e7ee      	b.n	8018a88 <__sfp+0x60>
 8018aaa:	bf00      	nop
 8018aac:	0801aaf8 	.word	0x0801aaf8
 8018ab0:	ffff0001 	.word	0xffff0001

08018ab4 <_fwalk_reent>:
 8018ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ab8:	4606      	mov	r6, r0
 8018aba:	4688      	mov	r8, r1
 8018abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018ac0:	2700      	movs	r7, #0
 8018ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8018aca:	d505      	bpl.n	8018ad8 <_fwalk_reent+0x24>
 8018acc:	6824      	ldr	r4, [r4, #0]
 8018ace:	2c00      	cmp	r4, #0
 8018ad0:	d1f7      	bne.n	8018ac2 <_fwalk_reent+0xe>
 8018ad2:	4638      	mov	r0, r7
 8018ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ad8:	89ab      	ldrh	r3, [r5, #12]
 8018ada:	2b01      	cmp	r3, #1
 8018adc:	d907      	bls.n	8018aee <_fwalk_reent+0x3a>
 8018ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	d003      	beq.n	8018aee <_fwalk_reent+0x3a>
 8018ae6:	4629      	mov	r1, r5
 8018ae8:	4630      	mov	r0, r6
 8018aea:	47c0      	blx	r8
 8018aec:	4307      	orrs	r7, r0
 8018aee:	3568      	adds	r5, #104	; 0x68
 8018af0:	e7e9      	b.n	8018ac6 <_fwalk_reent+0x12>
	...

08018af4 <_localeconv_r>:
 8018af4:	4800      	ldr	r0, [pc, #0]	; (8018af8 <_localeconv_r+0x4>)
 8018af6:	4770      	bx	lr
 8018af8:	200007b0 	.word	0x200007b0

08018afc <__retarget_lock_init_recursive>:
 8018afc:	4770      	bx	lr

08018afe <__retarget_lock_acquire_recursive>:
 8018afe:	4770      	bx	lr

08018b00 <__retarget_lock_release_recursive>:
 8018b00:	4770      	bx	lr

08018b02 <__swhatbuf_r>:
 8018b02:	b570      	push	{r4, r5, r6, lr}
 8018b04:	460e      	mov	r6, r1
 8018b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b0a:	2900      	cmp	r1, #0
 8018b0c:	b096      	sub	sp, #88	; 0x58
 8018b0e:	4614      	mov	r4, r2
 8018b10:	461d      	mov	r5, r3
 8018b12:	da08      	bge.n	8018b26 <__swhatbuf_r+0x24>
 8018b14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	602a      	str	r2, [r5, #0]
 8018b1c:	061a      	lsls	r2, r3, #24
 8018b1e:	d410      	bmi.n	8018b42 <__swhatbuf_r+0x40>
 8018b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b24:	e00e      	b.n	8018b44 <__swhatbuf_r+0x42>
 8018b26:	466a      	mov	r2, sp
 8018b28:	f000 ff38 	bl	801999c <_fstat_r>
 8018b2c:	2800      	cmp	r0, #0
 8018b2e:	dbf1      	blt.n	8018b14 <__swhatbuf_r+0x12>
 8018b30:	9a01      	ldr	r2, [sp, #4]
 8018b32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018b36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018b3a:	425a      	negs	r2, r3
 8018b3c:	415a      	adcs	r2, r3
 8018b3e:	602a      	str	r2, [r5, #0]
 8018b40:	e7ee      	b.n	8018b20 <__swhatbuf_r+0x1e>
 8018b42:	2340      	movs	r3, #64	; 0x40
 8018b44:	2000      	movs	r0, #0
 8018b46:	6023      	str	r3, [r4, #0]
 8018b48:	b016      	add	sp, #88	; 0x58
 8018b4a:	bd70      	pop	{r4, r5, r6, pc}

08018b4c <__smakebuf_r>:
 8018b4c:	898b      	ldrh	r3, [r1, #12]
 8018b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018b50:	079d      	lsls	r5, r3, #30
 8018b52:	4606      	mov	r6, r0
 8018b54:	460c      	mov	r4, r1
 8018b56:	d507      	bpl.n	8018b68 <__smakebuf_r+0x1c>
 8018b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018b5c:	6023      	str	r3, [r4, #0]
 8018b5e:	6123      	str	r3, [r4, #16]
 8018b60:	2301      	movs	r3, #1
 8018b62:	6163      	str	r3, [r4, #20]
 8018b64:	b002      	add	sp, #8
 8018b66:	bd70      	pop	{r4, r5, r6, pc}
 8018b68:	ab01      	add	r3, sp, #4
 8018b6a:	466a      	mov	r2, sp
 8018b6c:	f7ff ffc9 	bl	8018b02 <__swhatbuf_r>
 8018b70:	9900      	ldr	r1, [sp, #0]
 8018b72:	4605      	mov	r5, r0
 8018b74:	4630      	mov	r0, r6
 8018b76:	f7fe f903 	bl	8016d80 <_malloc_r>
 8018b7a:	b948      	cbnz	r0, 8018b90 <__smakebuf_r+0x44>
 8018b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b80:	059a      	lsls	r2, r3, #22
 8018b82:	d4ef      	bmi.n	8018b64 <__smakebuf_r+0x18>
 8018b84:	f023 0303 	bic.w	r3, r3, #3
 8018b88:	f043 0302 	orr.w	r3, r3, #2
 8018b8c:	81a3      	strh	r3, [r4, #12]
 8018b8e:	e7e3      	b.n	8018b58 <__smakebuf_r+0xc>
 8018b90:	4b0d      	ldr	r3, [pc, #52]	; (8018bc8 <__smakebuf_r+0x7c>)
 8018b92:	62b3      	str	r3, [r6, #40]	; 0x28
 8018b94:	89a3      	ldrh	r3, [r4, #12]
 8018b96:	6020      	str	r0, [r4, #0]
 8018b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b9c:	81a3      	strh	r3, [r4, #12]
 8018b9e:	9b00      	ldr	r3, [sp, #0]
 8018ba0:	6163      	str	r3, [r4, #20]
 8018ba2:	9b01      	ldr	r3, [sp, #4]
 8018ba4:	6120      	str	r0, [r4, #16]
 8018ba6:	b15b      	cbz	r3, 8018bc0 <__smakebuf_r+0x74>
 8018ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018bac:	4630      	mov	r0, r6
 8018bae:	f000 ff07 	bl	80199c0 <_isatty_r>
 8018bb2:	b128      	cbz	r0, 8018bc0 <__smakebuf_r+0x74>
 8018bb4:	89a3      	ldrh	r3, [r4, #12]
 8018bb6:	f023 0303 	bic.w	r3, r3, #3
 8018bba:	f043 0301 	orr.w	r3, r3, #1
 8018bbe:	81a3      	strh	r3, [r4, #12]
 8018bc0:	89a0      	ldrh	r0, [r4, #12]
 8018bc2:	4305      	orrs	r5, r0
 8018bc4:	81a5      	strh	r5, [r4, #12]
 8018bc6:	e7cd      	b.n	8018b64 <__smakebuf_r+0x18>
 8018bc8:	08018951 	.word	0x08018951

08018bcc <__malloc_lock>:
 8018bcc:	4801      	ldr	r0, [pc, #4]	; (8018bd4 <__malloc_lock+0x8>)
 8018bce:	f7ff bf96 	b.w	8018afe <__retarget_lock_acquire_recursive>
 8018bd2:	bf00      	nop
 8018bd4:	20006ec4 	.word	0x20006ec4

08018bd8 <__malloc_unlock>:
 8018bd8:	4801      	ldr	r0, [pc, #4]	; (8018be0 <__malloc_unlock+0x8>)
 8018bda:	f7ff bf91 	b.w	8018b00 <__retarget_lock_release_recursive>
 8018bde:	bf00      	nop
 8018be0:	20006ec4 	.word	0x20006ec4

08018be4 <_Balloc>:
 8018be4:	b570      	push	{r4, r5, r6, lr}
 8018be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018be8:	4604      	mov	r4, r0
 8018bea:	460d      	mov	r5, r1
 8018bec:	b976      	cbnz	r6, 8018c0c <_Balloc+0x28>
 8018bee:	2010      	movs	r0, #16
 8018bf0:	f7fe f82e 	bl	8016c50 <malloc>
 8018bf4:	4602      	mov	r2, r0
 8018bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8018bf8:	b920      	cbnz	r0, 8018c04 <_Balloc+0x20>
 8018bfa:	4b18      	ldr	r3, [pc, #96]	; (8018c5c <_Balloc+0x78>)
 8018bfc:	4818      	ldr	r0, [pc, #96]	; (8018c60 <_Balloc+0x7c>)
 8018bfe:	2166      	movs	r1, #102	; 0x66
 8018c00:	f000 fe8c 	bl	801991c <__assert_func>
 8018c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c08:	6006      	str	r6, [r0, #0]
 8018c0a:	60c6      	str	r6, [r0, #12]
 8018c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018c0e:	68f3      	ldr	r3, [r6, #12]
 8018c10:	b183      	cbz	r3, 8018c34 <_Balloc+0x50>
 8018c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c14:	68db      	ldr	r3, [r3, #12]
 8018c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018c1a:	b9b8      	cbnz	r0, 8018c4c <_Balloc+0x68>
 8018c1c:	2101      	movs	r1, #1
 8018c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8018c22:	1d72      	adds	r2, r6, #5
 8018c24:	0092      	lsls	r2, r2, #2
 8018c26:	4620      	mov	r0, r4
 8018c28:	f000 fb5a 	bl	80192e0 <_calloc_r>
 8018c2c:	b160      	cbz	r0, 8018c48 <_Balloc+0x64>
 8018c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018c32:	e00e      	b.n	8018c52 <_Balloc+0x6e>
 8018c34:	2221      	movs	r2, #33	; 0x21
 8018c36:	2104      	movs	r1, #4
 8018c38:	4620      	mov	r0, r4
 8018c3a:	f000 fb51 	bl	80192e0 <_calloc_r>
 8018c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c40:	60f0      	str	r0, [r6, #12]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d1e4      	bne.n	8018c12 <_Balloc+0x2e>
 8018c48:	2000      	movs	r0, #0
 8018c4a:	bd70      	pop	{r4, r5, r6, pc}
 8018c4c:	6802      	ldr	r2, [r0, #0]
 8018c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c52:	2300      	movs	r3, #0
 8018c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c58:	e7f7      	b.n	8018c4a <_Balloc+0x66>
 8018c5a:	bf00      	nop
 8018c5c:	0801ab3d 	.word	0x0801ab3d
 8018c60:	0801ac20 	.word	0x0801ac20

08018c64 <_Bfree>:
 8018c64:	b570      	push	{r4, r5, r6, lr}
 8018c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018c68:	4605      	mov	r5, r0
 8018c6a:	460c      	mov	r4, r1
 8018c6c:	b976      	cbnz	r6, 8018c8c <_Bfree+0x28>
 8018c6e:	2010      	movs	r0, #16
 8018c70:	f7fd ffee 	bl	8016c50 <malloc>
 8018c74:	4602      	mov	r2, r0
 8018c76:	6268      	str	r0, [r5, #36]	; 0x24
 8018c78:	b920      	cbnz	r0, 8018c84 <_Bfree+0x20>
 8018c7a:	4b09      	ldr	r3, [pc, #36]	; (8018ca0 <_Bfree+0x3c>)
 8018c7c:	4809      	ldr	r0, [pc, #36]	; (8018ca4 <_Bfree+0x40>)
 8018c7e:	218a      	movs	r1, #138	; 0x8a
 8018c80:	f000 fe4c 	bl	801991c <__assert_func>
 8018c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c88:	6006      	str	r6, [r0, #0]
 8018c8a:	60c6      	str	r6, [r0, #12]
 8018c8c:	b13c      	cbz	r4, 8018c9e <_Bfree+0x3a>
 8018c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018c90:	6862      	ldr	r2, [r4, #4]
 8018c92:	68db      	ldr	r3, [r3, #12]
 8018c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018c98:	6021      	str	r1, [r4, #0]
 8018c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018c9e:	bd70      	pop	{r4, r5, r6, pc}
 8018ca0:	0801ab3d 	.word	0x0801ab3d
 8018ca4:	0801ac20 	.word	0x0801ac20

08018ca8 <__multadd>:
 8018ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cac:	690d      	ldr	r5, [r1, #16]
 8018cae:	4607      	mov	r7, r0
 8018cb0:	460c      	mov	r4, r1
 8018cb2:	461e      	mov	r6, r3
 8018cb4:	f101 0c14 	add.w	ip, r1, #20
 8018cb8:	2000      	movs	r0, #0
 8018cba:	f8dc 3000 	ldr.w	r3, [ip]
 8018cbe:	b299      	uxth	r1, r3
 8018cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8018cc4:	0c1e      	lsrs	r6, r3, #16
 8018cc6:	0c0b      	lsrs	r3, r1, #16
 8018cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8018ccc:	b289      	uxth	r1, r1
 8018cce:	3001      	adds	r0, #1
 8018cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018cd4:	4285      	cmp	r5, r0
 8018cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8018cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018cde:	dcec      	bgt.n	8018cba <__multadd+0x12>
 8018ce0:	b30e      	cbz	r6, 8018d26 <__multadd+0x7e>
 8018ce2:	68a3      	ldr	r3, [r4, #8]
 8018ce4:	42ab      	cmp	r3, r5
 8018ce6:	dc19      	bgt.n	8018d1c <__multadd+0x74>
 8018ce8:	6861      	ldr	r1, [r4, #4]
 8018cea:	4638      	mov	r0, r7
 8018cec:	3101      	adds	r1, #1
 8018cee:	f7ff ff79 	bl	8018be4 <_Balloc>
 8018cf2:	4680      	mov	r8, r0
 8018cf4:	b928      	cbnz	r0, 8018d02 <__multadd+0x5a>
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	4b0c      	ldr	r3, [pc, #48]	; (8018d2c <__multadd+0x84>)
 8018cfa:	480d      	ldr	r0, [pc, #52]	; (8018d30 <__multadd+0x88>)
 8018cfc:	21b5      	movs	r1, #181	; 0xb5
 8018cfe:	f000 fe0d 	bl	801991c <__assert_func>
 8018d02:	6922      	ldr	r2, [r4, #16]
 8018d04:	3202      	adds	r2, #2
 8018d06:	f104 010c 	add.w	r1, r4, #12
 8018d0a:	0092      	lsls	r2, r2, #2
 8018d0c:	300c      	adds	r0, #12
 8018d0e:	f7fd ffb7 	bl	8016c80 <memcpy>
 8018d12:	4621      	mov	r1, r4
 8018d14:	4638      	mov	r0, r7
 8018d16:	f7ff ffa5 	bl	8018c64 <_Bfree>
 8018d1a:	4644      	mov	r4, r8
 8018d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018d20:	3501      	adds	r5, #1
 8018d22:	615e      	str	r6, [r3, #20]
 8018d24:	6125      	str	r5, [r4, #16]
 8018d26:	4620      	mov	r0, r4
 8018d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2c:	0801abaf 	.word	0x0801abaf
 8018d30:	0801ac20 	.word	0x0801ac20

08018d34 <__hi0bits>:
 8018d34:	0c02      	lsrs	r2, r0, #16
 8018d36:	0412      	lsls	r2, r2, #16
 8018d38:	4603      	mov	r3, r0
 8018d3a:	b9ca      	cbnz	r2, 8018d70 <__hi0bits+0x3c>
 8018d3c:	0403      	lsls	r3, r0, #16
 8018d3e:	2010      	movs	r0, #16
 8018d40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018d44:	bf04      	itt	eq
 8018d46:	021b      	lsleq	r3, r3, #8
 8018d48:	3008      	addeq	r0, #8
 8018d4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018d4e:	bf04      	itt	eq
 8018d50:	011b      	lsleq	r3, r3, #4
 8018d52:	3004      	addeq	r0, #4
 8018d54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018d58:	bf04      	itt	eq
 8018d5a:	009b      	lsleq	r3, r3, #2
 8018d5c:	3002      	addeq	r0, #2
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	db05      	blt.n	8018d6e <__hi0bits+0x3a>
 8018d62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8018d66:	f100 0001 	add.w	r0, r0, #1
 8018d6a:	bf08      	it	eq
 8018d6c:	2020      	moveq	r0, #32
 8018d6e:	4770      	bx	lr
 8018d70:	2000      	movs	r0, #0
 8018d72:	e7e5      	b.n	8018d40 <__hi0bits+0xc>

08018d74 <__lo0bits>:
 8018d74:	6803      	ldr	r3, [r0, #0]
 8018d76:	4602      	mov	r2, r0
 8018d78:	f013 0007 	ands.w	r0, r3, #7
 8018d7c:	d00b      	beq.n	8018d96 <__lo0bits+0x22>
 8018d7e:	07d9      	lsls	r1, r3, #31
 8018d80:	d421      	bmi.n	8018dc6 <__lo0bits+0x52>
 8018d82:	0798      	lsls	r0, r3, #30
 8018d84:	bf49      	itett	mi
 8018d86:	085b      	lsrmi	r3, r3, #1
 8018d88:	089b      	lsrpl	r3, r3, #2
 8018d8a:	2001      	movmi	r0, #1
 8018d8c:	6013      	strmi	r3, [r2, #0]
 8018d8e:	bf5c      	itt	pl
 8018d90:	6013      	strpl	r3, [r2, #0]
 8018d92:	2002      	movpl	r0, #2
 8018d94:	4770      	bx	lr
 8018d96:	b299      	uxth	r1, r3
 8018d98:	b909      	cbnz	r1, 8018d9e <__lo0bits+0x2a>
 8018d9a:	0c1b      	lsrs	r3, r3, #16
 8018d9c:	2010      	movs	r0, #16
 8018d9e:	b2d9      	uxtb	r1, r3
 8018da0:	b909      	cbnz	r1, 8018da6 <__lo0bits+0x32>
 8018da2:	3008      	adds	r0, #8
 8018da4:	0a1b      	lsrs	r3, r3, #8
 8018da6:	0719      	lsls	r1, r3, #28
 8018da8:	bf04      	itt	eq
 8018daa:	091b      	lsreq	r3, r3, #4
 8018dac:	3004      	addeq	r0, #4
 8018dae:	0799      	lsls	r1, r3, #30
 8018db0:	bf04      	itt	eq
 8018db2:	089b      	lsreq	r3, r3, #2
 8018db4:	3002      	addeq	r0, #2
 8018db6:	07d9      	lsls	r1, r3, #31
 8018db8:	d403      	bmi.n	8018dc2 <__lo0bits+0x4e>
 8018dba:	085b      	lsrs	r3, r3, #1
 8018dbc:	f100 0001 	add.w	r0, r0, #1
 8018dc0:	d003      	beq.n	8018dca <__lo0bits+0x56>
 8018dc2:	6013      	str	r3, [r2, #0]
 8018dc4:	4770      	bx	lr
 8018dc6:	2000      	movs	r0, #0
 8018dc8:	4770      	bx	lr
 8018dca:	2020      	movs	r0, #32
 8018dcc:	4770      	bx	lr
	...

08018dd0 <__i2b>:
 8018dd0:	b510      	push	{r4, lr}
 8018dd2:	460c      	mov	r4, r1
 8018dd4:	2101      	movs	r1, #1
 8018dd6:	f7ff ff05 	bl	8018be4 <_Balloc>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	b928      	cbnz	r0, 8018dea <__i2b+0x1a>
 8018dde:	4b05      	ldr	r3, [pc, #20]	; (8018df4 <__i2b+0x24>)
 8018de0:	4805      	ldr	r0, [pc, #20]	; (8018df8 <__i2b+0x28>)
 8018de2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018de6:	f000 fd99 	bl	801991c <__assert_func>
 8018dea:	2301      	movs	r3, #1
 8018dec:	6144      	str	r4, [r0, #20]
 8018dee:	6103      	str	r3, [r0, #16]
 8018df0:	bd10      	pop	{r4, pc}
 8018df2:	bf00      	nop
 8018df4:	0801abaf 	.word	0x0801abaf
 8018df8:	0801ac20 	.word	0x0801ac20

08018dfc <__multiply>:
 8018dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e00:	4691      	mov	r9, r2
 8018e02:	690a      	ldr	r2, [r1, #16]
 8018e04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	bfb8      	it	lt
 8018e0c:	460b      	movlt	r3, r1
 8018e0e:	460c      	mov	r4, r1
 8018e10:	bfbc      	itt	lt
 8018e12:	464c      	movlt	r4, r9
 8018e14:	4699      	movlt	r9, r3
 8018e16:	6927      	ldr	r7, [r4, #16]
 8018e18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018e1c:	68a3      	ldr	r3, [r4, #8]
 8018e1e:	6861      	ldr	r1, [r4, #4]
 8018e20:	eb07 060a 	add.w	r6, r7, sl
 8018e24:	42b3      	cmp	r3, r6
 8018e26:	b085      	sub	sp, #20
 8018e28:	bfb8      	it	lt
 8018e2a:	3101      	addlt	r1, #1
 8018e2c:	f7ff feda 	bl	8018be4 <_Balloc>
 8018e30:	b930      	cbnz	r0, 8018e40 <__multiply+0x44>
 8018e32:	4602      	mov	r2, r0
 8018e34:	4b43      	ldr	r3, [pc, #268]	; (8018f44 <__multiply+0x148>)
 8018e36:	4844      	ldr	r0, [pc, #272]	; (8018f48 <__multiply+0x14c>)
 8018e38:	f240 115d 	movw	r1, #349	; 0x15d
 8018e3c:	f000 fd6e 	bl	801991c <__assert_func>
 8018e40:	f100 0514 	add.w	r5, r0, #20
 8018e44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018e48:	462b      	mov	r3, r5
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	4543      	cmp	r3, r8
 8018e4e:	d321      	bcc.n	8018e94 <__multiply+0x98>
 8018e50:	f104 0314 	add.w	r3, r4, #20
 8018e54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018e58:	f109 0314 	add.w	r3, r9, #20
 8018e5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018e60:	9202      	str	r2, [sp, #8]
 8018e62:	1b3a      	subs	r2, r7, r4
 8018e64:	3a15      	subs	r2, #21
 8018e66:	f022 0203 	bic.w	r2, r2, #3
 8018e6a:	3204      	adds	r2, #4
 8018e6c:	f104 0115 	add.w	r1, r4, #21
 8018e70:	428f      	cmp	r7, r1
 8018e72:	bf38      	it	cc
 8018e74:	2204      	movcc	r2, #4
 8018e76:	9201      	str	r2, [sp, #4]
 8018e78:	9a02      	ldr	r2, [sp, #8]
 8018e7a:	9303      	str	r3, [sp, #12]
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	d80c      	bhi.n	8018e9a <__multiply+0x9e>
 8018e80:	2e00      	cmp	r6, #0
 8018e82:	dd03      	ble.n	8018e8c <__multiply+0x90>
 8018e84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d059      	beq.n	8018f40 <__multiply+0x144>
 8018e8c:	6106      	str	r6, [r0, #16]
 8018e8e:	b005      	add	sp, #20
 8018e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e94:	f843 2b04 	str.w	r2, [r3], #4
 8018e98:	e7d8      	b.n	8018e4c <__multiply+0x50>
 8018e9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8018e9e:	f1ba 0f00 	cmp.w	sl, #0
 8018ea2:	d023      	beq.n	8018eec <__multiply+0xf0>
 8018ea4:	f104 0e14 	add.w	lr, r4, #20
 8018ea8:	46a9      	mov	r9, r5
 8018eaa:	f04f 0c00 	mov.w	ip, #0
 8018eae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018eb2:	f8d9 1000 	ldr.w	r1, [r9]
 8018eb6:	fa1f fb82 	uxth.w	fp, r2
 8018eba:	b289      	uxth	r1, r1
 8018ebc:	fb0a 110b 	mla	r1, sl, fp, r1
 8018ec0:	4461      	add	r1, ip
 8018ec2:	f8d9 c000 	ldr.w	ip, [r9]
 8018ec6:	0c12      	lsrs	r2, r2, #16
 8018ec8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018ecc:	fb0a c202 	mla	r2, sl, r2, ip
 8018ed0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018ed4:	b289      	uxth	r1, r1
 8018ed6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018eda:	4577      	cmp	r7, lr
 8018edc:	f849 1b04 	str.w	r1, [r9], #4
 8018ee0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018ee4:	d8e3      	bhi.n	8018eae <__multiply+0xb2>
 8018ee6:	9a01      	ldr	r2, [sp, #4]
 8018ee8:	f845 c002 	str.w	ip, [r5, r2]
 8018eec:	9a03      	ldr	r2, [sp, #12]
 8018eee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018ef2:	3304      	adds	r3, #4
 8018ef4:	f1b9 0f00 	cmp.w	r9, #0
 8018ef8:	d020      	beq.n	8018f3c <__multiply+0x140>
 8018efa:	6829      	ldr	r1, [r5, #0]
 8018efc:	f104 0c14 	add.w	ip, r4, #20
 8018f00:	46ae      	mov	lr, r5
 8018f02:	f04f 0a00 	mov.w	sl, #0
 8018f06:	f8bc b000 	ldrh.w	fp, [ip]
 8018f0a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018f0e:	fb09 220b 	mla	r2, r9, fp, r2
 8018f12:	4492      	add	sl, r2
 8018f14:	b289      	uxth	r1, r1
 8018f16:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018f1a:	f84e 1b04 	str.w	r1, [lr], #4
 8018f1e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018f22:	f8be 1000 	ldrh.w	r1, [lr]
 8018f26:	0c12      	lsrs	r2, r2, #16
 8018f28:	fb09 1102 	mla	r1, r9, r2, r1
 8018f2c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8018f30:	4567      	cmp	r7, ip
 8018f32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018f36:	d8e6      	bhi.n	8018f06 <__multiply+0x10a>
 8018f38:	9a01      	ldr	r2, [sp, #4]
 8018f3a:	50a9      	str	r1, [r5, r2]
 8018f3c:	3504      	adds	r5, #4
 8018f3e:	e79b      	b.n	8018e78 <__multiply+0x7c>
 8018f40:	3e01      	subs	r6, #1
 8018f42:	e79d      	b.n	8018e80 <__multiply+0x84>
 8018f44:	0801abaf 	.word	0x0801abaf
 8018f48:	0801ac20 	.word	0x0801ac20

08018f4c <__pow5mult>:
 8018f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f50:	4615      	mov	r5, r2
 8018f52:	f012 0203 	ands.w	r2, r2, #3
 8018f56:	4606      	mov	r6, r0
 8018f58:	460f      	mov	r7, r1
 8018f5a:	d007      	beq.n	8018f6c <__pow5mult+0x20>
 8018f5c:	4c25      	ldr	r4, [pc, #148]	; (8018ff4 <__pow5mult+0xa8>)
 8018f5e:	3a01      	subs	r2, #1
 8018f60:	2300      	movs	r3, #0
 8018f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f66:	f7ff fe9f 	bl	8018ca8 <__multadd>
 8018f6a:	4607      	mov	r7, r0
 8018f6c:	10ad      	asrs	r5, r5, #2
 8018f6e:	d03d      	beq.n	8018fec <__pow5mult+0xa0>
 8018f70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018f72:	b97c      	cbnz	r4, 8018f94 <__pow5mult+0x48>
 8018f74:	2010      	movs	r0, #16
 8018f76:	f7fd fe6b 	bl	8016c50 <malloc>
 8018f7a:	4602      	mov	r2, r0
 8018f7c:	6270      	str	r0, [r6, #36]	; 0x24
 8018f7e:	b928      	cbnz	r0, 8018f8c <__pow5mult+0x40>
 8018f80:	4b1d      	ldr	r3, [pc, #116]	; (8018ff8 <__pow5mult+0xac>)
 8018f82:	481e      	ldr	r0, [pc, #120]	; (8018ffc <__pow5mult+0xb0>)
 8018f84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018f88:	f000 fcc8 	bl	801991c <__assert_func>
 8018f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f90:	6004      	str	r4, [r0, #0]
 8018f92:	60c4      	str	r4, [r0, #12]
 8018f94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018f9c:	b94c      	cbnz	r4, 8018fb2 <__pow5mult+0x66>
 8018f9e:	f240 2171 	movw	r1, #625	; 0x271
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	f7ff ff14 	bl	8018dd0 <__i2b>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8018fae:	4604      	mov	r4, r0
 8018fb0:	6003      	str	r3, [r0, #0]
 8018fb2:	f04f 0900 	mov.w	r9, #0
 8018fb6:	07eb      	lsls	r3, r5, #31
 8018fb8:	d50a      	bpl.n	8018fd0 <__pow5mult+0x84>
 8018fba:	4639      	mov	r1, r7
 8018fbc:	4622      	mov	r2, r4
 8018fbe:	4630      	mov	r0, r6
 8018fc0:	f7ff ff1c 	bl	8018dfc <__multiply>
 8018fc4:	4639      	mov	r1, r7
 8018fc6:	4680      	mov	r8, r0
 8018fc8:	4630      	mov	r0, r6
 8018fca:	f7ff fe4b 	bl	8018c64 <_Bfree>
 8018fce:	4647      	mov	r7, r8
 8018fd0:	106d      	asrs	r5, r5, #1
 8018fd2:	d00b      	beq.n	8018fec <__pow5mult+0xa0>
 8018fd4:	6820      	ldr	r0, [r4, #0]
 8018fd6:	b938      	cbnz	r0, 8018fe8 <__pow5mult+0x9c>
 8018fd8:	4622      	mov	r2, r4
 8018fda:	4621      	mov	r1, r4
 8018fdc:	4630      	mov	r0, r6
 8018fde:	f7ff ff0d 	bl	8018dfc <__multiply>
 8018fe2:	6020      	str	r0, [r4, #0]
 8018fe4:	f8c0 9000 	str.w	r9, [r0]
 8018fe8:	4604      	mov	r4, r0
 8018fea:	e7e4      	b.n	8018fb6 <__pow5mult+0x6a>
 8018fec:	4638      	mov	r0, r7
 8018fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ff2:	bf00      	nop
 8018ff4:	0801ad70 	.word	0x0801ad70
 8018ff8:	0801ab3d 	.word	0x0801ab3d
 8018ffc:	0801ac20 	.word	0x0801ac20

08019000 <__lshift>:
 8019000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019004:	460c      	mov	r4, r1
 8019006:	6849      	ldr	r1, [r1, #4]
 8019008:	6923      	ldr	r3, [r4, #16]
 801900a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801900e:	68a3      	ldr	r3, [r4, #8]
 8019010:	4607      	mov	r7, r0
 8019012:	4691      	mov	r9, r2
 8019014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019018:	f108 0601 	add.w	r6, r8, #1
 801901c:	42b3      	cmp	r3, r6
 801901e:	db0b      	blt.n	8019038 <__lshift+0x38>
 8019020:	4638      	mov	r0, r7
 8019022:	f7ff fddf 	bl	8018be4 <_Balloc>
 8019026:	4605      	mov	r5, r0
 8019028:	b948      	cbnz	r0, 801903e <__lshift+0x3e>
 801902a:	4602      	mov	r2, r0
 801902c:	4b2a      	ldr	r3, [pc, #168]	; (80190d8 <__lshift+0xd8>)
 801902e:	482b      	ldr	r0, [pc, #172]	; (80190dc <__lshift+0xdc>)
 8019030:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019034:	f000 fc72 	bl	801991c <__assert_func>
 8019038:	3101      	adds	r1, #1
 801903a:	005b      	lsls	r3, r3, #1
 801903c:	e7ee      	b.n	801901c <__lshift+0x1c>
 801903e:	2300      	movs	r3, #0
 8019040:	f100 0114 	add.w	r1, r0, #20
 8019044:	f100 0210 	add.w	r2, r0, #16
 8019048:	4618      	mov	r0, r3
 801904a:	4553      	cmp	r3, sl
 801904c:	db37      	blt.n	80190be <__lshift+0xbe>
 801904e:	6920      	ldr	r0, [r4, #16]
 8019050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019054:	f104 0314 	add.w	r3, r4, #20
 8019058:	f019 091f 	ands.w	r9, r9, #31
 801905c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019064:	d02f      	beq.n	80190c6 <__lshift+0xc6>
 8019066:	f1c9 0e20 	rsb	lr, r9, #32
 801906a:	468a      	mov	sl, r1
 801906c:	f04f 0c00 	mov.w	ip, #0
 8019070:	681a      	ldr	r2, [r3, #0]
 8019072:	fa02 f209 	lsl.w	r2, r2, r9
 8019076:	ea42 020c 	orr.w	r2, r2, ip
 801907a:	f84a 2b04 	str.w	r2, [sl], #4
 801907e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019082:	4298      	cmp	r0, r3
 8019084:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019088:	d8f2      	bhi.n	8019070 <__lshift+0x70>
 801908a:	1b03      	subs	r3, r0, r4
 801908c:	3b15      	subs	r3, #21
 801908e:	f023 0303 	bic.w	r3, r3, #3
 8019092:	3304      	adds	r3, #4
 8019094:	f104 0215 	add.w	r2, r4, #21
 8019098:	4290      	cmp	r0, r2
 801909a:	bf38      	it	cc
 801909c:	2304      	movcc	r3, #4
 801909e:	f841 c003 	str.w	ip, [r1, r3]
 80190a2:	f1bc 0f00 	cmp.w	ip, #0
 80190a6:	d001      	beq.n	80190ac <__lshift+0xac>
 80190a8:	f108 0602 	add.w	r6, r8, #2
 80190ac:	3e01      	subs	r6, #1
 80190ae:	4638      	mov	r0, r7
 80190b0:	612e      	str	r6, [r5, #16]
 80190b2:	4621      	mov	r1, r4
 80190b4:	f7ff fdd6 	bl	8018c64 <_Bfree>
 80190b8:	4628      	mov	r0, r5
 80190ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190be:	f842 0f04 	str.w	r0, [r2, #4]!
 80190c2:	3301      	adds	r3, #1
 80190c4:	e7c1      	b.n	801904a <__lshift+0x4a>
 80190c6:	3904      	subs	r1, #4
 80190c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80190cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80190d0:	4298      	cmp	r0, r3
 80190d2:	d8f9      	bhi.n	80190c8 <__lshift+0xc8>
 80190d4:	e7ea      	b.n	80190ac <__lshift+0xac>
 80190d6:	bf00      	nop
 80190d8:	0801abaf 	.word	0x0801abaf
 80190dc:	0801ac20 	.word	0x0801ac20

080190e0 <__mcmp>:
 80190e0:	690a      	ldr	r2, [r1, #16]
 80190e2:	4603      	mov	r3, r0
 80190e4:	6900      	ldr	r0, [r0, #16]
 80190e6:	1a80      	subs	r0, r0, r2
 80190e8:	b530      	push	{r4, r5, lr}
 80190ea:	d10d      	bne.n	8019108 <__mcmp+0x28>
 80190ec:	3314      	adds	r3, #20
 80190ee:	3114      	adds	r1, #20
 80190f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80190f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80190f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80190fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019100:	4295      	cmp	r5, r2
 8019102:	d002      	beq.n	801910a <__mcmp+0x2a>
 8019104:	d304      	bcc.n	8019110 <__mcmp+0x30>
 8019106:	2001      	movs	r0, #1
 8019108:	bd30      	pop	{r4, r5, pc}
 801910a:	42a3      	cmp	r3, r4
 801910c:	d3f4      	bcc.n	80190f8 <__mcmp+0x18>
 801910e:	e7fb      	b.n	8019108 <__mcmp+0x28>
 8019110:	f04f 30ff 	mov.w	r0, #4294967295
 8019114:	e7f8      	b.n	8019108 <__mcmp+0x28>
	...

08019118 <__mdiff>:
 8019118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801911c:	460d      	mov	r5, r1
 801911e:	4607      	mov	r7, r0
 8019120:	4611      	mov	r1, r2
 8019122:	4628      	mov	r0, r5
 8019124:	4614      	mov	r4, r2
 8019126:	f7ff ffdb 	bl	80190e0 <__mcmp>
 801912a:	1e06      	subs	r6, r0, #0
 801912c:	d111      	bne.n	8019152 <__mdiff+0x3a>
 801912e:	4631      	mov	r1, r6
 8019130:	4638      	mov	r0, r7
 8019132:	f7ff fd57 	bl	8018be4 <_Balloc>
 8019136:	4602      	mov	r2, r0
 8019138:	b928      	cbnz	r0, 8019146 <__mdiff+0x2e>
 801913a:	4b39      	ldr	r3, [pc, #228]	; (8019220 <__mdiff+0x108>)
 801913c:	f240 2132 	movw	r1, #562	; 0x232
 8019140:	4838      	ldr	r0, [pc, #224]	; (8019224 <__mdiff+0x10c>)
 8019142:	f000 fbeb 	bl	801991c <__assert_func>
 8019146:	2301      	movs	r3, #1
 8019148:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801914c:	4610      	mov	r0, r2
 801914e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019152:	bfa4      	itt	ge
 8019154:	4623      	movge	r3, r4
 8019156:	462c      	movge	r4, r5
 8019158:	4638      	mov	r0, r7
 801915a:	6861      	ldr	r1, [r4, #4]
 801915c:	bfa6      	itte	ge
 801915e:	461d      	movge	r5, r3
 8019160:	2600      	movge	r6, #0
 8019162:	2601      	movlt	r6, #1
 8019164:	f7ff fd3e 	bl	8018be4 <_Balloc>
 8019168:	4602      	mov	r2, r0
 801916a:	b918      	cbnz	r0, 8019174 <__mdiff+0x5c>
 801916c:	4b2c      	ldr	r3, [pc, #176]	; (8019220 <__mdiff+0x108>)
 801916e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019172:	e7e5      	b.n	8019140 <__mdiff+0x28>
 8019174:	6927      	ldr	r7, [r4, #16]
 8019176:	60c6      	str	r6, [r0, #12]
 8019178:	692e      	ldr	r6, [r5, #16]
 801917a:	f104 0014 	add.w	r0, r4, #20
 801917e:	f105 0914 	add.w	r9, r5, #20
 8019182:	f102 0e14 	add.w	lr, r2, #20
 8019186:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801918a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801918e:	3410      	adds	r4, #16
 8019190:	46f2      	mov	sl, lr
 8019192:	2100      	movs	r1, #0
 8019194:	f859 3b04 	ldr.w	r3, [r9], #4
 8019198:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801919c:	fa1f f883 	uxth.w	r8, r3
 80191a0:	fa11 f18b 	uxtah	r1, r1, fp
 80191a4:	0c1b      	lsrs	r3, r3, #16
 80191a6:	eba1 0808 	sub.w	r8, r1, r8
 80191aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80191ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80191b2:	fa1f f888 	uxth.w	r8, r8
 80191b6:	1419      	asrs	r1, r3, #16
 80191b8:	454e      	cmp	r6, r9
 80191ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80191be:	f84a 3b04 	str.w	r3, [sl], #4
 80191c2:	d8e7      	bhi.n	8019194 <__mdiff+0x7c>
 80191c4:	1b73      	subs	r3, r6, r5
 80191c6:	3b15      	subs	r3, #21
 80191c8:	f023 0303 	bic.w	r3, r3, #3
 80191cc:	3304      	adds	r3, #4
 80191ce:	3515      	adds	r5, #21
 80191d0:	42ae      	cmp	r6, r5
 80191d2:	bf38      	it	cc
 80191d4:	2304      	movcc	r3, #4
 80191d6:	4418      	add	r0, r3
 80191d8:	4473      	add	r3, lr
 80191da:	469e      	mov	lr, r3
 80191dc:	4606      	mov	r6, r0
 80191de:	4566      	cmp	r6, ip
 80191e0:	d30e      	bcc.n	8019200 <__mdiff+0xe8>
 80191e2:	f10c 0103 	add.w	r1, ip, #3
 80191e6:	1a09      	subs	r1, r1, r0
 80191e8:	f021 0103 	bic.w	r1, r1, #3
 80191ec:	3803      	subs	r0, #3
 80191ee:	4584      	cmp	ip, r0
 80191f0:	bf38      	it	cc
 80191f2:	2100      	movcc	r1, #0
 80191f4:	4419      	add	r1, r3
 80191f6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80191fa:	b17b      	cbz	r3, 801921c <__mdiff+0x104>
 80191fc:	6117      	str	r7, [r2, #16]
 80191fe:	e7a5      	b.n	801914c <__mdiff+0x34>
 8019200:	f856 8b04 	ldr.w	r8, [r6], #4
 8019204:	fa11 f488 	uxtah	r4, r1, r8
 8019208:	1425      	asrs	r5, r4, #16
 801920a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801920e:	b2a4      	uxth	r4, r4
 8019210:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8019214:	f84e 4b04 	str.w	r4, [lr], #4
 8019218:	1429      	asrs	r1, r5, #16
 801921a:	e7e0      	b.n	80191de <__mdiff+0xc6>
 801921c:	3f01      	subs	r7, #1
 801921e:	e7ea      	b.n	80191f6 <__mdiff+0xde>
 8019220:	0801abaf 	.word	0x0801abaf
 8019224:	0801ac20 	.word	0x0801ac20

08019228 <__d2b>:
 8019228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801922c:	2101      	movs	r1, #1
 801922e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8019232:	4690      	mov	r8, r2
 8019234:	461d      	mov	r5, r3
 8019236:	f7ff fcd5 	bl	8018be4 <_Balloc>
 801923a:	4604      	mov	r4, r0
 801923c:	b930      	cbnz	r0, 801924c <__d2b+0x24>
 801923e:	4602      	mov	r2, r0
 8019240:	4b25      	ldr	r3, [pc, #148]	; (80192d8 <__d2b+0xb0>)
 8019242:	4826      	ldr	r0, [pc, #152]	; (80192dc <__d2b+0xb4>)
 8019244:	f240 310a 	movw	r1, #778	; 0x30a
 8019248:	f000 fb68 	bl	801991c <__assert_func>
 801924c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8019250:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8019254:	bb2d      	cbnz	r5, 80192a2 <__d2b+0x7a>
 8019256:	9301      	str	r3, [sp, #4]
 8019258:	f1b8 0300 	subs.w	r3, r8, #0
 801925c:	d026      	beq.n	80192ac <__d2b+0x84>
 801925e:	4668      	mov	r0, sp
 8019260:	9300      	str	r3, [sp, #0]
 8019262:	f7ff fd87 	bl	8018d74 <__lo0bits>
 8019266:	9900      	ldr	r1, [sp, #0]
 8019268:	b1f0      	cbz	r0, 80192a8 <__d2b+0x80>
 801926a:	9a01      	ldr	r2, [sp, #4]
 801926c:	f1c0 0320 	rsb	r3, r0, #32
 8019270:	fa02 f303 	lsl.w	r3, r2, r3
 8019274:	430b      	orrs	r3, r1
 8019276:	40c2      	lsrs	r2, r0
 8019278:	6163      	str	r3, [r4, #20]
 801927a:	9201      	str	r2, [sp, #4]
 801927c:	9b01      	ldr	r3, [sp, #4]
 801927e:	61a3      	str	r3, [r4, #24]
 8019280:	2b00      	cmp	r3, #0
 8019282:	bf14      	ite	ne
 8019284:	2102      	movne	r1, #2
 8019286:	2101      	moveq	r1, #1
 8019288:	6121      	str	r1, [r4, #16]
 801928a:	b1c5      	cbz	r5, 80192be <__d2b+0x96>
 801928c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019290:	4405      	add	r5, r0
 8019292:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019296:	603d      	str	r5, [r7, #0]
 8019298:	6030      	str	r0, [r6, #0]
 801929a:	4620      	mov	r0, r4
 801929c:	b002      	add	sp, #8
 801929e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80192a6:	e7d6      	b.n	8019256 <__d2b+0x2e>
 80192a8:	6161      	str	r1, [r4, #20]
 80192aa:	e7e7      	b.n	801927c <__d2b+0x54>
 80192ac:	a801      	add	r0, sp, #4
 80192ae:	f7ff fd61 	bl	8018d74 <__lo0bits>
 80192b2:	9b01      	ldr	r3, [sp, #4]
 80192b4:	6163      	str	r3, [r4, #20]
 80192b6:	2101      	movs	r1, #1
 80192b8:	6121      	str	r1, [r4, #16]
 80192ba:	3020      	adds	r0, #32
 80192bc:	e7e5      	b.n	801928a <__d2b+0x62>
 80192be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80192c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80192c6:	6038      	str	r0, [r7, #0]
 80192c8:	6918      	ldr	r0, [r3, #16]
 80192ca:	f7ff fd33 	bl	8018d34 <__hi0bits>
 80192ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80192d2:	6031      	str	r1, [r6, #0]
 80192d4:	e7e1      	b.n	801929a <__d2b+0x72>
 80192d6:	bf00      	nop
 80192d8:	0801abaf 	.word	0x0801abaf
 80192dc:	0801ac20 	.word	0x0801ac20

080192e0 <_calloc_r>:
 80192e0:	b570      	push	{r4, r5, r6, lr}
 80192e2:	fba1 5402 	umull	r5, r4, r1, r2
 80192e6:	b934      	cbnz	r4, 80192f6 <_calloc_r+0x16>
 80192e8:	4629      	mov	r1, r5
 80192ea:	f7fd fd49 	bl	8016d80 <_malloc_r>
 80192ee:	4606      	mov	r6, r0
 80192f0:	b928      	cbnz	r0, 80192fe <_calloc_r+0x1e>
 80192f2:	4630      	mov	r0, r6
 80192f4:	bd70      	pop	{r4, r5, r6, pc}
 80192f6:	220c      	movs	r2, #12
 80192f8:	6002      	str	r2, [r0, #0]
 80192fa:	2600      	movs	r6, #0
 80192fc:	e7f9      	b.n	80192f2 <_calloc_r+0x12>
 80192fe:	462a      	mov	r2, r5
 8019300:	4621      	mov	r1, r4
 8019302:	f7fd fccb 	bl	8016c9c <memset>
 8019306:	e7f4      	b.n	80192f2 <_calloc_r+0x12>

08019308 <__ssputs_r>:
 8019308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801930c:	688e      	ldr	r6, [r1, #8]
 801930e:	429e      	cmp	r6, r3
 8019310:	4682      	mov	sl, r0
 8019312:	460c      	mov	r4, r1
 8019314:	4690      	mov	r8, r2
 8019316:	461f      	mov	r7, r3
 8019318:	d838      	bhi.n	801938c <__ssputs_r+0x84>
 801931a:	898a      	ldrh	r2, [r1, #12]
 801931c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019320:	d032      	beq.n	8019388 <__ssputs_r+0x80>
 8019322:	6825      	ldr	r5, [r4, #0]
 8019324:	6909      	ldr	r1, [r1, #16]
 8019326:	eba5 0901 	sub.w	r9, r5, r1
 801932a:	6965      	ldr	r5, [r4, #20]
 801932c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019334:	3301      	adds	r3, #1
 8019336:	444b      	add	r3, r9
 8019338:	106d      	asrs	r5, r5, #1
 801933a:	429d      	cmp	r5, r3
 801933c:	bf38      	it	cc
 801933e:	461d      	movcc	r5, r3
 8019340:	0553      	lsls	r3, r2, #21
 8019342:	d531      	bpl.n	80193a8 <__ssputs_r+0xa0>
 8019344:	4629      	mov	r1, r5
 8019346:	f7fd fd1b 	bl	8016d80 <_malloc_r>
 801934a:	4606      	mov	r6, r0
 801934c:	b950      	cbnz	r0, 8019364 <__ssputs_r+0x5c>
 801934e:	230c      	movs	r3, #12
 8019350:	f8ca 3000 	str.w	r3, [sl]
 8019354:	89a3      	ldrh	r3, [r4, #12]
 8019356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801935a:	81a3      	strh	r3, [r4, #12]
 801935c:	f04f 30ff 	mov.w	r0, #4294967295
 8019360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019364:	6921      	ldr	r1, [r4, #16]
 8019366:	464a      	mov	r2, r9
 8019368:	f7fd fc8a 	bl	8016c80 <memcpy>
 801936c:	89a3      	ldrh	r3, [r4, #12]
 801936e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019376:	81a3      	strh	r3, [r4, #12]
 8019378:	6126      	str	r6, [r4, #16]
 801937a:	6165      	str	r5, [r4, #20]
 801937c:	444e      	add	r6, r9
 801937e:	eba5 0509 	sub.w	r5, r5, r9
 8019382:	6026      	str	r6, [r4, #0]
 8019384:	60a5      	str	r5, [r4, #8]
 8019386:	463e      	mov	r6, r7
 8019388:	42be      	cmp	r6, r7
 801938a:	d900      	bls.n	801938e <__ssputs_r+0x86>
 801938c:	463e      	mov	r6, r7
 801938e:	6820      	ldr	r0, [r4, #0]
 8019390:	4632      	mov	r2, r6
 8019392:	4641      	mov	r1, r8
 8019394:	f000 fb48 	bl	8019a28 <memmove>
 8019398:	68a3      	ldr	r3, [r4, #8]
 801939a:	1b9b      	subs	r3, r3, r6
 801939c:	60a3      	str	r3, [r4, #8]
 801939e:	6823      	ldr	r3, [r4, #0]
 80193a0:	4433      	add	r3, r6
 80193a2:	6023      	str	r3, [r4, #0]
 80193a4:	2000      	movs	r0, #0
 80193a6:	e7db      	b.n	8019360 <__ssputs_r+0x58>
 80193a8:	462a      	mov	r2, r5
 80193aa:	f000 fb57 	bl	8019a5c <_realloc_r>
 80193ae:	4606      	mov	r6, r0
 80193b0:	2800      	cmp	r0, #0
 80193b2:	d1e1      	bne.n	8019378 <__ssputs_r+0x70>
 80193b4:	6921      	ldr	r1, [r4, #16]
 80193b6:	4650      	mov	r0, sl
 80193b8:	f7fd fc78 	bl	8016cac <_free_r>
 80193bc:	e7c7      	b.n	801934e <__ssputs_r+0x46>
	...

080193c0 <_svfiprintf_r>:
 80193c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c4:	4698      	mov	r8, r3
 80193c6:	898b      	ldrh	r3, [r1, #12]
 80193c8:	061b      	lsls	r3, r3, #24
 80193ca:	b09d      	sub	sp, #116	; 0x74
 80193cc:	4607      	mov	r7, r0
 80193ce:	460d      	mov	r5, r1
 80193d0:	4614      	mov	r4, r2
 80193d2:	d50e      	bpl.n	80193f2 <_svfiprintf_r+0x32>
 80193d4:	690b      	ldr	r3, [r1, #16]
 80193d6:	b963      	cbnz	r3, 80193f2 <_svfiprintf_r+0x32>
 80193d8:	2140      	movs	r1, #64	; 0x40
 80193da:	f7fd fcd1 	bl	8016d80 <_malloc_r>
 80193de:	6028      	str	r0, [r5, #0]
 80193e0:	6128      	str	r0, [r5, #16]
 80193e2:	b920      	cbnz	r0, 80193ee <_svfiprintf_r+0x2e>
 80193e4:	230c      	movs	r3, #12
 80193e6:	603b      	str	r3, [r7, #0]
 80193e8:	f04f 30ff 	mov.w	r0, #4294967295
 80193ec:	e0d1      	b.n	8019592 <_svfiprintf_r+0x1d2>
 80193ee:	2340      	movs	r3, #64	; 0x40
 80193f0:	616b      	str	r3, [r5, #20]
 80193f2:	2300      	movs	r3, #0
 80193f4:	9309      	str	r3, [sp, #36]	; 0x24
 80193f6:	2320      	movs	r3, #32
 80193f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80193fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8019400:	2330      	movs	r3, #48	; 0x30
 8019402:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80195ac <_svfiprintf_r+0x1ec>
 8019406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801940a:	f04f 0901 	mov.w	r9, #1
 801940e:	4623      	mov	r3, r4
 8019410:	469a      	mov	sl, r3
 8019412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019416:	b10a      	cbz	r2, 801941c <_svfiprintf_r+0x5c>
 8019418:	2a25      	cmp	r2, #37	; 0x25
 801941a:	d1f9      	bne.n	8019410 <_svfiprintf_r+0x50>
 801941c:	ebba 0b04 	subs.w	fp, sl, r4
 8019420:	d00b      	beq.n	801943a <_svfiprintf_r+0x7a>
 8019422:	465b      	mov	r3, fp
 8019424:	4622      	mov	r2, r4
 8019426:	4629      	mov	r1, r5
 8019428:	4638      	mov	r0, r7
 801942a:	f7ff ff6d 	bl	8019308 <__ssputs_r>
 801942e:	3001      	adds	r0, #1
 8019430:	f000 80aa 	beq.w	8019588 <_svfiprintf_r+0x1c8>
 8019434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019436:	445a      	add	r2, fp
 8019438:	9209      	str	r2, [sp, #36]	; 0x24
 801943a:	f89a 3000 	ldrb.w	r3, [sl]
 801943e:	2b00      	cmp	r3, #0
 8019440:	f000 80a2 	beq.w	8019588 <_svfiprintf_r+0x1c8>
 8019444:	2300      	movs	r3, #0
 8019446:	f04f 32ff 	mov.w	r2, #4294967295
 801944a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801944e:	f10a 0a01 	add.w	sl, sl, #1
 8019452:	9304      	str	r3, [sp, #16]
 8019454:	9307      	str	r3, [sp, #28]
 8019456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801945a:	931a      	str	r3, [sp, #104]	; 0x68
 801945c:	4654      	mov	r4, sl
 801945e:	2205      	movs	r2, #5
 8019460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019464:	4851      	ldr	r0, [pc, #324]	; (80195ac <_svfiprintf_r+0x1ec>)
 8019466:	f7e6 fe93 	bl	8000190 <memchr>
 801946a:	9a04      	ldr	r2, [sp, #16]
 801946c:	b9d8      	cbnz	r0, 80194a6 <_svfiprintf_r+0xe6>
 801946e:	06d0      	lsls	r0, r2, #27
 8019470:	bf44      	itt	mi
 8019472:	2320      	movmi	r3, #32
 8019474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019478:	0711      	lsls	r1, r2, #28
 801947a:	bf44      	itt	mi
 801947c:	232b      	movmi	r3, #43	; 0x2b
 801947e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019482:	f89a 3000 	ldrb.w	r3, [sl]
 8019486:	2b2a      	cmp	r3, #42	; 0x2a
 8019488:	d015      	beq.n	80194b6 <_svfiprintf_r+0xf6>
 801948a:	9a07      	ldr	r2, [sp, #28]
 801948c:	4654      	mov	r4, sl
 801948e:	2000      	movs	r0, #0
 8019490:	f04f 0c0a 	mov.w	ip, #10
 8019494:	4621      	mov	r1, r4
 8019496:	f811 3b01 	ldrb.w	r3, [r1], #1
 801949a:	3b30      	subs	r3, #48	; 0x30
 801949c:	2b09      	cmp	r3, #9
 801949e:	d94e      	bls.n	801953e <_svfiprintf_r+0x17e>
 80194a0:	b1b0      	cbz	r0, 80194d0 <_svfiprintf_r+0x110>
 80194a2:	9207      	str	r2, [sp, #28]
 80194a4:	e014      	b.n	80194d0 <_svfiprintf_r+0x110>
 80194a6:	eba0 0308 	sub.w	r3, r0, r8
 80194aa:	fa09 f303 	lsl.w	r3, r9, r3
 80194ae:	4313      	orrs	r3, r2
 80194b0:	9304      	str	r3, [sp, #16]
 80194b2:	46a2      	mov	sl, r4
 80194b4:	e7d2      	b.n	801945c <_svfiprintf_r+0x9c>
 80194b6:	9b03      	ldr	r3, [sp, #12]
 80194b8:	1d19      	adds	r1, r3, #4
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	9103      	str	r1, [sp, #12]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	bfbb      	ittet	lt
 80194c2:	425b      	neglt	r3, r3
 80194c4:	f042 0202 	orrlt.w	r2, r2, #2
 80194c8:	9307      	strge	r3, [sp, #28]
 80194ca:	9307      	strlt	r3, [sp, #28]
 80194cc:	bfb8      	it	lt
 80194ce:	9204      	strlt	r2, [sp, #16]
 80194d0:	7823      	ldrb	r3, [r4, #0]
 80194d2:	2b2e      	cmp	r3, #46	; 0x2e
 80194d4:	d10c      	bne.n	80194f0 <_svfiprintf_r+0x130>
 80194d6:	7863      	ldrb	r3, [r4, #1]
 80194d8:	2b2a      	cmp	r3, #42	; 0x2a
 80194da:	d135      	bne.n	8019548 <_svfiprintf_r+0x188>
 80194dc:	9b03      	ldr	r3, [sp, #12]
 80194de:	1d1a      	adds	r2, r3, #4
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	9203      	str	r2, [sp, #12]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	bfb8      	it	lt
 80194e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80194ec:	3402      	adds	r4, #2
 80194ee:	9305      	str	r3, [sp, #20]
 80194f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80195b0 <_svfiprintf_r+0x1f0>
 80194f4:	7821      	ldrb	r1, [r4, #0]
 80194f6:	2203      	movs	r2, #3
 80194f8:	4650      	mov	r0, sl
 80194fa:	f7e6 fe49 	bl	8000190 <memchr>
 80194fe:	b140      	cbz	r0, 8019512 <_svfiprintf_r+0x152>
 8019500:	2340      	movs	r3, #64	; 0x40
 8019502:	eba0 000a 	sub.w	r0, r0, sl
 8019506:	fa03 f000 	lsl.w	r0, r3, r0
 801950a:	9b04      	ldr	r3, [sp, #16]
 801950c:	4303      	orrs	r3, r0
 801950e:	3401      	adds	r4, #1
 8019510:	9304      	str	r3, [sp, #16]
 8019512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019516:	4827      	ldr	r0, [pc, #156]	; (80195b4 <_svfiprintf_r+0x1f4>)
 8019518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801951c:	2206      	movs	r2, #6
 801951e:	f7e6 fe37 	bl	8000190 <memchr>
 8019522:	2800      	cmp	r0, #0
 8019524:	d038      	beq.n	8019598 <_svfiprintf_r+0x1d8>
 8019526:	4b24      	ldr	r3, [pc, #144]	; (80195b8 <_svfiprintf_r+0x1f8>)
 8019528:	bb1b      	cbnz	r3, 8019572 <_svfiprintf_r+0x1b2>
 801952a:	9b03      	ldr	r3, [sp, #12]
 801952c:	3307      	adds	r3, #7
 801952e:	f023 0307 	bic.w	r3, r3, #7
 8019532:	3308      	adds	r3, #8
 8019534:	9303      	str	r3, [sp, #12]
 8019536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019538:	4433      	add	r3, r6
 801953a:	9309      	str	r3, [sp, #36]	; 0x24
 801953c:	e767      	b.n	801940e <_svfiprintf_r+0x4e>
 801953e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019542:	460c      	mov	r4, r1
 8019544:	2001      	movs	r0, #1
 8019546:	e7a5      	b.n	8019494 <_svfiprintf_r+0xd4>
 8019548:	2300      	movs	r3, #0
 801954a:	3401      	adds	r4, #1
 801954c:	9305      	str	r3, [sp, #20]
 801954e:	4619      	mov	r1, r3
 8019550:	f04f 0c0a 	mov.w	ip, #10
 8019554:	4620      	mov	r0, r4
 8019556:	f810 2b01 	ldrb.w	r2, [r0], #1
 801955a:	3a30      	subs	r2, #48	; 0x30
 801955c:	2a09      	cmp	r2, #9
 801955e:	d903      	bls.n	8019568 <_svfiprintf_r+0x1a8>
 8019560:	2b00      	cmp	r3, #0
 8019562:	d0c5      	beq.n	80194f0 <_svfiprintf_r+0x130>
 8019564:	9105      	str	r1, [sp, #20]
 8019566:	e7c3      	b.n	80194f0 <_svfiprintf_r+0x130>
 8019568:	fb0c 2101 	mla	r1, ip, r1, r2
 801956c:	4604      	mov	r4, r0
 801956e:	2301      	movs	r3, #1
 8019570:	e7f0      	b.n	8019554 <_svfiprintf_r+0x194>
 8019572:	ab03      	add	r3, sp, #12
 8019574:	9300      	str	r3, [sp, #0]
 8019576:	462a      	mov	r2, r5
 8019578:	4b10      	ldr	r3, [pc, #64]	; (80195bc <_svfiprintf_r+0x1fc>)
 801957a:	a904      	add	r1, sp, #16
 801957c:	4638      	mov	r0, r7
 801957e:	f7fd fd11 	bl	8016fa4 <_printf_float>
 8019582:	1c42      	adds	r2, r0, #1
 8019584:	4606      	mov	r6, r0
 8019586:	d1d6      	bne.n	8019536 <_svfiprintf_r+0x176>
 8019588:	89ab      	ldrh	r3, [r5, #12]
 801958a:	065b      	lsls	r3, r3, #25
 801958c:	f53f af2c 	bmi.w	80193e8 <_svfiprintf_r+0x28>
 8019590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019592:	b01d      	add	sp, #116	; 0x74
 8019594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019598:	ab03      	add	r3, sp, #12
 801959a:	9300      	str	r3, [sp, #0]
 801959c:	462a      	mov	r2, r5
 801959e:	4b07      	ldr	r3, [pc, #28]	; (80195bc <_svfiprintf_r+0x1fc>)
 80195a0:	a904      	add	r1, sp, #16
 80195a2:	4638      	mov	r0, r7
 80195a4:	f7fd ff96 	bl	80174d4 <_printf_i>
 80195a8:	e7eb      	b.n	8019582 <_svfiprintf_r+0x1c2>
 80195aa:	bf00      	nop
 80195ac:	0801ad7c 	.word	0x0801ad7c
 80195b0:	0801ad82 	.word	0x0801ad82
 80195b4:	0801ad86 	.word	0x0801ad86
 80195b8:	08016fa5 	.word	0x08016fa5
 80195bc:	08019309 	.word	0x08019309

080195c0 <__sfputc_r>:
 80195c0:	6893      	ldr	r3, [r2, #8]
 80195c2:	3b01      	subs	r3, #1
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	b410      	push	{r4}
 80195c8:	6093      	str	r3, [r2, #8]
 80195ca:	da07      	bge.n	80195dc <__sfputc_r+0x1c>
 80195cc:	6994      	ldr	r4, [r2, #24]
 80195ce:	42a3      	cmp	r3, r4
 80195d0:	db01      	blt.n	80195d6 <__sfputc_r+0x16>
 80195d2:	290a      	cmp	r1, #10
 80195d4:	d102      	bne.n	80195dc <__sfputc_r+0x1c>
 80195d6:	bc10      	pop	{r4}
 80195d8:	f7fe b9a2 	b.w	8017920 <__swbuf_r>
 80195dc:	6813      	ldr	r3, [r2, #0]
 80195de:	1c58      	adds	r0, r3, #1
 80195e0:	6010      	str	r0, [r2, #0]
 80195e2:	7019      	strb	r1, [r3, #0]
 80195e4:	4608      	mov	r0, r1
 80195e6:	bc10      	pop	{r4}
 80195e8:	4770      	bx	lr

080195ea <__sfputs_r>:
 80195ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ec:	4606      	mov	r6, r0
 80195ee:	460f      	mov	r7, r1
 80195f0:	4614      	mov	r4, r2
 80195f2:	18d5      	adds	r5, r2, r3
 80195f4:	42ac      	cmp	r4, r5
 80195f6:	d101      	bne.n	80195fc <__sfputs_r+0x12>
 80195f8:	2000      	movs	r0, #0
 80195fa:	e007      	b.n	801960c <__sfputs_r+0x22>
 80195fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019600:	463a      	mov	r2, r7
 8019602:	4630      	mov	r0, r6
 8019604:	f7ff ffdc 	bl	80195c0 <__sfputc_r>
 8019608:	1c43      	adds	r3, r0, #1
 801960a:	d1f3      	bne.n	80195f4 <__sfputs_r+0xa>
 801960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019610 <_vfiprintf_r>:
 8019610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019614:	460d      	mov	r5, r1
 8019616:	b09d      	sub	sp, #116	; 0x74
 8019618:	4614      	mov	r4, r2
 801961a:	4698      	mov	r8, r3
 801961c:	4606      	mov	r6, r0
 801961e:	b118      	cbz	r0, 8019628 <_vfiprintf_r+0x18>
 8019620:	6983      	ldr	r3, [r0, #24]
 8019622:	b90b      	cbnz	r3, 8019628 <_vfiprintf_r+0x18>
 8019624:	f7ff f9c8 	bl	80189b8 <__sinit>
 8019628:	4b89      	ldr	r3, [pc, #548]	; (8019850 <_vfiprintf_r+0x240>)
 801962a:	429d      	cmp	r5, r3
 801962c:	d11b      	bne.n	8019666 <_vfiprintf_r+0x56>
 801962e:	6875      	ldr	r5, [r6, #4]
 8019630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019632:	07d9      	lsls	r1, r3, #31
 8019634:	d405      	bmi.n	8019642 <_vfiprintf_r+0x32>
 8019636:	89ab      	ldrh	r3, [r5, #12]
 8019638:	059a      	lsls	r2, r3, #22
 801963a:	d402      	bmi.n	8019642 <_vfiprintf_r+0x32>
 801963c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801963e:	f7ff fa5e 	bl	8018afe <__retarget_lock_acquire_recursive>
 8019642:	89ab      	ldrh	r3, [r5, #12]
 8019644:	071b      	lsls	r3, r3, #28
 8019646:	d501      	bpl.n	801964c <_vfiprintf_r+0x3c>
 8019648:	692b      	ldr	r3, [r5, #16]
 801964a:	b9eb      	cbnz	r3, 8019688 <_vfiprintf_r+0x78>
 801964c:	4629      	mov	r1, r5
 801964e:	4630      	mov	r0, r6
 8019650:	f7fe f9b8 	bl	80179c4 <__swsetup_r>
 8019654:	b1c0      	cbz	r0, 8019688 <_vfiprintf_r+0x78>
 8019656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019658:	07dc      	lsls	r4, r3, #31
 801965a:	d50e      	bpl.n	801967a <_vfiprintf_r+0x6a>
 801965c:	f04f 30ff 	mov.w	r0, #4294967295
 8019660:	b01d      	add	sp, #116	; 0x74
 8019662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019666:	4b7b      	ldr	r3, [pc, #492]	; (8019854 <_vfiprintf_r+0x244>)
 8019668:	429d      	cmp	r5, r3
 801966a:	d101      	bne.n	8019670 <_vfiprintf_r+0x60>
 801966c:	68b5      	ldr	r5, [r6, #8]
 801966e:	e7df      	b.n	8019630 <_vfiprintf_r+0x20>
 8019670:	4b79      	ldr	r3, [pc, #484]	; (8019858 <_vfiprintf_r+0x248>)
 8019672:	429d      	cmp	r5, r3
 8019674:	bf08      	it	eq
 8019676:	68f5      	ldreq	r5, [r6, #12]
 8019678:	e7da      	b.n	8019630 <_vfiprintf_r+0x20>
 801967a:	89ab      	ldrh	r3, [r5, #12]
 801967c:	0598      	lsls	r0, r3, #22
 801967e:	d4ed      	bmi.n	801965c <_vfiprintf_r+0x4c>
 8019680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019682:	f7ff fa3d 	bl	8018b00 <__retarget_lock_release_recursive>
 8019686:	e7e9      	b.n	801965c <_vfiprintf_r+0x4c>
 8019688:	2300      	movs	r3, #0
 801968a:	9309      	str	r3, [sp, #36]	; 0x24
 801968c:	2320      	movs	r3, #32
 801968e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019692:	f8cd 800c 	str.w	r8, [sp, #12]
 8019696:	2330      	movs	r3, #48	; 0x30
 8019698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801985c <_vfiprintf_r+0x24c>
 801969c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80196a0:	f04f 0901 	mov.w	r9, #1
 80196a4:	4623      	mov	r3, r4
 80196a6:	469a      	mov	sl, r3
 80196a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196ac:	b10a      	cbz	r2, 80196b2 <_vfiprintf_r+0xa2>
 80196ae:	2a25      	cmp	r2, #37	; 0x25
 80196b0:	d1f9      	bne.n	80196a6 <_vfiprintf_r+0x96>
 80196b2:	ebba 0b04 	subs.w	fp, sl, r4
 80196b6:	d00b      	beq.n	80196d0 <_vfiprintf_r+0xc0>
 80196b8:	465b      	mov	r3, fp
 80196ba:	4622      	mov	r2, r4
 80196bc:	4629      	mov	r1, r5
 80196be:	4630      	mov	r0, r6
 80196c0:	f7ff ff93 	bl	80195ea <__sfputs_r>
 80196c4:	3001      	adds	r0, #1
 80196c6:	f000 80aa 	beq.w	801981e <_vfiprintf_r+0x20e>
 80196ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196cc:	445a      	add	r2, fp
 80196ce:	9209      	str	r2, [sp, #36]	; 0x24
 80196d0:	f89a 3000 	ldrb.w	r3, [sl]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	f000 80a2 	beq.w	801981e <_vfiprintf_r+0x20e>
 80196da:	2300      	movs	r3, #0
 80196dc:	f04f 32ff 	mov.w	r2, #4294967295
 80196e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196e4:	f10a 0a01 	add.w	sl, sl, #1
 80196e8:	9304      	str	r3, [sp, #16]
 80196ea:	9307      	str	r3, [sp, #28]
 80196ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80196f0:	931a      	str	r3, [sp, #104]	; 0x68
 80196f2:	4654      	mov	r4, sl
 80196f4:	2205      	movs	r2, #5
 80196f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196fa:	4858      	ldr	r0, [pc, #352]	; (801985c <_vfiprintf_r+0x24c>)
 80196fc:	f7e6 fd48 	bl	8000190 <memchr>
 8019700:	9a04      	ldr	r2, [sp, #16]
 8019702:	b9d8      	cbnz	r0, 801973c <_vfiprintf_r+0x12c>
 8019704:	06d1      	lsls	r1, r2, #27
 8019706:	bf44      	itt	mi
 8019708:	2320      	movmi	r3, #32
 801970a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801970e:	0713      	lsls	r3, r2, #28
 8019710:	bf44      	itt	mi
 8019712:	232b      	movmi	r3, #43	; 0x2b
 8019714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019718:	f89a 3000 	ldrb.w	r3, [sl]
 801971c:	2b2a      	cmp	r3, #42	; 0x2a
 801971e:	d015      	beq.n	801974c <_vfiprintf_r+0x13c>
 8019720:	9a07      	ldr	r2, [sp, #28]
 8019722:	4654      	mov	r4, sl
 8019724:	2000      	movs	r0, #0
 8019726:	f04f 0c0a 	mov.w	ip, #10
 801972a:	4621      	mov	r1, r4
 801972c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019730:	3b30      	subs	r3, #48	; 0x30
 8019732:	2b09      	cmp	r3, #9
 8019734:	d94e      	bls.n	80197d4 <_vfiprintf_r+0x1c4>
 8019736:	b1b0      	cbz	r0, 8019766 <_vfiprintf_r+0x156>
 8019738:	9207      	str	r2, [sp, #28]
 801973a:	e014      	b.n	8019766 <_vfiprintf_r+0x156>
 801973c:	eba0 0308 	sub.w	r3, r0, r8
 8019740:	fa09 f303 	lsl.w	r3, r9, r3
 8019744:	4313      	orrs	r3, r2
 8019746:	9304      	str	r3, [sp, #16]
 8019748:	46a2      	mov	sl, r4
 801974a:	e7d2      	b.n	80196f2 <_vfiprintf_r+0xe2>
 801974c:	9b03      	ldr	r3, [sp, #12]
 801974e:	1d19      	adds	r1, r3, #4
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	9103      	str	r1, [sp, #12]
 8019754:	2b00      	cmp	r3, #0
 8019756:	bfbb      	ittet	lt
 8019758:	425b      	neglt	r3, r3
 801975a:	f042 0202 	orrlt.w	r2, r2, #2
 801975e:	9307      	strge	r3, [sp, #28]
 8019760:	9307      	strlt	r3, [sp, #28]
 8019762:	bfb8      	it	lt
 8019764:	9204      	strlt	r2, [sp, #16]
 8019766:	7823      	ldrb	r3, [r4, #0]
 8019768:	2b2e      	cmp	r3, #46	; 0x2e
 801976a:	d10c      	bne.n	8019786 <_vfiprintf_r+0x176>
 801976c:	7863      	ldrb	r3, [r4, #1]
 801976e:	2b2a      	cmp	r3, #42	; 0x2a
 8019770:	d135      	bne.n	80197de <_vfiprintf_r+0x1ce>
 8019772:	9b03      	ldr	r3, [sp, #12]
 8019774:	1d1a      	adds	r2, r3, #4
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	9203      	str	r2, [sp, #12]
 801977a:	2b00      	cmp	r3, #0
 801977c:	bfb8      	it	lt
 801977e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019782:	3402      	adds	r4, #2
 8019784:	9305      	str	r3, [sp, #20]
 8019786:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8019860 <_vfiprintf_r+0x250>
 801978a:	7821      	ldrb	r1, [r4, #0]
 801978c:	2203      	movs	r2, #3
 801978e:	4650      	mov	r0, sl
 8019790:	f7e6 fcfe 	bl	8000190 <memchr>
 8019794:	b140      	cbz	r0, 80197a8 <_vfiprintf_r+0x198>
 8019796:	2340      	movs	r3, #64	; 0x40
 8019798:	eba0 000a 	sub.w	r0, r0, sl
 801979c:	fa03 f000 	lsl.w	r0, r3, r0
 80197a0:	9b04      	ldr	r3, [sp, #16]
 80197a2:	4303      	orrs	r3, r0
 80197a4:	3401      	adds	r4, #1
 80197a6:	9304      	str	r3, [sp, #16]
 80197a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197ac:	482d      	ldr	r0, [pc, #180]	; (8019864 <_vfiprintf_r+0x254>)
 80197ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80197b2:	2206      	movs	r2, #6
 80197b4:	f7e6 fcec 	bl	8000190 <memchr>
 80197b8:	2800      	cmp	r0, #0
 80197ba:	d03f      	beq.n	801983c <_vfiprintf_r+0x22c>
 80197bc:	4b2a      	ldr	r3, [pc, #168]	; (8019868 <_vfiprintf_r+0x258>)
 80197be:	bb1b      	cbnz	r3, 8019808 <_vfiprintf_r+0x1f8>
 80197c0:	9b03      	ldr	r3, [sp, #12]
 80197c2:	3307      	adds	r3, #7
 80197c4:	f023 0307 	bic.w	r3, r3, #7
 80197c8:	3308      	adds	r3, #8
 80197ca:	9303      	str	r3, [sp, #12]
 80197cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197ce:	443b      	add	r3, r7
 80197d0:	9309      	str	r3, [sp, #36]	; 0x24
 80197d2:	e767      	b.n	80196a4 <_vfiprintf_r+0x94>
 80197d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80197d8:	460c      	mov	r4, r1
 80197da:	2001      	movs	r0, #1
 80197dc:	e7a5      	b.n	801972a <_vfiprintf_r+0x11a>
 80197de:	2300      	movs	r3, #0
 80197e0:	3401      	adds	r4, #1
 80197e2:	9305      	str	r3, [sp, #20]
 80197e4:	4619      	mov	r1, r3
 80197e6:	f04f 0c0a 	mov.w	ip, #10
 80197ea:	4620      	mov	r0, r4
 80197ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197f0:	3a30      	subs	r2, #48	; 0x30
 80197f2:	2a09      	cmp	r2, #9
 80197f4:	d903      	bls.n	80197fe <_vfiprintf_r+0x1ee>
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d0c5      	beq.n	8019786 <_vfiprintf_r+0x176>
 80197fa:	9105      	str	r1, [sp, #20]
 80197fc:	e7c3      	b.n	8019786 <_vfiprintf_r+0x176>
 80197fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8019802:	4604      	mov	r4, r0
 8019804:	2301      	movs	r3, #1
 8019806:	e7f0      	b.n	80197ea <_vfiprintf_r+0x1da>
 8019808:	ab03      	add	r3, sp, #12
 801980a:	9300      	str	r3, [sp, #0]
 801980c:	462a      	mov	r2, r5
 801980e:	4b17      	ldr	r3, [pc, #92]	; (801986c <_vfiprintf_r+0x25c>)
 8019810:	a904      	add	r1, sp, #16
 8019812:	4630      	mov	r0, r6
 8019814:	f7fd fbc6 	bl	8016fa4 <_printf_float>
 8019818:	4607      	mov	r7, r0
 801981a:	1c78      	adds	r0, r7, #1
 801981c:	d1d6      	bne.n	80197cc <_vfiprintf_r+0x1bc>
 801981e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019820:	07d9      	lsls	r1, r3, #31
 8019822:	d405      	bmi.n	8019830 <_vfiprintf_r+0x220>
 8019824:	89ab      	ldrh	r3, [r5, #12]
 8019826:	059a      	lsls	r2, r3, #22
 8019828:	d402      	bmi.n	8019830 <_vfiprintf_r+0x220>
 801982a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801982c:	f7ff f968 	bl	8018b00 <__retarget_lock_release_recursive>
 8019830:	89ab      	ldrh	r3, [r5, #12]
 8019832:	065b      	lsls	r3, r3, #25
 8019834:	f53f af12 	bmi.w	801965c <_vfiprintf_r+0x4c>
 8019838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801983a:	e711      	b.n	8019660 <_vfiprintf_r+0x50>
 801983c:	ab03      	add	r3, sp, #12
 801983e:	9300      	str	r3, [sp, #0]
 8019840:	462a      	mov	r2, r5
 8019842:	4b0a      	ldr	r3, [pc, #40]	; (801986c <_vfiprintf_r+0x25c>)
 8019844:	a904      	add	r1, sp, #16
 8019846:	4630      	mov	r0, r6
 8019848:	f7fd fe44 	bl	80174d4 <_printf_i>
 801984c:	e7e4      	b.n	8019818 <_vfiprintf_r+0x208>
 801984e:	bf00      	nop
 8019850:	0801abe0 	.word	0x0801abe0
 8019854:	0801ac00 	.word	0x0801ac00
 8019858:	0801abc0 	.word	0x0801abc0
 801985c:	0801ad7c 	.word	0x0801ad7c
 8019860:	0801ad82 	.word	0x0801ad82
 8019864:	0801ad86 	.word	0x0801ad86
 8019868:	08016fa5 	.word	0x08016fa5
 801986c:	080195eb 	.word	0x080195eb

08019870 <__sread>:
 8019870:	b510      	push	{r4, lr}
 8019872:	460c      	mov	r4, r1
 8019874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019878:	f000 f920 	bl	8019abc <_read_r>
 801987c:	2800      	cmp	r0, #0
 801987e:	bfab      	itete	ge
 8019880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019882:	89a3      	ldrhlt	r3, [r4, #12]
 8019884:	181b      	addge	r3, r3, r0
 8019886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801988a:	bfac      	ite	ge
 801988c:	6563      	strge	r3, [r4, #84]	; 0x54
 801988e:	81a3      	strhlt	r3, [r4, #12]
 8019890:	bd10      	pop	{r4, pc}

08019892 <__swrite>:
 8019892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019896:	461f      	mov	r7, r3
 8019898:	898b      	ldrh	r3, [r1, #12]
 801989a:	05db      	lsls	r3, r3, #23
 801989c:	4605      	mov	r5, r0
 801989e:	460c      	mov	r4, r1
 80198a0:	4616      	mov	r6, r2
 80198a2:	d505      	bpl.n	80198b0 <__swrite+0x1e>
 80198a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198a8:	2302      	movs	r3, #2
 80198aa:	2200      	movs	r2, #0
 80198ac:	f000 f898 	bl	80199e0 <_lseek_r>
 80198b0:	89a3      	ldrh	r3, [r4, #12]
 80198b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80198b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80198ba:	81a3      	strh	r3, [r4, #12]
 80198bc:	4632      	mov	r2, r6
 80198be:	463b      	mov	r3, r7
 80198c0:	4628      	mov	r0, r5
 80198c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198c6:	f000 b817 	b.w	80198f8 <_write_r>

080198ca <__sseek>:
 80198ca:	b510      	push	{r4, lr}
 80198cc:	460c      	mov	r4, r1
 80198ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198d2:	f000 f885 	bl	80199e0 <_lseek_r>
 80198d6:	1c43      	adds	r3, r0, #1
 80198d8:	89a3      	ldrh	r3, [r4, #12]
 80198da:	bf15      	itete	ne
 80198dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80198de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80198e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80198e6:	81a3      	strheq	r3, [r4, #12]
 80198e8:	bf18      	it	ne
 80198ea:	81a3      	strhne	r3, [r4, #12]
 80198ec:	bd10      	pop	{r4, pc}

080198ee <__sclose>:
 80198ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198f2:	f000 b831 	b.w	8019958 <_close_r>
	...

080198f8 <_write_r>:
 80198f8:	b538      	push	{r3, r4, r5, lr}
 80198fa:	4d07      	ldr	r5, [pc, #28]	; (8019918 <_write_r+0x20>)
 80198fc:	4604      	mov	r4, r0
 80198fe:	4608      	mov	r0, r1
 8019900:	4611      	mov	r1, r2
 8019902:	2200      	movs	r2, #0
 8019904:	602a      	str	r2, [r5, #0]
 8019906:	461a      	mov	r2, r3
 8019908:	f7e9 ff56 	bl	80037b8 <_write>
 801990c:	1c43      	adds	r3, r0, #1
 801990e:	d102      	bne.n	8019916 <_write_r+0x1e>
 8019910:	682b      	ldr	r3, [r5, #0]
 8019912:	b103      	cbz	r3, 8019916 <_write_r+0x1e>
 8019914:	6023      	str	r3, [r4, #0]
 8019916:	bd38      	pop	{r3, r4, r5, pc}
 8019918:	20006ec8 	.word	0x20006ec8

0801991c <__assert_func>:
 801991c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801991e:	4614      	mov	r4, r2
 8019920:	461a      	mov	r2, r3
 8019922:	4b09      	ldr	r3, [pc, #36]	; (8019948 <__assert_func+0x2c>)
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	4605      	mov	r5, r0
 8019928:	68d8      	ldr	r0, [r3, #12]
 801992a:	b14c      	cbz	r4, 8019940 <__assert_func+0x24>
 801992c:	4b07      	ldr	r3, [pc, #28]	; (801994c <__assert_func+0x30>)
 801992e:	9100      	str	r1, [sp, #0]
 8019930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019934:	4906      	ldr	r1, [pc, #24]	; (8019950 <__assert_func+0x34>)
 8019936:	462b      	mov	r3, r5
 8019938:	f000 f81e 	bl	8019978 <fiprintf>
 801993c:	f000 f8dd 	bl	8019afa <abort>
 8019940:	4b04      	ldr	r3, [pc, #16]	; (8019954 <__assert_func+0x38>)
 8019942:	461c      	mov	r4, r3
 8019944:	e7f3      	b.n	801992e <__assert_func+0x12>
 8019946:	bf00      	nop
 8019948:	2000065c 	.word	0x2000065c
 801994c:	0801ad8d 	.word	0x0801ad8d
 8019950:	0801ad9a 	.word	0x0801ad9a
 8019954:	0801adc8 	.word	0x0801adc8

08019958 <_close_r>:
 8019958:	b538      	push	{r3, r4, r5, lr}
 801995a:	4d06      	ldr	r5, [pc, #24]	; (8019974 <_close_r+0x1c>)
 801995c:	2300      	movs	r3, #0
 801995e:	4604      	mov	r4, r0
 8019960:	4608      	mov	r0, r1
 8019962:	602b      	str	r3, [r5, #0]
 8019964:	f7e9 ff44 	bl	80037f0 <_close>
 8019968:	1c43      	adds	r3, r0, #1
 801996a:	d102      	bne.n	8019972 <_close_r+0x1a>
 801996c:	682b      	ldr	r3, [r5, #0]
 801996e:	b103      	cbz	r3, 8019972 <_close_r+0x1a>
 8019970:	6023      	str	r3, [r4, #0]
 8019972:	bd38      	pop	{r3, r4, r5, pc}
 8019974:	20006ec8 	.word	0x20006ec8

08019978 <fiprintf>:
 8019978:	b40e      	push	{r1, r2, r3}
 801997a:	b503      	push	{r0, r1, lr}
 801997c:	4601      	mov	r1, r0
 801997e:	ab03      	add	r3, sp, #12
 8019980:	4805      	ldr	r0, [pc, #20]	; (8019998 <fiprintf+0x20>)
 8019982:	f853 2b04 	ldr.w	r2, [r3], #4
 8019986:	6800      	ldr	r0, [r0, #0]
 8019988:	9301      	str	r3, [sp, #4]
 801998a:	f7ff fe41 	bl	8019610 <_vfiprintf_r>
 801998e:	b002      	add	sp, #8
 8019990:	f85d eb04 	ldr.w	lr, [sp], #4
 8019994:	b003      	add	sp, #12
 8019996:	4770      	bx	lr
 8019998:	2000065c 	.word	0x2000065c

0801999c <_fstat_r>:
 801999c:	b538      	push	{r3, r4, r5, lr}
 801999e:	4d07      	ldr	r5, [pc, #28]	; (80199bc <_fstat_r+0x20>)
 80199a0:	2300      	movs	r3, #0
 80199a2:	4604      	mov	r4, r0
 80199a4:	4608      	mov	r0, r1
 80199a6:	4611      	mov	r1, r2
 80199a8:	602b      	str	r3, [r5, #0]
 80199aa:	f7e9 ff2c 	bl	8003806 <_fstat>
 80199ae:	1c43      	adds	r3, r0, #1
 80199b0:	d102      	bne.n	80199b8 <_fstat_r+0x1c>
 80199b2:	682b      	ldr	r3, [r5, #0]
 80199b4:	b103      	cbz	r3, 80199b8 <_fstat_r+0x1c>
 80199b6:	6023      	str	r3, [r4, #0]
 80199b8:	bd38      	pop	{r3, r4, r5, pc}
 80199ba:	bf00      	nop
 80199bc:	20006ec8 	.word	0x20006ec8

080199c0 <_isatty_r>:
 80199c0:	b538      	push	{r3, r4, r5, lr}
 80199c2:	4d06      	ldr	r5, [pc, #24]	; (80199dc <_isatty_r+0x1c>)
 80199c4:	2300      	movs	r3, #0
 80199c6:	4604      	mov	r4, r0
 80199c8:	4608      	mov	r0, r1
 80199ca:	602b      	str	r3, [r5, #0]
 80199cc:	f7e9 ff2a 	bl	8003824 <_isatty>
 80199d0:	1c43      	adds	r3, r0, #1
 80199d2:	d102      	bne.n	80199da <_isatty_r+0x1a>
 80199d4:	682b      	ldr	r3, [r5, #0]
 80199d6:	b103      	cbz	r3, 80199da <_isatty_r+0x1a>
 80199d8:	6023      	str	r3, [r4, #0]
 80199da:	bd38      	pop	{r3, r4, r5, pc}
 80199dc:	20006ec8 	.word	0x20006ec8

080199e0 <_lseek_r>:
 80199e0:	b538      	push	{r3, r4, r5, lr}
 80199e2:	4d07      	ldr	r5, [pc, #28]	; (8019a00 <_lseek_r+0x20>)
 80199e4:	4604      	mov	r4, r0
 80199e6:	4608      	mov	r0, r1
 80199e8:	4611      	mov	r1, r2
 80199ea:	2200      	movs	r2, #0
 80199ec:	602a      	str	r2, [r5, #0]
 80199ee:	461a      	mov	r2, r3
 80199f0:	f7e9 ff22 	bl	8003838 <_lseek>
 80199f4:	1c43      	adds	r3, r0, #1
 80199f6:	d102      	bne.n	80199fe <_lseek_r+0x1e>
 80199f8:	682b      	ldr	r3, [r5, #0]
 80199fa:	b103      	cbz	r3, 80199fe <_lseek_r+0x1e>
 80199fc:	6023      	str	r3, [r4, #0]
 80199fe:	bd38      	pop	{r3, r4, r5, pc}
 8019a00:	20006ec8 	.word	0x20006ec8

08019a04 <__ascii_mbtowc>:
 8019a04:	b082      	sub	sp, #8
 8019a06:	b901      	cbnz	r1, 8019a0a <__ascii_mbtowc+0x6>
 8019a08:	a901      	add	r1, sp, #4
 8019a0a:	b142      	cbz	r2, 8019a1e <__ascii_mbtowc+0x1a>
 8019a0c:	b14b      	cbz	r3, 8019a22 <__ascii_mbtowc+0x1e>
 8019a0e:	7813      	ldrb	r3, [r2, #0]
 8019a10:	600b      	str	r3, [r1, #0]
 8019a12:	7812      	ldrb	r2, [r2, #0]
 8019a14:	1e10      	subs	r0, r2, #0
 8019a16:	bf18      	it	ne
 8019a18:	2001      	movne	r0, #1
 8019a1a:	b002      	add	sp, #8
 8019a1c:	4770      	bx	lr
 8019a1e:	4610      	mov	r0, r2
 8019a20:	e7fb      	b.n	8019a1a <__ascii_mbtowc+0x16>
 8019a22:	f06f 0001 	mvn.w	r0, #1
 8019a26:	e7f8      	b.n	8019a1a <__ascii_mbtowc+0x16>

08019a28 <memmove>:
 8019a28:	4288      	cmp	r0, r1
 8019a2a:	b510      	push	{r4, lr}
 8019a2c:	eb01 0402 	add.w	r4, r1, r2
 8019a30:	d902      	bls.n	8019a38 <memmove+0x10>
 8019a32:	4284      	cmp	r4, r0
 8019a34:	4623      	mov	r3, r4
 8019a36:	d807      	bhi.n	8019a48 <memmove+0x20>
 8019a38:	1e43      	subs	r3, r0, #1
 8019a3a:	42a1      	cmp	r1, r4
 8019a3c:	d008      	beq.n	8019a50 <memmove+0x28>
 8019a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a46:	e7f8      	b.n	8019a3a <memmove+0x12>
 8019a48:	4402      	add	r2, r0
 8019a4a:	4601      	mov	r1, r0
 8019a4c:	428a      	cmp	r2, r1
 8019a4e:	d100      	bne.n	8019a52 <memmove+0x2a>
 8019a50:	bd10      	pop	{r4, pc}
 8019a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a5a:	e7f7      	b.n	8019a4c <memmove+0x24>

08019a5c <_realloc_r>:
 8019a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a60:	4680      	mov	r8, r0
 8019a62:	4614      	mov	r4, r2
 8019a64:	460e      	mov	r6, r1
 8019a66:	b921      	cbnz	r1, 8019a72 <_realloc_r+0x16>
 8019a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a6c:	4611      	mov	r1, r2
 8019a6e:	f7fd b987 	b.w	8016d80 <_malloc_r>
 8019a72:	b92a      	cbnz	r2, 8019a80 <_realloc_r+0x24>
 8019a74:	f7fd f91a 	bl	8016cac <_free_r>
 8019a78:	4625      	mov	r5, r4
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a80:	f000 f842 	bl	8019b08 <_malloc_usable_size_r>
 8019a84:	4284      	cmp	r4, r0
 8019a86:	4607      	mov	r7, r0
 8019a88:	d802      	bhi.n	8019a90 <_realloc_r+0x34>
 8019a8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019a8e:	d812      	bhi.n	8019ab6 <_realloc_r+0x5a>
 8019a90:	4621      	mov	r1, r4
 8019a92:	4640      	mov	r0, r8
 8019a94:	f7fd f974 	bl	8016d80 <_malloc_r>
 8019a98:	4605      	mov	r5, r0
 8019a9a:	2800      	cmp	r0, #0
 8019a9c:	d0ed      	beq.n	8019a7a <_realloc_r+0x1e>
 8019a9e:	42bc      	cmp	r4, r7
 8019aa0:	4622      	mov	r2, r4
 8019aa2:	4631      	mov	r1, r6
 8019aa4:	bf28      	it	cs
 8019aa6:	463a      	movcs	r2, r7
 8019aa8:	f7fd f8ea 	bl	8016c80 <memcpy>
 8019aac:	4631      	mov	r1, r6
 8019aae:	4640      	mov	r0, r8
 8019ab0:	f7fd f8fc 	bl	8016cac <_free_r>
 8019ab4:	e7e1      	b.n	8019a7a <_realloc_r+0x1e>
 8019ab6:	4635      	mov	r5, r6
 8019ab8:	e7df      	b.n	8019a7a <_realloc_r+0x1e>
	...

08019abc <_read_r>:
 8019abc:	b538      	push	{r3, r4, r5, lr}
 8019abe:	4d07      	ldr	r5, [pc, #28]	; (8019adc <_read_r+0x20>)
 8019ac0:	4604      	mov	r4, r0
 8019ac2:	4608      	mov	r0, r1
 8019ac4:	4611      	mov	r1, r2
 8019ac6:	2200      	movs	r2, #0
 8019ac8:	602a      	str	r2, [r5, #0]
 8019aca:	461a      	mov	r2, r3
 8019acc:	f7e9 fe57 	bl	800377e <_read>
 8019ad0:	1c43      	adds	r3, r0, #1
 8019ad2:	d102      	bne.n	8019ada <_read_r+0x1e>
 8019ad4:	682b      	ldr	r3, [r5, #0]
 8019ad6:	b103      	cbz	r3, 8019ada <_read_r+0x1e>
 8019ad8:	6023      	str	r3, [r4, #0]
 8019ada:	bd38      	pop	{r3, r4, r5, pc}
 8019adc:	20006ec8 	.word	0x20006ec8

08019ae0 <__ascii_wctomb>:
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	4608      	mov	r0, r1
 8019ae4:	b141      	cbz	r1, 8019af8 <__ascii_wctomb+0x18>
 8019ae6:	2aff      	cmp	r2, #255	; 0xff
 8019ae8:	d904      	bls.n	8019af4 <__ascii_wctomb+0x14>
 8019aea:	228a      	movs	r2, #138	; 0x8a
 8019aec:	601a      	str	r2, [r3, #0]
 8019aee:	f04f 30ff 	mov.w	r0, #4294967295
 8019af2:	4770      	bx	lr
 8019af4:	700a      	strb	r2, [r1, #0]
 8019af6:	2001      	movs	r0, #1
 8019af8:	4770      	bx	lr

08019afa <abort>:
 8019afa:	b508      	push	{r3, lr}
 8019afc:	2006      	movs	r0, #6
 8019afe:	f000 f833 	bl	8019b68 <raise>
 8019b02:	2001      	movs	r0, #1
 8019b04:	f7e9 fe31 	bl	800376a <_exit>

08019b08 <_malloc_usable_size_r>:
 8019b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b0c:	1f18      	subs	r0, r3, #4
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	bfbc      	itt	lt
 8019b12:	580b      	ldrlt	r3, [r1, r0]
 8019b14:	18c0      	addlt	r0, r0, r3
 8019b16:	4770      	bx	lr

08019b18 <_raise_r>:
 8019b18:	291f      	cmp	r1, #31
 8019b1a:	b538      	push	{r3, r4, r5, lr}
 8019b1c:	4604      	mov	r4, r0
 8019b1e:	460d      	mov	r5, r1
 8019b20:	d904      	bls.n	8019b2c <_raise_r+0x14>
 8019b22:	2316      	movs	r3, #22
 8019b24:	6003      	str	r3, [r0, #0]
 8019b26:	f04f 30ff 	mov.w	r0, #4294967295
 8019b2a:	bd38      	pop	{r3, r4, r5, pc}
 8019b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019b2e:	b112      	cbz	r2, 8019b36 <_raise_r+0x1e>
 8019b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b34:	b94b      	cbnz	r3, 8019b4a <_raise_r+0x32>
 8019b36:	4620      	mov	r0, r4
 8019b38:	f000 f830 	bl	8019b9c <_getpid_r>
 8019b3c:	462a      	mov	r2, r5
 8019b3e:	4601      	mov	r1, r0
 8019b40:	4620      	mov	r0, r4
 8019b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b46:	f000 b817 	b.w	8019b78 <_kill_r>
 8019b4a:	2b01      	cmp	r3, #1
 8019b4c:	d00a      	beq.n	8019b64 <_raise_r+0x4c>
 8019b4e:	1c59      	adds	r1, r3, #1
 8019b50:	d103      	bne.n	8019b5a <_raise_r+0x42>
 8019b52:	2316      	movs	r3, #22
 8019b54:	6003      	str	r3, [r0, #0]
 8019b56:	2001      	movs	r0, #1
 8019b58:	e7e7      	b.n	8019b2a <_raise_r+0x12>
 8019b5a:	2400      	movs	r4, #0
 8019b5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019b60:	4628      	mov	r0, r5
 8019b62:	4798      	blx	r3
 8019b64:	2000      	movs	r0, #0
 8019b66:	e7e0      	b.n	8019b2a <_raise_r+0x12>

08019b68 <raise>:
 8019b68:	4b02      	ldr	r3, [pc, #8]	; (8019b74 <raise+0xc>)
 8019b6a:	4601      	mov	r1, r0
 8019b6c:	6818      	ldr	r0, [r3, #0]
 8019b6e:	f7ff bfd3 	b.w	8019b18 <_raise_r>
 8019b72:	bf00      	nop
 8019b74:	2000065c 	.word	0x2000065c

08019b78 <_kill_r>:
 8019b78:	b538      	push	{r3, r4, r5, lr}
 8019b7a:	4d07      	ldr	r5, [pc, #28]	; (8019b98 <_kill_r+0x20>)
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	4604      	mov	r4, r0
 8019b80:	4608      	mov	r0, r1
 8019b82:	4611      	mov	r1, r2
 8019b84:	602b      	str	r3, [r5, #0]
 8019b86:	f7e9 fde0 	bl	800374a <_kill>
 8019b8a:	1c43      	adds	r3, r0, #1
 8019b8c:	d102      	bne.n	8019b94 <_kill_r+0x1c>
 8019b8e:	682b      	ldr	r3, [r5, #0]
 8019b90:	b103      	cbz	r3, 8019b94 <_kill_r+0x1c>
 8019b92:	6023      	str	r3, [r4, #0]
 8019b94:	bd38      	pop	{r3, r4, r5, pc}
 8019b96:	bf00      	nop
 8019b98:	20006ec8 	.word	0x20006ec8

08019b9c <_getpid_r>:
 8019b9c:	f7e9 bdce 	b.w	800373c <_getpid>

08019ba0 <_init>:
 8019ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba2:	bf00      	nop
 8019ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ba6:	bc08      	pop	{r3}
 8019ba8:	469e      	mov	lr, r3
 8019baa:	4770      	bx	lr

08019bac <_fini>:
 8019bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bae:	bf00      	nop
 8019bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bb2:	bc08      	pop	{r3}
 8019bb4:	469e      	mov	lr, r3
 8019bb6:	4770      	bx	lr
