
HAB_Tracker_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014728  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce4  08014868  08014868  00024868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801554c  0801554c  00030454  2**0
                  CONTENTS
  4 .ARM          00000008  0801554c  0801554c  0002554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015554  08015554  00030454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015554  08015554  00025554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015558  08015558  00025558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  0801555c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  20000454  080159b0  00030454  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020cc  080159b0  000320cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030454  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d156  00000000  00000000  0003047e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008094  00000000  00000000  0006d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003210  00000000  00000000  00075668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ef0  00000000  00000000  00078878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000257ec  00000000  00000000  0007b768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037f24  00000000  00000000  000a0f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c589f  00000000  00000000  000d8e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e46c  00000000  00000000  0019e768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000454 	.word	0x20000454
 800015c:	00000000 	.word	0x00000000
 8000160:	08014850 	.word	0x08014850

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000458 	.word	0x20000458
 800017c:	08014850 	.word	0x08014850

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__gesf2>:
 8000d74:	f04f 3cff 	mov.w	ip, #4294967295
 8000d78:	e006      	b.n	8000d88 <__cmpsf2+0x4>
 8000d7a:	bf00      	nop

08000d7c <__lesf2>:
 8000d7c:	f04f 0c01 	mov.w	ip, #1
 8000d80:	e002      	b.n	8000d88 <__cmpsf2+0x4>
 8000d82:	bf00      	nop

08000d84 <__cmpsf2>:
 8000d84:	f04f 0c01 	mov.w	ip, #1
 8000d88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d011      	beq.n	8000dc4 <__cmpsf2+0x40>
 8000da0:	b001      	add	sp, #4
 8000da2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000da6:	bf18      	it	ne
 8000da8:	ea90 0f01 	teqne	r0, r1
 8000dac:	bf58      	it	pl
 8000dae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000db2:	bf88      	it	hi
 8000db4:	17c8      	asrhi	r0, r1, #31
 8000db6:	bf38      	it	cc
 8000db8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dbc:	bf18      	it	ne
 8000dbe:	f040 0001 	orrne.w	r0, r0, #1
 8000dc2:	4770      	bx	lr
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	d102      	bne.n	8000dd0 <__cmpsf2+0x4c>
 8000dca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dce:	d105      	bne.n	8000ddc <__cmpsf2+0x58>
 8000dd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000dd4:	d1e4      	bne.n	8000da0 <__cmpsf2+0x1c>
 8000dd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dda:	d0e1      	beq.n	8000da0 <__cmpsf2+0x1c>
 8000ddc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__aeabi_cfrcmple>:
 8000de4:	4684      	mov	ip, r0
 8000de6:	4608      	mov	r0, r1
 8000de8:	4661      	mov	r1, ip
 8000dea:	e7ff      	b.n	8000dec <__aeabi_cfcmpeq>

08000dec <__aeabi_cfcmpeq>:
 8000dec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dee:	f7ff ffc9 	bl	8000d84 <__cmpsf2>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	bf48      	it	mi
 8000df6:	f110 0f00 	cmnmi.w	r0, #0
 8000dfa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dfc <__aeabi_fcmpeq>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff fff4 	bl	8000dec <__aeabi_cfcmpeq>
 8000e04:	bf0c      	ite	eq
 8000e06:	2001      	moveq	r0, #1
 8000e08:	2000      	movne	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_fcmplt>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffea 	bl	8000dec <__aeabi_cfcmpeq>
 8000e18:	bf34      	ite	cc
 8000e1a:	2001      	movcc	r0, #1
 8000e1c:	2000      	movcs	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_fcmple>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffe0 	bl	8000dec <__aeabi_cfcmpeq>
 8000e2c:	bf94      	ite	ls
 8000e2e:	2001      	movls	r0, #1
 8000e30:	2000      	movhi	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_fcmpge>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffd2 	bl	8000de4 <__aeabi_cfrcmple>
 8000e40:	bf94      	ite	ls
 8000e42:	2001      	movls	r0, #1
 8000e44:	2000      	movhi	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_fcmpgt>:
 8000e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e50:	f7ff ffc8 	bl	8000de4 <__aeabi_cfrcmple>
 8000e54:	bf34      	ite	cc
 8000e56:	2001      	movcc	r0, #1
 8000e58:	2000      	movcs	r0, #0
 8000e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5e:	bf00      	nop

08000e60 <__aeabi_fcmpun>:
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	d102      	bne.n	8000e74 <__aeabi_fcmpun+0x14>
 8000e6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e72:	d108      	bne.n	8000e86 <__aeabi_fcmpun+0x26>
 8000e74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e78:	d102      	bne.n	8000e80 <__aeabi_fcmpun+0x20>
 8000e7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e7e:	d102      	bne.n	8000e86 <__aeabi_fcmpun+0x26>
 8000e80:	f04f 0000 	mov.w	r0, #0
 8000e84:	4770      	bx	lr
 8000e86:	f04f 0001 	mov.w	r0, #1
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_f2iz>:
 8000e8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e94:	d30f      	bcc.n	8000eb6 <__aeabi_f2iz+0x2a>
 8000e96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9e:	d90d      	bls.n	8000ebc <__aeabi_f2iz+0x30>
 8000ea0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000eac:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb0:	bf18      	it	ne
 8000eb2:	4240      	negne	r0, r0
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr
 8000ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_f2iz+0x3a>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d105      	bne.n	8000ed2 <__aeabi_f2iz+0x46>
 8000ec6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f04f 0000 	mov.w	r0, #0
 8000ed6:	4770      	bx	lr

08000ed8 <__aeabi_uldivmod>:
 8000ed8:	b953      	cbnz	r3, 8000ef0 <__aeabi_uldivmod+0x18>
 8000eda:	b94a      	cbnz	r2, 8000ef0 <__aeabi_uldivmod+0x18>
 8000edc:	2900      	cmp	r1, #0
 8000ede:	bf08      	it	eq
 8000ee0:	2800      	cmpeq	r0, #0
 8000ee2:	bf1c      	itt	ne
 8000ee4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ee8:	f04f 30ff 	movne.w	r0, #4294967295
 8000eec:	f000 b974 	b.w	80011d8 <__aeabi_idiv0>
 8000ef0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ef4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ef8:	f000 f806 	bl	8000f08 <__udivmoddi4>
 8000efc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f04:	b004      	add	sp, #16
 8000f06:	4770      	bx	lr

08000f08 <__udivmoddi4>:
 8000f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f0c:	9e08      	ldr	r6, [sp, #32]
 8000f0e:	460d      	mov	r5, r1
 8000f10:	4604      	mov	r4, r0
 8000f12:	4688      	mov	r8, r1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d14d      	bne.n	8000fb4 <__udivmoddi4+0xac>
 8000f18:	428a      	cmp	r2, r1
 8000f1a:	4694      	mov	ip, r2
 8000f1c:	d968      	bls.n	8000ff0 <__udivmoddi4+0xe8>
 8000f1e:	fab2 f282 	clz	r2, r2
 8000f22:	b152      	cbz	r2, 8000f3a <__udivmoddi4+0x32>
 8000f24:	fa01 f302 	lsl.w	r3, r1, r2
 8000f28:	f1c2 0120 	rsb	r1, r2, #32
 8000f2c:	fa20 f101 	lsr.w	r1, r0, r1
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	ea41 0803 	orr.w	r8, r1, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000f3e:	0c21      	lsrs	r1, r4, #16
 8000f40:	fbb8 fef5 	udiv	lr, r8, r5
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fb05 831e 	mls	r3, r5, lr, r8
 8000f4c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f50:	fb0e f107 	mul.w	r1, lr, r7
 8000f54:	4299      	cmp	r1, r3
 8000f56:	d90b      	bls.n	8000f70 <__udivmoddi4+0x68>
 8000f58:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000f60:	f080 811e 	bcs.w	80011a0 <__udivmoddi4+0x298>
 8000f64:	4299      	cmp	r1, r3
 8000f66:	f240 811b 	bls.w	80011a0 <__udivmoddi4+0x298>
 8000f6a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f0f5 	udiv	r0, r3, r5
 8000f78:	fb05 3310 	mls	r3, r5, r0, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb00 f707 	mul.w	r7, r0, r7
 8000f84:	42a7      	cmp	r7, r4
 8000f86:	d90a      	bls.n	8000f9e <__udivmoddi4+0x96>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f90:	f080 8108 	bcs.w	80011a4 <__udivmoddi4+0x29c>
 8000f94:	42a7      	cmp	r7, r4
 8000f96:	f240 8105 	bls.w	80011a4 <__udivmoddi4+0x29c>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	1be4      	subs	r4, r4, r7
 8000fa0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	b11e      	cbz	r6, 8000fb0 <__udivmoddi4+0xa8>
 8000fa8:	40d4      	lsrs	r4, r2
 8000faa:	2300      	movs	r3, #0
 8000fac:	e9c6 4300 	strd	r4, r3, [r6]
 8000fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0xc2>
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	f000 80ee 	beq.w	800119a <__udivmoddi4+0x292>
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	e9c6 0500 	strd	r0, r5, [r6]
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	fab3 f183 	clz	r1, r3
 8000fce:	2900      	cmp	r1, #0
 8000fd0:	d14a      	bne.n	8001068 <__udivmoddi4+0x160>
 8000fd2:	42ab      	cmp	r3, r5
 8000fd4:	d302      	bcc.n	8000fdc <__udivmoddi4+0xd4>
 8000fd6:	4282      	cmp	r2, r0
 8000fd8:	f200 80f9 	bhi.w	80011ce <__udivmoddi4+0x2c6>
 8000fdc:	1a84      	subs	r4, r0, r2
 8000fde:	eb65 0303 	sbc.w	r3, r5, r3
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	4698      	mov	r8, r3
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	d0e2      	beq.n	8000fb0 <__udivmoddi4+0xa8>
 8000fea:	e9c6 4800 	strd	r4, r8, [r6]
 8000fee:	e7df      	b.n	8000fb0 <__udivmoddi4+0xa8>
 8000ff0:	b902      	cbnz	r2, 8000ff4 <__udivmoddi4+0xec>
 8000ff2:	deff      	udf	#255	; 0xff
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	f040 8091 	bne.w	8001120 <__udivmoddi4+0x218>
 8000ffe:	eba1 050c 	sub.w	r5, r1, ip
 8001002:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001006:	fa1f fe8c 	uxth.w	lr, ip
 800100a:	2101      	movs	r1, #1
 800100c:	fbb5 f3f7 	udiv	r3, r5, r7
 8001010:	fb07 5013 	mls	r0, r7, r3, r5
 8001014:	0c25      	lsrs	r5, r4, #16
 8001016:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800101a:	fb0e f003 	mul.w	r0, lr, r3
 800101e:	42a8      	cmp	r0, r5
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x12c>
 8001022:	eb1c 0505 	adds.w	r5, ip, r5
 8001026:	f103 38ff 	add.w	r8, r3, #4294967295
 800102a:	d202      	bcs.n	8001032 <__udivmoddi4+0x12a>
 800102c:	42a8      	cmp	r0, r5
 800102e:	f200 80cb 	bhi.w	80011c8 <__udivmoddi4+0x2c0>
 8001032:	4643      	mov	r3, r8
 8001034:	1a2d      	subs	r5, r5, r0
 8001036:	b2a4      	uxth	r4, r4
 8001038:	fbb5 f0f7 	udiv	r0, r5, r7
 800103c:	fb07 5510 	mls	r5, r7, r0, r5
 8001040:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001044:	fb0e fe00 	mul.w	lr, lr, r0
 8001048:	45a6      	cmp	lr, r4
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x156>
 800104c:	eb1c 0404 	adds.w	r4, ip, r4
 8001050:	f100 35ff 	add.w	r5, r0, #4294967295
 8001054:	d202      	bcs.n	800105c <__udivmoddi4+0x154>
 8001056:	45a6      	cmp	lr, r4
 8001058:	f200 80bb 	bhi.w	80011d2 <__udivmoddi4+0x2ca>
 800105c:	4628      	mov	r0, r5
 800105e:	eba4 040e 	sub.w	r4, r4, lr
 8001062:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001066:	e79e      	b.n	8000fa6 <__udivmoddi4+0x9e>
 8001068:	f1c1 0720 	rsb	r7, r1, #32
 800106c:	408b      	lsls	r3, r1
 800106e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001072:	ea4c 0c03 	orr.w	ip, ip, r3
 8001076:	fa20 f407 	lsr.w	r4, r0, r7
 800107a:	fa05 f301 	lsl.w	r3, r5, r1
 800107e:	431c      	orrs	r4, r3
 8001080:	40fd      	lsrs	r5, r7
 8001082:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001086:	fa00 f301 	lsl.w	r3, r0, r1
 800108a:	fbb5 f8f9 	udiv	r8, r5, r9
 800108e:	0c20      	lsrs	r0, r4, #16
 8001090:	fa1f fe8c 	uxth.w	lr, ip
 8001094:	fb09 5518 	mls	r5, r9, r8, r5
 8001098:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800109c:	fb08 f00e 	mul.w	r0, r8, lr
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	fa02 f201 	lsl.w	r2, r2, r1
 80010a6:	d90b      	bls.n	80010c0 <__udivmoddi4+0x1b8>
 80010a8:	eb1c 0505 	adds.w	r5, ip, r5
 80010ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80010b0:	f080 8088 	bcs.w	80011c4 <__udivmoddi4+0x2bc>
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	f240 8085 	bls.w	80011c4 <__udivmoddi4+0x2bc>
 80010ba:	f1a8 0802 	sub.w	r8, r8, #2
 80010be:	4465      	add	r5, ip
 80010c0:	1a2d      	subs	r5, r5, r0
 80010c2:	b2a4      	uxth	r4, r4
 80010c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80010c8:	fb09 5510 	mls	r5, r9, r0, r5
 80010cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80010d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80010d4:	45ae      	cmp	lr, r5
 80010d6:	d908      	bls.n	80010ea <__udivmoddi4+0x1e2>
 80010d8:	eb1c 0505 	adds.w	r5, ip, r5
 80010dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80010e0:	d26c      	bcs.n	80011bc <__udivmoddi4+0x2b4>
 80010e2:	45ae      	cmp	lr, r5
 80010e4:	d96a      	bls.n	80011bc <__udivmoddi4+0x2b4>
 80010e6:	3802      	subs	r0, #2
 80010e8:	4465      	add	r5, ip
 80010ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010ee:	fba0 9402 	umull	r9, r4, r0, r2
 80010f2:	eba5 050e 	sub.w	r5, r5, lr
 80010f6:	42a5      	cmp	r5, r4
 80010f8:	46c8      	mov	r8, r9
 80010fa:	46a6      	mov	lr, r4
 80010fc:	d356      	bcc.n	80011ac <__udivmoddi4+0x2a4>
 80010fe:	d053      	beq.n	80011a8 <__udivmoddi4+0x2a0>
 8001100:	b15e      	cbz	r6, 800111a <__udivmoddi4+0x212>
 8001102:	ebb3 0208 	subs.w	r2, r3, r8
 8001106:	eb65 050e 	sbc.w	r5, r5, lr
 800110a:	fa05 f707 	lsl.w	r7, r5, r7
 800110e:	fa22 f301 	lsr.w	r3, r2, r1
 8001112:	40cd      	lsrs	r5, r1
 8001114:	431f      	orrs	r7, r3
 8001116:	e9c6 7500 	strd	r7, r5, [r6]
 800111a:	2100      	movs	r1, #0
 800111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001120:	f1c2 0320 	rsb	r3, r2, #32
 8001124:	fa20 f103 	lsr.w	r1, r0, r3
 8001128:	fa0c fc02 	lsl.w	ip, ip, r2
 800112c:	fa25 f303 	lsr.w	r3, r5, r3
 8001130:	4095      	lsls	r5, r2
 8001132:	430d      	orrs	r5, r1
 8001134:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001138:	fa1f fe8c 	uxth.w	lr, ip
 800113c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001140:	fb07 3011 	mls	r0, r7, r1, r3
 8001144:	0c2b      	lsrs	r3, r5, #16
 8001146:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800114a:	fb01 f00e 	mul.w	r0, r1, lr
 800114e:	4298      	cmp	r0, r3
 8001150:	fa04 f402 	lsl.w	r4, r4, r2
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x260>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f101 38ff 	add.w	r8, r1, #4294967295
 800115e:	d22f      	bcs.n	80011c0 <__udivmoddi4+0x2b8>
 8001160:	4298      	cmp	r0, r3
 8001162:	d92d      	bls.n	80011c0 <__udivmoddi4+0x2b8>
 8001164:	3902      	subs	r1, #2
 8001166:	4463      	add	r3, ip
 8001168:	1a1b      	subs	r3, r3, r0
 800116a:	b2ad      	uxth	r5, r5
 800116c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001170:	fb07 3310 	mls	r3, r7, r0, r3
 8001174:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001178:	fb00 f30e 	mul.w	r3, r0, lr
 800117c:	42ab      	cmp	r3, r5
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0x28a>
 8001180:	eb1c 0505 	adds.w	r5, ip, r5
 8001184:	f100 38ff 	add.w	r8, r0, #4294967295
 8001188:	d216      	bcs.n	80011b8 <__udivmoddi4+0x2b0>
 800118a:	42ab      	cmp	r3, r5
 800118c:	d914      	bls.n	80011b8 <__udivmoddi4+0x2b0>
 800118e:	3802      	subs	r0, #2
 8001190:	4465      	add	r5, ip
 8001192:	1aed      	subs	r5, r5, r3
 8001194:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001198:	e738      	b.n	800100c <__udivmoddi4+0x104>
 800119a:	4631      	mov	r1, r6
 800119c:	4630      	mov	r0, r6
 800119e:	e707      	b.n	8000fb0 <__udivmoddi4+0xa8>
 80011a0:	4686      	mov	lr, r0
 80011a2:	e6e5      	b.n	8000f70 <__udivmoddi4+0x68>
 80011a4:	4618      	mov	r0, r3
 80011a6:	e6fa      	b.n	8000f9e <__udivmoddi4+0x96>
 80011a8:	454b      	cmp	r3, r9
 80011aa:	d2a9      	bcs.n	8001100 <__udivmoddi4+0x1f8>
 80011ac:	ebb9 0802 	subs.w	r8, r9, r2
 80011b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011b4:	3801      	subs	r0, #1
 80011b6:	e7a3      	b.n	8001100 <__udivmoddi4+0x1f8>
 80011b8:	4640      	mov	r0, r8
 80011ba:	e7ea      	b.n	8001192 <__udivmoddi4+0x28a>
 80011bc:	4620      	mov	r0, r4
 80011be:	e794      	b.n	80010ea <__udivmoddi4+0x1e2>
 80011c0:	4641      	mov	r1, r8
 80011c2:	e7d1      	b.n	8001168 <__udivmoddi4+0x260>
 80011c4:	46d0      	mov	r8, sl
 80011c6:	e77b      	b.n	80010c0 <__udivmoddi4+0x1b8>
 80011c8:	3b02      	subs	r3, #2
 80011ca:	4465      	add	r5, ip
 80011cc:	e732      	b.n	8001034 <__udivmoddi4+0x12c>
 80011ce:	4608      	mov	r0, r1
 80011d0:	e709      	b.n	8000fe6 <__udivmoddi4+0xde>
 80011d2:	4464      	add	r4, ip
 80011d4:	3802      	subs	r0, #2
 80011d6:	e742      	b.n	800105e <__udivmoddi4+0x156>

080011d8 <__aeabi_idiv0>:
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <gpio_write>:
    };
    HAL_GPIO_Init(base, &conf);
    return STATUS_OK;
}

Status gpio_write(uint8_t pin, GpioValue value) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_pin = GPIO_PIN_TO_NUM[pin];
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <gpio_write+0x64>)
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_TypeDef *base = GPIO_PIN_TO_BASE[pin];
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <gpio_write+0x68>)
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitTypeDef conf = {
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	2301      	movs	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pin = gpio_pin,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(base, &conf);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	6a38      	ldr	r0, [r7, #32]
 8001224:	f002 fbf0 	bl	8003a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(base, gpio_pin, value);
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	b29b      	uxth	r3, r3
 800122c:	79ba      	ldrb	r2, [r7, #6]
 800122e:	4619      	mov	r1, r3
 8001230:	6a38      	ldr	r0, [r7, #32]
 8001232:	f002 fd49 	bl	8003cc8 <HAL_GPIO_WritePin>
    return STATUS_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200000c0 	.word	0x200000c0
 8001244:	20000000 	.word	0x20000000

08001248 <hab_program>:
float last_lon = NAN;

void fill_packet(APRSPacket* packet, float lat, float lon, int hdg, int spd_kt, int alt_ft);

void hab_program()
{
 8001248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af02      	add	r7, sp, #8
	aprs_packet.info = malloc(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f010 fb77 	bl	8011944 <malloc>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <hab_program+0xc8>)
 800125c:	60da      	str	r2, [r3, #12]
	APRS_init();
 800125e:	f001 fa2f 	bl	80026c0 <APRS_init>

	gpio_write(PIN_PB4, GPIO_HIGH);
 8001262:	2101      	movs	r1, #1
 8001264:	2014      	movs	r0, #20
 8001266:	f7ff ffb9 	bl	80011dc <gpio_write>
	DELAY(500);
 800126a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126e:	f000 f992 	bl	8001596 <DELAY>
	gpio_write(PIN_PB4, GPIO_LOW);
 8001272:	2100      	movs	r1, #0
 8001274:	2014      	movs	r0, #20
 8001276:	f7ff ffb1 	bl	80011dc <gpio_write>
	DELAY(500);
 800127a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127e:	f000 f98a 	bl	8001596 <DELAY>

	fill_packet(&aprs_packet, fix.lat, fix.lon, (int) fix.hdg, (int) (fix.ground_speed * 1.944), (int) (fix.height_msl * 3.281));
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <hab_program+0xcc>)
 8001284:	699c      	ldr	r4, [r3, #24]
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <hab_program+0xcc>)
 8001288:	695d      	ldr	r5, [r3, #20]
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <hab_program+0xcc>)
 800128c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fdfc 	bl	8000e8c <__aeabi_f2iz>
 8001294:	4680      	mov	r8, r0
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <hab_program+0xcc>)
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f92c 	bl	80004f8 <__aeabi_f2d>
 80012a0:	a317      	add	r3, pc, #92	; (adr r3, 8001300 <hab_program+0xb8>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff f97f 	bl	80005a8 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fc29 	bl	8000b08 <__aeabi_d2iz>
 80012b6:	4606      	mov	r6, r0
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <hab_program+0xcc>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f91b 	bl	80004f8 <__aeabi_f2d>
 80012c2:	a311      	add	r3, pc, #68	; (adr r3, 8001308 <hab_program+0xc0>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f96e 	bl	80005a8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc18 	bl	8000b08 <__aeabi_d2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9600      	str	r6, [sp, #0]
 80012de:	4643      	mov	r3, r8
 80012e0:	462a      	mov	r2, r5
 80012e2:	4621      	mov	r1, r4
 80012e4:	480a      	ldr	r0, [pc, #40]	; (8001310 <hab_program+0xc8>)
 80012e6:	f000 f819 	bl	800131c <fill_packet>
	APRS_encode(&aprs_fifo, &aprs_packet);
 80012ea:	4909      	ldr	r1, [pc, #36]	; (8001310 <hab_program+0xc8>)
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <hab_program+0xd0>)
 80012ee:	f001 f9ed 	bl	80026cc <APRS_encode>
	APRS_send(&aprs_fifo);
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <hab_program+0xd0>)
 80012f4:	f001 fac7 	bl	8002886 <APRS_send>
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001300:	be76c8b4 	.word	0xbe76c8b4
 8001304:	3fff1a9f 	.word	0x3fff1a9f
 8001308:	ed916873 	.word	0xed916873
 800130c:	400a3f7c 	.word	0x400a3f7c
 8001310:	20000180 	.word	0x20000180
 8001314:	20000480 	.word	0x20000480
 8001318:	20000470 	.word	0x20000470

0800131c <fill_packet>:

void fill_packet(APRSPacket* packet, float lat, float lon, int hdg, int spd_kt, int alt_ft)
{
 800131c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001320:	b096      	sub	sp, #88	; 0x58
 8001322:	af0a      	add	r7, sp, #40	; 0x28
 8001324:	6178      	str	r0, [r7, #20]
 8001326:	6139      	str	r1, [r7, #16]
 8001328:	60fa      	str	r2, [r7, #12]
 800132a:	60bb      	str	r3, [r7, #8]
	free(packet->info);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4618      	mov	r0, r3
 8001332:	f010 fb0f 	bl	8011954 <free>
	if(isnan(last_lat) || isnan(last_lon))
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <fill_packet+0x1f4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fd8f 	bl	8000e60 <__aeabi_fcmpun>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <fill_packet+0x3e>
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <fill_packet+0x1f8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd86 	bl	8000e60 <__aeabi_fcmpun>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d017      	beq.n	800138a <fill_packet+0x6e>
	{
		size_t info_size = snprintf(0, APRS_MAX_INFO, "@0000.00N\\0000.00W..../...");
 800135a:	4a6f      	ldr	r2, [pc, #444]	; (8001518 <fill_packet+0x1fc>)
 800135c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001360:	2000      	movs	r0, #0
 8001362:	f011 f85f 	bl	8012424 <sniprintf>
 8001366:	4603      	mov	r3, r0
 8001368:	61fb      	str	r3, [r7, #28]
		packet->info = malloc(info_size + 1);
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f010 fae8 	bl	8011944 <malloc>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	60da      	str	r2, [r3, #12]
		sprintf(packet->info, "@0000.00N\\0000.00W..../...");
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4965      	ldr	r1, [pc, #404]	; (8001518 <fill_packet+0x1fc>)
 8001382:	4618      	mov	r0, r3
 8001384:	f011 f882 	bl	801248c <siprintf>
	{
 8001388:	e0bc      	b.n	8001504 <fill_packet+0x1e8>
	}
	else
	{
		float lat_min = abs(lat - (int) lat) * 60;
 800138a:	6938      	ldr	r0, [r7, #16]
 800138c:	f7ff fd7e 	bl	8000e8c <__aeabi_f2iz>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc9a 	bl	8000ccc <__aeabi_i2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f7ff fbdf 	bl	8000b60 <__aeabi_fsub>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8a7 	bl	80004f8 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f010 fa99 	bl	80118e8 <abs>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4613      	mov	r3, r2
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fc83 	bl	8000ccc <__aeabi_i2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		float lon_min = abs(lon - (int) lon) * 60;
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff fd5e 	bl	8000e8c <__aeabi_f2iz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc7a 	bl	8000ccc <__aeabi_i2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	4619      	mov	r1, r3
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff fbbf 	bl	8000b60 <__aeabi_fsub>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f887 	bl	80004f8 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f010 fa79 	bl	80118e8 <abs>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4613      	mov	r3, r2
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fc63 	bl	8000ccc <__aeabi_i2f>
 8001406:	4603      	mov	r3, r0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
		char lat_dir = lat > 0 ? 'N' : 'S';
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	6938      	ldr	r0, [r7, #16]
 8001410:	f7ff fd1c 	bl	8000e4c <__aeabi_fcmpgt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <fill_packet+0x102>
 800141a:	234e      	movs	r3, #78	; 0x4e
 800141c:	e000      	b.n	8001420 <fill_packet+0x104>
 800141e:	2353      	movs	r3, #83	; 0x53
 8001420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char lon_dir = lon > 0 ? 'E' : 'W';
 8001424:	f04f 0100 	mov.w	r1, #0
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fd0f 	bl	8000e4c <__aeabi_fcmpgt>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <fill_packet+0x11c>
 8001434:	2345      	movs	r3, #69	; 0x45
 8001436:	e000      	b.n	800143a <fill_packet+0x11e>
 8001438:	2357      	movs	r3, #87	; 0x57
 800143a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		size_t info_size = snprintf(0, APRS_MAX_INFO, "@%2.2d%05.2f%c/%2.2d%05.2f%cO%03d/%03d/A=%06d",
 800143e:	6938      	ldr	r0, [r7, #16]
 8001440:	f7ff fd24 	bl	8000e8c <__aeabi_f2iz>
 8001444:	4680      	mov	r8, r0
 8001446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001448:	f7ff f856 	bl	80004f8 <__aeabi_f2d>
 800144c:	4604      	mov	r4, r0
 800144e:	460d      	mov	r5, r1
 8001450:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff fd19 	bl	8000e8c <__aeabi_f2iz>
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800145e:	f7ff f84b 	bl	80004f8 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800146a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800146c:	9009      	str	r0, [sp, #36]	; 0x24
 800146e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001470:	9008      	str	r0, [sp, #32]
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	9007      	str	r0, [sp, #28]
 8001476:	9106      	str	r1, [sp, #24]
 8001478:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	9303      	str	r3, [sp, #12]
 8001480:	9602      	str	r6, [sp, #8]
 8001482:	e9cd 4500 	strd	r4, r5, [sp]
 8001486:	4643      	mov	r3, r8
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <fill_packet+0x200>)
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	2000      	movs	r0, #0
 8001490:	f010 ffc8 	bl	8012424 <sniprintf>
 8001494:	4603      	mov	r3, r0
 8001496:	623b      	str	r3, [r7, #32]
				(int) lat, lat_min, lat_dir, (int) lon, lon_min, lon_dir,
				hdg, spd_kt, alt_ft);
		packet->info = malloc(info_size + 1);
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	3301      	adds	r3, #1
 800149c:	4618      	mov	r0, r3
 800149e:	f010 fa51 	bl	8011944 <malloc>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	60da      	str	r2, [r3, #12]
		sprintf(packet->info, "@%2.2d%05.2f%c/%2.2d%05.2f%cO%03d/%03d/A=%06d",
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	6938      	ldr	r0, [r7, #16]
 80014b2:	f7ff fceb 	bl	8000e8c <__aeabi_f2iz>
 80014b6:	4680      	mov	r8, r0
 80014b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014ba:	f7ff f81d 	bl	80004f8 <__aeabi_f2d>
 80014be:	4604      	mov	r4, r0
 80014c0:	460d      	mov	r5, r1
 80014c2:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff fce0 	bl	8000e8c <__aeabi_f2iz>
 80014cc:	6038      	str	r0, [r7, #0]
 80014ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014d0:	f7ff f812 	bl	80004f8 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014de:	9009      	str	r0, [sp, #36]	; 0x24
 80014e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80014e2:	9008      	str	r0, [sp, #32]
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	9007      	str	r0, [sp, #28]
 80014e8:	9106      	str	r1, [sp, #24]
 80014ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	9203      	str	r2, [sp, #12]
 80014f2:	9602      	str	r6, [sp, #8]
 80014f4:	e9cd 4500 	strd	r4, r5, [sp]
 80014f8:	4642      	mov	r2, r8
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <fill_packet+0x200>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f010 ffc5 	bl	801248c <siprintf>
				(int) lat, lat_min, lat_dir, (int) lon, lon_min, lon_dir,
				hdg, spd_kt, alt_ft);
	}
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3730      	adds	r7, #48	; 0x30
 8001508:	46bd      	mov	sp, r7
 800150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800150e:	bf00      	nop
 8001510:	20000190 	.word	0x20000190
 8001514:	20000194 	.word	0x20000194
 8001518:	0801488c 	.word	0x0801488c
 800151c:	080148a8 	.word	0x080148a8

08001520 <MICROS>:

    HAL_TIM_Base_Start(&tim2_handle);
    HAL_TIM_Base_Start(&tim1_handle);
};

uint64_t MICROS() {
 8001520:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
    uint64_t tim1_count = __HAL_TIM_GET_COUNTER(&tim1_handle);
 8001528:	4e11      	ldr	r6, [pc, #68]	; (8001570 <MICROS+0x50>)
 800152a:	6836      	ldr	r6, [r6, #0]
 800152c:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800152e:	f04f 0c00 	mov.w	ip, #0
 8001532:	46b0      	mov	r8, r6
 8001534:	46e1      	mov	r9, ip
 8001536:	e9c7 8902 	strd	r8, r9, [r7, #8]
    uint64_t tim2_count = __HAL_TIM_GET_COUNTER(&tim2_handle);
 800153a:	4e0e      	ldr	r6, [pc, #56]	; (8001574 <MICROS+0x54>)
 800153c:	6836      	ldr	r6, [r6, #0]
 800153e:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8001540:	f04f 0c00 	mov.w	ip, #0
 8001544:	4630      	mov	r0, r6
 8001546:	4661      	mov	r1, ip
 8001548:	e9c7 0100 	strd	r0, r1, [r7]
    return (tim2_count << 16) + tim1_count;
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	0c0b      	lsrs	r3, r1, #16
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	040a      	lsls	r2, r1, #16
 8001554:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001558:	1814      	adds	r4, r2, r0
 800155a:	eb43 0501 	adc.w	r5, r3, r1
 800155e:	4622      	mov	r2, r4
 8001560:	462b      	mov	r3, r5
}
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800156e:	4770      	bx	lr
 8001570:	200004cc 	.word	0x200004cc
 8001574:	20000518 	.word	0x20000518

08001578 <MILLIS>:

uint64_t MILLIS() { 
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    return MICROS() / 1000;
 800157c:	f7ff ffd0 	bl	8001520 <MICROS>
 8001580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f7ff fca6 	bl	8000ed8 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
}
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	bd80      	pop	{r7, pc}

08001596 <DELAY>:

void DELAY(uint16_t mS) {
 8001596:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
    uint64_t start = MILLIS();
 80015a2:	f7ff ffe9 	bl	8001578 <MILLIS>
 80015a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
    while(MILLIS() - start < mS);
 80015aa:	bf00      	nop
 80015ac:	f7ff ffe4 	bl	8001578 <MILLIS>
 80015b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015b4:	1a84      	subs	r4, r0, r2
 80015b6:	eb61 0503 	sbc.w	r5, r1, r3
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	2200      	movs	r2, #0
 80015be:	4698      	mov	r8, r3
 80015c0:	4691      	mov	r9, r2
 80015c2:	4544      	cmp	r4, r8
 80015c4:	eb75 0309 	sbcs.w	r3, r5, r9
 80015c8:	d3f0      	bcc.n	80015ac <DELAY+0x16>
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080015d6 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4313      	orrs	r3, r2
 800161c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4013      	ands	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163a:	f001 faf9 	bl	8002c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163e:	f000 f819 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001642:	f000 fa61 	bl	8001b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001646:	f000 fa4d 	bl	8001ae4 <MX_DMA_Init>
  MX_DAC_Init();
 800164a:	f000 f879 	bl	8001740 <MX_DAC_Init>
  MX_I2C1_Init();
 800164e:	f000 f8a9 	bl	80017a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 f8e7 	bl	8001824 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001656:	f000 f951 	bl	80018fc <MX_SPI1_Init>
  MX_TIM1_Init();
 800165a:	f000 f99f 	bl	800199c <MX_TIM1_Init>
  MX_TIM2_Init();
 800165e:	f000 f9f1 	bl	8001a44 <MX_TIM2_Init>
  MX_LoRaWAN_Init();
 8001662:	f005 fa6f 	bl	8006b44 <MX_LoRaWAN_Init>
  MX_LPTIM2_Init();
 8001666:	f000 f91d 	bl	80018a4 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  hab_program();
 800166a:	f7ff fded 	bl	8001248 <hab_program>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800166e:	f005 fa71 	bl	8006b54 <MX_LoRaWAN_Process>
 8001672:	e7fc      	b.n	800166e <main+0x38>

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09a      	sub	sp, #104	; 0x68
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	2248      	movs	r2, #72	; 0x48
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f010 f97c 	bl	8011980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <SystemClock_Config+0xc8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a2:	4a26      	ldr	r2, [pc, #152]	; (800173c <SystemClock_Config+0xc8>)
 80016a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <SystemClock_Config+0xc8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016b6:	2303      	movs	r3, #3
 80016b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80016ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	2303      	movs	r3, #3
 80016d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80016d6:	2310      	movs	r3, #16
 80016d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 80016da:	2306      	movs	r3, #6
 80016dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 f9ab 	bl	8004a50 <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001700:	f000 fa0f 	bl	8001b22 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001704:	234f      	movs	r3, #79	; 0x4f
 8001706:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2303      	movs	r3, #3
 800170a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	2102      	movs	r1, #2
 8001722:	4618      	mov	r0, r3
 8001724:	f003 fd16 	bl	8005154 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800172e:	f000 f9f8 	bl	8001b22 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3768      	adds	r7, #104	; 0x68
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	58000400 	.word	0x58000400

08001740 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2224      	movs	r2, #36	; 0x24
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f010 f917 	bl	8011980 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_DAC_Init+0x5c>)
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_DAC_Init+0x60>)
 8001756:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001758:	4810      	ldr	r0, [pc, #64]	; (800179c <MX_DAC_Init+0x5c>)
 800175a:	f001 fbfe 	bl	8002f5a <HAL_DAC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_DAC_Init+0x28>
  {
    Error_Handler();
 8001764:	f000 f9dd 	bl	8001b22 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_LPTIM2_OUT;
 800176c:	2332      	movs	r3, #50	; 0x32
 800176e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <MX_DAC_Init+0x5c>)
 8001784:	f001 fd1a 	bl	80031bc <HAL_DAC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_DAC_Init+0x52>
  {
    Error_Handler();
 800178e:	f000 f9c8 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000564 	.word	0x20000564
 80017a0:	40007400 	.word	0x40007400

080017a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_I2C1_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <MX_I2C1_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_I2C1_Init+0x74>)
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <MX_I2C1_Init+0x7c>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_I2C1_Init+0x74>)
 80017bc:	2201      	movs	r2, #1
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_I2C1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_I2C1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <MX_I2C1_Init+0x74>)
 80017e0:	f002 fa89 	bl	8003cf6 <HAL_I2C_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ea:	f000 f99a 	bl	8001b22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <MX_I2C1_Init+0x74>)
 80017f2:	f002 fb0f 	bl	8003e14 <HAL_I2CEx_ConfigAnalogFilter>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017fc:	f000 f991 	bl	8001b22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_I2C1_Init+0x74>)
 8001804:	f002 fb50 	bl	8003ea8 <HAL_I2CEx_ConfigDigitalFilter>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800180e:	f000 f988 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200005d8 	.word	0x200005d8
 800181c:	40005400 	.word	0x40005400
 8001820:	00303d5b 	.word	0x00303d5b

08001824 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_I2C2_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <MX_I2C2_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_I2C2_Init+0x74>)
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <MX_I2C2_Init+0x7c>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_I2C2_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_I2C2_Init+0x74>)
 800183c:	2201      	movs	r2, #1
 800183e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_I2C2_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_I2C2_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C2_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C2_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C2_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <MX_I2C2_Init+0x74>)
 8001860:	f002 fa49 	bl	8003cf6 <HAL_I2C_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800186a:	f000 f95a 	bl	8001b22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <MX_I2C2_Init+0x74>)
 8001872:	f002 facf 	bl	8003e14 <HAL_I2CEx_ConfigAnalogFilter>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 f951 	bl	8001b22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001880:	2100      	movs	r1, #0
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_I2C2_Init+0x74>)
 8001884:	f002 fb10 	bl	8003ea8 <HAL_I2CEx_ConfigDigitalFilter>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 f948 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000062c 	.word	0x2000062c
 800189c:	40005800 	.word	0x40005800
 80018a0:	00303d5b 	.word	0x00303d5b

080018a4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <MX_LPTIM2_Init+0x54>)
 80018ac:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c0:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_LPTIM2_Init+0x50>)
 80018e2:	f002 fb9d 	bl	8004020 <HAL_LPTIM_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f000 f919 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000680 	.word	0x20000680
 80018f8:	40009400 	.word	0x40009400

080018fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_SPI1_Init+0x74>)
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <MX_SPI1_Init+0x78>)
 8001904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_SPI1_Init+0x74>)
 8001908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800190c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_SPI1_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <MX_SPI1_Init+0x74>)
 8001916:	f44f 7240 	mov.w	r2, #768	; 0x300
 800191a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_SPI1_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <MX_SPI1_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_SPI1_Init+0x74>)
 800192a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_SPI1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_SPI1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_SPI1_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_SPI1_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_SPI1_Init+0x74>)
 800194a:	2207      	movs	r2, #7
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_SPI1_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_SPI1_Init+0x74>)
 8001956:	2208      	movs	r2, #8
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_SPI1_Init+0x74>)
 800195c:	f004 f892 	bl	8005a84 <HAL_SPI_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001966:	f000 f8dc 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200006bc 	.word	0x200006bc
 8001974:	40013000 	.word	0x40013000

08001978 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_SUBGHZ_Init+0x20>)
 800197e:	2210      	movs	r2, #16
 8001980:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_SUBGHZ_Init+0x20>)
 8001984:	f004 f9ec 	bl	8005d60 <HAL_SUBGHZ_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800198e:	f000 f8c8 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000720 	.word	0x20000720

0800199c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019bc:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <MX_TIM1_Init+0xa4>)
 80019be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019e6:	4815      	ldr	r0, [pc, #84]	; (8001a3c <MX_TIM1_Init+0xa0>)
 80019e8:	f004 fd5c 	bl	80064a4 <HAL_TIM_Base_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80019f2:	f000 f896 	bl	8001b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	480e      	ldr	r0, [pc, #56]	; (8001a3c <MX_TIM1_Init+0xa0>)
 8001a04:	f004 fda5 	bl	8006552 <HAL_TIM_ConfigClockSource>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a0e:	f000 f888 	bl	8001b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM1_Init+0xa0>)
 8001a24:	f005 f830 	bl	8006a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a2e:	f000 f878 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000072c 	.word	0x2000072c
 8001a40:	40012c00 	.word	0x40012c00

08001a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a8c:	4814      	ldr	r0, [pc, #80]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001a8e:	f004 fd09 	bl	80064a4 <HAL_TIM_Base_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001a98:	f000 f843 	bl	8001b22 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001aac:	f004 fe1a 	bl	80066e4 <HAL_TIM_SlaveConfigSynchro>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001ab6:	f000 f834 	bl	8001b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <MX_TIM2_Init+0x9c>)
 8001ac8:	f004 ffde 	bl	8006a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001ad2:	f000 f826 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000778 	.word	0x20000778

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7ff fd74 	bl	80015d6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fd71 	bl	80015d6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	200b      	movs	r0, #11
 8001afa:	f001 f9fa 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001afe:	200b      	movs	r0, #11
 8001b00:	f001 fa11 	bl	8002f26 <HAL_NVIC_EnableIRQ>

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7ff fd7a 	bl	8001606 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7ff fd77 	bl	8001606 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	2004      	movs	r0, #4
 8001b1a:	f7ff fd74 	bl	8001606 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b26:	b672      	cpsid	i
}
 8001b28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <Error_Handler+0x8>

08001b2c <LL_AHB2_GRP1_EnableClock>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be0:	68fb      	ldr	r3, [r7, #12]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c10:	68fb      	ldr	r3, [r7, #12]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_DAC_MspInit+0xac>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d140      	bne.n	8001ccc <HAL_DAC_MspInit+0xa4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c4a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001c4e:	f7ff ff85 	bl	8001b5c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2001      	movs	r0, #1
 8001c54:	f7ff ff6a 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
    /**DAC GPIO Configuration
    PA10     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f001 feca 	bl	8003a08 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_OUT1 Init */
    hdma_dac_out1.Instance = DMA1_Channel1;
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_DAC_MspInit+0xb4>)
 8001c78:	601a      	str	r2, [r3, #0]
    hdma_dac_out1.Init.Request = DMA_REQUEST_DAC_OUT1;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001c7c:	2206      	movs	r2, #6
 8001c7e:	605a      	str	r2, [r3, #4]
    hdma_dac_out1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001c82:	2210      	movs	r2, #16
 8001c84:	609a      	str	r2, [r3, #8]
    hdma_dac_out1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
    hdma_dac_out1.Init.MemInc = DMA_MINC_ENABLE;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	611a      	str	r2, [r3, #16]
    hdma_dac_out1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c98:	615a      	str	r2, [r3, #20]
    hdma_dac_out1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca0:	619a      	str	r2, [r3, #24]
    hdma_dac_out1.Init.Mode = DMA_CIRCULAR;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	61da      	str	r2, [r3, #28]
    hdma_dac_out1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001caa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001cae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_out1) != HAL_OK)
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001cb2:	f001 fbb5 	bl	8003420 <HAL_DMA_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_DAC_MspInit+0x98>
    {
      Error_Handler();
 8001cbc:	f7ff ff31 	bl	8001b22 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_out1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_DAC_MspInit+0xb0>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40007400 	.word	0x40007400
 8001cd8:	20000578 	.word	0x20000578
 8001cdc:	40020008 	.word	0x40020008

08001ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b096      	sub	sp, #88	; 0x58
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2238      	movs	r2, #56	; 0x38
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00f fe3d 	bl	8011980 <memset>
  if(hi2c->Instance==I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <HAL_I2C_MspInit+0xdc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d125      	bne.n	8001d5c <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_I2C_MspInit+0xe0>)
 8001d16:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fd97 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d28:	f7ff fefb 	bl	8001b22 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f7ff fefd 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d36:	2312      	movs	r3, #18
 8001d38:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d42:	2304      	movs	r3, #4
 8001d44:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	481d      	ldr	r0, [pc, #116]	; (8001dc4 <HAL_I2C_MspInit+0xe4>)
 8001d4e:	f001 fe5b 	bl	8003a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d52:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d56:	f7ff ff01 	bl	8001b5c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d5a:	e02b      	b.n	8001db4 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_I2C_MspInit+0xe8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d126      	bne.n	8001db4 <HAL_I2C_MspInit+0xd4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_I2C_MspInit+0xec>)
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fd6c 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_MspInit+0xa2>
      Error_Handler();
 8001d7e:	f7ff fed0 	bl	8001b22 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff fed2 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da8:	f001 fe2e 	bl	8003a08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001db0:	f7ff fed4 	bl	8001b5c <LL_APB1_GRP1_EnableClock>
}
 8001db4:	bf00      	nop
 8001db6:	3758      	adds	r7, #88	; 0x58
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40005400 	.word	0x40005400
 8001dc0:	00030200 	.word	0x00030200
 8001dc4:	48000400 	.word	0x48000400
 8001dc8:	40005800 	.word	0x40005800
 8001dcc:	000c0800 	.word	0x000c0800

08001dd0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	; 0x40
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	2238      	movs	r2, #56	; 0x38
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00f fdcd 	bl	8011980 <memset>
  if(hlptim->Instance==LPTIM2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_LPTIM_MspInit+0x50>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d112      	bne.n	8001e16 <HAL_LPTIM_MspInit+0x46>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8001df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8001df6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fd25 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8001e0c:	f7ff fe89 	bl	8001b22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001e10:	2020      	movs	r0, #32
 8001e12:	f7ff febb 	bl	8001b8c <LL_APB1_GRP2_EnableClock>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3740      	adds	r7, #64	; 0x40
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40009400 	.word	0x40009400

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_SPI_MspInit+0x58>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d116      	bne.n	8001e74 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e4a:	f7ff feb7 	bl	8001bbc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f7ff fe6c 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e54:	2338      	movs	r3, #56	; 0x38
 8001e56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e64:	2305      	movs	r3, #5
 8001e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <HAL_SPI_MspInit+0x5c>)
 8001e70:	f001 fdca 	bl	8003a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40013000 	.word	0x40013000
 8001e80:	48000400 	.word	0x48000400

08001e84 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7ff fead 	bl	8001bec <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_TIM_Base_MspInit+0x34>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d104      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001eb2:	f7ff fe83 	bl	8001bbc <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eb6:	e007      	b.n	8001ec8 <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec0:	d102      	bne.n	8001ec8 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7ff fe4a 	bl	8001b5c <LL_APB1_GRP1_EnableClock>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40012c00 	.word	0x40012c00

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1a:	f000 fee3 	bl	8002ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_out1);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <DMA1_Channel1_IRQHandler+0x10>)
 8001f2a:	f001 fbfd 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000578 	.word	0x20000578

08001f38 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <LL_FLASH_GetUDN+0x10>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	1fff7580 	.word	0x1fff7580

08001f4c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <LL_FLASH_GetDeviceID+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	1fff7584 	.word	0x1fff7584

08001f64 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <LL_FLASH_GetSTCompanyID+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	1fff7584 	.word	0x1fff7584

08001f7c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001f92:	79fb      	ldrb	r3, [r7, #7]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001fc2:	f7ff ffb9 	bl	8001f38 <LL_FLASH_GetUDN>
 8001fc6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d138      	bne.n	8002042 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001fd0:	f000 fe9a 	bl	8002d08 <HAL_GetUIDw0>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	f000 feab 	bl	8002d30 <HAL_GetUIDw2>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4423      	add	r3, r4
 8001fde:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001fe0:	f000 fe9c 	bl	8002d1c <HAL_GetUIDw1>
 8001fe4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	0e1a      	lsrs	r2, r3, #24
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3307      	adds	r3, #7
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	0c1a      	lsrs	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	0a1a      	lsrs	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3305      	adds	r3, #5
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0e1a      	lsrs	r2, r3, #24
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3303      	adds	r3, #3
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	0c1a      	lsrs	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3302      	adds	r3, #2
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	0a1a      	lsrs	r2, r3, #8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002040:	e031      	b.n	80020a6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3307      	adds	r3, #7
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	0a1a      	lsrs	r2, r3, #8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3306      	adds	r3, #6
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	0c1a      	lsrs	r2, r3, #16
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3305      	adds	r3, #5
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	0e1a      	lsrs	r2, r3, #24
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002070:	f7ff ff6c 	bl	8001f4c <LL_FLASH_GetDeviceID>
 8002074:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002080:	f7ff ff70 	bl	8001f64 <LL_FLASH_GetSTCompanyID>
 8002084:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3302      	adds	r3, #2
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	0a1a      	lsrs	r2, r3, #8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	701a      	strb	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80020ae:	b590      	push	{r4, r7, lr}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80020b6:	f7ff ff3f 	bl	8001f38 <LL_FLASH_GetUDN>
 80020ba:	4602      	mov	r2, r0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d10d      	bne.n	80020e6 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80020ca:	f000 fe1d 	bl	8002d08 <HAL_GetUIDw0>
 80020ce:	4604      	mov	r4, r0
 80020d0:	f000 fe24 	bl	8002d1c <HAL_GetUIDw1>
 80020d4:	4603      	mov	r3, r0
 80020d6:	405c      	eors	r4, r3
 80020d8:	f000 fe2a 	bl	8002d30 <HAL_GetUIDw2>
 80020dc:	4603      	mov	r3, r0
 80020de:	ea84 0203 	eor.w	r2, r4, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
	...

080020f0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_GetTick+0x24>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002102:	f000 f91c 	bl	800233e <TIMER_IF_GetTimerValue>
 8002106:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200007c4 	.word	0x200007c4

08002118 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f939 	bl	800239a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <_kill>:

int _kill(int pid, int sig)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002148:	f00f fbd2 	bl	80118f0 <__errno>
 800214c:	4603      	mov	r3, r0
 800214e:	2216      	movs	r2, #22
 8002150:	601a      	str	r2, [r3, #0]
  return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_exit>:

void _exit (int status)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002166:	f04f 31ff 	mov.w	r1, #4294967295
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffe7 	bl	800213e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002170:	e7fe      	b.n	8002170 <_exit+0x12>

08002172 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e00a      	b.n	800219a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002184:	f3af 8000 	nop.w
 8002188:	4601      	mov	r1, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	60ba      	str	r2, [r7, #8]
 8002190:	b2ca      	uxtb	r2, r1
 8002192:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	dbf0      	blt.n	8002184 <_read+0x12>
  }

  return len;
 80021a2:	687b      	ldr	r3, [r7, #4]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	e009      	b.n	80021d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	60ba      	str	r2, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dbf1      	blt.n	80021be <_write+0x12>
  }
  return len;
 80021da:	687b      	ldr	r3, [r7, #4]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_close>:

int _close(int file)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220a:	605a      	str	r2, [r3, #4]
  return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <_isatty>:

int _isatty(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <_sbrk+0x5c>)
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <_sbrk+0x60>)
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <_sbrk+0x64>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <_sbrk+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d207      	bcs.n	8002284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002274:	f00f fb3c 	bl	80118f0 <__errno>
 8002278:	4603      	mov	r3, r0
 800227a:	220c      	movs	r2, #12
 800227c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e009      	b.n	8002298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <_sbrk+0x64>)
 8002294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20010000 	.word	0x20010000
 80022a4:	00000400 	.word	0x00000400
 80022a8:	200007c8 	.word	0x200007c8
 80022ac:	200020d0 	.word	0x200020d0

080022b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80022c6:	79fb      	ldrb	r3, [r7, #7]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <TIMER_IF_SetTimerContext+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	200007cc 	.word	0x200007cc

08002314 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <TIMER_IF_GetTimerContext+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	200007cc 	.word	0x200007cc

08002328 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002348:	687b      	ldr	r3, [r7, #4]
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  return seconds;
 80023b8:	68fb      	ldr	r3, [r7, #12]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return ret;
 80023f2:	687b      	ldr	r3, [r7, #4]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return ret;
 8002408:	687b      	ldr	r3, [r7, #4]
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002416:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002418:	f7ff ff4a 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	; (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	; (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002442:	f00f fa5b 	bl	80118fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002446:	f7ff f8f6 	bl	8001636 <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   r0, =_estack
 800244c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000454 	.word	0x20000454
  ldr r2, =_sidata
 8002458:	0801555c 	.word	0x0801555c
  ldr r2, =_sbss
 800245c:	20000454 	.word	0x20000454
  ldr r4, =_ebss
 8002460:	200020cc 	.word	0x200020cc

08002464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC_IRQHandler>
	...

08002468 <AFSK_init>:

// global variables
bool AFSK_sending;

// functions
void AFSK_init() {
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	// Start sending
	gpio_write(TX_PTT_Pin, 1);
 800246c:	2101      	movs	r1, #1
 800246e:	200a      	movs	r0, #10
 8002470:	f7fe feb4 	bl	80011dc <gpio_write>
	HAL_LPTIM_Counter_Start(&hlptim2, 1250);
 8002474:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <AFSK_init+0x34>)
 800247a:	f001 fe99 	bl	80041b0 <HAL_LPTIM_Counter_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800247e:	2100      	movs	r1, #0
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <AFSK_init+0x38>)
 8002482:	f000 fd8c 	bl	8002f9e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DAC_REST);
 8002486:	237f      	movs	r3, #127	; 0x7f
 8002488:	2208      	movs	r2, #8
 800248a:	2100      	movs	r1, #0
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <AFSK_init+0x38>)
 800248e:	f000 fe6e 	bl	800316e <HAL_DAC_SetValue>
	AFSK_sending = false;
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <AFSK_init+0x3c>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000680 	.word	0x20000680
 80024a0:	20000564 	.word	0x20000564
 80024a4:	20000fd8 	.word	0x20000fd8

080024a8 <AFSK_send>:

bool AFSK_send(BitFIFO *bfifo) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
	if (AFSK_sending) {
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <AFSK_send+0x5c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <AFSK_send+0x14>
		return false;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e01e      	b.n	80024fa <AFSK_send+0x52>
	}

	send_fifo = bfifo;
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <AFSK_send+0x60>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
	phase = 0;
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <AFSK_send+0x64>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
	AFSK_sending = 1;
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <AFSK_send+0x5c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
	AFSK_send_fillbuff(send_buff, sizeof(send_buff));
 80024ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d2:	480f      	ldr	r0, [pc, #60]	; (8002510 <AFSK_send+0x68>)
 80024d4:	f000 f820 	bl	8002518 <AFSK_send_fillbuff>
	gpio_write(TX_PTT_Pin, 0);
 80024d8:	2100      	movs	r1, #0
 80024da:	200a      	movs	r0, #10
 80024dc:	f7fe fe7e 	bl	80011dc <gpio_write>
	DELAY(5);
 80024e0:	2005      	movs	r0, #5
 80024e2:	f7ff f858 	bl	8001596 <DELAY>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) send_buff, sizeof(send_buff), DAC_ALIGN_8B_R);
 80024e6:	2308      	movs	r3, #8
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <AFSK_send+0x68>)
 80024f0:	2100      	movs	r1, #0
 80024f2:	4808      	ldr	r0, [pc, #32]	; (8002514 <AFSK_send+0x6c>)
 80024f4:	f000 fd8c 	bl	8003010 <HAL_DAC_Start_DMA>

	return true;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000fd8 	.word	0x20000fd8
 8002508:	20000fd4 	.word	0x20000fd4
 800250c:	20000fd0 	.word	0x20000fd0
 8002510:	200007d0 	.word	0x200007d0
 8002514:	20000564 	.word	0x20000564

08002518 <AFSK_send_fillbuff>:

// private helpers
void AFSK_send_fillbuff(uint8_t *buff, uint32_t samples) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
	uint32_t sig_index = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < (samples >> SEND_FREQ_SHIFT); i++) {
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	e033      	b.n	8002594 <AFSK_send_fillbuff+0x7c>
		if (BitFIFO_is_empty(send_fifo)) {
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <AFSK_send_fillbuff+0xb0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fb30 	bl	8002b96 <BitFIFO_is_empty>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d131      	bne.n	80025a0 <AFSK_send_fillbuff+0x88>
			break;
		}

		uint32_t dph = BitFIFO_pop(send_fifo) ? DPH_MARK : DPH_SPACE;
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <AFSK_send_fillbuff+0xb0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fb57 	bl	8002bf4 <BitFIFO_pop>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <AFSK_send_fillbuff+0x3a>
 800254c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002550:	e000      	b.n	8002554 <AFSK_send_fillbuff+0x3c>
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <AFSK_send_fillbuff+0xb4>)
 8002554:	60fb      	str	r3, [r7, #12]
		for (sig_index = i << SEND_FREQ_SHIFT; sig_index < ((i + 1) << SEND_FREQ_SHIFT); sig_index++) {
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	015b      	lsls	r3, r3, #5
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e011      	b.n	8002582 <AFSK_send_fillbuff+0x6a>
			phase += dph;
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <AFSK_send_fillbuff+0xb8>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <AFSK_send_fillbuff+0xb8>)
 8002568:	6013      	str	r3, [r2, #0]
			buff[sig_index] = AFSK_SINE_LOOKUP[phase >> 24]; // 8-bit sine lookup
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <AFSK_send_fillbuff+0xb8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e1a      	lsrs	r2, r3, #24
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	440b      	add	r3, r1
 8002576:	4917      	ldr	r1, [pc, #92]	; (80025d4 <AFSK_send_fillbuff+0xbc>)
 8002578:	5c8a      	ldrb	r2, [r1, r2]
 800257a:	701a      	strb	r2, [r3, #0]
		for (sig_index = i << SEND_FREQ_SHIFT; sig_index < ((i + 1) << SEND_FREQ_SHIFT); sig_index++) {
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	3301      	adds	r3, #1
 8002586:	015b      	lsls	r3, r3, #5
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	429a      	cmp	r2, r3
 800258c:	d3e7      	bcc.n	800255e <AFSK_send_fillbuff+0x46>
	for (uint32_t i = 0; i < (samples >> SEND_FREQ_SHIFT); i++) {
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	3301      	adds	r3, #1
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	429a      	cmp	r2, r3
 800259c:	d3c6      	bcc.n	800252c <AFSK_send_fillbuff+0x14>
 800259e:	e009      	b.n	80025b4 <AFSK_send_fillbuff+0x9c>
			break;
 80025a0:	bf00      	nop
		}
	}

	for (; sig_index < samples; sig_index++) {
 80025a2:	e007      	b.n	80025b4 <AFSK_send_fillbuff+0x9c>
		buff[sig_index] = DAC_REST; // at rest level if no more bits to send
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	4413      	add	r3, r2
 80025aa:	227f      	movs	r2, #127	; 0x7f
 80025ac:	701a      	strb	r2, [r3, #0]
	for (; sig_index < samples; sig_index++) {
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3f3      	bcc.n	80025a4 <AFSK_send_fillbuff+0x8c>
	}
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000fd4 	.word	0x20000fd4
 80025cc:	0eaaaaab 	.word	0x0eaaaaab
 80025d0:	20000fd0 	.word	0x20000fd0
 80025d4:	080149fc 	.word	0x080149fc

080025d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:

// sending interrupts
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac_p) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	if (!AFSK_sending) {
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d011      	beq.n	8002612 <HAL_DAC_ConvHalfCpltCallbackCh1+0x3a>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80025ee:	2100      	movs	r1, #0
 80025f0:	4813      	ldr	r0, [pc, #76]	; (8002640 <HAL_DAC_ConvHalfCpltCallbackCh1+0x68>)
 80025f2:	f000 fd85 	bl	8003100 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // stopping DMA stops DAC too
 80025f6:	2100      	movs	r1, #0
 80025f8:	4811      	ldr	r0, [pc, #68]	; (8002640 <HAL_DAC_ConvHalfCpltCallbackCh1+0x68>)
 80025fa:	f000 fcd0 	bl	8002f9e <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DAC_REST);
 80025fe:	237f      	movs	r3, #127	; 0x7f
 8002600:	2208      	movs	r2, #8
 8002602:	2100      	movs	r1, #0
 8002604:	480e      	ldr	r0, [pc, #56]	; (8002640 <HAL_DAC_ConvHalfCpltCallbackCh1+0x68>)
 8002606:	f000 fdb2 	bl	800316e <HAL_DAC_SetValue>
		gpio_write(TX_PTT_Pin, 1);
 800260a:	2101      	movs	r1, #1
 800260c:	200a      	movs	r0, #10
 800260e:	f7fe fde5 	bl	80011dc <gpio_write>
	}

	AFSK_send_fillbuff(send_buff, sizeof(send_buff) >> 1);
 8002612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002616:	480b      	ldr	r0, [pc, #44]	; (8002644 <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 8002618:	f7ff ff7e 	bl	8002518 <AFSK_send_fillbuff>
	if (BitFIFO_is_empty(send_fifo)) {
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fab8 	bl	8002b96 <BitFIFO_is_empty>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_DAC_ConvHalfCpltCallbackCh1+0x5a>
		AFSK_sending = false;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
	}
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000fd8 	.word	0x20000fd8
 8002640:	20000564 	.word	0x20000564
 8002644:	200007d0 	.word	0x200007d0
 8002648:	20000fd4 	.word	0x20000fd4

0800264c <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac_p) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	if (!AFSK_sending) {
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_DAC_ConvCpltCallbackCh1+0x64>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f083 0301 	eor.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d011      	beq.n	8002686 <HAL_DAC_ConvCpltCallbackCh1+0x3a>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002662:	2100      	movs	r1, #0
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <HAL_DAC_ConvCpltCallbackCh1+0x68>)
 8002666:	f000 fd4b 	bl	8003100 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // stopping DMA stops DAC too
 800266a:	2100      	movs	r1, #0
 800266c:	4811      	ldr	r0, [pc, #68]	; (80026b4 <HAL_DAC_ConvCpltCallbackCh1+0x68>)
 800266e:	f000 fc96 	bl	8002f9e <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DAC_REST);
 8002672:	237f      	movs	r3, #127	; 0x7f
 8002674:	2208      	movs	r2, #8
 8002676:	2100      	movs	r1, #0
 8002678:	480e      	ldr	r0, [pc, #56]	; (80026b4 <HAL_DAC_ConvCpltCallbackCh1+0x68>)
 800267a:	f000 fd78 	bl	800316e <HAL_DAC_SetValue>
		gpio_write(TX_PTT_Pin, 1);
 800267e:	2101      	movs	r1, #1
 8002680:	200a      	movs	r0, #10
 8002682:	f7fe fdab 	bl	80011dc <gpio_write>
	}

	AFSK_send_fillbuff(send_buff + (sizeof(send_buff) >> 1), sizeof(send_buff) >> 1);
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8002688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff43 	bl	8002518 <AFSK_send_fillbuff>
	if (BitFIFO_is_empty(send_fifo)) {
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fa7d 	bl	8002b96 <BitFIFO_is_empty>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_DAC_ConvCpltCallbackCh1+0x5c>
		AFSK_sending = false;
 80026a2:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_DAC_ConvCpltCallbackCh1+0x64>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
	}
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000fd8 	.word	0x20000fd8
 80026b4:	20000564 	.word	0x20000564
 80026b8:	20000bd0 	.word	0x20000bd0
 80026bc:	20000fd4 	.word	0x20000fd4

080026c0 <APRS_init>:
	.digi     = "WIDE1-1,WIDE2-2",
	.info     = "Test Packet"
};

// public functions
void APRS_init() {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	AFSK_init();
 80026c4:	f7ff fed0 	bl	8002468 <AFSK_init>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <APRS_encode>:

void APRS_print(APRSPacket *pack) {
	printf("DEST: %s | SRC: %s | DIGI: %s | %s\r\n", pack->dest, pack->callsign, pack->digi, pack->info);
}

void APRS_encode(BitFIFO *bfifo, APRSPacket *pack) {
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b08b      	sub	sp, #44	; 0x2c
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
	if (strlen(pack->info) > 256) {
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fd50 	bl	8000180 <strlen>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d901      	bls.n	80026ec <APRS_encode+0x20>
		Error_Handler();
 80026e8:	f7ff fa1b 	bl	8001b22 <Error_Handler>
	}

	for (uint8_t i = 0; i < (APRS_PREFLAGS + 1); i++) { // preflags
 80026ec:	2300      	movs	r3, #0
 80026ee:	77fb      	strb	r3, [r7, #31]
 80026f0:	e006      	b.n	8002700 <APRS_encode+0x34>
		APRS_encode_insert_byte(bfifo, 0b10000000);
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f8f5 	bl	80028e4 <APRS_encode_insert_byte>
	for (uint8_t i = 0; i < (APRS_PREFLAGS + 1); i++) { // preflags
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	3301      	adds	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
 8002700:	7ffb      	ldrb	r3, [r7, #31]
 8002702:	2b28      	cmp	r3, #40	; 0x28
 8002704:	d9f5      	bls.n	80026f2 <APRS_encode+0x26>
	}
	uint8_t stuff_count = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	73bb      	strb	r3, [r7, #14]
	uint16_t crc = 0xFFFF;
 800270a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800270e:	81bb      	strh	r3, [r7, #12]
	bool curr_nrzi = true;
 8002710:	2301      	movs	r3, #1
 8002712:	72fb      	strb	r3, [r7, #11]

	APRS_encode_insert_callsign(bfifo, pack->dest, &stuff_count, &curr_nrzi, &crc, 0); // destination
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	f107 000b 	add.w	r0, r7, #11
 800271c:	f107 020e 	add.w	r2, r7, #14
 8002720:	2300      	movs	r3, #0
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4603      	mov	r3, r0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f974 	bl	8002a1a <APRS_encode_insert_callsign>
	APRS_encode_insert_callsign(bfifo, pack->callsign, &stuff_count, &curr_nrzi, &crc, 0); // callsign
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	f107 000b 	add.w	r0, r7, #11
 800273a:	f107 020e 	add.w	r2, r7, #14
 800273e:	2300      	movs	r3, #0
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	4603      	mov	r3, r0
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f965 	bl	8002a1a <APRS_encode_insert_callsign>

	// assumes at least 1 digipeater
	char *digi = pack->digi;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	61bb      	str	r3, [r7, #24]
	uint32_t digidex = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
	uint8_t digiend = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	74fb      	strb	r3, [r7, #19]
	while (!digiend) {
 800275e:	e028      	b.n	80027b2 <APRS_encode+0xe6>
		while (digi[digidex] >= '-') { // assumes ',' delimiter
			digidex++;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
		while (digi[digidex] >= '-') { // assumes ',' delimiter
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b2c      	cmp	r3, #44	; 0x2c
 8002770:	d8f6      	bhi.n	8002760 <APRS_encode+0x94>
		}
		if (digi[digidex] == 0) { // reached end
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	4413      	add	r3, r2
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <APRS_encode+0xb6>
			digiend = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	74fb      	strb	r3, [r7, #19]
		}
		APRS_encode_insert_callsign(bfifo, digi, &stuff_count, &curr_nrzi, &crc, digiend);
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f107 010b 	add.w	r1, r7, #11
 8002792:	f107 020e 	add.w	r2, r7, #14
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	460b      	mov	r3, r1
 80027a0:	69b9      	ldr	r1, [r7, #24]
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f939 	bl	8002a1a <APRS_encode_insert_callsign>
		digi += digidex + 1;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3301      	adds	r3, #1
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
	while (!digiend) {
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0d6      	beq.n	8002766 <APRS_encode+0x9a>
	}

	APRS_encode_stuff_byte_update_fcs(bfifo, 0x03, &stuff_count, &curr_nrzi, &crc); // control field
 80027b8:	f107 010b 	add.w	r1, r7, #11
 80027bc:	f107 020e 	add.w	r2, r7, #14
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	460b      	mov	r3, r1
 80027c8:	2103      	movs	r1, #3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f90e 	bl	80029ec <APRS_encode_stuff_byte_update_fcs>
	APRS_encode_stuff_byte_update_fcs(bfifo, 0xF0, &stuff_count, &curr_nrzi, &crc); // id
 80027d0:	f107 010b 	add.w	r1, r7, #11
 80027d4:	f107 020e 	add.w	r2, r7, #14
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	460b      	mov	r3, r1
 80027e0:	21f0      	movs	r1, #240	; 0xf0
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f902 	bl	80029ec <APRS_encode_stuff_byte_update_fcs>

	for (uint16_t i = 0; i < strlen(pack->info); i++) { // info
 80027e8:	2300      	movs	r3, #0
 80027ea:	823b      	strh	r3, [r7, #16]
 80027ec:	e012      	b.n	8002814 <APRS_encode+0x148>
		APRS_encode_stuff_byte_update_fcs(bfifo, pack->info[i], &stuff_count, &curr_nrzi, &crc);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	8a3b      	ldrh	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	7819      	ldrb	r1, [r3, #0]
 80027f8:	f107 000b 	add.w	r0, r7, #11
 80027fc:	f107 020e 	add.w	r2, r7, #14
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4603      	mov	r3, r0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8ef 	bl	80029ec <APRS_encode_stuff_byte_update_fcs>
	for (uint16_t i = 0; i < strlen(pack->info); i++) { // info
 800280e:	8a3b      	ldrh	r3, [r7, #16]
 8002810:	3301      	adds	r3, #1
 8002812:	823b      	strh	r3, [r7, #16]
 8002814:	8a3c      	ldrh	r4, [r7, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fcb0 	bl	8000180 <strlen>
 8002820:	4603      	mov	r3, r0
 8002822:	429c      	cmp	r4, r3
 8002824:	d3e3      	bcc.n	80027ee <APRS_encode+0x122>
	}

	crc = ~crc; // don't forget this
 8002826:	89bb      	ldrh	r3, [r7, #12]
 8002828:	43db      	mvns	r3, r3
 800282a:	b29b      	uxth	r3, r3
 800282c:	81bb      	strh	r3, [r7, #12]
	APRS_encode_stuff_byte(bfifo, crc & 0xFF, &stuff_count, &curr_nrzi); // FCS, LSB first
 800282e:	89bb      	ldrh	r3, [r7, #12]
 8002830:	b2d9      	uxtb	r1, r3
 8002832:	f107 030b 	add.w	r3, r7, #11
 8002836:	f107 020e 	add.w	r2, r7, #14
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f871 	bl	8002922 <APRS_encode_stuff_byte>
	APRS_encode_stuff_byte(bfifo, crc >> 8, &stuff_count, &curr_nrzi);
 8002840:	89bb      	ldrh	r3, [r7, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	f107 030b 	add.w	r3, r7, #11
 800284c:	f107 020e 	add.w	r2, r7, #14
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f866 	bl	8002922 <APRS_encode_stuff_byte>

	for (uint8_t i = 0; i < (APRS_POSTFLAGS + 1); i++) { // postflags
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e00c      	b.n	8002876 <APRS_encode+0x1aa>
		APRS_encode_insert_byte(bfifo, curr_nrzi ? 0b10000000 : 0b01111111);
 800285c:	7afb      	ldrb	r3, [r7, #11]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <APRS_encode+0x19a>
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	e000      	b.n	8002868 <APRS_encode+0x19c>
 8002866:	237f      	movs	r3, #127	; 0x7f
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f83a 	bl	80028e4 <APRS_encode_insert_byte>
	for (uint8_t i = 0; i < (APRS_POSTFLAGS + 1); i++) { // postflags
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	3301      	adds	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b28      	cmp	r3, #40	; 0x28
 800287a:	d9ef      	bls.n	800285c <APRS_encode+0x190>
	}
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}

08002886 <APRS_send>:

bool APRS_send(BitFIFO *bfifo) {
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	return AFSK_send(bfifo);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fe0a 	bl	80024a8 <AFSK_send>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2db      	uxtb	r3, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <APRS_update_fcs>:

// private helpers
void APRS_update_fcs(uint8_t b, uint16_t *crc) {
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
	*crc = ((*crc) >> 8) ^ APRS_CCITT_LOOKUP[((*crc) ^ b) & 0xFF];
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	404b      	eors	r3, r1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4905      	ldr	r1, [pc, #20]	; (80028e0 <APRS_update_fcs+0x38>)
 80028ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80028ce:	4053      	eors	r3, r2
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	801a      	strh	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	08014afc 	.word	0x08014afc

080028e4 <APRS_encode_insert_byte>:

void APRS_encode_insert_byte(BitFIFO *bfifo, uint8_t b) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < 8; i++) {
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e00d      	b.n	8002912 <APRS_encode_insert_byte+0x2e>
		BitFIFO_push(bfifo, b & 0x01); // LSB first
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f95a 	bl	8002bba <BitFIFO_push>
		b >>= 1;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < 8; i++) {
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	3301      	adds	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b07      	cmp	r3, #7
 8002916:	d9ee      	bls.n	80028f6 <APRS_encode_insert_byte+0x12>
	}
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <APRS_encode_stuff_byte>:

void APRS_encode_stuff_byte(BitFIFO *bfifo, uint8_t b, uint8_t *stuff_count, bool *curr_nrzi) {
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	460b      	mov	r3, r1
 8002930:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i = 0; i < 8; i++) {
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
 8002936:	e051      	b.n	80029dc <APRS_encode_stuff_byte+0xba>
		if (b & 0x01) {
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <APRS_encode_stuff_byte+0x3a>
			*stuff_count += 1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	701a      	strb	r2, [r3, #0]
			BitFIFO_push(bfifo, *curr_nrzi); // add 1
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	4619      	mov	r1, r3
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f930 	bl	8002bba <BitFIFO_push>
 800295a:	e01a      	b.n	8002992 <APRS_encode_stuff_byte+0x70>
		} else {
			*stuff_count = 0;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
			BitFIFO_push(bfifo, !*curr_nrzi); // add 0
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f923 	bl	8002bba <BitFIFO_push>
			*curr_nrzi = !*curr_nrzi;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	701a      	strb	r2, [r3, #0]
		}
		if (*stuff_count == 5) {
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d11a      	bne.n	80029d0 <APRS_encode_stuff_byte+0xae>
			*stuff_count = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
			BitFIFO_push(bfifo, !*curr_nrzi); // add 0
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f083 0301 	eor.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4619      	mov	r1, r3
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f904 	bl	8002bba <BitFIFO_push>
			*curr_nrzi = !*curr_nrzi;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bf14      	ite	ne
 80029ba:	2301      	movne	r3, #1
 80029bc:	2300      	moveq	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f083 0301 	eor.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	701a      	strb	r2, [r3, #0]
		}
		b >>= 1;
 80029d0:	7afb      	ldrb	r3, [r7, #11]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i = 0; i < 8; i++) {
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	3301      	adds	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d9aa      	bls.n	8002938 <APRS_encode_stuff_byte+0x16>
	}
}
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <APRS_encode_stuff_byte_update_fcs>:

void APRS_encode_stuff_byte_update_fcs(BitFIFO *bfifo, uint8_t b, uint8_t *stuff_count, bool *curr_nrzi, uint16_t *crc) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	460b      	mov	r3, r1
 80029fa:	72fb      	strb	r3, [r7, #11]
	APRS_encode_stuff_byte(bfifo, b, stuff_count, curr_nrzi);
 80029fc:	7af9      	ldrb	r1, [r7, #11]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff8d 	bl	8002922 <APRS_encode_stuff_byte>
	APRS_update_fcs(b, crc);
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff4b 	bl	80028a8 <APRS_update_fcs>
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <APRS_encode_insert_callsign>:

void APRS_encode_insert_callsign(BitFIFO *bfifo, char *sign, uint8_t *stuff_count, bool *curr_nrzi, uint16_t *crc, bool end) {
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b088      	sub	sp, #32
 8002a1e:	af02      	add	r7, sp, #8
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
	// auto-terminates at ',' or '\0'
	uint8_t c = 0, ssid = 1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	75fb      	strb	r3, [r7, #23]
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75bb      	strb	r3, [r7, #22]
	while (*sign) {
 8002a30:	e017      	b.n	8002a62 <APRS_encode_insert_callsign+0x48>
		if (*sign == '-') {
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b2d      	cmp	r3, #45	; 0x2d
 8002a38:	d102      	bne.n	8002a40 <APRS_encode_insert_callsign+0x26>
			ssid = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	75bb      	strb	r3, [r7, #22]
			break;
 8002a3e:	e014      	b.n	8002a6a <APRS_encode_insert_callsign+0x50>
		}
		APRS_encode_stuff_byte_update_fcs(bfifo, *sign << 1, stuff_count, curr_nrzi, crc);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	b2d9      	uxtb	r1, r3
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ffcb 	bl	80029ec <APRS_encode_stuff_byte_update_fcs>
		c++;
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
		sign++;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
	while (*sign) {
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <APRS_encode_insert_callsign+0x18>
	}
	for (; c < 6; c++) { // pad to 6 bytes
 8002a6a:	e00a      	b.n	8002a82 <APRS_encode_insert_callsign+0x68>
		APRS_encode_stuff_byte_update_fcs(bfifo, ' ' << 1, stuff_count, curr_nrzi, crc);
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	2140      	movs	r1, #64	; 0x40
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ffb8 	bl	80029ec <APRS_encode_stuff_byte_update_fcs>
	for (; c < 6; c++) { // pad to 6 bytes
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d9f1      	bls.n	8002a6c <APRS_encode_insert_callsign+0x52>
	}
	if (ssid) {
 8002a88:	7dbb      	ldrb	r3, [r7, #22]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <APRS_encode_insert_callsign+0x7a>
		ssid = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75bb      	strb	r3, [r7, #22]
 8002a92:	e00f      	b.n	8002ab4 <APRS_encode_insert_callsign+0x9a>
	} else if (*(sign+2) >= '0') { // assumes ',' delimiter, otherwise need  <= '9' also
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3302      	adds	r3, #2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b2f      	cmp	r3, #47	; 0x2f
 8002a9c:	d905      	bls.n	8002aaa <APRS_encode_insert_callsign+0x90>
		ssid = 10 + (*(sign+2) - '0');
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3b26      	subs	r3, #38	; 0x26
 8002aa6:	75bb      	strb	r3, [r7, #22]
 8002aa8:	e004      	b.n	8002ab4 <APRS_encode_insert_callsign+0x9a>
	} else {
		ssid = *(sign+1) - '0';
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3301      	adds	r3, #1
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	3b30      	subs	r3, #48	; 0x30
 8002ab2:	75bb      	strb	r3, [r7, #22]
	}
	APRS_encode_stuff_byte_update_fcs(bfifo, ((0b0110000 | ssid) << 1) | end, stuff_count, curr_nrzi, crc);
 8002ab4:	7dbb      	ldrb	r3, [r7, #22]
 8002ab6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	b25a      	sxtb	r2, r3
 8002ac0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	b2d9      	uxtb	r1, r3
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff ff8a 	bl	80029ec <APRS_encode_stuff_byte_update_fcs>
}
 8002ad8:	bf00      	nop
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <BitFIFO_get>:
 */

#include "BitFIFO.h"

// bitarray implementation from http://www.mathcs.emory.edu/~cheung/Courses/255/Syllabus/1-C-intro/bit-array.html
static uint8_t BitFIFO_get(BitFIFO *bfifo, uint32_t i) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
	return bfifo->arr[i >> 3] & (1 << (i%8));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25a      	sxtb	r2, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	4013      	ands	r3, r2
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <BitFIFO_set>:

static void BitFIFO_set(BitFIFO *bfifo, uint32_t i, uint8_t val) {
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71fb      	strb	r3, [r7, #7]
	if (val) {
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d017      	beq.n	8002b5a <BitFIFO_set+0x44>
		bfifo->arr[i >> 3] |= 1 << (i%8);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b25a      	sxtb	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b259      	sxtb	r1, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	b2ca      	uxtb	r2, r1
 8002b56:	701a      	strb	r2, [r3, #0]
	} else {
		bfifo->arr[i >> 3] &= ~(1 << (i%8));
	}
}
 8002b58:	e018      	b.n	8002b8c <BitFIFO_set+0x76>
		bfifo->arr[i >> 3] &= ~(1 << (i%8));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b25a      	sxtb	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b259      	sxtb	r1, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	b2ca      	uxtb	r2, r1
 8002b8a:	701a      	strb	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <BitFIFO_is_empty>:
void BitFIFO_reinit(BitFIFO *bfifo) {
	bfifo->start = 0;
	bfifo->end = 0;
}

bool BitFIFO_is_empty(BitFIFO *bfifo) {
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
	return bfifo->start == bfifo->end;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <BitFIFO_push>:

void BitFIFO_push(BitFIFO *bfifo, uint8_t val) {
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
	BitFIFO_set(bfifo, bfifo->end, val);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffa1 	bl	8002b16 <BitFIFO_set>
	bfifo->end = (bfifo->end + 1) % bfifo->size;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6852      	ldr	r2, [r2, #4]
 8002bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8002be2:	fb01 f202 	mul.w	r2, r1, r2
 8002be6:	1a9a      	subs	r2, r3, r2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
#ifdef BITFIFO_DEBUG
	if (bfifo->start == bfifo->end) { // wrapped around, so is full
		Error_Handler();
	}
#endif
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <BitFIFO_pop>:

uint8_t BitFIFO_pop(BitFIFO *bfifo) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	if (bfifo->start == bfifo->end) {
		Error_Handler();
	}
#endif

	uint8_t val = BitFIFO_get(bfifo, bfifo->start);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ff6c 	bl	8002ae0 <BitFIFO_get>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]
	bfifo->start = (bfifo->start + 1) % bfifo->size;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	3301      	adds	r3, #1
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6852      	ldr	r2, [r2, #4]
 8002c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c1a:	fb01 f202 	mul.w	r2, r1, r2
 8002c1e:	1a9a      	subs	r2, r3, r2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
	return val;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f000 f94e 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c40:	f002 fc4c 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_Init+0x3c>)
 8002c48:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c4a:	200f      	movs	r0, #15
 8002c4c:	f000 f810 	bl	8002c70 <HAL_InitTick>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	71fb      	strb	r3, [r7, #7]
 8002c5a:	e001      	b.n	8002c60 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c5c:	f7fe ffde 	bl	8001c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c60:	79fb      	ldrb	r3, [r7, #7]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000198 	.word	0x20000198

08002c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c7c:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_InitTick+0x6c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d024      	beq.n	8002cce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c84:	f002 fc2a 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_InitTick+0x6c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c94:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f950 	bl	8002f42 <HAL_SYSTICK_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	d809      	bhi.n	8002cc2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb6:	f000 f91c 	bl	8002ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_InitTick+0x70>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e007      	b.n	8002cd2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e004      	b.n	8002cd2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e001      	b.n	8002cd2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200001a0 	.word	0x200001a0
 8002ce0:	2000019c 	.word	0x2000019c

08002ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_IncTick+0x1c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_IncTick+0x20>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a03      	ldr	r2, [pc, #12]	; (8002d04 <HAL_IncTick+0x20>)
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	200001a0 	.word	0x200001a0
 8002d04:	20000fdc 	.word	0x20000fdc

08002d08 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002d0c:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <HAL_GetUIDw0+0x10>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	1fff7590 	.word	0x1fff7590

08002d1c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <HAL_GetUIDw1+0x10>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	1fff7594 	.word	0x1fff7594

08002d30 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_GetUIDw2+0x10>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	1fff7598 	.word	0x1fff7598

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4906      	ldr	r1, [pc, #24]	; (8002ddc <__NVIC_EnableIRQ+0x34>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	db0a      	blt.n	8002e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <__NVIC_SetPriority+0x4c>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	440b      	add	r3, r1
 8002e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e08:	e00a      	b.n	8002e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <__NVIC_SetPriority+0x50>)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	3b04      	subs	r3, #4
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	761a      	strb	r2, [r3, #24]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f1c3 0307 	rsb	r3, r3, #7
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	bf28      	it	cs
 8002e52:	2304      	movcs	r3, #4
 8002e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d902      	bls.n	8002e64 <NVIC_EncodePriority+0x30>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3b03      	subs	r3, #3
 8002e62:	e000      	b.n	8002e66 <NVIC_EncodePriority+0x32>
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43d9      	mvns	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	4313      	orrs	r3, r2
         );
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	f7ff ff90 	bl	8002de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff2d 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f00:	f7ff ff44 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f7ff ff92 	bl	8002e34 <NVIC_EncodePriority>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff61 	bl	8002de0 <__NVIC_SetPriority>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff37 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffa4 	bl	8002e98 <SysTick_Config>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e014      	b.n	8002f96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	791b      	ldrb	r3, [r3, #4]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe fe53 	bl	8001c28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_DAC_Start>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	795b      	ldrb	r3, [r3, #5]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_DAC_Start+0x16>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e027      	b.n	8003004 <HAL_DAC_Start+0x66>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_DAC_Start+0x58>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	605a      	str	r2, [r3, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
	...

08003010 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	795b      	ldrb	r3, [r3, #5]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_DAC_Start_DMA+0x1e>
 800302a:	2302      	movs	r3, #2
 800302c:	e05e      	b.n	80030ec <HAL_DAC_Start_DMA+0xdc>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2202      	movs	r2, #2
 8003038:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d129      	bne.n	8003094 <HAL_DAC_Start_DMA+0x84>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <HAL_DAC_Start_DMA+0xe4>)
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a2a      	ldr	r2, [pc, #168]	; (80030f8 <HAL_DAC_Start_DMA+0xe8>)
 800304e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a29      	ldr	r2, [pc, #164]	; (80030fc <HAL_DAC_Start_DMA+0xec>)
 8003056:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003066:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_DAC_Start_DMA+0x66>
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d005      	beq.n	8003080 <HAL_DAC_Start_DMA+0x70>
 8003074:	e009      	b.n	800308a <HAL_DAC_Start_DMA+0x7a>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3308      	adds	r3, #8
 800307c:	617b      	str	r3, [r7, #20]
        break;
 800307e:	e00a      	b.n	8003096 <HAL_DAC_Start_DMA+0x86>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	617b      	str	r3, [r7, #20]
        break;
 8003088:	e005      	b.n	8003096 <HAL_DAC_Start_DMA+0x86>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3310      	adds	r3, #16
 8003090:	617b      	str	r3, [r7, #20]
        break;
 8003092:	e000      	b.n	8003096 <HAL_DAC_Start_DMA+0x86>
    }
  }
 8003094:	bf00      	nop

  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a4:	601a      	str	r2, [r3, #0]

  /* Enable the DMA channel */
  status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6898      	ldr	r0, [r3, #8]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	f000 fa5e 	bl	8003570 <HAL_DMA_Start_IT>
 80030b4:	4603      	mov	r3, r0
 80030b6:	74fb      	strb	r3, [r7, #19]

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80030be:	7cfb      	ldrb	r3, [r7, #19]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10c      	bne.n	80030de <HAL_DAC_Start_DMA+0xce>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2201      	movs	r2, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e005      	b.n	80030ea <HAL_DAC_Start_DMA+0xda>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	080033b3 	.word	0x080033b3
 80030f8:	080033d5 	.word	0x080033d5
 80030fc:	080033f1 	.word	0x080033f1

08003100 <HAL_DAC_Stop_DMA>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	400a      	ands	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2201      	movs	r2, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Disable the DMA channel */
  (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fa8f 	bl	800366c <HAL_DMA_Abort>

  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800315c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800316e:	b480      	push	{r7}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d104      	bne.n	8003196 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	3308      	adds	r3, #8
 8003194:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	461a      	mov	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	795b      	ldrb	r3, [r3, #5]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_DAC_ConfigChannel+0x1c>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0e8      	b.n	80033aa <HAL_DAC_ConfigChannel+0x1ee>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2202      	movs	r2, #2
 80031e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d155      	bne.n	8003298 <HAL_DAC_ConfigChannel+0xdc>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031ec:	f7fe ff80 	bl	80020f0 <HAL_GetTick>
 80031f0:	61b8      	str	r0, [r7, #24]

    /* SHSR1 can be written when BWST1 is cleared */
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031f2:	e018      	b.n	8003226 <HAL_DAC_ConfigChannel+0x6a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031f4:	f7fe ff7c 	bl	80020f0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d911      	bls.n	8003226 <HAL_DAC_ConfigChannel+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_DAC_ConfigChannel+0x6a>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f043 0208 	orr.w	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2203      	movs	r2, #3
 8003220:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0c1      	b.n	80033aa <HAL_DAC_ConfigChannel+0x1ee>
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1df      	bne.n	80031f4 <HAL_DAC_ConfigChannel+0x38>
        }
      }
    }
    hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	6992      	ldr	r2, [r2, #24]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	ea02 0103 	and.w	r1, r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	21ff      	movs	r1, #255	; 0xff
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	ea02 0103 	and.w	r1, r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d11d      	bne.n	80032dc <HAL_DAC_ConfigChannel+0x120>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	221f      	movs	r2, #31
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4013      	ands	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2207      	movs	r2, #7
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4013      	ands	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	431a      	orrs	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43da      	mvns	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	400a      	ands	r2, r1
 8003340:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4013      	ands	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	22c0      	movs	r2, #192	; 0xc0
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	400a      	ands	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff f943 	bl	800264c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	711a      	strb	r2, [r3, #4]
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff f8f8 	bl	80025d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7ff fecd 	bl	80031aa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	711a      	strb	r2, [r3, #4]
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e08e      	b.n	8003550 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_DMA_Init+0x138>)
 800343a:	429a      	cmp	r2, r3
 800343c:	d80f      	bhi.n	800345e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b45      	ldr	r3, [pc, #276]	; (800355c <HAL_DMA_Init+0x13c>)
 8003446:	4413      	add	r3, r2
 8003448:	4a45      	ldr	r2, [pc, #276]	; (8003560 <HAL_DMA_Init+0x140>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	009a      	lsls	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a42      	ldr	r2, [pc, #264]	; (8003564 <HAL_DMA_Init+0x144>)
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
 800345c:	e00e      	b.n	800347c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_DMA_Init+0x148>)
 8003466:	4413      	add	r3, r2
 8003468:	4a3d      	ldr	r2, [pc, #244]	; (8003560 <HAL_DMA_Init+0x140>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	009a      	lsls	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a3c      	ldr	r2, [pc, #240]	; (800356c <HAL_DMA_Init+0x14c>)
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa2e 	bl	8003930 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034dc:	d102      	bne.n	80034e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <HAL_DMA_Init+0x106>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d80c      	bhi.n	8003526 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fa57 	bl	80039c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	e008      	b.n	8003538 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40020407 	.word	0x40020407
 800355c:	bffdfff8 	.word	0xbffdfff8
 8003560:	cccccccd 	.word	0xcccccccd
 8003564:	40020000 	.word	0x40020000
 8003568:	bffdfbf8 	.word	0xbffdfbf8
 800356c:	40020400 	.word	0x40020400

08003570 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Start_IT+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e069      	b.n	8003664 <HAL_DMA_Start_IT+0xf4>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d155      	bne.n	8003650 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f973 	bl	80038b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 020e 	orr.w	r2, r2, #14
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e00f      	b.n	8003608 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0204 	bic.w	r2, r2, #4
 80035f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 020a 	orr.w	r2, r2, #10
 8003606:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e008      	b.n	8003662 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e04f      	b.n	800371e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d008      	beq.n	800369c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2204      	movs	r2, #4
 800368e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e040      	b.n	800371e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 020e 	bic.w	r2, r2, #14
 80036aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f003 021c 	and.w	r2, r3, #28
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003700:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800370a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f003 031c 	and.w	r3, r3, #28
 8003748:	2204      	movs	r2, #4
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d027      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7c>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d022      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0204 	bic.w	r2, r2, #4
 800377a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	f003 021c 	and.w	r2, r3, #28
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2104      	movs	r1, #4
 800378a:	fa01 f202 	lsl.w	r2, r1, r2
 800378e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8081 	beq.w	800389c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80037a2:	e07b      	b.n	800389c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	f003 031c 	and.w	r3, r3, #28
 80037ac:	2202      	movs	r2, #2
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d03d      	beq.n	8003834 <HAL_DMA_IRQHandler+0x10c>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d038      	beq.n	8003834 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020a 	bic.w	r2, r2, #10
 80037de:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <HAL_DMA_IRQHandler+0x180>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d909      	bls.n	8003808 <HAL_DMA_IRQHandler+0xe0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f003 031c 	and.w	r3, r3, #28
 80037fc:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_DMA_IRQHandler+0x184>)
 80037fe:	2102      	movs	r1, #2
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	6053      	str	r3, [r2, #4]
 8003806:	e008      	b.n	800381a <HAL_DMA_IRQHandler+0xf2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f003 031c 	and.w	r3, r3, #28
 8003810:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <HAL_DMA_IRQHandler+0x188>)
 8003812:	2102      	movs	r1, #2
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d038      	beq.n	800389c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003832:	e033      	b.n	800389c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f003 031c 	and.w	r3, r3, #28
 800383c:	2208      	movs	r2, #8
 800383e:	409a      	lsls	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d02a      	beq.n	800389e <HAL_DMA_IRQHandler+0x176>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d025      	beq.n	800389e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020e 	bic.w	r2, r2, #14
 8003860:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f003 021c 	and.w	r2, r3, #28
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2101      	movs	r1, #1
 8003870:	fa01 f202 	lsl.w	r2, r1, r2
 8003874:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800389c:	bf00      	nop
 800389e:	bf00      	nop
}
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40020080 	.word	0x40020080
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40020000 	.word	0x40020000

080038b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 021c 	and.w	r2, r3, #28
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d108      	bne.n	8003914 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003912:	e007      	b.n	8003924 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003940:	429a      	cmp	r2, r3
 8003942:	d813      	bhi.n	800396c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003950:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b08      	subs	r3, #8
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e011      	b.n	8003990 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003976:	4413      	add	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	3b08      	subs	r3, #8
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	3307      	adds	r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003994:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2201      	movs	r2, #1
 800399e:	409a      	lsls	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40020407 	.word	0x40020407
 80039b4:	cccccccd 	.word	0xcccccccd
 80039b8:	4002081c 	.word	0x4002081c
 80039bc:	40020880 	.word	0x40020880

080039c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2201      	movs	r2, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	1000823f 	.word	0x1000823f
 8003a04:	40020940 	.word	0x40020940

08003a08 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	e140      	b.n	8003c9a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8132 	beq.w	8003c94 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d005      	beq.n	8003a48 <HAL_GPIO_Init+0x40>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d130      	bne.n	8003aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0201 	and.w	r2, r3, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d017      	beq.n	8003ae6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d123      	bne.n	8003b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	08da      	lsrs	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	6939      	ldr	r1, [r7, #16]
 8003b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0203 	and.w	r2, r3, #3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 808c 	beq.w	8003c94 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <HAL_GPIO_Init+0x2b0>)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	2207      	movs	r2, #7
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_GPIO_Init+0x1bc>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a44      	ldr	r2, [pc, #272]	; (8003cbc <HAL_GPIO_Init+0x2b4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <HAL_GPIO_Init+0x1b8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a43      	ldr	r2, [pc, #268]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_GPIO_Init+0x1b4>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e004      	b.n	8003bc6 <HAL_GPIO_Init+0x1be>
 8003bbc:	2307      	movs	r3, #7
 8003bbe:	e002      	b.n	8003bc6 <HAL_GPIO_Init+0x1be>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_GPIO_Init+0x1be>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	f002 0203 	and.w	r2, r2, #3
 8003bcc:	0092      	lsls	r2, r2, #2
 8003bce:	4093      	lsls	r3, r2
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd6:	4938      	ldr	r1, [pc, #224]	; (8003cb8 <HAL_GPIO_Init+0x2b0>)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	3302      	adds	r3, #2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be4:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c08:	4a2e      	ldr	r2, [pc, #184]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c32:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003c38:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003c5e:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3301      	adds	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f aeb7 	bne.w	8003a18 <HAL_GPIO_Init+0x10>
  }
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	48000400 	.word	0x48000400
 8003cc0:	48000800 	.word	0x48000800
 8003cc4:	58000800 	.word	0x58000800

08003cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cd8:	787b      	ldrb	r3, [r7, #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e081      	b.n	8003e0c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fd ffdf 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2224      	movs	r2, #36	; 0x24
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	e006      	b.n	8003d7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d104      	bne.n	8003d90 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69d9      	ldr	r1, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d138      	bne.n	8003e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e032      	b.n	8003e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d139      	bne.n	8003f32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e033      	b.n	8003f34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	; 0x24
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003efa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	43db      	mvns	r3, r3
 8003f56:	401a      	ands	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_GetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE

  */
__STATIC_INLINE uint32_t LL_RCC_GetLPTIMClockSource(uint32_t LPTIMx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4013      	ands	r3, r2
 8003f84:	0c1a      	lsrs	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4313      	orrs	r3, r2
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <LL_APB1_GRP1_ForceReset>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <LL_APB1_GRP2_ForceReset>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <LL_APB1_GRP1_ReleaseReset>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fee:	4013      	ands	r3, r2
 8003ff0:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <LL_APB1_GRP2_ReleaseReset>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	43db      	mvns	r3, r3
 800400e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004012:	4013      	ands	r3, r2
 8004014:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0b6      	b.n	80041a0 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fd febf 	bl	8001dd0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004072:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800407c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800407e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8e6 	bl	8004254 <LPTIM_WaitForFlag>
 8004088:	4603      	mov	r3, r0
 800408a:	2b03      	cmp	r3, #3
 800408c:	d101      	bne.n	8004092 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e086      	b.n	80041a0 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f90e 	bl	80042b4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f8cd 	bl	8004238 <HAL_LPTIM_GetState>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d101      	bne.n	80040a8 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e07b      	b.n	80041a0 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d004      	beq.n	80040c2 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c0:	d103      	bne.n	80040ca <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 031e 	bic.w	r3, r3, #30
 80040c8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d005      	beq.n	80040e2 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80040dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_LPTIM_Init+0x188>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80040f2:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80040f8:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80040fe:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004104:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800411c:	4313      	orrs	r3, r2
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d004      	beq.n	8004136 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004134:	d107      	bne.n	8004146 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800413e:	4313      	orrs	r3, r2
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800414e:	4293      	cmp	r3, r2
 8004150:	d00a      	beq.n	8004168 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800415a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004160:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <HAL_LPTIM_Init+0x18c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	621a      	str	r2, [r3, #32]
 800418a:	e004      	b.n	8004196 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004194:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	ff19f1fe 	.word	0xff19f1fe
 80041ac:	40007c00 	.word	0x40007c00

080041b0 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d00c      	beq.n	80041e4 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d2:	d107      	bne.n	80041e4 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80041e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004204:	2110      	movs	r1, #16
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f824 	bl	8004254 <LPTIM_WaitForFlag>
 800420c:	4603      	mov	r3, r0
 800420e:	2b03      	cmp	r3, #3
 8004210:	d101      	bne.n	8004216 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e00c      	b.n	8004230 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0204 	orr.w	r2, r2, #4
 8004224:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004246:	b2db      	uxtb	r3, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
	...

08004254 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <LPTIM_WaitForFlag+0x58>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <LPTIM_WaitForFlag+0x5c>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0b9b      	lsrs	r3, r3, #14
 800426e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3b01      	subs	r3, #1
 800427c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	4013      	ands	r3, r2
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d002      	beq.n	800429e <LPTIM_WaitForFlag+0x4a>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1ec      	bne.n	8004278 <LPTIM_WaitForFlag+0x24>

  return result;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000198 	.word	0x20000198
 80042b0:	d1b71759 	.word	0xd1b71759

080042b4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08e      	sub	sp, #56	; 0x38
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c0:	f3ef 8310 	mrs	r3, PRIMASK
 80042c4:	613b      	str	r3, [r7, #16]
  return(result);
 80042c6:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80042c8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ca:	2301      	movs	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f383 8810 	msr	PRIMASK, r3
}
 80042d4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a90      	ldr	r2, [pc, #576]	; (800451c <LPTIM_Disable+0x268>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d015      	beq.n	800430c <LPTIM_Disable+0x58>
 80042e0:	4a8e      	ldr	r2, [pc, #568]	; (800451c <LPTIM_Disable+0x268>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d818      	bhi.n	8004318 <LPTIM_Disable+0x64>
 80042e6:	4a8e      	ldr	r2, [pc, #568]	; (8004520 <LPTIM_Disable+0x26c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <LPTIM_Disable+0x40>
 80042ec:	4a8d      	ldr	r2, [pc, #564]	; (8004524 <LPTIM_Disable+0x270>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d006      	beq.n	8004300 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 80042f2:	e011      	b.n	8004318 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80042f4:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80042f8:	f7ff fe3a 	bl	8003f70 <LL_RCC_GetLPTIMClockSource>
 80042fc:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 80042fe:	e00c      	b.n	800431a <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004300:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004304:	f7ff fe34 	bl	8003f70 <LL_RCC_GetLPTIMClockSource>
 8004308:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 800430a:	e006      	b.n	800431a <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 800430c:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8004310:	f7ff fe2e 	bl	8003f70 <LL_RCC_GetLPTIMClockSource>
 8004314:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8004316:	e000      	b.n	800431a <LPTIM_Disable+0x66>
      break;
 8004318:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a73      	ldr	r2, [pc, #460]	; (800451c <LPTIM_Disable+0x268>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d019      	beq.n	8004388 <LPTIM_Disable+0xd4>
 8004354:	4a71      	ldr	r2, [pc, #452]	; (800451c <LPTIM_Disable+0x268>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d81d      	bhi.n	8004396 <LPTIM_Disable+0xe2>
 800435a:	4a71      	ldr	r2, [pc, #452]	; (8004520 <LPTIM_Disable+0x26c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <LPTIM_Disable+0xb4>
 8004360:	4a70      	ldr	r2, [pc, #448]	; (8004524 <LPTIM_Disable+0x270>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d009      	beq.n	800437a <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8004366:	e016      	b.n	8004396 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004368:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800436c:	f7ff fe12 	bl	8003f94 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004370:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004374:	f7ff fe30 	bl	8003fd8 <LL_APB1_GRP1_ReleaseReset>
      break;
 8004378:	e00e      	b.n	8004398 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800437a:	2020      	movs	r0, #32
 800437c:	f7ff fe1b 	bl	8003fb6 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004380:	2020      	movs	r0, #32
 8004382:	f7ff fe3b 	bl	8003ffc <LL_APB1_GRP2_ReleaseReset>
      break;
 8004386:	e007      	b.n	8004398 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004388:	2040      	movs	r0, #64	; 0x40
 800438a:	f7ff fe14 	bl	8003fb6 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800438e:	2040      	movs	r0, #64	; 0x40
 8004390:	f7ff fe34 	bl	8003ffc <LL_APB1_GRP2_ReleaseReset>
      break;
 8004394:	e000      	b.n	8004398 <LPTIM_Disable+0xe4>
      break;
 8004396:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <LPTIM_Disable+0xf8>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <LPTIM_Disable+0xf8>
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8096 	beq.w	80044d8 <LPTIM_Disable+0x224>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5a      	ldr	r2, [pc, #360]	; (800451c <LPTIM_Disable+0x268>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <LPTIM_Disable+0x12a>
 80043b6:	4a59      	ldr	r2, [pc, #356]	; (800451c <LPTIM_Disable+0x268>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d815      	bhi.n	80043e8 <LPTIM_Disable+0x134>
 80043bc:	4a58      	ldr	r2, [pc, #352]	; (8004520 <LPTIM_Disable+0x26c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <LPTIM_Disable+0x116>
 80043c2:	4a58      	ldr	r2, [pc, #352]	; (8004524 <LPTIM_Disable+0x270>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d005      	beq.n	80043d4 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80043c8:	e00e      	b.n	80043e8 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80043ca:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80043ce:	f7ff fdb6 	bl	8003f3e <LL_RCC_SetLPTIMClockSource>
        break;
 80043d2:	e00a      	b.n	80043ea <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80043d4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80043d8:	f7ff fdb1 	bl	8003f3e <LL_RCC_SetLPTIMClockSource>
        break;
 80043dc:	e005      	b.n	80043ea <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 80043de:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80043e2:	f7ff fdac 	bl	8003f3e <LL_RCC_SetLPTIMClockSource>
        break;
 80043e6:	e000      	b.n	80043ea <LPTIM_Disable+0x136>
        break;
 80043e8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01a      	beq.n	8004426 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004408:	2108      	movs	r1, #8
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ff22 	bl	8004254 <LPTIM_WaitForFlag>
 8004410:	4603      	mov	r3, r0
 8004412:	2b03      	cmp	r3, #3
 8004414:	d103      	bne.n	800441e <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2203      	movs	r2, #3
 800441a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2208      	movs	r2, #8
 8004424:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01a      	beq.n	8004462 <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004444:	2110      	movs	r1, #16
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ff04 	bl	8004254 <LPTIM_WaitForFlag>
 800444c:	4603      	mov	r3, r0
 800444e:	2b03      	cmp	r3, #3
 8004450:	d103      	bne.n	800445a <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2210      	movs	r2, #16
 8004460:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01c      	beq.n	80044a2 <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fee5 	bl	8004254 <LPTIM_WaitForFlag>
 800448a:	4603      	mov	r3, r0
 800448c:	2b03      	cmp	r3, #3
 800448e:	d103      	bne.n	8004498 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2203      	movs	r2, #3
 8004494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <LPTIM_Disable+0x268>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d011      	beq.n	80044d0 <LPTIM_Disable+0x21c>
 80044ac:	4a1b      	ldr	r2, [pc, #108]	; (800451c <LPTIM_Disable+0x268>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d814      	bhi.n	80044dc <LPTIM_Disable+0x228>
 80044b2:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <LPTIM_Disable+0x26c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <LPTIM_Disable+0x20c>
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <LPTIM_Disable+0x270>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 80044be:	e00d      	b.n	80044dc <LPTIM_Disable+0x228>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80044c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044c2:	f7ff fd3c 	bl	8003f3e <LL_RCC_SetLPTIMClockSource>
        break;
 80044c6:	e00a      	b.n	80044de <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80044c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044ca:	f7ff fd38 	bl	8003f3e <LL_RCC_SetLPTIMClockSource>
        break;
 80044ce:	e006      	b.n	80044de <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80044d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044d2:	f7ff fd34 	bl	8003f3e <LL_RCC_SetLPTIMClockSource>
        break;
 80044d6:	e002      	b.n	80044de <LPTIM_Disable+0x22a>
    }
  }
 80044d8:	bf00      	nop
 80044da:	e000      	b.n	80044de <LPTIM_Disable+0x22a>
        break;
 80044dc:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f4:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fc:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	621a      	str	r2, [r3, #32]
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f383 8810 	msr	PRIMASK, r3
}
 8004510:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004512:	bf00      	nop
 8004514:	3738      	adds	r7, #56	; 0x38
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40009800 	.word	0x40009800
 8004520:	40007c00 	.word	0x40007c00
 8004524:	40009400 	.word	0x40009400

08004528 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_PWR_EnableBkUpAccess+0x18>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a03      	ldr	r2, [pc, #12]	; (8004540 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004536:	6013      	str	r3, [r2, #0]
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	58000400 	.word	0x58000400

08004544 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_PWREx_GetVoltageRange+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	58000400 	.word	0x58000400

0800455c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456c:	d101      	bne.n	8004572 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	58000400 	.word	0x58000400

08004580 <LL_RCC_HSE_EnableTcxo>:
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800458e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <LL_RCC_HSE_DisableTcxo>:
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045ae:	6013      	str	r3, [r2, #0]
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ca:	d101      	bne.n	80045d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <LL_RCC_HSE_Enable>:
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <LL_RCC_HSE_Disable>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80045fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <LL_RCC_HSE_IsReady>:
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004624:	d101      	bne.n	800462a <LL_RCC_HSE_IsReady+0x18>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <LL_RCC_HSE_IsReady+0x1a>
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <LL_RCC_HSI_Enable>:
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004646:	6013      	str	r3, [r2, #0]
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <LL_RCC_HSI_Disable>:
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800465e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <LL_RCC_HSI_IsReady>:
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467e:	d101      	bne.n	8004684 <LL_RCC_HSI_IsReady+0x18>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <LL_RCC_HSI_IsReady+0x1a>
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <LL_RCC_HSI_SetCalibTrimming>:
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <LL_RCC_LSE_IsReady>:
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d101      	bne.n	80046ce <LL_RCC_LSE_IsReady+0x18>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <LL_RCC_LSE_IsReady+0x1a>
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr

080046d8 <LL_RCC_LSI_Enable>:
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <LL_RCC_LSI_Disable>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <LL_RCC_LSI_IsReady>:
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b02      	cmp	r3, #2
 800472a:	d101      	bne.n	8004730 <LL_RCC_LSI_IsReady+0x18>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <LL_RCC_LSI_IsReady+0x1a>
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <LL_RCC_MSI_Enable>:
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <LL_RCC_MSI_Disable>:
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800475a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6013      	str	r3, [r2, #0]
}
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <LL_RCC_MSI_IsReady>:
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d101      	bne.n	8004788 <LL_RCC_MSI_IsReady+0x16>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_RCC_MSI_IsReady+0x18>
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d101      	bne.n	80047a8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <LL_RCC_MSI_GetRange>:
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <LL_RCC_SetSysClkSource>:
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <LL_RCC_GetSysClkSource>:
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030c 	and.w	r3, r3, #12
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <LL_RCC_SetAHBPrescaler>:
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <LL_RCC_SetAHB3Prescaler>:
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004876:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800487a:	f023 020f 	bic.w	r2, r3, #15
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <LL_RCC_SetAPB1Prescaler>:
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800489e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <LL_RCC_SetAPB2Prescaler>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	608b      	str	r3, [r1, #8]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <LL_RCC_GetAHBPrescaler>:
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <LL_RCC_GetAHB3Prescaler>:
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80048fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004900:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004924:	6013      	str	r3, [r2, #0]
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800493c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004940:	6013      	str	r3, [r2, #0]
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr

0800494a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800494a:	b480      	push	{r7}
 800494c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800495c:	d101      	bne.n	8004962 <LL_RCC_PLL_IsReady+0x18>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <LL_RCC_PLL_IsReady+0x1a>
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004992:	4618      	mov	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800499a:	b480      	push	{r7}
 800499c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0303 	and.w	r3, r3, #3
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80049c6:	b480      	push	{r7}
 80049c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d101      	bne.n	80049de <LL_RCC_IsActiveFlag_HPRE+0x18>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fc:	d101      	bne.n	8004a02 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a1e:	d101      	bne.n	8004a24 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a40:	d101      	bne.n	8004a46 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e36f      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	f7ff fee4 	bl	800482e <LL_RCC_GetSysClkSource>
 8004a66:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a68:	f7ff ffa2 	bl	80049b0 <LL_RCC_PLL_GetMainSource>
 8004a6c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80c4 	beq.w	8004c04 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x3e>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d176      	bne.n	8004b76 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d173      	bne.n	8004b76 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e353      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x68>
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab6:	e006      	b.n	8004ac6 <HAL_RCC_OscConfig+0x76>
 8004ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d222      	bcs.n	8004b10 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fd18 	bl	8005504 <RCC_SetFlashLatencyFromMSIRange>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e331      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fe69 	bl	80047e0 <LL_RCC_MSI_SetCalibTrimming>
 8004b0e:	e021      	b.n	8004b54 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1a:	f043 0308 	orr.w	r3, r3, #8
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fe50 	bl	80047e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fcdd 	bl	8005504 <RCC_SetFlashLatencyFromMSIRange>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e2f6      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b54:	f000 fcc2 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4aa7      	ldr	r2, [pc, #668]	; (8004df8 <HAL_RCC_OscConfig+0x3a8>)
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004b5e:	4ba7      	ldr	r3, [pc, #668]	; (8004dfc <HAL_RCC_OscConfig+0x3ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe f884 	bl	8002c70 <HAL_InitTick>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d047      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	e2e5      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02c      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b7e:	f7ff fddc 	bl	800473a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b82:	f7fd fab5 	bl	80020f0 <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b8a:	f7fd fab1 	bl	80020f0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e2d2      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b9c:	f7ff fde9 	bl	8004772 <LL_RCC_MSI_IsReady>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f1      	beq.n	8004b8a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fe05 	bl	80047e0 <LL_RCC_MSI_SetCalibTrimming>
 8004bd6:	e015      	b.n	8004c04 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bd8:	f7ff fdbd 	bl	8004756 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fa88 	bl	80020f0 <HAL_GetTick>
 8004be0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004be4:	f7fd fa84 	bl	80020f0 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e2a5      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004bf6:	f7ff fdbc 	bl	8004772 <LL_RCC_MSI_IsReady>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f1      	bne.n	8004be4 <HAL_RCC_OscConfig+0x194>
 8004c00:	e000      	b.n	8004c04 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c02:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d058      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d005      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2b0c      	cmp	r3, #12
 8004c1a:	d108      	bne.n	8004c2e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d14b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e289      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c40:	4313      	orrs	r3, r2
 8004c42:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCC_OscConfig+0x204>
 8004c4e:	f7ff fcc4 	bl	80045da <LL_RCC_HSE_Enable>
 8004c52:	e00d      	b.n	8004c70 <HAL_RCC_OscConfig+0x220>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004c5c:	d104      	bne.n	8004c68 <HAL_RCC_OscConfig+0x218>
 8004c5e:	f7ff fc8f 	bl	8004580 <LL_RCC_HSE_EnableTcxo>
 8004c62:	f7ff fcba 	bl	80045da <LL_RCC_HSE_Enable>
 8004c66:	e003      	b.n	8004c70 <HAL_RCC_OscConfig+0x220>
 8004c68:	f7ff fcc5 	bl	80045f6 <LL_RCC_HSE_Disable>
 8004c6c:	f7ff fc96 	bl	800459c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d012      	beq.n	8004c9e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fd fa3a 	bl	80020f0 <HAL_GetTick>
 8004c7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fd fa36 	bl	80020f0 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e257      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c92:	f7ff fcbe 	bl	8004612 <LL_RCC_HSE_IsReady>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f1      	beq.n	8004c80 <HAL_RCC_OscConfig+0x230>
 8004c9c:	e011      	b.n	8004cc2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9e:	f7fd fa27 	bl	80020f0 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca6:	f7fd fa23 	bl	80020f0 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b64      	cmp	r3, #100	; 0x64
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e244      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004cb8:	f7ff fcab 	bl	8004612 <LL_RCC_HSE_IsReady>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f1      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d046      	beq.n	8004d5c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x290>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e22a      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fccc 	bl	800468e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004cf6:	e031      	b.n	8004d5c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d019      	beq.n	8004d34 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d00:	f7ff fc98 	bl	8004634 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd f9f4 	bl	80020f0 <HAL_GetTick>
 8004d08:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7fd f9f0 	bl	80020f0 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e211      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d1e:	f7ff fca5 	bl	800466c <LL_RCC_HSI_IsReady>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f1      	beq.n	8004d0c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fcae 	bl	800468e <LL_RCC_HSI_SetCalibTrimming>
 8004d32:	e013      	b.n	8004d5c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d34:	f7ff fc8c 	bl	8004650 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd f9da 	bl	80020f0 <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d40:	f7fd f9d6 	bl	80020f0 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e1f7      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004d52:	f7ff fc8b 	bl	800466c <LL_RCC_HSI_IsReady>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f1      	bne.n	8004d40 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d06e      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d056      	beq.n	8004e1e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d78:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d031      	beq.n	8004dec <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e1d0      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d013      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004daa:	f7ff fca5 	bl	80046f8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dae:	f7fd f99f 	bl	80020f0 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fd f99b 	bl	80020f0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b11      	cmp	r3, #17
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e1bc      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004dc8:	f7ff fca6 	bl	8004718 <LL_RCC_LSI_IsReady>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f1      	bne.n	8004db6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	f023 0210 	bic.w	r2, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dec:	f7ff fc74 	bl	80046d8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df0:	f7fd f97e 	bl	80020f0 <HAL_GetTick>
 8004df4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004df6:	e00c      	b.n	8004e12 <HAL_RCC_OscConfig+0x3c2>
 8004df8:	20000198 	.word	0x20000198
 8004dfc:	2000019c 	.word	0x2000019c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fd f976 	bl	80020f0 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b11      	cmp	r3, #17
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e197      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004e12:	f7ff fc81 	bl	8004718 <LL_RCC_LSI_IsReady>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f1      	beq.n	8004e00 <HAL_RCC_OscConfig+0x3b0>
 8004e1c:	e013      	b.n	8004e46 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1e:	f7ff fc6b 	bl	80046f8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fd f965 	bl	80020f0 <HAL_GetTick>
 8004e26:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fd f961 	bl	80020f0 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b11      	cmp	r3, #17
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e182      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004e3c:	f7ff fc6c 	bl	8004718 <LL_RCC_LSI_IsReady>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f1      	bne.n	8004e2a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80d8 	beq.w	8005004 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004e54:	f7ff fb82 	bl	800455c <LL_PWR_IsEnabledBkUpAccess>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d113      	bne.n	8004e86 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e5e:	f7ff fb63 	bl	8004528 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e62:	f7fd f945 	bl	80020f0 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6a:	f7fd f941 	bl	80020f0 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e162      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004e7c:	f7ff fb6e 	bl	800455c <LL_PWR_IsEnabledBkUpAccess>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f1      	beq.n	8004e6a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d07b      	beq.n	8004f86 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b85      	cmp	r3, #133	; 0x85
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd f91d 	bl	80020f0 <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ece:	f7fd f90f 	bl	80020f0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e12e      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ee4:	f7ff fbe7 	bl	80046b6 <LL_RCC_LSE_IsReady>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0ef      	beq.n	8004ece <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b81      	cmp	r3, #129	; 0x81
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2b85      	cmp	r3, #133	; 0x85
 8004efc:	d121      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fd f8f7 	bl	80020f0 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f18:	e00a      	b.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fd f8e9 	bl	80020f0 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e108      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ec      	beq.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004f40:	e060      	b.n	8005004 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fd f8d5 	bl	80020f0 <HAL_GetTick>
 8004f46:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f5c:	e00a      	b.n	8004f74 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fd f8c7 	bl	80020f0 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0e6      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1ec      	bne.n	8004f5e <HAL_RCC_OscConfig+0x50e>
 8004f84:	e03e      	b.n	8005004 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fd f8b3 	bl	80020f0 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa2:	f7fd f8a5 	bl	80020f0 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0c4      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1ec      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc8:	f7fd f892 	bl	80020f0 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe4:	f7fd f884 	bl	80020f0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0a3      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ffa:	f7ff fb5c 	bl	80046b6 <LL_RCC_LSE_IsReady>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ef      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8099 	beq.w	8005140 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d06c      	beq.n	80050ee <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	2b02      	cmp	r3, #2
 800501a:	d14b      	bne.n	80050b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501c:	f7ff fc87 	bl	800492e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fd f866 	bl	80020f0 <HAL_GetTick>
 8005024:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fd f862 	bl	80020f0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b0a      	cmp	r3, #10
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e083      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800503a:	f7ff fc86 	bl	800494a <LL_RCC_PLL_IsReady>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f1      	bne.n	8005028 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	4b40      	ldr	r3, [pc, #256]	; (800514c <HAL_RCC_OscConfig+0x6fc>)
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800505c:	0212      	lsls	r2, r2, #8
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005070:	430a      	orrs	r2, r1
 8005072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005076:	4313      	orrs	r3, r2
 8005078:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800507a:	f7ff fc4a 	bl	8004912 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fd f82f 	bl	80020f0 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005096:	f7fd f82b 	bl	80020f0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b0a      	cmp	r3, #10
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e04c      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80050a8:	f7ff fc4f 	bl	800494a <LL_RCC_PLL_IsReady>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f1      	beq.n	8005096 <HAL_RCC_OscConfig+0x646>
 80050b2:	e045      	b.n	8005140 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b4:	f7ff fc3b 	bl	800492e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fd f81a 	bl	80020f0 <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fd f816 	bl	80020f0 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b0a      	cmp	r3, #10
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e037      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80050d2:	f7ff fc3a 	bl	800494a <LL_RCC_PLL_IsReady>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f1      	bne.n	80050c0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80050dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e6:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <HAL_RCC_OscConfig+0x700>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	60cb      	str	r3, [r1, #12]
 80050ec:	e028      	b.n	8005140 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e023      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0203 	and.w	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	429a      	cmp	r2, r3
 800510e:	d115      	bne.n	800513c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	429a      	cmp	r2, r3
 800511c:	d10e      	bne.n	800513c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	429a      	cmp	r2, r3
 800512c:	d106      	bne.n	800513c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	11c1808c 	.word	0x11c1808c
 8005150:	eefefffc 	.word	0xeefefffc

08005154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e10f      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b89      	ldr	r3, [pc, #548]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d91b      	bls.n	80051ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b86      	ldr	r3, [pc, #536]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0207 	bic.w	r2, r3, #7
 800517e:	4984      	ldr	r1, [pc, #528]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005186:	f7fc ffb3 	bl	80020f0 <HAL_GetTick>
 800518a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800518e:	f7fc ffaf 	bl	80020f0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e0f3      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a0:	4b7b      	ldr	r3, [pc, #492]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d1ef      	bne.n	800518e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fb40 	bl	8004844 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051c4:	f7fc ff94 	bl	80020f0 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051cc:	f7fc ff90 	bl	80020f0 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e0d4      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051de:	f7ff fbf2 	bl	80049c6 <LL_RCC_IsActiveFlag_HPRE>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f1      	beq.n	80051cc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d016      	beq.n	8005222 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fb36 	bl	800486a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051fe:	f7fc ff77 	bl	80020f0 <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005206:	f7fc ff73 	bl	80020f0 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e0b7      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005218:	f7ff fbe6 	bl	80049e8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f1      	beq.n	8005206 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fb2f 	bl	8004896 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005238:	f7fc ff5a 	bl	80020f0 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005240:	f7fc ff56 	bl	80020f0 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e09a      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005252:	f7ff fbdb 	bl	8004a0c <LL_RCC_IsActiveFlag_PPRE1>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f1      	beq.n	8005240 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d017      	beq.n	8005298 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fb24 	bl	80048bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005274:	f7fc ff3c 	bl	80020f0 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800527c:	f7fc ff38 	bl	80020f0 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e07c      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800528e:	f7ff fbce 	bl	8004a2e <LL_RCC_IsActiveFlag_PPRE2>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f1      	beq.n	800527c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d043      	beq.n	800532c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d106      	bne.n	80052ba <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80052ac:	f7ff f9b1 	bl	8004612 <LL_RCC_HSE_IsReady>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d11e      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e066      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80052c2:	f7ff fb42 	bl	800494a <LL_RCC_PLL_IsReady>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d113      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e05b      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80052d8:	f7ff fa4b 	bl	8004772 <LL_RCC_MSI_IsReady>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e050      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80052e6:	f7ff f9c1 	bl	800466c <LL_RCC_HSI_IsReady>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e049      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fa85 	bl	8004808 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fc fef7 	bl	80020f0 <HAL_GetTick>
 8005302:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005304:	e00a      	b.n	800531c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005306:	f7fc fef3 	bl	80020f0 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e035      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531c:	f7ff fa87 	bl	800482e <LL_RCC_GetSysClkSource>
 8005320:	4602      	mov	r2, r0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	429a      	cmp	r2, r3
 800532a:	d1ec      	bne.n	8005306 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d21b      	bcs.n	8005372 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 0207 	bic.w	r2, r3, #7
 8005342:	4913      	ldr	r1, [pc, #76]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800534a:	f7fc fed1 	bl	80020f0 <HAL_GetTick>
 800534e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005350:	e008      	b.n	8005364 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005352:	f7fc fecd 	bl	80020f0 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e011      	b.n	8005388 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <HAL_RCC_ClockConfig+0x23c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d1ef      	bne.n	8005352 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005372:	f000 f8b3 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 8005376:	4603      	mov	r3, r0
 8005378:	4a06      	ldr	r2, [pc, #24]	; (8005394 <HAL_RCC_ClockConfig+0x240>)
 800537a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_ClockConfig+0x244>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7fd fc75 	bl	8002c70 <HAL_InitTick>
 8005386:	4603      	mov	r3, r0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	58004000 	.word	0x58004000
 8005394:	20000198 	.word	0x20000198
 8005398:	2000019c 	.word	0x2000019c

0800539c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053aa:	f7ff fa40 	bl	800482e <LL_RCC_GetSysClkSource>
 80053ae:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b0:	f7ff fafe 	bl	80049b0 <LL_RCC_PLL_GetMainSource>
 80053b4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x2c>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d139      	bne.n	8005436 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d136      	bne.n	8005436 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80053c8:	f7ff f9e3 	bl	8004792 <LL_RCC_MSI_IsEnabledRangeSelect>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d115      	bne.n	80053fe <HAL_RCC_GetSysClockFreq+0x62>
 80053d2:	f7ff f9de 	bl	8004792 <LL_RCC_MSI_IsEnabledRangeSelect>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d106      	bne.n	80053ea <HAL_RCC_GetSysClockFreq+0x4e>
 80053dc:	f7ff f9e9 	bl	80047b2 <LL_RCC_MSI_GetRange>
 80053e0:	4603      	mov	r3, r0
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	e005      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x5a>
 80053ea:	f7ff f9ed 	bl	80047c8 <LL_RCC_MSI_GetRangeAfterStandby>
 80053ee:	4603      	mov	r3, r0
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	4a36      	ldr	r2, [pc, #216]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x134>)
 80053f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fc:	e014      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x8c>
 80053fe:	f7ff f9c8 	bl	8004792 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005402:	4603      	mov	r3, r0
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <HAL_RCC_GetSysClockFreq+0x7a>
 8005408:	f7ff f9d3 	bl	80047b2 <LL_RCC_MSI_GetRange>
 800540c:	4603      	mov	r3, r0
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	e005      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x86>
 8005416:	f7ff f9d7 	bl	80047c8 <LL_RCC_MSI_GetRangeAfterStandby>
 800541a:	4603      	mov	r3, r0
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	4a2b      	ldr	r2, [pc, #172]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005428:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d115      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005434:	e012      	b.n	800545c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d102      	bne.n	8005442 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e00c      	b.n	800545c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d109      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005448:	f7ff f8b6 	bl	80045b8 <LL_RCC_HSE_IsEnabledDiv2>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d102      	bne.n	8005458 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e001      	b.n	800545c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005458:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800545a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800545c:	f7ff f9e7 	bl	800482e <LL_RCC_GetSysClkSource>
 8005460:	4603      	mov	r3, r0
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d12f      	bne.n	80054c6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005466:	f7ff faa3 	bl	80049b0 <LL_RCC_PLL_GetMainSource>
 800546a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d003      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0xde>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d003      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0xe4>
 8005478:	e00d      	b.n	8005496 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800547c:	60fb      	str	r3, [r7, #12]
        break;
 800547e:	e00d      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005480:	f7ff f89a 	bl	80045b8 <LL_RCC_HSE_IsEnabledDiv2>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800548c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800548e:	e005      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005492:	60fb      	str	r3, [r7, #12]
        break;
 8005494:	e002      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	60fb      	str	r3, [r7, #12]
        break;
 800549a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800549c:	f7ff fa66 	bl	800496c <LL_RCC_PLL_GetN>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	fb03 f402 	mul.w	r4, r3, r2
 80054a8:	f7ff fa77 	bl	800499a <LL_RCC_PLL_GetDivider>
 80054ac:	4603      	mov	r3, r0
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	3301      	adds	r3, #1
 80054b2:	fbb4 f4f3 	udiv	r4, r4, r3
 80054b6:	f7ff fa65 	bl	8004984 <LL_RCC_PLL_GetR>
 80054ba:	4603      	mov	r3, r0
 80054bc:	0f5b      	lsrs	r3, r3, #29
 80054be:	3301      	adds	r3, #1
 80054c0:	fbb4 f3f3 	udiv	r3, r4, r3
 80054c4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80054c6:	697b      	ldr	r3, [r7, #20]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}
 80054d0:	0801497c 	.word	0x0801497c
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	01e84800 	.word	0x01e84800

080054dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054dc:	b598      	push	{r3, r4, r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80054e0:	f7ff ff5c 	bl	800539c <HAL_RCC_GetSysClockFreq>
 80054e4:	4604      	mov	r4, r0
 80054e6:	f7ff f9fc 	bl	80048e2 <LL_RCC_GetAHBPrescaler>
 80054ea:	4603      	mov	r3, r0
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	4a03      	ldr	r2, [pc, #12]	; (8005500 <HAL_RCC_GetHCLKFreq+0x24>)
 80054f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd98      	pop	{r3, r4, r7, pc}
 8005500:	0801493c 	.word	0x0801493c

08005504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	4a10      	ldr	r2, [pc, #64]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800551c:	f7ff f9ec 	bl	80048f8 <LL_RCC_GetAHB3Prescaler>
 8005520:	4603      	mov	r3, r0
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	4a0c      	ldr	r2, [pc, #48]	; (800555c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800552a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	0c9c      	lsrs	r4, r3, #18
 8005540:	f7ff f800 	bl	8004544 <HAL_PWREx_GetVoltageRange>
 8005544:	4603      	mov	r3, r0
 8005546:	4619      	mov	r1, r3
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f80b 	bl	8005564 <RCC_SetFlashLatency>
 800554e:	4603      	mov	r3, r0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	bd90      	pop	{r4, r7, pc}
 8005558:	0801497c 	.word	0x0801497c
 800555c:	0801493c 	.word	0x0801493c
 8005560:	431bde83 	.word	0x431bde83

08005564 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	; 0x38
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800556e:	4a3a      	ldr	r2, [pc, #232]	; (8005658 <RCC_SetFlashLatency+0xf4>)
 8005570:	f107 0320 	add.w	r3, r7, #32
 8005574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005578:	6018      	str	r0, [r3, #0]
 800557a:	3304      	adds	r3, #4
 800557c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800557e:	4a37      	ldr	r2, [pc, #220]	; (800565c <RCC_SetFlashLatency+0xf8>)
 8005580:	f107 0318 	add.w	r3, r7, #24
 8005584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005588:	6018      	str	r0, [r3, #0]
 800558a:	3304      	adds	r3, #4
 800558c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800558e:	4a34      	ldr	r2, [pc, #208]	; (8005660 <RCC_SetFlashLatency+0xfc>)
 8005590:	f107 030c 	add.w	r3, r7, #12
 8005594:	ca07      	ldmia	r2, {r0, r1, r2}
 8005596:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800559a:	2300      	movs	r3, #0
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a4:	d11b      	bne.n	80055de <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30
 80055aa:	e014      	b.n	80055d6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	3338      	adds	r3, #56	; 0x38
 80055b2:	443b      	add	r3, r7
 80055b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80055b8:	461a      	mov	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4293      	cmp	r3, r2
 80055be:	d807      	bhi.n	80055d0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	3338      	adds	r3, #56	; 0x38
 80055c6:	443b      	add	r3, r7
 80055c8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ce:	e021      	b.n	8005614 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	3301      	adds	r3, #1
 80055d4:	633b      	str	r3, [r7, #48]	; 0x30
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d9e7      	bls.n	80055ac <RCC_SetFlashLatency+0x48>
 80055dc:	e01a      	b.n	8005614 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80055de:	2300      	movs	r3, #0
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e2:	e014      	b.n	800560e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	3338      	adds	r3, #56	; 0x38
 80055ea:	443b      	add	r3, r7
 80055ec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80055f0:	461a      	mov	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d807      	bhi.n	8005608 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	3338      	adds	r3, #56	; 0x38
 80055fe:	443b      	add	r3, r7
 8005600:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005606:	e005      	b.n	8005614 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	3301      	adds	r3, #1
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b02      	cmp	r3, #2
 8005612:	d9e7      	bls.n	80055e4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005614:	4b13      	ldr	r3, [pc, #76]	; (8005664 <RCC_SetFlashLatency+0x100>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f023 0207 	bic.w	r2, r3, #7
 800561c:	4911      	ldr	r1, [pc, #68]	; (8005664 <RCC_SetFlashLatency+0x100>)
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005624:	f7fc fd64 	bl	80020f0 <HAL_GetTick>
 8005628:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800562a:	e008      	b.n	800563e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800562c:	f7fc fd60 	bl	80020f0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e007      	b.n	800564e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <RCC_SetFlashLatency+0x100>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005648:	429a      	cmp	r2, r3
 800564a:	d1ef      	bne.n	800562c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3738      	adds	r7, #56	; 0x38
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	080148d8 	.word	0x080148d8
 800565c:	080148e0 	.word	0x080148e0
 8005660:	080148e8 	.word	0x080148e8
 8005664:	58004000 	.word	0x58004000

08005668 <LL_RCC_LSE_IsReady>:
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d101      	bne.n	8005680 <LL_RCC_LSE_IsReady+0x18>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <LL_RCC_LSE_IsReady+0x1a>
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr

0800568a <LL_RCC_SetUSARTClockSource>:
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005696:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	43db      	mvns	r3, r3
 80056a0:	401a      	ands	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <LL_RCC_SetI2SClockSource>:
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <LL_RCC_SetLPUARTClockSource>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <LL_RCC_SetI2CClockSource>:
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005726:	43db      	mvns	r3, r3
 8005728:	401a      	ands	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <LL_RCC_SetLPTIMClockSource>:
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	43db      	mvns	r3, r3
 800575e:	401a      	ands	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <LL_RCC_SetRNGClockSource>:
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800578c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <LL_RCC_SetADCClockSource>:
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80057aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <LL_RCC_SetRTCClockSource>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <LL_RCC_GetRTCClockSource>:
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80057fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <LL_RCC_ForceBackupDomainReset>:
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800581e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <LL_RCC_ReleaseBackupDomainReset>:
{
 800582e:	b480      	push	{r7}
 8005830:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800583e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr
	...

08005850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800585c:	2300      	movs	r3, #0
 800585e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005860:	2300      	movs	r3, #0
 8005862:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d058      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005870:	f7fe fe5a 	bl	8004528 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005874:	f7fc fc3c 	bl	80020f0 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800587a:	e009      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587c:	f7fc fc38 	bl	80020f0 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d902      	bls.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	74fb      	strb	r3, [r7, #19]
        break;
 800588e:	e006      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005890:	4b7b      	ldr	r3, [pc, #492]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589c:	d1ee      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800589e:	7cfb      	ldrb	r3, [r7, #19]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d13c      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80058a4:	f7ff ffa7 	bl	80057f6 <LL_RCC_GetRTCClockSource>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d00f      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058be:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058c0:	f7ff ffa5 	bl	800580e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058c4:	f7ff ffb3 	bl	800582e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d014      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fc fc08 	bl	80020f0 <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80058e2:	e00b      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fc fc04 	bl	80020f0 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d902      	bls.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	74fb      	strb	r3, [r7, #19]
            break;
 80058fa:	e004      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80058fc:	f7ff feb4 	bl	8005668 <LL_RCC_LSE_IsReady>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d1ee      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005906:	7cfb      	ldrb	r3, [r7, #19]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ff5b 	bl	80057cc <LL_RCC_SetRTCClockSource>
 8005916:	e004      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	74bb      	strb	r3, [r7, #18]
 800591c:	e001      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fea9 	bl	800568a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fe9e 	bl	800568a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d004      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fec0 	bl	80056e4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff fee6 	bl	8005746 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fedb 	bl	8005746 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fed0 	bl	8005746 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fea9 	bl	800570e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fe9e 	bl	800570e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fe93 	bl	800570e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d011      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fe5e 	bl	80056ba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a06:	d107      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d010      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fea5 	bl	8005778 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d107      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d011      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fea3 	bl	80057a2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a64:	d107      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a74:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005a76:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	58000400 	.word	0x58000400

08005a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e0c6      	b.n	8005c24 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa6:	d009      	beq.n	8005abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	61da      	str	r2, [r3, #28]
 8005aae:	e005      	b.n	8005abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fc f9a7 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af6:	d902      	bls.n	8005afe <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	e002      	b.n	8005b04 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b0c:	d007      	beq.n	8005b1e <HAL_SPI_Init+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b16:	d002      	beq.n	8005b1e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	ea42 0103 	orr.w	r1, r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10b      	bne.n	8005b9e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b8e:	d903      	bls.n	8005b98 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
 8005b96:	e002      	b.n	8005b9e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d107      	bne.n	8005bb6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	f003 0204 	and.w	r2, r3, #4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bdc:	ea42 0103 	orr.w	r1, r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf6:	d105      	bne.n	8005c04 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	b292      	uxth	r2, r2
 8005c02:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c3c:	4904      	ldr	r1, [pc, #16]	; (8005c50 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	58000400 	.word	0x58000400

08005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5e:	4a04      	ldr	r2, [pc, #16]	; (8005c70 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	58000400 	.word	0x58000400

08005c74 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c88:	bf00      	nop
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	58000400 	.word	0x58000400

08005c94 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c9e:	619a      	str	r2, [r3, #24]
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	58000400 	.word	0x58000400

08005cac <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d101      	bne.n	8005cc0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	58000400 	.word	0x58000400

08005cd0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d101      	bne.n	8005ce4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	58000400 	.word	0x58000400

08005cf4 <LL_RCC_RF_DisableReset>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005d0c:	bf00      	nop
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <LL_RCC_IsRFUnderReset>:
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d28:	d101      	bne.n	8005d2e <LL_RCC_IsRFUnderReset+0x1a>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <LL_RCC_IsRFUnderReset+0x1c>
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <LL_EXTI_EnableIT_32_63+0x24>)
 8005d42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d46:	4905      	ldr	r1, [pc, #20]	; (8005d5c <LL_EXTI_EnableIT_32_63+0x24>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	58000800 	.word	0x58000800

08005d60 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
    return status;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	e052      	b.n	8005e1c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	799b      	ldrb	r3, [r3, #6]
 8005d7e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_SUBGHZ_Init+0x2c>
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d109      	bne.n	8005da0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc f876 	bl	8001e84 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005d98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d9c:	f7ff ffcc 	bl	8005d38 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d126      	bne.n	8005df4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005dac:	f7ff ffa2 	bl	8005cf4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005db0:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <HAL_SUBGHZ_Init+0xc4>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	0cdb      	lsrs	r3, r3, #19
 8005dbe:	2264      	movs	r2, #100	; 0x64
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	609a      	str	r2, [r3, #8]
        break;
 8005dd6:	e007      	b.n	8005de8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005dde:	f7ff ff99 	bl	8005d14 <LL_RCC_IsRFUnderReset>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ee      	bne.n	8005dc6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005de8:	f7ff ff34 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005dec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005df0:	f7ff ff1c 	bl	8005c2c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005df4:	f7ff ff4e 	bl	8005c94 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fa2e 	bl	8006264 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	719a      	strb	r2, [r3, #6]

  return status;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000198 	.word	0x20000198

08005e28 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	461a      	mov	r2, r3
 8005e34:	460b      	mov	r3, r1
 8005e36:	817b      	strh	r3, [r7, #10]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	799b      	ldrb	r3, [r3, #6]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d14a      	bne.n	8005edc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	795b      	ldrb	r3, [r3, #5]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e045      	b.n	8005ede <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 face 	bl	8006400 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e64:	f7ff ff06 	bl	8005c74 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005e68:	210d      	movs	r1, #13
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fa1a 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005e70:	897b      	ldrh	r3, [r7, #10]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fa12 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005e80:	897b      	ldrh	r3, [r7, #10]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	4619      	mov	r1, r3
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fa0c 	bl	80062a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	82bb      	strh	r3, [r7, #20]
 8005e90:	e00a      	b.n	8005ea8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005e92:	8abb      	ldrh	r3, [r7, #20]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4413      	add	r3, r2
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fa01 	bl	80062a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ea2:	8abb      	ldrh	r3, [r7, #20]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	82bb      	strh	r3, [r7, #20]
 8005ea8:	8aba      	ldrh	r2, [r7, #20]
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d3f0      	bcc.n	8005e92 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005eb0:	f7ff fed0 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fac7 	bl	8006448 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
 8005ec6:	e001      	b.n	8005ecc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	715a      	strb	r2, [r3, #5]

    return status;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	e000      	b.n	8005ede <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b088      	sub	sp, #32
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	817b      	strh	r3, [r7, #10]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	799b      	ldrb	r3, [r3, #6]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d14a      	bne.n	8005f9e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	795b      	ldrb	r3, [r3, #5]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e045      	b.n	8005fa0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fa70 	bl	8006400 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005f20:	f7ff fea8 	bl	8005c74 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005f24:	211d      	movs	r1, #29
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f9bc 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005f2c:	897b      	ldrh	r3, [r7, #10]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	4619      	mov	r1, r3
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f9b4 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005f3c:	897b      	ldrh	r3, [r7, #10]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	4619      	mov	r1, r3
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f9ae 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005f48:	2100      	movs	r1, #0
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f9aa 	bl	80062a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	82fb      	strh	r3, [r7, #22]
 8005f54:	e009      	b.n	8005f6a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005f56:	69b9      	ldr	r1, [r7, #24]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f9f9 	bl	8006350 <SUBGHZSPI_Receive>
      pData++;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	3301      	adds	r3, #1
 8005f62:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005f64:	8afb      	ldrh	r3, [r7, #22]
 8005f66:	3301      	adds	r3, #1
 8005f68:	82fb      	strh	r3, [r7, #22]
 8005f6a:	8afa      	ldrh	r2, [r7, #22]
 8005f6c:	893b      	ldrh	r3, [r7, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3f1      	bcc.n	8005f56 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f72:	f7ff fe6f 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fa66 	bl	8006448 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e001      	b.n	8005f8e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	715a      	strb	r2, [r3, #5]

    return status;
 8005f9a:	7ffb      	ldrb	r3, [r7, #31]
 8005f9c:	e000      	b.n	8005fa0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	72fb      	strb	r3, [r7, #11]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	799b      	ldrb	r3, [r3, #6]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d14a      	bne.n	800605c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	795b      	ldrb	r3, [r3, #5]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e045      	b.n	800605e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fa11 	bl	8006400 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005fde:	7afb      	ldrb	r3, [r7, #11]
 8005fe0:	2b84      	cmp	r3, #132	; 0x84
 8005fe2:	d002      	beq.n	8005fea <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005fe4:	7afb      	ldrb	r3, [r7, #11]
 8005fe6:	2b94      	cmp	r3, #148	; 0x94
 8005fe8:	d103      	bne.n	8005ff2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	711a      	strb	r2, [r3, #4]
 8005ff0:	e002      	b.n	8005ff8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005ff8:	f7ff fe3c 	bl	8005c74 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f94f 	bl	80062a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006006:	2300      	movs	r3, #0
 8006008:	82bb      	strh	r3, [r7, #20]
 800600a:	e00a      	b.n	8006022 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800600c:	8abb      	ldrh	r3, [r7, #20]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	4413      	add	r3, r2
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f944 	bl	80062a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800601c:	8abb      	ldrh	r3, [r7, #20]
 800601e:	3301      	adds	r3, #1
 8006020:	82bb      	strh	r3, [r7, #20]
 8006022:	8aba      	ldrh	r2, [r7, #20]
 8006024:	893b      	ldrh	r3, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	d3f0      	bcc.n	800600c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800602a:	f7ff fe13 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	2b84      	cmp	r3, #132	; 0x84
 8006032:	d002      	beq.n	800603a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fa07 	bl	8006448 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]
 8006046:	e001      	b.n	800604c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	715a      	strb	r2, [r3, #5]

    return status;
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	e000      	b.n	800605e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800605c:	2302      	movs	r3, #2
  }
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b088      	sub	sp, #32
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	461a      	mov	r2, r3
 8006072:	460b      	mov	r3, r1
 8006074:	72fb      	strb	r3, [r7, #11]
 8006076:	4613      	mov	r3, r2
 8006078:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	799b      	ldrb	r3, [r3, #6]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d13d      	bne.n	8006104 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	795b      	ldrb	r3, [r3, #5]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006090:	2302      	movs	r3, #2
 8006092:	e038      	b.n	8006106 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f9b0 	bl	8006400 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80060a0:	f7ff fde8 	bl	8005c74 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80060a4:	7afb      	ldrb	r3, [r7, #11]
 80060a6:	4619      	mov	r1, r3
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f8fb 	bl	80062a4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80060ae:	2100      	movs	r1, #0
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f8f7 	bl	80062a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	82fb      	strh	r3, [r7, #22]
 80060ba:	e009      	b.n	80060d0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80060bc:	69b9      	ldr	r1, [r7, #24]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f946 	bl	8006350 <SUBGHZSPI_Receive>
      pData++;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80060ca:	8afb      	ldrh	r3, [r7, #22]
 80060cc:	3301      	adds	r3, #1
 80060ce:	82fb      	strh	r3, [r7, #22]
 80060d0:	8afa      	ldrh	r2, [r7, #22]
 80060d2:	893b      	ldrh	r3, [r7, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3f1      	bcc.n	80060bc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80060d8:	f7ff fdbc 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f9b3 	bl	8006448 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e001      	b.n	80060f4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	715a      	strb	r2, [r3, #5]

    return status;
 8006100:	7ffb      	ldrb	r3, [r7, #31]
 8006102:	e000      	b.n	8006106 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
  }
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	461a      	mov	r2, r3
 800611a:	460b      	mov	r3, r1
 800611c:	72fb      	strb	r3, [r7, #11]
 800611e:	4613      	mov	r3, r2
 8006120:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	799b      	ldrb	r3, [r3, #6]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d13e      	bne.n	80061aa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	795b      	ldrb	r3, [r3, #5]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006134:	2302      	movs	r3, #2
 8006136:	e039      	b.n	80061ac <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f95e 	bl	8006400 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006144:	f7ff fd96 	bl	8005c74 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006148:	210e      	movs	r1, #14
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f8aa 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f8a5 	bl	80062a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800615a:	2300      	movs	r3, #0
 800615c:	82bb      	strh	r3, [r7, #20]
 800615e:	e00a      	b.n	8006176 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006160:	8abb      	ldrh	r3, [r7, #20]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4413      	add	r3, r2
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	4619      	mov	r1, r3
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f89a 	bl	80062a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006170:	8abb      	ldrh	r3, [r7, #20]
 8006172:	3301      	adds	r3, #1
 8006174:	82bb      	strh	r3, [r7, #20]
 8006176:	8aba      	ldrh	r2, [r7, #20]
 8006178:	893b      	ldrh	r3, [r7, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	d3f0      	bcc.n	8006160 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800617e:	f7ff fd69 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f960 	bl	8006448 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	75fb      	strb	r3, [r7, #23]
 8006194:	e001      	b.n	800619a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	715a      	strb	r2, [r3, #5]

    return status;
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	e000      	b.n	80061ac <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	461a      	mov	r2, r3
 80061c0:	460b      	mov	r3, r1
 80061c2:	72fb      	strb	r3, [r7, #11]
 80061c4:	4613      	mov	r3, r2
 80061c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	799b      	ldrb	r3, [r3, #6]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d141      	bne.n	800625a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	795b      	ldrb	r3, [r3, #5]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80061de:	2302      	movs	r3, #2
 80061e0:	e03c      	b.n	800625c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f909 	bl	8006400 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80061ee:	f7ff fd41 	bl	8005c74 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80061f2:	211e      	movs	r1, #30
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f855 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f850 	bl	80062a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006204:	2100      	movs	r1, #0
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f84c 	bl	80062a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800620c:	2300      	movs	r3, #0
 800620e:	82fb      	strh	r3, [r7, #22]
 8006210:	e009      	b.n	8006226 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006212:	69b9      	ldr	r1, [r7, #24]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f89b 	bl	8006350 <SUBGHZSPI_Receive>
      pData++;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3301      	adds	r3, #1
 800621e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006220:	8afb      	ldrh	r3, [r7, #22]
 8006222:	3301      	adds	r3, #1
 8006224:	82fb      	strh	r3, [r7, #22]
 8006226:	8afa      	ldrh	r2, [r7, #22]
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	d3f1      	bcc.n	8006212 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800622e:	f7ff fd11 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f908 	bl	8006448 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e001      	b.n	800624a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	715a      	strb	r2, [r3, #5]

    return status;
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	e000      	b.n	800625c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800625a:	2302      	movs	r3, #2
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <SUBGHZSPI_Init+0x3c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <SUBGHZSPI_Init+0x3c>)
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <SUBGHZSPI_Init+0x3c>)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006280:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006282:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <SUBGHZSPI_Init+0x3c>)
 8006284:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006288:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800628a:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <SUBGHZSPI_Init+0x3c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a04      	ldr	r2, [pc, #16]	; (80062a0 <SUBGHZSPI_Init+0x3c>)
 8006290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006294:	6013      	str	r3, [r2, #0]
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr
 80062a0:	58010000 	.word	0x58010000

080062a4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80062b4:	4b23      	ldr	r3, [pc, #140]	; (8006344 <SUBGHZSPI_Transmit+0xa0>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	0cdb      	lsrs	r3, r3, #19
 80062c2:	2264      	movs	r2, #100	; 0x64
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d105      	bne.n	80062dc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	609a      	str	r2, [r3, #8]
      break;
 80062da:	e008      	b.n	80062ee <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b01      	subs	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80062e2:	4b19      	ldr	r3, [pc, #100]	; (8006348 <SUBGHZSPI_Transmit+0xa4>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d1ed      	bne.n	80062ca <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80062ee:	4b17      	ldr	r3, [pc, #92]	; (800634c <SUBGHZSPI_Transmit+0xa8>)
 80062f0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <SUBGHZSPI_Transmit+0xa0>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	0cdb      	lsrs	r3, r3, #19
 8006306:	2264      	movs	r2, #100	; 0x64
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	609a      	str	r2, [r3, #8]
      break;
 800631e:	e008      	b.n	8006332 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b01      	subs	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <SUBGHZSPI_Transmit+0xa4>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b01      	cmp	r3, #1
 8006330:	d1ed      	bne.n	800630e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <SUBGHZSPI_Transmit+0xa4>)
 8006334:	68db      	ldr	r3, [r3, #12]

  return status;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
}
 8006338:	4618      	mov	r0, r3
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000198 	.word	0x20000198
 8006348:	58010000 	.word	0x58010000
 800634c:	5801000c 	.word	0x5801000c

08006350 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800635e:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <SUBGHZSPI_Receive+0xa4>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4613      	mov	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	0cdb      	lsrs	r3, r3, #19
 800636c:	2264      	movs	r2, #100	; 0x64
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	609a      	str	r2, [r3, #8]
      break;
 8006384:	e008      	b.n	8006398 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3b01      	subs	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <SUBGHZSPI_Receive+0xa8>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b02      	cmp	r3, #2
 8006396:	d1ed      	bne.n	8006374 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006398:	4b18      	ldr	r3, [pc, #96]	; (80063fc <SUBGHZSPI_Receive+0xac>)
 800639a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	22ff      	movs	r2, #255	; 0xff
 80063a0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80063a2:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <SUBGHZSPI_Receive+0xa4>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	0cdb      	lsrs	r3, r3, #19
 80063b0:	2264      	movs	r2, #100	; 0x64
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	609a      	str	r2, [r3, #8]
      break;
 80063c8:	e008      	b.n	80063dc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80063d0:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <SUBGHZSPI_Receive+0xa8>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d1ed      	bne.n	80063b8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <SUBGHZSPI_Receive+0xa8>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	701a      	strb	r2, [r3, #0]

  return status;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000198 	.word	0x20000198
 80063f8:	58010000 	.word	0x58010000
 80063fc:	5801000c 	.word	0x5801000c

08006400 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	791b      	ldrb	r3, [r3, #4]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d111      	bne.n	8006434 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006410:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <SUBGHZ_CheckDeviceReady+0x44>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	0c1b      	lsrs	r3, r3, #16
 800641e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006420:	f7ff fc28 	bl	8005c74 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3b01      	subs	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f9      	bne.n	8006424 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006430:	f7ff fc10 	bl	8005c54 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f807 	bl	8006448 <SUBGHZ_WaitOnBusy>
 800643a:	4603      	mov	r3, r0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000198 	.word	0x20000198

08006448 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <SUBGHZ_WaitOnBusy+0x58>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	0d1b      	lsrs	r3, r3, #20
 8006462:	2264      	movs	r2, #100	; 0x64
 8006464:	fb02 f303 	mul.w	r3, r2, r3
 8006468:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800646a:	f7ff fc31 	bl	8005cd0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800646e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	609a      	str	r2, [r3, #8]
      break;
 8006480:	e009      	b.n	8006496 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b01      	subs	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006488:	f7ff fc10 	bl	8005cac <LL_PWR_IsActiveFlag_RFBUSYS>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4013      	ands	r3, r2
 8006492:	2b01      	cmp	r3, #1
 8006494:	d0e9      	beq.n	800646a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000198 	.word	0x20000198

080064a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e049      	b.n	800654a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fb fce6 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f000 f940 	bl	8006768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_TIM_ConfigClockSource+0x1c>
 800656a:	2302      	movs	r3, #2
 800656c:	e0b6      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x18a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800658c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006590:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006598:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065aa:	d03e      	beq.n	800662a <HAL_TIM_ConfigClockSource+0xd8>
 80065ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b0:	f200 8087 	bhi.w	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	f000 8086 	beq.w	80066c8 <HAL_TIM_ConfigClockSource+0x176>
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	d87f      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065c2:	2b70      	cmp	r3, #112	; 0x70
 80065c4:	d01a      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0xaa>
 80065c6:	2b70      	cmp	r3, #112	; 0x70
 80065c8:	d87b      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065ca:	2b60      	cmp	r3, #96	; 0x60
 80065cc:	d050      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x11e>
 80065ce:	2b60      	cmp	r3, #96	; 0x60
 80065d0:	d877      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065d2:	2b50      	cmp	r3, #80	; 0x50
 80065d4:	d03c      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0xfe>
 80065d6:	2b50      	cmp	r3, #80	; 0x50
 80065d8:	d873      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d058      	beq.n	8006690 <HAL_TIM_ConfigClockSource+0x13e>
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d86f      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065e2:	2b30      	cmp	r3, #48	; 0x30
 80065e4:	d064      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x15e>
 80065e6:	2b30      	cmp	r3, #48	; 0x30
 80065e8:	d86b      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d060      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x15e>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d867      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d05c      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x15e>
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d05a      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x15e>
 80065fa:	e062      	b.n	80066c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	6899      	ldr	r1, [r3, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f000 fa1c 	bl	8006a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800661e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]
      break;
 8006628:	e04f      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6899      	ldr	r1, [r3, #8]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f000 fa05 	bl	8006a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800664c:	609a      	str	r2, [r3, #8]
      break;
 800664e:	e03c      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6859      	ldr	r1, [r3, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	461a      	mov	r2, r3
 800665e:	f000 f97a 	bl	8006956 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2150      	movs	r1, #80	; 0x50
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f9d1 	bl	8006a10 <TIM_ITRx_SetConfig>
      break;
 800666e:	e02c      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	461a      	mov	r2, r3
 800667e:	f000 f998 	bl	80069b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2160      	movs	r1, #96	; 0x60
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f9c1 	bl	8006a10 <TIM_ITRx_SetConfig>
      break;
 800668e:	e01c      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	461a      	mov	r2, r3
 800669e:	f000 f95a 	bl	8006956 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2140      	movs	r1, #64	; 0x40
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 f9b1 	bl	8006a10 <TIM_ITRx_SetConfig>
      break;
 80066ae:	e00c      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f000 f9a8 	bl	8006a10 <TIM_ITRx_SetConfig>
      break;
 80066c0:	e003      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	73fb      	strb	r3, [r7, #15]
      break;
 80066c6:	e000      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e031      	b.n	8006760 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f88c 	bl	800682c <TIM_SlaveTimer_SetConfig>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e018      	b.n	8006760 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800674c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a29      	ldr	r2, [pc, #164]	; (8006820 <TIM_Base_SetConfig+0xb8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_Base_SetConfig+0x20>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d108      	bne.n	800679a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a20      	ldr	r2, [pc, #128]	; (8006820 <TIM_Base_SetConfig+0xb8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00b      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d007      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <TIM_Base_SetConfig+0xc0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d108      	bne.n	80067cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0b      	ldr	r2, [pc, #44]	; (8006820 <TIM_Base_SetConfig+0xb8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0xa0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0xa0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <TIM_Base_SetConfig+0xc0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d103      	bne.n	8006810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	615a      	str	r2, [r3, #20]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b70      	cmp	r3, #112	; 0x70
 800687c:	d01a      	beq.n	80068b4 <TIM_SlaveTimer_SetConfig+0x88>
 800687e:	2b70      	cmp	r3, #112	; 0x70
 8006880:	d860      	bhi.n	8006944 <TIM_SlaveTimer_SetConfig+0x118>
 8006882:	2b60      	cmp	r3, #96	; 0x60
 8006884:	d054      	beq.n	8006930 <TIM_SlaveTimer_SetConfig+0x104>
 8006886:	2b60      	cmp	r3, #96	; 0x60
 8006888:	d85c      	bhi.n	8006944 <TIM_SlaveTimer_SetConfig+0x118>
 800688a:	2b50      	cmp	r3, #80	; 0x50
 800688c:	d046      	beq.n	800691c <TIM_SlaveTimer_SetConfig+0xf0>
 800688e:	2b50      	cmp	r3, #80	; 0x50
 8006890:	d858      	bhi.n	8006944 <TIM_SlaveTimer_SetConfig+0x118>
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d019      	beq.n	80068ca <TIM_SlaveTimer_SetConfig+0x9e>
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d854      	bhi.n	8006944 <TIM_SlaveTimer_SetConfig+0x118>
 800689a:	2b30      	cmp	r3, #48	; 0x30
 800689c:	d055      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x11e>
 800689e:	2b30      	cmp	r3, #48	; 0x30
 80068a0:	d850      	bhi.n	8006944 <TIM_SlaveTimer_SetConfig+0x118>
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d051      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x11e>
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d84c      	bhi.n	8006944 <TIM_SlaveTimer_SetConfig+0x118>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d04d      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x11e>
 80068ae:	2b10      	cmp	r3, #16
 80068b0:	d04b      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x11e>
 80068b2:	e047      	b.n	8006944 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68d9      	ldr	r1, [r3, #12]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f000 f8c0 	bl	8006a48 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80068c8:	e040      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b05      	cmp	r3, #5
 80068d0:	d101      	bne.n	80068d6 <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e03b      	b.n	800694e <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a1a      	ldr	r2, [r3, #32]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068fc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	4313      	orrs	r3, r2
 8006908:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	621a      	str	r2, [r3, #32]
      break;
 800691a:	e017      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	6899      	ldr	r1, [r3, #8]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	461a      	mov	r2, r3
 800692a:	f000 f814 	bl	8006956 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800692e:	e00d      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6899      	ldr	r1, [r3, #8]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	461a      	mov	r2, r3
 800693e:	f000 f838 	bl	80069b2 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006942:	e003      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	75fb      	strb	r3, [r7, #23]
      break;
 8006948:	e000      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800694a:	bf00      	nop
  }

  return status;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006956:	b480      	push	{r7}
 8006958:	b087      	sub	sp, #28
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f023 0201 	bic.w	r2, r3, #1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 030a 	bic.w	r3, r3, #10
 8006992:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b087      	sub	sp, #28
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0210 	bic.w	r2, r3, #16
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	031b      	lsls	r3, r3, #12
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f043 0307 	orr.w	r3, r3, #7
 8006a36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	609a      	str	r2, [r3, #8]
}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	021a      	lsls	r2, r3, #8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	609a      	str	r2, [r3, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
	...

08006a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e04a      	b.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1e      	ldr	r2, [pc, #120]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d108      	bne.n	8006adc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ad0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a11      	ldr	r2, [pc, #68]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d10c      	bne.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr
 8006b40:	40012c00 	.word	0x40012c00

08006b44 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8006b48:	f7fb fa18 	bl	8001f7c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8006b4c:	f000 f808 	bl	8006b60 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8006b50:	bf00      	nop
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0

  /* USER CODE END MX_LoRaWAN_Process_1 */
  /* USER CODE BEGIN MX_LoRaWAN_Process_OS */

  /* USER CODE END MX_LoRaWAN_Process_OS */
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr

08006b60 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8006b64:	4902      	ldr	r1, [pc, #8]	; (8006b70 <LoRaWAN_Init+0x10>)
 8006b66:	4803      	ldr	r0, [pc, #12]	; (8006b74 <LoRaWAN_Init+0x14>)
 8006b68:	f001 fb40 	bl	80081ec <LmHandlerInit>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8006b6c:	bf00      	nop
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	01030000 	.word	0x01030000
 8006b74:	200001a4 	.word	0x200001a4

08006b78 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr

08006bc2 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8006be2:	b480      	push	{r7}
 8006be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
}
 8006be6:	bf00      	nop
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <OnSystemReset>:

static void OnSystemReset(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
}
 8006c2c:	bf00      	nop
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8006c3e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr

08006c4a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	4603      	mov	r3, r0
 8006c52:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8006c58:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8006c6e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr

08006c7a <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8006c80:	2301      	movs	r3, #1
 8006c82:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8006c84:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8006c96:	2301      	movs	r3, #1
 8006c98:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8006c9a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	4603      	mov	r3, r0
 8006cae:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 8006cba:	230f      	movs	r3, #15
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	e001      	b.n	8006cc4 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8006cc0:	2316      	movs	r3, #22
 8006cc2:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	33f1      	adds	r3, #241	; 0xf1
 8006cdc:	2210      	movs	r2, #16
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f007 f973 	bl	800dfcc <memset1>
    ctx->M_n = 0;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	22f0      	movs	r2, #240	; 0xf0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f007 f969 	bl	800dfcc <memset1>
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	2110      	movs	r1, #16
 8006d12:	6838      	ldr	r0, [r7, #0]
 8006d14:	f000 fe5c 	bl	80079d0 <lorawan_aes_set_key>
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	; 0x30
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80a1 	beq.w	8006e7a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006d3e:	f1c3 0310 	rsb	r3, r3, #16
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	bf28      	it	cs
 8006d48:	4613      	movcs	r3, r2
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f203 1201 	addw	r2, r3, #257	; 0x101
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006d58:	4413      	add	r3, r2
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f007 f8f8 	bl	800df56 <memcpy1>
        ctx->M_n += mlen;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	441a      	add	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006d7c:	2b0f      	cmp	r3, #15
 8006d7e:	f240 808d 	bls.w	8006e9c <AES_CMAC_Update+0x17c>
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	429a      	cmp	r2, r3
 8006d88:	f000 8088 	beq.w	8006e9c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d90:	e015      	b.n	8006dbe <AES_CMAC_Update+0x9e>
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	4413      	add	r3, r2
 8006d98:	33f1      	adds	r3, #241	; 0xf1
 8006d9a:	781a      	ldrb	r2, [r3, #0]
 8006d9c:	68f9      	ldr	r1, [r7, #12]
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	440b      	add	r3, r1
 8006da2:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	4053      	eors	r3, r2
 8006daa:	b2d9      	uxtb	r1, r3
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	4413      	add	r3, r2
 8006db2:	33f1      	adds	r3, #241	; 0xf1
 8006db4:	460a      	mov	r2, r1
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	3301      	adds	r3, #1
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	2b0f      	cmp	r3, #15
 8006dc2:	dde6      	ble.n	8006d92 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	2210      	movs	r2, #16
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f007 f8c0 	bl	800df56 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	f107 0114 	add.w	r1, r7, #20
 8006ddc:	f107 0314 	add.w	r3, r7, #20
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fed3 	bl	8007b8c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	33f1      	adds	r3, #241	; 0xf1
 8006dea:	f107 0114 	add.w	r1, r7, #20
 8006dee:	2210      	movs	r2, #16
 8006df0:	4618      	mov	r0, r3
 8006df2:	f007 f8b0 	bl	800df56 <memcpy1>

        data += mlen;
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	4413      	add	r3, r2
 8006dfc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8006e06:	e038      	b.n	8006e7a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8006e08:	2300      	movs	r3, #0
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e0c:	e013      	b.n	8006e36 <AES_CMAC_Update+0x116>
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	4413      	add	r3, r2
 8006e14:	33f1      	adds	r3, #241	; 0xf1
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	440b      	add	r3, r1
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	4053      	eors	r3, r2
 8006e22:	b2d9      	uxtb	r1, r3
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	4413      	add	r3, r2
 8006e2a:	33f1      	adds	r3, #241	; 0xf1
 8006e2c:	460a      	mov	r2, r1
 8006e2e:	701a      	strb	r2, [r3, #0]
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	3301      	adds	r3, #1
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	2b0f      	cmp	r3, #15
 8006e3a:	dde8      	ble.n	8006e0e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8006e42:	f107 0314 	add.w	r3, r7, #20
 8006e46:	2210      	movs	r2, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f007 f884 	bl	800df56 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f107 0114 	add.w	r1, r7, #20
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fe97 	bl	8007b8c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	33f1      	adds	r3, #241	; 0xf1
 8006e62:	f107 0114 	add.w	r1, r7, #20
 8006e66:	2210      	movs	r2, #16
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f007 f874 	bl	800df56 <memcpy1>

        data += 16;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3310      	adds	r3, #16
 8006e72:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3b10      	subs	r3, #16
 8006e78:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d8c3      	bhi.n	8006e08 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	b292      	uxth	r2, r2
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f007 f862 	bl	800df56 <memcpy1>
    ctx->M_n = len;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8006e9a:	e000      	b.n	8006e9e <AES_CMAC_Update+0x17e>
            return;
 8006e9c:	bf00      	nop
}
 8006e9e:	3730      	adds	r7, #48	; 0x30
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b092      	sub	sp, #72	; 0x48
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8006eae:	f107 031c 	add.w	r3, r7, #28
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f007 f888 	bl	800dfcc <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	f107 011c 	add.w	r1, r7, #28
 8006ec2:	f107 031c 	add.w	r3, r7, #28
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fe60 	bl	8007b8c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8006ecc:	7f3b      	ldrb	r3, [r7, #28]
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da30      	bge.n	8006f36 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed8:	e01b      	b.n	8006f12 <AES_CMAC_Final+0x6e>
 8006eda:	f107 021c 	add.w	r2, r7, #28
 8006ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee0:	4413      	add	r3, r2
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	b25a      	sxtb	r2, r3
 8006ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eea:	3301      	adds	r3, #1
 8006eec:	3348      	adds	r3, #72	; 0x48
 8006eee:	443b      	add	r3, r7
 8006ef0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006ef4:	09db      	lsrs	r3, r3, #7
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b25b      	sxtb	r3, r3
 8006efe:	b2d9      	uxtb	r1, r3
 8006f00:	f107 021c 	add.w	r2, r7, #28
 8006f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f06:	4413      	add	r3, r2
 8006f08:	460a      	mov	r2, r1
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f0e:	3301      	adds	r3, #1
 8006f10:	647b      	str	r3, [r7, #68]	; 0x44
 8006f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f14:	2b0e      	cmp	r3, #14
 8006f16:	dde0      	ble.n	8006eda <AES_CMAC_Final+0x36>
 8006f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8006f24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f28:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f34:	e027      	b.n	8006f86 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 8006f36:	2300      	movs	r3, #0
 8006f38:	643b      	str	r3, [r7, #64]	; 0x40
 8006f3a:	e01b      	b.n	8006f74 <AES_CMAC_Final+0xd0>
 8006f3c:	f107 021c 	add.w	r2, r7, #28
 8006f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f42:	4413      	add	r3, r2
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	b25a      	sxtb	r2, r3
 8006f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	3348      	adds	r3, #72	; 0x48
 8006f50:	443b      	add	r3, r7
 8006f52:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006f56:	09db      	lsrs	r3, r3, #7
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	b25b      	sxtb	r3, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	b2d9      	uxtb	r1, r3
 8006f62:	f107 021c 	add.w	r2, r7, #28
 8006f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f68:	4413      	add	r3, r2
 8006f6a:	460a      	mov	r2, r1
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f70:	3301      	adds	r3, #1
 8006f72:	643b      	str	r3, [r7, #64]	; 0x40
 8006f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f76:	2b0e      	cmp	r3, #14
 8006f78:	dde0      	ble.n	8006f3c <AES_CMAC_Final+0x98>
 8006f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006f8c:	2b10      	cmp	r3, #16
 8006f8e:	d11d      	bne.n	8006fcc <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8006f90:	2300      	movs	r3, #0
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f94:	e016      	b.n	8006fc4 <AES_CMAC_Final+0x120>
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	f107 011c 	add.w	r1, r7, #28
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa8:	440b      	add	r3, r1
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	4053      	eors	r3, r2
 8006fae:	b2d9      	uxtb	r1, r3
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006fba:	460a      	mov	r2, r1
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	dde5      	ble.n	8006f96 <AES_CMAC_Final+0xf2>
 8006fca:	e096      	b.n	80070fa <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8006fcc:	7f3b      	ldrb	r3, [r7, #28]
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da30      	bge.n	8007036 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fd8:	e01b      	b.n	8007012 <AES_CMAC_Final+0x16e>
 8006fda:	f107 021c 	add.w	r2, r7, #28
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	4413      	add	r3, r2
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	b25a      	sxtb	r2, r3
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	3301      	adds	r3, #1
 8006fec:	3348      	adds	r3, #72	; 0x48
 8006fee:	443b      	add	r3, r7
 8006ff0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006ff4:	09db      	lsrs	r3, r3, #7
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	b25b      	sxtb	r3, r3
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	b2d9      	uxtb	r1, r3
 8007000:	f107 021c 	add.w	r2, r7, #28
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	4413      	add	r3, r2
 8007008:	460a      	mov	r2, r1
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	3301      	adds	r3, #1
 8007010:	63bb      	str	r3, [r7, #56]	; 0x38
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	2b0e      	cmp	r3, #14
 8007016:	dde0      	ble.n	8006fda <AES_CMAC_Final+0x136>
 8007018:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 8007024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007028:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800702c:	43db      	mvns	r3, r3
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007034:	e027      	b.n	8007086 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 8007036:	2300      	movs	r3, #0
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	e01b      	b.n	8007074 <AES_CMAC_Final+0x1d0>
 800703c:	f107 021c 	add.w	r2, r7, #28
 8007040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007042:	4413      	add	r3, r2
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	b25a      	sxtb	r2, r3
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	3301      	adds	r3, #1
 800704e:	3348      	adds	r3, #72	; 0x48
 8007050:	443b      	add	r3, r7
 8007052:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007056:	09db      	lsrs	r3, r3, #7
 8007058:	b2db      	uxtb	r3, r3
 800705a:	b25b      	sxtb	r3, r3
 800705c:	4313      	orrs	r3, r2
 800705e:	b25b      	sxtb	r3, r3
 8007060:	b2d9      	uxtb	r1, r3
 8007062:	f107 021c 	add.w	r2, r7, #28
 8007066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007068:	4413      	add	r3, r2
 800706a:	460a      	mov	r2, r1
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	3301      	adds	r3, #1
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	2b0e      	cmp	r3, #14
 8007078:	dde0      	ble.n	800703c <AES_CMAC_Final+0x198>
 800707a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	4413      	add	r3, r2
 8007090:	2280      	movs	r2, #128	; 0x80
 8007092:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8007096:	e007      	b.n	80070a8 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	4413      	add	r3, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80070bc:	2b0f      	cmp	r3, #15
 80070be:	d9eb      	bls.n	8007098 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 80070c0:	2300      	movs	r3, #0
 80070c2:	633b      	str	r3, [r7, #48]	; 0x30
 80070c4:	e016      	b.n	80070f4 <AES_CMAC_Final+0x250>
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	4413      	add	r3, r2
 80070cc:	f203 1301 	addw	r3, r3, #257	; 0x101
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	f107 011c 	add.w	r1, r7, #28
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	440b      	add	r3, r1
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	4053      	eors	r3, r2
 80070de:	b2d9      	uxtb	r1, r3
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	4413      	add	r3, r2
 80070e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 80070ea:	460a      	mov	r2, r1
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	3301      	adds	r3, #1
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	dde5      	ble.n	80070c6 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 80070fa:	2300      	movs	r3, #0
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070fe:	e015      	b.n	800712c <AES_CMAC_Final+0x288>
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	4413      	add	r3, r2
 8007106:	33f1      	adds	r3, #241	; 0xf1
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	440b      	add	r3, r1
 8007110:	f203 1301 	addw	r3, r3, #257	; 0x101
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	4053      	eors	r3, r2
 8007118:	b2d9      	uxtb	r1, r3
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	4413      	add	r3, r2
 8007120:	33f1      	adds	r3, #241	; 0xf1
 8007122:	460a      	mov	r2, r1
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	3301      	adds	r3, #1
 800712a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	2b0f      	cmp	r3, #15
 8007130:	dde6      	ble.n	8007100 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	2210      	movs	r2, #16
 800713e:	4618      	mov	r0, r3
 8007140:	f006 ff09 	bl	800df56 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	f107 030c 	add.w	r3, r7, #12
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fd1d 	bl	8007b8c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8007152:	f107 031c 	add.w	r3, r7, #28
 8007156:	2210      	movs	r2, #16
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f006 ff36 	bl	800dfcc <memset1>
}
 8007160:	bf00      	nop
 8007162:	3748      	adds	r7, #72	; 0x48
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3301      	adds	r3, #1
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	7852      	ldrb	r2, [r2, #1]
 8007182:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3302      	adds	r3, #2
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	7892      	ldrb	r2, [r2, #2]
 800718c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3303      	adds	r3, #3
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	78d2      	ldrb	r2, [r2, #3]
 8007196:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	7912      	ldrb	r2, [r2, #4]
 80071a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3305      	adds	r3, #5
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	7952      	ldrb	r2, [r2, #5]
 80071aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3306      	adds	r3, #6
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	7992      	ldrb	r2, [r2, #6]
 80071b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3307      	adds	r3, #7
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	79d2      	ldrb	r2, [r2, #7]
 80071be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3308      	adds	r3, #8
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	7a12      	ldrb	r2, [r2, #8]
 80071c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3309      	adds	r3, #9
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	7a52      	ldrb	r2, [r2, #9]
 80071d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	330a      	adds	r3, #10
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	7a92      	ldrb	r2, [r2, #10]
 80071dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	330b      	adds	r3, #11
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	7ad2      	ldrb	r2, [r2, #11]
 80071e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	330c      	adds	r3, #12
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	7b12      	ldrb	r2, [r2, #12]
 80071f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	330d      	adds	r3, #13
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	7b52      	ldrb	r2, [r2, #13]
 80071fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	330e      	adds	r3, #14
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	7b92      	ldrb	r2, [r2, #14]
 8007204:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	330f      	adds	r3, #15
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	7bd2      	ldrb	r2, [r2, #15]
 800720e:	701a      	strb	r2, [r3, #0]
#endif
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 8007228:	e007      	b.n	800723a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	1c53      	adds	r3, r2, #1
 800722e:	60bb      	str	r3, [r7, #8]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	1c59      	adds	r1, r3, #1
 8007234:	60f9      	str	r1, [r7, #12]
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	1e5a      	subs	r2, r3, #1
 800723e:	71fa      	strb	r2, [r7, #7]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f2      	bne.n	800722a <copy_block_nn+0x10>
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	4053      	eors	r3, r2
 8007264:	b2da      	uxtb	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3301      	adds	r3, #1
 800726e:	7819      	ldrb	r1, [r3, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3301      	adds	r3, #1
 800727a:	404a      	eors	r2, r1
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3302      	adds	r3, #2
 8007284:	7819      	ldrb	r1, [r3, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	3302      	adds	r3, #2
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3302      	adds	r3, #2
 8007290:	404a      	eors	r2, r1
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3303      	adds	r3, #3
 800729a:	7819      	ldrb	r1, [r3, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	3303      	adds	r3, #3
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3303      	adds	r3, #3
 80072a6:	404a      	eors	r2, r1
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	7819      	ldrb	r1, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	3304      	adds	r3, #4
 80072b6:	781a      	ldrb	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	404a      	eors	r2, r1
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3305      	adds	r3, #5
 80072c6:	7819      	ldrb	r1, [r3, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	3305      	adds	r3, #5
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3305      	adds	r3, #5
 80072d2:	404a      	eors	r2, r1
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3306      	adds	r3, #6
 80072dc:	7819      	ldrb	r1, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	3306      	adds	r3, #6
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3306      	adds	r3, #6
 80072e8:	404a      	eors	r2, r1
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3307      	adds	r3, #7
 80072f2:	7819      	ldrb	r1, [r3, #0]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	3307      	adds	r3, #7
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3307      	adds	r3, #7
 80072fe:	404a      	eors	r2, r1
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3308      	adds	r3, #8
 8007308:	7819      	ldrb	r1, [r3, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	3308      	adds	r3, #8
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3308      	adds	r3, #8
 8007314:	404a      	eors	r2, r1
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3309      	adds	r3, #9
 800731e:	7819      	ldrb	r1, [r3, #0]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	3309      	adds	r3, #9
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3309      	adds	r3, #9
 800732a:	404a      	eors	r2, r1
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	330a      	adds	r3, #10
 8007334:	7819      	ldrb	r1, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	330a      	adds	r3, #10
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	330a      	adds	r3, #10
 8007340:	404a      	eors	r2, r1
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	330b      	adds	r3, #11
 800734a:	7819      	ldrb	r1, [r3, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	330b      	adds	r3, #11
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	330b      	adds	r3, #11
 8007356:	404a      	eors	r2, r1
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	330c      	adds	r3, #12
 8007360:	7819      	ldrb	r1, [r3, #0]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	781a      	ldrb	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	330c      	adds	r3, #12
 800736c:	404a      	eors	r2, r1
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	330d      	adds	r3, #13
 8007376:	7819      	ldrb	r1, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	330d      	adds	r3, #13
 800737c:	781a      	ldrb	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	330d      	adds	r3, #13
 8007382:	404a      	eors	r2, r1
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	330e      	adds	r3, #14
 800738c:	7819      	ldrb	r1, [r3, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	330e      	adds	r3, #14
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	330e      	adds	r3, #14
 8007398:	404a      	eors	r2, r1
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	330f      	adds	r3, #15
 80073a2:	7819      	ldrb	r1, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	330f      	adds	r3, #15
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	330f      	adds	r3, #15
 80073ae:	404a      	eors	r2, r1
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
#endif
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr

080073be <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	4053      	eors	r3, r2
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	3301      	adds	r3, #1
 80073de:	7819      	ldrb	r1, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3301      	adds	r3, #1
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	404a      	eors	r2, r1
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	3302      	adds	r3, #2
 80073f4:	7819      	ldrb	r1, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3302      	adds	r3, #2
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3302      	adds	r3, #2
 8007400:	404a      	eors	r2, r1
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3303      	adds	r3, #3
 800740a:	7819      	ldrb	r1, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3303      	adds	r3, #3
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3303      	adds	r3, #3
 8007416:	404a      	eors	r2, r1
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	3304      	adds	r3, #4
 8007420:	7819      	ldrb	r1, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3304      	adds	r3, #4
 800742c:	404a      	eors	r2, r1
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	3305      	adds	r3, #5
 8007436:	7819      	ldrb	r1, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3305      	adds	r3, #5
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3305      	adds	r3, #5
 8007442:	404a      	eors	r2, r1
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	3306      	adds	r3, #6
 800744c:	7819      	ldrb	r1, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3306      	adds	r3, #6
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3306      	adds	r3, #6
 8007458:	404a      	eors	r2, r1
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3307      	adds	r3, #7
 8007462:	7819      	ldrb	r1, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3307      	adds	r3, #7
 8007468:	781a      	ldrb	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3307      	adds	r3, #7
 800746e:	404a      	eors	r2, r1
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	3308      	adds	r3, #8
 8007478:	7819      	ldrb	r1, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3308      	adds	r3, #8
 800747e:	781a      	ldrb	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3308      	adds	r3, #8
 8007484:	404a      	eors	r2, r1
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3309      	adds	r3, #9
 800748e:	7819      	ldrb	r1, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3309      	adds	r3, #9
 8007494:	781a      	ldrb	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3309      	adds	r3, #9
 800749a:	404a      	eors	r2, r1
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	330a      	adds	r3, #10
 80074a4:	7819      	ldrb	r1, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	330a      	adds	r3, #10
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	330a      	adds	r3, #10
 80074b0:	404a      	eors	r2, r1
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	330b      	adds	r3, #11
 80074ba:	7819      	ldrb	r1, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	330b      	adds	r3, #11
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	330b      	adds	r3, #11
 80074c6:	404a      	eors	r2, r1
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	330c      	adds	r3, #12
 80074d0:	7819      	ldrb	r1, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	330c      	adds	r3, #12
 80074d6:	781a      	ldrb	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	330c      	adds	r3, #12
 80074dc:	404a      	eors	r2, r1
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	330d      	adds	r3, #13
 80074e6:	7819      	ldrb	r1, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	330d      	adds	r3, #13
 80074ec:	781a      	ldrb	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	330d      	adds	r3, #13
 80074f2:	404a      	eors	r2, r1
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	330e      	adds	r3, #14
 80074fc:	7819      	ldrb	r1, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	330e      	adds	r3, #14
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	330e      	adds	r3, #14
 8007508:	404a      	eors	r2, r1
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	330f      	adds	r3, #15
 8007512:	7819      	ldrb	r1, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	330f      	adds	r3, #15
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	330f      	adds	r3, #15
 800751e:	404a      	eors	r2, r1
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr

0800752e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff fe88 	bl	8007250 <xor_block>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	4b48      	ldr	r3, [pc, #288]	; (8007678 <shift_sub_rows+0x130>)
 8007558:	5c9a      	ldrb	r2, [r3, r2]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3304      	adds	r3, #4
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	4619      	mov	r1, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3304      	adds	r3, #4
 800756a:	4a43      	ldr	r2, [pc, #268]	; (8007678 <shift_sub_rows+0x130>)
 800756c:	5c52      	ldrb	r2, [r2, r1]
 800756e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3308      	adds	r3, #8
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	4619      	mov	r1, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3308      	adds	r3, #8
 800757c:	4a3e      	ldr	r2, [pc, #248]	; (8007678 <shift_sub_rows+0x130>)
 800757e:	5c52      	ldrb	r2, [r2, r1]
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	330c      	adds	r3, #12
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	4619      	mov	r1, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	330c      	adds	r3, #12
 800758e:	4a3a      	ldr	r2, [pc, #232]	; (8007678 <shift_sub_rows+0x130>)
 8007590:	5c52      	ldrb	r2, [r2, r1]
 8007592:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3305      	adds	r3, #5
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	4619      	mov	r1, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3301      	adds	r3, #1
 80075a6:	4a34      	ldr	r2, [pc, #208]	; (8007678 <shift_sub_rows+0x130>)
 80075a8:	5c52      	ldrb	r2, [r2, r1]
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3309      	adds	r3, #9
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	4619      	mov	r1, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3305      	adds	r3, #5
 80075b8:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <shift_sub_rows+0x130>)
 80075ba:	5c52      	ldrb	r2, [r2, r1]
 80075bc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	330d      	adds	r3, #13
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	4619      	mov	r1, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3309      	adds	r3, #9
 80075ca:	4a2b      	ldr	r2, [pc, #172]	; (8007678 <shift_sub_rows+0x130>)
 80075cc:	5c52      	ldrb	r2, [r2, r1]
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	7bfa      	ldrb	r2, [r7, #15]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	330d      	adds	r3, #13
 80075d6:	4928      	ldr	r1, [pc, #160]	; (8007678 <shift_sub_rows+0x130>)
 80075d8:	5c8a      	ldrb	r2, [r1, r2]
 80075da:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	789b      	ldrb	r3, [r3, #2]
 80075e0:	73fb      	strb	r3, [r7, #15]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	330a      	adds	r3, #10
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	4619      	mov	r1, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3302      	adds	r3, #2
 80075ee:	4a22      	ldr	r2, [pc, #136]	; (8007678 <shift_sub_rows+0x130>)
 80075f0:	5c52      	ldrb	r2, [r2, r1]
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	7bfa      	ldrb	r2, [r7, #15]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	330a      	adds	r3, #10
 80075fa:	491f      	ldr	r1, [pc, #124]	; (8007678 <shift_sub_rows+0x130>)
 80075fc:	5c8a      	ldrb	r2, [r1, r2]
 80075fe:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	799b      	ldrb	r3, [r3, #6]
 8007604:	73fb      	strb	r3, [r7, #15]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	330e      	adds	r3, #14
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	4619      	mov	r1, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3306      	adds	r3, #6
 8007612:	4a19      	ldr	r2, [pc, #100]	; (8007678 <shift_sub_rows+0x130>)
 8007614:	5c52      	ldrb	r2, [r2, r1]
 8007616:	701a      	strb	r2, [r3, #0]
 8007618:	7bfa      	ldrb	r2, [r7, #15]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	330e      	adds	r3, #14
 800761e:	4916      	ldr	r1, [pc, #88]	; (8007678 <shift_sub_rows+0x130>)
 8007620:	5c8a      	ldrb	r2, [r1, r2]
 8007622:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7bdb      	ldrb	r3, [r3, #15]
 8007628:	73fb      	strb	r3, [r7, #15]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	330b      	adds	r3, #11
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	330f      	adds	r3, #15
 8007636:	4a10      	ldr	r2, [pc, #64]	; (8007678 <shift_sub_rows+0x130>)
 8007638:	5c52      	ldrb	r2, [r2, r1]
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3307      	adds	r3, #7
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4619      	mov	r1, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	330b      	adds	r3, #11
 8007648:	4a0b      	ldr	r2, [pc, #44]	; (8007678 <shift_sub_rows+0x130>)
 800764a:	5c52      	ldrb	r2, [r2, r1]
 800764c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3303      	adds	r3, #3
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	4619      	mov	r1, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3307      	adds	r3, #7
 800765a:	4a07      	ldr	r2, [pc, #28]	; (8007678 <shift_sub_rows+0x130>)
 800765c:	5c52      	ldrb	r2, [r2, r1]
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	7bfa      	ldrb	r2, [r7, #15]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3303      	adds	r3, #3
 8007666:	4904      	ldr	r1, [pc, #16]	; (8007678 <shift_sub_rows+0x130>)
 8007668:	5c8a      	ldrb	r2, [r1, r2]
 800766a:	701a      	strb	r2, [r3, #0]
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	08014cfc 	.word	0x08014cfc

0800767c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8007684:	f107 0308 	add.w	r3, r7, #8
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fd6c 	bl	8007168 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007690:	7a3b      	ldrb	r3, [r7, #8]
 8007692:	461a      	mov	r2, r3
 8007694:	4b9a      	ldr	r3, [pc, #616]	; (8007900 <mix_sub_columns+0x284>)
 8007696:	5c9a      	ldrb	r2, [r3, r2]
 8007698:	7b7b      	ldrb	r3, [r7, #13]
 800769a:	4619      	mov	r1, r3
 800769c:	4b99      	ldr	r3, [pc, #612]	; (8007904 <mix_sub_columns+0x288>)
 800769e:	5c5b      	ldrb	r3, [r3, r1]
 80076a0:	4053      	eors	r3, r2
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	7cbb      	ldrb	r3, [r7, #18]
 80076a6:	4619      	mov	r1, r3
 80076a8:	4b97      	ldr	r3, [pc, #604]	; (8007908 <mix_sub_columns+0x28c>)
 80076aa:	5c5b      	ldrb	r3, [r3, r1]
 80076ac:	4053      	eors	r3, r2
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	4619      	mov	r1, r3
 80076b4:	4b94      	ldr	r3, [pc, #592]	; (8007908 <mix_sub_columns+0x28c>)
 80076b6:	5c5b      	ldrb	r3, [r3, r1]
 80076b8:	4053      	eors	r3, r2
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80076c0:	7a3b      	ldrb	r3, [r7, #8]
 80076c2:	461a      	mov	r2, r3
 80076c4:	4b90      	ldr	r3, [pc, #576]	; (8007908 <mix_sub_columns+0x28c>)
 80076c6:	5c9a      	ldrb	r2, [r3, r2]
 80076c8:	7b7b      	ldrb	r3, [r7, #13]
 80076ca:	4619      	mov	r1, r3
 80076cc:	4b8c      	ldr	r3, [pc, #560]	; (8007900 <mix_sub_columns+0x284>)
 80076ce:	5c5b      	ldrb	r3, [r3, r1]
 80076d0:	4053      	eors	r3, r2
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	7cbb      	ldrb	r3, [r7, #18]
 80076d6:	4619      	mov	r1, r3
 80076d8:	4b8a      	ldr	r3, [pc, #552]	; (8007904 <mix_sub_columns+0x288>)
 80076da:	5c5b      	ldrb	r3, [r3, r1]
 80076dc:	4053      	eors	r3, r2
 80076de:	b2d9      	uxtb	r1, r3
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	461a      	mov	r2, r3
 80076e4:	4b88      	ldr	r3, [pc, #544]	; (8007908 <mix_sub_columns+0x28c>)
 80076e6:	5c9a      	ldrb	r2, [r3, r2]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3301      	adds	r3, #1
 80076ec:	404a      	eors	r2, r1
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076f2:	7a3b      	ldrb	r3, [r7, #8]
 80076f4:	461a      	mov	r2, r3
 80076f6:	4b84      	ldr	r3, [pc, #528]	; (8007908 <mix_sub_columns+0x28c>)
 80076f8:	5c9a      	ldrb	r2, [r3, r2]
 80076fa:	7b7b      	ldrb	r3, [r7, #13]
 80076fc:	4619      	mov	r1, r3
 80076fe:	4b82      	ldr	r3, [pc, #520]	; (8007908 <mix_sub_columns+0x28c>)
 8007700:	5c5b      	ldrb	r3, [r3, r1]
 8007702:	4053      	eors	r3, r2
 8007704:	b2da      	uxtb	r2, r3
 8007706:	7cbb      	ldrb	r3, [r7, #18]
 8007708:	4619      	mov	r1, r3
 800770a:	4b7d      	ldr	r3, [pc, #500]	; (8007900 <mix_sub_columns+0x284>)
 800770c:	5c5b      	ldrb	r3, [r3, r1]
 800770e:	4053      	eors	r3, r2
 8007710:	b2d9      	uxtb	r1, r3
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	461a      	mov	r2, r3
 8007716:	4b7b      	ldr	r3, [pc, #492]	; (8007904 <mix_sub_columns+0x288>)
 8007718:	5c9a      	ldrb	r2, [r3, r2]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3302      	adds	r3, #2
 800771e:	404a      	eors	r2, r1
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007724:	7a3b      	ldrb	r3, [r7, #8]
 8007726:	461a      	mov	r2, r3
 8007728:	4b76      	ldr	r3, [pc, #472]	; (8007904 <mix_sub_columns+0x288>)
 800772a:	5c9a      	ldrb	r2, [r3, r2]
 800772c:	7b7b      	ldrb	r3, [r7, #13]
 800772e:	4619      	mov	r1, r3
 8007730:	4b75      	ldr	r3, [pc, #468]	; (8007908 <mix_sub_columns+0x28c>)
 8007732:	5c5b      	ldrb	r3, [r3, r1]
 8007734:	4053      	eors	r3, r2
 8007736:	b2da      	uxtb	r2, r3
 8007738:	7cbb      	ldrb	r3, [r7, #18]
 800773a:	4619      	mov	r1, r3
 800773c:	4b72      	ldr	r3, [pc, #456]	; (8007908 <mix_sub_columns+0x28c>)
 800773e:	5c5b      	ldrb	r3, [r3, r1]
 8007740:	4053      	eors	r3, r2
 8007742:	b2d9      	uxtb	r1, r3
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	461a      	mov	r2, r3
 8007748:	4b6d      	ldr	r3, [pc, #436]	; (8007900 <mix_sub_columns+0x284>)
 800774a:	5c9a      	ldrb	r2, [r3, r2]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3303      	adds	r3, #3
 8007750:	404a      	eors	r2, r1
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007756:	7b3b      	ldrb	r3, [r7, #12]
 8007758:	461a      	mov	r2, r3
 800775a:	4b69      	ldr	r3, [pc, #420]	; (8007900 <mix_sub_columns+0x284>)
 800775c:	5c9a      	ldrb	r2, [r3, r2]
 800775e:	7c7b      	ldrb	r3, [r7, #17]
 8007760:	4619      	mov	r1, r3
 8007762:	4b68      	ldr	r3, [pc, #416]	; (8007904 <mix_sub_columns+0x288>)
 8007764:	5c5b      	ldrb	r3, [r3, r1]
 8007766:	4053      	eors	r3, r2
 8007768:	b2da      	uxtb	r2, r3
 800776a:	7dbb      	ldrb	r3, [r7, #22]
 800776c:	4619      	mov	r1, r3
 800776e:	4b66      	ldr	r3, [pc, #408]	; (8007908 <mix_sub_columns+0x28c>)
 8007770:	5c5b      	ldrb	r3, [r3, r1]
 8007772:	4053      	eors	r3, r2
 8007774:	b2d9      	uxtb	r1, r3
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	461a      	mov	r2, r3
 800777a:	4b63      	ldr	r3, [pc, #396]	; (8007908 <mix_sub_columns+0x28c>)
 800777c:	5c9a      	ldrb	r2, [r3, r2]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3304      	adds	r3, #4
 8007782:	404a      	eors	r2, r1
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007788:	7b3b      	ldrb	r3, [r7, #12]
 800778a:	461a      	mov	r2, r3
 800778c:	4b5e      	ldr	r3, [pc, #376]	; (8007908 <mix_sub_columns+0x28c>)
 800778e:	5c9a      	ldrb	r2, [r3, r2]
 8007790:	7c7b      	ldrb	r3, [r7, #17]
 8007792:	4619      	mov	r1, r3
 8007794:	4b5a      	ldr	r3, [pc, #360]	; (8007900 <mix_sub_columns+0x284>)
 8007796:	5c5b      	ldrb	r3, [r3, r1]
 8007798:	4053      	eors	r3, r2
 800779a:	b2da      	uxtb	r2, r3
 800779c:	7dbb      	ldrb	r3, [r7, #22]
 800779e:	4619      	mov	r1, r3
 80077a0:	4b58      	ldr	r3, [pc, #352]	; (8007904 <mix_sub_columns+0x288>)
 80077a2:	5c5b      	ldrb	r3, [r3, r1]
 80077a4:	4053      	eors	r3, r2
 80077a6:	b2d9      	uxtb	r1, r3
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	461a      	mov	r2, r3
 80077ac:	4b56      	ldr	r3, [pc, #344]	; (8007908 <mix_sub_columns+0x28c>)
 80077ae:	5c9a      	ldrb	r2, [r3, r2]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3305      	adds	r3, #5
 80077b4:	404a      	eors	r2, r1
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80077ba:	7b3b      	ldrb	r3, [r7, #12]
 80077bc:	461a      	mov	r2, r3
 80077be:	4b52      	ldr	r3, [pc, #328]	; (8007908 <mix_sub_columns+0x28c>)
 80077c0:	5c9a      	ldrb	r2, [r3, r2]
 80077c2:	7c7b      	ldrb	r3, [r7, #17]
 80077c4:	4619      	mov	r1, r3
 80077c6:	4b50      	ldr	r3, [pc, #320]	; (8007908 <mix_sub_columns+0x28c>)
 80077c8:	5c5b      	ldrb	r3, [r3, r1]
 80077ca:	4053      	eors	r3, r2
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	7dbb      	ldrb	r3, [r7, #22]
 80077d0:	4619      	mov	r1, r3
 80077d2:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <mix_sub_columns+0x284>)
 80077d4:	5c5b      	ldrb	r3, [r3, r1]
 80077d6:	4053      	eors	r3, r2
 80077d8:	b2d9      	uxtb	r1, r3
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	461a      	mov	r2, r3
 80077de:	4b49      	ldr	r3, [pc, #292]	; (8007904 <mix_sub_columns+0x288>)
 80077e0:	5c9a      	ldrb	r2, [r3, r2]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3306      	adds	r3, #6
 80077e6:	404a      	eors	r2, r1
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80077ec:	7b3b      	ldrb	r3, [r7, #12]
 80077ee:	461a      	mov	r2, r3
 80077f0:	4b44      	ldr	r3, [pc, #272]	; (8007904 <mix_sub_columns+0x288>)
 80077f2:	5c9a      	ldrb	r2, [r3, r2]
 80077f4:	7c7b      	ldrb	r3, [r7, #17]
 80077f6:	4619      	mov	r1, r3
 80077f8:	4b43      	ldr	r3, [pc, #268]	; (8007908 <mix_sub_columns+0x28c>)
 80077fa:	5c5b      	ldrb	r3, [r3, r1]
 80077fc:	4053      	eors	r3, r2
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	7dbb      	ldrb	r3, [r7, #22]
 8007802:	4619      	mov	r1, r3
 8007804:	4b40      	ldr	r3, [pc, #256]	; (8007908 <mix_sub_columns+0x28c>)
 8007806:	5c5b      	ldrb	r3, [r3, r1]
 8007808:	4053      	eors	r3, r2
 800780a:	b2d9      	uxtb	r1, r3
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	461a      	mov	r2, r3
 8007810:	4b3b      	ldr	r3, [pc, #236]	; (8007900 <mix_sub_columns+0x284>)
 8007812:	5c9a      	ldrb	r2, [r3, r2]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3307      	adds	r3, #7
 8007818:	404a      	eors	r2, r1
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800781e:	7c3b      	ldrb	r3, [r7, #16]
 8007820:	461a      	mov	r2, r3
 8007822:	4b37      	ldr	r3, [pc, #220]	; (8007900 <mix_sub_columns+0x284>)
 8007824:	5c9a      	ldrb	r2, [r3, r2]
 8007826:	7d7b      	ldrb	r3, [r7, #21]
 8007828:	4619      	mov	r1, r3
 800782a:	4b36      	ldr	r3, [pc, #216]	; (8007904 <mix_sub_columns+0x288>)
 800782c:	5c5b      	ldrb	r3, [r3, r1]
 800782e:	4053      	eors	r3, r2
 8007830:	b2da      	uxtb	r2, r3
 8007832:	7abb      	ldrb	r3, [r7, #10]
 8007834:	4619      	mov	r1, r3
 8007836:	4b34      	ldr	r3, [pc, #208]	; (8007908 <mix_sub_columns+0x28c>)
 8007838:	5c5b      	ldrb	r3, [r3, r1]
 800783a:	4053      	eors	r3, r2
 800783c:	b2d9      	uxtb	r1, r3
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	461a      	mov	r2, r3
 8007842:	4b31      	ldr	r3, [pc, #196]	; (8007908 <mix_sub_columns+0x28c>)
 8007844:	5c9a      	ldrb	r2, [r3, r2]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3308      	adds	r3, #8
 800784a:	404a      	eors	r2, r1
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007850:	7c3b      	ldrb	r3, [r7, #16]
 8007852:	461a      	mov	r2, r3
 8007854:	4b2c      	ldr	r3, [pc, #176]	; (8007908 <mix_sub_columns+0x28c>)
 8007856:	5c9a      	ldrb	r2, [r3, r2]
 8007858:	7d7b      	ldrb	r3, [r7, #21]
 800785a:	4619      	mov	r1, r3
 800785c:	4b28      	ldr	r3, [pc, #160]	; (8007900 <mix_sub_columns+0x284>)
 800785e:	5c5b      	ldrb	r3, [r3, r1]
 8007860:	4053      	eors	r3, r2
 8007862:	b2da      	uxtb	r2, r3
 8007864:	7abb      	ldrb	r3, [r7, #10]
 8007866:	4619      	mov	r1, r3
 8007868:	4b26      	ldr	r3, [pc, #152]	; (8007904 <mix_sub_columns+0x288>)
 800786a:	5c5b      	ldrb	r3, [r3, r1]
 800786c:	4053      	eors	r3, r2
 800786e:	b2d9      	uxtb	r1, r3
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	461a      	mov	r2, r3
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <mix_sub_columns+0x28c>)
 8007876:	5c9a      	ldrb	r2, [r3, r2]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3309      	adds	r3, #9
 800787c:	404a      	eors	r2, r1
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007882:	7c3b      	ldrb	r3, [r7, #16]
 8007884:	461a      	mov	r2, r3
 8007886:	4b20      	ldr	r3, [pc, #128]	; (8007908 <mix_sub_columns+0x28c>)
 8007888:	5c9a      	ldrb	r2, [r3, r2]
 800788a:	7d7b      	ldrb	r3, [r7, #21]
 800788c:	4619      	mov	r1, r3
 800788e:	4b1e      	ldr	r3, [pc, #120]	; (8007908 <mix_sub_columns+0x28c>)
 8007890:	5c5b      	ldrb	r3, [r3, r1]
 8007892:	4053      	eors	r3, r2
 8007894:	b2da      	uxtb	r2, r3
 8007896:	7abb      	ldrb	r3, [r7, #10]
 8007898:	4619      	mov	r1, r3
 800789a:	4b19      	ldr	r3, [pc, #100]	; (8007900 <mix_sub_columns+0x284>)
 800789c:	5c5b      	ldrb	r3, [r3, r1]
 800789e:	4053      	eors	r3, r2
 80078a0:	b2d9      	uxtb	r1, r3
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	461a      	mov	r2, r3
 80078a6:	4b17      	ldr	r3, [pc, #92]	; (8007904 <mix_sub_columns+0x288>)
 80078a8:	5c9a      	ldrb	r2, [r3, r2]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	330a      	adds	r3, #10
 80078ae:	404a      	eors	r2, r1
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80078b4:	7c3b      	ldrb	r3, [r7, #16]
 80078b6:	461a      	mov	r2, r3
 80078b8:	4b12      	ldr	r3, [pc, #72]	; (8007904 <mix_sub_columns+0x288>)
 80078ba:	5c9a      	ldrb	r2, [r3, r2]
 80078bc:	7d7b      	ldrb	r3, [r7, #21]
 80078be:	4619      	mov	r1, r3
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <mix_sub_columns+0x28c>)
 80078c2:	5c5b      	ldrb	r3, [r3, r1]
 80078c4:	4053      	eors	r3, r2
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	7abb      	ldrb	r3, [r7, #10]
 80078ca:	4619      	mov	r1, r3
 80078cc:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <mix_sub_columns+0x28c>)
 80078ce:	5c5b      	ldrb	r3, [r3, r1]
 80078d0:	4053      	eors	r3, r2
 80078d2:	b2d9      	uxtb	r1, r3
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	461a      	mov	r2, r3
 80078d8:	4b09      	ldr	r3, [pc, #36]	; (8007900 <mix_sub_columns+0x284>)
 80078da:	5c9a      	ldrb	r2, [r3, r2]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	330b      	adds	r3, #11
 80078e0:	404a      	eors	r2, r1
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80078e6:	7d3b      	ldrb	r3, [r7, #20]
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <mix_sub_columns+0x284>)
 80078ec:	5c9a      	ldrb	r2, [r3, r2]
 80078ee:	7a7b      	ldrb	r3, [r7, #9]
 80078f0:	4619      	mov	r1, r3
 80078f2:	4b04      	ldr	r3, [pc, #16]	; (8007904 <mix_sub_columns+0x288>)
 80078f4:	5c5b      	ldrb	r3, [r3, r1]
 80078f6:	4053      	eors	r3, r2
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	4619      	mov	r1, r3
 80078fe:	e005      	b.n	800790c <mix_sub_columns+0x290>
 8007900:	08014dfc 	.word	0x08014dfc
 8007904:	08014efc 	.word	0x08014efc
 8007908:	08014cfc 	.word	0x08014cfc
 800790c:	4b2d      	ldr	r3, [pc, #180]	; (80079c4 <mix_sub_columns+0x348>)
 800790e:	5c5b      	ldrb	r3, [r3, r1]
 8007910:	4053      	eors	r3, r2
 8007912:	b2d9      	uxtb	r1, r3
 8007914:	7cfb      	ldrb	r3, [r7, #19]
 8007916:	461a      	mov	r2, r3
 8007918:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <mix_sub_columns+0x348>)
 800791a:	5c9a      	ldrb	r2, [r3, r2]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	330c      	adds	r3, #12
 8007920:	404a      	eors	r2, r1
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007926:	7d3b      	ldrb	r3, [r7, #20]
 8007928:	461a      	mov	r2, r3
 800792a:	4b26      	ldr	r3, [pc, #152]	; (80079c4 <mix_sub_columns+0x348>)
 800792c:	5c9a      	ldrb	r2, [r3, r2]
 800792e:	7a7b      	ldrb	r3, [r7, #9]
 8007930:	4619      	mov	r1, r3
 8007932:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <mix_sub_columns+0x34c>)
 8007934:	5c5b      	ldrb	r3, [r3, r1]
 8007936:	4053      	eors	r3, r2
 8007938:	b2da      	uxtb	r2, r3
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	4619      	mov	r1, r3
 800793e:	4b23      	ldr	r3, [pc, #140]	; (80079cc <mix_sub_columns+0x350>)
 8007940:	5c5b      	ldrb	r3, [r3, r1]
 8007942:	4053      	eors	r3, r2
 8007944:	b2d9      	uxtb	r1, r3
 8007946:	7cfb      	ldrb	r3, [r7, #19]
 8007948:	461a      	mov	r2, r3
 800794a:	4b1e      	ldr	r3, [pc, #120]	; (80079c4 <mix_sub_columns+0x348>)
 800794c:	5c9a      	ldrb	r2, [r3, r2]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	330d      	adds	r3, #13
 8007952:	404a      	eors	r2, r1
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007958:	7d3b      	ldrb	r3, [r7, #20]
 800795a:	461a      	mov	r2, r3
 800795c:	4b19      	ldr	r3, [pc, #100]	; (80079c4 <mix_sub_columns+0x348>)
 800795e:	5c9a      	ldrb	r2, [r3, r2]
 8007960:	7a7b      	ldrb	r3, [r7, #9]
 8007962:	4619      	mov	r1, r3
 8007964:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <mix_sub_columns+0x348>)
 8007966:	5c5b      	ldrb	r3, [r3, r1]
 8007968:	4053      	eors	r3, r2
 800796a:	b2da      	uxtb	r2, r3
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	4619      	mov	r1, r3
 8007970:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <mix_sub_columns+0x34c>)
 8007972:	5c5b      	ldrb	r3, [r3, r1]
 8007974:	4053      	eors	r3, r2
 8007976:	b2d9      	uxtb	r1, r3
 8007978:	7cfb      	ldrb	r3, [r7, #19]
 800797a:	461a      	mov	r2, r3
 800797c:	4b13      	ldr	r3, [pc, #76]	; (80079cc <mix_sub_columns+0x350>)
 800797e:	5c9a      	ldrb	r2, [r3, r2]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	330e      	adds	r3, #14
 8007984:	404a      	eors	r2, r1
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800798a:	7d3b      	ldrb	r3, [r7, #20]
 800798c:	461a      	mov	r2, r3
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <mix_sub_columns+0x350>)
 8007990:	5c9a      	ldrb	r2, [r3, r2]
 8007992:	7a7b      	ldrb	r3, [r7, #9]
 8007994:	4619      	mov	r1, r3
 8007996:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <mix_sub_columns+0x348>)
 8007998:	5c5b      	ldrb	r3, [r3, r1]
 800799a:	4053      	eors	r3, r2
 800799c:	b2da      	uxtb	r2, r3
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	4619      	mov	r1, r3
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <mix_sub_columns+0x348>)
 80079a4:	5c5b      	ldrb	r3, [r3, r1]
 80079a6:	4053      	eors	r3, r2
 80079a8:	b2d9      	uxtb	r1, r3
 80079aa:	7cfb      	ldrb	r3, [r7, #19]
 80079ac:	461a      	mov	r2, r3
 80079ae:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <mix_sub_columns+0x34c>)
 80079b0:	5c9a      	ldrb	r2, [r3, r2]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	330f      	adds	r3, #15
 80079b6:	404a      	eors	r2, r1
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]
  }
 80079bc:	bf00      	nop
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	08014cfc 	.word	0x08014cfc
 80079c8:	08014dfc 	.word	0x08014dfc
 80079cc:	08014efc 	.word	0x08014efc

080079d0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	460b      	mov	r3, r1
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	3b10      	subs	r3, #16
 80079e2:	2b10      	cmp	r3, #16
 80079e4:	bf8c      	ite	hi
 80079e6:	2201      	movhi	r2, #1
 80079e8:	2200      	movls	r2, #0
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	d10d      	bne.n	8007a0c <lorawan_aes_set_key+0x3c>
 80079f0:	2201      	movs	r2, #1
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80079fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bf14      	ite	ne
 8007a02:	2301      	movne	r3, #1
 8007a04:	2300      	moveq	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 8007a14:	23ff      	movs	r3, #255	; 0xff
 8007a16:	e0b2      	b.n	8007b7e <lorawan_aes_set_key+0x1ae>
        break;
 8007a18:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7afa      	ldrb	r2, [r7, #11]
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff fbfa 	bl	800721a <copy_block_nn>
    hi = (keylen + 28) << 2;
 8007a26:	7afb      	ldrb	r3, [r7, #11]
 8007a28:	331c      	adds	r3, #28
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 8007a30:	7c7b      	ldrb	r3, [r7, #17]
 8007a32:	091b      	lsrs	r3, r3, #4
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	75fb      	strb	r3, [r7, #23]
 8007a44:	2301      	movs	r3, #1
 8007a46:	75bb      	strb	r3, [r7, #22]
 8007a48:	e093      	b.n	8007b72 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	5cd3      	ldrb	r3, [r2, r3]
 8007a52:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	3b03      	subs	r3, #3
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	5cd3      	ldrb	r3, [r2, r3]
 8007a5c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	3b02      	subs	r3, #2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	5cd3      	ldrb	r3, [r2, r3]
 8007a66:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	5cd3      	ldrb	r3, [r2, r3]
 8007a70:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	7afa      	ldrb	r2, [r7, #11]
 8007a76:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a7a:	fb01 f202 	mul.w	r2, r1, r2
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d127      	bne.n	8007ad6 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 8007a86:	7d7b      	ldrb	r3, [r7, #21]
 8007a88:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 8007a8a:	7d3b      	ldrb	r3, [r7, #20]
 8007a8c:	4a3e      	ldr	r2, [pc, #248]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007a8e:	5cd2      	ldrb	r2, [r2, r3]
 8007a90:	7dbb      	ldrb	r3, [r7, #22]
 8007a92:	4053      	eors	r3, r2
 8007a94:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 8007a96:	7cfb      	ldrb	r3, [r7, #19]
 8007a98:	4a3b      	ldr	r2, [pc, #236]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007a9a:	5cd3      	ldrb	r3, [r2, r3]
 8007a9c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 8007a9e:	7cbb      	ldrb	r3, [r7, #18]
 8007aa0:	4a39      	ldr	r2, [pc, #228]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007aa2:	5cd3      	ldrb	r3, [r2, r3]
 8007aa4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8007aa6:	7c3b      	ldrb	r3, [r7, #16]
 8007aa8:	4a37      	ldr	r2, [pc, #220]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007aaa:	5cd3      	ldrb	r3, [r2, r3]
 8007aac:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 8007aae:	7dbb      	ldrb	r3, [r7, #22]
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	b25a      	sxtb	r2, r3
 8007ab4:	7dbb      	ldrb	r3, [r7, #22]
 8007ab6:	09db      	lsrs	r3, r3, #7
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	4619      	mov	r1, r3
 8007abc:	0049      	lsls	r1, r1, #1
 8007abe:	440b      	add	r3, r1
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	00c8      	lsls	r0, r1, #3
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	440b      	add	r3, r1
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	4053      	eors	r3, r2
 8007ad0:	b25b      	sxtb	r3, r3
 8007ad2:	75bb      	strb	r3, [r7, #22]
 8007ad4:	e01c      	b.n	8007b10 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8007ad6:	7afb      	ldrb	r3, [r7, #11]
 8007ad8:	2b18      	cmp	r3, #24
 8007ada:	d919      	bls.n	8007b10 <lorawan_aes_set_key+0x140>
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	7afa      	ldrb	r2, [r7, #11]
 8007ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ae4:	fb01 f202 	mul.w	r2, r1, r2
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d10f      	bne.n	8007b10 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 8007af0:	7d7b      	ldrb	r3, [r7, #21]
 8007af2:	4a25      	ldr	r2, [pc, #148]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007af4:	5cd3      	ldrb	r3, [r2, r3]
 8007af6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 8007af8:	7d3b      	ldrb	r3, [r7, #20]
 8007afa:	4a23      	ldr	r2, [pc, #140]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007afc:	5cd3      	ldrb	r3, [r2, r3]
 8007afe:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 8007b00:	7cfb      	ldrb	r3, [r7, #19]
 8007b02:	4a21      	ldr	r2, [pc, #132]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007b04:	5cd3      	ldrb	r3, [r2, r3]
 8007b06:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 8007b08:	7cbb      	ldrb	r3, [r7, #18]
 8007b0a:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <lorawan_aes_set_key+0x1b8>)
 8007b0c:	5cd3      	ldrb	r3, [r2, r3]
 8007b0e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 8007b10:	7dfa      	ldrb	r2, [r7, #23]
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007b18:	7c3b      	ldrb	r3, [r7, #16]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	5cd1      	ldrb	r1, [r2, r3]
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	7d7a      	ldrb	r2, [r7, #21]
 8007b22:	404a      	eors	r2, r1
 8007b24:	b2d1      	uxtb	r1, r2
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007b2a:	7c3b      	ldrb	r3, [r7, #16]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	5cd1      	ldrb	r1, [r2, r3]
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	3301      	adds	r3, #1
 8007b36:	7d3a      	ldrb	r2, [r7, #20]
 8007b38:	404a      	eors	r2, r1
 8007b3a:	b2d1      	uxtb	r1, r2
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8007b40:	7c3b      	ldrb	r3, [r7, #16]
 8007b42:	3302      	adds	r3, #2
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	5cd1      	ldrb	r1, [r2, r3]
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	7cfa      	ldrb	r2, [r7, #19]
 8007b4e:	404a      	eors	r2, r1
 8007b50:	b2d1      	uxtb	r1, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007b56:	7c3b      	ldrb	r3, [r7, #16]
 8007b58:	3303      	adds	r3, #3
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	5cd1      	ldrb	r1, [r2, r3]
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	3303      	adds	r3, #3
 8007b62:	7cba      	ldrb	r2, [r7, #18]
 8007b64:	404a      	eors	r2, r1
 8007b66:	b2d1      	uxtb	r1, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	75fb      	strb	r3, [r7, #23]
 8007b72:	7dfa      	ldrb	r2, [r7, #23]
 8007b74:	7c7b      	ldrb	r3, [r7, #17]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	f4ff af67 	bcc.w	8007a4a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	08014cfc 	.word	0x08014cfc

08007b8c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	; 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d038      	beq.n	8007c14 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	f107 0314 	add.w	r3, r7, #20
 8007ba8:	68f9      	ldr	r1, [r7, #12]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff fc07 	bl	80073be <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bb6:	e014      	b.n	8007be2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8007bb8:	f107 0314 	add.w	r3, r7, #20
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fd5d 	bl	800767c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007bc8:	0112      	lsls	r2, r2, #4
 8007bca:	441a      	add	r2, r3
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff fcab 	bl	800752e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bdc:	3301      	adds	r3, #1
 8007bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007be8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d3e3      	bcc.n	8007bb8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fca7 	bl	8007548 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c00:	0112      	lsls	r2, r2, #4
 8007c02:	441a      	add	r2, r3
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	4619      	mov	r1, r3
 8007c0a:	68b8      	ldr	r0, [r7, #8]
 8007c0c:	f7ff fbd7 	bl	80073be <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e000      	b.n	8007c16 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8007c14:	23ff      	movs	r3, #255	; 0xff
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3728      	adds	r7, #40	; 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	4603      	mov	r3, r0
 8007c26:	71fb      	strb	r3, [r7, #7]
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr

08007c32 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b088      	sub	sp, #32
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	4603      	mov	r3, r0
 8007c3a:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 8007c40:	f107 0310 	add.w	r3, r7, #16
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fa4d 	bl	80080e4 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );

    SecureElementGetJoinEui( joinEui );
 8007c4a:	f107 0318 	add.w	r3, r7, #24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fa78 	bl	8008144 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );

    SecureElementGetDevAddr( mode, &devAddr );
 8007c54:	f107 020c 	add.w	r2, r7, #12
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 faa3 	bl	80081a8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 8007c62:	bf00      	nop
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	6039      	str	r1, [r7, #0]
 8007c76:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
 8007c7c:	e01a      	b.n	8007cb4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <GetKeyByID+0x5c>)
 8007c80:	6819      	ldr	r1, [r3, #0]
 8007c82:	7bfa      	ldrb	r2, [r7, #15]
 8007c84:	4613      	mov	r3, r2
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	4413      	add	r3, r2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	79fa      	ldrb	r2, [r7, #7]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d10b      	bne.n	8007cae <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <GetKeyByID+0x5c>)
 8007c98:	6819      	ldr	r1, [r3, #0]
 8007c9a:	7bfa      	ldrb	r2, [r7, #15]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3318      	adds	r3, #24
 8007ca4:	18ca      	adds	r2, r1, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8007caa:	2300      	movs	r3, #0
 8007cac:	e006      	b.n	8007cbc <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b0a      	cmp	r3, #10
 8007cb8:	d9e1      	bls.n	8007c7e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007cba:	2303      	movs	r3, #3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20000fe0 	.word	0x20000fe0

08007ccc <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b0d1      	sub	sp, #324	; 0x144
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8007cd6:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 8007cda:	6020      	str	r0, [r4, #0]
 8007cdc:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8007ce0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007ce4:	6001      	str	r1, [r0, #0]
 8007ce6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007cea:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8007cee:	600a      	str	r2, [r1, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007cf6:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8007cfa:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8007cfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d00:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <ComputeCmac+0x46>
 8007d0a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007d12:	2302      	movs	r3, #2
 8007d14:	e05d      	b.n	8007dd2 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8007d16:	f107 0314 	add.w	r3, r7, #20
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe ffd8 	bl	8006cd0 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8007d20:	f107 0210 	add.w	r2, r7, #16
 8007d24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d28:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	4611      	mov	r1, r2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff ff9b 	bl	8007c6c <GetKeyByID>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007d3c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d144      	bne.n	8007dce <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8007d44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	f107 0314 	add.w	r3, r7, #20
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe ffd3 	bl	8006d02 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8007d5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8007d6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d6e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007d72:	f107 0014 	add.w	r0, r7, #20
 8007d76:	2210      	movs	r2, #16
 8007d78:	6819      	ldr	r1, [r3, #0]
 8007d7a:	f7fe ffd1 	bl	8006d20 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8007d7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d82:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8007d86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d8e:	f107 0014 	add.w	r0, r7, #20
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	6819      	ldr	r1, [r3, #0]
 8007d96:	f7fe ffc3 	bl	8006d20 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8007d9a:	f107 0214 	add.w	r2, r7, #20
 8007d9e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007da2:	4611      	mov	r1, r2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff f87d 	bl	8006ea4 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8007daa:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8007dae:	461a      	mov	r2, r3
 8007db0:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	431a      	orrs	r2, r3
 8007db8:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007dc4:	061b      	lsls	r3, r3, #24
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007dcc:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8007dce:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd90      	pop	{r4, r7, pc}

08007ddc <SecureElementPrintSessionKeys>:

    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 8007de6:	200b      	movs	r0, #11
 8007de8:	f7ff ff19 	bl	8007c1e <PrintKey>
    PrintKey( MC_KE_KEY );
 8007dec:	200c      	movs	r0, #12
 8007dee:	f7ff ff16 	bl	8007c1e <PrintKey>
    PrintKey( APP_S_KEY );
 8007df2:	2009      	movs	r0, #9
 8007df4:	f7ff ff13 	bl	8007c1e <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8007df8:	2008      	movs	r0, #8
 8007dfa:	f7ff ff10 	bl	8007c1e <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 8007dfe:	200a      	movs	r0, #10
 8007e00:	f7ff ff0d 	bl	8007c1e <PrintKey>
    PrintIds( mode );
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff ff13 	bl	8007c32 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e04c      	b.n	8007ec8 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007e2e:	2300      	movs	r3, #0
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e045      	b.n	8007ec0 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007e34:	4b26      	ldr	r3, [pc, #152]	; (8007ed0 <SecureElementSetKey+0xb8>)
 8007e36:	6819      	ldr	r1, [r3, #0]
 8007e38:	7ffa      	ldrb	r2, [r7, #31]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	4413      	add	r3, r2
 8007e40:	440b      	add	r3, r1
 8007e42:	3318      	adds	r3, #24
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	79fa      	ldrb	r2, [r7, #7]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d136      	bne.n	8007eba <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	2b0d      	cmp	r3, #13
 8007e50:	d123      	bne.n	8007e9a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8007e52:	2306      	movs	r3, #6
 8007e54:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	f107 0310 	add.w	r3, r7, #16
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	605a      	str	r2, [r3, #4]
 8007e64:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8007e66:	f107 030c 	add.w	r3, r7, #12
 8007e6a:	220c      	movs	r2, #12
 8007e6c:	2110      	movs	r1, #16
 8007e6e:	6838      	ldr	r0, [r7, #0]
 8007e70:	f000 f84a 	bl	8007f08 <SecureElementAesEncrypt>
 8007e74:	4603      	mov	r3, r0
 8007e76:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8007e78:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <SecureElementSetKey+0xb8>)
 8007e7a:	6819      	ldr	r1, [r3, #0]
 8007e7c:	7ffa      	ldrb	r2, [r7, #31]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	4413      	add	r3, r2
 8007e84:	3318      	adds	r3, #24
 8007e86:	440b      	add	r3, r1
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f107 010c 	add.w	r1, r7, #12
 8007e8e:	2210      	movs	r2, #16
 8007e90:	4618      	mov	r0, r3
 8007e92:	f006 f860 	bl	800df56 <memcpy1>
                return retval;
 8007e96:	7fbb      	ldrb	r3, [r7, #30]
 8007e98:	e016      	b.n	8007ec8 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <SecureElementSetKey+0xb8>)
 8007e9c:	6819      	ldr	r1, [r3, #0]
 8007e9e:	7ffa      	ldrb	r2, [r7, #31]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	011b      	lsls	r3, r3, #4
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	440b      	add	r3, r1
 8007eaa:	3301      	adds	r3, #1
 8007eac:	2210      	movs	r2, #16
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f006 f850 	bl	800df56 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e006      	b.n	8007ec8 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007eba:	7ffb      	ldrb	r3, [r7, #31]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	77fb      	strb	r3, [r7, #31]
 8007ec0:	7ffb      	ldrb	r3, [r7, #31]
 8007ec2:	2b0a      	cmp	r3, #10
 8007ec4:	d9b6      	bls.n	8007e34 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007ec6:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3720      	adds	r7, #32
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000fe0 	.word	0x20000fe0

08007ed4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	2b0b      	cmp	r3, #11
 8007ee6:	d901      	bls.n	8007eec <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e009      	b.n	8007f00 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff fee7 	bl	8007ccc <ComputeCmac>
 8007efe:	4603      	mov	r3, r0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b0c2      	sub	sp, #264	; 0x108
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f14:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8007f18:	6001      	str	r1, [r0, #0]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8007f20:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8007f2e:	460a      	mov	r2, r1
 8007f30:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d006      	beq.n	8007f46 <SecureElementAesEncrypt+0x3e>
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007f46:	2302      	movs	r3, #2
 8007f48:	e059      	b.n	8007ffe <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8007f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007f5c:	2305      	movs	r3, #5
 8007f5e:	e04e      	b.n	8007ffe <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	22f0      	movs	r2, #240	; 0xf0
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f006 f82f 	bl	800dfcc <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8007f6e:	f107 0210 	add.w	r2, r7, #16
 8007f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f76:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fe74 	bl	8007c6c <GetKeyByID>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007f8a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d133      	bne.n	8007ffa <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3301      	adds	r3, #1
 8007f96:	f107 0214 	add.w	r2, r7, #20
 8007f9a:	2110      	movs	r1, #16
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fd17 	bl	80079d0 <lorawan_aes_set_key>

        uint8_t block = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 8007fa8:	e020      	b.n	8007fec <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8007faa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	18d0      	adds	r0, r2, r3
 8007fb2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007fb6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8007fba:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f107 0214 	add.w	r2, r7, #20
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	f7ff fde0 	bl	8007b8c <lorawan_aes_encrypt>
            block = block + 16;
 8007fcc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007fd0:	3310      	adds	r3, #16
 8007fd2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 8007fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007fde:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8007fe2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	3a10      	subs	r2, #16
 8007fea:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8007fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1d7      	bne.n	8007faa <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8007ffa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
 8008014:	4613      	mov	r3, r2
 8008016:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800801e:	2302      	movs	r3, #2
 8008020:	e02e      	b.n	8008080 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 8008022:	2306      	movs	r3, #6
 8008024:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8008026:	78bb      	ldrb	r3, [r7, #2]
 8008028:	2b0c      	cmp	r3, #12
 800802a:	d104      	bne.n	8008036 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b0b      	cmp	r3, #11
 8008030:	d001      	beq.n	8008036 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008032:	2303      	movs	r3, #3
 8008034:	e024      	b.n	8008080 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	f107 0310 	add.w	r3, r7, #16
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	605a      	str	r2, [r3, #4]
 8008044:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8008046:	f107 030c 	add.w	r3, r7, #12
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	2110      	movs	r1, #16
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff ff5a 	bl	8007f08 <SecureElementAesEncrypt>
 8008054:	4603      	mov	r3, r0
 8008056:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008058:	7ffb      	ldrb	r3, [r7, #31]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800805e:	7ffb      	ldrb	r3, [r7, #31]
 8008060:	e00e      	b.n	8008080 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 8008062:	f107 020c 	add.w	r2, r7, #12
 8008066:	78bb      	ldrb	r3, [r7, #2]
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff fed4 	bl	8007e18 <SecureElementSetKey>
 8008070:	4603      	mov	r3, r0
 8008072:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008074:	7ffb      	ldrb	r3, [r7, #31]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	e000      	b.n	8008080 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800807e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <SecureElementRandomNumber>:
    return SECURE_ELEMENT_SUCCESS;
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008096:	2302      	movs	r3, #2
 8008098:	e006      	b.n	80080a8 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800809a:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <SecureElementRandomNumber+0x28>)
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	4798      	blx	r3
 80080a0:	4602      	mov	r2, r0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	08015034 	.word	0x08015034

080080b4 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80080c2:	2302      	movs	r3, #2
 80080c4:	e007      	b.n	80080d6 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 80080c6:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <SecureElementSetDevEui+0x2c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2208      	movs	r2, #8
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f005 ff41 	bl	800df56 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80080d4:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20000fe0 	.word	0x20000fe0

080080e4 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80080f2:	2302      	movs	r3, #2
 80080f4:	e007      	b.n	8008106 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <SecureElementGetDevEui+0x2c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2208      	movs	r2, #8
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f005 ff29 	bl	800df56 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8008104:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000fe0 	.word	0x20000fe0

08008114 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008122:	2302      	movs	r3, #2
 8008124:	e008      	b.n	8008138 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8008126:	4b06      	ldr	r3, [pc, #24]	; (8008140 <SecureElementSetJoinEui+0x2c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	2208      	movs	r2, #8
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4618      	mov	r0, r3
 8008132:	f005 ff10 	bl	800df56 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8008136:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000fe0 	.word	0x20000fe0

08008144 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008152:	2302      	movs	r3, #2
 8008154:	e008      	b.n	8008168 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <SecureElementGetJoinEui+0x2c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3308      	adds	r3, #8
 800815c:	2208      	movs	r2, #8
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f005 fef8 	bl	800df56 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8008166:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20000fe0 	.word	0x20000fe0

08008174 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d104      	bne.n	8008190 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8008186:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <SecureElementSetDevAddr+0x30>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	611a      	str	r2, [r3, #16]
 800818e:	e003      	b.n	8008198 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <SecureElementSetDevAddr+0x30>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 8008198:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr
 80081a4:	20000fe0 	.word	0x20000fe0

080081a8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80081ba:	2302      	movs	r3, #2
 80081bc:	e00e      	b.n	80081dc <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d105      	bne.n	80081d0 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80081c4:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <SecureElementGetDevAddr+0x40>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e004      	b.n	80081da <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <SecureElementGetDevAddr+0x40>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695a      	ldr	r2, [r3, #20]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80081da:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bc80      	pop	{r7}
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20000fe0 	.word	0x20000fe0

080081ec <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 80081f6:	4a22      	ldr	r2, [pc, #136]	; (8008280 <LmHandlerInit+0x94>)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80081fc:	4b21      	ldr	r3, [pc, #132]	; (8008284 <LmHandlerInit+0x98>)
 80081fe:	4a22      	ldr	r2, [pc, #136]	; (8008288 <LmHandlerInit+0x9c>)
 8008200:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008202:	4b20      	ldr	r3, [pc, #128]	; (8008284 <LmHandlerInit+0x98>)
 8008204:	4a21      	ldr	r2, [pc, #132]	; (800828c <LmHandlerInit+0xa0>)
 8008206:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008208:	4b1e      	ldr	r3, [pc, #120]	; (8008284 <LmHandlerInit+0x98>)
 800820a:	4a21      	ldr	r2, [pc, #132]	; (8008290 <LmHandlerInit+0xa4>)
 800820c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800820e:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <LmHandlerInit+0x98>)
 8008210:	4a20      	ldr	r2, [pc, #128]	; (8008294 <LmHandlerInit+0xa8>)
 8008212:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8008214:	4b1a      	ldr	r3, [pc, #104]	; (8008280 <LmHandlerInit+0x94>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a1f      	ldr	r2, [pc, #124]	; (8008298 <LmHandlerInit+0xac>)
 800821c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800821e:	4b18      	ldr	r3, [pc, #96]	; (8008280 <LmHandlerInit+0x94>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	4a1c      	ldr	r2, [pc, #112]	; (8008298 <LmHandlerInit+0xac>)
 8008226:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <LmHandlerInit+0x94>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	4a1a      	ldr	r2, [pc, #104]	; (8008298 <LmHandlerInit+0xac>)
 8008230:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8008232:	4b13      	ldr	r3, [pc, #76]	; (8008280 <LmHandlerInit+0x94>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	4a17      	ldr	r2, [pc, #92]	; (8008298 <LmHandlerInit+0xac>)
 800823a:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800823c:	4b16      	ldr	r3, [pc, #88]	; (8008298 <LmHandlerInit+0xac>)
 800823e:	4a17      	ldr	r2, [pc, #92]	; (800829c <LmHandlerInit+0xb0>)
 8008240:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8008242:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <LmHandlerInit+0x94>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	4a13      	ldr	r2, [pc, #76]	; (8008298 <LmHandlerInit+0xac>)
 800824a:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800824c:	4914      	ldr	r1, [pc, #80]	; (80082a0 <LmHandlerInit+0xb4>)
 800824e:	2000      	movs	r0, #0
 8008250:	f000 fc60 	bl	8008b14 <LmHandlerPackageRegister>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	e00a      	b.n	8008276 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8008260:	463b      	mov	r3, r7
 8008262:	4618      	mov	r0, r3
 8008264:	f001 f888 	bl	8009378 <LmhpPackagesRegistrationInit>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800826e:	f04f 33ff 	mov.w	r3, #4294967295
 8008272:	e000      	b.n	8008276 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20001028 	.word	0x20001028
 8008284:	2000102c 	.word	0x2000102c
 8008288:	080087d9 	.word	0x080087d9
 800828c:	0800884d 	.word	0x0800884d
 8008290:	0800892d 	.word	0x0800892d
 8008294:	08008a81 	.word	0x08008a81
 8008298:	2000103c 	.word	0x2000103c
 800829c:	08008d4d 	.word	0x08008d4d
 80082a0:	200001f0 	.word	0x200001f0

080082a4 <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b092      	sub	sp, #72	; 0x48
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	460a      	mov	r2, r1
 80082ae:	71fb      	strb	r3, [r7, #7]
 80082b0:	4613      	mov	r3, r2
 80082b2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 80082b4:	2301      	movs	r3, #1
 80082b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80082ba:	4b47      	ldr	r3, [pc, #284]	; (80083d8 <LmHandlerJoin+0x134>)
 80082bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 80082c6:	4b44      	ldr	r3, [pc, #272]	; (80083d8 <LmHandlerJoin+0x134>)
 80082c8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80082cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d110      	bne.n	80082f8 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80082d6:	2302      	movs	r3, #2
 80082d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80082dc:	4b3f      	ldr	r3, [pc, #252]	; (80083dc <LmHandlerJoin+0x138>)
 80082de:	2202      	movs	r2, #2
 80082e0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 80082e2:	4a3e      	ldr	r2, [pc, #248]	; (80083dc <LmHandlerJoin+0x138>)
 80082e4:	79bb      	ldrb	r3, [r7, #6]
 80082e6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 80082e8:	f002 f8a6 	bl	800a438 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 80082ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 fe7f 	bl	800aff4 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 80082f6:	e06b      	b.n	80083d0 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80082fe:	4b37      	ldr	r3, [pc, #220]	; (80083dc <LmHandlerJoin+0x138>)
 8008300:	2201      	movs	r2, #1
 8008302:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008304:	4b34      	ldr	r3, [pc, #208]	; (80083d8 <LmHandlerJoin+0x134>)
 8008306:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800830a:	4b34      	ldr	r3, [pc, #208]	; (80083dc <LmHandlerJoin+0x138>)
 800830c:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800830e:	4b32      	ldr	r3, [pc, #200]	; (80083d8 <LmHandlerJoin+0x134>)
 8008310:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8008314:	4b31      	ldr	r3, [pc, #196]	; (80083dc <LmHandlerJoin+0x138>)
 8008316:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008318:	4b30      	ldr	r3, [pc, #192]	; (80083dc <LmHandlerJoin+0x138>)
 800831a:	2200      	movs	r2, #0
 800831c:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800831e:	4a2f      	ldr	r2, [pc, #188]	; (80083dc <LmHandlerJoin+0x138>)
 8008320:	79bb      	ldrb	r3, [r7, #6]
 8008322:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 8008324:	4b2e      	ldr	r3, [pc, #184]	; (80083e0 <LmHandlerJoin+0x13c>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f083 0301 	eor.w	r3, r3, #1
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d034      	beq.n	800839c <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008332:	231e      	movs	r3, #30
 8008334:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8008336:	4b28      	ldr	r3, [pc, #160]	; (80083d8 <LmHandlerJoin+0x134>)
 8008338:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800833c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800833e:	f107 030c 	add.w	r3, r7, #12
 8008342:	4618      	mov	r0, r3
 8008344:	f002 fac2 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8008348:	231f      	movs	r3, #31
 800834a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800834c:	4b22      	ldr	r3, [pc, #136]	; (80083d8 <LmHandlerJoin+0x134>)
 800834e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008352:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	4618      	mov	r0, r3
 800835a:	f002 fab7 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800835e:	2321      	movs	r3, #33	; 0x21
 8008360:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8008362:	4b1d      	ldr	r3, [pc, #116]	; (80083d8 <LmHandlerJoin+0x134>)
 8008364:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8008368:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	4618      	mov	r0, r3
 8008370:	f002 faac 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8008374:	2320      	movs	r3, #32
 8008376:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8008378:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <LmHandlerJoin+0x134>)
 800837a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800837e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4618      	mov	r0, r3
 8008386:	f002 faa1 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800838a:	2328      	movs	r3, #40	; 0x28
 800838c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800838e:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <LmHandlerJoin+0x140>)
 8008390:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	4618      	mov	r0, r3
 8008398:	f002 fa98 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800839c:	f002 f84c 	bl	800a438 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80083a0:	2301      	movs	r3, #1
 80083a2:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80083a4:	2301      	movs	r3, #1
 80083a6:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80083a8:	f107 030c 	add.w	r3, r7, #12
 80083ac:	4618      	mov	r0, r3
 80083ae:	f002 fa8d 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80083b2:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <LmHandlerJoin+0x144>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <LmHandlerJoin+0x144>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	4806      	ldr	r0, [pc, #24]	; (80083dc <LmHandlerJoin+0x138>)
 80083c4:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80083c6:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <LmHandlerJoin+0x134>)
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f932 	bl	8008634 <LmHandlerRequestClass>
}
 80083d0:	bf00      	nop
 80083d2:	3748      	adds	r7, #72	; 0x48
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20001010 	.word	0x20001010
 80083dc:	200001fc 	.word	0x200001fc
 80083e0:	2000114a 	.word	0x2000114a
 80083e4:	01000300 	.word	0x01000300
 80083e8:	20001028 	.word	0x20001028

080083ec <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	; 0x30
 80083f0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80083f2:	2301      	movs	r3, #1
 80083f4:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	4618      	mov	r0, r3
 80083fa:	f002 f8b1 	bl	800a560 <LoRaMacMibGetRequestConfirm>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 8008404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800840c:	7a3b      	ldrb	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8008412:	2300      	movs	r3, #0
 8008414:	e002      	b.n	800841c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800841a:	2300      	movs	r3, #0
    }
}
 800841c:	4618      	mov	r0, r3
 800841e:	3730      	adds	r7, #48	; 0x30
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	; 0x28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
 8008430:	4613      	mov	r3, r2
 8008432:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008434:	23ff      	movs	r3, #255	; 0xff
 8008436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800843a:	f000 ffcd 	bl	80093d8 <LoRaMacIsBusy>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008444:	f06f 0301 	mvn.w	r3, #1
 8008448:	e0be      	b.n	80085c8 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800844a:	f000 ffe1 	bl	8009410 <LoRaMacIsStopped>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008454:	f06f 0302 	mvn.w	r3, #2
 8008458:	e0b6      	b.n	80085c8 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800845a:	f7ff ffc7 	bl	80083ec <LmHandlerJoinStatus>
 800845e:	4603      	mov	r3, r0
 8008460:	2b01      	cmp	r3, #1
 8008462:	d00a      	beq.n	800847a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008464:	4b5a      	ldr	r3, [pc, #360]	; (80085d0 <LmHandlerSend+0x1ac>)
 8008466:	79db      	ldrb	r3, [r3, #7]
 8008468:	4a59      	ldr	r2, [pc, #356]	; (80085d0 <LmHandlerSend+0x1ac>)
 800846a:	7a12      	ldrb	r2, [r2, #8]
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff ff18 	bl	80082a4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008474:	f06f 0302 	mvn.w	r3, #2
 8008478:	e0a6      	b.n	80085c8 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800847a:	4b56      	ldr	r3, [pc, #344]	; (80085d4 <LmHandlerSend+0x1b0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	4798      	blx	r3
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00d      	beq.n	80084a4 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	4b51      	ldr	r3, [pc, #324]	; (80085d4 <LmHandlerSend+0x1b0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d006      	beq.n	80084a4 <LmHandlerSend+0x80>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800849e:	f06f 0303 	mvn.w	r3, #3
 80084a2:	e091      	b.n	80085c8 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 80084a4:	4a4c      	ldr	r2, [pc, #304]	; (80085d8 <LmHandlerSend+0x1b4>)
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	bf14      	ite	ne
 80084b0:	2301      	movne	r3, #1
 80084b2:	2300      	moveq	r3, #0
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80084b8:	4b48      	ldr	r3, [pc, #288]	; (80085dc <LmHandlerSend+0x1b8>)
 80084ba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80084be:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	f107 020c 	add.w	r2, r7, #12
 80084c8:	4611      	mov	r1, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 ffc2 	bl	800a454 <LoRaMacQueryTxPossible>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80084d6:	2300      	movs	r3, #0
 80084d8:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80084e2:	23f9      	movs	r3, #249	; 0xf9
 80084e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084e8:	e009      	b.n	80084fe <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 80084fe:	4b36      	ldr	r3, [pc, #216]	; (80085d8 <LmHandlerSend+0x1b4>)
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	3310      	adds	r3, #16
 8008504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008508:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800850c:	4b33      	ldr	r3, [pc, #204]	; (80085dc <LmHandlerSend+0x1b8>)
 800850e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008512:	4b31      	ldr	r3, [pc, #196]	; (80085d8 <LmHandlerSend+0x1b4>)
 8008514:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8008516:	78ba      	ldrb	r2, [r7, #2]
 8008518:	f107 0310 	add.w	r3, r7, #16
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f002 feba 	bl	800b298 <LoRaMacMcpsRequest>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	4a2c      	ldr	r2, [pc, #176]	; (80085e0 <LmHandlerSend+0x1bc>)
 800852e:	6013      	str	r3, [r2, #0]

    switch( status )
 8008530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008534:	2b11      	cmp	r3, #17
 8008536:	d840      	bhi.n	80085ba <LmHandlerSend+0x196>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <LmHandlerSend+0x11c>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008589 	.word	0x08008589
 8008544:	0800859b 	.word	0x0800859b
 8008548:	080085bb 	.word	0x080085bb
 800854c:	080085bb 	.word	0x080085bb
 8008550:	080085bb 	.word	0x080085bb
 8008554:	080085bb 	.word	0x080085bb
 8008558:	080085bb 	.word	0x080085bb
 800855c:	080085a3 	.word	0x080085a3
 8008560:	080085bb 	.word	0x080085bb
 8008564:	080085bb 	.word	0x080085bb
 8008568:	080085bb 	.word	0x080085bb
 800856c:	080085b3 	.word	0x080085b3
 8008570:	080085bb 	.word	0x080085bb
 8008574:	080085bb 	.word	0x080085bb
 8008578:	0800859b 	.word	0x0800859b
 800857c:	0800859b 	.word	0x0800859b
 8008580:	0800859b 	.word	0x0800859b
 8008584:	080085ab 	.word	0x080085ab
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8008588:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800858c:	f113 0f07 	cmn.w	r3, #7
 8008590:	d017      	beq.n	80085c2 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008592:	2300      	movs	r3, #0
 8008594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8008598:	e013      	b.n	80085c2 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800859a:	23fe      	movs	r3, #254	; 0xfe
 800859c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80085a0:	e010      	b.n	80085c4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80085a2:	23fd      	movs	r3, #253	; 0xfd
 80085a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80085a8:	e00c      	b.n	80085c4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80085aa:	23fb      	movs	r3, #251	; 0xfb
 80085ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80085b0:	e008      	b.n	80085c4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80085b2:	23fa      	movs	r3, #250	; 0xfa
 80085b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80085b8:	e004      	b.n	80085c4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80085ba:	23ff      	movs	r3, #255	; 0xff
 80085bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80085c0:	e000      	b.n	80085c4 <LmHandlerSend+0x1a0>
            break;
 80085c2:	bf00      	nop
    }

    return lmhStatus;
 80085c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	200001fc 	.word	0x200001fc
 80085d4:	20000ffc 	.word	0x20000ffc
 80085d8:	20000208 	.word	0x20000208
 80085dc:	20001010 	.word	0x20001010
 80085e0:	20001054 	.word	0x20001054

080085e4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 80085ea:	230a      	movs	r3, #10
 80085ec:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 80085ee:	463b      	mov	r3, r7
 80085f0:	4618      	mov	r0, r3
 80085f2:	f002 fcff 	bl	800aff4 <LoRaMacMlmeRequest>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	4a06      	ldr	r2, [pc, #24]	; (8008618 <LmHandlerDeviceTimeReq+0x34>)
 80085fe:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8008606:	2300      	movs	r3, #0
 8008608:	e001      	b.n	800860e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800860a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20001054 	.word	0x20001054

0800861c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8008626:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08e      	sub	sp, #56	; 0x38
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800863e:	2300      	movs	r3, #0
 8008640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 8008644:	f000 fec8 	bl	80093d8 <LoRaMacIsBusy>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800864e:	f06f 0301 	mvn.w	r3, #1
 8008652:	e073      	b.n	800873c <LmHandlerRequestClass+0x108>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008654:	f7ff feca 	bl	80083ec <LmHandlerJoinStatus>
 8008658:	4603      	mov	r3, r0
 800865a:	2b01      	cmp	r3, #1
 800865c:	d002      	beq.n	8008664 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800865e:	f06f 0302 	mvn.w	r3, #2
 8008662:	e06b      	b.n	800873c <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8008664:	2300      	movs	r3, #0
 8008666:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4618      	mov	r0, r3
 800866e:	f001 ff77 	bl	800a560 <LoRaMacMibGetRequestConfirm>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8008678:	f04f 33ff 	mov.w	r3, #4294967295
 800867c:	e05e      	b.n	800873c <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800867e:	7c3b      	ldrb	r3, [r7, #16]
 8008680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 8008684:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	d04d      	beq.n	800872a <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	2b02      	cmp	r3, #2
 8008692:	d028      	beq.n	80086e6 <LmHandlerRequestClass+0xb2>
 8008694:	2b02      	cmp	r3, #2
 8008696:	dc4a      	bgt.n	800872e <LmHandlerRequestClass+0xfa>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <LmHandlerRequestClass+0x6e>
 800869c:	2b01      	cmp	r3, #1
 800869e:	d01e      	beq.n	80086de <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 80086a0:	e045      	b.n	800872e <LmHandlerRequestClass+0xfa>
                    if( currentClass != CLASS_A )
 80086a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d043      	beq.n	8008732 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	4618      	mov	r0, r3
 80086b4:	f002 f90a 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80086be:	4b21      	ldr	r3, [pc, #132]	; (8008744 <LmHandlerRequestClass+0x110>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d034      	beq.n	8008732 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80086c8:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <LmHandlerRequestClass+0x110>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	79fa      	ldrb	r2, [r7, #7]
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
                break;
 80086d4:	e02d      	b.n	8008732 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 80086d6:	23ff      	movs	r3, #255	; 0xff
 80086d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80086dc:	e029      	b.n	8008732 <LmHandlerRequestClass+0xfe>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80086de:	23ff      	movs	r3, #255	; 0xff
 80086e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80086e4:	e028      	b.n	8008738 <LmHandlerRequestClass+0x104>
                    if( currentClass != CLASS_A )
 80086e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80086ee:	23ff      	movs	r3, #255	; 0xff
 80086f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80086f4:	e01f      	b.n	8008736 <LmHandlerRequestClass+0x102>
                        mibReq.Param.Class = newClass;
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80086fa:	f107 030c 	add.w	r3, r7, #12
 80086fe:	4618      	mov	r0, r3
 8008700:	f002 f8e4 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <LmHandlerRequestClass+0x110>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	2b00      	cmp	r3, #0
 8008712:	d010      	beq.n	8008736 <LmHandlerRequestClass+0x102>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <LmHandlerRequestClass+0x110>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	79fa      	ldrb	r2, [r7, #7]
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
                break;
 8008720:	e009      	b.n	8008736 <LmHandlerRequestClass+0x102>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008722:	23ff      	movs	r3, #255	; 0xff
 8008724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8008728:	e005      	b.n	8008736 <LmHandlerRequestClass+0x102>
        }
    }
 800872a:	bf00      	nop
 800872c:	e004      	b.n	8008738 <LmHandlerRequestClass+0x104>
                break;
 800872e:	bf00      	nop
 8008730:	e002      	b.n	8008738 <LmHandlerRequestClass+0x104>
                break;
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <LmHandlerRequestClass+0x104>
                break;
 8008736:	bf00      	nop
    return errorStatus;
 8008738:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800873c:	4618      	mov	r0, r3
 800873e:	3738      	adds	r7, #56	; 0x38
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20001028 	.word	0x20001028

08008748 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08c      	sub	sp, #48	; 0x30
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d102      	bne.n	800875c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8008756:	f04f 33ff 	mov.w	r3, #4294967295
 800875a:	e010      	b.n	800877e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800875c:	2300      	movs	r3, #0
 800875e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008760:	f107 0308 	add.w	r3, r7, #8
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fefb 	bl	800a560 <LoRaMacMibGetRequestConfirm>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8008770:	f04f 33ff 	mov.w	r3, #4294967295
 8008774:	e003      	b.n	800877e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8008776:	7b3a      	ldrb	r2, [r7, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3730      	adds	r7, #48	; 0x30
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08c      	sub	sp, #48	; 0x30
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d102      	bne.n	800879c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8008796:	f04f 33ff 	mov.w	r3, #4294967295
 800879a:	e016      	b.n	80087ca <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800879c:	231f      	movs	r3, #31
 800879e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 80087a0:	f107 0308 	add.w	r3, r7, #8
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fedb 	bl	800a560 <LoRaMacMibGetRequestConfirm>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80087b0:	f04f 33ff 	mov.w	r3, #4294967295
 80087b4:	e009      	b.n	80087ca <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 80087b6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f993 2000 	ldrsb.w	r2, [r3]
 80087c4:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <LmHandlerGetTxDatarate+0x4c>)
 80087c6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3730      	adds	r7, #48	; 0x30
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20001010 	.word	0x20001010

080087d8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 80087e0:	4b18      	ldr	r3, [pc, #96]	; (8008844 <McpsConfirm+0x6c>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	785a      	ldrb	r2, [r3, #1]
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <McpsConfirm+0x6c>)
 80087ec:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	789b      	ldrb	r3, [r3, #2]
 80087f2:	b25a      	sxtb	r2, r3
 80087f4:	4b13      	ldr	r3, [pc, #76]	; (8008844 <McpsConfirm+0x6c>)
 80087f6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	4a11      	ldr	r2, [pc, #68]	; (8008844 <McpsConfirm+0x6c>)
 80087fe:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8008806:	4b0f      	ldr	r3, [pc, #60]	; (8008844 <McpsConfirm+0x6c>)
 8008808:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <McpsConfirm+0x6c>)
 8008812:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	791b      	ldrb	r3, [r3, #4]
 8008818:	461a      	mov	r2, r3
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <McpsConfirm+0x6c>)
 800881c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800881e:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <McpsConfirm+0x70>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8008828:	4b07      	ldr	r3, [pc, #28]	; (8008848 <McpsConfirm+0x70>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882e:	4805      	ldr	r0, [pc, #20]	; (8008844 <McpsConfirm+0x6c>)
 8008830:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	2000      	movs	r0, #0
 8008836:	f000 f9cd 	bl	8008bd4 <LmHandlerPackagesNotify>
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000208 	.word	0x20000208
 8008848:	20001028 	.word	0x20001028

0800884c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800885a:	4b32      	ldr	r3, [pc, #200]	; (8008924 <McpsIndication+0xd8>)
 800885c:	2201      	movs	r2, #1
 800885e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	785a      	ldrb	r2, [r3, #1]
 8008864:	4b2f      	ldr	r3, [pc, #188]	; (8008924 <McpsIndication+0xd8>)
 8008866:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008868:	4b2e      	ldr	r3, [pc, #184]	; (8008924 <McpsIndication+0xd8>)
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d155      	bne.n	800891c <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	791b      	ldrb	r3, [r3, #4]
 8008874:	b25a      	sxtb	r2, r3
 8008876:	4b2b      	ldr	r3, [pc, #172]	; (8008924 <McpsIndication+0xd8>)
 8008878:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008880:	b25a      	sxtb	r2, r3
 8008882:	4b28      	ldr	r3, [pc, #160]	; (8008924 <McpsIndication+0xd8>)
 8008884:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800888c:	4b25      	ldr	r3, [pc, #148]	; (8008924 <McpsIndication+0xd8>)
 800888e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	78da      	ldrb	r2, [r3, #3]
 8008894:	4b23      	ldr	r3, [pc, #140]	; (8008924 <McpsIndication+0xd8>)
 8008896:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	4a21      	ldr	r2, [pc, #132]	; (8008924 <McpsIndication+0xd8>)
 800889e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	78db      	ldrb	r3, [r3, #3]
 80088a4:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	7b1b      	ldrb	r3, [r3, #12]
 80088aa:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 80088b2:	4b1d      	ldr	r3, [pc, #116]	; (8008928 <McpsIndication+0xdc>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80088bc:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <McpsIndication+0xdc>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	f107 0218 	add.w	r2, r7, #24
 80088c6:	4917      	ldr	r1, [pc, #92]	; (8008924 <McpsIndication+0xd8>)
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 80088cc:	4b16      	ldr	r3, [pc, #88]	; (8008928 <McpsIndication+0xdc>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d007      	beq.n	80088e6 <McpsIndication+0x9a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7e1b      	ldrb	r3, [r3, #24]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80088de:	4b12      	ldr	r3, [pc, #72]	; (8008928 <McpsIndication+0xdc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	2001      	movs	r0, #1
 80088ea:	f000 f973 	bl	8008bd4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 80088ee:	f107 0317 	add.w	r3, r7, #23
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff ff28 	bl	8008748 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	795b      	ldrb	r3, [r3, #5]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00e      	beq.n	800891e <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 8008900:	2300      	movs	r3, #0
 8008902:	733b      	strb	r3, [r7, #12]
 8008904:	2300      	movs	r3, #0
 8008906:	737b      	strb	r3, [r7, #13]
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800890c:	f107 030c 	add.w	r3, r7, #12
 8008910:	2201      	movs	r2, #1
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fd85 	bl	8008424 <LmHandlerSend>
 800891a:	e000      	b.n	800891e <McpsIndication+0xd2>
        return;
 800891c:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800891e:	3720      	adds	r7, #32
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20000224 	.word	0x20000224
 8008928:	20001028 	.word	0x20001028

0800892c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08c      	sub	sp, #48	; 0x30
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8008934:	4b4a      	ldr	r3, [pc, #296]	; (8008a60 <MlmeConfirm+0x134>)
 8008936:	2200      	movs	r2, #0
 8008938:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	785a      	ldrb	r2, [r3, #1]
 800893e:	4b48      	ldr	r3, [pc, #288]	; (8008a60 <MlmeConfirm+0x134>)
 8008940:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8008942:	4b48      	ldr	r3, [pc, #288]	; (8008a64 <MlmeConfirm+0x138>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800894c:	4b45      	ldr	r3, [pc, #276]	; (8008a64 <MlmeConfirm+0x138>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	4843      	ldr	r0, [pc, #268]	; (8008a60 <MlmeConfirm+0x134>)
 8008954:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	2002      	movs	r0, #2
 800895a:	f000 f93b 	bl	8008bd4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	3b01      	subs	r3, #1
 8008964:	2b0c      	cmp	r3, #12
 8008966:	d874      	bhi.n	8008a52 <MlmeConfirm+0x126>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <MlmeConfirm+0x44>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	080089a5 	.word	0x080089a5
 8008974:	08008a53 	.word	0x08008a53
 8008978:	08008a53 	.word	0x08008a53
 800897c:	08008a53 	.word	0x08008a53
 8008980:	08008a21 	.word	0x08008a21
 8008984:	08008a53 	.word	0x08008a53
 8008988:	08008a53 	.word	0x08008a53
 800898c:	08008a53 	.word	0x08008a53
 8008990:	08008a53 	.word	0x08008a53
 8008994:	08008a53 	.word	0x08008a53
 8008998:	08008a53 	.word	0x08008a53
 800899c:	08008a39 	.word	0x08008a39
 80089a0:	08008a53 	.word	0x08008a53
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 80089a4:	2306      	movs	r3, #6
 80089a6:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80089a8:	f107 0308 	add.w	r3, r7, #8
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 fdd7 	bl	800a560 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80089b2:	4b2d      	ldr	r3, [pc, #180]	; (8008a68 <MlmeConfirm+0x13c>)
 80089b4:	79db      	ldrb	r3, [r3, #7]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fbda 	bl	8008174 <SecureElementSetDevAddr>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d102      	bne.n	80089cc <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4a28      	ldr	r2, [pc, #160]	; (8008a6c <MlmeConfirm+0x140>)
 80089ca:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80089cc:	4828      	ldr	r0, [pc, #160]	; (8008a70 <MlmeConfirm+0x144>)
 80089ce:	f7ff fedb 	bl	8008788 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80089d2:	4828      	ldr	r0, [pc, #160]	; (8008a74 <MlmeConfirm+0x148>)
 80089d4:	f000 f992 	bl	8008cfc <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80089d8:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <MlmeConfirm+0x134>)
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d108      	bne.n	80089f2 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80089e0:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <MlmeConfirm+0x13c>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80089e6:	4b24      	ldr	r3, [pc, #144]	; (8008a78 <MlmeConfirm+0x14c>)
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fe22 	bl	8008634 <LmHandlerRequestClass>
 80089f0:	e002      	b.n	80089f8 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80089f2:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <MlmeConfirm+0x13c>)
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80089f8:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <MlmeConfirm+0x138>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008a02:	4b18      	ldr	r3, [pc, #96]	; (8008a64 <MlmeConfirm+0x138>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	4817      	ldr	r0, [pc, #92]	; (8008a68 <MlmeConfirm+0x13c>)
 8008a0a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008a0c:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <MlmeConfirm+0x134>)
 8008a0e:	785b      	ldrb	r3, [r3, #1]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d120      	bne.n	8008a56 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8008a14:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <MlmeConfirm+0x13c>)
 8008a16:	79db      	ldrb	r3, [r3, #7]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff f9df 	bl	8007ddc <SecureElementPrintSessionKeys>
                }
            }
            break;
 8008a1e:	e01a      	b.n	8008a56 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8008a20:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <MlmeConfirm+0x150>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7a1a      	ldrb	r2, [r3, #8]
 8008a2a:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <MlmeConfirm+0x150>)
 8008a2c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7a5a      	ldrb	r2, [r3, #9]
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <MlmeConfirm+0x150>)
 8008a34:	74da      	strb	r2, [r3, #19]
            }
            break;
 8008a36:	e00f      	b.n	8008a58 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8008a40:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <MlmeConfirm+0x14c>)
 8008a42:	7c1b      	ldrb	r3, [r3, #16]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fde9 	bl	800861c <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 8008a4a:	e005      	b.n	8008a58 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 8008a4c:	f7ff fdca 	bl	80085e4 <LmHandlerDeviceTimeReq>
            break;
 8008a50:	e002      	b.n	8008a58 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8008a52:	bf00      	nop
 8008a54:	e000      	b.n	8008a58 <MlmeConfirm+0x12c>
            break;
 8008a56:	bf00      	nop
    }
}
 8008a58:	bf00      	nop
 8008a5a:	3730      	adds	r7, #48	; 0x30
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20000208 	.word	0x20000208
 8008a64:	20001028 	.word	0x20001028
 8008a68:	200001fc 	.word	0x200001fc
 8008a6c:	20000fe4 	.word	0x20000fe4
 8008a70:	20000200 	.word	0x20000200
 8008a74:	20000201 	.word	0x20000201
 8008a78:	20001010 	.word	0x20001010
 8008a7c:	20000224 	.word	0x20000224

08008a80 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 8008a8a:	4b20      	ldr	r3, [pc, #128]	; (8008b0c <MlmeIndication+0x8c>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	785a      	ldrb	r2, [r3, #1]
 8008a94:	4b1d      	ldr	r3, [pc, #116]	; (8008b0c <MlmeIndication+0x8c>)
 8008a96:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	789b      	ldrb	r3, [r3, #2]
 8008a9c:	b25a      	sxtb	r2, r3
 8008a9e:	4b1b      	ldr	r3, [pc, #108]	; (8008b0c <MlmeIndication+0x8c>)
 8008aa0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa8:	b25a      	sxtb	r2, r3
 8008aaa:	4b18      	ldr	r3, [pc, #96]	; (8008b0c <MlmeIndication+0x8c>)
 8008aac:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8008ab4:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <MlmeIndication+0x8c>)
 8008ab6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	78da      	ldrb	r2, [r3, #3]
 8008abc:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <MlmeIndication+0x8c>)
 8008abe:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	4a11      	ldr	r2, [pc, #68]	; (8008b0c <MlmeIndication+0x8c>)
 8008ac6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8008ac8:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <MlmeIndication+0x90>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00d      	beq.n	8008aee <MlmeIndication+0x6e>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b0b      	cmp	r3, #11
 8008ad8:	d009      	beq.n	8008aee <MlmeIndication+0x6e>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b0f      	cmp	r3, #15
 8008ae0:	d005      	beq.n	8008aee <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <MlmeIndication+0x90>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4908      	ldr	r1, [pc, #32]	; (8008b0c <MlmeIndication+0x8c>)
 8008aea:	2000      	movs	r0, #0
 8008aec:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	2003      	movs	r0, #3
 8008af2:	f000 f86f 	bl	8008bd4 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b0b      	cmp	r3, #11
 8008afc:	d001      	beq.n	8008b02 <MlmeIndication+0x82>
 8008afe:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8008b00:	e000      	b.n	8008b04 <MlmeIndication+0x84>
            break;
 8008b02:	bf00      	nop
    }
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000224 	.word	0x20000224
 8008b10:	20001028 	.word	0x20001028

08008b14 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
    switch( id )
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 8008b2a:	f000 f919 	bl	8008d60 <LmhpCompliancePackageFactory>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	60fb      	str	r3, [r7, #12]
                break;
 8008b32:	e00d      	b.n	8008b50 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8008b34:	f107 020c 	add.w	r2, r7, #12
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fc25 	bl	800938c <LmhpPackagesRegister>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8008b48:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4c:	e031      	b.n	8008bb2 <LmHandlerPackageRegister+0x9e>
                }
                break;
 8008b4e:	bf00      	nop
            }
    }
    if( package != NULL )
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d02b      	beq.n	8008bae <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4918      	ldr	r1, [pc, #96]	; (8008bbc <LmHandlerPackageRegister+0xa8>)
 8008b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	4a16      	ldr	r2, [pc, #88]	; (8008bbc <LmHandlerPackageRegister+0xa8>)
 8008b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b68:	4a15      	ldr	r2, [pc, #84]	; (8008bc0 <LmHandlerPackageRegister+0xac>)
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	4a13      	ldr	r2, [pc, #76]	; (8008bbc <LmHandlerPackageRegister+0xa8>)
 8008b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b74:	4a13      	ldr	r2, [pc, #76]	; (8008bc4 <LmHandlerPackageRegister+0xb0>)
 8008b76:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	4a10      	ldr	r2, [pc, #64]	; (8008bbc <LmHandlerPackageRegister+0xa8>)
 8008b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b80:	4a11      	ldr	r2, [pc, #68]	; (8008bc8 <LmHandlerPackageRegister+0xb4>)
 8008b82:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008b84:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <LmHandlerPackageRegister+0xb8>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	490c      	ldr	r1, [pc, #48]	; (8008bbc <LmHandlerPackageRegister+0xa8>)
 8008b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b90:	6992      	ldr	r2, [r2, #24]
 8008b92:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	4a09      	ldr	r2, [pc, #36]	; (8008bbc <LmHandlerPackageRegister+0xa8>)
 8008b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	4a0c      	ldr	r2, [pc, #48]	; (8008bd0 <LmHandlerPackageRegister+0xbc>)
 8008ba0:	6851      	ldr	r1, [r2, #4]
 8008ba2:	4a0b      	ldr	r2, [pc, #44]	; (8008bd0 <LmHandlerPackageRegister+0xbc>)
 8008ba4:	7852      	ldrb	r2, [r2, #1]
 8008ba6:	6838      	ldr	r0, [r7, #0]
 8008ba8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 8008baa:	2300      	movs	r3, #0
 8008bac:	e001      	b.n	8008bb2 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000ffc 	.word	0x20000ffc
 8008bc0:	080082a5 	.word	0x080082a5
 8008bc4:	08008425 	.word	0x08008425
 8008bc8:	080085e5 	.word	0x080085e5
 8008bcc:	20001028 	.word	0x20001028
 8008bd0:	20000238 	.word	0x20000238

08008bd4 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
 8008be4:	e07e      	b.n	8008ce4 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 8008be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bea:	4a43      	ldr	r2, [pc, #268]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d066      	beq.n	8008cc2 <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d865      	bhi.n	8008cc6 <LmHandlerPackagesNotify+0xf2>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <LmHandlerPackagesNotify+0x2c>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c11 	.word	0x08008c11
 8008c04:	08008c33 	.word	0x08008c33
 8008c08:	08008c7f 	.word	0x08008c7f
 8008c0c:	08008ca1 	.word	0x08008ca1
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c14:	4a38      	ldr	r2, [pc, #224]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d054      	beq.n	8008cca <LmHandlerPackagesNotify+0xf6>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8008c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c24:	4a34      	ldr	r2, [pc, #208]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	6838      	ldr	r0, [r7, #0]
 8008c2e:	4798      	blx	r3
                        }
                        break;
 8008c30:	e04b      	b.n	8008cca <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c36:	4a30      	ldr	r2, [pc, #192]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d045      	beq.n	8008cce <LmHandlerPackagesNotify+0xfa>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8008c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c46:	4a2c      	ldr	r2, [pc, #176]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d00a      	beq.n	8008c6c <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8008c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d137      	bne.n	8008cce <LmHandlerPackagesNotify+0xfa>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 8008c5e:	4b26      	ldr	r3, [pc, #152]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d030      	beq.n	8008cce <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8008c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c70:	4a21      	ldr	r2, [pc, #132]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	6838      	ldr	r0, [r7, #0]
 8008c7a:	4798      	blx	r3
                        }
                        break;
 8008c7c:	e027      	b.n	8008cce <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c82:	4a1d      	ldr	r2, [pc, #116]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d021      	beq.n	8008cd2 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8008c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c92:	4a19      	ldr	r2, [pc, #100]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	6838      	ldr	r0, [r7, #0]
 8008c9c:	4798      	blx	r3
                        }
                        break;
 8008c9e:	e018      	b.n	8008cd2 <LmHandlerPackagesNotify+0xfe>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ca4:	4a14      	ldr	r2, [pc, #80]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d012      	beq.n	8008cd6 <LmHandlerPackagesNotify+0x102>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8008cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cb4:	4a10      	ldr	r2, [pc, #64]	; (8008cf8 <LmHandlerPackagesNotify+0x124>)
 8008cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	6838      	ldr	r0, [r7, #0]
 8008cbe:	4798      	blx	r3
                        }
                        break;
 8008cc0:	e009      	b.n	8008cd6 <LmHandlerPackagesNotify+0x102>
                default:
                    {
                        break;
                    }
            }
        }
 8008cc2:	bf00      	nop
 8008cc4:	e008      	b.n	8008cd8 <LmHandlerPackagesNotify+0x104>
                        break;
 8008cc6:	bf00      	nop
 8008cc8:	e006      	b.n	8008cd8 <LmHandlerPackagesNotify+0x104>
                        break;
 8008cca:	bf00      	nop
 8008ccc:	e004      	b.n	8008cd8 <LmHandlerPackagesNotify+0x104>
                        break;
 8008cce:	bf00      	nop
 8008cd0:	e002      	b.n	8008cd8 <LmHandlerPackagesNotify+0x104>
                        break;
 8008cd2:	bf00      	nop
 8008cd4:	e000      	b.n	8008cd8 <LmHandlerPackagesNotify+0x104>
                        break;
 8008cd6:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	3301      	adds	r3, #1
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	f77f af7c 	ble.w	8008be6 <LmHandlerPackagesNotify+0x12>
    }
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20000ffc 	.word	0x20000ffc

08008cfc <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08c      	sub	sp, #48	; 0x30
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d102      	bne.n	8008d10 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8008d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0e:	e016      	b.n	8008d3e <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8008d10:	2320      	movs	r3, #32
 8008d12:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008d14:	f107 0308 	add.w	r3, r7, #8
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 fc21 	bl	800a560 <LoRaMacMibGetRequestConfirm>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8008d24:	f04f 33ff 	mov.w	r3, #4294967295
 8008d28:	e009      	b.n	8008d3e <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8008d2a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f993 2000 	ldrsb.w	r2, [r3]
 8008d38:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <LmHandlerGetTxPower+0x4c>)
 8008d3a:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3730      	adds	r7, #48	; 0x30
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20001010 	.word	0x20001010

08008d4c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr

08008d60 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <LmhpCompliancePackageFactory+0x10>)
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20000240 	.word	0x20000240

08008d74 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00f      	beq.n	8008da8 <LmhpComplianceInit+0x34>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 8008d8e:	4a0c      	ldr	r2, [pc, #48]	; (8008dc0 <LmhpComplianceInit+0x4c>)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8008d94:	4a0b      	ldr	r2, [pc, #44]	; (8008dc4 <LmhpComplianceInit+0x50>)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008d9a:	4a0a      	ldr	r2, [pc, #40]	; (8008dc4 <LmhpComplianceInit+0x50>)
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <LmhpComplianceInit+0x50>)
 8008da2:	2201      	movs	r2, #1
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e006      	b.n	8008db6 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <LmhpComplianceInit+0x4c>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8008dae:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <LmhpComplianceInit+0x50>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
    }
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr
 8008dc0:	20001178 	.word	0x20001178
 8008dc4:	20001164 	.word	0x20001164

08008dc8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <LmhpComplianceIsInitialized+0x10>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bc80      	pop	{r7}
 8008dd6:	4770      	bx	lr
 8008dd8:	20001164 	.word	0x20001164

08008ddc <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <LmhpComplianceIsRunning+0x24>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f083 0301 	eor.w	r3, r3, #1
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8008dee:	2300      	movs	r3, #0
 8008df0:	e001      	b.n	8008df6 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 8008df2:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <LmhpComplianceIsRunning+0x24>)
 8008df4:	785b      	ldrb	r3, [r3, #1]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20001164 	.word	0x20001164

08008e04 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <LmhpComplianceOnMcpsConfirm+0x48>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f083 0301 	eor.w	r3, r3, #1
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d112      	bne.n	8008e40 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <LmhpComplianceOnMcpsConfirm+0x48>)
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00f      	beq.n	8008e42 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10b      	bne.n	8008e42 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d007      	beq.n	8008e42 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8008e32:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <LmhpComplianceOnMcpsConfirm+0x48>)
 8008e34:	899b      	ldrh	r3, [r3, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <LmhpComplianceOnMcpsConfirm+0x48>)
 8008e3c:	819a      	strh	r2, [r3, #12]
 8008e3e:	e000      	b.n	8008e42 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8008e40:	bf00      	nop
    }
}
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bc80      	pop	{r7}
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20001164 	.word	0x20001164

08008e50 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	f083 0301 	eor.w	r3, r3, #1
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d116      	bne.n	8008e94 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	f083 0301 	eor.w	r3, r3, #1
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d111      	bne.n	8008e98 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b05      	cmp	r3, #5
 8008e7a:	d10e      	bne.n	8008e9a <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	7a1a      	ldrb	r2, [r3, #8]
 8008e86:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8008e88:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7a5a      	ldrb	r2, [r3, #9]
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8008e90:	741a      	strb	r2, [r3, #16]
 8008e92:	e002      	b.n	8008e9a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8008e94:	bf00      	nop
 8008e96:	e000      	b.n	8008e9a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8008e98:	bf00      	nop
    }
}
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20001164 	.word	0x20001164

08008ea8 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f083 0301 	eor.w	r3, r3, #1
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8008ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec0:	e05e      	b.n	8008f80 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 8008ec2:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	f083 0301 	eor.w	r3, r3, #1
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e055      	b.n	8008f80 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 8008ed4:	4b2c      	ldr	r3, [pc, #176]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008ed6:	7b9b      	ldrb	r3, [r3, #14]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d019      	beq.n	8008f10 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8008edc:	4b2a      	ldr	r3, [pc, #168]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8008ee2:	4b29      	ldr	r3, [pc, #164]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8008ee8:	4b27      	ldr	r3, [pc, #156]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2205      	movs	r2, #5
 8008eee:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008ef0:	4b25      	ldr	r3, [pc, #148]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	4a24      	ldr	r2, [pc, #144]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008ef8:	7bd2      	ldrb	r2, [r2, #15]
 8008efa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008efc:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	3302      	adds	r3, #2
 8008f02:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f04:	7c12      	ldrb	r2, [r2, #16]
 8008f06:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8008f08:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	709a      	strb	r2, [r3, #2]
 8008f0e:	e01c      	b.n	8008f4a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8008f10:	4b1d      	ldr	r3, [pc, #116]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f12:	789b      	ldrb	r3, [r3, #2]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d005      	beq.n	8008f24 <LmhpComplianceTxProcess+0x7c>
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d116      	bne.n	8008f4a <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	709a      	strb	r2, [r3, #2]
                break;
 8008f22:	e012      	b.n	8008f4a <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 8008f24:	4b18      	ldr	r3, [pc, #96]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f26:	2202      	movs	r2, #2
 8008f28:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008f2a:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f2c:	899b      	ldrh	r3, [r3, #12]
 8008f2e:	0a1b      	lsrs	r3, r3, #8
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008f3a:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f3c:	899a      	ldrh	r2, [r3, #12]
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	3301      	adds	r3, #1
 8008f44:	b2d2      	uxtb	r2, r2
 8008f46:	701a      	strb	r2, [r3, #0]
                break;
 8008f48:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8008f4a:	23e0      	movs	r3, #224	; 0xe0
 8008f4c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f50:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8008f52:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f56:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8008f58:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 8008f5a:	480c      	ldr	r0, [pc, #48]	; (8008f8c <LmhpComplianceTxProcess+0xe4>)
 8008f5c:	f008 fafa 	bl	8011554 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <LmhpComplianceTxProcess+0xe8>)
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 8008f68:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6c:	e008      	b.n	8008f80 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 8008f6e:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <LmhpComplianceTxProcess+0xe8>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	4a05      	ldr	r2, [pc, #20]	; (8008f88 <LmhpComplianceTxProcess+0xe0>)
 8008f74:	78d2      	ldrb	r2, [r2, #3]
 8008f76:	4611      	mov	r1, r2
 8008f78:	4638      	mov	r0, r7
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4798      	blx	r3
 8008f7e:	4603      	mov	r3, r0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	20001164 	.word	0x20001164
 8008f8c:	2000114c 	.word	0x2000114c
 8008f90:	20000240 	.word	0x20000240

08008f94 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b0a4      	sub	sp, #144	; 0x90
 8008f98:	af02      	add	r7, sp, #8
 8008f9a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8008f9c:	4ba5      	ldr	r3, [pc, #660]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f083 0301 	eor.w	r3, r3, #1
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f040 81c6 	bne.w	8009338 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	7b5b      	ldrb	r3, [r3, #13]
 8008fb0:	f083 0301 	eor.w	r3, r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f040 81c0 	bne.w	800933c <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8008fbc:	4b9d      	ldr	r3, [pc, #628]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00c      	beq.n	8008fde <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7b9b      	ldrb	r3, [r3, #14]
 8008fc8:	f083 0301 	eor.w	r3, r3, #1
 8008fcc:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8008fd2:	4b98      	ldr	r3, [pc, #608]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8008fd4:	899b      	ldrh	r3, [r3, #12]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	4b96      	ldr	r3, [pc, #600]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8008fdc:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	78db      	ldrb	r3, [r3, #3]
 8008fe2:	2be0      	cmp	r3, #224	; 0xe0
 8008fe4:	f040 81ac 	bne.w	8009340 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8008fe8:	4b92      	ldr	r3, [pc, #584]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	f083 0301 	eor.w	r3, r3, #1
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d060      	beq.n	80090b8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	7b1b      	ldrb	r3, [r3, #12]
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	f040 81a7 	bne.w	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8009006:	2b01      	cmp	r3, #1
 8009008:	f040 81a1 	bne.w	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	3301      	adds	r3, #1
 8009012:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8009014:	2b01      	cmp	r3, #1
 8009016:	f040 819a 	bne.w	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	3302      	adds	r3, #2
 8009020:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8009022:	2b01      	cmp	r3, #1
 8009024:	f040 8193 	bne.w	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	3303      	adds	r3, #3
 800902e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8009030:	2b01      	cmp	r3, #1
 8009032:	f040 818c 	bne.w	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 8009036:	4b7f      	ldr	r3, [pc, #508]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009038:	2200      	movs	r2, #0
 800903a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800903c:	4b7d      	ldr	r3, [pc, #500]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800903e:	22e0      	movs	r2, #224	; 0xe0
 8009040:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8009042:	4b7c      	ldr	r3, [pc, #496]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009044:	2202      	movs	r2, #2
 8009046:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8009048:	4b7a      	ldr	r3, [pc, #488]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800904a:	2200      	movs	r2, #0
 800904c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800904e:	4b79      	ldr	r3, [pc, #484]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009050:	2200      	movs	r2, #0
 8009052:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8009054:	4b77      	ldr	r3, [pc, #476]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009056:	2200      	movs	r2, #0
 8009058:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800905a:	4b76      	ldr	r3, [pc, #472]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800905c:	2200      	movs	r2, #0
 800905e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8009060:	4b74      	ldr	r3, [pc, #464]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009062:	2201      	movs	r2, #1
 8009064:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8009066:	4b73      	ldr	r3, [pc, #460]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009068:	2201      	movs	r2, #1
 800906a:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800906c:	2304      	movs	r3, #4
 800906e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 8009070:	2301      	movs	r3, #1
 8009072:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	4618      	mov	r0, r3
 800907a:	f001 fc27 	bl	800a8cc <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800907e:	2000      	movs	r0, #0
 8009080:	f002 fa00 	bl	800b484 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8009084:	4b6c      	ldr	r3, [pc, #432]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800908e:	4b6a      	ldr	r3, [pc, #424]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8009096:	2300      	movs	r3, #0
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	4b68      	ldr	r3, [pc, #416]	; (800923c <LmhpComplianceOnMcpsIndication+0x2a8>)
 800909c:	2200      	movs	r2, #0
 800909e:	f04f 31ff 	mov.w	r1, #4294967295
 80090a2:	4867      	ldr	r0, [pc, #412]	; (8009240 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80090a4:	f008 fa20 	bl	80114e8 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80090a8:	f241 3188 	movw	r1, #5000	; 0x1388
 80090ac:	4864      	ldr	r0, [pc, #400]	; (8009240 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80090ae:	f008 fb2f 	bl	8011710 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 80090b2:	f7ff fef9 	bl	8008ea8 <LmhpComplianceTxProcess>
 80090b6:	e14a      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	781a      	ldrb	r2, [r3, #0]
 80090be:	4b5d      	ldr	r3, [pc, #372]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80090c0:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 80090c2:	4b5c      	ldr	r3, [pc, #368]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80090c4:	789b      	ldrb	r3, [r3, #2]
 80090c6:	2b0a      	cmp	r3, #10
 80090c8:	f200 813c 	bhi.w	8009344 <LmhpComplianceOnMcpsIndication+0x3b0>
 80090cc:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <LmhpComplianceOnMcpsIndication+0x140>)
 80090ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d2:	bf00      	nop
 80090d4:	08009101 	.word	0x08009101
 80090d8:	0800914b 	.word	0x0800914b
 80090dc:	08009153 	.word	0x08009153
 80090e0:	08009161 	.word	0x08009161
 80090e4:	0800916f 	.word	0x0800916f
 80090e8:	080091c7 	.word	0x080091c7
 80090ec:	080091d9 	.word	0x080091d9
 80090f0:	08009249 	.word	0x08009249
 80090f4:	080092f1 	.word	0x080092f1
 80090f8:	08009303 	.word	0x08009303
 80090fc:	0800931d 	.word	0x0800931d
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8009100:	484f      	ldr	r0, [pc, #316]	; (8009240 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8009102:	f008 fa95 	bl	8011630 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8009106:	4b4b      	ldr	r3, [pc, #300]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009108:	2200      	movs	r2, #0
 800910a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800910c:	4b49      	ldr	r3, [pc, #292]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800910e:	2200      	movs	r2, #0
 8009110:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8009112:	2304      	movs	r3, #4
 8009114:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8009116:	4b48      	ldr	r3, [pc, #288]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800911e:	f107 030c 	add.w	r3, r7, #12
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fbd2 	bl	800a8cc <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8009128:	4b43      	ldr	r3, [pc, #268]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	4618      	mov	r0, r3
 8009130:	f002 f9a8 	bl	800b484 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8009134:	4b40      	ldr	r3, [pc, #256]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 8104 	beq.w	8009348 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8009140:	4b3d      	ldr	r3, [pc, #244]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	4798      	blx	r3
                    }
                }
                break;
 8009148:	e0fe      	b.n	8009348 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800914a:	4b3a      	ldr	r3, [pc, #232]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800914c:	2202      	movs	r2, #2
 800914e:	719a      	strb	r2, [r3, #6]
                break;
 8009150:	e0fd      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 8009152:	4b38      	ldr	r3, [pc, #224]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009154:	2201      	movs	r2, #1
 8009156:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8009158:	4b36      	ldr	r3, [pc, #216]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800915a:	2201      	movs	r2, #1
 800915c:	709a      	strb	r2, [r3, #2]
                break;
 800915e:	e0f6      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 8009160:	4b34      	ldr	r3, [pc, #208]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009162:	2200      	movs	r2, #0
 8009164:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8009166:	4b33      	ldr	r3, [pc, #204]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009168:	2201      	movs	r2, #1
 800916a:	709a      	strb	r2, [r3, #2]
                break;
 800916c:	e0ef      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7b1a      	ldrb	r2, [r3, #12]
 8009172:	4b30      	ldr	r3, [pc, #192]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009174:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 8009176:	4b2f      	ldr	r3, [pc, #188]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	2204      	movs	r2, #4
 800917c:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800917e:	2301      	movs	r3, #1
 8009180:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8009184:	e012      	b.n	80091ac <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800918e:	4413      	add	r3, r2
 8009190:	781a      	ldrb	r2, [r3, #0]
 8009192:	4b28      	ldr	r3, [pc, #160]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8009194:	6899      	ldr	r1, [r3, #8]
 8009196:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800919a:	440b      	add	r3, r1
 800919c:	3201      	adds	r2, #1
 800919e:	b2d2      	uxtb	r2, r2
 80091a0:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80091a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80091a6:	3301      	adds	r3, #1
 80091a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80091ae:	795a      	ldrb	r2, [r3, #5]
 80091b0:	4b20      	ldr	r3, [pc, #128]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80091b2:	799b      	ldrb	r3, [r3, #6]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	bf28      	it	cs
 80091b8:	4613      	movcs	r3, r2
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d3e0      	bcc.n	8009186 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 80091c4:	e0c3      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 80091c6:	2305      	movs	r3, #5
 80091c8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 80091cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 ff0f 	bl	800aff4 <LoRaMacMlmeRequest>
                }
                break;
 80091d6:	e0ba      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80091d8:	4819      	ldr	r0, [pc, #100]	; (8009240 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80091da:	f008 fa29 	bl	8011630 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80091de:	4b15      	ldr	r3, [pc, #84]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80091e4:	4b13      	ldr	r3, [pc, #76]	; (8009234 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80091ea:	2304      	movs	r3, #4
 80091ec:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80091f6:	f107 030c 	add.w	r3, r7, #12
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 fb66 	bl	800a8cc <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	785b      	ldrb	r3, [r3, #1]
 8009206:	4618      	mov	r0, r3
 8009208:	f002 f93c 	bl	800b484 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8009216:	4b08      	ldr	r3, [pc, #32]	; (8009238 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8009220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 8092 	beq.w	800934c <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	2101      	movs	r1, #1
 800922e:	2002      	movs	r0, #2
 8009230:	4798      	blx	r3
                    }
                }
                break;
 8009232:	e08b      	b.n	800934c <LmhpComplianceOnMcpsIndication+0x3b8>
 8009234:	20001164 	.word	0x20001164
 8009238:	20001178 	.word	0x20001178
 800923c:	08009365 	.word	0x08009365
 8009240:	2000114c 	.word	0x2000114c
 8009244:	20000240 	.word	0x20000240
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	7b1b      	ldrb	r3, [r3, #12]
 800924c:	2b03      	cmp	r3, #3
 800924e:	d113      	bne.n	8009278 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8009250:	2306      	movs	r3, #6
 8009252:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	3301      	adds	r3, #1
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	b21a      	sxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	3302      	adds	r3, #2
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	b21b      	sxth	r3, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	b21b      	sxth	r3, r3
 8009270:	b29b      	uxth	r3, r3
 8009272:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8009276:	e032      	b.n	80092de <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7b1b      	ldrb	r3, [r3, #12]
 800927c:	2b07      	cmp	r3, #7
 800927e:	d12e      	bne.n	80092de <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8009280:	2307      	movs	r3, #7
 8009282:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	3301      	adds	r3, #1
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	b21a      	sxth	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	3302      	adds	r3, #2
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b21b      	sxth	r3, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	b21b      	sxth	r3, r3
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	3303      	adds	r3, #3
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	041a      	lsls	r2, r3, #16
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	3304      	adds	r3, #4
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	4313      	orrs	r3, r2
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6892      	ldr	r2, [r2, #8]
 80092c0:	3205      	adds	r2, #5
 80092c2:	7812      	ldrb	r2, [r2, #0]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	461a      	mov	r2, r3
 80092c8:	2364      	movs	r3, #100	; 0x64
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
 80092ce:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	3306      	adds	r3, #6
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	b25b      	sxtb	r3, r3
 80092da:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 80092de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80092e2:	4618      	mov	r0, r3
 80092e4:	f001 fe86 	bl	800aff4 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 80092e8:	4b1a      	ldr	r3, [pc, #104]	; (8009354 <LmhpComplianceOnMcpsIndication+0x3c0>)
 80092ea:	2201      	movs	r2, #1
 80092ec:	709a      	strb	r2, [r3, #2]
                }
                break;
 80092ee:	e02e      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 80092f0:	230a      	movs	r3, #10
 80092f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 80092f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80092fa:	4618      	mov	r0, r3
 80092fc:	f001 fe7a 	bl	800aff4 <LoRaMacMlmeRequest>
                }
                break;
 8009300:	e025      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8009302:	2300      	movs	r3, #0
 8009304:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	3301      	adds	r3, #1
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8009310:	f107 030c 	add.w	r3, r7, #12
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fad9 	bl	800a8cc <LoRaMacMibSetRequestConfirm>
                }
                break;
 800931a:	e018      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800931c:	230d      	movs	r3, #13
 800931e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800932c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009330:	4618      	mov	r0, r3
 8009332:	f001 fe5f 	bl	800aff4 <LoRaMacMlmeRequest>
                }
                break;
 8009336:	e00a      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8009338:	bf00      	nop
 800933a:	e008      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800933c:	bf00      	nop
 800933e:	e006      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8009340:	bf00      	nop
 8009342:	e004      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8009344:	bf00      	nop
 8009346:	e002      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8009348:	bf00      	nop
 800934a:	e000      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800934c:	bf00      	nop
        }
    }
}
 800934e:	3788      	adds	r7, #136	; 0x88
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20001164 	.word	0x20001164

08009358 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800935c:	bf00      	nop
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr

08009364 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800936c:	f7ff fd9c 	bl	8008ea8 <LmhpComplianceTxProcess>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	bc80      	pop	{r7}
 800938a:	4770      	bx	lr

0800938c <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8009398:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr
	...

080093a8 <UpdateRxSlotIdleState>:
    OnMacProcessNotify( );
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80093ac:	4b08      	ldr	r3, [pc, #32]	; (80093d0 <UpdateRxSlotIdleState+0x28>)
 80093ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d004      	beq.n	80093c0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80093b6:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <UpdateRxSlotIdleState+0x2c>)
 80093b8:	2206      	movs	r2, #6
 80093ba:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80093be:	e003      	b.n	80093c8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80093c0:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <UpdateRxSlotIdleState+0x2c>)
 80093c2:	2202      	movs	r2, #2
 80093c4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 80093c8:	bf00      	nop
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr
 80093d0:	20001684 	.word	0x20001684
 80093d4:	2000117c 	.word	0x2000117c

080093d8 <LoRaMacIsBusy>:
        }
    }
}

bool LoRaMacIsBusy( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80093dc:	4b0b      	ldr	r3, [pc, #44]	; (800940c <LoRaMacIsBusy+0x34>)
 80093de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <LoRaMacIsBusy+0x12>
    {
        return false;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e00c      	b.n	8009404 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80093ea:	4b08      	ldr	r3, [pc, #32]	; (800940c <LoRaMacIsBusy+0x34>)
 80093ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d106      	bne.n	8009402 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <LoRaMacIsBusy+0x34>)
 80093f6:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <LoRaMacIsBusy+0x2a>
    {
        return false;
 80093fe:	2300      	movs	r3, #0
 8009400:	e000      	b.n	8009404 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8009402:	2301      	movs	r3, #1
}
 8009404:	4618      	mov	r0, r3
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr
 800940c:	2000117c 	.word	0x2000117c

08009410 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <LoRaMacIsStopped+0x1c>)
 8009416:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <LoRaMacIsStopped+0x12>
    {
        return true;
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <LoRaMacIsStopped+0x14>
    }
    return false;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	46bd      	mov	sp, r7
 8009428:	bc80      	pop	{r7}
 800942a:	4770      	bx	lr
 800942c:	2000117c 	.word	0x2000117c

08009430 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8009430:	b5b0      	push	{r4, r5, r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800943a:	2303      	movs	r3, #3
 800943c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800943e:	4b6d      	ldr	r3, [pc, #436]	; (80095f4 <SwitchClass+0x1c4>)
 8009440:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009444:	2b02      	cmp	r3, #2
 8009446:	f000 80b9 	beq.w	80095bc <SwitchClass+0x18c>
 800944a:	2b02      	cmp	r3, #2
 800944c:	f300 80cc 	bgt.w	80095e8 <SwitchClass+0x1b8>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <SwitchClass+0x2c>
 8009454:	2b01      	cmp	r3, #1
 8009456:	f000 80a3 	beq.w	80095a0 <SwitchClass+0x170>
 800945a:	e0c5      	b.n	80095e8 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d109      	bne.n	8009476 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009462:	4b64      	ldr	r3, [pc, #400]	; (80095f4 <SwitchClass+0x1c4>)
 8009464:	4a63      	ldr	r2, [pc, #396]	; (80095f4 <SwitchClass+0x1c4>)
 8009466:	3374      	adds	r3, #116	; 0x74
 8009468:	326c      	adds	r2, #108	; 0x6c
 800946a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800946e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d10c      	bne.n	8009496 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	4618      	mov	r0, r3
 8009480:	f002 f943 	bl	800b70a <LoRaMacClassBSwitchClass>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d103      	bne.n	8009496 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800948e:	4a59      	ldr	r2, [pc, #356]	; (80095f4 <SwitchClass+0x1c4>)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	2b02      	cmp	r3, #2
 800949a:	f040 80a0 	bne.w	80095de <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800949e:	4a55      	ldr	r2, [pc, #340]	; (80095f4 <SwitchClass+0x1c4>)
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80094a6:	4a54      	ldr	r2, [pc, #336]	; (80095f8 <SwitchClass+0x1c8>)
 80094a8:	4b53      	ldr	r3, [pc, #332]	; (80095f8 <SwitchClass+0x1c8>)
 80094aa:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80094ae:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80094b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80094ba:	4b4f      	ldr	r3, [pc, #316]	; (80095f8 <SwitchClass+0x1c8>)
 80094bc:	2202      	movs	r2, #2
 80094be:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80094c2:	2300      	movs	r3, #0
 80094c4:	73bb      	strb	r3, [r7, #14]
 80094c6:	e05b      	b.n	8009580 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80094c8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80094cc:	4949      	ldr	r1, [pc, #292]	; (80095f4 <SwitchClass+0x1c4>)
 80094ce:	4613      	mov	r3, r2
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	4413      	add	r3, r2
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	440b      	add	r3, r1
 80094d8:	33e9      	adds	r3, #233	; 0xe9
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d049      	beq.n	8009574 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80094e0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80094e4:	4943      	ldr	r1, [pc, #268]	; (80095f4 <SwitchClass+0x1c4>)
 80094e6:	4613      	mov	r3, r2
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	4413      	add	r3, r2
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	440b      	add	r3, r1
 80094f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80094f4:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d13c      	bne.n	8009574 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 80094fa:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80094fe:	493d      	ldr	r1, [pc, #244]	; (80095f4 <SwitchClass+0x1c4>)
 8009500:	4613      	mov	r3, r2
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	4413      	add	r3, r2
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	440b      	add	r3, r1
 800950a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a38      	ldr	r2, [pc, #224]	; (80095f4 <SwitchClass+0x1c4>)
 8009512:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8009514:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8009518:	4936      	ldr	r1, [pc, #216]	; (80095f4 <SwitchClass+0x1c4>)
 800951a:	4613      	mov	r3, r2
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	4413      	add	r3, r2
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	440b      	add	r3, r1
 8009524:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009528:	f993 3000 	ldrsb.w	r3, [r3]
 800952c:	b2da      	uxtb	r2, r3
 800952e:	4b31      	ldr	r3, [pc, #196]	; (80095f4 <SwitchClass+0x1c4>)
 8009530:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009534:	4b30      	ldr	r3, [pc, #192]	; (80095f8 <SwitchClass+0x1c8>)
 8009536:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 800953a:	4b2f      	ldr	r3, [pc, #188]	; (80095f8 <SwitchClass+0x1c8>)
 800953c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009540:	4b2c      	ldr	r3, [pc, #176]	; (80095f4 <SwitchClass+0x1c4>)
 8009542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009544:	4a2c      	ldr	r2, [pc, #176]	; (80095f8 <SwitchClass+0x1c8>)
 8009546:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800954a:	4b2a      	ldr	r3, [pc, #168]	; (80095f4 <SwitchClass+0x1c4>)
 800954c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009550:	4b29      	ldr	r3, [pc, #164]	; (80095f8 <SwitchClass+0x1c8>)
 8009552:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009556:	4b27      	ldr	r3, [pc, #156]	; (80095f4 <SwitchClass+0x1c4>)
 8009558:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800955c:	4b26      	ldr	r3, [pc, #152]	; (80095f8 <SwitchClass+0x1c8>)
 800955e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009562:	4b25      	ldr	r3, [pc, #148]	; (80095f8 <SwitchClass+0x1c8>)
 8009564:	2203      	movs	r2, #3
 8009566:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800956a:	4b23      	ldr	r3, [pc, #140]	; (80095f8 <SwitchClass+0x1c8>)
 800956c:	2201      	movs	r2, #1
 800956e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8009572:	e009      	b.n	8009588 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	3301      	adds	r3, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	73bb      	strb	r3, [r7, #14]
 8009580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009584:	2b00      	cmp	r3, #0
 8009586:	dd9f      	ble.n	80094c8 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8009588:	4b1b      	ldr	r3, [pc, #108]	; (80095f8 <SwitchClass+0x1c8>)
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8009590:	4b1a      	ldr	r3, [pc, #104]	; (80095fc <SwitchClass+0x1cc>)
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8009596:	f000 fce9 	bl	8009f6c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800959e:	e01e      	b.n	80095de <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 f8b1 	bl	800b70a <LoRaMacClassBSwitchClass>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d117      	bne.n	80095e2 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80095b2:	4a10      	ldr	r2, [pc, #64]	; (80095f4 <SwitchClass+0x1c4>)
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80095ba:	e012      	b.n	80095e2 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d111      	bne.n	80095e6 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 80095c2:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <SwitchClass+0x1c8>)
 80095c4:	2206      	movs	r2, #6
 80095c6:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 80095ca:	4a0a      	ldr	r2, [pc, #40]	; (80095f4 <SwitchClass+0x1c4>)
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80095d2:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <SwitchClass+0x1cc>)
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 80095dc:	e003      	b.n	80095e6 <SwitchClass+0x1b6>
            break;
 80095de:	bf00      	nop
 80095e0:	e002      	b.n	80095e8 <SwitchClass+0x1b8>
            break;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <SwitchClass+0x1b8>
            break;
 80095e6:	bf00      	nop
        }
    }

    return status;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bdb0      	pop	{r4, r5, r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20001684 	.word	0x20001684
 80095f8:	2000117c 	.word	0x2000117c
 80095fc:	08015034 	.word	0x08015034

08009600 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800960a:	4b10      	ldr	r3, [pc, #64]	; (800964c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800960c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009610:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009616:	230d      	movs	r3, #13
 8009618:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800961a:	4b0c      	ldr	r3, [pc, #48]	; (800964c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800961c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009624:	230e      	movs	r3, #14
 8009626:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009628:	4b08      	ldr	r3, [pc, #32]	; (800964c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800962a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800962e:	f107 0210 	add.w	r2, r7, #16
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f002 ff57 	bl	800c4e8 <RegionGetPhyParam>
 800963a:	4603      	mov	r3, r0
 800963c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	b2db      	uxtb	r3, r3
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20001684 	.word	0x20001684

08009650 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
 800965a:	460b      	mov	r3, r1
 800965c:	71bb      	strb	r3, [r7, #6]
 800965e:	4613      	mov	r3, r2
 8009660:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800966a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff ffc6 	bl	8009600 <GetMaxAppPayloadWithoutFOptsLength>
 8009674:	4603      	mov	r3, r0
 8009676:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	b29a      	uxth	r2, r3
 800967c:	797b      	ldrb	r3, [r7, #5]
 800967e:	b29b      	uxth	r3, r3
 8009680:	4413      	add	r3, r2
 8009682:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009684:	89ba      	ldrh	r2, [r7, #12]
 8009686:	89fb      	ldrh	r3, [r7, #14]
 8009688:	429a      	cmp	r2, r3
 800968a:	d804      	bhi.n	8009696 <ValidatePayloadLength+0x46>
 800968c:	89bb      	ldrh	r3, [r7, #12]
 800968e:	2bff      	cmp	r3, #255	; 0xff
 8009690:	d801      	bhi.n	8009696 <ValidatePayloadLength+0x46>
    {
        return true;
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <ValidatePayloadLength+0x48>
    }
    return false;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <Send>:
        }
    }
}

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08e      	sub	sp, #56	; 0x38
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	461a      	mov	r2, r3
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
 80096b0:	4613      	mov	r3, r2
 80096b2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80096b4:	2303      	movs	r3, #3
 80096b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80096ba:	4b65      	ldr	r3, [pc, #404]	; (8009850 <Send+0x1b0>)
 80096bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80096c4:	4b62      	ldr	r3, [pc, #392]	; (8009850 <Send+0x1b0>)
 80096c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80096ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80096ce:	4b60      	ldr	r3, [pc, #384]	; (8009850 <Send+0x1b0>)
 80096d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d2:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80096d4:	4b5e      	ldr	r3, [pc, #376]	; (8009850 <Send+0x1b0>)
 80096d6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80096de:	2307      	movs	r3, #7
 80096e0:	e0b1      	b.n	8009846 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80096e2:	4b5b      	ldr	r3, [pc, #364]	; (8009850 <Send+0x1b0>)
 80096e4:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80096ec:	4b58      	ldr	r3, [pc, #352]	; (8009850 <Send+0x1b0>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80096f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096fc:	f36f 0303 	bfc	r3, #0, #4
 8009700:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009704:	4b52      	ldr	r3, [pc, #328]	; (8009850 <Send+0x1b0>)
 8009706:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800970a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800970e:	f362 13c7 	bfi	r3, r2, #7, #1
 8009712:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009716:	4b4e      	ldr	r3, [pc, #312]	; (8009850 <Send+0x1b0>)
 8009718:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800971c:	2b01      	cmp	r3, #1
 800971e:	d106      	bne.n	800972e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8009720:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009724:	f043 0310 	orr.w	r3, r3, #16
 8009728:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800972c:	e005      	b.n	800973a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800972e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009732:	f36f 1304 	bfc	r3, #4, #1
 8009736:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800973a:	4b45      	ldr	r3, [pc, #276]	; (8009850 <Send+0x1b0>)
 800973c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8009744:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009748:	f043 0320 	orr.w	r3, r3, #32
 800974c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8009750:	2301      	movs	r3, #1
 8009752:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009754:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009758:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	bf14      	ite	ne
 8009762:	2301      	movne	r3, #1
 8009764:	2300      	moveq	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800976a:	4b39      	ldr	r3, [pc, #228]	; (8009850 <Send+0x1b0>)
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8009770:	4b37      	ldr	r3, [pc, #220]	; (8009850 <Send+0x1b0>)
 8009772:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8009776:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8009778:	4b35      	ldr	r3, [pc, #212]	; (8009850 <Send+0x1b0>)
 800977a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800977e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009780:	4b33      	ldr	r3, [pc, #204]	; (8009850 <Send+0x1b0>)
 8009782:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8009786:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800978a:	4b31      	ldr	r3, [pc, #196]	; (8009850 <Send+0x1b0>)
 800978c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8009790:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009794:	4b2e      	ldr	r3, [pc, #184]	; (8009850 <Send+0x1b0>)
 8009796:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800979a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800979e:	4b2c      	ldr	r3, [pc, #176]	; (8009850 <Send+0x1b0>)
 80097a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80097a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80097a8:	4b29      	ldr	r3, [pc, #164]	; (8009850 <Send+0x1b0>)
 80097aa:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80097ae:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80097b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097b4:	f107 0014 	add.w	r0, r7, #20
 80097b8:	4a26      	ldr	r2, [pc, #152]	; (8009854 <Send+0x1b4>)
 80097ba:	4927      	ldr	r1, [pc, #156]	; (8009858 <Send+0x1b8>)
 80097bc:	f001 ff3c 	bl	800b638 <LoRaMacAdrCalcNext>
 80097c0:	4603      	mov	r3, r0
 80097c2:	461a      	mov	r2, r3
 80097c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80097c8:	f362 1386 	bfi	r3, r2, #6, #1
 80097cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80097d0:	7afa      	ldrb	r2, [r7, #11]
 80097d2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80097d6:	893b      	ldrh	r3, [r7, #8]
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 fc09 	bl	8009ff4 <PrepareFrame>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80097e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <Send+0x158>
 80097f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097f4:	2b0a      	cmp	r3, #10
 80097f6:	d107      	bne.n	8009808 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80097f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f961 	bl	8009ac4 <ScheduleTx>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8009808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009810:	4a0f      	ldr	r2, [pc, #60]	; (8009850 <Send+0x1b0>)
 8009812:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009816:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800981a:	4a0d      	ldr	r2, [pc, #52]	; (8009850 <Send+0x1b0>)
 800981c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009820:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8009824:	e00d      	b.n	8009842 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8009826:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <Send+0x1b0>)
 8009828:	2200      	movs	r2, #0
 800982a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	4a07      	ldr	r2, [pc, #28]	; (8009850 <Send+0x1b0>)
 8009832:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009834:	f002 f93a 	bl	800baac <LoRaMacCommandsRemoveNoneStickyCmds>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800983e:	2313      	movs	r3, #19
 8009840:	e001      	b.n	8009846 <Send+0x1a6>
        }
    }
    return status;
 8009842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009846:	4618      	mov	r0, r3
 8009848:	3730      	adds	r7, #48	; 0x30
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20001684 	.word	0x20001684
 8009854:	200016bc 	.word	0x200016bc
 8009858:	200016bd 	.word	0x200016bd

0800985c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800986e:	2301      	movs	r3, #1
 8009870:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	2bff      	cmp	r3, #255	; 0xff
 8009876:	d11f      	bne.n	80098b8 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8009878:	2000      	movs	r0, #0
 800987a:	f7ff fdd9 	bl	8009430 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800987e:	4b15      	ldr	r3, [pc, #84]	; (80098d4 <SendReJoinReq+0x78>)
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <SendReJoinReq+0x78>)
 8009888:	4a13      	ldr	r2, [pc, #76]	; (80098d8 <SendReJoinReq+0x7c>)
 800988a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800988e:	4b11      	ldr	r3, [pc, #68]	; (80098d4 <SendReJoinReq+0x78>)
 8009890:	22ff      	movs	r2, #255	; 0xff
 8009892:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8009896:	7b3b      	ldrb	r3, [r7, #12]
 8009898:	f36f 1347 	bfc	r3, #5, #3
 800989c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800989e:	7b3a      	ldrb	r2, [r7, #12]
 80098a0:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <SendReJoinReq+0x78>)
 80098a2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80098a6:	480d      	ldr	r0, [pc, #52]	; (80098dc <SendReJoinReq+0x80>)
 80098a8:	f7fe fc4c 	bl	8008144 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80098ac:	480c      	ldr	r0, [pc, #48]	; (80098e0 <SendReJoinReq+0x84>)
 80098ae:	f7fe fc19 	bl	80080e4 <SecureElementGetDevEui>

            allowDelayedTx = false;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73fb      	strb	r3, [r7, #15]

            break;
 80098b6:	e002      	b.n	80098be <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80098b8:	2302      	movs	r3, #2
 80098ba:	73bb      	strb	r3, [r7, #14]
            break;
 80098bc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f8ff 	bl	8009ac4 <ScheduleTx>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73bb      	strb	r3, [r7, #14]
    return status;
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	2000117c 	.word	0x2000117c
 80098d8:	2000117e 	.word	0x2000117e
 80098dc:	2000128a 	.word	0x2000128a
 80098e0:	20001292 	.word	0x20001292

080098e4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80098e8:	f001 fee3 	bl	800b6b2 <LoRaMacClassBIsBeaconExpected>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80098f2:	230e      	movs	r3, #14
 80098f4:	e013      	b.n	800991e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80098f6:	4b0b      	ldr	r3, [pc, #44]	; (8009924 <CheckForClassBCollision+0x40>)
 80098f8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10d      	bne.n	800991c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009900:	f001 fede 	bl	800b6c0 <LoRaMacClassBIsPingExpected>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800990a:	230f      	movs	r3, #15
 800990c:	e007      	b.n	800991e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800990e:	f001 fede 	bl	800b6ce <LoRaMacClassBIsMulticastExpected>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009918:	230f      	movs	r3, #15
 800991a:	e000      	b.n	800991e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20001684 	.word	0x20001684

08009928 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8009928:	b590      	push	{r4, r7, lr}
 800992a:	b083      	sub	sp, #12
 800992c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800992e:	4b2d      	ldr	r3, [pc, #180]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 8009930:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8009934:	4b2b      	ldr	r3, [pc, #172]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 8009936:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800993a:	4b2a      	ldr	r3, [pc, #168]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 800993c:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8009940:	4b28      	ldr	r3, [pc, #160]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 8009942:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8009946:	4b27      	ldr	r3, [pc, #156]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 8009948:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800994c:	b25b      	sxtb	r3, r3
 800994e:	f002 fea9 	bl	800c6a4 <RegionApplyDrOffset>
 8009952:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009954:	b259      	sxtb	r1, r3
 8009956:	4b23      	ldr	r3, [pc, #140]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 8009958:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800995c:	4b21      	ldr	r3, [pc, #132]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 800995e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009960:	4821      	ldr	r0, [pc, #132]	; (80099e8 <ComputeRxWindowParameters+0xc0>)
 8009962:	9000      	str	r0, [sp, #0]
 8009964:	4620      	mov	r0, r4
 8009966:	f002 fe13 	bl	800c590 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800996a:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 800996c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8009970:	4b1c      	ldr	r3, [pc, #112]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 8009972:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009976:	b259      	sxtb	r1, r3
 8009978:	4b1a      	ldr	r3, [pc, #104]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 800997a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800997e:	4b19      	ldr	r3, [pc, #100]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 8009980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009982:	4c1a      	ldr	r4, [pc, #104]	; (80099ec <ComputeRxWindowParameters+0xc4>)
 8009984:	9400      	str	r4, [sp, #0]
 8009986:	f002 fe03 	bl	800c590 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800998a:	4b16      	ldr	r3, [pc, #88]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 800998c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998e:	4a18      	ldr	r2, [pc, #96]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 8009990:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8009994:	4413      	add	r3, r2
 8009996:	4a16      	ldr	r2, [pc, #88]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 8009998:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800999c:	4b11      	ldr	r3, [pc, #68]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 800999e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a0:	4a13      	ldr	r2, [pc, #76]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 80099a2:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80099a6:	4413      	add	r3, r2
 80099a8:	4a11      	ldr	r2, [pc, #68]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 80099aa:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80099ae:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 80099b0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	d011      	beq.n	80099dc <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80099b8:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 80099ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099bc:	4a0c      	ldr	r2, [pc, #48]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 80099be:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80099c2:	4413      	add	r3, r2
 80099c4:	4a0a      	ldr	r2, [pc, #40]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 80099c6:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80099ca:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <ComputeRxWindowParameters+0xbc>)
 80099cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099ce:	4a08      	ldr	r2, [pc, #32]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 80099d0:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80099d4:	4413      	add	r3, r2
 80099d6:	4a06      	ldr	r2, [pc, #24]	; (80099f0 <ComputeRxWindowParameters+0xc8>)
 80099d8:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80099dc:	bf00      	nop
 80099de:	3704      	adds	r7, #4
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd90      	pop	{r4, r7, pc}
 80099e4:	20001684 	.word	0x20001684
 80099e8:	20001534 	.word	0x20001534
 80099ec:	20001548 	.word	0x20001548
 80099f0:	2000117c 	.word	0x2000117c

080099f4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <VerifyTxFrame+0x58>)
 8009a00:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01b      	beq.n	8009a40 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009a08:	1d3b      	adds	r3, r7, #4
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f002 f872 	bl	800baf4 <LoRaMacCommandsGetSizeSerializedCmds>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009a16:	2313      	movs	r3, #19
 8009a18:	e013      	b.n	8009a42 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009a1a:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <VerifyTxFrame+0x5c>)
 8009a1c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009a20:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <VerifyTxFrame+0x58>)
 8009a22:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fe10 	bl	8009650 <ValidatePayloadLength>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f083 0301 	eor.w	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	e000      	b.n	8009a42 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20001684 	.word	0x20001684
 8009a50:	2000117c 	.word	0x2000117c

08009a54 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8009a5a:	4b18      	ldr	r3, [pc, #96]	; (8009abc <SerializeTxFrame+0x68>)
 8009a5c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <SerializeTxFrame+0x16>
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d011      	beq.n	8009a8c <SerializeTxFrame+0x38>
 8009a68:	e021      	b.n	8009aae <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009a6a:	4815      	ldr	r0, [pc, #84]	; (8009ac0 <SerializeTxFrame+0x6c>)
 8009a6c:	f002 fbc3 	bl	800c1f6 <LoRaMacSerializerJoinRequest>
 8009a70:	4603      	mov	r3, r0
 8009a72:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a7a:	2311      	movs	r3, #17
 8009a7c:	e01a      	b.n	8009ab4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009a7e:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <SerializeTxFrame+0x68>)
 8009a80:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <SerializeTxFrame+0x68>)
 8009a88:	801a      	strh	r2, [r3, #0]
            break;
 8009a8a:	e012      	b.n	8009ab2 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009a8c:	480c      	ldr	r0, [pc, #48]	; (8009ac0 <SerializeTxFrame+0x6c>)
 8009a8e:	f002 fc34 	bl	800c2fa <LoRaMacSerializerData>
 8009a92:	4603      	mov	r3, r0
 8009a94:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a9c:	2311      	movs	r3, #17
 8009a9e:	e009      	b.n	8009ab4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009aa0:	4b06      	ldr	r3, [pc, #24]	; (8009abc <SerializeTxFrame+0x68>)
 8009aa2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	4b04      	ldr	r3, [pc, #16]	; (8009abc <SerializeTxFrame+0x68>)
 8009aaa:	801a      	strh	r2, [r3, #0]
            break;
 8009aac:	e001      	b.n	8009ab2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e000      	b.n	8009ab4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	2000117c 	.word	0x2000117c
 8009ac0:	20001284 	.word	0x20001284

08009ac4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b090      	sub	sp, #64	; 0x40
 8009ac8:	af02      	add	r7, sp, #8
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8009ad4:	f7ff ff06 	bl	80098e4 <CheckForClassBCollision>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8009ade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <ScheduleTx+0x28>
    {
        return status;
 8009ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aea:	e092      	b.n	8009c12 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8009aec:	f000 f8fe 	bl	8009cec <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8009af0:	f7ff ffb0 	bl	8009a54 <SerializeTxFrame>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8009afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <ScheduleTx+0x44>
    {
        return status;
 8009b02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b06:	e084      	b.n	8009c12 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009b08:	4b44      	ldr	r3, [pc, #272]	; (8009c1c <ScheduleTx+0x158>)
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b0e:	4b43      	ldr	r3, [pc, #268]	; (8009c1c <ScheduleTx+0x158>)
 8009b10:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8009b14:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009b16:	4b41      	ldr	r3, [pc, #260]	; (8009c1c <ScheduleTx+0x158>)
 8009b18:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009b1c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b22:	4618      	mov	r0, r3
 8009b24:	f007 fc5a 	bl	80113dc <SysTimeGetMcuTime>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	4b3c      	ldr	r3, [pc, #240]	; (8009c1c <ScheduleTx+0x158>)
 8009b2c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8009b30:	9200      	str	r2, [sp, #0]
 8009b32:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009b36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009b3a:	ca06      	ldmia	r2, {r1, r2}
 8009b3c:	f007 fc16 	bl	801136c <SysTimeSub>
 8009b40:	f107 0320 	add.w	r3, r7, #32
 8009b44:	463a      	mov	r2, r7
 8009b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b4a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8009b4e:	4b33      	ldr	r3, [pc, #204]	; (8009c1c <ScheduleTx+0x158>)
 8009b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b52:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8009b5e:	4b30      	ldr	r3, [pc, #192]	; (8009c20 <ScheduleTx+0x15c>)
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009b64:	4b2d      	ldr	r3, [pc, #180]	; (8009c1c <ScheduleTx+0x158>)
 8009b66:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d104      	bne.n	8009b78 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8009b74:	2300      	movs	r3, #0
 8009b76:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009b78:	4b28      	ldr	r3, [pc, #160]	; (8009c1c <ScheduleTx+0x158>)
 8009b7a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009b7e:	f107 0114 	add.w	r1, r7, #20
 8009b82:	4b28      	ldr	r3, [pc, #160]	; (8009c24 <ScheduleTx+0x160>)
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	4b28      	ldr	r3, [pc, #160]	; (8009c28 <ScheduleTx+0x164>)
 8009b88:	4a28      	ldr	r2, [pc, #160]	; (8009c2c <ScheduleTx+0x168>)
 8009b8a:	f002 fd61 	bl	800c650 <RegionNextChannel>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8009b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d025      	beq.n	8009be8 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8009b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba0:	2b0b      	cmp	r3, #11
 8009ba2:	d11e      	bne.n	8009be2 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009ba4:	4b1e      	ldr	r3, [pc, #120]	; (8009c20 <ScheduleTx+0x15c>)
 8009ba6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d01c      	beq.n	8009be8 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d013      	beq.n	8009bdc <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009bb4:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <ScheduleTx+0x15c>)
 8009bb6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009bba:	f043 0320 	orr.w	r3, r3, #32
 8009bbe:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <ScheduleTx+0x15c>)
 8009bc0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009bc4:	4b16      	ldr	r3, [pc, #88]	; (8009c20 <ScheduleTx+0x15c>)
 8009bc6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4818      	ldr	r0, [pc, #96]	; (8009c30 <ScheduleTx+0x16c>)
 8009bce:	f007 fd9f 	bl	8011710 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8009bd2:	4817      	ldr	r0, [pc, #92]	; (8009c30 <ScheduleTx+0x16c>)
 8009bd4:	f007 fcbe 	bl	8011554 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e01a      	b.n	8009c12 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8009bdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009be0:	e017      	b.n	8009c12 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8009be2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009be6:	e014      	b.n	8009c12 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8009be8:	f7ff fe9e 	bl	8009928 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8009bec:	f7ff ff02 	bl	80099f4 <VerifyTxFrame>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8009bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <ScheduleTx+0x140>
    {
        return status;
 8009bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c02:	e006      	b.n	8009c12 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8009c04:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <ScheduleTx+0x15c>)
 8009c06:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fb0e 	bl	800a22c <SendFrameOnChannel>
 8009c10:	4603      	mov	r3, r0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3738      	adds	r7, #56	; 0x38
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20001684 	.word	0x20001684
 8009c20:	2000117c 	.word	0x2000117c
 8009c24:	200016b4 	.word	0x200016b4
 8009c28:	20001600 	.word	0x20001600
 8009c2c:	2000158d 	.word	0x2000158d
 8009c30:	200014e4 	.word	0x200014e4

08009c34 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	460a      	mov	r2, r1
 8009c3e:	71fb      	strb	r3, [r7, #7]
 8009c40:	4613      	mov	r3, r2
 8009c42:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8009c44:	2313      	movs	r3, #19
 8009c46:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8009c4c:	4b25      	ldr	r3, [pc, #148]	; (8009ce4 <SecureFrame+0xb0>)
 8009c4e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <SecureFrame+0x28>
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d011      	beq.n	8009c7e <SecureFrame+0x4a>
 8009c5a:	e03b      	b.n	8009cd4 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009c5c:	4822      	ldr	r0, [pc, #136]	; (8009ce8 <SecureFrame+0xb4>)
 8009c5e:	f002 f9d3 	bl	800c008 <LoRaMacCryptoPrepareJoinRequest>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009c6c:	2311      	movs	r3, #17
 8009c6e:	e034      	b.n	8009cda <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009c70:	4b1c      	ldr	r3, [pc, #112]	; (8009ce4 <SecureFrame+0xb0>)
 8009c72:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	4b1a      	ldr	r3, [pc, #104]	; (8009ce4 <SecureFrame+0xb0>)
 8009c7a:	801a      	strh	r2, [r3, #0]
            break;
 8009c7c:	e02c      	b.n	8009cd8 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009c7e:	f107 0308 	add.w	r3, r7, #8
 8009c82:	4618      	mov	r0, r3
 8009c84:	f002 f970 	bl	800bf68 <LoRaMacCryptoGetFCntUp>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009c8e:	2312      	movs	r3, #18
 8009c90:	e023      	b.n	8009cda <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8009c92:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <SecureFrame+0xb0>)
 8009c94:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <SecureFrame+0x72>
 8009c9c:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <SecureFrame+0xb0>)
 8009c9e:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d902      	bls.n	8009cac <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8009cac:	68b8      	ldr	r0, [r7, #8]
 8009cae:	79ba      	ldrb	r2, [r7, #6]
 8009cb0:	79f9      	ldrb	r1, [r7, #7]
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <SecureFrame+0xb4>)
 8009cb4:	f002 f9ec 	bl	800c090 <LoRaMacCryptoSecureMessage>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009cc2:	2311      	movs	r3, #17
 8009cc4:	e009      	b.n	8009cda <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009cc6:	4b07      	ldr	r3, [pc, #28]	; (8009ce4 <SecureFrame+0xb0>)
 8009cc8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <SecureFrame+0xb0>)
 8009cd0:	801a      	strh	r2, [r3, #0]
            break;
 8009cd2:	e001      	b.n	8009cd8 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e000      	b.n	8009cda <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	2000117c 	.word	0x2000117c
 8009ce8:	20001284 	.word	0x20001284

08009cec <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8009cf0:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <CalculateBackOff+0x2c>)
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009cf8:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <CalculateBackOff+0x2c>)
 8009cfa:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	4a06      	ldr	r2, [pc, #24]	; (8009d1c <CalculateBackOff+0x30>)
 8009d02:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 8009d06:	fb02 f303 	mul.w	r3, r2, r3
 8009d0a:	4a03      	ldr	r2, [pc, #12]	; (8009d18 <CalculateBackOff+0x2c>)
 8009d0c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8009d0e:	bf00      	nop
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20001684 	.word	0x20001684
 8009d1c:	2000117c 	.word	0x2000117c

08009d20 <ResetMacParameters>:
        }
    }
}

static void ResetMacParameters( bool isRejoin )
{
 8009d20:	b5b0      	push	{r4, r5, r7, lr}
 8009d22:	b090      	sub	sp, #64	; 0x40
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	f083 0301 	eor.w	r3, r3, #1
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8009d36:	4b80      	ldr	r3, [pc, #512]	; (8009f38 <ResetMacParameters+0x218>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009d3e:	4b7e      	ldr	r3, [pc, #504]	; (8009f38 <ResetMacParameters+0x218>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8009d44:	4b7d      	ldr	r3, [pc, #500]	; (8009f3c <ResetMacParameters+0x21c>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8009d4c:	4b7b      	ldr	r3, [pc, #492]	; (8009f3c <ResetMacParameters+0x21c>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009d54:	4b79      	ldr	r3, [pc, #484]	; (8009f3c <ResetMacParameters+0x21c>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8009d5c:	4b77      	ldr	r3, [pc, #476]	; (8009f3c <ResetMacParameters+0x21c>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8009d64:	4b74      	ldr	r3, [pc, #464]	; (8009f38 <ResetMacParameters+0x218>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009d6c:	4b72      	ldr	r3, [pc, #456]	; (8009f38 <ResetMacParameters+0x218>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009d74:	4b70      	ldr	r3, [pc, #448]	; (8009f38 <ResetMacParameters+0x218>)
 8009d76:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8009d7a:	4b6f      	ldr	r3, [pc, #444]	; (8009f38 <ResetMacParameters+0x218>)
 8009d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009d80:	4b6d      	ldr	r3, [pc, #436]	; (8009f38 <ResetMacParameters+0x218>)
 8009d82:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8009d86:	4b6c      	ldr	r3, [pc, #432]	; (8009f38 <ResetMacParameters+0x218>)
 8009d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009d8c:	4b6a      	ldr	r3, [pc, #424]	; (8009f38 <ResetMacParameters+0x218>)
 8009d8e:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8009d92:	4b69      	ldr	r3, [pc, #420]	; (8009f38 <ResetMacParameters+0x218>)
 8009d94:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009d98:	4b67      	ldr	r3, [pc, #412]	; (8009f38 <ResetMacParameters+0x218>)
 8009d9a:	4a67      	ldr	r2, [pc, #412]	; (8009f38 <ResetMacParameters+0x218>)
 8009d9c:	336c      	adds	r3, #108	; 0x6c
 8009d9e:	32b4      	adds	r2, #180	; 0xb4
 8009da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009da4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009da8:	4b63      	ldr	r3, [pc, #396]	; (8009f38 <ResetMacParameters+0x218>)
 8009daa:	4a63      	ldr	r2, [pc, #396]	; (8009f38 <ResetMacParameters+0x218>)
 8009dac:	3374      	adds	r3, #116	; 0x74
 8009dae:	32bc      	adds	r2, #188	; 0xbc
 8009db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009db4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009db8:	4b5f      	ldr	r3, [pc, #380]	; (8009f38 <ResetMacParameters+0x218>)
 8009dba:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8009dbe:	4b5e      	ldr	r3, [pc, #376]	; (8009f38 <ResetMacParameters+0x218>)
 8009dc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009dc4:	4b5c      	ldr	r3, [pc, #368]	; (8009f38 <ResetMacParameters+0x218>)
 8009dc6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8009dca:	4b5b      	ldr	r3, [pc, #364]	; (8009f38 <ResetMacParameters+0x218>)
 8009dcc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009dd0:	4b59      	ldr	r3, [pc, #356]	; (8009f38 <ResetMacParameters+0x218>)
 8009dd2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009dd6:	4a58      	ldr	r2, [pc, #352]	; (8009f38 <ResetMacParameters+0x218>)
 8009dd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009ddc:	4b56      	ldr	r3, [pc, #344]	; (8009f38 <ResetMacParameters+0x218>)
 8009dde:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009de2:	4a55      	ldr	r2, [pc, #340]	; (8009f38 <ResetMacParameters+0x218>)
 8009de4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8009de8:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <ResetMacParameters+0x218>)
 8009dea:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8009dee:	4b52      	ldr	r3, [pc, #328]	; (8009f38 <ResetMacParameters+0x218>)
 8009df0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8009df4:	4b50      	ldr	r3, [pc, #320]	; (8009f38 <ResetMacParameters+0x218>)
 8009df6:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8009dfa:	4b4f      	ldr	r3, [pc, #316]	; (8009f38 <ResetMacParameters+0x218>)
 8009dfc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8009e00:	4b4e      	ldr	r3, [pc, #312]	; (8009f3c <ResetMacParameters+0x21c>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8009e08:	4b4b      	ldr	r3, [pc, #300]	; (8009f38 <ResetMacParameters+0x218>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8009e10:	4b49      	ldr	r3, [pc, #292]	; (8009f38 <ResetMacParameters+0x218>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8009e18:	4b47      	ldr	r3, [pc, #284]	; (8009f38 <ResetMacParameters+0x218>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 8009e20:	4b45      	ldr	r3, [pc, #276]	; (8009f38 <ResetMacParameters+0x218>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8009e28:	4b43      	ldr	r3, [pc, #268]	; (8009f38 <ResetMacParameters+0x218>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8009e30:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <ResetMacParameters+0x218>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8009e38:	4b3f      	ldr	r3, [pc, #252]	; (8009f38 <ResetMacParameters+0x218>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8009e40:	4b3d      	ldr	r3, [pc, #244]	; (8009f38 <ResetMacParameters+0x218>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8009e48:	4b3b      	ldr	r3, [pc, #236]	; (8009f38 <ResetMacParameters+0x218>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009e50:	2301      	movs	r3, #1
 8009e52:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009e54:	4b3a      	ldr	r3, [pc, #232]	; (8009f40 <ResetMacParameters+0x220>)
 8009e56:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009e58:	4b3a      	ldr	r3, [pc, #232]	; (8009f44 <ResetMacParameters+0x224>)
 8009e5a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009e5c:	4b36      	ldr	r3, [pc, #216]	; (8009f38 <ResetMacParameters+0x218>)
 8009e5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009e62:	f107 020c 	add.w	r2, r7, #12
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f002 fb55 	bl	800c518 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8009e6e:	4b33      	ldr	r3, [pc, #204]	; (8009f3c <ResetMacParameters+0x21c>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009e76:	4b31      	ldr	r3, [pc, #196]	; (8009f3c <ResetMacParameters+0x21c>)
 8009e78:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8009e7c:	4b2f      	ldr	r3, [pc, #188]	; (8009f3c <ResetMacParameters+0x21c>)
 8009e7e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009e82:	4b2d      	ldr	r3, [pc, #180]	; (8009f38 <ResetMacParameters+0x218>)
 8009e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e86:	4a2d      	ldr	r2, [pc, #180]	; (8009f3c <ResetMacParameters+0x21c>)
 8009e88:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009e8c:	4b2a      	ldr	r3, [pc, #168]	; (8009f38 <ResetMacParameters+0x218>)
 8009e8e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009e92:	4b2a      	ldr	r3, [pc, #168]	; (8009f3c <ResetMacParameters+0x21c>)
 8009e94:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009e98:	4b27      	ldr	r3, [pc, #156]	; (8009f38 <ResetMacParameters+0x218>)
 8009e9a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8009e9e:	4b27      	ldr	r3, [pc, #156]	; (8009f3c <ResetMacParameters+0x21c>)
 8009ea0:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009ea4:	4b25      	ldr	r3, [pc, #148]	; (8009f3c <ResetMacParameters+0x21c>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009eac:	4b23      	ldr	r3, [pc, #140]	; (8009f3c <ResetMacParameters+0x21c>)
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009eb4:	4a21      	ldr	r2, [pc, #132]	; (8009f3c <ResetMacParameters+0x21c>)
 8009eb6:	4b21      	ldr	r3, [pc, #132]	; (8009f3c <ResetMacParameters+0x21c>)
 8009eb8:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8009ebc:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8009ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009ec8:	4b1c      	ldr	r3, [pc, #112]	; (8009f3c <ResetMacParameters+0x21c>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009ed0:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <ResetMacParameters+0x21c>)
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8009edc:	2300      	movs	r3, #0
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8009ee0:	4b16      	ldr	r3, [pc, #88]	; (8009f3c <ResetMacParameters+0x21c>)
 8009ee2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d009      	beq.n	8009efe <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009eea:	4b14      	ldr	r3, [pc, #80]	; (8009f3c <ResetMacParameters+0x21c>)
 8009eec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009ef4:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <ResetMacParameters+0x21c>)
 8009ef6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009efe:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <ResetMacParameters+0x228>)
 8009f00:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <ResetMacParameters+0x22c>)
 8009f04:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009f06:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <ResetMacParameters+0x230>)
 8009f08:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <ResetMacParameters+0x234>)
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009f0e:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <ResetMacParameters+0x238>)
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009f12:	4b12      	ldr	r3, [pc, #72]	; (8009f5c <ResetMacParameters+0x23c>)
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009f16:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <ResetMacParameters+0x240>)
 8009f18:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009f1a:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <ResetMacParameters+0x244>)
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009f1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009f22:	f107 0318 	add.w	r3, r7, #24
 8009f26:	4a10      	ldr	r2, [pc, #64]	; (8009f68 <ResetMacParameters+0x248>)
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 fb9d 	bl	800b668 <LoRaMacClassBInit>
}
 8009f2e:	bf00      	nop
 8009f30:	3740      	adds	r7, #64	; 0x40
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bdb0      	pop	{r4, r5, r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20001684 	.word	0x20001684
 8009f3c:	2000117c 	.word	0x2000117c
 8009f40:	200018a4 	.word	0x200018a4
 8009f44:	20001938 	.word	0x20001938
 8009f48:	200015d8 	.word	0x200015d8
 8009f4c:	20001594 	.word	0x20001594
 8009f50:	200015c4 	.word	0x200015c4
 8009f54:	200015fd 	.word	0x200015fd
 8009f58:	20001768 	.word	0x20001768
 8009f5c:	200016cc 	.word	0x200016cc
 8009f60:	200016d0 	.word	0x200016d0
 8009f64:	2000176c 	.word	0x2000176c
 8009f68:	20001dd4 	.word	0x20001dd4

08009f6c <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 8009f6c:	b590      	push	{r4, r7, lr}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009f72:	4b1b      	ldr	r3, [pc, #108]	; (8009fe0 <OpenContinuousRxCWindow+0x74>)
 8009f74:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009f78:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <OpenContinuousRxCWindow+0x74>)
 8009f7a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009f7e:	b259      	sxtb	r1, r3
 8009f80:	4b17      	ldr	r3, [pc, #92]	; (8009fe0 <OpenContinuousRxCWindow+0x74>)
 8009f82:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8009f86:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <OpenContinuousRxCWindow+0x74>)
 8009f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8a:	4c16      	ldr	r4, [pc, #88]	; (8009fe4 <OpenContinuousRxCWindow+0x78>)
 8009f8c:	9400      	str	r4, [sp, #0]
 8009f8e:	f002 faff 	bl	800c590 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <OpenContinuousRxCWindow+0x7c>)
 8009f94:	2202      	movs	r2, #2
 8009f96:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <OpenContinuousRxCWindow+0x7c>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009fa2:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <OpenContinuousRxCWindow+0x74>)
 8009fa4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009fa8:	4a10      	ldr	r2, [pc, #64]	; (8009fec <OpenContinuousRxCWindow+0x80>)
 8009faa:	490e      	ldr	r1, [pc, #56]	; (8009fe4 <OpenContinuousRxCWindow+0x78>)
 8009fac:	4618      	mov	r0, r3
 8009fae:	f002 fb09 	bl	800c5c4 <RegionRxConfig>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00f      	beq.n	8009fd8 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <OpenContinuousRxCWindow+0x7c>)
 8009fba:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <OpenContinuousRxCWindow+0x7c>)
 8009fc0:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <OpenContinuousRxCWindow+0x84>)
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc8:	2000      	movs	r0, #0
 8009fca:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009fcc:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <OpenContinuousRxCWindow+0x7c>)
 8009fce:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <OpenContinuousRxCWindow+0x7c>)
 8009fd4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8009fd8:	bf00      	nop
 8009fda:	3704      	adds	r7, #4
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd90      	pop	{r4, r7, pc}
 8009fe0:	20001684 	.word	0x20001684
 8009fe4:	2000155c 	.word	0x2000155c
 8009fe8:	2000117c 	.word	0x2000117c
 8009fec:	20001598 	.word	0x20001598
 8009ff0:	08015034 	.word	0x08015034

08009ff4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	4613      	mov	r3, r2
 800a002:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800a004:	4b82      	ldr	r3, [pc, #520]	; (800a210 <PrepareFrame+0x21c>)
 800a006:	2200      	movs	r2, #0
 800a008:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800a00a:	4b81      	ldr	r3, [pc, #516]	; (800a210 <PrepareFrame+0x21c>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a028:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a02a:	461a      	mov	r2, r3
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	4879      	ldr	r0, [pc, #484]	; (800a214 <PrepareFrame+0x220>)
 800a030:	f003 ff91 	bl	800df56 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a036:	b2da      	uxtb	r2, r3
 800a038:	4b75      	ldr	r3, [pc, #468]	; (800a210 <PrepareFrame+0x21c>)
 800a03a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	781a      	ldrb	r2, [r3, #0]
 800a042:	4b73      	ldr	r3, [pc, #460]	; (800a210 <PrepareFrame+0x21c>)
 800a044:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b07      	cmp	r3, #7
 800a052:	f000 80b9 	beq.w	800a1c8 <PrepareFrame+0x1d4>
 800a056:	2b07      	cmp	r3, #7
 800a058:	f300 80d0 	bgt.w	800a1fc <PrepareFrame+0x208>
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d006      	beq.n	800a06e <PrepareFrame+0x7a>
 800a060:	2b04      	cmp	r3, #4
 800a062:	f040 80cb 	bne.w	800a1fc <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800a066:	4b6a      	ldr	r3, [pc, #424]	; (800a210 <PrepareFrame+0x21c>)
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a06e:	4b68      	ldr	r3, [pc, #416]	; (800a210 <PrepareFrame+0x21c>)
 800a070:	2204      	movs	r2, #4
 800a072:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a076:	4b66      	ldr	r3, [pc, #408]	; (800a210 <PrepareFrame+0x21c>)
 800a078:	4a67      	ldr	r2, [pc, #412]	; (800a218 <PrepareFrame+0x224>)
 800a07a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a07e:	4b64      	ldr	r3, [pc, #400]	; (800a210 <PrepareFrame+0x21c>)
 800a080:	22ff      	movs	r2, #255	; 0xff
 800a082:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	4b61      	ldr	r3, [pc, #388]	; (800a210 <PrepareFrame+0x21c>)
 800a08c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a090:	4a5f      	ldr	r2, [pc, #380]	; (800a210 <PrepareFrame+0x21c>)
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a098:	4b60      	ldr	r3, [pc, #384]	; (800a21c <PrepareFrame+0x228>)
 800a09a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a09e:	4a5c      	ldr	r2, [pc, #368]	; (800a210 <PrepareFrame+0x21c>)
 800a0a0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	4b59      	ldr	r3, [pc, #356]	; (800a210 <PrepareFrame+0x21c>)
 800a0aa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a0ae:	4b58      	ldr	r3, [pc, #352]	; (800a210 <PrepareFrame+0x21c>)
 800a0b0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800a0b4:	4b56      	ldr	r3, [pc, #344]	; (800a210 <PrepareFrame+0x21c>)
 800a0b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a0ba:	4b55      	ldr	r3, [pc, #340]	; (800a210 <PrepareFrame+0x21c>)
 800a0bc:	4a55      	ldr	r2, [pc, #340]	; (800a214 <PrepareFrame+0x220>)
 800a0be:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a0c2:	f107 0318 	add.w	r3, r7, #24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 ff4e 	bl	800bf68 <LoRaMacCryptoGetFCntUp>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a0d2:	2312      	movs	r3, #18
 800a0d4:	e098      	b.n	800a208 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	4b4d      	ldr	r3, [pc, #308]	; (800a210 <PrepareFrame+0x21c>)
 800a0dc:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 800a0e0:	4b4b      	ldr	r3, [pc, #300]	; (800a210 <PrepareFrame+0x21c>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800a0e8:	4b49      	ldr	r3, [pc, #292]	; (800a210 <PrepareFrame+0x21c>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	4a47      	ldr	r2, [pc, #284]	; (800a210 <PrepareFrame+0x21c>)
 800a0f4:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a0f8:	f107 0314 	add.w	r3, r7, #20
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fcf9 	bl	800baf4 <LoRaMacCommandsGetSizeSerializedCmds>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a108:	2313      	movs	r3, #19
 800a10a:	e07d      	b.n	800a208 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d076      	beq.n	800a200 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a112:	4b42      	ldr	r3, [pc, #264]	; (800a21c <PrepareFrame+0x228>)
 800a114:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff fa71 	bl	8009600 <GetMaxAppPayloadWithoutFOptsLength>
 800a11e:	4603      	mov	r3, r0
 800a120:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a122:	4b3b      	ldr	r3, [pc, #236]	; (800a210 <PrepareFrame+0x21c>)
 800a124:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01d      	beq.n	800a168 <PrepareFrame+0x174>
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b0f      	cmp	r3, #15
 800a130:	d81a      	bhi.n	800a168 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a132:	f107 0314 	add.w	r3, r7, #20
 800a136:	4a3a      	ldr	r2, [pc, #232]	; (800a220 <PrepareFrame+0x22c>)
 800a138:	4619      	mov	r1, r3
 800a13a:	200f      	movs	r0, #15
 800a13c:	f001 fcf0 	bl	800bb20 <LoRaMacCommandsSerializeCmds>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a146:	2313      	movs	r3, #19
 800a148:	e05e      	b.n	800a208 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f003 030f 	and.w	r3, r3, #15
 800a150:	b2d9      	uxtb	r1, r3
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	7813      	ldrb	r3, [r2, #0]
 800a156:	f361 0303 	bfi	r3, r1, #0, #4
 800a15a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	4b2b      	ldr	r3, [pc, #172]	; (800a210 <PrepareFrame+0x21c>)
 800a162:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800a166:	e04b      	b.n	800a200 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a168:	4b29      	ldr	r3, [pc, #164]	; (800a210 <PrepareFrame+0x21c>)
 800a16a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d010      	beq.n	800a194 <PrepareFrame+0x1a0>
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2b0f      	cmp	r3, #15
 800a176:	d90d      	bls.n	800a194 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a178:	7ffb      	ldrb	r3, [r7, #31]
 800a17a:	f107 0114 	add.w	r1, r7, #20
 800a17e:	4a29      	ldr	r2, [pc, #164]	; (800a224 <PrepareFrame+0x230>)
 800a180:	4618      	mov	r0, r3
 800a182:	f001 fccd 	bl	800bb20 <LoRaMacCommandsSerializeCmds>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a18c:	2313      	movs	r3, #19
 800a18e:	e03b      	b.n	800a208 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800a190:	230a      	movs	r3, #10
 800a192:	e039      	b.n	800a208 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a194:	7ffb      	ldrb	r3, [r7, #31]
 800a196:	f107 0114 	add.w	r1, r7, #20
 800a19a:	4a22      	ldr	r2, [pc, #136]	; (800a224 <PrepareFrame+0x230>)
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fcbf 	bl	800bb20 <LoRaMacCommandsSerializeCmds>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a1a8:	2313      	movs	r3, #19
 800a1aa:	e02d      	b.n	800a208 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a1ac:	4b18      	ldr	r3, [pc, #96]	; (800a210 <PrepareFrame+0x21c>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a1b4:	4b16      	ldr	r3, [pc, #88]	; (800a210 <PrepareFrame+0x21c>)
 800a1b6:	4a1b      	ldr	r2, [pc, #108]	; (800a224 <PrepareFrame+0x230>)
 800a1b8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	4b13      	ldr	r3, [pc, #76]	; (800a210 <PrepareFrame+0x21c>)
 800a1c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800a1c6:	e01b      	b.n	800a200 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d01a      	beq.n	800a204 <PrepareFrame+0x210>
 800a1ce:	4b10      	ldr	r3, [pc, #64]	; (800a210 <PrepareFrame+0x21c>)
 800a1d0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d015      	beq.n	800a204 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a1d8:	4813      	ldr	r0, [pc, #76]	; (800a228 <PrepareFrame+0x234>)
 800a1da:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <PrepareFrame+0x21c>)
 800a1dc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	f003 feb6 	bl	800df56 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <PrepareFrame+0x21c>)
 800a1ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	4b06      	ldr	r3, [pc, #24]	; (800a210 <PrepareFrame+0x21c>)
 800a1f8:	801a      	strh	r2, [r3, #0]
            }
            break;
 800a1fa:	e003      	b.n	800a204 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e003      	b.n	800a208 <PrepareFrame+0x214>
            break;
 800a200:	bf00      	nop
 800a202:	e000      	b.n	800a206 <PrepareFrame+0x212>
            break;
 800a204:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3720      	adds	r7, #32
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	2000117c 	.word	0x2000117c
 800a214:	200012b4 	.word	0x200012b4
 800a218:	2000117e 	.word	0x2000117e
 800a21c:	20001684 	.word	0x20001684
 800a220:	20001294 	.word	0x20001294
 800a224:	20001604 	.word	0x20001604
 800a228:	2000117f 	.word	0x2000117f

0800a22c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08a      	sub	sp, #40	; 0x28
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a236:	2303      	movs	r3, #3
 800a238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a244:	4b48      	ldr	r3, [pc, #288]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a246:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a24a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a24c:	4b46      	ldr	r3, [pc, #280]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a24e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a252:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a254:	4b44      	ldr	r3, [pc, #272]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a25a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a25c:	4b42      	ldr	r3, [pc, #264]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a262:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800a264:	4b41      	ldr	r3, [pc, #260]	; (800a36c <SendFrameOnChannel+0x140>)
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800a26a:	4b3f      	ldr	r3, [pc, #252]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a26c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a270:	f107 020f 	add.w	r2, r7, #15
 800a274:	f107 0110 	add.w	r1, r7, #16
 800a278:	4b3d      	ldr	r3, [pc, #244]	; (800a370 <SendFrameOnChannel+0x144>)
 800a27a:	f002 f9b8 	bl	800c5ee <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a27e:	4b3b      	ldr	r3, [pc, #236]	; (800a36c <SendFrameOnChannel+0x140>)
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a286:	4b38      	ldr	r3, [pc, #224]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a288:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	4b37      	ldr	r3, [pc, #220]	; (800a36c <SendFrameOnChannel+0x140>)
 800a290:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800a294:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a298:	4b34      	ldr	r3, [pc, #208]	; (800a36c <SendFrameOnChannel+0x140>)
 800a29a:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	4a32      	ldr	r2, [pc, #200]	; (800a36c <SendFrameOnChannel+0x140>)
 800a2a2:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a2a6:	4b31      	ldr	r3, [pc, #196]	; (800a36c <SendFrameOnChannel+0x140>)
 800a2a8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a2ac:	4a2f      	ldr	r2, [pc, #188]	; (800a36c <SendFrameOnChannel+0x140>)
 800a2ae:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a2b2:	4b2e      	ldr	r3, [pc, #184]	; (800a36c <SendFrameOnChannel+0x140>)
 800a2b4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a2b8:	4a2c      	ldr	r2, [pc, #176]	; (800a36c <SendFrameOnChannel+0x140>)
 800a2ba:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800a2be:	f001 fa0d 	bl	800b6dc <LoRaMacClassBIsBeaconModeActive>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800a2c8:	4b28      	ldr	r3, [pc, #160]	; (800a36c <SendFrameOnChannel+0x140>)
 800a2ca:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 fa3a 	bl	800b748 <LoRaMacClassBIsUplinkCollision>
 800a2d4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800a2dc:	2310      	movs	r3, #16
 800a2de:	e03e      	b.n	800a35e <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a2e0:	4b21      	ldr	r3, [pc, #132]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a2e2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d101      	bne.n	800a2ee <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800a2ea:	f001 fa37 	bl	800b75c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800a2ee:	f001 fa06 	bl	800b6fe <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800a2f2:	4b1d      	ldr	r3, [pc, #116]	; (800a368 <SendFrameOnChannel+0x13c>)
 800a2f4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	4a1c      	ldr	r2, [pc, #112]	; (800a36c <SendFrameOnChannel+0x140>)
 800a2fc:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 800a300:	4611      	mov	r1, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fc96 	bl	8009c34 <SecureFrame>
 800a308:	4603      	mov	r3, r0
 800a30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800a30e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <SendFrameOnChannel+0xf0>
    {
        return status;
 800a316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a31a:	e020      	b.n	800a35e <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a31c:	4b13      	ldr	r3, [pc, #76]	; (800a36c <SendFrameOnChannel+0x140>)
 800a31e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a322:	f043 0302 	orr.w	r3, r3, #2
 800a326:	4a11      	ldr	r2, [pc, #68]	; (800a36c <SendFrameOnChannel+0x140>)
 800a328:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800a32c:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <SendFrameOnChannel+0x140>)
 800a32e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800a332:	f083 0301 	eor.w	r3, r3, #1
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d007      	beq.n	800a34c <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 800a33c:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <SendFrameOnChannel+0x140>)
 800a33e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800a342:	3301      	adds	r3, #1
 800a344:	b2da      	uxtb	r2, r3
 800a346:	4b09      	ldr	r3, [pc, #36]	; (800a36c <SendFrameOnChannel+0x140>)
 800a348:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <SendFrameOnChannel+0x148>)
 800a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a350:	4a06      	ldr	r2, [pc, #24]	; (800a36c <SendFrameOnChannel+0x140>)
 800a352:	8812      	ldrh	r2, [r2, #0]
 800a354:	b2d2      	uxtb	r2, r2
 800a356:	4611      	mov	r1, r2
 800a358:	4807      	ldr	r0, [pc, #28]	; (800a378 <SendFrameOnChannel+0x14c>)
 800a35a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3728      	adds	r7, #40	; 0x28
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20001684 	.word	0x20001684
 800a36c:	2000117c 	.word	0x2000117c
 800a370:	20001590 	.word	0x20001590
 800a374:	08015034 	.word	0x08015034
 800a378:	2000117e 	.word	0x2000117e

0800a37c <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800a386:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <SetTxContinuousWave+0x64>)
 800a388:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800a38c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a38e:	4b15      	ldr	r3, [pc, #84]	; (800a3e4 <SetTxContinuousWave+0x68>)
 800a390:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a394:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a396:	4b13      	ldr	r3, [pc, #76]	; (800a3e4 <SetTxContinuousWave+0x68>)
 800a398:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a39c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a39e:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <SetTxContinuousWave+0x68>)
 800a3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3a4:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <SetTxContinuousWave+0x68>)
 800a3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ac:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <SetTxContinuousWave+0x68>)
 800a3b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a3b8:	f107 0208 	add.w	r2, r7, #8
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f002 f95e 	bl	800c680 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a3c4:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <SetTxContinuousWave+0x64>)
 800a3c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a3ca:	f043 0302 	orr.w	r3, r3, #2
 800a3ce:	4a04      	ldr	r2, [pc, #16]	; (800a3e0 <SetTxContinuousWave+0x64>)
 800a3d0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	2000117c 	.word	0x2000117c
 800a3e4:	20001684 	.word	0x20001684

0800a3e8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	80fb      	strh	r3, [r7, #6]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800a3f8:	4b09      	ldr	r3, [pc, #36]	; (800a420 <SetTxContinuousWave1+0x38>)
 800a3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800a400:	88fa      	ldrh	r2, [r7, #6]
 800a402:	6838      	ldr	r0, [r7, #0]
 800a404:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a406:	4b07      	ldr	r3, [pc, #28]	; (800a424 <SetTxContinuousWave1+0x3c>)
 800a408:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a40c:	f043 0302 	orr.w	r3, r3, #2
 800a410:	4a04      	ldr	r2, [pc, #16]	; (800a424 <SetTxContinuousWave1+0x3c>)
 800a412:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	08015034 	.word	0x08015034
 800a424:	2000117c 	.word	0x2000117c

0800a428 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	46bd      	mov	sp, r7
 800a432:	bc80      	pop	{r7}
 800a434:	4770      	bx	lr
	...

0800a438 <LoRaMacStart>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacStart( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800a43c:	4b04      	ldr	r3, [pc, #16]	; (800a450 <LoRaMacStart+0x18>)
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800a444:	f7fe ffb0 	bl	80093a8 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	2000117c 	.word	0x2000117c

0800a454 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	; 0x28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a460:	4b3e      	ldr	r3, [pc, #248]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a464:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a466:	4b3d      	ldr	r3, [pc, #244]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a468:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800a46c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a46e:	4b3b      	ldr	r3, [pc, #236]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a470:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800a474:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a480:	2303      	movs	r3, #3
 800a482:	e066      	b.n	800a552 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800a484:	4b35      	ldr	r3, [pc, #212]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a486:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800a48a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a48c:	2300      	movs	r3, #0
 800a48e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a490:	4b32      	ldr	r3, [pc, #200]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a492:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a496:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a498:	4b30      	ldr	r3, [pc, #192]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a49e:	4b2f      	ldr	r3, [pc, #188]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a4a0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800a4a4:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a4a6:	4b2d      	ldr	r3, [pc, #180]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a4a8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800a4ac:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a4ae:	4b2b      	ldr	r3, [pc, #172]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a4b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a4b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a4b8:	4b28      	ldr	r3, [pc, #160]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a4ba:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a4be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a4c2:	4b26      	ldr	r3, [pc, #152]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a4c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800a4cc:	4b23      	ldr	r3, [pc, #140]	; (800a55c <LoRaMacQueryTxPossible+0x108>)
 800a4ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a4d6:	f107 0310 	add.w	r3, r7, #16
 800a4da:	f107 020e 	add.w	r2, r7, #14
 800a4de:	f107 010f 	add.w	r1, r7, #15
 800a4e2:	f107 0014 	add.w	r0, r7, #20
 800a4e6:	f001 f8a7 	bl	800b638 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff f886 	bl	8009600 <GetMaxAppPayloadWithoutFOptsLength>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a4fc:	f107 0308 	add.w	r3, r7, #8
 800a500:	4618      	mov	r0, r3
 800a502:	f001 faf7 	bl	800baf4 <LoRaMacCommandsGetSizeSerializedCmds>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a50c:	2313      	movs	r3, #19
 800a50e:	e020      	b.n	800a552 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2b0f      	cmp	r3, #15
 800a514:	d819      	bhi.n	800a54a <LoRaMacQueryTxPossible+0xf6>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	461a      	mov	r2, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d313      	bcc.n	800a54a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	785a      	ldrb	r2, [r3, #1]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	785b      	ldrb	r3, [r3, #1]
 800a536:	4619      	mov	r1, r3
 800a538:	79fa      	ldrb	r2, [r7, #7]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	4413      	add	r3, r2
 800a53e:	4299      	cmp	r1, r3
 800a540:	d301      	bcc.n	800a546 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	e005      	b.n	800a552 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a546:	2308      	movs	r3, #8
 800a548:	e003      	b.n	800a552 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a550:	2308      	movs	r3, #8
    }
}
 800a552:	4618      	mov	r0, r3
 800a554:	3728      	adds	r7, #40	; 0x28
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20001684 	.word	0x20001684

0800a560 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800a560:	b590      	push	{r4, r7, lr}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a572:	2303      	movs	r3, #3
 800a574:	e1a4      	b.n	800a8c0 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	2b3f      	cmp	r3, #63	; 0x3f
 800a57c:	f200 8199 	bhi.w	800a8b2 <LoRaMacMibGetRequestConfirm+0x352>
 800a580:	a201      	add	r2, pc, #4	; (adr r2, 800a588 <LoRaMacMibGetRequestConfirm+0x28>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a689 	.word	0x0800a689
 800a58c:	0800a695 	.word	0x0800a695
 800a590:	0800a6a1 	.word	0x0800a6a1
 800a594:	0800a6ad 	.word	0x0800a6ad
 800a598:	0800a6b9 	.word	0x0800a6b9
 800a59c:	0800a6c5 	.word	0x0800a6c5
 800a5a0:	0800a6d1 	.word	0x0800a6d1
 800a5a4:	0800a8b3 	.word	0x0800a8b3
 800a5a8:	0800a8b3 	.word	0x0800a8b3
 800a5ac:	0800a8b3 	.word	0x0800a8b3
 800a5b0:	0800a8b3 	.word	0x0800a8b3
 800a5b4:	0800a8b3 	.word	0x0800a8b3
 800a5b8:	0800a8b3 	.word	0x0800a8b3
 800a5bc:	0800a8b3 	.word	0x0800a8b3
 800a5c0:	0800a8b3 	.word	0x0800a8b3
 800a5c4:	0800a6e5 	.word	0x0800a6e5
 800a5c8:	0800a6f1 	.word	0x0800a6f1
 800a5cc:	0800a6fd 	.word	0x0800a6fd
 800a5d0:	0800a71f 	.word	0x0800a71f
 800a5d4:	0800a731 	.word	0x0800a731
 800a5d8:	0800a743 	.word	0x0800a743
 800a5dc:	0800a755 	.word	0x0800a755
 800a5e0:	0800a789 	.word	0x0800a789
 800a5e4:	0800a767 	.word	0x0800a767
 800a5e8:	0800a7ab 	.word	0x0800a7ab
 800a5ec:	0800a7b7 	.word	0x0800a7b7
 800a5f0:	0800a7c1 	.word	0x0800a7c1
 800a5f4:	0800a7cb 	.word	0x0800a7cb
 800a5f8:	0800a7d5 	.word	0x0800a7d5
 800a5fc:	0800a7df 	.word	0x0800a7df
 800a600:	0800a7e9 	.word	0x0800a7e9
 800a604:	0800a7f5 	.word	0x0800a7f5
 800a608:	0800a80d 	.word	0x0800a80d
 800a60c:	0800a801 	.word	0x0800a801
 800a610:	0800a819 	.word	0x0800a819
 800a614:	0800a823 	.word	0x0800a823
 800a618:	0800a82f 	.word	0x0800a82f
 800a61c:	0800a84b 	.word	0x0800a84b
 800a620:	0800a83b 	.word	0x0800a83b
 800a624:	0800a843 	.word	0x0800a843
 800a628:	0800a8b3 	.word	0x0800a8b3
 800a62c:	0800a857 	.word	0x0800a857
 800a630:	0800a8b3 	.word	0x0800a8b3
 800a634:	0800a8b3 	.word	0x0800a8b3
 800a638:	0800a8b3 	.word	0x0800a8b3
 800a63c:	0800a8b3 	.word	0x0800a8b3
 800a640:	0800a8b3 	.word	0x0800a8b3
 800a644:	0800a8b3 	.word	0x0800a8b3
 800a648:	0800a8b3 	.word	0x0800a8b3
 800a64c:	0800a8b3 	.word	0x0800a8b3
 800a650:	0800a8b3 	.word	0x0800a8b3
 800a654:	0800a8b3 	.word	0x0800a8b3
 800a658:	0800a8b3 	.word	0x0800a8b3
 800a65c:	0800a8b3 	.word	0x0800a8b3
 800a660:	0800a8b3 	.word	0x0800a8b3
 800a664:	0800a8b3 	.word	0x0800a8b3
 800a668:	0800a8b3 	.word	0x0800a8b3
 800a66c:	0800a86b 	.word	0x0800a86b
 800a670:	0800a877 	.word	0x0800a877
 800a674:	0800a883 	.word	0x0800a883
 800a678:	0800a88f 	.word	0x0800a88f
 800a67c:	0800a89b 	.word	0x0800a89b
 800a680:	0800a8a7 	.word	0x0800a8a7
 800a684:	0800a8ad 	.word	0x0800a8ad
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a688:	4b8f      	ldr	r3, [pc, #572]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a68a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	711a      	strb	r2, [r3, #4]
            break;
 800a692:	e114      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a694:	4b8c      	ldr	r3, [pc, #560]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a696:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	711a      	strb	r2, [r3, #4]
            break;
 800a69e:	e10e      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fd fd1d 	bl	80080e4 <SecureElementGetDevEui>
            break;
 800a6aa:	e108      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fd fd47 	bl	8008144 <SecureElementGetJoinEui>
            break;
 800a6b6:	e102      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a6b8:	4b83      	ldr	r3, [pc, #524]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a6ba:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	711a      	strb	r2, [r3, #4]
            break;
 800a6c2:	e0fc      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a6c4:	4b80      	ldr	r3, [pc, #512]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a6c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	605a      	str	r2, [r3, #4]
            break;
 800a6ce:	e0f6      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800a6d0:	4b7d      	ldr	r3, [pc, #500]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a6d2:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f7fd fd63 	bl	80081a8 <SecureElementGetDevAddr>
            break;
 800a6e2:	e0ec      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a6e4:	4b78      	ldr	r3, [pc, #480]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a6e6:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	711a      	strb	r2, [r3, #4]
            break;
 800a6ee:	e0e6      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a6f0:	4b75      	ldr	r3, [pc, #468]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a6f2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	711a      	strb	r2, [r3, #4]
            break;
 800a6fa:	e0e0      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800a6fc:	231d      	movs	r3, #29
 800a6fe:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a700:	4b71      	ldr	r3, [pc, #452]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a702:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a706:	f107 0210 	add.w	r2, r7, #16
 800a70a:	4611      	mov	r1, r2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 feeb 	bl	800c4e8 <RegionGetPhyParam>
 800a712:	4603      	mov	r3, r0
 800a714:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	605a      	str	r2, [r3, #4]
            break;
 800a71c:	e0cf      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a69      	ldr	r2, [pc, #420]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a722:	3304      	adds	r3, #4
 800a724:	326c      	adds	r2, #108	; 0x6c
 800a726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a72a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800a72e:	e0c6      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a65      	ldr	r2, [pc, #404]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a734:	3304      	adds	r3, #4
 800a736:	32b4      	adds	r2, #180	; 0xb4
 800a738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a73c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800a740:	e0bd      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a60      	ldr	r2, [pc, #384]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a746:	3304      	adds	r3, #4
 800a748:	3274      	adds	r2, #116	; 0x74
 800a74a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a74e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800a752:	e0b4      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a5c      	ldr	r2, [pc, #368]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a758:	3304      	adds	r3, #4
 800a75a:	32bc      	adds	r2, #188	; 0xbc
 800a75c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a760:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800a764:	e0ab      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a766:	231b      	movs	r3, #27
 800a768:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a76a:	4b57      	ldr	r3, [pc, #348]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a76c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a770:	f107 0210 	add.w	r2, r7, #16
 800a774:	4611      	mov	r1, r2
 800a776:	4618      	mov	r0, r3
 800a778:	f001 feb6 	bl	800c4e8 <RegionGetPhyParam>
 800a77c:	4603      	mov	r3, r0
 800a77e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	605a      	str	r2, [r3, #4]
            break;
 800a786:	e09a      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a788:	231a      	movs	r3, #26
 800a78a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a78c:	4b4e      	ldr	r3, [pc, #312]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a78e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a792:	f107 0210 	add.w	r2, r7, #16
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 fea5 	bl	800c4e8 <RegionGetPhyParam>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	605a      	str	r2, [r3, #4]
            break;
 800a7a8:	e089      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a7aa:	4b47      	ldr	r3, [pc, #284]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7ac:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	711a      	strb	r2, [r3, #4]
            break;
 800a7b4:	e083      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a7b6:	4b44      	ldr	r3, [pc, #272]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	605a      	str	r2, [r3, #4]
            break;
 800a7be:	e07e      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a7c0:	4b41      	ldr	r3, [pc, #260]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	605a      	str	r2, [r3, #4]
            break;
 800a7c8:	e079      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a7ca:	4b3f      	ldr	r3, [pc, #252]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	605a      	str	r2, [r3, #4]
            break;
 800a7d2:	e074      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a7d4:	4b3c      	ldr	r3, [pc, #240]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	605a      	str	r2, [r3, #4]
            break;
 800a7dc:	e06f      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a7de:	4b3a      	ldr	r3, [pc, #232]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	605a      	str	r2, [r3, #4]
            break;
 800a7e6:	e06a      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a7e8:	4b37      	ldr	r3, [pc, #220]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7ea:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	711a      	strb	r2, [r3, #4]
            break;
 800a7f2:	e064      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a7f4:	4b34      	ldr	r3, [pc, #208]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a7f6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	711a      	strb	r2, [r3, #4]
            break;
 800a7fe:	e05e      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a800:	4b31      	ldr	r3, [pc, #196]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a802:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	711a      	strb	r2, [r3, #4]
            break;
 800a80a:	e058      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a80c:	4b2e      	ldr	r3, [pc, #184]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a80e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	711a      	strb	r2, [r3, #4]
            break;
 800a816:	e052      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a818:	4b2b      	ldr	r3, [pc, #172]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a81a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	605a      	str	r2, [r3, #4]
            break;
 800a820:	e04d      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a822:	4b29      	ldr	r3, [pc, #164]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a824:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	711a      	strb	r2, [r3, #4]
            break;
 800a82c:	e047      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a82e:	4b26      	ldr	r3, [pc, #152]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a830:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	605a      	str	r2, [r3, #4]
            break;
 800a838:	e041      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a22      	ldr	r2, [pc, #136]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a83e:	605a      	str	r2, [r3, #4]
            break;
 800a840:	e03d      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800a848:	e039      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a84a:	4b1f      	ldr	r3, [pc, #124]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a84c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	605a      	str	r2, [r3, #4]
            break;
 800a854:	e033      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a1b      	ldr	r2, [pc, #108]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a85a:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 800a85e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a860:	687c      	ldr	r4, [r7, #4]
 800a862:	f001 ff41 	bl	800c6e8 <RegionGetVersion>
 800a866:	60a0      	str	r0, [r4, #8]
            break;
 800a868:	e029      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a86a:	4b17      	ldr	r3, [pc, #92]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a86c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	605a      	str	r2, [r3, #4]
            break;
 800a874:	e023      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a878:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	809a      	strh	r2, [r3, #4]
            break;
 800a880:	e01d      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a882:	4b11      	ldr	r3, [pc, #68]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a884:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	809a      	strh	r2, [r3, #4]
            break;
 800a88c:	e017      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800a88e:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a890:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	809a      	strh	r2, [r3, #4]
            break;
 800a898:	e011      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800a89a:	4b0b      	ldr	r3, [pc, #44]	; (800a8c8 <LoRaMacMibGetRequestConfirm+0x368>)
 800a89c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	809a      	strh	r2, [r3, #4]
            break;
 800a8a4:	e00b      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800a8a6:	2318      	movs	r3, #24
 800a8a8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800a8aa:	e008      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800a8ac:	2318      	movs	r3, #24
 800a8ae:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800a8b0:	e005      	b.n	800a8be <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 ff34 	bl	800b720 <LoRaMacClassBMibGetRequestConfirm>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75fb      	strb	r3, [r7, #23]
            break;
 800a8bc:	bf00      	nop
        }
    }
    return status;
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd90      	pop	{r4, r7, pc}
 800a8c8:	20001684 	.word	0x20001684

0800a8cc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e382      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a8e2:	4bbb      	ldr	r3, [pc, #748]	; (800abd0 <LoRaMacMibSetRequestConfirm+0x304>)
 800a8e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a8e8:	f003 0302 	and.w	r3, r3, #2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e379      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b3f      	cmp	r3, #63	; 0x3f
 800a8fa:	f200 8353 	bhi.w	800afa4 <LoRaMacMibSetRequestConfirm+0x6d8>
 800a8fe:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <LoRaMacMibSetRequestConfirm+0x38>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800aa05 	.word	0x0800aa05
 800a908:	0800aa15 	.word	0x0800aa15
 800a90c:	0800aa2f 	.word	0x0800aa2f
 800a910:	0800aa47 	.word	0x0800aa47
 800a914:	0800aa5f 	.word	0x0800aa5f
 800a918:	0800aa6b 	.word	0x0800aa6b
 800a91c:	0800aa77 	.word	0x0800aa77
 800a920:	0800aaa1 	.word	0x0800aaa1
 800a924:	0800aac7 	.word	0x0800aac7
 800a928:	0800aaed 	.word	0x0800aaed
 800a92c:	0800ab13 	.word	0x0800ab13
 800a930:	0800ab39 	.word	0x0800ab39
 800a934:	0800ab5f 	.word	0x0800ab5f
 800a938:	0800ab85 	.word	0x0800ab85
 800a93c:	0800abab 	.word	0x0800abab
 800a940:	0800abd9 	.word	0x0800abd9
 800a944:	0800abf9 	.word	0x0800abf9
 800a948:	0800afa5 	.word	0x0800afa5
 800a94c:	0800ac05 	.word	0x0800ac05
 800a950:	0800ac75 	.word	0x0800ac75
 800a954:	0800acb5 	.word	0x0800acb5
 800a958:	0800ad17 	.word	0x0800ad17
 800a95c:	0800ad87 	.word	0x0800ad87
 800a960:	0800ad57 	.word	0x0800ad57
 800a964:	0800adb7 	.word	0x0800adb7
 800a968:	0800add9 	.word	0x0800add9
 800a96c:	0800ade3 	.word	0x0800ade3
 800a970:	0800aded 	.word	0x0800aded
 800a974:	0800adf7 	.word	0x0800adf7
 800a978:	0800ae01 	.word	0x0800ae01
 800a97c:	0800ae0b 	.word	0x0800ae0b
 800a980:	0800ae3d 	.word	0x0800ae3d
 800a984:	0800aeb1 	.word	0x0800aeb1
 800a988:	0800ae77 	.word	0x0800ae77
 800a98c:	0800aee3 	.word	0x0800aee3
 800a990:	0800aef9 	.word	0x0800aef9
 800a994:	0800af11 	.word	0x0800af11
 800a998:	0800af1d 	.word	0x0800af1d
 800a99c:	0800af29 	.word	0x0800af29
 800a9a0:	0800afa5 	.word	0x0800afa5
 800a9a4:	0800af33 	.word	0x0800af33
 800a9a8:	0800afa5 	.word	0x0800afa5
 800a9ac:	0800afa5 	.word	0x0800afa5
 800a9b0:	0800afa5 	.word	0x0800afa5
 800a9b4:	0800afa5 	.word	0x0800afa5
 800a9b8:	0800afa5 	.word	0x0800afa5
 800a9bc:	0800afa5 	.word	0x0800afa5
 800a9c0:	0800afa5 	.word	0x0800afa5
 800a9c4:	0800afa5 	.word	0x0800afa5
 800a9c8:	0800afa5 	.word	0x0800afa5
 800a9cc:	0800afa5 	.word	0x0800afa5
 800a9d0:	0800afa5 	.word	0x0800afa5
 800a9d4:	0800afa5 	.word	0x0800afa5
 800a9d8:	0800afa5 	.word	0x0800afa5
 800a9dc:	0800afa5 	.word	0x0800afa5
 800a9e0:	0800afa5 	.word	0x0800afa5
 800a9e4:	0800afa5 	.word	0x0800afa5
 800a9e8:	0800af5d 	.word	0x0800af5d
 800a9ec:	0800af69 	.word	0x0800af69
 800a9f0:	0800af75 	.word	0x0800af75
 800a9f4:	0800af81 	.word	0x0800af81
 800a9f8:	0800af8d 	.word	0x0800af8d
 800a9fc:	0800af99 	.word	0x0800af99
 800aa00:	0800af9f 	.word	0x0800af9f
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	791b      	ldrb	r3, [r3, #4]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe fd11 	bl	8009430 <SwitchClass>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	75fb      	strb	r3, [r7, #23]
            break;
 800aa12:	e2e8      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	791b      	ldrb	r3, [r3, #4]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d005      	beq.n	800aa28 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	791a      	ldrb	r2, [r3, #4]
 800aa20:	4b6c      	ldr	r3, [pc, #432]	; (800abd4 <LoRaMacMibSetRequestConfirm+0x308>)
 800aa22:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800aa26:	e2de      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	75fb      	strb	r3, [r7, #23]
            break;
 800aa2c:	e2db      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fd fb3e 	bl	80080b4 <SecureElementSetDevEui>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 82b8 	beq.w	800afb0 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa40:	2303      	movs	r3, #3
 800aa42:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800aa44:	e2b4      	b.n	800afb0 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fd fb62 	bl	8008114 <SecureElementSetJoinEui>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 82ae 	beq.w	800afb4 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800aa5c:	e2aa      	b.n	800afb4 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	791a      	ldrb	r2, [r3, #4]
 800aa62:	4b5c      	ldr	r3, [pc, #368]	; (800abd4 <LoRaMacMibSetRequestConfirm+0x308>)
 800aa64:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 800aa68:	e2bd      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	4a59      	ldr	r2, [pc, #356]	; (800abd4 <LoRaMacMibSetRequestConfirm+0x308>)
 800aa70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 800aa74:	e2b7      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800aa76:	4b57      	ldr	r3, [pc, #348]	; (800abd4 <LoRaMacMibSetRequestConfirm+0x308>)
 800aa78:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f7fd fb76 	bl	8008174 <SecureElementSetDevAddr>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 800aa92:	e2a8      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4a4e      	ldr	r2, [pc, #312]	; (800abd4 <LoRaMacMibSetRequestConfirm+0x308>)
 800aa9a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 800aa9e:	e2a2      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	4619      	mov	r1, r3
 800aaae:	2000      	movs	r0, #0
 800aab0:	f001 fa72 	bl	800bf98 <LoRaMacCryptoSetKey>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 827e 	beq.w	800afb8 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aabc:	2311      	movs	r3, #17
 800aabe:	e293      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aac0:	2303      	movs	r3, #3
 800aac2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800aac4:	e278      	b.n	800afb8 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	4619      	mov	r1, r3
 800aad4:	2001      	movs	r0, #1
 800aad6:	f001 fa5f 	bl	800bf98 <LoRaMacCryptoSetKey>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 826d 	beq.w	800afbc <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aae2:	2311      	movs	r3, #17
 800aae4:	e280      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aae6:	2303      	movs	r3, #3
 800aae8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800aaea:	e267      	b.n	800afbc <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00b      	beq.n	800ab0c <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	2008      	movs	r0, #8
 800aafc:	f001 fa4c 	bl	800bf98 <LoRaMacCryptoSetKey>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 825c 	beq.w	800afc0 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab08:	2311      	movs	r3, #17
 800ab0a:	e26d      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ab10:	e256      	b.n	800afc0 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00b      	beq.n	800ab32 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	2009      	movs	r0, #9
 800ab22:	f001 fa39 	bl	800bf98 <LoRaMacCryptoSetKey>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 824b 	beq.w	800afc4 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab2e:	2311      	movs	r3, #17
 800ab30:	e25a      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab32:	2303      	movs	r3, #3
 800ab34:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ab36:	e245      	b.n	800afc4 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	4619      	mov	r1, r3
 800ab46:	200c      	movs	r0, #12
 800ab48:	f001 fa26 	bl	800bf98 <LoRaMacCryptoSetKey>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f000 823a 	beq.w	800afc8 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab54:	2311      	movs	r3, #17
 800ab56:	e247      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ab5c:	e234      	b.n	800afc8 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00b      	beq.n	800ab7e <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	200d      	movs	r0, #13
 800ab6e:	f001 fa13 	bl	800bf98 <LoRaMacCryptoSetKey>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8229 	beq.w	800afcc <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab7a:	2311      	movs	r3, #17
 800ab7c:	e234      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ab82:	e223      	b.n	800afcc <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	4619      	mov	r1, r3
 800ab92:	200e      	movs	r0, #14
 800ab94:	f001 fa00 	bl	800bf98 <LoRaMacCryptoSetKey>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 8218 	beq.w	800afd0 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aba0:	2311      	movs	r3, #17
 800aba2:	e221      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aba4:	2303      	movs	r3, #3
 800aba6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800aba8:	e212      	b.n	800afd0 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00b      	beq.n	800abca <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	4619      	mov	r1, r3
 800abb8:	200f      	movs	r0, #15
 800abba:	f001 f9ed 	bl	800bf98 <LoRaMacCryptoSetKey>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 8207 	beq.w	800afd4 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800abc6:	2311      	movs	r3, #17
 800abc8:	e20e      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800abca:	2303      	movs	r3, #3
 800abcc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800abce:	e201      	b.n	800afd4 <LoRaMacMibSetRequestConfirm+0x708>
 800abd0:	2000117c 	.word	0x2000117c
 800abd4:	20001684 	.word	0x20001684
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	791a      	ldrb	r2, [r3, #4]
 800abdc:	4bb2      	ldr	r3, [pc, #712]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800abde:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800abe2:	4bb2      	ldr	r3, [pc, #712]	; (800aeac <LoRaMacMibSetRequestConfirm+0x5e0>)
 800abe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe6:	4ab0      	ldr	r2, [pc, #704]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800abe8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
            Radio.Sleep( );
 800abf0:	4bae      	ldr	r3, [pc, #696]	; (800aeac <LoRaMacMibSetRequestConfirm+0x5e0>)
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	4798      	blx	r3
            break;
 800abf6:	e1f6      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	791a      	ldrb	r2, [r3, #4]
 800abfc:	4baa      	ldr	r3, [pc, #680]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800abfe:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 800ac02:	e1f0      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	7a1b      	ldrb	r3, [r3, #8]
 800ac08:	b25b      	sxtb	r3, r3
 800ac0a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ac0c:	4ba6      	ldr	r3, [pc, #664]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ac0e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ac12:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ac14:	4ba4      	ldr	r3, [pc, #656]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ac16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac1a:	f107 0108 	add.w	r1, r7, #8
 800ac1e:	2207      	movs	r2, #7
 800ac20:	4618      	mov	r0, r3
 800ac22:	f001 fc8b 	bl	800c53c <RegionVerify>
 800ac26:	4603      	mov	r3, r0
 800ac28:	f083 0301 	eor.w	r3, r3, #1
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac32:	2303      	movs	r3, #3
 800ac34:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 800ac36:	e1d6      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ac3e:	4b9a      	ldr	r3, [pc, #616]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ac40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac44:	f107 0108 	add.w	r1, r7, #8
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 fc76 	bl	800c53c <RegionVerify>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f083 0301 	eor.w	r3, r3, #1
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	75fb      	strb	r3, [r7, #23]
            break;
 800ac60:	e1c1      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ac62:	4b91      	ldr	r3, [pc, #580]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	336c      	adds	r3, #108	; 0x6c
 800ac68:	3204      	adds	r2, #4
 800ac6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac6e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800ac72:	e1b8      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	7a1b      	ldrb	r3, [r3, #8]
 800ac78:	b25b      	sxtb	r3, r3
 800ac7a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ac7c:	4b8a      	ldr	r3, [pc, #552]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ac7e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ac82:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ac84:	4b88      	ldr	r3, [pc, #544]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ac86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac8a:	f107 0108 	add.w	r1, r7, #8
 800ac8e:	2207      	movs	r2, #7
 800ac90:	4618      	mov	r0, r3
 800ac92:	f001 fc53 	bl	800c53c <RegionVerify>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d008      	beq.n	800acae <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ac9c:	4b82      	ldr	r3, [pc, #520]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	33b4      	adds	r3, #180	; 0xb4
 800aca2:	3204      	adds	r2, #4
 800aca4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aca8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800acac:	e19b      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acae:	2303      	movs	r3, #3
 800acb0:	75fb      	strb	r3, [r7, #23]
            break;
 800acb2:	e198      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7a1b      	ldrb	r3, [r3, #8]
 800acb8:	b25b      	sxtb	r3, r3
 800acba:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800acbc:	4b7a      	ldr	r3, [pc, #488]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800acbe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800acc2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800acc4:	4b78      	ldr	r3, [pc, #480]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800acc6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800acca:	f107 0108 	add.w	r1, r7, #8
 800acce:	2207      	movs	r2, #7
 800acd0:	4618      	mov	r0, r3
 800acd2:	f001 fc33 	bl	800c53c <RegionVerify>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d019      	beq.n	800ad10 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800acdc:	4b72      	ldr	r3, [pc, #456]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	3374      	adds	r3, #116	; 0x74
 800ace2:	3204      	adds	r2, #4
 800ace4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ace8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800acec:	4b6e      	ldr	r3, [pc, #440]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800acee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	f040 8170 	bne.w	800afd8 <LoRaMacMibSetRequestConfirm+0x70c>
 800acf8:	4b6b      	ldr	r3, [pc, #428]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800acfa:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 816a 	beq.w	800afd8 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800ad04:	4b69      	ldr	r3, [pc, #420]	; (800aeac <LoRaMacMibSetRequestConfirm+0x5e0>)
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800ad0a:	f7ff f92f 	bl	8009f6c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ad0e:	e163      	b.n	800afd8 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad10:	2303      	movs	r3, #3
 800ad12:	75fb      	strb	r3, [r7, #23]
            break;
 800ad14:	e160      	b.n	800afd8 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	7a1b      	ldrb	r3, [r3, #8]
 800ad1a:	b25b      	sxtb	r3, r3
 800ad1c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ad1e:	4b62      	ldr	r3, [pc, #392]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ad20:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ad24:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ad26:	4b60      	ldr	r3, [pc, #384]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ad28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ad2c:	f107 0108 	add.w	r1, r7, #8
 800ad30:	2207      	movs	r2, #7
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 fc02 	bl	800c53c <RegionVerify>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d008      	beq.n	800ad50 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ad3e:	4b5a      	ldr	r3, [pc, #360]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	33bc      	adds	r3, #188	; 0xbc
 800ad44:	3204      	adds	r2, #4
 800ad46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad4a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ad4e:	e14a      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad50:	2303      	movs	r3, #3
 800ad52:	75fb      	strb	r3, [r7, #23]
            break;
 800ad54:	e147      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ad60:	4b51      	ldr	r3, [pc, #324]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ad62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ad66:	f107 020c 	add.w	r2, r7, #12
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f001 fbfc 	bl	800c56a <RegionChanMaskSet>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f083 0301 	eor.w	r3, r3, #1
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 812e 	beq.w	800afdc <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad80:	2303      	movs	r3, #3
 800ad82:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ad84:	e12a      	b.n	800afdc <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ad90:	4b45      	ldr	r3, [pc, #276]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ad92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ad96:	f107 020c 	add.w	r2, r7, #12
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f001 fbe4 	bl	800c56a <RegionChanMaskSet>
 800ada2:	4603      	mov	r3, r0
 800ada4:	f083 0301 	eor.w	r3, r3, #1
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 8118 	beq.w	800afe0 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adb0:	2303      	movs	r3, #3
 800adb2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800adb4:	e114      	b.n	800afe0 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	791b      	ldrb	r3, [r3, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d009      	beq.n	800add2 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800adc2:	2b0f      	cmp	r3, #15
 800adc4:	d805      	bhi.n	800add2 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	791a      	ldrb	r2, [r3, #4]
 800adca:	4b37      	ldr	r3, [pc, #220]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800adcc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800add0:	e109      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800add2:	2303      	movs	r3, #3
 800add4:	75fb      	strb	r3, [r7, #23]
            break;
 800add6:	e106      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	4a32      	ldr	r2, [pc, #200]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800adde:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 800ade0:	e101      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	4a30      	ldr	r2, [pc, #192]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ade8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 800adea:	e0fc      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4a2d      	ldr	r2, [pc, #180]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800adf2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 800adf4:	e0f7      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	4a2b      	ldr	r2, [pc, #172]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800adfc:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 800adfe:	e0f2      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	4a28      	ldr	r2, [pc, #160]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae06:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 800ae08:	e0ed      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ae10:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ae12:	4b25      	ldr	r3, [pc, #148]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ae18:	f107 0108 	add.w	r1, r7, #8
 800ae1c:	2206      	movs	r2, #6
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f001 fb8c 	bl	800c53c <RegionVerify>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d005      	beq.n	800ae36 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ae2a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ae2e:	4b1e      	ldr	r3, [pc, #120]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae30:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ae34:	e0d7      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae36:	2303      	movs	r3, #3
 800ae38:	75fb      	strb	r3, [r7, #23]
            break;
 800ae3a:	e0d4      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ae42:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ae44:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ae4a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ae4c:	4b16      	ldr	r3, [pc, #88]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ae52:	f107 0108 	add.w	r1, r7, #8
 800ae56:	2205      	movs	r2, #5
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f001 fb6f 	bl	800c53c <RegionVerify>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d005      	beq.n	800ae70 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ae64:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ae68:	4b0f      	ldr	r3, [pc, #60]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ae6e:	e0ba      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae70:	2303      	movs	r3, #3
 800ae72:	75fb      	strb	r3, [r7, #23]
            break;
 800ae74:	e0b7      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ae7c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ae7e:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ae84:	f107 0108 	add.w	r1, r7, #8
 800ae88:	220a      	movs	r2, #10
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f001 fb56 	bl	800c53c <RegionVerify>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800ae96:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ae9a:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 800ae9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800aea0:	e0a1      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aea2:	2303      	movs	r3, #3
 800aea4:	75fb      	strb	r3, [r7, #23]
            break;
 800aea6:	e09e      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
 800aea8:	20001684 	.word	0x20001684
 800aeac:	08015034 	.word	0x08015034
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800aeb6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800aeb8:	4b4d      	ldr	r3, [pc, #308]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800aeba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aebe:	f107 0108 	add.w	r1, r7, #8
 800aec2:	2209      	movs	r2, #9
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 fb39 	bl	800c53c <RegionVerify>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d005      	beq.n	800aedc <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800aed0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800aed4:	4b46      	ldr	r3, [pc, #280]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800aed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800aeda:	e084      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aedc:	2303      	movs	r3, #3
 800aede:	75fb      	strb	r3, [r7, #23]
            break;
 800aee0:	e081      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	4a42      	ldr	r2, [pc, #264]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800aee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800aeec:	4b40      	ldr	r3, [pc, #256]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800aeee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aef2:	4a3f      	ldr	r2, [pc, #252]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800aef4:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 800aef6:	e076      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	791a      	ldrb	r2, [r3, #4]
 800aefc:	4b3c      	ldr	r3, [pc, #240]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800aefe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800af02:	4b3b      	ldr	r3, [pc, #236]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af04:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800af08:	4b39      	ldr	r3, [pc, #228]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 800af0e:	e06a      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	4a36      	ldr	r2, [pc, #216]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 800af1a:	e064      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	4a33      	ldr	r2, [pc, #204]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af22:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 800af26:	e05e      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800af28:	f7ff fa7e 	bl	800a428 <RestoreNvmData>
 800af2c:	4603      	mov	r3, r0
 800af2e:	75fb      	strb	r3, [r7, #23]
            break;
 800af30:	e059      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	799b      	ldrb	r3, [r3, #6]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d80d      	bhi.n	800af56 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800af3a:	4a2d      	ldr	r2, [pc, #180]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6858      	ldr	r0, [r3, #4]
 800af48:	f000 fffe 	bl	800bf48 <LoRaMacCryptoSetLrWanVersion>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d048      	beq.n	800afe4 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800af52:	2311      	movs	r3, #17
 800af54:	e048      	b.n	800afe8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800af56:	2303      	movs	r3, #3
 800af58:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800af5a:	e043      	b.n	800afe4 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	4a23      	ldr	r2, [pc, #140]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 800af66:	e03e      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	889a      	ldrh	r2, [r3, #4]
 800af6c:	4b20      	ldr	r3, [pc, #128]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af6e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 800af72:	e038      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	889a      	ldrh	r2, [r3, #4]
 800af78:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af7a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 800af7e:	e032      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	889a      	ldrh	r2, [r3, #4]
 800af84:	4b1a      	ldr	r3, [pc, #104]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af86:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 800af8a:	e02c      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	889a      	ldrh	r2, [r3, #4]
 800af90:	4b17      	ldr	r3, [pc, #92]	; (800aff0 <LoRaMacMibSetRequestConfirm+0x724>)
 800af92:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 800af96:	e026      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800af98:	2318      	movs	r3, #24
 800af9a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800af9c:	e023      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800af9e:	2318      	movs	r3, #24
 800afa0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800afa2:	e020      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fbc5 	bl	800b734 <LoRaMacMibClassBSetRequestConfirm>
 800afaa:	4603      	mov	r3, r0
 800afac:	75fb      	strb	r3, [r7, #23]
            break;
 800afae:	e01a      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afb0:	bf00      	nop
 800afb2:	e018      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afb4:	bf00      	nop
 800afb6:	e016      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afb8:	bf00      	nop
 800afba:	e014      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afbc:	bf00      	nop
 800afbe:	e012      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afc0:	bf00      	nop
 800afc2:	e010      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afc4:	bf00      	nop
 800afc6:	e00e      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afc8:	bf00      	nop
 800afca:	e00c      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afcc:	bf00      	nop
 800afce:	e00a      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afd0:	bf00      	nop
 800afd2:	e008      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afd4:	bf00      	nop
 800afd6:	e006      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afd8:	bf00      	nop
 800afda:	e004      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afdc:	bf00      	nop
 800afde:	e002      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afe0:	bf00      	nop
 800afe2:	e000      	b.n	800afe6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 800afe4:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20001684 	.word	0x20001684

0800aff4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800affc:	2302      	movs	r3, #2
 800affe:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b000:	2300      	movs	r3, #0
 800b002:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e13a      	b.n	800b284 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800b00e:	f7fe f9e3 	bl	80093d8 <LoRaMacIsBusy>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b018:	2301      	movs	r3, #1
 800b01a:	e133      	b.n	800b284 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b01c:	f000 fe42 	bl	800bca4 <LoRaMacConfirmQueueIsFull>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800b026:	2301      	movs	r3, #1
 800b028:	e12c      	b.n	800b284 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b02a:	f000 fe2f 	bl	800bc8c <LoRaMacConfirmQueueGetCnt>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b034:	2214      	movs	r2, #20
 800b036:	2100      	movs	r1, #0
 800b038:	4894      	ldr	r0, [pc, #592]	; (800b28c <LoRaMacMlmeRequest+0x298>)
 800b03a:	f002 ffc7 	bl	800dfcc <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b03e:	4b94      	ldr	r3, [pc, #592]	; (800b290 <LoRaMacMlmeRequest+0x29c>)
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b046:	4a92      	ldr	r2, [pc, #584]	; (800b290 <LoRaMacMlmeRequest+0x29c>)
 800b048:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800b04c:	f043 0304 	orr.w	r3, r3, #4
 800b050:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 800b05e:	2300      	movs	r3, #0
 800b060:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	3b01      	subs	r3, #1
 800b068:	2b0d      	cmp	r3, #13
 800b06a:	f200 80e1 	bhi.w	800b230 <LoRaMacMlmeRequest+0x23c>
 800b06e:	a201      	add	r2, pc, #4	; (adr r2, 800b074 <LoRaMacMlmeRequest+0x80>)
 800b070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b074:	0800b0ad 	.word	0x0800b0ad
 800b078:	0800b231 	.word	0x0800b231
 800b07c:	0800b231 	.word	0x0800b231
 800b080:	0800b231 	.word	0x0800b231
 800b084:	0800b125 	.word	0x0800b125
 800b088:	0800b143 	.word	0x0800b143
 800b08c:	0800b153 	.word	0x0800b153
 800b090:	0800b231 	.word	0x0800b231
 800b094:	0800b231 	.word	0x0800b231
 800b098:	0800b16f 	.word	0x0800b16f
 800b09c:	0800b231 	.word	0x0800b231
 800b0a0:	0800b205 	.word	0x0800b205
 800b0a4:	0800b1a5 	.word	0x0800b1a5
 800b0a8:	0800b1e7 	.word	0x0800b1e7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b0ac:	4b78      	ldr	r3, [pc, #480]	; (800b290 <LoRaMacMlmeRequest+0x29c>)
 800b0ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e0e2      	b.n	800b284 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 800b0be:	2000      	movs	r0, #0
 800b0c0:	f7fe fe2e 	bl	8009d20 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b0c4:	4b73      	ldr	r3, [pc, #460]	; (800b294 <LoRaMacMlmeRequest+0x2a0>)
 800b0c6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	795b      	ldrb	r3, [r3, #5]
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f001 faa2 	bl	800c61c <RegionAlternateDr>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	461a      	mov	r2, r3
 800b0dc:	4b6d      	ldr	r3, [pc, #436]	; (800b294 <LoRaMacMlmeRequest+0x2a0>)
 800b0de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800b0e8:	4b6a      	ldr	r3, [pc, #424]	; (800b294 <LoRaMacMlmeRequest+0x2a0>)
 800b0ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b0ee:	2307      	movs	r3, #7
 800b0f0:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 800b0f2:	20ff      	movs	r0, #255	; 0xff
 800b0f4:	f7fe fbb2 	bl	800985c <SendReJoinReq>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8098 	beq.w	800b234 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b104:	4b63      	ldr	r3, [pc, #396]	; (800b294 <LoRaMacMlmeRequest+0x2a0>)
 800b106:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	795b      	ldrb	r3, [r3, #5]
 800b10e:	b25b      	sxtb	r3, r3
 800b110:	2201      	movs	r2, #1
 800b112:	4619      	mov	r1, r3
 800b114:	f001 fa82 	bl	800c61c <RegionAlternateDr>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	4b5d      	ldr	r3, [pc, #372]	; (800b294 <LoRaMacMlmeRequest+0x2a0>)
 800b11e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 800b122:	e087      	b.n	800b234 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800b124:	2300      	movs	r3, #0
 800b126:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b128:	f107 030c 	add.w	r3, r7, #12
 800b12c:	2200      	movs	r2, #0
 800b12e:	4619      	mov	r1, r3
 800b130:	2002      	movs	r0, #2
 800b132:	f000 fc15 	bl	800b960 <LoRaMacCommandsAddCmd>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d07d      	beq.n	800b238 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b13c:	2313      	movs	r3, #19
 800b13e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800b140:	e07a      	b.n	800b238 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	889b      	ldrh	r3, [r3, #4]
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff f918 	bl	800a37c <SetTxContinuousWave>
 800b14c:	4603      	mov	r3, r0
 800b14e:	75fb      	strb	r3, [r7, #23]
            break;
 800b150:	e079      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	8898      	ldrh	r0, [r3, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6899      	ldr	r1, [r3, #8]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b160:	b2db      	uxtb	r3, r3
 800b162:	461a      	mov	r2, r3
 800b164:	f7ff f940 	bl	800a3e8 <SetTxContinuousWave1>
 800b168:	4603      	mov	r3, r0
 800b16a:	75fb      	strb	r3, [r7, #23]
            break;
 800b16c:	e06b      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	4619      	mov	r1, r3
 800b178:	200d      	movs	r0, #13
 800b17a:	f000 fc71 	bl	800ba60 <LoRaMacCommandsGetCmd>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d102      	bne.n	800b18a <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 800b188:	e058      	b.n	800b23c <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b18a:	f107 030c 	add.w	r3, r7, #12
 800b18e:	2200      	movs	r2, #0
 800b190:	4619      	mov	r1, r3
 800b192:	200d      	movs	r0, #13
 800b194:	f000 fbe4 	bl	800b960 <LoRaMacCommandsAddCmd>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d04e      	beq.n	800b23c <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b19e:	2313      	movs	r3, #19
 800b1a0:	75fb      	strb	r3, [r7, #23]
            break;
 800b1a2:	e04b      	b.n	800b23c <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b1a4:	4b3b      	ldr	r3, [pc, #236]	; (800b294 <LoRaMacMlmeRequest+0x2a0>)
 800b1a6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d148      	bne.n	800b240 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	791b      	ldrb	r3, [r3, #4]
 800b1b2:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	791b      	ldrb	r3, [r3, #4]
 800b1b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 fa93 	bl	800b6ea <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b1c4:	7dbb      	ldrb	r3, [r7, #22]
 800b1c6:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b1cc:	f107 030c 	add.w	r3, r7, #12
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	2010      	movs	r0, #16
 800b1d6:	f000 fbc3 	bl	800b960 <LoRaMacCommandsAddCmd>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d02f      	beq.n	800b240 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b1e0:	2313      	movs	r3, #19
 800b1e2:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 800b1e4:	e02c      	b.n	800b240 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	2012      	movs	r0, #18
 800b1f4:	f000 fbb4 	bl	800b960 <LoRaMacCommandsAddCmd>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d022      	beq.n	800b244 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b1fe:	2313      	movs	r3, #19
 800b200:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800b202:	e01f      	b.n	800b244 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800b204:	2301      	movs	r3, #1
 800b206:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b208:	f000 fa43 	bl	800b692 <LoRaMacClassBIsAcquisitionInProgress>
 800b20c:	4603      	mov	r3, r0
 800b20e:	f083 0301 	eor.w	r3, r3, #1
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d008      	beq.n	800b22a <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b218:	2000      	movs	r0, #0
 800b21a:	f000 fa30 	bl	800b67e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b21e:	2000      	movs	r0, #0
 800b220:	f000 fa3e 	bl	800b6a0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800b228:	e00d      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 800b22a:	2301      	movs	r3, #1
 800b22c:	75fb      	strb	r3, [r7, #23]
            break;
 800b22e:	e00a      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 800b230:	bf00      	nop
 800b232:	e008      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
            break;
 800b234:	bf00      	nop
 800b236:	e006      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
            break;
 800b238:	bf00      	nop
 800b23a:	e004      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
            break;
 800b23c:	bf00      	nop
 800b23e:	e002      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
            break;
 800b240:	bf00      	nop
 800b242:	e000      	b.n	800b246 <LoRaMacMlmeRequest+0x252>
            break;
 800b244:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b246:	4b12      	ldr	r3, [pc, #72]	; (800b290 <LoRaMacMlmeRequest+0x29c>)
 800b248:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800b250:	7dfb      	ldrb	r3, [r7, #23]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d010      	beq.n	800b278 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b256:	f000 fd19 	bl	800bc8c <LoRaMacConfirmQueueGetCnt>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d110      	bne.n	800b282 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 800b260:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <LoRaMacMlmeRequest+0x29c>)
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b268:	4a09      	ldr	r2, [pc, #36]	; (800b290 <LoRaMacMlmeRequest+0x29c>)
 800b26a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800b26e:	f36f 0382 	bfc	r3, #2, #1
 800b272:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800b276:	e004      	b.n	800b282 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800b278:	f107 0310 	add.w	r3, r7, #16
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 fccb 	bl	800bc18 <LoRaMacConfirmQueueAdd>
    }
    return status;
 800b282:	7dfb      	ldrb	r3, [r7, #23]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200015c4 	.word	0x200015c4
 800b290:	2000117c 	.word	0x2000117c
 800b294:	20001684 	.word	0x20001684

0800b298 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08c      	sub	sp, #48	; 0x30
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e0d4      	b.n	800b470 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800b2c6:	f7fe f887 	bl	80093d8 <LoRaMacIsBusy>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e0cd      	b.n	800b470 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b2d8:	2214      	movs	r2, #20
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4866      	ldr	r0, [pc, #408]	; (800b478 <LoRaMacMcpsRequest+0x1e0>)
 800b2de:	f002 fe75 	bl	800dfcc <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b2e2:	4b66      	ldr	r3, [pc, #408]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b2ea:	4b64      	ldr	r3, [pc, #400]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d03d      	beq.n	800b376 <LoRaMacMcpsRequest+0xde>
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	dc4f      	bgt.n	800b39e <LoRaMacMcpsRequest+0x106>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <LoRaMacMcpsRequest+0x70>
 800b302:	2b01      	cmp	r3, #1
 800b304:	d019      	beq.n	800b33a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800b306:	e04a      	b.n	800b39e <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 800b308:	2301      	movs	r3, #1
 800b30a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 800b30c:	4b5b      	ldr	r3, [pc, #364]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b314:	7b3b      	ldrb	r3, [r7, #12]
 800b316:	2202      	movs	r2, #2
 800b318:	f362 1347 	bfi	r3, r2, #5, #3
 800b31c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	791b      	ldrb	r3, [r3, #4]
 800b322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	899b      	ldrh	r3, [r3, #12]
 800b330:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	7b9b      	ldrb	r3, [r3, #14]
 800b336:	777b      	strb	r3, [r7, #29]
            break;
 800b338:	e032      	b.n	800b3a0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 800b33a:	2301      	movs	r3, #1
 800b33c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	7bdb      	ldrb	r3, [r3, #15]
 800b342:	2b08      	cmp	r3, #8
 800b344:	bf28      	it	cs
 800b346:	2308      	movcs	r3, #8
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	4b4c      	ldr	r3, [pc, #304]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b34c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b350:	7b3b      	ldrb	r3, [r7, #12]
 800b352:	2204      	movs	r2, #4
 800b354:	f362 1347 	bfi	r3, r2, #5, #3
 800b358:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	791b      	ldrb	r3, [r3, #4]
 800b35e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	899b      	ldrh	r3, [r3, #12]
 800b36c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7b9b      	ldrb	r3, [r3, #14]
 800b372:	777b      	strb	r3, [r7, #29]
            break;
 800b374:	e014      	b.n	800b3a0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 800b376:	2301      	movs	r3, #1
 800b378:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 800b37a:	4b40      	ldr	r3, [pc, #256]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b382:	7b3b      	ldrb	r3, [r7, #12]
 800b384:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b388:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	891b      	ldrh	r3, [r3, #8]
 800b394:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	7a9b      	ldrb	r3, [r3, #10]
 800b39a:	777b      	strb	r3, [r7, #29]
            break;
 800b39c:	e000      	b.n	800b3a0 <LoRaMacMcpsRequest+0x108>
            break;
 800b39e:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b3a4:	4b36      	ldr	r3, [pc, #216]	; (800b480 <LoRaMacMcpsRequest+0x1e8>)
 800b3a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b3aa:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b3ac:	4b34      	ldr	r3, [pc, #208]	; (800b480 <LoRaMacMcpsRequest+0x1e8>)
 800b3ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b3b2:	f107 0214 	add.w	r2, r7, #20
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f001 f895 	bl	800c4e8 <RegionGetPhyParam>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	b25b      	sxtb	r3, r3
 800b3c6:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	bfb8      	it	lt
 800b3ce:	4613      	movlt	r3, r2
 800b3d0:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 800b3d2:	7f3b      	ldrb	r3, [r7, #28]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d044      	beq.n	800b462 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800b3d8:	4b29      	ldr	r3, [pc, #164]	; (800b480 <LoRaMacMcpsRequest+0x1e8>)
 800b3da:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800b3de:	f083 0301 	eor.w	r3, r3, #1
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d019      	beq.n	800b41c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 800b3e8:	7f7b      	ldrb	r3, [r7, #29]
 800b3ea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b3ec:	4b24      	ldr	r3, [pc, #144]	; (800b480 <LoRaMacMcpsRequest+0x1e8>)
 800b3ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b3f2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b3f4:	4b22      	ldr	r3, [pc, #136]	; (800b480 <LoRaMacMcpsRequest+0x1e8>)
 800b3f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b3fa:	f107 0108 	add.w	r1, r7, #8
 800b3fe:	2205      	movs	r2, #5
 800b400:	4618      	mov	r0, r3
 800b402:	f001 f89b 	bl	800c53c <RegionVerify>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d005      	beq.n	800b418 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b40c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800b410:	4b1b      	ldr	r3, [pc, #108]	; (800b480 <LoRaMacMcpsRequest+0x1e8>)
 800b412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800b416:	e001      	b.n	800b41c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b418:	2303      	movs	r3, #3
 800b41a:	e029      	b.n	800b470 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800b41c:	8bfa      	ldrh	r2, [r7, #30]
 800b41e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800b422:	f107 000c 	add.w	r0, r7, #12
 800b426:	78fb      	ldrb	r3, [r7, #3]
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	4613      	mov	r3, r2
 800b42c:	6a3a      	ldr	r2, [r7, #32]
 800b42e:	f7fe f937 	bl	80096a0 <Send>
 800b432:	4603      	mov	r3, r0
 800b434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 800b438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10c      	bne.n	800b45a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	781a      	ldrb	r2, [r3, #0]
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b446:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b44a:	4a0c      	ldr	r2, [pc, #48]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b44c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800b450:	f043 0301 	orr.w	r3, r3, #1
 800b454:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800b458:	e003      	b.n	800b462 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800b45a:	4b08      	ldr	r3, [pc, #32]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b462:	4b06      	ldr	r3, [pc, #24]	; (800b47c <LoRaMacMcpsRequest+0x1e4>)
 800b464:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	611a      	str	r2, [r3, #16]

    return status;
 800b46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b470:	4618      	mov	r0, r3
 800b472:	3728      	adds	r7, #40	; 0x28
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	200015b0 	.word	0x200015b0
 800b47c:	2000117c 	.word	0x2000117c
 800b480:	20001684 	.word	0x20001684

0800b484 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b492:	4b0d      	ldr	r3, [pc, #52]	; (800b4c8 <LoRaMacTestSetDutyCycleOn+0x44>)
 800b494:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b498:	f107 010c 	add.w	r1, r7, #12
 800b49c:	220f      	movs	r2, #15
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 f84c 	bl	800c53c <RegionVerify>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b4aa:	4a07      	ldr	r2, [pc, #28]	; (800b4c8 <LoRaMacTestSetDutyCycleOn+0x44>)
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b4b2:	4a06      	ldr	r2, [pc, #24]	; (800b4cc <LoRaMacTestSetDutyCycleOn+0x48>)
 800b4b4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800b4b8:	f043 0320 	orr.w	r3, r3, #32
 800b4bc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800b4c0:	bf00      	nop
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20001684 	.word	0x20001684
 800b4cc:	2000117c 	.word	0x2000117c

0800b4d0 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08c      	sub	sp, #48	; 0x30
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	7c1b      	ldrb	r3, [r3, #16]
 800b4e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	7c5b      	ldrb	r3, [r3, #17]
 800b4f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	795b      	ldrb	r3, [r3, #5]
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 808b 	beq.w	800b61c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b506:	2302      	movs	r3, #2
 800b508:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	7c9b      	ldrb	r3, [r3, #18]
 800b510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	7cdb      	ldrb	r3, [r3, #19]
 800b518:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b51c:	4611      	mov	r1, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 ffe2 	bl	800c4e8 <RegionGetPhyParam>
 800b524:	4603      	mov	r3, r0
 800b526:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 800b52e:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 800b532:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800b536:	4293      	cmp	r3, r2
 800b538:	bfb8      	it	lt
 800b53a:	4613      	movlt	r3, r2
 800b53c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 800b540:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 800b544:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800b548:	429a      	cmp	r2, r3
 800b54a:	d106      	bne.n	800b55a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800b552:	2300      	movs	r3, #0
 800b554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b558:	e060      	b.n	800b61c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	8992      	ldrh	r2, [r2, #12]
 800b562:	4293      	cmp	r3, r2
 800b564:	d303      	bcc.n	800b56e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 800b566:	2301      	movs	r3, #1
 800b568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b56c:	e002      	b.n	800b574 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 800b56e:	2300      	movs	r3, #0
 800b570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	8992      	ldrh	r2, [r2, #12]
 800b57c:	4611      	mov	r1, r2
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	89d2      	ldrh	r2, [r2, #14]
 800b582:	440a      	add	r2, r1
 800b584:	4293      	cmp	r3, r2
 800b586:	d349      	bcc.n	800b61c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b588:	2308      	movs	r3, #8
 800b58a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	7cdb      	ldrb	r3, [r3, #19]
 800b592:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 ffa5 	bl	800c4e8 <RegionGetPhyParam>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	89d2      	ldrh	r2, [r2, #14]
 800b5b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5b4:	fb01 f202 	mul.w	r2, r1, r2
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d12e      	bne.n	800b61c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b5be:	2322      	movs	r3, #34	; 0x22
 800b5c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 800b5c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	7c9b      	ldrb	r3, [r3, #18]
 800b5d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	7cdb      	ldrb	r3, [r3, #19]
 800b5d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 ff82 	bl	800c4e8 <RegionGetPhyParam>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 800b5ee:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 800b5f2:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d110      	bne.n	800b61c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	791b      	ldrb	r3, [r3, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d009      	beq.n	800b61c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b608:	2302      	movs	r3, #2
 800b60a:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	7cdb      	ldrb	r3, [r3, #19]
 800b610:	f107 0214 	add.w	r2, r7, #20
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f000 ff7e 	bl	800c518 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b622:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800b62a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800b62c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b630:	4618      	mov	r0, r3
 800b632:	3730      	adds	r7, #48	; 0x30
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	789b      	ldrb	r3, [r3, #2]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d107      	bne.n	800b65e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff ff3b 	bl	800b4d0 <CalcNextV10X>
 800b65a:	4603      	mov	r3, r0
 800b65c:	e000      	b.n	800b660 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b674:	bf00      	nop
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr

0800b67e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	4603      	mov	r3, r0
 800b686:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bc80      	pop	{r7}
 800b690:	4770      	bx	lr

0800b692 <LoRaMacClassBIsAcquisitionInProgress>:
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800b692:	b480      	push	{r7}
 800b694:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800b696:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b698:	4618      	mov	r0, r3
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bc80      	pop	{r7}
 800b69e:	4770      	bx	lr

0800b6a0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bc80      	pop	{r7}
 800b6b0:	4770      	bx	lr

0800b6b2 <LoRaMacClassBIsBeaconExpected>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconExpected( void )
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800b6b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bc80      	pop	{r7}
 800b6be:	4770      	bx	lr

0800b6c0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800b6c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bc80      	pop	{r7}
 800b6cc:	4770      	bx	lr

0800b6ce <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800b6d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bc80      	pop	{r7}
 800b6da:	4770      	bx	lr

0800b6dc <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800b6e0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bc80      	pop	{r7}
 800b6e8:	4770      	bx	lr

0800b6ea <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b083      	sub	sp, #12
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr

0800b6fe <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800b6fe:	b480      	push	{r7}
 800b700:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b702:	bf00      	nop
 800b704:	46bd      	mov	sp, r7
 800b706:	bc80      	pop	{r7}
 800b708:	4770      	bx	lr

0800b70a <LoRaMacClassBSwitchClass>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800b70a:	b480      	push	{r7}
 800b70c:	b083      	sub	sp, #12
 800b70e:	af00      	add	r7, sp, #0
 800b710:	4603      	mov	r3, r0
 800b712:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b714:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b716:	4618      	mov	r0, r3
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bc80      	pop	{r7}
 800b71e:	4770      	bx	lr

0800b720 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b728:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	bc80      	pop	{r7}
 800b732:	4770      	bx	lr

0800b734 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b73c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	bc80      	pop	{r7}
 800b746:	4770      	bx	lr

0800b748 <LoRaMacClassBIsUplinkCollision>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800b750:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	bc80      	pop	{r7}
 800b75a:	4770      	bx	lr

0800b75c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800b75c:	b480      	push	{r7}
 800b75e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b760:	bf00      	nop
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr

0800b768 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b774:	2300      	movs	r3, #0
 800b776:	81fb      	strh	r3, [r7, #14]
 800b778:	e00a      	b.n	800b790 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 800b77a:	89fb      	ldrh	r3, [r7, #14]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	4413      	add	r3, r2
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <IsSlotFree+0x22>
        {
            return false;
 800b786:	2300      	movs	r3, #0
 800b788:	e006      	b.n	800b798 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b78a:	89fb      	ldrh	r3, [r7, #14]
 800b78c:	3301      	adds	r3, #1
 800b78e:	81fb      	strh	r3, [r7, #14]
 800b790:	89fb      	ldrh	r3, [r7, #14]
 800b792:	2b0f      	cmp	r3, #15
 800b794:	d9f1      	bls.n	800b77a <IsSlotFree+0x12>
        }
    }
    return true;
 800b796:	2301      	movs	r3, #1
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bc80      	pop	{r7}
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b7ae:	e007      	b.n	800b7c0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 800b7b6:	79fb      	ldrb	r3, [r7, #7]
 800b7b8:	2b0f      	cmp	r3, #15
 800b7ba:	d101      	bne.n	800b7c0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e012      	b.n	800b7e6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	011b      	lsls	r3, r3, #4
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	4a0a      	ldr	r2, [pc, #40]	; (800b7f0 <MallocNewMacCommandSlot+0x4c>)
 800b7c8:	4413      	add	r3, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7ff ffcc 	bl	800b768 <IsSlotFree>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f083 0301 	eor.w	r3, r3, #1
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1e9      	bne.n	800b7b0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	4a03      	ldr	r2, [pc, #12]	; (800b7f0 <MallocNewMacCommandSlot+0x4c>)
 800b7e4:	4413      	add	r3, r2
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20001dec 	.word	0x20001dec

0800b7f4 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <FreeMacCommandSlot+0x12>
    {
        return false;
 800b802:	2300      	movs	r3, #0
 800b804:	e005      	b.n	800b812 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b806:	2210      	movs	r2, #16
 800b808:	2100      	movs	r1, #0
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f002 fbde 	bl	800dfcc <memset1>

    return true;
 800b810:	2301      	movs	r3, #1
}
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800b81a:	b480      	push	{r7}
 800b81c:	b083      	sub	sp, #12
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <LinkedListAdd+0x16>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <LinkedListAdd+0x1a>
    {
        return false;
 800b830:	2300      	movs	r3, #0
 800b832:	e015      	b.n	800b860 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d102      	bne.n	800b842 <LinkedListAdd+0x28>
    {
        list->First = element;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	605a      	str	r2, [r3, #4]

    return true;
 800b85e:	2301      	movs	r3, #1
}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	bc80      	pop	{r7}
 800b868:	4770      	bx	lr

0800b86a <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <LinkedListGetPrevious+0x16>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	e016      	b.n	800b8b2 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d00c      	beq.n	800b8ac <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b892:	e002      	b.n	800b89a <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d007      	beq.n	800b8b0 <LinkedListGetPrevious+0x46>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d1f4      	bne.n	800b894 <LinkedListGetPrevious+0x2a>
 800b8aa:	e001      	b.n	800b8b0 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bc80      	pop	{r7}
 800b8ba:	4770      	bx	lr

0800b8bc <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <LinkedListRemove+0x16>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <LinkedListRemove+0x1a>
    {
        return false;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	e020      	b.n	800b918 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7ff ffc6 	bl	800b86a <LinkedListGetPrevious>
 800b8de:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d103      	bne.n	800b8f2 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d102      	bne.n	800b902 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]

    return true;
 800b916:	2301      	movs	r3, #1
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 800b92a:	79fb      	ldrb	r3, [r7, #7]
 800b92c:	2b05      	cmp	r3, #5
 800b92e:	d004      	beq.n	800b93a <IsSticky+0x1a>
 800b930:	2b05      	cmp	r3, #5
 800b932:	db04      	blt.n	800b93e <IsSticky+0x1e>
 800b934:	3b08      	subs	r3, #8
 800b936:	2b02      	cmp	r3, #2
 800b938:	d801      	bhi.n	800b93e <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <IsSticky+0x20>
        default:
            return false;
 800b93e:	2300      	movs	r3, #0
    }
}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	bc80      	pop	{r7}
 800b948:	4770      	bx	lr

0800b94a <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	4603      	mov	r3, r0
 800b952:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 800b954:	2300      	movs	r3, #0
    }
}
 800b956:	4618      	mov	r0, r3
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bc80      	pop	{r7}
 800b95e:	4770      	bx	lr

0800b960 <LoRaMacCommandsAddCmd>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	4603      	mov	r3, r0
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b974:	2301      	movs	r3, #1
 800b976:	e03b      	b.n	800b9f0 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b978:	f7ff ff14 	bl	800b7a4 <MallocNewMacCommandSlot>
 800b97c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b984:	2302      	movs	r3, #2
 800b986:	e033      	b.n	800b9f0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b988:	6979      	ldr	r1, [r7, #20]
 800b98a:	481b      	ldr	r0, [pc, #108]	; (800b9f8 <LoRaMacCommandsAddCmd+0x98>)
 800b98c:	f7ff ff45 	bl	800b81a <LinkedListAdd>
 800b990:	4603      	mov	r3, r0
 800b992:	f083 0301 	eor.w	r3, r3, #1
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 800b99c:	2305      	movs	r3, #5
 800b99e:	e027      	b.n	800b9f0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	7bfa      	ldrb	r2, [r7, #15]
 800b9a4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	3305      	adds	r3, #5
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	b292      	uxth	r2, r2
 800b9b4:	68b9      	ldr	r1, [r7, #8]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f002 facd 	bl	800df56 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff ffae 	bl	800b920 <IsSticky>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff ffbb 	bl	800b94a <IsConfirmationRequired>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b9dc:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <LoRaMacCommandsAddCmd+0x98>)
 800b9de:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	4a03      	ldr	r2, [pc, #12]	; (800b9f8 <LoRaMacCommandsAddCmd+0x98>)
 800b9ea:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	20001dec 	.word	0x20001dec

0800b9fc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e021      	b.n	800ba52 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4812      	ldr	r0, [pc, #72]	; (800ba5c <LoRaMacCommandsRemoveCmd+0x60>)
 800ba12:	f7ff ff53 	bl	800b8bc <LinkedListRemove>
 800ba16:	4603      	mov	r3, r0
 800ba18:	f083 0301 	eor.w	r3, r3, #1
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800ba22:	2303      	movs	r3, #3
 800ba24:	e015      	b.n	800ba52 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ba26:	4b0d      	ldr	r3, [pc, #52]	; (800ba5c <LoRaMacCommandsRemoveCmd+0x60>)
 800ba28:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	3b01      	subs	r3, #1
 800ba34:	4a09      	ldr	r2, [pc, #36]	; (800ba5c <LoRaMacCommandsRemoveCmd+0x60>)
 800ba36:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7ff feda 	bl	800b7f4 <FreeMacCommandSlot>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f083 0301 	eor.w	r3, r3, #1
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 800ba4c:	2305      	movs	r3, #5
 800ba4e:	e000      	b.n	800ba52 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20001dec 	.word	0x20001dec

0800ba60 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	6039      	str	r1, [r7, #0]
 800ba6a:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ba6c:	4b0e      	ldr	r3, [pc, #56]	; (800baa8 <LoRaMacCommandsGetCmd+0x48>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800ba72:	e002      	b.n	800ba7a <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d004      	beq.n	800ba8a <LoRaMacCommandsGetCmd+0x2a>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	791b      	ldrb	r3, [r3, #4]
 800ba84:	79fa      	ldrb	r2, [r7, #7]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d1f4      	bne.n	800ba74 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800ba96:	2303      	movs	r3, #3
 800ba98:	e000      	b.n	800ba9c <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bc80      	pop	{r7}
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	20001dec 	.word	0x20001dec

0800baac <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800bab2:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800bab8:	e012      	b.n	800bae0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	7b1b      	ldrb	r3, [r3, #12]
 800babe:	f083 0301 	eor.w	r3, r3, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d008      	beq.n	800bada <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff ff94 	bl	800b9fc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	607b      	str	r3, [r7, #4]
 800bad8:	e002      	b.n	800bae0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e9      	bne.n	800baba <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20001dec 	.word	0x20001dec

0800baf4 <LoRaMacCommandsGetSizeSerializedCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e005      	b.n	800bb12 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800bb06:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800bb08:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bc80      	pop	{r7}
 800bb1a:	4770      	bx	lr
 800bb1c:	20001dec 	.word	0x20001dec

0800bb20 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800bb2c:	4b25      	ldr	r3, [pc, #148]	; (800bbc4 <LoRaMacCommandsSerializeCmds+0xa4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <LoRaMacCommandsSerializeCmds+0x22>
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d126      	bne.n	800bb90 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e039      	b.n	800bbba <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800bb46:	7efb      	ldrb	r3, [r7, #27]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	1ad2      	subs	r2, r2, r3
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	3301      	adds	r3, #1
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d320      	bcc.n	800bb98 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 800bb56:	7efb      	ldrb	r3, [r7, #27]
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	76fa      	strb	r2, [r7, #27]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	7912      	ldrb	r2, [r2, #4]
 800bb66:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800bb68:	7efb      	ldrb	r3, [r7, #27]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	18d0      	adds	r0, r2, r3
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	1d59      	adds	r1, r3, #5
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	461a      	mov	r2, r3
 800bb7a:	f002 f9ec 	bl	800df56 <memcpy1>
            itr += curElement->PayloadSize;
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	7efb      	ldrb	r3, [r7, #27]
 800bb86:	4413      	add	r3, r2
 800bb88:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1d7      	bne.n	800bb46 <LoRaMacCommandsSerializeCmds+0x26>
 800bb96:	e009      	b.n	800bbac <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 800bb98:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800bb9a:	e007      	b.n	800bbac <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 800bba2:	69f8      	ldr	r0, [r7, #28]
 800bba4:	f7ff ff2a 	bl	800b9fc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1f4      	bne.n	800bb9c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800bbb2:	68b8      	ldr	r0, [r7, #8]
 800bbb4:	f7ff ff9e 	bl	800baf4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3720      	adds	r7, #32
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20001dec 	.word	0x20001dec

0800bbc8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a07      	ldr	r2, [pc, #28]	; (800bbf0 <IncreaseBufferPointer+0x28>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d102      	bne.n	800bbde <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <IncreaseBufferPointer+0x2c>)
 800bbda:	607b      	str	r3, [r7, #4]
 800bbdc:	e002      	b.n	800bbe4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800bbe4:	687b      	ldr	r3, [r7, #4]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bc80      	pop	{r7}
 800bbee:	4770      	bx	lr
 800bbf0:	20001f04 	.word	0x20001f04
 800bbf4:	20001ef4 	.word	0x20001ef4

0800bbf8 <IsListFull>:
    }
    return false;
}

static bool IsListFull( uint8_t count )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bc02:	79fb      	ldrb	r3, [r7, #7]
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	d901      	bls.n	800bc0c <IsListFull+0x14>
    {
        return true;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e000      	b.n	800bc0e <IsListFull+0x16>
    }
    return false;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bc80      	pop	{r7}
 800bc16:	4770      	bx	lr

0800bc18 <LoRaMacConfirmQueueAdd>:
    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bc20:	4b19      	ldr	r3, [pc, #100]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff ffe6 	bl	800bbf8 <IsListFull>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e023      	b.n	800bc7e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800bc36:	4b14      	ldr	r3, [pc, #80]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	7812      	ldrb	r2, [r2, #0]
 800bc3e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800bc40:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	7852      	ldrb	r2, [r2, #1]
 800bc48:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800bc4a:	4b0f      	ldr	r3, [pc, #60]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	78d2      	ldrb	r2, [r2, #3]
 800bc52:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800bc54:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc62:	3301      	adds	r3, #1
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	4b08      	ldr	r3, [pc, #32]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc68:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff ffa9 	bl	800bbc8 <IncreaseBufferPointer>
 800bc76:	4603      	mov	r3, r0
 800bc78:	4a03      	ldr	r2, [pc, #12]	; (800bc88 <LoRaMacConfirmQueueAdd+0x70>)
 800bc7a:	6093      	str	r3, [r2, #8]

    return true;
 800bc7c:	2301      	movs	r3, #1
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20001ee8 	.word	0x20001ee8

0800bc8c <LoRaMacConfirmQueueGetCnt>:
        }
    }
}

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800bc90:	4b03      	ldr	r3, [pc, #12]	; (800bca0 <LoRaMacConfirmQueueGetCnt+0x14>)
 800bc92:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bc80      	pop	{r7}
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	20001ee8 	.word	0x20001ee8

0800bca4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bca8:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <LoRaMacConfirmQueueIsFull+0x20>)
 800bcaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff ffa2 	bl	800bbf8 <IsListFull>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e000      	b.n	800bcc0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 800bcbe:	2300      	movs	r3, #0
    }
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	20001ee8 	.word	0x20001ee8

0800bcc8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	; 0x38
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	607b      	str	r3, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	817b      	strh	r3, [r7, #10]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bce0:	230a      	movs	r3, #10
 800bce2:	e086      	b.n	800bdf2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 800bcea:	2301      	movs	r3, #1
 800bcec:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 800bcee:	2300      	movs	r3, #0
 800bcf0:	623b      	str	r3, [r7, #32]
 800bcf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	605a      	str	r2, [r3, #4]
 800bcfc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 800bcfe:	2300      	movs	r3, #0
 800bd00:	613b      	str	r3, [r7, #16]
 800bd02:	f107 0314 	add.w	r3, r7, #20
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	605a      	str	r2, [r3, #4]
 800bd0c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 800bd12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd16:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	0a1b      	lsrs	r3, r3, #8
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	0c1b      	lsrs	r3, r3, #16
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	0e1b      	lsrs	r3, r3, #24
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 800bd36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800bd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd3e:	0a1b      	lsrs	r3, r3, #8
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd46:	0c1b      	lsrs	r3, r3, #16
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd4e:	0e1b      	lsrs	r3, r3, #24
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 800bd54:	e048      	b.n	800bde8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 800bd56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 800bd5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd5e:	3301      	adds	r3, #1
 800bd60:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bd62:	f107 0320 	add.w	r3, r7, #32
 800bd66:	7a7a      	ldrb	r2, [r7, #9]
 800bd68:	f107 0010 	add.w	r0, r7, #16
 800bd6c:	2110      	movs	r1, #16
 800bd6e:	f7fc f8cb 	bl	8007f08 <SecureElementAesEncrypt>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd78:	230f      	movs	r3, #15
 800bd7a:	e03a      	b.n	800bdf2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e01e      	b.n	800bdc2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bd84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bd88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd8c:	4413      	add	r3, r2
 800bd8e:	461a      	mov	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	7819      	ldrb	r1, [r3, #0]
 800bd96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd9a:	3338      	adds	r3, #56	; 0x38
 800bd9c:	443b      	add	r3, r7
 800bd9e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800bda2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800bda6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdaa:	4403      	add	r3, r0
 800bdac:	4618      	mov	r0, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4403      	add	r3, r0
 800bdb2:	404a      	eors	r2, r1
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bdb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdc6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bdca:	2a10      	cmp	r2, #16
 800bdcc:	bfa8      	it	ge
 800bdce:	2210      	movge	r2, #16
 800bdd0:	b212      	sxth	r2, r2
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	dbd6      	blt.n	800bd84 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 800bdd6:	897b      	ldrh	r3, [r7, #10]
 800bdd8:	3b10      	subs	r3, #16
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 800bdde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bde2:	3310      	adds	r3, #16
 800bde4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 800bde8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dcb2      	bgt.n	800bd56 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3738      	adds	r7, #56	; 0x38
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800bdfa:	b490      	push	{r4, r7}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	461a      	mov	r2, r3
 800be08:	4623      	mov	r3, r4
 800be0a:	80fb      	strh	r3, [r7, #6]
 800be0c:	4603      	mov	r3, r0
 800be0e:	717b      	strb	r3, [r7, #5]
 800be10:	460b      	mov	r3, r1
 800be12:	713b      	strb	r3, [r7, #4]
 800be14:	4613      	mov	r3, r2
 800be16:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be1e:	230a      	movs	r3, #10
 800be20:	e04e      	b.n	800bec0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	2249      	movs	r2, #73	; 0x49
 800be26:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	3301      	adds	r3, #1
 800be2c:	2200      	movs	r2, #0
 800be2e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	3302      	adds	r3, #2
 800be34:	2200      	movs	r2, #0
 800be36:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	3303      	adds	r3, #3
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	3304      	adds	r3, #4
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	3305      	adds	r3, #5
 800be4c:	78fa      	ldrb	r2, [r7, #3]
 800be4e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	3306      	adds	r3, #6
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	b2d2      	uxtb	r2, r2
 800be58:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	0a1a      	lsrs	r2, r3, #8
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	3307      	adds	r3, #7
 800be62:	b2d2      	uxtb	r2, r2
 800be64:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	0c1a      	lsrs	r2, r3, #16
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	3308      	adds	r3, #8
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	0e1a      	lsrs	r2, r3, #24
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	3309      	adds	r3, #9
 800be7a:	b2d2      	uxtb	r2, r2
 800be7c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	330a      	adds	r3, #10
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	0a1a      	lsrs	r2, r3, #8
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	330b      	adds	r3, #11
 800be90:	b2d2      	uxtb	r2, r2
 800be92:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	0c1a      	lsrs	r2, r3, #16
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	330c      	adds	r3, #12
 800be9c:	b2d2      	uxtb	r2, r2
 800be9e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	0e1a      	lsrs	r2, r3, #24
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	330d      	adds	r3, #13
 800bea8:	b2d2      	uxtb	r2, r2
 800beaa:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	330e      	adds	r3, #14
 800beb0:	2200      	movs	r2, #0
 800beb2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	330f      	adds	r3, #15
 800beb8:	88fa      	ldrh	r2, [r7, #6]
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bc90      	pop	{r4, r7}
 800bec8:	4770      	bx	lr

0800beca <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800beca:	b590      	push	{r4, r7, lr}
 800becc:	b08b      	sub	sp, #44	; 0x2c
 800bece:	af04      	add	r7, sp, #16
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	4608      	mov	r0, r1
 800bed4:	4611      	mov	r1, r2
 800bed6:	461a      	mov	r2, r3
 800bed8:	4603      	mov	r3, r0
 800beda:	807b      	strh	r3, [r7, #2]
 800bedc:	460b      	mov	r3, r1
 800bede:	707b      	strb	r3, [r7, #1]
 800bee0:	4613      	mov	r3, r2
 800bee2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <ComputeCmacB0+0x26>
 800beea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bef0:	230a      	movs	r3, #10
 800bef2:	e024      	b.n	800bf3e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bef4:	887b      	ldrh	r3, [r7, #2]
 800bef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800befa:	d901      	bls.n	800bf00 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800befc:	230e      	movs	r3, #14
 800befe:	e01e      	b.n	800bf3e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800bf00:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800bf04:	783a      	ldrb	r2, [r7, #0]
 800bf06:	7879      	ldrb	r1, [r7, #1]
 800bf08:	8878      	ldrh	r0, [r7, #2]
 800bf0a:	f107 0308 	add.w	r3, r7, #8
 800bf0e:	9302      	str	r3, [sp, #8]
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	9301      	str	r3, [sp, #4]
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	4623      	mov	r3, r4
 800bf1a:	f7ff ff6e 	bl	800bdfa <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800bf1e:	887a      	ldrh	r2, [r7, #2]
 800bf20:	7879      	ldrb	r1, [r7, #1]
 800bf22:	f107 0008 	add.w	r0, r7, #8
 800bf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	6879      	ldr	r1, [r7, #4]
 800bf2e:	f7fb ffd1 	bl	8007ed4 <SecureElementComputeAesCmac>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf38:	230f      	movs	r3, #15
 800bf3a:	e000      	b.n	800bf3e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	371c      	adds	r7, #28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd90      	pop	{r4, r7, pc}
	...

0800bf48 <LoRaMacCryptoSetLrWanVersion>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 800bf50:	4b04      	ldr	r3, [pc, #16]	; (800bf64 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bc80      	pop	{r7}
 800bf62:	4770      	bx	lr
 800bf64:	20001f0c 	.word	0x20001f0c

0800bf68 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d101      	bne.n	800bf7a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf76:	230a      	movs	r3, #10
 800bf78:	e006      	b.n	800bf88 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bf7a:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <LoRaMacCryptoGetFCntUp+0x2c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bc80      	pop	{r7}
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20001f0c 	.word	0x20001f0c

0800bf98 <LoRaMacCryptoSetKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	6039      	str	r1, [r7, #0]
 800bfa2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7fb ff35 	bl	8007e18 <SecureElementSetKey>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfb4:	230f      	movs	r3, #15
 800bfb6:	e021      	b.n	800bffc <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d11d      	bne.n	800bffa <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bfbe:	4b11      	ldr	r3, [pc, #68]	; (800c004 <LoRaMacCryptoSetKey+0x6c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	789b      	ldrb	r3, [r3, #2]
 800bfc4:	210b      	movs	r1, #11
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 f8da 	bl	800c180 <LoRaMacCryptoDeriveLifeTimeKey>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfd2:	230f      	movs	r3, #15
 800bfd4:	e012      	b.n	800bffc <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bfd6:	210c      	movs	r1, #12
 800bfd8:	2000      	movs	r0, #0
 800bfda:	f000 f8d1 	bl	800c180 <LoRaMacCryptoDeriveLifeTimeKey>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfe4:	230f      	movs	r3, #15
 800bfe6:	e009      	b.n	800bffc <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bfe8:	210a      	movs	r1, #10
 800bfea:	2000      	movs	r0, #0
 800bfec:	f000 f8c8 	bl	800c180 <LoRaMacCryptoDeriveLifeTimeKey>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bff6:	230f      	movs	r3, #15
 800bff8:	e000      	b.n	800bffc <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20001f0c 	.word	0x20001f0c

0800c008 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af02      	add	r7, sp, #8
 800c00e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c016:	230a      	movs	r3, #10
 800c018:	e033      	b.n	800c082 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 800c01a:	2301      	movs	r3, #1
 800c01c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 800c022:	f107 0308 	add.w	r3, r7, #8
 800c026:	4618      	mov	r0, r3
 800c028:	f7fc f82e 	bl	8008088 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	4b17      	ldr	r3, [pc, #92]	; (800c08c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	b292      	uxth	r2, r2
 800c034:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800c036:	4b15      	ldr	r3, [pc, #84]	; (800c08c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	889a      	ldrh	r2, [r3, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f8d8 	bl	800c1f6 <LoRaMacSerializerJoinRequest>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c04c:	2311      	movs	r3, #17
 800c04e:	e018      	b.n	800c082 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3318      	adds	r3, #24
 800c058:	7bfa      	ldrb	r2, [r7, #15]
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	4613      	mov	r3, r2
 800c05e:	2213      	movs	r2, #19
 800c060:	2000      	movs	r0, #0
 800c062:	f7fb ff37 	bl	8007ed4 <SecureElementComputeAesCmac>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c06c:	230f      	movs	r3, #15
 800c06e:	e008      	b.n	800c082 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 f8c0 	bl	800c1f6 <LoRaMacSerializerJoinRequest>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c07c:	2311      	movs	r3, #17
 800c07e:	e000      	b.n	800c082 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	20001f0c 	.word	0x20001f0c

0800c090 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800c090:	b590      	push	{r4, r7, lr}
 800c092:	b08b      	sub	sp, #44	; 0x2c
 800c094:	af04      	add	r7, sp, #16
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	460b      	mov	r3, r1
 800c09c:	72fb      	strb	r3, [r7, #11]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800c0a2:	2313      	movs	r3, #19
 800c0a4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800c0a6:	2309      	movs	r3, #9
 800c0a8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c0b0:	230a      	movs	r3, #10
 800c0b2:	e05f      	b.n	800c174 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800c0b4:	4b31      	ldr	r3, [pc, #196]	; (800c17c <LoRaMacCryptoSecureMessage+0xec>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d201      	bcs.n	800c0c4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c0c0:	2306      	movs	r3, #6
 800c0c2:	e057      	b.n	800c174 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800c0ce:	2308      	movs	r3, #8
 800c0d0:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800c0d2:	4b2a      	ldr	r3, [pc, #168]	; (800c17c <LoRaMacCryptoSecureMessage+0xec>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d916      	bls.n	800c10c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e8:	b219      	sxth	r1, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	689c      	ldr	r4, [r3, #8]
 800c0ee:	7dfa      	ldrb	r2, [r7, #23]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	4623      	mov	r3, r4
 800c0fa:	f7ff fde5 	bl	800bcc8 <PayloadEncrypt>
 800c0fe:	4603      	mov	r3, r0
 800c100:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c102:	7dbb      	ldrb	r3, [r7, #22]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 800c108:	7dbb      	ldrb	r3, [r7, #22]
 800c10a:	e033      	b.n	800c174 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f8f4 	bl	800c2fa <LoRaMacSerializerData>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c118:	2311      	movs	r3, #17
 800c11a:	e02b      	b.n	800c174 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800c11c:	2308      	movs	r3, #8
 800c11e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6818      	ldr	r0, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	791b      	ldrb	r3, [r3, #4]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	3b04      	subs	r3, #4
 800c12c:	b299      	uxth	r1, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	322c      	adds	r2, #44	; 0x2c
 800c136:	7dfc      	ldrb	r4, [r7, #23]
 800c138:	9203      	str	r2, [sp, #12]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	9202      	str	r2, [sp, #8]
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	2300      	movs	r3, #0
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	2300      	movs	r3, #0
 800c146:	4622      	mov	r2, r4
 800c148:	f7ff febf 	bl	800beca <ComputeCmacB0>
 800c14c:	4603      	mov	r3, r0
 800c14e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c150:	7dbb      	ldrb	r3, [r7, #22]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 800c156:	7dbb      	ldrb	r3, [r7, #22]
 800c158:	e00c      	b.n	800c174 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f8cd 	bl	800c2fa <LoRaMacSerializerData>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c166:	2311      	movs	r3, #17
 800c168:	e004      	b.n	800c174 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800c16a:	4b04      	ldr	r3, [pc, #16]	; (800c17c <LoRaMacCryptoSecureMessage+0xec>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd90      	pop	{r4, r7, pc}
 800c17c:	20001f0c 	.word	0x20001f0c

0800c180 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	460a      	mov	r2, r1
 800c18a:	71fb      	strb	r3, [r7, #7]
 800c18c:	4613      	mov	r3, r2
 800c18e:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	f107 0310 	add.w	r3, r7, #16
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	605a      	str	r2, [r3, #4]
 800c19e:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 800c1a4:	79bb      	ldrb	r3, [r7, #6]
 800c1a6:	2b0c      	cmp	r3, #12
 800c1a8:	d00b      	beq.n	800c1c2 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 800c1aa:	2b0c      	cmp	r3, #12
 800c1ac:	dc0f      	bgt.n	800c1ce <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 800c1ae:	2b0a      	cmp	r3, #10
 800c1b0:	d00a      	beq.n	800c1c8 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 800c1b2:	2b0b      	cmp	r3, #11
 800c1b4:	d10b      	bne.n	800c1ce <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 800c1b6:	79fb      	ldrb	r3, [r7, #7]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d10a      	bne.n	800c1d2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 800c1bc:	2320      	movs	r3, #32
 800c1be:	733b      	strb	r3, [r7, #12]
            }
            break;
 800c1c0:	e007      	b.n	800c1d2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 800c1c2:	230b      	movs	r3, #11
 800c1c4:	77fb      	strb	r3, [r7, #31]
            break;
 800c1c6:	e005      	b.n	800c1d4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 800c1c8:	2330      	movs	r3, #48	; 0x30
 800c1ca:	733b      	strb	r3, [r7, #12]
            break;
 800c1cc:	e002      	b.n	800c1d4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c1ce:	230b      	movs	r3, #11
 800c1d0:	e00d      	b.n	800c1ee <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 800c1d2:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c1d4:	79ba      	ldrb	r2, [r7, #6]
 800c1d6:	7ff9      	ldrb	r1, [r7, #31]
 800c1d8:	f107 030c 	add.w	r3, r7, #12
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fb ff13 	bl	8008008 <SecureElementDeriveAndStoreKey>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c1e8:	230f      	movs	r3, #15
 800c1ea:	e000      	b.n	800c1ee <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3720      	adds	r7, #32
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <LoRaMacSerializerJoinRequest+0x16>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c20c:	2301      	movs	r3, #1
 800c20e:	e070      	b.n	800c2f2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	791b      	ldrb	r3, [r3, #4]
 800c218:	2b16      	cmp	r3, #22
 800c21a:	d801      	bhi.n	800c220 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c21c:	2302      	movs	r3, #2
 800c21e:	e068      	b.n	800c2f2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	89fb      	ldrh	r3, [r7, #14]
 800c226:	1c59      	adds	r1, r3, #1
 800c228:	81f9      	strh	r1, [r7, #14]
 800c22a:	4413      	add	r3, r2
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	7952      	ldrb	r2, [r2, #5]
 800c230:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	89fb      	ldrh	r3, [r7, #14]
 800c238:	18d0      	adds	r0, r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	3306      	adds	r3, #6
 800c23e:	2208      	movs	r2, #8
 800c240:	4619      	mov	r1, r3
 800c242:	f001 fea3 	bl	800df8c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800c246:	89fb      	ldrh	r3, [r7, #14]
 800c248:	3308      	adds	r3, #8
 800c24a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	89fb      	ldrh	r3, [r7, #14]
 800c252:	18d0      	adds	r0, r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	330e      	adds	r3, #14
 800c258:	2208      	movs	r2, #8
 800c25a:	4619      	mov	r1, r3
 800c25c:	f001 fe96 	bl	800df8c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 800c260:	89fb      	ldrh	r3, [r7, #14]
 800c262:	3308      	adds	r3, #8
 800c264:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	8ad9      	ldrh	r1, [r3, #22]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	89fb      	ldrh	r3, [r7, #14]
 800c270:	1c58      	adds	r0, r3, #1
 800c272:	81f8      	strh	r0, [r7, #14]
 800c274:	4413      	add	r3, r2
 800c276:	b2ca      	uxtb	r2, r1
 800c278:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	8adb      	ldrh	r3, [r3, #22]
 800c27e:	0a1b      	lsrs	r3, r3, #8
 800c280:	b299      	uxth	r1, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	89fb      	ldrh	r3, [r7, #14]
 800c288:	1c58      	adds	r0, r3, #1
 800c28a:	81f8      	strh	r0, [r7, #14]
 800c28c:	4413      	add	r3, r2
 800c28e:	b2ca      	uxtb	r2, r1
 800c290:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6999      	ldr	r1, [r3, #24]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	89fb      	ldrh	r3, [r7, #14]
 800c29c:	1c58      	adds	r0, r3, #1
 800c29e:	81f8      	strh	r0, [r7, #14]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	b2ca      	uxtb	r2, r1
 800c2a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	0a19      	lsrs	r1, r3, #8
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	89fb      	ldrh	r3, [r7, #14]
 800c2b2:	1c58      	adds	r0, r3, #1
 800c2b4:	81f8      	strh	r0, [r7, #14]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	b2ca      	uxtb	r2, r1
 800c2ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	0c19      	lsrs	r1, r3, #16
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	89fb      	ldrh	r3, [r7, #14]
 800c2c8:	1c58      	adds	r0, r3, #1
 800c2ca:	81f8      	strh	r0, [r7, #14]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	b2ca      	uxtb	r2, r1
 800c2d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	0e19      	lsrs	r1, r3, #24
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	89fb      	ldrh	r3, [r7, #14]
 800c2de:	1c58      	adds	r0, r3, #1
 800c2e0:	81f8      	strh	r0, [r7, #14]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	b2ca      	uxtb	r2, r1
 800c2e6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800c2e8:	89fb      	ldrh	r3, [r7, #14]
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d003      	beq.n	800c310 <LoRaMacSerializerData+0x16>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c310:	2301      	movs	r3, #1
 800c312:	e0e5      	b.n	800c4e0 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 800c314:	2300      	movs	r3, #0
 800c316:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 800c318:	2308      	movs	r3, #8
 800c31a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	7b1b      	ldrb	r3, [r3, #12]
 800c320:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c324:	b2db      	uxtb	r3, r3
 800c326:	b29a      	uxth	r2, r3
 800c328:	89bb      	ldrh	r3, [r7, #12]
 800c32a:	4413      	add	r3, r2
 800c32c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c338:	89bb      	ldrh	r3, [r7, #12]
 800c33a:	3301      	adds	r3, #1
 800c33c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c344:	b29a      	uxth	r2, r3
 800c346:	89bb      	ldrh	r3, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c34c:	89bb      	ldrh	r3, [r7, #12]
 800c34e:	3304      	adds	r3, #4
 800c350:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	791b      	ldrb	r3, [r3, #4]
 800c356:	b29b      	uxth	r3, r3
 800c358:	89ba      	ldrh	r2, [r7, #12]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d901      	bls.n	800c362 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c35e:	2302      	movs	r3, #2
 800c360:	e0be      	b.n	800c4e0 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	89fb      	ldrh	r3, [r7, #14]
 800c368:	1c59      	adds	r1, r3, #1
 800c36a:	81f9      	strh	r1, [r7, #14]
 800c36c:	4413      	add	r3, r2
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	7952      	ldrb	r2, [r2, #5]
 800c372:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6899      	ldr	r1, [r3, #8]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	89fb      	ldrh	r3, [r7, #14]
 800c37e:	1c58      	adds	r0, r3, #1
 800c380:	81f8      	strh	r0, [r7, #14]
 800c382:	4413      	add	r3, r2
 800c384:	b2ca      	uxtb	r2, r1
 800c386:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	0a19      	lsrs	r1, r3, #8
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	89fb      	ldrh	r3, [r7, #14]
 800c394:	1c58      	adds	r0, r3, #1
 800c396:	81f8      	strh	r0, [r7, #14]
 800c398:	4413      	add	r3, r2
 800c39a:	b2ca      	uxtb	r2, r1
 800c39c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	0c19      	lsrs	r1, r3, #16
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	89fb      	ldrh	r3, [r7, #14]
 800c3aa:	1c58      	adds	r0, r3, #1
 800c3ac:	81f8      	strh	r0, [r7, #14]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	b2ca      	uxtb	r2, r1
 800c3b2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	0e19      	lsrs	r1, r3, #24
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	89fb      	ldrh	r3, [r7, #14]
 800c3c0:	1c58      	adds	r0, r3, #1
 800c3c2:	81f8      	strh	r0, [r7, #14]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	b2ca      	uxtb	r2, r1
 800c3c8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	89fb      	ldrh	r3, [r7, #14]
 800c3d0:	1c59      	adds	r1, r3, #1
 800c3d2:	81f9      	strh	r1, [r7, #14]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	7b12      	ldrb	r2, [r2, #12]
 800c3da:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	89d9      	ldrh	r1, [r3, #14]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	89fb      	ldrh	r3, [r7, #14]
 800c3e6:	1c58      	adds	r0, r3, #1
 800c3e8:	81f8      	strh	r0, [r7, #14]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	b2ca      	uxtb	r2, r1
 800c3ee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	89db      	ldrh	r3, [r3, #14]
 800c3f4:	0a1b      	lsrs	r3, r3, #8
 800c3f6:	b299      	uxth	r1, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	89fb      	ldrh	r3, [r7, #14]
 800c3fe:	1c58      	adds	r0, r3, #1
 800c400:	81f8      	strh	r0, [r7, #14]
 800c402:	4413      	add	r3, r2
 800c404:	b2ca      	uxtb	r2, r1
 800c406:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	89fb      	ldrh	r3, [r7, #14]
 800c40e:	18d0      	adds	r0, r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f103 0110 	add.w	r1, r3, #16
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7b1b      	ldrb	r3, [r3, #12]
 800c41a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	b29b      	uxth	r3, r3
 800c422:	461a      	mov	r2, r3
 800c424:	f001 fd97 	bl	800df56 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	7b1b      	ldrb	r3, [r3, #12]
 800c42c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c430:	b2db      	uxtb	r3, r3
 800c432:	b29a      	uxth	r2, r3
 800c434:	89fb      	ldrh	r3, [r7, #14]
 800c436:	4413      	add	r3, r2
 800c438:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c440:	2b00      	cmp	r3, #0
 800c442:	d009      	beq.n	800c458 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	89fb      	ldrh	r3, [r7, #14]
 800c44a:	1c59      	adds	r1, r3, #1
 800c44c:	81f9      	strh	r1, [r7, #14]
 800c44e:	4413      	add	r3, r2
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c456:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	89fb      	ldrh	r3, [r7, #14]
 800c45e:	18d0      	adds	r0, r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	461a      	mov	r2, r3
 800c46e:	f001 fd72 	bl	800df56 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c478:	b29a      	uxth	r2, r3
 800c47a:	89fb      	ldrh	r3, [r7, #14]
 800c47c:	4413      	add	r3, r2
 800c47e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	89fb      	ldrh	r3, [r7, #14]
 800c48a:	1c58      	adds	r0, r3, #1
 800c48c:	81f8      	strh	r0, [r7, #14]
 800c48e:	4413      	add	r3, r2
 800c490:	b2ca      	uxtb	r2, r1
 800c492:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	0a19      	lsrs	r1, r3, #8
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	89fb      	ldrh	r3, [r7, #14]
 800c4a0:	1c58      	adds	r0, r3, #1
 800c4a2:	81f8      	strh	r0, [r7, #14]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	b2ca      	uxtb	r2, r1
 800c4a8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	0c19      	lsrs	r1, r3, #16
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	89fb      	ldrh	r3, [r7, #14]
 800c4b6:	1c58      	adds	r0, r3, #1
 800c4b8:	81f8      	strh	r0, [r7, #14]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	b2ca      	uxtb	r2, r1
 800c4be:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	0e19      	lsrs	r1, r3, #24
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	89fb      	ldrh	r3, [r7, #14]
 800c4cc:	1c58      	adds	r0, r3, #1
 800c4ce:	81f8      	strh	r0, [r7, #14]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	b2ca      	uxtb	r2, r1
 800c4d4:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800c4d6:	89fb      	ldrh	r3, [r7, #14]
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <RegionGetPhyParam>:
        }
    }
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	6039      	str	r1, [r7, #0]
 800c4f2:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	60bb      	str	r3, [r7, #8]
    switch( region )
 800c4f8:	79fb      	ldrb	r3, [r7, #7]
 800c4fa:	2b04      	cmp	r3, #4
 800c4fc:	d105      	bne.n	800c50a <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
 800c4fe:	6838      	ldr	r0, [r7, #0]
 800c500:	f000 ff4e 	bl	800d3a0 <RegionEU433GetPhyParam>
 800c504:	4603      	mov	r3, r0
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	e001      	b.n	800c50e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <RegionInitDefaults>:
        }
    }
}

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	2b04      	cmp	r3, #4
 800c528:	d103      	bne.n	800c532 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
 800c52a:	6838      	ldr	r0, [r7, #0]
 800c52c:	f001 f886 	bl	800d63c <RegionEU433InitDefaults>
 800c530:	e000      	b.n	800c534 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 800c532:	bf00      	nop
        }
    }
}
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	6039      	str	r1, [r7, #0]
 800c546:	71fb      	strb	r3, [r7, #7]
 800c548:	4613      	mov	r3, r2
 800c54a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d106      	bne.n	800c560 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
 800c552:	79bb      	ldrb	r3, [r7, #6]
 800c554:	4619      	mov	r1, r3
 800c556:	6838      	ldr	r0, [r7, #0]
 800c558:	f001 f904 	bl	800d764 <RegionEU433Verify>
 800c55c:	4603      	mov	r3, r0
 800c55e:	e000      	b.n	800c562 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c560:	2300      	movs	r3, #0
        }
    }
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <RegionChanMaskSet>:
        }
    }
}

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	4603      	mov	r3, r0
 800c572:	6039      	str	r1, [r7, #0]
 800c574:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	2b04      	cmp	r3, #4
 800c57a:	d104      	bne.n	800c586 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
 800c57c:	6838      	ldr	r0, [r7, #0]
 800c57e:	f001 f967 	bl	800d850 <RegionEU433ChanMaskSet>
 800c582:	4603      	mov	r3, r0
 800c584:	e000      	b.n	800c588 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c586:	2300      	movs	r3, #0
        }
    }
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	603b      	str	r3, [r7, #0]
 800c598:	4603      	mov	r3, r0
 800c59a:	71fb      	strb	r3, [r7, #7]
 800c59c:	460b      	mov	r3, r1
 800c59e:	71bb      	strb	r3, [r7, #6]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	717b      	strb	r3, [r7, #5]
    switch( region )
 800c5a4:	79fb      	ldrb	r3, [r7, #7]
 800c5a6:	2b04      	cmp	r3, #4
 800c5a8:	d107      	bne.n	800c5ba <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c5aa:	7979      	ldrb	r1, [r7, #5]
 800c5ac:	f997 0006 	ldrsb.w	r0, [r7, #6]
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	f001 f976 	bl	800d8a4 <RegionEU433ComputeRxWindowParameters>
 800c5b8:	e000      	b.n	800c5bc <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 800c5ba:	bf00      	nop
        }
    }
}
 800c5bc:	bf00      	nop
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800c5d2:	7bfb      	ldrb	r3, [r7, #15]
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	d105      	bne.n	800c5e4 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	68b8      	ldr	r0, [r7, #8]
 800c5dc:	f001 f9bc 	bl	800d958 <RegionEU433RxConfig>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	e000      	b.n	800c5e6 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c5e4:	2300      	movs	r3, #0
        }
    }
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
 800c5f8:	603b      	str	r3, [r7, #0]
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b04      	cmp	r3, #4
 800c602:	d106      	bne.n	800c612 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	68b8      	ldr	r0, [r7, #8]
 800c60a:	f001 fa75 	bl	800daf8 <RegionEU433TxConfig>
 800c60e:	4603      	mov	r3, r0
 800c610:	e000      	b.n	800c614 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c612:	2300      	movs	r3, #0
        }
    }
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <RegionAlternateDr>:
        }
    }
}

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	4603      	mov	r3, r0
 800c624:	71fb      	strb	r3, [r7, #7]
 800c626:	460b      	mov	r3, r1
 800c628:	71bb      	strb	r3, [r7, #6]
 800c62a:	4613      	mov	r3, r2
 800c62c:	717b      	strb	r3, [r7, #5]
    switch( region )
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	2b04      	cmp	r3, #4
 800c632:	d108      	bne.n	800c646 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
 800c634:	797a      	ldrb	r2, [r7, #5]
 800c636:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c63a:	4611      	mov	r1, r2
 800c63c:	4618      	mov	r0, r3
 800c63e:	f001 fb2b 	bl	800dc98 <RegionEU433AlternateDr>
 800c642:	4603      	mov	r3, r0
 800c644:	e000      	b.n	800c648 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c646:	2300      	movs	r3, #0
        }
    }
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	607a      	str	r2, [r7, #4]
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	4603      	mov	r3, r0
 800c65e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800c660:	7bfb      	ldrb	r3, [r7, #15]
 800c662:	2b04      	cmp	r3, #4
 800c664:	d107      	bne.n	800c676 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	6879      	ldr	r1, [r7, #4]
 800c66c:	68b8      	ldr	r0, [r7, #8]
 800c66e:	f001 fb23 	bl	800dcb8 <RegionEU433NextChannel>
 800c672:	4603      	mov	r3, r0
 800c674:	e000      	b.n	800c678 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c676:	2309      	movs	r3, #9
        }
    }
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	6039      	str	r1, [r7, #0]
 800c68a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800c68c:	79fb      	ldrb	r3, [r7, #7]
 800c68e:	2b04      	cmp	r3, #4
 800c690:	d103      	bne.n	800c69a <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
 800c692:	6838      	ldr	r0, [r7, #0]
 800c694:	f001 fbbe 	bl	800de14 <RegionEU433SetContinuousWave>
 800c698:	e000      	b.n	800c69c <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 800c69a:	bf00      	nop
        }
    }
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c6a4:	b590      	push	{r4, r7, lr}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	4623      	mov	r3, r4
 800c6b4:	71fb      	strb	r3, [r7, #7]
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71bb      	strb	r3, [r7, #6]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	717b      	strb	r3, [r7, #5]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	713b      	strb	r3, [r7, #4]
    switch( region )
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d109      	bne.n	800c6dc <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
 800c6c8:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800c6cc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800c6d0:	79bb      	ldrb	r3, [r7, #6]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 fbec 	bl	800deb0 <RegionEU433ApplyDrOffset>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	e000      	b.n	800c6de <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c6dc:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd90      	pop	{r4, r7, pc}
	...

0800c6e8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 800c6ee:	4b04      	ldr	r3, [pc, #16]	; (800c700 <RegionGetVersion+0x18>)
 800c6f0:	607b      	str	r3, [r7, #4]

    return version;
 800c6f2:	687b      	ldr	r3, [r7, #4]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bc80      	pop	{r7}
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	01010003 	.word	0x01010003

0800c704 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c704:	b480      	push	{r7}
 800c706:	b087      	sub	sp, #28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	4608      	mov	r0, r1
 800c70e:	4639      	mov	r1, r7
 800c710:	e881 000c 	stmia.w	r1, {r2, r3}
 800c714:	4603      	mov	r3, r0
 800c716:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 800c71e:	7afb      	ldrb	r3, [r7, #11]
 800c720:	f083 0301 	eor.w	r3, r3, #1
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d01b      	beq.n	800c762 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c72a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c72e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800c736:	d202      	bcs.n	800c73e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c738:	2364      	movs	r3, #100	; 0x64
 800c73a:	82bb      	strh	r3, [r7, #20]
 800c73c:	e00b      	b.n	800c756 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800c744:	4293      	cmp	r3, r2
 800c746:	d803      	bhi.n	800c750 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c74c:	82bb      	strh	r3, [r7, #20]
 800c74e:	e002      	b.n	800c756 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c750:	f242 7310 	movw	r3, #10000	; 0x2710
 800c754:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c756:	8aba      	ldrh	r2, [r7, #20]
 800c758:	8afb      	ldrh	r3, [r7, #22]
 800c75a:	4293      	cmp	r3, r2
 800c75c:	bf38      	it	cc
 800c75e:	4613      	movcc	r3, r2
 800c760:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800c762:	8afb      	ldrh	r3, [r7, #22]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d101      	bne.n	800c76c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 800c768:	2301      	movs	r3, #1
 800c76a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 800c76c:	8afb      	ldrh	r3, [r7, #22]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	bc80      	pop	{r7}
 800c776:	4770      	bx	lr

0800c778 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08e      	sub	sp, #56	; 0x38
 800c77c:	af02      	add	r7, sp, #8
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	4608      	mov	r0, r1
 800c782:	4639      	mov	r1, r7
 800c784:	e881 000c 	stmia.w	r1, {r2, r3}
 800c788:	4603      	mov	r3, r0
 800c78a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c792:	4b4b      	ldr	r3, [pc, #300]	; (800c8c0 <SetMaxTimeCredits+0x148>)
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c796:	463b      	mov	r3, r7
 800c798:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c79c:	f004 fe3e 	bl	801141c <SysTimeToMs>
 800c7a0:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 800c7a2:	f107 0314 	add.w	r3, r7, #20
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c7ac:	7af9      	ldrb	r1, [r7, #11]
 800c7ae:	463b      	mov	r3, r7
 800c7b0:	cb0c      	ldmia	r3, {r2, r3}
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f7ff ffa6 	bl	800c704 <GetDutyCycle>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 800c7bc:	7afb      	ldrb	r3, [r7, #11]
 800c7be:	f083 0301 	eor.w	r3, r3, #1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d062      	beq.n	800c88e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c7c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c7ca:	2b64      	cmp	r3, #100	; 0x64
 800c7cc:	d105      	bne.n	800c7da <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c7ce:	4b3c      	ldr	r3, [pc, #240]	; (800c8c0 <SetMaxTimeCredits+0x148>)
 800c7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7d6:	609a      	str	r2, [r3, #8]
 800c7d8:	e00b      	b.n	800c7f2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c7da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c7dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7e0:	d105      	bne.n	800c7ee <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c7e2:	4b38      	ldr	r3, [pc, #224]	; (800c8c4 <SetMaxTimeCredits+0x14c>)
 800c7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ea:	609a      	str	r2, [r3, #8]
 800c7ec:	e001      	b.n	800c7f2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c7ee:	4b36      	ldr	r3, [pc, #216]	; (800c8c8 <SetMaxTimeCredits+0x150>)
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689a      	ldr	r2, [r3, #8]
 800c7f6:	f107 031c 	add.w	r3, r7, #28
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f004 fe35 	bl	801146c <SysTimeFromMs>
 800c802:	f107 0014 	add.w	r0, r7, #20
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	463a      	mov	r2, r7
 800c80e:	ca06      	ldmia	r2, {r1, r2}
 800c810:	f004 fdac 	bl	801136c <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c814:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c818:	f083 0301 	eor.w	r3, r3, #1
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d006      	beq.n	800c830 <SetMaxTimeCredits+0xb8>
 800c822:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c826:	f083 0301 	eor.w	r3, r3, #1
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d108      	bne.n	800c842 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c836:	429a      	cmp	r2, r3
 800c838:	d103      	bne.n	800c842 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 800c83a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 800c83c:	4a23      	ldr	r2, [pc, #140]	; (800c8cc <SetMaxTimeCredits+0x154>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d92f      	bls.n	800c8a2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c846:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	4a21      	ldr	r2, [pc, #132]	; (800c8d0 <SetMaxTimeCredits+0x158>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d928      	bls.n	800c8a2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c856:	3b30      	subs	r3, #48	; 0x30
 800c858:	4a1e      	ldr	r2, [pc, #120]	; (800c8d4 <SetMaxTimeCredits+0x15c>)
 800c85a:	fba2 2303 	umull	r2, r3, r2, r3
 800c85e:	0c1b      	lsrs	r3, r3, #16
 800c860:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	4a1c      	ldr	r2, [pc, #112]	; (800c8d8 <SetMaxTimeCredits+0x160>)
 800c866:	fb02 f303 	mul.w	r3, r2, r3
 800c86a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800c872:	3330      	adds	r3, #48	; 0x30
 800c874:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c87a:	f107 0314 	add.w	r3, r7, #20
 800c87e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c882:	f004 fdcb 	bl	801141c <SysTimeToMs>
 800c886:	4602      	mov	r2, r0
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	609a      	str	r2, [r3, #8]
 800c88c:	e009      	b.n	800c8a2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 800c88e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c892:	f083 0301 	eor.w	r3, r3, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d102      	bne.n	800c8b0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ae:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8b4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 800c8b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3730      	adds	r7, #48	; 0x30
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	001b7740 	.word	0x001b7740
 800c8c4:	0112a880 	.word	0x0112a880
 800c8c8:	02932e00 	.word	0x02932e00
 800c8cc:	0001517f 	.word	0x0001517f
 800c8d0:	0001ec2f 	.word	0x0001ec2f
 800c8d4:	c22e4507 	.word	0xc22e4507
 800c8d8:	00015180 	.word	0x00015180

0800c8dc <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af02      	add	r7, sp, #8
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	4608      	mov	r0, r1
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	70fb      	strb	r3, [r7, #3]
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	70bb      	strb	r3, [r7, #2]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c8f6:	78f9      	ldrb	r1, [r7, #3]
 800c8f8:	787b      	ldrb	r3, [r7, #1]
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	78bb      	ldrb	r3, [r7, #2]
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	f107 0318 	add.w	r3, r7, #24
 800c904:	cb0c      	ldmia	r3, {r2, r3}
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7ff ff36 	bl	800c778 <SetMaxTimeCredits>
 800c90c:	4603      	mov	r3, r0
 800c90e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 800c910:	78fb      	ldrb	r3, [r7, #3]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00a      	beq.n	800c92c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f004 ff34 	bl	8011788 <UTIL_TIMER_GetElapsedTime>
 800c920:	4602      	mov	r2, r0
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	441a      	add	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	429a      	cmp	r2, r3
 800c936:	d903      	bls.n	800c940 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	691a      	ldr	r2, [r3, #16]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a3a      	ldr	r2, [r7, #32]
 800c944:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 800c946:	89fb      	ldrh	r3, [r7, #14]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	4603      	mov	r3, r0
 800c958:	460a      	mov	r2, r1
 800c95a:	80fb      	strh	r3, [r7, #6]
 800c95c:	4613      	mov	r3, r2
 800c95e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 800c964:	2300      	movs	r3, #0
 800c966:	73bb      	strb	r3, [r7, #14]
 800c968:	e011      	b.n	800c98e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c96a:	88fa      	ldrh	r2, [r7, #6]
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	2101      	movs	r1, #1
 800c970:	fa01 f303 	lsl.w	r3, r1, r3
 800c974:	401a      	ands	r2, r3
 800c976:	7bbb      	ldrb	r3, [r7, #14]
 800c978:	2101      	movs	r1, #1
 800c97a:	fa01 f303 	lsl.w	r3, r1, r3
 800c97e:	429a      	cmp	r2, r3
 800c980:	d102      	bne.n	800c988 <CountChannels+0x38>
        {
            nbActiveBits++;
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	3301      	adds	r3, #1
 800c986:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 800c988:	7bbb      	ldrb	r3, [r7, #14]
 800c98a:	3301      	adds	r3, #1
 800c98c:	73bb      	strb	r3, [r7, #14]
 800c98e:	7bba      	ldrb	r2, [r7, #14]
 800c990:	797b      	ldrb	r3, [r7, #5]
 800c992:	429a      	cmp	r2, r3
 800c994:	d3e9      	bcc.n	800c96a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bc80      	pop	{r7}
 800c9a0:	4770      	bx	lr

0800c9a2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6039      	str	r1, [r7, #0]
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	71fb      	strb	r3, [r7, #7]
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	71bb      	strb	r3, [r7, #6]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800c9ba:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800c9be:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800c9c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 f85d 	bl	800ca86 <RegionCommonValueInRange>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e053      	b.n	800ca7e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	73fb      	strb	r3, [r7, #15]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	73bb      	strb	r3, [r7, #14]
 800c9de:	e049      	b.n	800ca74 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	737b      	strb	r3, [r7, #13]
 800c9e4:	e03d      	b.n	800ca62 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	7b7b      	ldrb	r3, [r7, #13]
 800c9f4:	fa42 f303 	asr.w	r3, r2, r3
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d02d      	beq.n	800ca5c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ca00:	7bfa      	ldrb	r2, [r7, #15]
 800ca02:	7b7b      	ldrb	r3, [r7, #13]
 800ca04:	4413      	add	r3, r2
 800ca06:	461a      	mov	r2, r3
 800ca08:	4613      	mov	r3, r2
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	4413      	add	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	461a      	mov	r2, r3
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	4413      	add	r3, r2
 800ca16:	7a1b      	ldrb	r3, [r3, #8]
 800ca18:	f343 0303 	sbfx	r3, r3, #0, #4
 800ca1c:	b25b      	sxtb	r3, r3
 800ca1e:	f003 030f 	and.w	r3, r3, #15
 800ca22:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ca24:	7bfa      	ldrb	r2, [r7, #15]
 800ca26:	7b7b      	ldrb	r3, [r7, #13]
 800ca28:	4413      	add	r3, r2
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	4413      	add	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	461a      	mov	r2, r3
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	4413      	add	r3, r2
 800ca3a:	7a1b      	ldrb	r3, [r3, #8]
 800ca3c:	f343 1303 	sbfx	r3, r3, #4, #4
 800ca40:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ca42:	f003 030f 	and.w	r3, r3, #15
 800ca46:	b25a      	sxtb	r2, r3
 800ca48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 f81a 	bl	800ca86 <RegionCommonValueInRange>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d101      	bne.n	800ca5c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e010      	b.n	800ca7e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 800ca5c:	7b7b      	ldrb	r3, [r7, #13]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	737b      	strb	r3, [r7, #13]
 800ca62:	7b7b      	ldrb	r3, [r7, #13]
 800ca64:	2b0f      	cmp	r3, #15
 800ca66:	d9be      	bls.n	800c9e6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	3310      	adds	r3, #16
 800ca6c:	73fb      	strb	r3, [r7, #15]
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	3301      	adds	r3, #1
 800ca72:	73bb      	strb	r3, [r7, #14]
 800ca74:	7bfa      	ldrb	r2, [r7, #15]
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d3b1      	bcc.n	800c9e0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800ca86:	b480      	push	{r7}
 800ca88:	b083      	sub	sp, #12
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	71fb      	strb	r3, [r7, #7]
 800ca90:	460b      	mov	r3, r1
 800ca92:	71bb      	strb	r3, [r7, #6]
 800ca94:	4613      	mov	r3, r2
 800ca96:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 800ca98:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ca9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	db07      	blt.n	800cab4 <RegionCommonValueInRange+0x2e>
 800caa4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800caa8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800caac:	429a      	cmp	r2, r3
 800caae:	dc01      	bgt.n	800cab4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e000      	b.n	800cab6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	bc80      	pop	{r7}
 800cabe:	4770      	bx	lr

0800cac0 <RegionCommonCountChannels>:

    return true;
}

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	70fb      	strb	r3, [r7, #3]
 800cacc:	4613      	mov	r3, r2
 800cace:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	e018      	b.n	800cb10 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cade:	78fb      	ldrb	r3, [r7, #3]
 800cae0:	73bb      	strb	r3, [r7, #14]
 800cae2:	e010      	b.n	800cb06 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cae4:	7bbb      	ldrb	r3, [r7, #14]
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	4413      	add	r3, r2
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	2110      	movs	r1, #16
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff ff2d 	bl	800c950 <CountChannels>
 800caf6:	4603      	mov	r3, r0
 800caf8:	461a      	mov	r2, r3
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
 800cafc:	4413      	add	r3, r2
 800cafe:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cb00:	7bbb      	ldrb	r3, [r7, #14]
 800cb02:	3301      	adds	r3, #1
 800cb04:	73bb      	strb	r3, [r7, #14]
 800cb06:	7bba      	ldrb	r2, [r7, #14]
 800cb08:	78bb      	ldrb	r3, [r7, #2]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d3ea      	bcc.n	800cae4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	4613      	mov	r3, r2
 800cb24:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d016      	beq.n	800cb5a <RegionCommonChanMaskCopy+0x42>
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d013      	beq.n	800cb5a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800cb32:	2300      	movs	r3, #0
 800cb34:	75fb      	strb	r3, [r7, #23]
 800cb36:	e00c      	b.n	800cb52 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	441a      	add	r2, r3
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	68f9      	ldr	r1, [r7, #12]
 800cb46:	440b      	add	r3, r1
 800cb48:	8812      	ldrh	r2, [r2, #0]
 800cb4a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800cb4c:	7dfb      	ldrb	r3, [r7, #23]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	75fb      	strb	r3, [r7, #23]
 800cb52:	7dfa      	ldrb	r2, [r7, #23]
 800cb54:	79fb      	ldrb	r3, [r7, #7]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d3ee      	bcc.n	800cb38 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800cb5a:	bf00      	nop
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bc80      	pop	{r7}
 800cb62:	4770      	bx	lr

0800cb64 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800cb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb66:	b08f      	sub	sp, #60	; 0x3c
 800cb68:	af04      	add	r7, sp, #16
 800cb6a:	6039      	str	r1, [r7, #0]
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	461a      	mov	r2, r3
 800cb70:	4603      	mov	r3, r0
 800cb72:	71fb      	strb	r3, [r7, #7]
 800cb74:	460b      	mov	r3, r1
 800cb76:	71bb      	strb	r3, [r7, #6]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800cb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb80:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800cb82:	f004 fdef 	bl	8011764 <UTIL_TIMER_GetCurrentTime>
 800cb86:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 800cb96:	2300      	movs	r3, #0
 800cb98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cb9c:	e0ba      	b.n	800cd14 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800cb9e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cba2:	4613      	mov	r3, r2
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	4413      	add	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	461a      	mov	r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	189c      	adds	r4, r3, r2
 800cbb0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 800cbb4:	797a      	ldrb	r2, [r7, #5]
 800cbb6:	79fd      	ldrb	r5, [r7, #7]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	9302      	str	r3, [sp, #8]
 800cbbc:	46ec      	mov	ip, sp
 800cbbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cbc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cbca:	4633      	mov	r3, r6
 800cbcc:	4629      	mov	r1, r5
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f7ff fe84 	bl	800c8dc <UpdateTimeCredits>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 800cbd8:	8afa      	ldrh	r2, [r7, #22]
 800cbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbdc:	fb02 f303 	mul.w	r3, r2, r3
 800cbe0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800cbe2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	00db      	lsls	r3, r3, #3
 800cbee:	461a      	mov	r2, r3
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	69ba      	ldr	r2, [r7, #24]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d908      	bls.n	800cc0e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800cbfc:	797b      	ldrb	r3, [r7, #5]
 800cbfe:	f083 0301 	eor.w	r3, r3, #1
 800cc02:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d013      	beq.n	800cc30 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800cc08:	79fb      	ldrb	r3, [r7, #7]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d010      	beq.n	800cc30 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 800cc0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc12:	4613      	mov	r3, r2
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	4413      	add	r3, r2
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	4413      	add	r3, r2
 800cc20:	2201      	movs	r2, #1
 800cc22:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800cc24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc28:	3301      	adds	r3, #1
 800cc2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc2e:	e06c      	b.n	800cd0a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800cc30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc34:	4613      	mov	r3, r2
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	4413      	add	r3, r2
 800cc3a:	00db      	lsls	r3, r3, #3
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	4413      	add	r3, r2
 800cc42:	2200      	movs	r2, #0
 800cc44:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800cc46:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	4413      	add	r3, r2
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	461a      	mov	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	4413      	add	r3, r2
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	69ba      	ldr	r2, [r7, #24]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d815      	bhi.n	800cc8c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800cc60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc64:	4613      	mov	r3, r2
 800cc66:	005b      	lsls	r3, r3, #1
 800cc68:	4413      	add	r3, r2
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	4413      	add	r3, r2
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	bf28      	it	cs
 800cc7e:	4613      	movcs	r3, r2
 800cc80:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800cc82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc86:	3301      	adds	r3, #1
 800cc88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	f083 0301 	eor.w	r3, r3, #1
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d038      	beq.n	800cd0a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 800cc98:	2300      	movs	r3, #0
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800cca0:	8afb      	ldrh	r3, [r7, #22]
 800cca2:	2b64      	cmp	r3, #100	; 0x64
 800cca4:	d103      	bne.n	800ccae <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800cca6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	e009      	b.n	800ccc2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800ccae:	8afb      	ldrh	r3, [r7, #22]
 800ccb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ccb4:	d103      	bne.n	800ccbe <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800ccb6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	e001      	b.n	800ccc2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ccbe:	4b1e      	ldr	r3, [pc, #120]	; (800cd38 <RegionCommonUpdateBandTimeOff+0x1d4>)
 800ccc0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ccc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc4:	4a1c      	ldr	r2, [pc, #112]	; (800cd38 <RegionCommonUpdateBandTimeOff+0x1d4>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d90e      	bls.n	800cce8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccce:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800ccd2:	3b30      	subs	r3, #48	; 0x30
 800ccd4:	4919      	ldr	r1, [pc, #100]	; (800cd3c <RegionCommonUpdateBandTimeOff+0x1d8>)
 800ccd6:	fba1 1303 	umull	r1, r3, r1, r3
 800ccda:	0c1b      	lsrs	r3, r3, #16
 800ccdc:	3301      	adds	r3, #1
 800ccde:	4918      	ldr	r1, [pc, #96]	; (800cd40 <RegionCommonUpdateBandTimeOff+0x1dc>)
 800cce0:	fb01 f303 	mul.w	r3, r1, r3
 800cce4:	4413      	add	r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800cce8:	f107 000c 	add.w	r0, r7, #12
 800ccec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccf2:	f107 020c 	add.w	r2, r7, #12
 800ccf6:	ca06      	ldmia	r2, {r1, r2}
 800ccf8:	f004 fb38 	bl	801136c <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800ccfc:	f107 030c 	add.w	r3, r7, #12
 800cd00:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd04:	f004 fb8a 	bl	801141c <SysTimeToMs>
 800cd08:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 800cd0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cd0e:	3301      	adds	r3, #1
 800cd10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cd14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cd18:	79bb      	ldrb	r3, [r7, #6]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	f4ff af3f 	bcc.w	800cb9e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 800cd20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800cd28:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2c:	e000      	b.n	800cd30 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	372c      	adds	r7, #44	; 0x2c
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd38:	0001ec30 	.word	0x0001ec30
 800cd3c:	c22e4507 	.word	0xc22e4507
 800cd40:	00015180 	.word	0x00015180

0800cd44 <RegionCommonComputeSymbolTimeLoRa>:

    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	6039      	str	r1, [r7, #0]
 800cd4e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800cd50:	79fb      	ldrb	r3, [r7, #7]
 800cd52:	4a06      	ldr	r2, [pc, #24]	; (800cd6c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 800cd54:	fa02 f303 	lsl.w	r3, r2, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bc80      	pop	{r7}
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	000f4240 	.word	0x000f4240

0800cd70 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800cd7a:	79fb      	ldrb	r3, [r7, #7]
 800cd7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cd80:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bc80      	pop	{r7}
 800cd8c:	4770      	bx	lr
	...

0800cd90 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	607a      	str	r2, [r7, #4]
 800cd9a:	603b      	str	r3, [r7, #0]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800cda0:	7afa      	ldrb	r2, [r7, #11]
 800cda2:	7afb      	ldrb	r3, [r7, #11]
 800cda4:	3b04      	subs	r3, #4
 800cda6:	4619      	mov	r1, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	fb03 f101 	mul.w	r1, r3, r1
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cdb4:	fb00 f303 	mul.w	r3, r0, r3
 800cdb8:	440b      	add	r3, r1
 800cdba:	005b      	lsls	r3, r3, #1
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d013      	beq.n	800cde8 <RegionCommonComputeRxWindowParameters+0x58>
 800cdc0:	7afb      	ldrb	r3, [r7, #11]
 800cdc2:	3b04      	subs	r3, #4
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	fb03 f101 	mul.w	r1, r3, r1
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cdd2:	fb00 f303 	mul.w	r3, r0, r3
 800cdd6:	440b      	add	r3, r1
 800cdd8:	0059      	lsls	r1, r3, #1
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	440b      	add	r3, r1
 800cdde:	1e59      	subs	r1, r3, #1
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	fbb1 f3f3 	udiv	r3, r1, r3
 800cde6:	e00f      	b.n	800ce08 <RegionCommonComputeRxWindowParameters+0x78>
 800cde8:	7afb      	ldrb	r3, [r7, #11]
 800cdea:	3b04      	subs	r3, #4
 800cdec:	4619      	mov	r1, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	fb03 f101 	mul.w	r1, r3, r1
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cdfa:	fb00 f303 	mul.w	r3, r0, r3
 800cdfe:	440b      	add	r3, r1
 800ce00:	0059      	lsls	r1, r3, #1
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	bf38      	it	cc
 800ce0c:	461a      	movcc	r2, r3
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4619      	mov	r1, r3
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	fb02 f303 	mul.w	r3, r2, r3
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d007      	beq.n	800ce36 <RegionCommonComputeRxWindowParameters+0xa6>
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	3301      	adds	r3, #1
 800ce32:	085b      	lsrs	r3, r3, #1
 800ce34:	e005      	b.n	800ce42 <RegionCommonComputeRxWindowParameters+0xb2>
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	fb02 f303 	mul.w	r3, r2, r3
 800ce40:	085b      	lsrs	r3, r3, #1
 800ce42:	1acb      	subs	r3, r1, r3
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ce4a:	fb01 f202 	mul.w	r2, r1, r2
 800ce4e:	1a9b      	subs	r3, r3, r2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	dd27      	ble.n	800cea4 <RegionCommonComputeRxWindowParameters+0x114>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4619      	mov	r1, r3
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	fb02 f303 	mul.w	r3, r2, r3
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d007      	beq.n	800ce78 <RegionCommonComputeRxWindowParameters+0xe8>
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	fb02 f303 	mul.w	r3, r2, r3
 800ce72:	3301      	adds	r3, #1
 800ce74:	085b      	lsrs	r3, r3, #1
 800ce76:	e005      	b.n	800ce84 <RegionCommonComputeRxWindowParameters+0xf4>
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	fb02 f303 	mul.w	r3, r2, r3
 800ce82:	085b      	lsrs	r3, r3, #1
 800ce84:	1acb      	subs	r3, r1, r3
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ce8c:	fb01 f202 	mul.w	r2, r1, r2
 800ce90:	1a9b      	subs	r3, r3, r2
 800ce92:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800ce96:	4a19      	ldr	r2, [pc, #100]	; (800cefc <RegionCommonComputeRxWindowParameters+0x16c>)
 800ce98:	fb82 1203 	smull	r1, r2, r2, r3
 800ce9c:	1192      	asrs	r2, r2, #6
 800ce9e:	17db      	asrs	r3, r3, #31
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	e024      	b.n	800ceee <RegionCommonComputeRxWindowParameters+0x15e>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4619      	mov	r1, r3
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	fb02 f303 	mul.w	r3, r2, r3
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d007      	beq.n	800cec8 <RegionCommonComputeRxWindowParameters+0x138>
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	fb02 f303 	mul.w	r3, r2, r3
 800cec2:	3301      	adds	r3, #1
 800cec4:	085b      	lsrs	r3, r3, #1
 800cec6:	e005      	b.n	800ced4 <RegionCommonComputeRxWindowParameters+0x144>
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	fb02 f303 	mul.w	r3, r2, r3
 800ced2:	085b      	lsrs	r3, r3, #1
 800ced4:	1acb      	subs	r3, r1, r3
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cedc:	fb01 f202 	mul.w	r2, r1, r2
 800cee0:	1a9b      	subs	r3, r3, r2
 800cee2:	4a06      	ldr	r2, [pc, #24]	; (800cefc <RegionCommonComputeRxWindowParameters+0x16c>)
 800cee4:	fb82 1203 	smull	r1, r2, r2, r3
 800cee8:	1192      	asrs	r2, r2, #6
 800ceea:	17db      	asrs	r3, r3, #31
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800cef2:	bf00      	nop
 800cef4:	3714      	adds	r7, #20
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bc80      	pop	{r7}
 800cefa:	4770      	bx	lr
 800cefc:	10624dd3 	.word	0x10624dd3

0800cf00 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800cf12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7f3 fed3 	bl	8000cc4 <__aeabi_ui2f>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	4619      	mov	r1, r3
 800cf22:	68b8      	ldr	r0, [r7, #8]
 800cf24:	f7f3 fe1c 	bl	8000b60 <__aeabi_fsub>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f3 fe17 	bl	8000b60 <__aeabi_fsub>
 800cf32:	4603      	mov	r3, r0
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7f3 fadf 	bl	80004f8 <__aeabi_f2d>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	4610      	mov	r0, r2
 800cf40:	4619      	mov	r1, r3
 800cf42:	f007 fc05 	bl	8014750 <floor>
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f7f3 fddb 	bl	8000b08 <__aeabi_d2iz>
 800cf52:	4603      	mov	r3, r0
 800cf54:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 800cf56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800cf62:	b590      	push	{r4, r7, lr}
 800cf64:	b087      	sub	sp, #28
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
 800cf6e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cf78:	2300      	movs	r3, #0
 800cf7a:	757b      	strb	r3, [r7, #21]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	753b      	strb	r3, [r7, #20]
 800cf80:	e09c      	b.n	800d0bc <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800cf82:	2300      	movs	r3, #0
 800cf84:	74fb      	strb	r3, [r7, #19]
 800cf86:	e08f      	b.n	800d0a8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	685a      	ldr	r2, [r3, #4]
 800cf8c:	7d3b      	ldrb	r3, [r7, #20]
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	461a      	mov	r2, r3
 800cf96:	7cfb      	ldrb	r3, [r7, #19]
 800cf98:	fa42 f303 	asr.w	r3, r2, r3
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d07e      	beq.n	800d0a2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	7d79      	ldrb	r1, [r7, #21]
 800cfaa:	7cfb      	ldrb	r3, [r7, #19]
 800cfac:	440b      	add	r3, r1
 800cfae:	4619      	mov	r1, r3
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	005b      	lsls	r3, r3, #1
 800cfb4:	440b      	add	r3, r1
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d06b      	beq.n	800d098 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	f083 0301 	eor.w	r3, r3, #1
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d011      	beq.n	800cff2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00d      	beq.n	800cff2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	695a      	ldr	r2, [r3, #20]
 800cfda:	7d3b      	ldrb	r3, [r7, #20]
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	4413      	add	r3, r2
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	7cfb      	ldrb	r3, [r7, #19]
 800cfe6:	fa42 f303 	asr.w	r3, r2, r3
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d054      	beq.n	800d09c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	785b      	ldrb	r3, [r3, #1]
 800cff6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	689a      	ldr	r2, [r3, #8]
 800cffc:	7d79      	ldrb	r1, [r7, #21]
 800cffe:	7cfb      	ldrb	r3, [r7, #19]
 800d000:	440b      	add	r3, r1
 800d002:	4619      	mov	r1, r3
 800d004:	460b      	mov	r3, r1
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	440b      	add	r3, r1
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	7a1b      	ldrb	r3, [r3, #8]
 800d010:	f343 0303 	sbfx	r3, r3, #0, #4
 800d014:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d016:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	689a      	ldr	r2, [r3, #8]
 800d01c:	7d79      	ldrb	r1, [r7, #21]
 800d01e:	7cfb      	ldrb	r3, [r7, #19]
 800d020:	440b      	add	r3, r1
 800d022:	4619      	mov	r1, r3
 800d024:	460b      	mov	r3, r1
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	440b      	add	r3, r1
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	7a1b      	ldrb	r3, [r3, #8]
 800d030:	f343 1303 	sbfx	r3, r3, #4, #4
 800d034:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d036:	461a      	mov	r2, r3
 800d038:	4621      	mov	r1, r4
 800d03a:	f7ff fd24 	bl	800ca86 <RegionCommonValueInRange>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d02d      	beq.n	800d0a0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	68da      	ldr	r2, [r3, #12]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6899      	ldr	r1, [r3, #8]
 800d04c:	7d78      	ldrb	r0, [r7, #21]
 800d04e:	7cfb      	ldrb	r3, [r7, #19]
 800d050:	4403      	add	r3, r0
 800d052:	4618      	mov	r0, r3
 800d054:	4603      	mov	r3, r0
 800d056:	005b      	lsls	r3, r3, #1
 800d058:	4403      	add	r3, r0
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	440b      	add	r3, r1
 800d05e:	7a5b      	ldrb	r3, [r3, #9]
 800d060:	4619      	mov	r1, r3
 800d062:	460b      	mov	r3, r1
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	440b      	add	r3, r1
 800d068:	00db      	lsls	r3, r3, #3
 800d06a:	4413      	add	r3, r2
 800d06c:	7d1b      	ldrb	r3, [r3, #20]
 800d06e:	f083 0301 	eor.w	r3, r3, #1
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	d003      	beq.n	800d080 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 800d078:	7dbb      	ldrb	r3, [r7, #22]
 800d07a:	3301      	adds	r3, #1
 800d07c:	75bb      	strb	r3, [r7, #22]
                    continue;
 800d07e:	e010      	b.n	800d0a2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	1c5a      	adds	r2, r3, #1
 800d084:	75fa      	strb	r2, [r7, #23]
 800d086:	461a      	mov	r2, r3
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	4413      	add	r3, r2
 800d08c:	7d79      	ldrb	r1, [r7, #21]
 800d08e:	7cfa      	ldrb	r2, [r7, #19]
 800d090:	440a      	add	r2, r1
 800d092:	b2d2      	uxtb	r2, r2
 800d094:	701a      	strb	r2, [r3, #0]
 800d096:	e004      	b.n	800d0a2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800d098:	bf00      	nop
 800d09a:	e002      	b.n	800d0a2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 800d09c:	bf00      	nop
 800d09e:	e000      	b.n	800d0a2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800d0a0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 800d0a2:	7cfb      	ldrb	r3, [r7, #19]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	74fb      	strb	r3, [r7, #19]
 800d0a8:	7cfb      	ldrb	r3, [r7, #19]
 800d0aa:	2b0f      	cmp	r3, #15
 800d0ac:	f67f af6c 	bls.w	800cf88 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d0b0:	7d7b      	ldrb	r3, [r7, #21]
 800d0b2:	3310      	adds	r3, #16
 800d0b4:	757b      	strb	r3, [r7, #21]
 800d0b6:	7d3b      	ldrb	r3, [r7, #20]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	753b      	strb	r3, [r7, #20]
 800d0bc:	7d7b      	ldrb	r3, [r7, #21]
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	8a1b      	ldrh	r3, [r3, #16]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	f4ff af5c 	bcc.w	800cf82 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	7dfa      	ldrb	r2, [r7, #23]
 800d0ce:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	7dba      	ldrb	r2, [r7, #22]
 800d0d4:	701a      	strb	r2, [r3, #0]
}
 800d0d6:	bf00      	nop
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd90      	pop	{r4, r7, pc}

0800d0de <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d0de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e0:	b08b      	sub	sp, #44	; 0x2c
 800d0e2:	af04      	add	r7, sp, #16
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	607a      	str	r2, [r7, #4]
 800d0ea:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f004 fb49 	bl	8011788 <UTIL_TIMER_GetElapsedTime>
 800d0f6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	1ad2      	subs	r2, r2, r3
 800d100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d102:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 800d104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d106:	2201      	movs	r2, #1
 800d108:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d004      	beq.n	800d122 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d32b      	bcc.n	800d17a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	2200      	movs	r2, #0
 800d126:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	69db      	ldr	r3, [r3, #28]
 800d12c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d132:	68dd      	ldr	r5, [r3, #12]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	7a5e      	ldrb	r6, [r3, #9]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f893 c008 	ldrb.w	ip, [r3, #8]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	7d1b      	ldrb	r3, [r3, #20]
 800d142:	68fa      	ldr	r2, [r7, #12]
 800d144:	6992      	ldr	r2, [r2, #24]
 800d146:	9203      	str	r2, [sp, #12]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	f10d 0e04 	add.w	lr, sp, #4
 800d14e:	320c      	adds	r2, #12
 800d150:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d154:	e88e 0003 	stmia.w	lr, {r0, r1}
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	4663      	mov	r3, ip
 800d15c:	4632      	mov	r2, r6
 800d15e:	4629      	mov	r1, r5
 800d160:	4620      	mov	r0, r4
 800d162:	f7ff fcff 	bl	800cb64 <RegionCommonUpdateBandTimeOff>
 800d166:	4602      	mov	r2, r0
 800d168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	69d8      	ldr	r0, [r3, #28]
 800d170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	6879      	ldr	r1, [r7, #4]
 800d176:	f7ff fef4 	bl	800cf62 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d004      	beq.n	800d18c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	e006      	b.n	800d19a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 800d18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d194:	230b      	movs	r3, #11
 800d196:	e000      	b.n	800d19a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d198:	230c      	movs	r3, #12
    }
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	371c      	adds	r7, #28
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1a2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800d1a2:	b5b0      	push	{r4, r5, r7, lr}
 800d1a4:	b086      	sub	sp, #24
 800d1a6:	af02      	add	r7, sp, #8
 800d1a8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f993 2000 	ldrsb.w	r2, [r3]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d103      	bne.n	800d1c8 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d1c6:	e026      	b.n	800d216 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800d1d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d019      	beq.n	800d212 <RegionCommonGetNextLowerTxDr+0x70>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	78d8      	ldrb	r0, [r3, #3]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6859      	ldr	r1, [r3, #4]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	6892      	ldr	r2, [r2, #8]
 800d1f6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 800d1fa:	9201      	str	r2, [sp, #4]
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	462b      	mov	r3, r5
 800d200:	4622      	mov	r2, r4
 800d202:	f7ff fbce 	bl	800c9a2 <RegionCommonChanVerifyDr>
 800d206:	4603      	mov	r3, r0
 800d208:	f083 0301 	eor.w	r3, r3, #1
 800d20c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1da      	bne.n	800d1c8 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 800d212:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bdb0      	pop	{r4, r5, r7, pc}

0800d21e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	4603      	mov	r3, r0
 800d226:	460a      	mov	r2, r1
 800d228:	71fb      	strb	r3, [r7, #7]
 800d22a:	4613      	mov	r3, r2
 800d22c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800d22e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d236:	4293      	cmp	r3, r2
 800d238:	bfb8      	it	lt
 800d23a:	4613      	movlt	r3, r2
 800d23c:	b25b      	sxtb	r3, r3
}
 800d23e:	4618      	mov	r0, r3
 800d240:	370c      	adds	r7, #12
 800d242:	46bd      	mov	sp, r7
 800d244:	bc80      	pop	{r7}
 800d246:	4770      	bx	lr

0800d248 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	4413      	add	r3, r2
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a07      	ldr	r2, [pc, #28]	; (800d27c <RegionCommonGetBandwidth+0x34>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d004      	beq.n	800d26c <RegionCommonGetBandwidth+0x24>
 800d262:	4a07      	ldr	r2, [pc, #28]	; (800d280 <RegionCommonGetBandwidth+0x38>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d003      	beq.n	800d270 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 800d268:	2300      	movs	r3, #0
 800d26a:	e002      	b.n	800d272 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e000      	b.n	800d272 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 800d270:	2302      	movs	r3, #2
    }
}
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	bc80      	pop	{r7}
 800d27a:	4770      	bx	lr
 800d27c:	0003d090 	.word	0x0003d090
 800d280:	0007a120 	.word	0x0007a120

0800d284 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	6039      	str	r1, [r7, #0]
 800d28e:	71fb      	strb	r3, [r7, #7]
 800d290:	4613      	mov	r3, r2
 800d292:	71bb      	strb	r3, [r7, #6]
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	bc80      	pop	{r7}
 800d29c:	4770      	bx	lr

0800d29e <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 800d2aa:	bf00      	nop
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bc80      	pop	{r7}
 800d2b2:	4770      	bx	lr

0800d2b4 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d2bc:	4b0d      	ldr	r3, [pc, #52]	; (800d2f4 <VerifyRfFreq+0x40>)
 800d2be:	6a1b      	ldr	r3, [r3, #32]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	4798      	blx	r3
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	f083 0301 	eor.w	r3, r3, #1
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <VerifyRfFreq+0x20>
    {
        return false;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	e00a      	b.n	800d2ea <VerifyRfFreq+0x36>
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a08      	ldr	r2, [pc, #32]	; (800d2f8 <VerifyRfFreq+0x44>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d903      	bls.n	800d2e4 <VerifyRfFreq+0x30>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a07      	ldr	r2, [pc, #28]	; (800d2fc <VerifyRfFreq+0x48>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d901      	bls.n	800d2e8 <VerifyRfFreq+0x34>
    {
        return false;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e000      	b.n	800d2ea <VerifyRfFreq+0x36>
    }
    return true;
 800d2e8:	2301      	movs	r3, #1
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	08015034 	.word	0x08015034
 800d2f8:	19d1b9d7 	.word	0x19d1b9d7
 800d2fc:	19e87628 	.word	0x19e87628

0800d300 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d300:	b590      	push	{r4, r7, lr}
 800d302:	b08b      	sub	sp, #44	; 0x2c
 800d304:	af04      	add	r7, sp, #16
 800d306:	4603      	mov	r3, r0
 800d308:	460a      	mov	r2, r1
 800d30a:	71fb      	strb	r3, [r7, #7]
 800d30c:	4613      	mov	r3, r2
 800d30e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU433[datarate];
 800d310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d314:	4a1f      	ldr	r2, [pc, #124]	; (800d394 <GetTimeOnAir+0x94>)
 800d316:	5cd3      	ldrb	r3, [r2, r3]
 800d318:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU433 );
 800d31a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d31e:	491e      	ldr	r1, [pc, #120]	; (800d398 <GetTimeOnAir+0x98>)
 800d320:	4618      	mov	r0, r3
 800d322:	f7ff ff91 	bl	800d248 <RegionCommonGetBandwidth>
 800d326:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 800d32c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d330:	2b07      	cmp	r3, #7
 800d332:	d118      	bne.n	800d366 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800d334:	4b19      	ldr	r3, [pc, #100]	; (800d39c <GetTimeOnAir+0x9c>)
 800d336:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d33c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d340:	fb02 f303 	mul.w	r3, r2, r3
 800d344:	4619      	mov	r1, r3
 800d346:	88bb      	ldrh	r3, [r7, #4]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2201      	movs	r2, #1
 800d34c:	9203      	str	r2, [sp, #12]
 800d34e:	9302      	str	r3, [sp, #8]
 800d350:	2300      	movs	r3, #0
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	2305      	movs	r3, #5
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	2300      	movs	r3, #0
 800d35a:	460a      	mov	r2, r1
 800d35c:	68f9      	ldr	r1, [r7, #12]
 800d35e:	2000      	movs	r0, #0
 800d360:	47a0      	blx	r4
 800d362:	6178      	str	r0, [r7, #20]
 800d364:	e011      	b.n	800d38a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d366:	4b0d      	ldr	r3, [pc, #52]	; (800d39c <GetTimeOnAir+0x9c>)
 800d368:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d36a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d36e:	88bb      	ldrh	r3, [r7, #4]
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2101      	movs	r1, #1
 800d374:	9103      	str	r1, [sp, #12]
 800d376:	9302      	str	r3, [sp, #8]
 800d378:	2300      	movs	r3, #0
 800d37a:	9301      	str	r3, [sp, #4]
 800d37c:	2308      	movs	r3, #8
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	2301      	movs	r3, #1
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	2001      	movs	r0, #1
 800d386:	47a0      	blx	r4
 800d388:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 800d38a:	697b      	ldr	r3, [r7, #20]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	371c      	adds	r7, #28
 800d390:	46bd      	mov	sp, r7
 800d392:	bd90      	pop	{r4, r7, pc}
 800d394:	08014ffc 	.word	0x08014ffc
 800d398:	08015004 	.word	0x08015004
 800d39c:	08015034 	.word	0x08015034

0800d3a0 <RegionEU433GetPhyParam>:
#endif /* REGION_EU433 */

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU433 )
    switch( getPhy->Attribute )
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	2b38      	cmp	r3, #56	; 0x38
 800d3b4:	f200 8127 	bhi.w	800d606 <RegionEU433GetPhyParam+0x266>
 800d3b8:	a201      	add	r2, pc, #4	; (adr r2, 800d3c0 <RegionEU433GetPhyParam+0x20>)
 800d3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3be:	bf00      	nop
 800d3c0:	0800d4a5 	.word	0x0800d4a5
 800d3c4:	0800d4ab 	.word	0x0800d4ab
 800d3c8:	0800d607 	.word	0x0800d607
 800d3cc:	0800d607 	.word	0x0800d607
 800d3d0:	0800d607 	.word	0x0800d607
 800d3d4:	0800d4b1 	.word	0x0800d4b1
 800d3d8:	0800d607 	.word	0x0800d607
 800d3dc:	0800d4eb 	.word	0x0800d4eb
 800d3e0:	0800d607 	.word	0x0800d607
 800d3e4:	0800d4f1 	.word	0x0800d4f1
 800d3e8:	0800d4f7 	.word	0x0800d4f7
 800d3ec:	0800d4fd 	.word	0x0800d4fd
 800d3f0:	0800d503 	.word	0x0800d503
 800d3f4:	0800d513 	.word	0x0800d513
 800d3f8:	0800d523 	.word	0x0800d523
 800d3fc:	0800d529 	.word	0x0800d529
 800d400:	0800d531 	.word	0x0800d531
 800d404:	0800d539 	.word	0x0800d539
 800d408:	0800d541 	.word	0x0800d541
 800d40c:	0800d549 	.word	0x0800d549
 800d410:	0800d551 	.word	0x0800d551
 800d414:	0800d559 	.word	0x0800d559
 800d418:	0800d56d 	.word	0x0800d56d
 800d41c:	0800d573 	.word	0x0800d573
 800d420:	0800d579 	.word	0x0800d579
 800d424:	0800d57f 	.word	0x0800d57f
 800d428:	0800d58b 	.word	0x0800d58b
 800d42c:	0800d597 	.word	0x0800d597
 800d430:	0800d59d 	.word	0x0800d59d
 800d434:	0800d5a5 	.word	0x0800d5a5
 800d438:	0800d5ab 	.word	0x0800d5ab
 800d43c:	0800d5b1 	.word	0x0800d5b1
 800d440:	0800d5b7 	.word	0x0800d5b7
 800d444:	0800d4b7 	.word	0x0800d4b7
 800d448:	0800d607 	.word	0x0800d607
 800d44c:	0800d607 	.word	0x0800d607
 800d450:	0800d607 	.word	0x0800d607
 800d454:	0800d607 	.word	0x0800d607
 800d458:	0800d607 	.word	0x0800d607
 800d45c:	0800d607 	.word	0x0800d607
 800d460:	0800d607 	.word	0x0800d607
 800d464:	0800d607 	.word	0x0800d607
 800d468:	0800d607 	.word	0x0800d607
 800d46c:	0800d607 	.word	0x0800d607
 800d470:	0800d607 	.word	0x0800d607
 800d474:	0800d607 	.word	0x0800d607
 800d478:	0800d607 	.word	0x0800d607
 800d47c:	0800d5bd 	.word	0x0800d5bd
 800d480:	0800d5c3 	.word	0x0800d5c3
 800d484:	0800d5d1 	.word	0x0800d5d1
 800d488:	0800d607 	.word	0x0800d607
 800d48c:	0800d607 	.word	0x0800d607
 800d490:	0800d5d7 	.word	0x0800d5d7
 800d494:	0800d5dd 	.word	0x0800d5dd
 800d498:	0800d607 	.word	0x0800d607
 800d49c:	0800d5e3 	.word	0x0800d5e3
 800d4a0:	0800d5f3 	.word	0x0800d5f3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU433_RX_MIN_DATARATE;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	61bb      	str	r3, [r7, #24]
            break;
 800d4a8:	e0ae      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU433_TX_MIN_DATARATE;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	61bb      	str	r3, [r7, #24]
            break;
 800d4ae:	e0ab      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU433_DEFAULT_DATARATE;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	61bb      	str	r3, [r7, #24]
            break;
 800d4b4:	e0a8      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d4bc:	733b      	strb	r3, [r7, #12]
 800d4be:	2307      	movs	r3, #7
 800d4c0:	737b      	strb	r3, [r7, #13]
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73bb      	strb	r3, [r7, #14]
 800d4c6:	2310      	movs	r3, #16
 800d4c8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU433_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU433_TX_MIN_DATARATE,
                .NbChannels = EU433_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d4ca:	4b53      	ldr	r3, [pc, #332]	; (800d618 <RegionEU433GetPhyParam+0x278>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d4d2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 800d4d4:	4b50      	ldr	r3, [pc, #320]	; (800d618 <RegionEU433GetPhyParam+0x278>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d4d8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d4da:	f107 030c 	add.w	r3, r7, #12
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff fe5f 	bl	800d1a2 <RegionCommonGetNextLowerTxDr>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	61bb      	str	r3, [r7, #24]
            break;
 800d4e8:	e08e      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU433_MAX_TX_POWER;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	61bb      	str	r3, [r7, #24]
            break;
 800d4ee:	e08b      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU433_DEFAULT_TX_POWER;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	61bb      	str	r3, [r7, #24]
            break;
 800d4f4:	e088      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d4f6:	2340      	movs	r3, #64	; 0x40
 800d4f8:	61bb      	str	r3, [r7, #24]
            break;
 800d4fa:	e085      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d4fc:	2320      	movs	r3, #32
 800d4fe:	61bb      	str	r3, [r7, #24]
            break;
 800d500:	e082      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d508:	461a      	mov	r2, r3
 800d50a:	4b44      	ldr	r3, [pc, #272]	; (800d61c <RegionEU433GetPhyParam+0x27c>)
 800d50c:	5c9b      	ldrb	r3, [r3, r2]
 800d50e:	61bb      	str	r3, [r7, #24]
            break;
 800d510:	e07a      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d518:	461a      	mov	r2, r3
 800d51a:	4b41      	ldr	r3, [pc, #260]	; (800d620 <RegionEU433GetPhyParam+0x280>)
 800d51c:	5c9b      	ldrb	r3, [r3, r2]
 800d51e:	61bb      	str	r3, [r7, #24]
            break;
 800d520:	e072      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 800d522:	2301      	movs	r3, #1
 800d524:	61bb      	str	r3, [r7, #24]
            break;
 800d526:	e06f      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU433_MAX_RX_WINDOW;
 800d528:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d52c:	61bb      	str	r3, [r7, #24]
            break;
 800d52e:	e06b      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d534:	61bb      	str	r3, [r7, #24]
            break;
 800d536:	e067      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d538:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d53c:	61bb      	str	r3, [r7, #24]
            break;
 800d53e:	e063      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d540:	f241 3388 	movw	r3, #5000	; 0x1388
 800d544:	61bb      	str	r3, [r7, #24]
            break;
 800d546:	e05f      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d548:	f241 7370 	movw	r3, #6000	; 0x1770
 800d54c:	61bb      	str	r3, [r7, #24]
            break;
 800d54e:	e05b      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800d550:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d554:	61bb      	str	r3, [r7, #24]
            break;
 800d556:	e057      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800d558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d55c:	4831      	ldr	r0, [pc, #196]	; (800d624 <RegionEU433GetPhyParam+0x284>)
 800d55e:	f000 fce3 	bl	800df28 <randr>
 800d562:	4603      	mov	r3, r0
 800d564:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800d568:	61bb      	str	r3, [r7, #24]
            break;
 800d56a:	e04d      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 800d56c:	2300      	movs	r3, #0
 800d56e:	61bb      	str	r3, [r7, #24]
            break;
 800d570:	e04a      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU433_RX_WND_2_FREQ;
 800d572:	4b2d      	ldr	r3, [pc, #180]	; (800d628 <RegionEU433GetPhyParam+0x288>)
 800d574:	61bb      	str	r3, [r7, #24]
            break;
 800d576:	e047      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU433_RX_WND_2_DR;
 800d578:	2300      	movs	r3, #0
 800d57a:	61bb      	str	r3, [r7, #24]
            break;
 800d57c:	e044      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d57e:	4b26      	ldr	r3, [pc, #152]	; (800d618 <RegionEU433GetPhyParam+0x278>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800d586:	61bb      	str	r3, [r7, #24]
            break;
 800d588:	e03e      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d58a:	4b23      	ldr	r3, [pc, #140]	; (800d618 <RegionEU433GetPhyParam+0x278>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800d592:	61bb      	str	r3, [r7, #24]
            break;
 800d594:	e038      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 800d596:	2310      	movs	r3, #16
 800d598:	61bb      	str	r3, [r7, #24]
            break;
 800d59a:	e035      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d59c:	4b1e      	ldr	r3, [pc, #120]	; (800d618 <RegionEU433GetPhyParam+0x278>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	61bb      	str	r3, [r7, #24]
            break;
 800d5a2:	e031      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU433_DEFAULT_UPLINK_DWELL_TIME;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	61bb      	str	r3, [r7, #24]
            break;
 800d5a8:	e02e      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	61bb      	str	r3, [r7, #24]
            break;
 800d5ae:	e02b      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 800d5b0:	4b1e      	ldr	r3, [pc, #120]	; (800d62c <RegionEU433GetPhyParam+0x28c>)
 800d5b2:	61bb      	str	r3, [r7, #24]
            break;
 800d5b4:	e028      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 800d5b6:	4b1e      	ldr	r3, [pc, #120]	; (800d630 <RegionEU433GetPhyParam+0x290>)
 800d5b8:	61bb      	str	r3, [r7, #24]
            break;
 800d5ba:	e025      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 800d5bc:	4b1a      	ldr	r3, [pc, #104]	; (800d628 <RegionEU433GetPhyParam+0x288>)
 800d5be:	61bb      	str	r3, [r7, #24]
            break;
 800d5c0:	e022      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 800d5c2:	2311      	movs	r3, #17
 800d5c4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 800d5c6:	2302      	movs	r3, #2
 800d5c8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU433_RFU2_SIZE;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	76bb      	strb	r3, [r7, #26]
            break;
 800d5ce:	e01b      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	61bb      	str	r3, [r7, #24]
            break;
 800d5d4:	e018      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU433_PING_SLOT_CHANNEL_FREQ;
 800d5d6:	4b14      	ldr	r3, [pc, #80]	; (800d628 <RegionEU433GetPhyParam+0x288>)
 800d5d8:	61bb      	str	r3, [r7, #24]
            break;
 800d5da:	e015      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	61bb      	str	r3, [r7, #24]
            break;
 800d5e0:	e012      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU433[getPhy->Datarate];
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4b12      	ldr	r3, [pc, #72]	; (800d634 <RegionEU433GetPhyParam+0x294>)
 800d5ec:	5c9b      	ldrb	r3, [r3, r2]
 800d5ee:	61bb      	str	r3, [r7, #24]
            break;
 800d5f0:	e00a      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU433 );
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d5f8:	490f      	ldr	r1, [pc, #60]	; (800d638 <RegionEU433GetPhyParam+0x298>)
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff fe24 	bl	800d248 <RegionCommonGetBandwidth>
 800d600:	4603      	mov	r3, r0
 800d602:	61bb      	str	r3, [r7, #24]
            break;
 800d604:	e000      	b.n	800d608 <RegionEU433GetPhyParam+0x268>
        }
        default:
        {
            break;
 800d606:	bf00      	nop
        }
    }

#endif /* REGION_EU433 */
    return phyParam;
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	61fb      	str	r3, [r7, #28]
 800d60c:	69fb      	ldr	r3, [r7, #28]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3720      	adds	r7, #32
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20001f14 	.word	0x20001f14
 800d61c:	08015024 	.word	0x08015024
 800d620:	0801502c 	.word	0x0801502c
 800d624:	fffffc18 	.word	0xfffffc18
 800d628:	19e87628 	.word	0x19e87628
 800d62c:	41426666 	.word	0x41426666
 800d630:	4009999a 	.word	0x4009999a
 800d634:	08014ffc 	.word	0x08014ffc
 800d638:	08015004 	.word	0x08015004

0800d63c <RegionEU433InitDefaults>:
#endif /* REGION_VERSION */
#endif /* REGION_EU433 */
}

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b092      	sub	sp, #72	; 0x48
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU433 )
    Band_t bands[EU433_MAX_NB_BANDS] =
 800d644:	2364      	movs	r3, #100	; 0x64
 800d646:	863b      	strh	r3, [r7, #48]	; 0x30
 800d648:	2300      	movs	r3, #0
 800d64a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d64e:	2300      	movs	r3, #0
 800d650:	637b      	str	r3, [r7, #52]	; 0x34
 800d652:	2300      	movs	r3, #0
 800d654:	63bb      	str	r3, [r7, #56]	; 0x38
 800d656:	2300      	movs	r3, #0
 800d658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d65a:	2300      	movs	r3, #0
 800d65c:	643b      	str	r3, [r7, #64]	; 0x40
 800d65e:	2300      	movs	r3, #0
 800d660:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    {
        EU433_BAND0
    };

    switch( params->Type )
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	7a1b      	ldrb	r3, [r3, #8]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d05e      	beq.n	800d72a <RegionEU433InitDefaults+0xee>
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	dc6b      	bgt.n	800d748 <RegionEU433InitDefaults+0x10c>
 800d670:	2b00      	cmp	r3, #0
 800d672:	d002      	beq.n	800d67a <RegionEU433InitDefaults+0x3e>
 800d674:	2b01      	cmp	r3, #1
 800d676:	d03f      	beq.n	800d6f8 <RegionEU433InitDefaults+0xbc>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 800d678:	e066      	b.n	800d748 <RegionEU433InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d063      	beq.n	800d74a <RegionEU433InitDefaults+0x10e>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d05f      	beq.n	800d74a <RegionEU433InitDefaults+0x10e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a30      	ldr	r2, [pc, #192]	; (800d750 <RegionEU433InitDefaults+0x114>)
 800d690:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	4a2f      	ldr	r2, [pc, #188]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d698:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 800d69a:	4b2d      	ldr	r3, [pc, #180]	; (800d750 <RegionEU433InitDefaults+0x114>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6a4:	2218      	movs	r2, #24
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	f000 fc55 	bl	800df56 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU433_LC1;
 800d6ac:	4b29      	ldr	r3, [pc, #164]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a29      	ldr	r2, [pc, #164]	; (800d758 <RegionEU433InitDefaults+0x11c>)
 800d6b2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU433_LC2;
 800d6b8:	4b26      	ldr	r3, [pc, #152]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a27      	ldr	r2, [pc, #156]	; (800d75c <RegionEU433InitDefaults+0x120>)
 800d6be:	330c      	adds	r3, #12
 800d6c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU433_LC3;
 800d6c6:	4b23      	ldr	r3, [pc, #140]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a25      	ldr	r2, [pc, #148]	; (800d760 <RegionEU433InitDefaults+0x124>)
 800d6cc:	3318      	adds	r3, #24
 800d6ce:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d6d4:	4b1f      	ldr	r3, [pc, #124]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2207      	movs	r2, #7
 800d6da:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d6de:	4b1d      	ldr	r3, [pc, #116]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800d6e6:	4b1b      	ldr	r3, [pc, #108]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	f7ff fa11 	bl	800cb18 <RegionCommonChanMaskCopy>
 800d6f6:	e028      	b.n	800d74a <RegionEU433InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800d6f8:	4b16      	ldr	r3, [pc, #88]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800d700:	4b14      	ldr	r3, [pc, #80]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2200      	movs	r2, #0
 800d706:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800d708:	4b12      	ldr	r3, [pc, #72]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2200      	movs	r2, #0
 800d70e:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d710:	4b10      	ldr	r3, [pc, #64]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800d718:	4b0e      	ldr	r3, [pc, #56]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800d720:	2201      	movs	r2, #1
 800d722:	4619      	mov	r1, r3
 800d724:	f7ff f9f8 	bl	800cb18 <RegionCommonChanMaskCopy>
            break;
 800d728:	e00f      	b.n	800d74a <RegionEU433InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800d72a:	4b0a      	ldr	r3, [pc, #40]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800d732:	4b08      	ldr	r3, [pc, #32]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800d73a:	4b06      	ldr	r3, [pc, #24]	; (800d754 <RegionEU433InitDefaults+0x118>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	b292      	uxth	r2, r2
 800d742:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800d746:	e000      	b.n	800d74a <RegionEU433InitDefaults+0x10e>
            break;
 800d748:	bf00      	nop
        }
    }
#endif /* REGION_EU433 */
}
 800d74a:	3748      	adds	r7, #72	; 0x48
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20001f10 	.word	0x20001f10
 800d754:	20001f14 	.word	0x20001f14
 800d758:	080148f4 	.word	0x080148f4
 800d75c:	08014900 	.word	0x08014900
 800d760:	0801490c 	.word	0x0801490c

0800d764 <RegionEU433Verify>:

bool RegionEU433Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	460b      	mov	r3, r1
 800d76e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU433 )
    switch( phyAttribute )
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	2b0f      	cmp	r3, #15
 800d774:	d867      	bhi.n	800d846 <RegionEU433Verify+0xe2>
 800d776:	a201      	add	r2, pc, #4	; (adr r2, 800d77c <RegionEU433Verify+0x18>)
 800d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77c:	0800d7bd 	.word	0x0800d7bd
 800d780:	0800d847 	.word	0x0800d847
 800d784:	0800d847 	.word	0x0800d847
 800d788:	0800d847 	.word	0x0800d847
 800d78c:	0800d847 	.word	0x0800d847
 800d790:	0800d7cb 	.word	0x0800d7cb
 800d794:	0800d7e9 	.word	0x0800d7e9
 800d798:	0800d807 	.word	0x0800d807
 800d79c:	0800d847 	.word	0x0800d847
 800d7a0:	0800d825 	.word	0x0800d825
 800d7a4:	0800d825 	.word	0x0800d825
 800d7a8:	0800d847 	.word	0x0800d847
 800d7ac:	0800d847 	.word	0x0800d847
 800d7b0:	0800d847 	.word	0x0800d847
 800d7b4:	0800d847 	.word	0x0800d847
 800d7b8:	0800d843 	.word	0x0800d843
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff fd77 	bl	800d2b4 <VerifyRfFreq>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	e03e      	b.n	800d848 <RegionEU433Verify+0xe4>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE );
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f993 3000 	ldrsb.w	r3, [r3]
 800d7d0:	2207      	movs	r2, #7
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7ff f956 	bl	800ca86 <RegionCommonValueInRange>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	bf14      	ite	ne
 800d7e0:	2301      	movne	r3, #1
 800d7e2:	2300      	moveq	r3, #0
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	e02f      	b.n	800d848 <RegionEU433Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f993 3000 	ldrsb.w	r3, [r3]
 800d7ee:	2205      	movs	r2, #5
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff f947 	bl	800ca86 <RegionCommonValueInRange>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	bf14      	ite	ne
 800d7fe:	2301      	movne	r3, #1
 800d800:	2300      	moveq	r3, #0
 800d802:	b2db      	uxtb	r3, r3
 800d804:	e020      	b.n	800d848 <RegionEU433Verify+0xe4>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE );
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f993 3000 	ldrsb.w	r3, [r3]
 800d80c:	2207      	movs	r2, #7
 800d80e:	2100      	movs	r1, #0
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff f938 	bl	800ca86 <RegionCommonValueInRange>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bf14      	ite	ne
 800d81c:	2301      	movne	r3, #1
 800d81e:	2300      	moveq	r3, #0
 800d820:	b2db      	uxtb	r3, r3
 800d822:	e011      	b.n	800d848 <RegionEU433Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER );
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f993 3000 	ldrsb.w	r3, [r3]
 800d82a:	2205      	movs	r2, #5
 800d82c:	2100      	movs	r1, #0
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff f929 	bl	800ca86 <RegionCommonValueInRange>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	bf14      	ite	ne
 800d83a:	2301      	movne	r3, #1
 800d83c:	2300      	moveq	r3, #0
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	e002      	b.n	800d848 <RegionEU433Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU433_DUTY_CYCLE_ENABLED;
 800d842:	2301      	movs	r3, #1
 800d844:	e000      	b.n	800d848 <RegionEU433Verify+0xe4>
        }
        default:
            return false;
 800d846:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU433 */
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <RegionEU433ChanMaskSet>:
    }
#endif /* REGION_EU433 */
}

bool RegionEU433ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU433 )
    switch( chanMaskSet->ChannelsMaskType )
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	791b      	ldrb	r3, [r3, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <RegionEU433ChanMaskSet+0x16>
 800d860:	2b01      	cmp	r3, #1
 800d862:	d00b      	beq.n	800d87c <RegionEU433ChanMaskSet+0x2c>
 800d864:	e015      	b.n	800d892 <RegionEU433ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d866:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <RegionEU433ChanMaskSet+0x50>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2201      	movs	r2, #1
 800d874:	4619      	mov	r1, r3
 800d876:	f7ff f94f 	bl	800cb18 <RegionCommonChanMaskCopy>
            break;
 800d87a:	e00c      	b.n	800d896 <RegionEU433ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d87c:	4b08      	ldr	r3, [pc, #32]	; (800d8a0 <RegionEU433ChanMaskSet+0x50>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2201      	movs	r2, #1
 800d88a:	4619      	mov	r1, r3
 800d88c:	f7ff f944 	bl	800cb18 <RegionCommonChanMaskCopy>
            break;
 800d890:	e001      	b.n	800d896 <RegionEU433ChanMaskSet+0x46>
        }
        default:
            return false;
 800d892:	2300      	movs	r3, #0
 800d894:	e000      	b.n	800d898 <RegionEU433ChanMaskSet+0x48>
    }
    return true;
 800d896:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	20001f14 	.word	0x20001f14

0800d8a4 <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	60ba      	str	r2, [r7, #8]
 800d8ac:	607b      	str	r3, [r7, #4]
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	73fb      	strb	r3, [r7, #15]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU433 )
    uint32_t tSymbolInUs = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 800d8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8be:	2b07      	cmp	r3, #7
 800d8c0:	bfa8      	it	ge
 800d8c2:	2307      	movge	r3, #7
 800d8c4:	b25a      	sxtb	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU433 );
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d8d0:	491e      	ldr	r1, [pc, #120]	; (800d94c <RegionEU433ComputeRxWindowParameters+0xa8>)
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fcb8 	bl	800d248 <RegionCommonGetBandwidth>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d8e6:	2b07      	cmp	r3, #7
 800d8e8:	d10a      	bne.n	800d900 <RegionEU433ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4b17      	ldr	r3, [pc, #92]	; (800d950 <RegionEU433ComputeRxWindowParameters+0xac>)
 800d8f4:	5c9b      	ldrb	r3, [r3, r2]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff fa3a 	bl	800cd70 <RegionCommonComputeSymbolTimeFsk>
 800d8fc:	6178      	str	r0, [r7, #20]
 800d8fe:	e011      	b.n	800d924 <RegionEU433ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d906:	461a      	mov	r2, r3
 800d908:	4b11      	ldr	r3, [pc, #68]	; (800d950 <RegionEU433ComputeRxWindowParameters+0xac>)
 800d90a:	5c9a      	ldrb	r2, [r3, r2]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d912:	4619      	mov	r1, r3
 800d914:	4b0d      	ldr	r3, [pc, #52]	; (800d94c <RegionEU433ComputeRxWindowParameters+0xa8>)
 800d916:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7ff fa11 	bl	800cd44 <RegionCommonComputeSymbolTimeLoRa>
 800d922:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d924:	4b0b      	ldr	r3, [pc, #44]	; (800d954 <RegionEU433ComputeRxWindowParameters+0xb0>)
 800d926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d928:	4798      	blx	r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	3308      	adds	r3, #8
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	320c      	adds	r2, #12
 800d932:	7bb9      	ldrb	r1, [r7, #14]
 800d934:	9201      	str	r2, [sp, #4]
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	4603      	mov	r3, r0
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	6978      	ldr	r0, [r7, #20]
 800d93e:	f7ff fa27 	bl	800cd90 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU433 */
}
 800d942:	bf00      	nop
 800d944:	3718      	adds	r7, #24
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	08015004 	.word	0x08015004
 800d950:	08014ffc 	.word	0x08014ffc
 800d954:	08015034 	.word	0x08015034

0800d958 <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d958:	b5b0      	push	{r4, r5, r7, lr}
 800d95a:	b090      	sub	sp, #64	; 0x40
 800d95c:	af0a      	add	r7, sp, #40	; 0x28
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 800d96c:	2300      	movs	r3, #0
 800d96e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d976:	4b5a      	ldr	r3, [pc, #360]	; (800dae0 <RegionEU433RxConfig+0x188>)
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	4798      	blx	r3
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <RegionEU433RxConfig+0x2e>
    {
        return false;
 800d982:	2300      	movs	r3, #0
 800d984:	e0a8      	b.n	800dad8 <RegionEU433RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	7cdb      	ldrb	r3, [r3, #19]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d126      	bne.n	800d9dc <RegionEU433RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d98e:	4b55      	ldr	r3, [pc, #340]	; (800dae4 <RegionEU433RxConfig+0x18c>)
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	4619      	mov	r1, r3
 800d998:	460b      	mov	r3, r1
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	440b      	add	r3, r1
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d9a6:	4b4f      	ldr	r3, [pc, #316]	; (800dae4 <RegionEU433RxConfig+0x18c>)
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	440b      	add	r3, r1
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00c      	beq.n	800d9dc <RegionEU433RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 800d9c2:	4b48      	ldr	r3, [pc, #288]	; (800dae4 <RegionEU433RxConfig+0x18c>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	440b      	add	r3, r1
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 800d9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9e0:	4a41      	ldr	r2, [pc, #260]	; (800dae8 <RegionEU433RxConfig+0x190>)
 800d9e2:	5cd3      	ldrb	r3, [r2, r3]
 800d9e4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 800d9e6:	4b3e      	ldr	r3, [pc, #248]	; (800dae0 <RegionEU433RxConfig+0x188>)
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	6938      	ldr	r0, [r7, #16]
 800d9ec:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9f2:	2b07      	cmp	r3, #7
 800d9f4:	d128      	bne.n	800da48 <RegionEU433RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d9fa:	4b39      	ldr	r3, [pc, #228]	; (800dae0 <RegionEU433RxConfig+0x188>)
 800d9fc:	699c      	ldr	r4, [r3, #24]
 800d9fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da06:	fb02 f303 	mul.w	r3, r2, r3
 800da0a:	4619      	mov	r1, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	b29b      	uxth	r3, r3
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	7c92      	ldrb	r2, [r2, #18]
 800da16:	7df8      	ldrb	r0, [r7, #23]
 800da18:	9209      	str	r2, [sp, #36]	; 0x24
 800da1a:	2200      	movs	r2, #0
 800da1c:	9208      	str	r2, [sp, #32]
 800da1e:	2200      	movs	r2, #0
 800da20:	9207      	str	r2, [sp, #28]
 800da22:	2200      	movs	r2, #0
 800da24:	9206      	str	r2, [sp, #24]
 800da26:	2201      	movs	r2, #1
 800da28:	9205      	str	r2, [sp, #20]
 800da2a:	2200      	movs	r2, #0
 800da2c:	9204      	str	r2, [sp, #16]
 800da2e:	2200      	movs	r2, #0
 800da30:	9203      	str	r2, [sp, #12]
 800da32:	9302      	str	r3, [sp, #8]
 800da34:	2305      	movs	r3, #5
 800da36:	9301      	str	r3, [sp, #4]
 800da38:	4b2c      	ldr	r3, [pc, #176]	; (800daec <RegionEU433RxConfig+0x194>)
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	2300      	movs	r3, #0
 800da3e:	460a      	mov	r2, r1
 800da40:	f24c 3150 	movw	r1, #50000	; 0xc350
 800da44:	47a0      	blx	r4
 800da46:	e024      	b.n	800da92 <RegionEU433RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 800da48:	2301      	movs	r3, #1
 800da4a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800da4c:	4b24      	ldr	r3, [pc, #144]	; (800dae0 <RegionEU433RxConfig+0x188>)
 800da4e:	699c      	ldr	r4, [r3, #24]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	789b      	ldrb	r3, [r3, #2]
 800da54:	461d      	mov	r5, r3
 800da56:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	7c92      	ldrb	r2, [r2, #18]
 800da64:	7df8      	ldrb	r0, [r7, #23]
 800da66:	9209      	str	r2, [sp, #36]	; 0x24
 800da68:	2201      	movs	r2, #1
 800da6a:	9208      	str	r2, [sp, #32]
 800da6c:	2200      	movs	r2, #0
 800da6e:	9207      	str	r2, [sp, #28]
 800da70:	2200      	movs	r2, #0
 800da72:	9206      	str	r2, [sp, #24]
 800da74:	2200      	movs	r2, #0
 800da76:	9205      	str	r2, [sp, #20]
 800da78:	2200      	movs	r2, #0
 800da7a:	9204      	str	r2, [sp, #16]
 800da7c:	2200      	movs	r2, #0
 800da7e:	9203      	str	r2, [sp, #12]
 800da80:	9302      	str	r3, [sp, #8]
 800da82:	2308      	movs	r3, #8
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	2300      	movs	r3, #0
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	2301      	movs	r3, #1
 800da8c:	460a      	mov	r2, r1
 800da8e:	4629      	mov	r1, r5
 800da90:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	7c5b      	ldrb	r3, [r3, #17]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <RegionEU433RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 800da9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da9e:	4a14      	ldr	r2, [pc, #80]	; (800daf0 <RegionEU433RxConfig+0x198>)
 800daa0:	5cd3      	ldrb	r3, [r2, r3]
 800daa2:	75bb      	strb	r3, [r7, #22]
 800daa4:	e004      	b.n	800dab0 <RegionEU433RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 800daa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daaa:	4a12      	ldr	r2, [pc, #72]	; (800daf4 <RegionEU433RxConfig+0x19c>)
 800daac:	5cd3      	ldrb	r3, [r2, r3]
 800daae:	75bb      	strb	r3, [r7, #22]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800dab0:	4b0b      	ldr	r3, [pc, #44]	; (800dae0 <RegionEU433RxConfig+0x188>)
 800dab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab4:	7dba      	ldrb	r2, [r7, #22]
 800dab6:	320d      	adds	r2, #13
 800dab8:	b2d1      	uxtb	r1, r2
 800daba:	7dfa      	ldrb	r2, [r7, #23]
 800dabc:	4610      	mov	r0, r2
 800dabe:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	7cdb      	ldrb	r3, [r3, #19]
 800dac4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800dac8:	6939      	ldr	r1, [r7, #16]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff fbda 	bl	800d284 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	7bfa      	ldrb	r2, [r7, #15]
 800dad4:	701a      	strb	r2, [r3, #0]
    return true;
 800dad6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bdb0      	pop	{r4, r5, r7, pc}
 800dae0:	08015034 	.word	0x08015034
 800dae4:	20001f14 	.word	0x20001f14
 800dae8:	08014ffc 	.word	0x08014ffc
 800daec:	00014585 	.word	0x00014585
 800daf0:	0801502c 	.word	0x0801502c
 800daf4:	08015024 	.word	0x08015024

0800daf8 <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800daf8:	b590      	push	{r4, r7, lr}
 800dafa:	b093      	sub	sp, #76	; 0x4c
 800dafc:	af0a      	add	r7, sp, #40	; 0x28
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800db0a:	461a      	mov	r2, r3
 800db0c:	4b5d      	ldr	r3, [pc, #372]	; (800dc84 <RegionEU433TxConfig+0x18c>)
 800db0e:	5c9b      	ldrb	r3, [r3, r2]
 800db10:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800db18:	4b5b      	ldr	r3, [pc, #364]	; (800dc88 <RegionEU433TxConfig+0x190>)
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	4b5b      	ldr	r3, [pc, #364]	; (800dc8c <RegionEU433TxConfig+0x194>)
 800db1e:	6819      	ldr	r1, [r3, #0]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	461c      	mov	r4, r3
 800db26:	4623      	mov	r3, r4
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	4423      	add	r3, r4
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	440b      	add	r3, r1
 800db30:	3309      	adds	r3, #9
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	4619      	mov	r1, r3
 800db36:	460b      	mov	r3, r1
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	440b      	add	r3, r1
 800db3c:	00db      	lsls	r3, r3, #3
 800db3e:	4413      	add	r3, r2
 800db40:	3302      	adds	r3, #2
 800db42:	f993 3000 	ldrsb.w	r3, [r3]
 800db46:	4619      	mov	r1, r3
 800db48:	f7ff fb69 	bl	800d21e <RegionCommonLimitTxPower>
 800db4c:	4603      	mov	r3, r0
 800db4e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU433 );
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800db56:	494e      	ldr	r1, [pc, #312]	; (800dc90 <RegionEU433TxConfig+0x198>)
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff fb75 	bl	800d248 <RegionCommonGetBandwidth>
 800db5e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6859      	ldr	r1, [r3, #4]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	689a      	ldr	r2, [r3, #8]
 800db6c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800db70:	4618      	mov	r0, r3
 800db72:	f7ff f9c5 	bl	800cf00 <RegionCommonComputeTxPower>
 800db76:	4603      	mov	r3, r0
 800db78:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800db7a:	4b46      	ldr	r3, [pc, #280]	; (800dc94 <RegionEU433TxConfig+0x19c>)
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	4b43      	ldr	r3, [pc, #268]	; (800dc8c <RegionEU433TxConfig+0x194>)
 800db80:	6819      	ldr	r1, [r3, #0]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	4618      	mov	r0, r3
 800db88:	4603      	mov	r3, r0
 800db8a:	005b      	lsls	r3, r3, #1
 800db8c:	4403      	add	r3, r0
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	440b      	add	r3, r1
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800db9e:	2b07      	cmp	r3, #7
 800dba0:	d124      	bne.n	800dbec <RegionEU433TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800dba6:	4b3b      	ldr	r3, [pc, #236]	; (800dc94 <RegionEU433TxConfig+0x19c>)
 800dba8:	69dc      	ldr	r4, [r3, #28]
 800dbaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800dbae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dbb2:	fb02 f303 	mul.w	r3, r2, r3
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800dbbc:	7ff8      	ldrb	r0, [r7, #31]
 800dbbe:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800dbc2:	9308      	str	r3, [sp, #32]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	9307      	str	r3, [sp, #28]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	9306      	str	r3, [sp, #24]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	9305      	str	r3, [sp, #20]
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	9304      	str	r3, [sp, #16]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	9303      	str	r3, [sp, #12]
 800dbd8:	2305      	movs	r3, #5
 800dbda:	9302      	str	r3, [sp, #8]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	9301      	str	r3, [sp, #4]
 800dbe0:	9200      	str	r2, [sp, #0]
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800dbe8:	47a0      	blx	r4
 800dbea:	e01d      	b.n	800dc28 <RegionEU433TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 800dbec:	2301      	movs	r3, #1
 800dbee:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800dbf0:	4b28      	ldr	r3, [pc, #160]	; (800dc94 <RegionEU433TxConfig+0x19c>)
 800dbf2:	69dc      	ldr	r4, [r3, #28]
 800dbf4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800dbf8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800dbfc:	7ff8      	ldrb	r0, [r7, #31]
 800dbfe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800dc02:	9208      	str	r2, [sp, #32]
 800dc04:	2200      	movs	r2, #0
 800dc06:	9207      	str	r2, [sp, #28]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	9206      	str	r2, [sp, #24]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	9205      	str	r2, [sp, #20]
 800dc10:	2201      	movs	r2, #1
 800dc12:	9204      	str	r2, [sp, #16]
 800dc14:	2200      	movs	r2, #0
 800dc16:	9203      	str	r2, [sp, #12]
 800dc18:	2208      	movs	r2, #8
 800dc1a:	9202      	str	r2, [sp, #8]
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	9201      	str	r2, [sp, #4]
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	2200      	movs	r2, #0
 800dc26:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800dc28:	4b18      	ldr	r3, [pc, #96]	; (800dc8c <RegionEU433TxConfig+0x194>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	4619      	mov	r1, r3
 800dc32:	460b      	mov	r3, r1
 800dc34:	005b      	lsls	r3, r3, #1
 800dc36:	440b      	add	r3, r1
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800dc44:	4619      	mov	r1, r3
 800dc46:	4610      	mov	r0, r2
 800dc48:	f7ff fb29 	bl	800d29e <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	899b      	ldrh	r3, [r3, #12]
 800dc56:	4619      	mov	r1, r3
 800dc58:	4610      	mov	r0, r2
 800dc5a:	f7ff fb51 	bl	800d300 <GetTimeOnAir>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800dc64:	4b0b      	ldr	r3, [pc, #44]	; (800dc94 <RegionEU433TxConfig+0x19c>)
 800dc66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	8992      	ldrh	r2, [r2, #12]
 800dc6c:	b2d1      	uxtb	r1, r2
 800dc6e:	7ffa      	ldrb	r2, [r7, #31]
 800dc70:	4610      	mov	r0, r2
 800dc72:	4798      	blx	r3

    *txPower = txPowerLimited;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	7f7a      	ldrb	r2, [r7, #29]
 800dc78:	701a      	strb	r2, [r3, #0]
    return true;
 800dc7a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3724      	adds	r7, #36	; 0x24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd90      	pop	{r4, r7, pc}
 800dc84:	08014ffc 	.word	0x08014ffc
 800dc88:	20001f10 	.word	0x20001f10
 800dc8c:	20001f14 	.word	0x20001f14
 800dc90:	08015004 	.word	0x08015004
 800dc94:	08015034 	.word	0x08015034

0800dc98 <RegionEU433AlternateDr>:
#endif /* REGION_EU433 */
    return status;
}

int8_t RegionEU433AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	460a      	mov	r2, r1
 800dca2:	71fb      	strb	r3, [r7, #7]
 800dca4:	4613      	mov	r3, r2
 800dca6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU433 )
    return currentDr;
 800dca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU433 */
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bc80      	pop	{r7}
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b09a      	sub	sp, #104	; 0x68
 800dcbc:	af02      	add	r7, sp, #8
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
 800dcc4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU433 )
    uint8_t nbEnabledChannels = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	605a      	str	r2, [r3, #4]
 800dce0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800dce2:	230c      	movs	r3, #12
 800dce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU433_JOIN_CHANNELS;
 800dce8:	2307      	movs	r3, #7
 800dcea:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800dcec:	4b47      	ldr	r3, [pc, #284]	; (800de0c <RegionEU433NextChannel+0x154>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fee1 	bl	800cac0 <RegionCommonCountChannels>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <RegionEU433NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800dd04:	4b41      	ldr	r3, [pc, #260]	; (800de0c <RegionEU433NextChannel+0x154>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800dd0c:	4b3f      	ldr	r3, [pc, #252]	; (800de0c <RegionEU433NextChannel+0x154>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f042 0207 	orr.w	r2, r2, #7
 800dd14:	b292      	uxth	r2, r2
 800dd16:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	7a5b      	ldrb	r3, [r3, #9]
 800dd1e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800dd2a:	4b38      	ldr	r3, [pc, #224]	; (800de0c <RegionEU433NextChannel+0x154>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800dd32:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800dd34:	4b35      	ldr	r3, [pc, #212]	; (800de0c <RegionEU433NextChannel+0x154>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800dd3a:	4b35      	ldr	r3, [pc, #212]	; (800de10 <RegionEU433NextChannel+0x158>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU433_MAX_NB_CHANNELS;
 800dd40:	2310      	movs	r3, #16
 800dd42:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 800dd44:	f107 0312 	add.w	r3, r7, #18
 800dd48:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	7a9b      	ldrb	r3, [r3, #10]
 800dd5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU433_MAX_NB_BANDS;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dd6a:	320c      	adds	r2, #12
 800dd6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd70:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	7d1b      	ldrb	r3, [r3, #20]
 800dd78:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	8adb      	ldrh	r3, [r3, #22]
 800dd86:	4619      	mov	r1, r3
 800dd88:	4610      	mov	r0, r2
 800dd8a:	f7ff fab9 	bl	800d300 <GetTimeOnAir>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800dd92:	f107 0314 	add.w	r3, r7, #20
 800dd96:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800dd98:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 800dd9c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800dda0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	9301      	str	r3, [sp, #4]
 800dda8:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	460b      	mov	r3, r1
 800ddb0:	6839      	ldr	r1, [r7, #0]
 800ddb2:	f7ff f994 	bl	800d0de <RegionCommonIdentifyChannels>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800ddbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10e      	bne.n	800dde2 <RegionEU433NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ddc4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	4619      	mov	r1, r3
 800ddcc:	2000      	movs	r0, #0
 800ddce:	f000 f8ab 	bl	800df28 <randr>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	3360      	adds	r3, #96	; 0x60
 800ddd6:	443b      	add	r3, r7
 800ddd8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	701a      	strb	r2, [r3, #0]
 800dde0:	e00e      	b.n	800de00 <RegionEU433NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800dde2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dde6:	2b0c      	cmp	r3, #12
 800dde8:	d10a      	bne.n	800de00 <RegionEU433NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ddea:	4b08      	ldr	r3, [pc, #32]	; (800de0c <RegionEU433NextChannel+0x154>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800ddf2:	4b06      	ldr	r3, [pc, #24]	; (800de0c <RegionEU433NextChannel+0x154>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f042 0207 	orr.w	r2, r2, #7
 800ddfa:	b292      	uxth	r2, r2
 800ddfc:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 800de00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800de04:	4618      	mov	r0, r3
 800de06:	3760      	adds	r7, #96	; 0x60
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	20001f14 	.word	0x20001f14
 800de10:	20001f10 	.word	0x20001f10

0800de14 <RegionEU433SetContinuousWave>:
#endif /* REGION_EU433 */
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU433SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800de14:	b590      	push	{r4, r7, lr}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU433 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800de22:	4b20      	ldr	r3, [pc, #128]	; (800dea4 <RegionEU433SetContinuousWave+0x90>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	4b20      	ldr	r3, [pc, #128]	; (800dea8 <RegionEU433SetContinuousWave+0x94>)
 800de28:	6819      	ldr	r1, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	461c      	mov	r4, r3
 800de30:	4623      	mov	r3, r4
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	4423      	add	r3, r4
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	440b      	add	r3, r1
 800de3a:	3309      	adds	r3, #9
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	4619      	mov	r1, r3
 800de40:	460b      	mov	r3, r1
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	440b      	add	r3, r1
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	4413      	add	r3, r2
 800de4a:	3302      	adds	r3, #2
 800de4c:	f993 3000 	ldrsb.w	r3, [r3]
 800de50:	4619      	mov	r1, r3
 800de52:	f7ff f9e4 	bl	800d21e <RegionCommonLimitTxPower>
 800de56:	4603      	mov	r3, r0
 800de58:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800de5e:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <RegionEU433SetContinuousWave+0x94>)
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	4619      	mov	r1, r3
 800de68:	460b      	mov	r3, r1
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	440b      	add	r3, r1
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6859      	ldr	r1, [r3, #4]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689a      	ldr	r2, [r3, #8]
 800de7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff f83c 	bl	800cf00 <RegionCommonComputeTxPower>
 800de88:	4603      	mov	r3, r0
 800de8a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800de8c:	4b07      	ldr	r3, [pc, #28]	; (800deac <RegionEU433SetContinuousWave+0x98>)
 800de8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	8992      	ldrh	r2, [r2, #12]
 800de94:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800de98:	68b8      	ldr	r0, [r7, #8]
 800de9a:	4798      	blx	r3
#endif /* REGION_EU433 */
}
 800de9c:	bf00      	nop
 800de9e:	3714      	adds	r7, #20
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd90      	pop	{r4, r7, pc}
 800dea4:	20001f10 	.word	0x20001f10
 800dea8:	20001f14 	.word	0x20001f14
 800deac:	08015034 	.word	0x08015034

0800deb0 <RegionEU433ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	4603      	mov	r3, r0
 800deb8:	71fb      	strb	r3, [r7, #7]
 800deba:	460b      	mov	r3, r1
 800debc:	71bb      	strb	r3, [r7, #6]
 800debe:	4613      	mov	r3, r2
 800dec0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU433 )
    int8_t datarate = dr - drOffset;
 800dec2:	79ba      	ldrb	r2, [r7, #6]
 800dec4:	797b      	ldrb	r3, [r7, #5]
 800dec6:	1ad3      	subs	r3, r2, r3
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 800decc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	da01      	bge.n	800ded8 <RegionEU433ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 800ded4:	2300      	movs	r3, #0
 800ded6:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 800ded8:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU433 */
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3714      	adds	r7, #20
 800dede:	46bd      	mov	sp, r7
 800dee0:	bc80      	pop	{r7}
 800dee2:	4770      	bx	lr

0800dee4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 800dee4:	b480      	push	{r7}
 800dee6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800dee8:	4b0d      	ldr	r3, [pc, #52]	; (800df20 <rand1+0x3c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a0d      	ldr	r2, [pc, #52]	; (800df24 <rand1+0x40>)
 800deee:	fb02 f303 	mul.w	r3, r2, r3
 800def2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800def6:	3339      	adds	r3, #57	; 0x39
 800def8:	4a09      	ldr	r2, [pc, #36]	; (800df20 <rand1+0x3c>)
 800defa:	6013      	str	r3, [r2, #0]
 800defc:	4b08      	ldr	r3, [pc, #32]	; (800df20 <rand1+0x3c>)
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	2303      	movs	r3, #3
 800df02:	fba3 1302 	umull	r1, r3, r3, r2
 800df06:	1ad1      	subs	r1, r2, r3
 800df08:	0849      	lsrs	r1, r1, #1
 800df0a:	440b      	add	r3, r1
 800df0c:	0f99      	lsrs	r1, r3, #30
 800df0e:	460b      	mov	r3, r1
 800df10:	07db      	lsls	r3, r3, #31
 800df12:	1a5b      	subs	r3, r3, r1
 800df14:	1ad1      	subs	r1, r2, r3
 800df16:	460b      	mov	r3, r1
}
 800df18:	4618      	mov	r0, r3
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bc80      	pop	{r7}
 800df1e:	4770      	bx	lr
 800df20:	2000027c 	.word	0x2000027c
 800df24:	41c64e6d 	.word	0x41c64e6d

0800df28 <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800df32:	f7ff ffd7 	bl	800dee4 <rand1>
 800df36:	4602      	mov	r2, r0
 800df38:	6839      	ldr	r1, [r7, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	1acb      	subs	r3, r1, r3
 800df3e:	3301      	adds	r3, #1
 800df40:	fb92 f1f3 	sdiv	r1, r2, r3
 800df44:	fb01 f303 	mul.w	r3, r1, r3
 800df48:	1ad2      	subs	r2, r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4413      	add	r3, r2
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800df56:	b480      	push	{r7}
 800df58:	b085      	sub	sp, #20
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	60f8      	str	r0, [r7, #12]
 800df5e:	60b9      	str	r1, [r7, #8]
 800df60:	4613      	mov	r3, r2
 800df62:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800df64:	e007      	b.n	800df76 <memcpy1+0x20>
    {
        *dst++ = *src++;
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	1c53      	adds	r3, r2, #1
 800df6a:	60bb      	str	r3, [r7, #8]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	1c59      	adds	r1, r3, #1
 800df70:	60f9      	str	r1, [r7, #12]
 800df72:	7812      	ldrb	r2, [r2, #0]
 800df74:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800df76:	88fb      	ldrh	r3, [r7, #6]
 800df78:	1e5a      	subs	r2, r3, #1
 800df7a:	80fa      	strh	r2, [r7, #6]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1f2      	bne.n	800df66 <memcpy1+0x10>
    }
}
 800df80:	bf00      	nop
 800df82:	bf00      	nop
 800df84:	3714      	adds	r7, #20
 800df86:	46bd      	mov	sp, r7
 800df88:	bc80      	pop	{r7}
 800df8a:	4770      	bx	lr

0800df8c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800df8c:	b480      	push	{r7}
 800df8e:	b085      	sub	sp, #20
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	4613      	mov	r3, r2
 800df98:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 800df9a:	88fb      	ldrh	r3, [r7, #6]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 800dfa4:	e007      	b.n	800dfb6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	1c53      	adds	r3, r2, #1
 800dfaa:	60bb      	str	r3, [r7, #8]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	1e59      	subs	r1, r3, #1
 800dfb0:	60f9      	str	r1, [r7, #12]
 800dfb2:	7812      	ldrb	r2, [r2, #0]
 800dfb4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800dfb6:	88fb      	ldrh	r3, [r7, #6]
 800dfb8:	1e5a      	subs	r2, r3, #1
 800dfba:	80fa      	strh	r2, [r7, #6]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1f2      	bne.n	800dfa6 <memcpyr+0x1a>
    }
}
 800dfc0:	bf00      	nop
 800dfc2:	bf00      	nop
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bc80      	pop	{r7}
 800dfca:	4770      	bx	lr

0800dfcc <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	70fb      	strb	r3, [r7, #3]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	803b      	strh	r3, [r7, #0]
    while( size-- )
 800dfdc:	e004      	b.n	800dfe8 <memset1+0x1c>
    {
        *dst++ = value;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	607a      	str	r2, [r7, #4]
 800dfe4:	78fa      	ldrb	r2, [r7, #3]
 800dfe6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800dfe8:	883b      	ldrh	r3, [r7, #0]
 800dfea:	1e5a      	subs	r2, r3, #1
 800dfec:	803a      	strh	r2, [r7, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1f5      	bne.n	800dfde <memset1+0x12>
    }
}
 800dff2:	bf00      	nop
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bc80      	pop	{r7}
 800dffc:	4770      	bx	lr
	...

0800e000 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af02      	add	r7, sp, #8
 800e006:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800e008:	4a24      	ldr	r2, [pc, #144]	; (800e09c <RadioInit+0x9c>)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800e00e:	4b24      	ldr	r3, [pc, #144]	; (800e0a0 <RadioInit+0xa0>)
 800e010:	2200      	movs	r2, #0
 800e012:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800e014:	4b22      	ldr	r3, [pc, #136]	; (800e0a0 <RadioInit+0xa0>)
 800e016:	2200      	movs	r2, #0
 800e018:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800e01a:	4b21      	ldr	r3, [pc, #132]	; (800e0a0 <RadioInit+0xa0>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800e020:	4b1f      	ldr	r3, [pc, #124]	; (800e0a0 <RadioInit+0xa0>)
 800e022:	2200      	movs	r2, #0
 800e024:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800e026:	481f      	ldr	r0, [pc, #124]	; (800e0a4 <RadioInit+0xa4>)
 800e028:	f001 ff86 	bl	800ff38 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800e02c:	4b1c      	ldr	r3, [pc, #112]	; (800e0a0 <RadioInit+0xa0>)
 800e02e:	2200      	movs	r2, #0
 800e030:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800e032:	4b1b      	ldr	r3, [pc, #108]	; (800e0a0 <RadioInit+0xa0>)
 800e034:	2200      	movs	r2, #0
 800e036:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800e038:	f002 fa1a 	bl	8010470 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800e03c:	2100      	movs	r1, #0
 800e03e:	2000      	movs	r0, #0
 800e040:	f002 fde6 	bl	8010c10 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800e044:	2204      	movs	r2, #4
 800e046:	2100      	movs	r1, #0
 800e048:	2001      	movs	r0, #1
 800e04a:	f002 fba3 	bl	8010794 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e04e:	2300      	movs	r3, #0
 800e050:	2200      	movs	r2, #0
 800e052:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e056:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e05a:	f002 fad3 	bl	8010604 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800e05e:	f000 fe91 	bl	800ed84 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800e062:	2300      	movs	r3, #0
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	4b10      	ldr	r3, [pc, #64]	; (800e0a8 <RadioInit+0xa8>)
 800e068:	2200      	movs	r2, #0
 800e06a:	f04f 31ff 	mov.w	r1, #4294967295
 800e06e:	480f      	ldr	r0, [pc, #60]	; (800e0ac <RadioInit+0xac>)
 800e070:	f003 fa3a 	bl	80114e8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800e074:	2300      	movs	r3, #0
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	4b0d      	ldr	r3, [pc, #52]	; (800e0b0 <RadioInit+0xb0>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	f04f 31ff 	mov.w	r1, #4294967295
 800e080:	480c      	ldr	r0, [pc, #48]	; (800e0b4 <RadioInit+0xb4>)
 800e082:	f003 fa31 	bl	80114e8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800e086:	4809      	ldr	r0, [pc, #36]	; (800e0ac <RadioInit+0xac>)
 800e088:	f003 fad2 	bl	8011630 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800e08c:	4809      	ldr	r0, [pc, #36]	; (800e0b4 <RadioInit+0xb4>)
 800e08e:	f003 facf 	bl	8011630 <UTIL_TIMER_Stop>
}
 800e092:	bf00      	nop
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20002018 	.word	0x20002018
 800e0a0:	2000201c 	.word	0x2000201c
 800e0a4:	0800f17d 	.word	0x0800f17d
 800e0a8:	0800f105 	.word	0x0800f105
 800e0ac:	20002078 	.word	0x20002078
 800e0b0:	0800f119 	.word	0x0800f119
 800e0b4:	20002090 	.word	0x20002090

0800e0b8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800e0bc:	f001 ff84 	bl	800ffc8 <SUBGRF_GetOperatingMode>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b07      	cmp	r3, #7
 800e0c4:	d00a      	beq.n	800e0dc <RadioGetStatus+0x24>
 800e0c6:	2b07      	cmp	r3, #7
 800e0c8:	dc0a      	bgt.n	800e0e0 <RadioGetStatus+0x28>
 800e0ca:	2b04      	cmp	r3, #4
 800e0cc:	d002      	beq.n	800e0d4 <RadioGetStatus+0x1c>
 800e0ce:	2b05      	cmp	r3, #5
 800e0d0:	d002      	beq.n	800e0d8 <RadioGetStatus+0x20>
 800e0d2:	e005      	b.n	800e0e0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800e0d4:	2302      	movs	r3, #2
 800e0d6:	e004      	b.n	800e0e2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e002      	b.n	800e0e2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e000      	b.n	800e0e2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800e0e0:	2300      	movs	r3, #0
    }
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	bd80      	pop	{r7, pc}
	...

0800e0e8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800e0f2:	4a2a      	ldr	r2, [pc, #168]	; (800e19c <RadioSetModem+0xb4>)
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800e0f8:	79fb      	ldrb	r3, [r7, #7]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f003 f8b9 	bl	8011272 <RFW_SetRadioModem>
    switch( modem )
 800e100:	79fb      	ldrb	r3, [r7, #7]
 800e102:	2b05      	cmp	r3, #5
 800e104:	d80e      	bhi.n	800e124 <RadioSetModem+0x3c>
 800e106:	a201      	add	r2, pc, #4	; (adr r2, 800e10c <RadioSetModem+0x24>)
 800e108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10c:	0800e133 	.word	0x0800e133
 800e110:	0800e141 	.word	0x0800e141
 800e114:	0800e125 	.word	0x0800e125
 800e118:	0800e167 	.word	0x0800e167
 800e11c:	0800e175 	.word	0x0800e175
 800e120:	0800e183 	.word	0x0800e183
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800e124:	2003      	movs	r0, #3
 800e126:	f002 fb0f 	bl	8010748 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800e12a:	4b1c      	ldr	r3, [pc, #112]	; (800e19c <RadioSetModem+0xb4>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	735a      	strb	r2, [r3, #13]
        break;
 800e130:	e02f      	b.n	800e192 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800e132:	2000      	movs	r0, #0
 800e134:	f002 fb08 	bl	8010748 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800e138:	4b18      	ldr	r3, [pc, #96]	; (800e19c <RadioSetModem+0xb4>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	735a      	strb	r2, [r3, #13]
        break;
 800e13e:	e028      	b.n	800e192 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800e140:	2001      	movs	r0, #1
 800e142:	f002 fb01 	bl	8010748 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800e146:	4b15      	ldr	r3, [pc, #84]	; (800e19c <RadioSetModem+0xb4>)
 800e148:	7b5a      	ldrb	r2, [r3, #13]
 800e14a:	4b14      	ldr	r3, [pc, #80]	; (800e19c <RadioSetModem+0xb4>)
 800e14c:	7b1b      	ldrb	r3, [r3, #12]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d01e      	beq.n	800e190 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800e152:	4b12      	ldr	r3, [pc, #72]	; (800e19c <RadioSetModem+0xb4>)
 800e154:	7b1a      	ldrb	r2, [r3, #12]
 800e156:	4b11      	ldr	r3, [pc, #68]	; (800e19c <RadioSetModem+0xb4>)
 800e158:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800e15a:	4b10      	ldr	r3, [pc, #64]	; (800e19c <RadioSetModem+0xb4>)
 800e15c:	7b5b      	ldrb	r3, [r3, #13]
 800e15e:	4618      	mov	r0, r3
 800e160:	f000 ff9a 	bl	800f098 <RadioSetPublicNetwork>
        }
        break;
 800e164:	e014      	b.n	800e190 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800e166:	2002      	movs	r0, #2
 800e168:	f002 faee 	bl	8010748 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800e16c:	4b0b      	ldr	r3, [pc, #44]	; (800e19c <RadioSetModem+0xb4>)
 800e16e:	2200      	movs	r2, #0
 800e170:	735a      	strb	r2, [r3, #13]
        break;
 800e172:	e00e      	b.n	800e192 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800e174:	2002      	movs	r0, #2
 800e176:	f002 fae7 	bl	8010748 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800e17a:	4b08      	ldr	r3, [pc, #32]	; (800e19c <RadioSetModem+0xb4>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	735a      	strb	r2, [r3, #13]
        break;
 800e180:	e007      	b.n	800e192 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800e182:	2000      	movs	r0, #0
 800e184:	f002 fae0 	bl	8010748 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800e188:	4b04      	ldr	r3, [pc, #16]	; (800e19c <RadioSetModem+0xb4>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	735a      	strb	r2, [r3, #13]
        break;
 800e18e:	e000      	b.n	800e192 <RadioSetModem+0xaa>
        break;
 800e190:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	2000201c 	.word	0x2000201c

0800e1a0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f002 fa87 	bl	80106bc <SUBGRF_SetRfFrequency>
}
 800e1ae:	bf00      	nop
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b090      	sub	sp, #64	; 0x40
 800e1ba:	af0a      	add	r7, sp, #40	; 0x28
 800e1bc:	60f8      	str	r0, [r7, #12]
 800e1be:	60b9      	str	r1, [r7, #8]
 800e1c0:	603b      	str	r3, [r7, #0]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800e1d2:	f000 fdea 	bl	800edaa <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	f7ff ff86 	bl	800e0e8 <RadioSetModem>

    RadioSetChannel( freq );
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f7ff ffdf 	bl	800e1a0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	9308      	str	r3, [sp, #32]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	9307      	str	r3, [sp, #28]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	9306      	str	r3, [sp, #24]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9305      	str	r3, [sp, #20]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	9304      	str	r3, [sp, #16]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	9303      	str	r3, [sp, #12]
 800e1fe:	2300      	movs	r3, #0
 800e200:	9302      	str	r3, [sp, #8]
 800e202:	2303      	movs	r3, #3
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	2300      	movs	r3, #0
 800e20c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800e210:	68b9      	ldr	r1, [r7, #8]
 800e212:	2000      	movs	r0, #0
 800e214:	f000 f83c 	bl	800e290 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800e218:	2000      	movs	r0, #0
 800e21a:	f000 fdcd 	bl	800edb8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800e21e:	f000 ff69 	bl	800f0f4 <RadioGetWakeupTime>
 800e222:	4603      	mov	r3, r0
 800e224:	4618      	mov	r0, r3
 800e226:	f7f3 ff77 	bl	8002118 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800e22a:	f003 fa9b 	bl	8011764 <UTIL_TIMER_GetCurrentTime>
 800e22e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800e230:	e00d      	b.n	800e24e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800e232:	2000      	movs	r0, #0
 800e234:	f000 feae 	bl	800ef94 <RadioRssi>
 800e238:	4603      	mov	r3, r0
 800e23a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800e23c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800e240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e244:	429a      	cmp	r2, r3
 800e246:	dd02      	ble.n	800e24e <RadioIsChannelFree+0x98>
        {
            status = false;
 800e248:	2300      	movs	r3, #0
 800e24a:	75fb      	strb	r3, [r7, #23]
            break;
 800e24c:	e006      	b.n	800e25c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800e24e:	6938      	ldr	r0, [r7, #16]
 800e250:	f003 fa9a 	bl	8011788 <UTIL_TIMER_GetElapsedTime>
 800e254:	4602      	mov	r2, r0
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	4293      	cmp	r3, r2
 800e25a:	d8ea      	bhi.n	800e232 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800e25c:	f000 fda5 	bl	800edaa <RadioStandby>

    return status;
 800e260:	7dfb      	ldrb	r3, [r7, #23]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3718      	adds	r7, #24
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b082      	sub	sp, #8
 800e26e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800e270:	2300      	movs	r3, #0
 800e272:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e274:	2300      	movs	r3, #0
 800e276:	2200      	movs	r2, #0
 800e278:	2100      	movs	r1, #0
 800e27a:	2000      	movs	r0, #0
 800e27c:	f002 f9c2 	bl	8010604 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800e280:	f001 ff73 	bl	801016a <SUBGRF_GetRandom>
 800e284:	6078      	str	r0, [r7, #4]

    return rnd;
 800e286:	687b      	ldr	r3, [r7, #4]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b08a      	sub	sp, #40	; 0x28
 800e294:	af00      	add	r7, sp, #0
 800e296:	60b9      	str	r1, [r7, #8]
 800e298:	607a      	str	r2, [r7, #4]
 800e29a:	461a      	mov	r2, r3
 800e29c:	4603      	mov	r3, r0
 800e29e:	73fb      	strb	r3, [r7, #15]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800e2a4:	4ab9      	ldr	r2, [pc, #740]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e2a6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e2aa:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800e2ac:	f002 ff9f 	bl	80111ee <RFW_DeInit>
    if( rxContinuous == true )
 800e2b0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800e2bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d004      	beq.n	800e2ce <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800e2c4:	4ab2      	ldr	r2, [pc, #712]	; (800e590 <RadioSetRxConfig+0x300>)
 800e2c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e2ca:	7013      	strb	r3, [r2, #0]
 800e2cc:	e002      	b.n	800e2d4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800e2ce:	4bb0      	ldr	r3, [pc, #704]	; (800e590 <RadioSetRxConfig+0x300>)
 800e2d0:	22ff      	movs	r2, #255	; 0xff
 800e2d2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800e2d4:	7bfb      	ldrb	r3, [r7, #15]
 800e2d6:	2b05      	cmp	r3, #5
 800e2d8:	d009      	beq.n	800e2ee <RadioSetRxConfig+0x5e>
 800e2da:	2b05      	cmp	r3, #5
 800e2dc:	f300 81d7 	bgt.w	800e68e <RadioSetRxConfig+0x3fe>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 80bf 	beq.w	800e464 <RadioSetRxConfig+0x1d4>
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	f000 8124 	beq.w	800e534 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800e2ec:	e1cf      	b.n	800e68e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	f002 f880 	bl	80103f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e2f4:	4ba5      	ldr	r3, [pc, #660]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800e2fc:	4aa3      	ldr	r2, [pc, #652]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800e302:	4ba2      	ldr	r3, [pc, #648]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e304:	2209      	movs	r2, #9
 800e306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800e30a:	4ba0      	ldr	r3, [pc, #640]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e30c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e310:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800e312:	68b8      	ldr	r0, [r7, #8]
 800e314:	f002 fe9e 	bl	8011054 <SUBGRF_GetFskBandwidthRegValue>
 800e318:	4603      	mov	r3, r0
 800e31a:	461a      	mov	r2, r3
 800e31c:	4b9b      	ldr	r3, [pc, #620]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e31e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e322:	4b9a      	ldr	r3, [pc, #616]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e324:	2200      	movs	r2, #0
 800e326:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e328:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e32a:	00db      	lsls	r3, r3, #3
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	4b97      	ldr	r3, [pc, #604]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e330:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800e332:	4b96      	ldr	r3, [pc, #600]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e334:	2200      	movs	r2, #0
 800e336:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800e338:	4b94      	ldr	r3, [pc, #592]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e33a:	2210      	movs	r2, #16
 800e33c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800e33e:	4b93      	ldr	r3, [pc, #588]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e340:	2200      	movs	r2, #0
 800e342:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800e344:	4b91      	ldr	r3, [pc, #580]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e346:	2200      	movs	r2, #0
 800e348:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800e34a:	4b91      	ldr	r3, [pc, #580]	; (800e590 <RadioSetRxConfig+0x300>)
 800e34c:	781a      	ldrb	r2, [r3, #0]
 800e34e:	4b8f      	ldr	r3, [pc, #572]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e350:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800e352:	4b8e      	ldr	r3, [pc, #568]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e354:	2201      	movs	r2, #1
 800e356:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800e358:	4b8c      	ldr	r3, [pc, #560]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800e35e:	2005      	movs	r0, #5
 800e360:	f7ff fec2 	bl	800e0e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e364:	488b      	ldr	r0, [pc, #556]	; (800e594 <RadioSetRxConfig+0x304>)
 800e366:	f002 fae3 	bl	8010930 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e36a:	488b      	ldr	r0, [pc, #556]	; (800e598 <RadioSetRxConfig+0x308>)
 800e36c:	f002 fbb2 	bl	8010ad4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e370:	4a8a      	ldr	r2, [pc, #552]	; (800e59c <RadioSetRxConfig+0x30c>)
 800e372:	f107 031c 	add.w	r3, r7, #28
 800e376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e37a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e37e:	f107 031c 	add.w	r3, r7, #28
 800e382:	4618      	mov	r0, r3
 800e384:	f001 fe6f 	bl	8010066 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800e388:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e38c:	f001 feba 	bl	8010104 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800e390:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800e394:	f000 fe1d 	bl	800efd2 <RadioRead>
 800e398:	4603      	mov	r3, r0
 800e39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800e39e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3a2:	f023 0310 	bic.w	r3, r3, #16
 800e3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800e3aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800e3b4:	f000 fdfb 	bl	800efae <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800e3b8:	2104      	movs	r1, #4
 800e3ba:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800e3be:	f000 fdf6 	bl	800efae <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800e3c2:	f640 009b 	movw	r0, #2203	; 0x89b
 800e3c6:	f000 fe04 	bl	800efd2 <RadioRead>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800e3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3d4:	f023 031c 	bic.w	r3, r3, #28
 800e3d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800e3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3e0:	f043 0308 	orr.w	r3, r3, #8
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	f640 009b 	movw	r0, #2203	; 0x89b
 800e3ec:	f000 fddf 	bl	800efae <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800e3f0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800e3f4:	f000 fded 	bl	800efd2 <RadioRead>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800e3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e402:	f023 0318 	bic.w	r3, r3, #24
 800e406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800e40a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e40e:	f043 0318 	orr.w	r3, r3, #24
 800e412:	b2db      	uxtb	r3, r3
 800e414:	4619      	mov	r1, r3
 800e416:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800e41a:	f000 fdc8 	bl	800efae <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800e41e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800e422:	f000 fdd6 	bl	800efd2 <RadioRead>
 800e426:	4603      	mov	r3, r0
 800e428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800e42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800e438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e43c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800e440:	b2db      	uxtb	r3, r3
 800e442:	4619      	mov	r1, r3
 800e444:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800e448:	f000 fdb1 	bl	800efae <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800e44c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e44e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e452:	fb02 f303 	mul.w	r3, r2, r3
 800e456:	461a      	mov	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e45e:	4a4b      	ldr	r2, [pc, #300]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e460:	6093      	str	r3, [r2, #8]
            break;
 800e462:	e115      	b.n	800e690 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800e464:	2000      	movs	r0, #0
 800e466:	f001 ffc5 	bl	80103f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e46a:	4b48      	ldr	r3, [pc, #288]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e46c:	2200      	movs	r2, #0
 800e46e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800e472:	4a46      	ldr	r2, [pc, #280]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800e478:	4b44      	ldr	r3, [pc, #272]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e47a:	220b      	movs	r2, #11
 800e47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800e480:	68b8      	ldr	r0, [r7, #8]
 800e482:	f002 fde7 	bl	8011054 <SUBGRF_GetFskBandwidthRegValue>
 800e486:	4603      	mov	r3, r0
 800e488:	461a      	mov	r2, r3
 800e48a:	4b40      	ldr	r3, [pc, #256]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e48c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e490:	4b3e      	ldr	r3, [pc, #248]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e492:	2200      	movs	r2, #0
 800e494:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e496:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e498:	00db      	lsls	r3, r3, #3
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	4b3b      	ldr	r3, [pc, #236]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e49e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800e4a0:	4b3a      	ldr	r3, [pc, #232]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4a2:	2204      	movs	r2, #4
 800e4a4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800e4a6:	4b39      	ldr	r3, [pc, #228]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4a8:	2218      	movs	r2, #24
 800e4aa:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800e4ac:	4b37      	ldr	r3, [pc, #220]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800e4b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e4b6:	f083 0301 	eor.w	r3, r3, #1
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	461a      	mov	r2, r3
 800e4be:	4b33      	ldr	r3, [pc, #204]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800e4c2:	4b33      	ldr	r3, [pc, #204]	; (800e590 <RadioSetRxConfig+0x300>)
 800e4c4:	781a      	ldrb	r2, [r3, #0]
 800e4c6:	4b31      	ldr	r3, [pc, #196]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4c8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800e4ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800e4d2:	4b2e      	ldr	r3, [pc, #184]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4d4:	22f2      	movs	r2, #242	; 0xf2
 800e4d6:	75da      	strb	r2, [r3, #23]
 800e4d8:	e002      	b.n	800e4e0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800e4da:	4b2c      	ldr	r3, [pc, #176]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4dc:	2201      	movs	r2, #1
 800e4de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800e4e0:	4b2a      	ldr	r3, [pc, #168]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800e4e6:	f000 fc60 	bl	800edaa <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	f7ff fdfc 	bl	800e0e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e4f0:	4828      	ldr	r0, [pc, #160]	; (800e594 <RadioSetRxConfig+0x304>)
 800e4f2:	f002 fa1d 	bl	8010930 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e4f6:	4828      	ldr	r0, [pc, #160]	; (800e598 <RadioSetRxConfig+0x308>)
 800e4f8:	f002 faec 	bl	8010ad4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e4fc:	4a28      	ldr	r2, [pc, #160]	; (800e5a0 <RadioSetRxConfig+0x310>)
 800e4fe:	f107 0314 	add.w	r3, r7, #20
 800e502:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e506:	e883 0003 	stmia.w	r3, {r0, r1}
 800e50a:	f107 0314 	add.w	r3, r7, #20
 800e50e:	4618      	mov	r0, r3
 800e510:	f001 fda9 	bl	8010066 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800e514:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e518:	f001 fdf4 	bl	8010104 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800e51c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e51e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e522:	fb02 f303 	mul.w	r3, r2, r3
 800e526:	461a      	mov	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e52e:	4a17      	ldr	r2, [pc, #92]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e530:	6093      	str	r3, [r2, #8]
            break;
 800e532:	e0ad      	b.n	800e690 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800e534:	2000      	movs	r0, #0
 800e536:	f001 ff5d 	bl	80103f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e53a:	4b14      	ldr	r3, [pc, #80]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	b2da      	uxtb	r2, r3
 800e546:	4b11      	ldr	r3, [pc, #68]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800e54c:	4a15      	ldr	r2, [pc, #84]	; (800e5a4 <RadioSetRxConfig+0x314>)
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	4413      	add	r3, r2
 800e552:	781a      	ldrb	r2, [r3, #0]
 800e554:	4b0d      	ldr	r3, [pc, #52]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800e55a:	4a0c      	ldr	r2, [pc, #48]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e55c:	7bbb      	ldrb	r3, [r7, #14]
 800e55e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d105      	bne.n	800e574 <RadioSetRxConfig+0x2e4>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b0b      	cmp	r3, #11
 800e56c:	d008      	beq.n	800e580 <RadioSetRxConfig+0x2f0>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b0c      	cmp	r3, #12
 800e572:	d005      	beq.n	800e580 <RadioSetRxConfig+0x2f0>
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d116      	bne.n	800e5a8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b0c      	cmp	r3, #12
 800e57e:	d113      	bne.n	800e5a8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800e580:	4b02      	ldr	r3, [pc, #8]	; (800e58c <RadioSetRxConfig+0x2fc>)
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800e588:	e012      	b.n	800e5b0 <RadioSetRxConfig+0x320>
 800e58a:	bf00      	nop
 800e58c:	2000201c 	.word	0x2000201c
 800e590:	20000280 	.word	0x20000280
 800e594:	20002054 	.word	0x20002054
 800e598:	2000202a 	.word	0x2000202a
 800e59c:	08014918 	.word	0x08014918
 800e5a0:	08014920 	.word	0x08014920
 800e5a4:	080150c0 	.word	0x080150c0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e5a8:	4b3b      	ldr	r3, [pc, #236]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e5b0:	4b39      	ldr	r3, [pc, #228]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e5b6:	4b38      	ldr	r3, [pc, #224]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e5bc:	2b05      	cmp	r3, #5
 800e5be:	d004      	beq.n	800e5ca <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800e5c0:	4b35      	ldr	r3, [pc, #212]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e5c6:	2b06      	cmp	r3, #6
 800e5c8:	d10a      	bne.n	800e5e0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800e5ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e5cc:	2b0b      	cmp	r3, #11
 800e5ce:	d803      	bhi.n	800e5d8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800e5d0:	4b31      	ldr	r3, [pc, #196]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5d2:	220c      	movs	r2, #12
 800e5d4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800e5d6:	e006      	b.n	800e5e6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e5d8:	4a2f      	ldr	r2, [pc, #188]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e5dc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800e5de:	e002      	b.n	800e5e6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e5e0:	4a2d      	ldr	r2, [pc, #180]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e5e4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800e5e6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800e5ea:	4b2b      	ldr	r3, [pc, #172]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5ec:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e5ee:	4b2b      	ldr	r3, [pc, #172]	; (800e69c <RadioSetRxConfig+0x40c>)
 800e5f0:	781a      	ldrb	r2, [r3, #0]
 800e5f2:	4b29      	ldr	r3, [pc, #164]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5f4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800e5f6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800e5fa:	4b27      	ldr	r3, [pc, #156]	; (800e698 <RadioSetRxConfig+0x408>)
 800e5fc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800e600:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e604:	4b24      	ldr	r3, [pc, #144]	; (800e698 <RadioSetRxConfig+0x408>)
 800e606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800e60a:	f000 fbce 	bl	800edaa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800e60e:	2001      	movs	r0, #1
 800e610:	f7ff fd6a 	bl	800e0e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e614:	4822      	ldr	r0, [pc, #136]	; (800e6a0 <RadioSetRxConfig+0x410>)
 800e616:	f002 f98b 	bl	8010930 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e61a:	4822      	ldr	r0, [pc, #136]	; (800e6a4 <RadioSetRxConfig+0x414>)
 800e61c:	f002 fa5a 	bl	8010ad4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800e620:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e622:	b2db      	uxtb	r3, r3
 800e624:	4618      	mov	r0, r3
 800e626:	f001 fef4 	bl	8010412 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800e62a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800e62e:	f002 fbad 	bl	8010d8c <SUBGRF_ReadRegister>
 800e632:	4603      	mov	r3, r0
 800e634:	f003 0301 	and.w	r3, r3, #1
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	4619      	mov	r1, r3
 800e63c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800e640:	f002 fb90 	bl	8010d64 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e644:	4b14      	ldr	r3, [pc, #80]	; (800e698 <RadioSetRxConfig+0x408>)
 800e646:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d10d      	bne.n	800e66a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800e64e:	f240 7036 	movw	r0, #1846	; 0x736
 800e652:	f002 fb9b 	bl	8010d8c <SUBGRF_ReadRegister>
 800e656:	4603      	mov	r3, r0
 800e658:	f023 0304 	bic.w	r3, r3, #4
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	4619      	mov	r1, r3
 800e660:	f240 7036 	movw	r0, #1846	; 0x736
 800e664:	f002 fb7e 	bl	8010d64 <SUBGRF_WriteRegister>
 800e668:	e00c      	b.n	800e684 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800e66a:	f240 7036 	movw	r0, #1846	; 0x736
 800e66e:	f002 fb8d 	bl	8010d8c <SUBGRF_ReadRegister>
 800e672:	4603      	mov	r3, r0
 800e674:	f043 0304 	orr.w	r3, r3, #4
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	4619      	mov	r1, r3
 800e67c:	f240 7036 	movw	r0, #1846	; 0x736
 800e680:	f002 fb70 	bl	8010d64 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800e684:	4b04      	ldr	r3, [pc, #16]	; (800e698 <RadioSetRxConfig+0x408>)
 800e686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e68a:	609a      	str	r2, [r3, #8]
            break;
 800e68c:	e000      	b.n	800e690 <RadioSetRxConfig+0x400>
            break;
 800e68e:	bf00      	nop
    }
}
 800e690:	bf00      	nop
 800e692:	3728      	adds	r7, #40	; 0x28
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	2000201c 	.word	0x2000201c
 800e69c:	20000280 	.word	0x20000280
 800e6a0:	20002054 	.word	0x20002054
 800e6a4:	2000202a 	.word	0x2000202a

0800e6a8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60ba      	str	r2, [r7, #8]
 800e6b0:	607b      	str	r3, [r7, #4]
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	73fb      	strb	r3, [r7, #15]
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800e6ba:	f002 fd98 	bl	80111ee <RFW_DeInit>
    switch( modem )
 800e6be:	7bfb      	ldrb	r3, [r7, #15]
 800e6c0:	2b04      	cmp	r3, #4
 800e6c2:	f000 80c7 	beq.w	800e854 <RadioSetTxConfig+0x1ac>
 800e6c6:	2b04      	cmp	r3, #4
 800e6c8:	f300 80d6 	bgt.w	800e878 <RadioSetTxConfig+0x1d0>
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <RadioSetTxConfig+0x2e>
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d059      	beq.n	800e788 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800e6d4:	e0d0      	b.n	800e878 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e6d6:	4b77      	ldr	r3, [pc, #476]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800e6de:	4a75      	ldr	r2, [pc, #468]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800e6e4:	4b73      	ldr	r3, [pc, #460]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e6e6:	220b      	movs	r2, #11
 800e6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f002 fcb1 	bl	8011054 <SUBGRF_GetFskBandwidthRegValue>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	4b6f      	ldr	r3, [pc, #444]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800e6fc:	4a6d      	ldr	r2, [pc, #436]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e702:	4b6c      	ldr	r3, [pc, #432]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e704:	2200      	movs	r2, #0
 800e706:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e708:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e70a:	00db      	lsls	r3, r3, #3
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	4b69      	ldr	r3, [pc, #420]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e710:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800e712:	4b68      	ldr	r3, [pc, #416]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e714:	2204      	movs	r2, #4
 800e716:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800e718:	4b66      	ldr	r3, [pc, #408]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e71a:	2218      	movs	r2, #24
 800e71c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800e71e:	4b65      	ldr	r3, [pc, #404]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e720:	2200      	movs	r2, #0
 800e722:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800e724:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e728:	f083 0301 	eor.w	r3, r3, #1
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	461a      	mov	r2, r3
 800e730:	4b60      	ldr	r3, [pc, #384]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e732:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800e734:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d003      	beq.n	800e744 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800e73c:	4b5d      	ldr	r3, [pc, #372]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e73e:	22f2      	movs	r2, #242	; 0xf2
 800e740:	75da      	strb	r2, [r3, #23]
 800e742:	e002      	b.n	800e74a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800e744:	4b5b      	ldr	r3, [pc, #364]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e746:	2201      	movs	r2, #1
 800e748:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800e74a:	4b5a      	ldr	r3, [pc, #360]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e74c:	2201      	movs	r2, #1
 800e74e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800e750:	f000 fb2b 	bl	800edaa <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800e754:	2000      	movs	r0, #0
 800e756:	f7ff fcc7 	bl	800e0e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e75a:	4857      	ldr	r0, [pc, #348]	; (800e8b8 <RadioSetTxConfig+0x210>)
 800e75c:	f002 f8e8 	bl	8010930 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e760:	4856      	ldr	r0, [pc, #344]	; (800e8bc <RadioSetTxConfig+0x214>)
 800e762:	f002 f9b7 	bl	8010ad4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e766:	4a56      	ldr	r2, [pc, #344]	; (800e8c0 <RadioSetTxConfig+0x218>)
 800e768:	f107 0310 	add.w	r3, r7, #16
 800e76c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e770:	e883 0003 	stmia.w	r3, {r0, r1}
 800e774:	f107 0310 	add.w	r3, r7, #16
 800e778:	4618      	mov	r0, r3
 800e77a:	f001 fc74 	bl	8010066 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800e77e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e782:	f001 fcbf 	bl	8010104 <SUBGRF_SetWhiteningSeed>
            break;
 800e786:	e078      	b.n	800e87a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e788:	4b4a      	ldr	r3, [pc, #296]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e78a:	2201      	movs	r2, #1
 800e78c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	b2da      	uxtb	r2, r3
 800e794:	4b47      	ldr	r3, [pc, #284]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800e79a:	4a4a      	ldr	r2, [pc, #296]	; (800e8c4 <RadioSetTxConfig+0x21c>)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4413      	add	r3, r2
 800e7a0:	781a      	ldrb	r2, [r3, #0]
 800e7a2:	4b44      	ldr	r3, [pc, #272]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e7a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800e7a8:	4a42      	ldr	r2, [pc, #264]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e7aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e7ae:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d105      	bne.n	800e7c4 <RadioSetTxConfig+0x11c>
 800e7b8:	6a3b      	ldr	r3, [r7, #32]
 800e7ba:	2b0b      	cmp	r3, #11
 800e7bc:	d008      	beq.n	800e7d0 <RadioSetTxConfig+0x128>
 800e7be:	6a3b      	ldr	r3, [r7, #32]
 800e7c0:	2b0c      	cmp	r3, #12
 800e7c2:	d005      	beq.n	800e7d0 <RadioSetTxConfig+0x128>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d107      	bne.n	800e7da <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	2b0c      	cmp	r3, #12
 800e7ce:	d104      	bne.n	800e7da <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800e7d0:	4b38      	ldr	r3, [pc, #224]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800e7d8:	e003      	b.n	800e7e2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e7da:	4b36      	ldr	r3, [pc, #216]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e7e2:	4b34      	ldr	r3, [pc, #208]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e7e8:	4b32      	ldr	r3, [pc, #200]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e7ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e7ee:	2b05      	cmp	r3, #5
 800e7f0:	d004      	beq.n	800e7fc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800e7f2:	4b30      	ldr	r3, [pc, #192]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e7f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e7f8:	2b06      	cmp	r3, #6
 800e7fa:	d10a      	bne.n	800e812 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800e7fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7fe:	2b0b      	cmp	r3, #11
 800e800:	d803      	bhi.n	800e80a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800e802:	4b2c      	ldr	r3, [pc, #176]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e804:	220c      	movs	r2, #12
 800e806:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800e808:	e006      	b.n	800e818 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e80a:	4a2a      	ldr	r2, [pc, #168]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e80c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e80e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800e810:	e002      	b.n	800e818 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e812:	4a28      	ldr	r2, [pc, #160]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e814:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e816:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800e818:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e81c:	4b25      	ldr	r3, [pc, #148]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e81e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e820:	4b29      	ldr	r3, [pc, #164]	; (800e8c8 <RadioSetTxConfig+0x220>)
 800e822:	781a      	ldrb	r2, [r3, #0]
 800e824:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e826:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800e828:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e82c:	4b21      	ldr	r3, [pc, #132]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e82e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800e832:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800e836:	4b1f      	ldr	r3, [pc, #124]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800e83c:	f000 fab5 	bl	800edaa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800e840:	2001      	movs	r0, #1
 800e842:	f7ff fc51 	bl	800e0e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e846:	481c      	ldr	r0, [pc, #112]	; (800e8b8 <RadioSetTxConfig+0x210>)
 800e848:	f002 f872 	bl	8010930 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e84c:	481b      	ldr	r0, [pc, #108]	; (800e8bc <RadioSetTxConfig+0x214>)
 800e84e:	f002 f941 	bl	8010ad4 <SUBGRF_SetPacketParams>
            break;
 800e852:	e012      	b.n	800e87a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800e854:	2004      	movs	r0, #4
 800e856:	f7ff fc47 	bl	800e0e8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800e85a:	4b16      	ldr	r3, [pc, #88]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e85c:	2202      	movs	r2, #2
 800e85e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800e862:	4a14      	ldr	r2, [pc, #80]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800e868:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e86a:	2216      	movs	r2, #22
 800e86c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e870:	4811      	ldr	r0, [pc, #68]	; (800e8b8 <RadioSetTxConfig+0x210>)
 800e872:	f002 f85d 	bl	8010930 <SUBGRF_SetModulationParams>
            break;
 800e876:	e000      	b.n	800e87a <RadioSetTxConfig+0x1d2>
            break;
 800e878:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800e87a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e87e:	4618      	mov	r0, r3
 800e880:	f002 fb8c 	bl	8010f9c <SUBGRF_SetRfTxPower>
 800e884:	4603      	mov	r3, r0
 800e886:	461a      	mov	r2, r3
 800e888:	4b0a      	ldr	r3, [pc, #40]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e88a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800e88e:	210e      	movs	r1, #14
 800e890:	f640 101f 	movw	r0, #2335	; 0x91f
 800e894:	f002 fa66 	bl	8010d64 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800e898:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e89a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f002 fcb9 	bl	8011216 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800e8a4:	4a03      	ldr	r2, [pc, #12]	; (800e8b4 <RadioSetTxConfig+0x20c>)
 800e8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a8:	6053      	str	r3, [r2, #4]
}
 800e8aa:	bf00      	nop
 800e8ac:	3718      	adds	r7, #24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	2000201c 	.word	0x2000201c
 800e8b8:	20002054 	.word	0x20002054
 800e8bc:	2000202a 	.word	0x2000202a
 800e8c0:	08014920 	.word	0x08014920
 800e8c4:	080150c0 	.word	0x080150c0
 800e8c8:	20000280 	.word	0x20000280

0800e8cc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
    return true;
 800e8d4:	2301      	movs	r3, #1
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	370c      	adds	r7, #12
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bc80      	pop	{r7}
 800e8de:	4770      	bx	lr

0800e8e0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800e8ee:	79fb      	ldrb	r3, [r7, #7]
 800e8f0:	2b0a      	cmp	r3, #10
 800e8f2:	d83e      	bhi.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
 800e8f4:	a201      	add	r2, pc, #4	; (adr r2, 800e8fc <RadioGetLoRaBandwidthInHz+0x1c>)
 800e8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fa:	bf00      	nop
 800e8fc:	0800e929 	.word	0x0800e929
 800e900:	0800e939 	.word	0x0800e939
 800e904:	0800e949 	.word	0x0800e949
 800e908:	0800e959 	.word	0x0800e959
 800e90c:	0800e961 	.word	0x0800e961
 800e910:	0800e967 	.word	0x0800e967
 800e914:	0800e96d 	.word	0x0800e96d
 800e918:	0800e973 	.word	0x0800e973
 800e91c:	0800e931 	.word	0x0800e931
 800e920:	0800e941 	.word	0x0800e941
 800e924:	0800e951 	.word	0x0800e951
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800e928:	f641 6384 	movw	r3, #7812	; 0x1e84
 800e92c:	60fb      	str	r3, [r7, #12]
        break;
 800e92e:	e020      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800e930:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800e934:	60fb      	str	r3, [r7, #12]
        break;
 800e936:	e01c      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800e938:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e93c:	60fb      	str	r3, [r7, #12]
        break;
 800e93e:	e018      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800e940:	f245 1361 	movw	r3, #20833	; 0x5161
 800e944:	60fb      	str	r3, [r7, #12]
        break;
 800e946:	e014      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800e948:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e94c:	60fb      	str	r3, [r7, #12]
        break;
 800e94e:	e010      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800e950:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800e954:	60fb      	str	r3, [r7, #12]
        break;
 800e956:	e00c      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800e958:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e95c:	60fb      	str	r3, [r7, #12]
        break;
 800e95e:	e008      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800e960:	4b07      	ldr	r3, [pc, #28]	; (800e980 <RadioGetLoRaBandwidthInHz+0xa0>)
 800e962:	60fb      	str	r3, [r7, #12]
        break;
 800e964:	e005      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e966:	4b07      	ldr	r3, [pc, #28]	; (800e984 <RadioGetLoRaBandwidthInHz+0xa4>)
 800e968:	60fb      	str	r3, [r7, #12]
        break;
 800e96a:	e002      	b.n	800e972 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e96c:	4b06      	ldr	r3, [pc, #24]	; (800e988 <RadioGetLoRaBandwidthInHz+0xa8>)
 800e96e:	60fb      	str	r3, [r7, #12]
        break;
 800e970:	bf00      	nop
    }

    return bandwidthInHz;
 800e972:	68fb      	ldr	r3, [r7, #12]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3714      	adds	r7, #20
 800e978:	46bd      	mov	sp, r7
 800e97a:	bc80      	pop	{r7}
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	0001e848 	.word	0x0001e848
 800e984:	0003d090 	.word	0x0003d090
 800e988:	0007a120 	.word	0x0007a120

0800e98c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	4608      	mov	r0, r1
 800e996:	4611      	mov	r1, r2
 800e998:	461a      	mov	r2, r3
 800e99a:	4603      	mov	r3, r0
 800e99c:	70fb      	strb	r3, [r7, #3]
 800e99e:	460b      	mov	r3, r1
 800e9a0:	803b      	strh	r3, [r7, #0]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800e9a6:	883b      	ldrh	r3, [r7, #0]
 800e9a8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e9aa:	78ba      	ldrb	r2, [r7, #2]
 800e9ac:	f082 0201 	eor.w	r2, r2, #1
 800e9b0:	b2d2      	uxtb	r2, r2
 800e9b2:	2a00      	cmp	r2, #0
 800e9b4:	d001      	beq.n	800e9ba <RadioGetGfskTimeOnAirNumerator+0x2e>
 800e9b6:	2208      	movs	r2, #8
 800e9b8:	e000      	b.n	800e9bc <RadioGetGfskTimeOnAirNumerator+0x30>
 800e9ba:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800e9bc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e9be:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e9c2:	7c3b      	ldrb	r3, [r7, #16]
 800e9c4:	7d39      	ldrb	r1, [r7, #20]
 800e9c6:	2900      	cmp	r1, #0
 800e9c8:	d001      	beq.n	800e9ce <RadioGetGfskTimeOnAirNumerator+0x42>
 800e9ca:	2102      	movs	r1, #2
 800e9cc:	e000      	b.n	800e9d0 <RadioGetGfskTimeOnAirNumerator+0x44>
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	440b      	add	r3, r1
 800e9d2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e9d4:	4413      	add	r3, r2
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	370c      	adds	r7, #12
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bc80      	pop	{r7}
 800e9de:	4770      	bx	lr

0800e9e0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b08b      	sub	sp, #44	; 0x2c
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	71fb      	strb	r3, [r7, #7]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800e9f6:	79fb      	ldrb	r3, [r7, #7]
 800e9f8:	3304      	adds	r3, #4
 800e9fa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2b05      	cmp	r3, #5
 800ea06:	d002      	beq.n	800ea0e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	2b06      	cmp	r3, #6
 800ea0c:	d104      	bne.n	800ea18 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800ea0e:	88bb      	ldrh	r3, [r7, #4]
 800ea10:	2b0b      	cmp	r3, #11
 800ea12:	d801      	bhi.n	800ea18 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800ea14:	230c      	movs	r3, #12
 800ea16:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d105      	bne.n	800ea2a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2b0b      	cmp	r3, #11
 800ea22:	d008      	beq.n	800ea36 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	2b0c      	cmp	r3, #12
 800ea28:	d005      	beq.n	800ea36 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d105      	bne.n	800ea3c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b0c      	cmp	r3, #12
 800ea34:	d102      	bne.n	800ea3c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800ea36:	2301      	movs	r3, #1
 800ea38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ea3c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ea40:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800ea42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea46:	2a00      	cmp	r2, #0
 800ea48:	d001      	beq.n	800ea4e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800ea4a:	2210      	movs	r2, #16
 800ea4c:	e000      	b.n	800ea50 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800ea4e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ea50:	4413      	add	r3, r2
 800ea52:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800ea58:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800ea5a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ea5e:	2a00      	cmp	r2, #0
 800ea60:	d001      	beq.n	800ea66 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800ea62:	2200      	movs	r2, #0
 800ea64:	e000      	b.n	800ea68 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800ea66:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800ea68:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ea6a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b06      	cmp	r3, #6
 800ea70:	d803      	bhi.n	800ea7a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	623b      	str	r3, [r7, #32]
 800ea78:	e00e      	b.n	800ea98 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	3308      	adds	r3, #8
 800ea7e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	3b02      	subs	r3, #2
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	623b      	str	r3, [r7, #32]
 800ea90:	e002      	b.n	800ea98 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	da01      	bge.n	800eaa2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800eaa2:	69fa      	ldr	r2, [r7, #28]
 800eaa4:	6a3b      	ldr	r3, [r7, #32]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	1e5a      	subs	r2, r3, #1
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	fb92 f3f3 	sdiv	r3, r2, r3
 800eab0:	697a      	ldr	r2, [r7, #20]
 800eab2:	fb03 f202 	mul.w	r2, r3, r2
 800eab6:	88bb      	ldrh	r3, [r7, #4]
 800eab8:	4413      	add	r3, r2
    int32_t intermediate =
 800eaba:	330c      	adds	r3, #12
 800eabc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2b06      	cmp	r3, #6
 800eac2:	d802      	bhi.n	800eaca <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	3302      	adds	r3, #2
 800eac8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	3b02      	subs	r3, #2
 800ead4:	fa02 f303 	lsl.w	r3, r2, r3
}
 800ead8:	4618      	mov	r0, r3
 800eada:	372c      	adds	r7, #44	; 0x2c
 800eadc:	46bd      	mov	sp, r7
 800eade:	bc80      	pop	{r7}
 800eae0:	4770      	bx	lr
	...

0800eae4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b08a      	sub	sp, #40	; 0x28
 800eae8:	af04      	add	r7, sp, #16
 800eaea:	60b9      	str	r1, [r7, #8]
 800eaec:	607a      	str	r2, [r7, #4]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	73fb      	strb	r3, [r7, #15]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800eafc:	2301      	movs	r3, #1
 800eafe:	613b      	str	r3, [r7, #16]

    switch( modem )
 800eb00:	7bfb      	ldrb	r3, [r7, #15]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <RadioTimeOnAir+0x28>
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d017      	beq.n	800eb3a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800eb0a:	e035      	b.n	800eb78 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800eb0c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800eb10:	8c3a      	ldrh	r2, [r7, #32]
 800eb12:	7bb9      	ldrb	r1, [r7, #14]
 800eb14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb18:	9301      	str	r3, [sp, #4]
 800eb1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	4603      	mov	r3, r0
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7ff ff32 	bl	800e98c <RadioGetGfskTimeOnAirNumerator>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb2e:	fb02 f303 	mul.w	r3, r2, r3
 800eb32:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	613b      	str	r3, [r7, #16]
        break;
 800eb38:	e01e      	b.n	800eb78 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800eb3a:	8c39      	ldrh	r1, [r7, #32]
 800eb3c:	7bba      	ldrb	r2, [r7, #14]
 800eb3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb42:	9302      	str	r3, [sp, #8]
 800eb44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	460b      	mov	r3, r1
 800eb52:	6879      	ldr	r1, [r7, #4]
 800eb54:	68b8      	ldr	r0, [r7, #8]
 800eb56:	f7ff ff43 	bl	800e9e0 <RadioGetLoRaTimeOnAirNumerator>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb60:	fb02 f303 	mul.w	r3, r2, r3
 800eb64:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800eb66:	4a0a      	ldr	r2, [pc, #40]	; (800eb90 <RadioTimeOnAir+0xac>)
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff feb6 	bl	800e8e0 <RadioGetLoRaBandwidthInHz>
 800eb74:	6138      	str	r0, [r7, #16]
        break;
 800eb76:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800eb78:	697a      	ldr	r2, [r7, #20]
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	1e5a      	subs	r2, r3, #1
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	080150c0 	.word	0x080150c0

0800eb94 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800eba0:	2300      	movs	r3, #0
 800eba2:	2200      	movs	r2, #0
 800eba4:	f240 2101 	movw	r1, #513	; 0x201
 800eba8:	f240 2001 	movw	r0, #513	; 0x201
 800ebac:	f001 fd2a 	bl	8010604 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ebb0:	4b70      	ldr	r3, [pc, #448]	; (800ed74 <RadioSend+0x1e0>)
 800ebb2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ebb6:	2101      	movs	r1, #1
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f002 f9c7 	bl	8010f4c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800ebbe:	4b6d      	ldr	r3, [pc, #436]	; (800ed74 <RadioSend+0x1e0>)
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d112      	bne.n	800ebec <RadioSend+0x58>
 800ebc6:	4b6b      	ldr	r3, [pc, #428]	; (800ed74 <RadioSend+0x1e0>)
 800ebc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ebcc:	2b06      	cmp	r3, #6
 800ebce:	d10d      	bne.n	800ebec <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800ebd0:	f640 0089 	movw	r0, #2185	; 0x889
 800ebd4:	f002 f8da 	bl	8010d8c <SUBGRF_ReadRegister>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	f023 0304 	bic.w	r3, r3, #4
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	f640 0089 	movw	r0, #2185	; 0x889
 800ebe6:	f002 f8bd 	bl	8010d64 <SUBGRF_WriteRegister>
 800ebea:	e00c      	b.n	800ec06 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800ebec:	f640 0089 	movw	r0, #2185	; 0x889
 800ebf0:	f002 f8cc 	bl	8010d8c <SUBGRF_ReadRegister>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	f043 0304 	orr.w	r3, r3, #4
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	f640 0089 	movw	r0, #2185	; 0x889
 800ec02:	f002 f8af 	bl	8010d64 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800ec06:	4b5b      	ldr	r3, [pc, #364]	; (800ed74 <RadioSend+0x1e0>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b04      	cmp	r3, #4
 800ec0c:	f200 80a2 	bhi.w	800ed54 <RadioSend+0x1c0>
 800ec10:	a201      	add	r2, pc, #4	; (adr r2, 800ec18 <RadioSend+0x84>)
 800ec12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec16:	bf00      	nop
 800ec18:	0800ec47 	.word	0x0800ec47
 800ec1c:	0800ec2d 	.word	0x0800ec2d
 800ec20:	0800ec47 	.word	0x0800ec47
 800ec24:	0800ec9d 	.word	0x0800ec9d
 800ec28:	0800ecbd 	.word	0x0800ecbd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800ec2c:	4a51      	ldr	r2, [pc, #324]	; (800ed74 <RadioSend+0x1e0>)
 800ec2e:	78fb      	ldrb	r3, [r7, #3]
 800ec30:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ec32:	4851      	ldr	r0, [pc, #324]	; (800ed78 <RadioSend+0x1e4>)
 800ec34:	f001 ff4e 	bl	8010ad4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ec38:	78fb      	ldrb	r3, [r7, #3]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f001 f9fe 	bl	8010040 <SUBGRF_SendPayload>
            break;
 800ec44:	e087      	b.n	800ed56 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800ec46:	f002 fad8 	bl	80111fa <RFW_Is_Init>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d118      	bne.n	800ec82 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ec50:	f107 020d 	add.w	r2, r7, #13
 800ec54:	78fb      	ldrb	r3, [r7, #3]
 800ec56:	4619      	mov	r1, r3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f002 fae6 	bl	801122a <RFW_TransmitInit>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10c      	bne.n	800ec7e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ec64:	7b7a      	ldrb	r2, [r7, #13]
 800ec66:	4b43      	ldr	r3, [pc, #268]	; (800ed74 <RadioSend+0x1e0>)
 800ec68:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ec6a:	4843      	ldr	r0, [pc, #268]	; (800ed78 <RadioSend+0x1e4>)
 800ec6c:	f001 ff32 	bl	8010ad4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800ec70:	7b7b      	ldrb	r3, [r7, #13]
 800ec72:	2200      	movs	r2, #0
 800ec74:	4619      	mov	r1, r3
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f001 f9e2 	bl	8010040 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800ec7c:	e06b      	b.n	800ed56 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	e073      	b.n	800ed6a <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ec82:	4a3c      	ldr	r2, [pc, #240]	; (800ed74 <RadioSend+0x1e0>)
 800ec84:	78fb      	ldrb	r3, [r7, #3]
 800ec86:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ec88:	483b      	ldr	r0, [pc, #236]	; (800ed78 <RadioSend+0x1e4>)
 800ec8a:	f001 ff23 	bl	8010ad4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800ec8e:	78fb      	ldrb	r3, [r7, #3]
 800ec90:	2200      	movs	r2, #0
 800ec92:	4619      	mov	r1, r3
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f001 f9d3 	bl	8010040 <SUBGRF_SendPayload>
            break;
 800ec9a:	e05c      	b.n	800ed56 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ec9c:	4b35      	ldr	r3, [pc, #212]	; (800ed74 <RadioSend+0x1e0>)
 800ec9e:	2202      	movs	r2, #2
 800eca0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800eca2:	4a34      	ldr	r2, [pc, #208]	; (800ed74 <RadioSend+0x1e0>)
 800eca4:	78fb      	ldrb	r3, [r7, #3]
 800eca6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eca8:	4833      	ldr	r0, [pc, #204]	; (800ed78 <RadioSend+0x1e4>)
 800ecaa:	f001 ff13 	bl	8010ad4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ecae:	78fb      	ldrb	r3, [r7, #3]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f001 f9c3 	bl	8010040 <SUBGRF_SendPayload>
            break;
 800ecba:	e04c      	b.n	800ed56 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800ecbc:	78fb      	ldrb	r3, [r7, #3]
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	6879      	ldr	r1, [r7, #4]
 800ecc2:	482e      	ldr	r0, [pc, #184]	; (800ed7c <RadioSend+0x1e8>)
 800ecc4:	f000 fc96 	bl	800f5f4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ecc8:	4b2a      	ldr	r3, [pc, #168]	; (800ed74 <RadioSend+0x1e0>)
 800ecca:	2202      	movs	r2, #2
 800eccc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800ecce:	78fb      	ldrb	r3, [r7, #3]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	b2da      	uxtb	r2, r3
 800ecd4:	4b27      	ldr	r3, [pc, #156]	; (800ed74 <RadioSend+0x1e0>)
 800ecd6:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ecd8:	4827      	ldr	r0, [pc, #156]	; (800ed78 <RadioSend+0x1e4>)
 800ecda:	f001 fefb 	bl	8010ad4 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800ecde:	2100      	movs	r1, #0
 800ece0:	20f1      	movs	r0, #241	; 0xf1
 800ece2:	f000 f964 	bl	800efae <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800ece6:	2100      	movs	r1, #0
 800ece8:	20f0      	movs	r0, #240	; 0xf0
 800ecea:	f000 f960 	bl	800efae <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800ecee:	4b21      	ldr	r3, [pc, #132]	; (800ed74 <RadioSend+0x1e0>)
 800ecf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecf2:	2b64      	cmp	r3, #100	; 0x64
 800ecf4:	d108      	bne.n	800ed08 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800ecf6:	2170      	movs	r1, #112	; 0x70
 800ecf8:	20f3      	movs	r0, #243	; 0xf3
 800ecfa:	f000 f958 	bl	800efae <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800ecfe:	211d      	movs	r1, #29
 800ed00:	20f2      	movs	r0, #242	; 0xf2
 800ed02:	f000 f954 	bl	800efae <RadioWrite>
 800ed06:	e007      	b.n	800ed18 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800ed08:	21e1      	movs	r1, #225	; 0xe1
 800ed0a:	20f3      	movs	r0, #243	; 0xf3
 800ed0c:	f000 f94f 	bl	800efae <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800ed10:	2104      	movs	r1, #4
 800ed12:	20f2      	movs	r0, #242	; 0xf2
 800ed14:	f000 f94b 	bl	800efae <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800ed18:	78fb      	ldrb	r3, [r7, #3]
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	00db      	lsls	r3, r3, #3
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	3302      	adds	r3, #2
 800ed22:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800ed24:	89fb      	ldrh	r3, [r7, #14]
 800ed26:	0a1b      	lsrs	r3, r3, #8
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	20f4      	movs	r0, #244	; 0xf4
 800ed30:	f000 f93d 	bl	800efae <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800ed34:	89fb      	ldrh	r3, [r7, #14]
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	4619      	mov	r1, r3
 800ed3a:	20f5      	movs	r0, #245	; 0xf5
 800ed3c:	f000 f937 	bl	800efae <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800ed40:	78fb      	ldrb	r3, [r7, #3]
 800ed42:	3301      	adds	r3, #1
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	480b      	ldr	r0, [pc, #44]	; (800ed7c <RadioSend+0x1e8>)
 800ed4e:	f001 f977 	bl	8010040 <SUBGRF_SendPayload>
            break;
 800ed52:	e000      	b.n	800ed56 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800ed54:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ed56:	4b07      	ldr	r3, [pc, #28]	; (800ed74 <RadioSend+0x1e0>)
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	4808      	ldr	r0, [pc, #32]	; (800ed80 <RadioSend+0x1ec>)
 800ed5e:	f002 fcd7 	bl	8011710 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800ed62:	4807      	ldr	r0, [pc, #28]	; (800ed80 <RadioSend+0x1ec>)
 800ed64:	f002 fbf6 	bl	8011554 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	2000201c 	.word	0x2000201c
 800ed78:	2000202a 	.word	0x2000202a
 800ed7c:	20001f18 	.word	0x20001f18
 800ed80:	20002078 	.word	0x20002078

0800ed84 <RadioSleep>:

static void RadioSleep( void )
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800ed8e:	793b      	ldrb	r3, [r7, #4]
 800ed90:	f043 0304 	orr.w	r3, r3, #4
 800ed94:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800ed96:	7938      	ldrb	r0, [r7, #4]
 800ed98:	f001 fa2e 	bl	80101f8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800ed9c:	2002      	movs	r0, #2
 800ed9e:	f7f3 f9bb 	bl	8002118 <HAL_Delay>
}
 800eda2:	bf00      	nop
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <RadioStandby>:

static void RadioStandby( void )
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800edae:	2000      	movs	r0, #0
 800edb0:	f001 fa54 	bl	801025c <SUBGRF_SetStandby>
}
 800edb4:	bf00      	nop
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800edc0:	f002 fa1b 	bl	80111fa <RFW_Is_Init>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d102      	bne.n	800edd0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800edca:	f002 fa3e 	bl	801124a <RFW_ReceiveInit>
 800edce:	e007      	b.n	800ede0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800edd0:	2300      	movs	r3, #0
 800edd2:	2200      	movs	r2, #0
 800edd4:	f240 2162 	movw	r1, #610	; 0x262
 800edd8:	f240 2062 	movw	r0, #610	; 0x262
 800eddc:	f001 fc12 	bl	8010604 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d006      	beq.n	800edf4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ede6:	6879      	ldr	r1, [r7, #4]
 800ede8:	4811      	ldr	r0, [pc, #68]	; (800ee30 <RadioRx+0x78>)
 800edea:	f002 fc91 	bl	8011710 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800edee:	4810      	ldr	r0, [pc, #64]	; (800ee30 <RadioRx+0x78>)
 800edf0:	f002 fbb0 	bl	8011554 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800edf4:	4b0f      	ldr	r3, [pc, #60]	; (800ee34 <RadioRx+0x7c>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800edfa:	4b0e      	ldr	r3, [pc, #56]	; (800ee34 <RadioRx+0x7c>)
 800edfc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ee00:	2100      	movs	r1, #0
 800ee02:	4618      	mov	r0, r3
 800ee04:	f002 f8a2 	bl	8010f4c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800ee08:	4b0a      	ldr	r3, [pc, #40]	; (800ee34 <RadioRx+0x7c>)
 800ee0a:	785b      	ldrb	r3, [r3, #1]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d004      	beq.n	800ee1a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ee10:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ee14:	f001 fa5e 	bl	80102d4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800ee18:	e005      	b.n	800ee26 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800ee1a:	4b06      	ldr	r3, [pc, #24]	; (800ee34 <RadioRx+0x7c>)
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	019b      	lsls	r3, r3, #6
 800ee20:	4618      	mov	r0, r3
 800ee22:	f001 fa57 	bl	80102d4 <SUBGRF_SetRx>
}
 800ee26:	bf00      	nop
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	20002090 	.word	0x20002090
 800ee34:	2000201c 	.word	0x2000201c

0800ee38 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800ee40:	f002 f9db 	bl	80111fa <RFW_Is_Init>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d102      	bne.n	800ee50 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800ee4a:	f002 f9fe 	bl	801124a <RFW_ReceiveInit>
 800ee4e:	e007      	b.n	800ee60 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ee50:	2300      	movs	r3, #0
 800ee52:	2200      	movs	r2, #0
 800ee54:	f240 2162 	movw	r1, #610	; 0x262
 800ee58:	f240 2062 	movw	r0, #610	; 0x262
 800ee5c:	f001 fbd2 	bl	8010604 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d006      	beq.n	800ee74 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ee66:	6879      	ldr	r1, [r7, #4]
 800ee68:	4811      	ldr	r0, [pc, #68]	; (800eeb0 <RadioRxBoosted+0x78>)
 800ee6a:	f002 fc51 	bl	8011710 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ee6e:	4810      	ldr	r0, [pc, #64]	; (800eeb0 <RadioRxBoosted+0x78>)
 800ee70:	f002 fb70 	bl	8011554 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800ee74:	4b0f      	ldr	r3, [pc, #60]	; (800eeb4 <RadioRxBoosted+0x7c>)
 800ee76:	2200      	movs	r2, #0
 800ee78:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ee7a:	4b0e      	ldr	r3, [pc, #56]	; (800eeb4 <RadioRxBoosted+0x7c>)
 800ee7c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ee80:	2100      	movs	r1, #0
 800ee82:	4618      	mov	r0, r3
 800ee84:	f002 f862 	bl	8010f4c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <RadioRxBoosted+0x7c>)
 800ee8a:	785b      	ldrb	r3, [r3, #1]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d004      	beq.n	800ee9a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800ee90:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ee94:	f001 fa3e 	bl	8010314 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800ee98:	e005      	b.n	800eea6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800ee9a:	4b06      	ldr	r3, [pc, #24]	; (800eeb4 <RadioRxBoosted+0x7c>)
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	019b      	lsls	r3, r3, #6
 800eea0:	4618      	mov	r0, r3
 800eea2:	f001 fa37 	bl	8010314 <SUBGRF_SetRxBoosted>
}
 800eea6:	bf00      	nop
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20002090 	.word	0x20002090
 800eeb4:	2000201c 	.word	0x2000201c

0800eeb8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	005a      	lsls	r2, r3, #1
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	4413      	add	r3, r2
 800eeca:	4a0c      	ldr	r2, [pc, #48]	; (800eefc <RadioSetRxDutyCycle+0x44>)
 800eecc:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800eece:	2300      	movs	r3, #0
 800eed0:	2200      	movs	r2, #0
 800eed2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eeda:	f001 fb93 	bl	8010604 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800eede:	4b07      	ldr	r3, [pc, #28]	; (800eefc <RadioSetRxDutyCycle+0x44>)
 800eee0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800eee4:	2100      	movs	r1, #0
 800eee6:	4618      	mov	r0, r3
 800eee8:	f002 f830 	bl	8010f4c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f001 fa34 	bl	801035c <SUBGRF_SetRxDutyCycle>
}
 800eef4:	bf00      	nop
 800eef6:	3708      	adds	r7, #8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	2000201c 	.word	0x2000201c

0800ef00 <RadioStartCad>:

static void RadioStartCad( void )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ef04:	4b09      	ldr	r3, [pc, #36]	; (800ef2c <RadioStartCad+0x2c>)
 800ef06:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f002 f81d 	bl	8010f4c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800ef12:	2300      	movs	r3, #0
 800ef14:	2200      	movs	r2, #0
 800ef16:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ef1a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800ef1e:	f001 fb71 	bl	8010604 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800ef22:	f001 fa47 	bl	80103b4 <SUBGRF_SetCad>
}
 800ef26:	bf00      	nop
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	2000201c 	.word	0x2000201c

0800ef30 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	460b      	mov	r3, r1
 800ef3a:	70fb      	strb	r3, [r7, #3]
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800ef40:	883b      	ldrh	r3, [r7, #0]
 800ef42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef46:	fb02 f303 	mul.w	r3, r2, r3
 800ef4a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f001 fbb5 	bl	80106bc <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800ef52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f002 f820 	bl	8010f9c <SUBGRF_SetRfTxPower>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ef60:	210e      	movs	r1, #14
 800ef62:	f640 101f 	movw	r0, #2335	; 0x91f
 800ef66:	f001 fefd 	bl	8010d64 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800ef6a:	7afb      	ldrb	r3, [r7, #11]
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f001 ffec 	bl	8010f4c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800ef74:	f001 fa2c 	bl	80103d0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800ef78:	68f9      	ldr	r1, [r7, #12]
 800ef7a:	4805      	ldr	r0, [pc, #20]	; (800ef90 <RadioSetTxContinuousWave+0x60>)
 800ef7c:	f002 fbc8 	bl	8011710 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ef80:	4803      	ldr	r0, [pc, #12]	; (800ef90 <RadioSetTxContinuousWave+0x60>)
 800ef82:	f002 fae7 	bl	8011554 <UTIL_TIMER_Start>
}
 800ef86:	bf00      	nop
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20002078 	.word	0x20002078

0800ef94 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800ef9e:	f001 fe4e 	bl	8010c3e <SUBGRF_GetRssiInst>
 800efa2:	4603      	mov	r3, r0
 800efa4:	b21b      	sxth	r3, r3
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3708      	adds	r7, #8
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b082      	sub	sp, #8
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	4603      	mov	r3, r0
 800efb6:	460a      	mov	r2, r1
 800efb8:	80fb      	strh	r3, [r7, #6]
 800efba:	4613      	mov	r3, r2
 800efbc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800efbe:	797a      	ldrb	r2, [r7, #5]
 800efc0:	88fb      	ldrh	r3, [r7, #6]
 800efc2:	4611      	mov	r1, r2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f001 fecd 	bl	8010d64 <SUBGRF_WriteRegister>
}
 800efca:	bf00      	nop
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b082      	sub	sp, #8
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	4603      	mov	r3, r0
 800efda:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800efdc:	88fb      	ldrh	r3, [r7, #6]
 800efde:	4618      	mov	r0, r3
 800efe0:	f001 fed4 	bl	8010d8c <SUBGRF_ReadRegister>
 800efe4:	4603      	mov	r3, r0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b082      	sub	sp, #8
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	4603      	mov	r3, r0
 800eff6:	6039      	str	r1, [r7, #0]
 800eff8:	80fb      	strh	r3, [r7, #6]
 800effa:	4613      	mov	r3, r2
 800effc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800effe:	797b      	ldrb	r3, [r7, #5]
 800f000:	b29a      	uxth	r2, r3
 800f002:	88fb      	ldrh	r3, [r7, #6]
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	4618      	mov	r0, r3
 800f008:	f001 fed4 	bl	8010db4 <SUBGRF_WriteRegisters>
}
 800f00c:	bf00      	nop
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	6039      	str	r1, [r7, #0]
 800f01e:	80fb      	strh	r3, [r7, #6]
 800f020:	4613      	mov	r3, r2
 800f022:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800f024:	797b      	ldrb	r3, [r7, #5]
 800f026:	b29a      	uxth	r2, r3
 800f028:	88fb      	ldrh	r3, [r7, #6]
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f001 fee3 	bl	8010df8 <SUBGRF_ReadRegisters>
}
 800f032:	bf00      	nop
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
	...

0800f03c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	4603      	mov	r3, r0
 800f044:	460a      	mov	r2, r1
 800f046:	71fb      	strb	r3, [r7, #7]
 800f048:	4613      	mov	r3, r2
 800f04a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800f04c:	79fb      	ldrb	r3, [r7, #7]
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d10a      	bne.n	800f068 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f052:	4a0e      	ldr	r2, [pc, #56]	; (800f08c <RadioSetMaxPayloadLength+0x50>)
 800f054:	79bb      	ldrb	r3, [r7, #6]
 800f056:	7013      	strb	r3, [r2, #0]
 800f058:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <RadioSetMaxPayloadLength+0x50>)
 800f05a:	781a      	ldrb	r2, [r3, #0]
 800f05c:	4b0c      	ldr	r3, [pc, #48]	; (800f090 <RadioSetMaxPayloadLength+0x54>)
 800f05e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f060:	480c      	ldr	r0, [pc, #48]	; (800f094 <RadioSetMaxPayloadLength+0x58>)
 800f062:	f001 fd37 	bl	8010ad4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800f066:	e00d      	b.n	800f084 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f068:	4b09      	ldr	r3, [pc, #36]	; (800f090 <RadioSetMaxPayloadLength+0x54>)
 800f06a:	7d5b      	ldrb	r3, [r3, #21]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d109      	bne.n	800f084 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f070:	4a06      	ldr	r2, [pc, #24]	; (800f08c <RadioSetMaxPayloadLength+0x50>)
 800f072:	79bb      	ldrb	r3, [r7, #6]
 800f074:	7013      	strb	r3, [r2, #0]
 800f076:	4b05      	ldr	r3, [pc, #20]	; (800f08c <RadioSetMaxPayloadLength+0x50>)
 800f078:	781a      	ldrb	r2, [r3, #0]
 800f07a:	4b05      	ldr	r3, [pc, #20]	; (800f090 <RadioSetMaxPayloadLength+0x54>)
 800f07c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f07e:	4805      	ldr	r0, [pc, #20]	; (800f094 <RadioSetMaxPayloadLength+0x58>)
 800f080:	f001 fd28 	bl	8010ad4 <SUBGRF_SetPacketParams>
}
 800f084:	bf00      	nop
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	20000280 	.word	0x20000280
 800f090:	2000201c 	.word	0x2000201c
 800f094:	2000202a 	.word	0x2000202a

0800f098 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f0a2:	4a13      	ldr	r2, [pc, #76]	; (800f0f0 <RadioSetPublicNetwork+0x58>)
 800f0a4:	79fb      	ldrb	r3, [r7, #7]
 800f0a6:	7313      	strb	r3, [r2, #12]
 800f0a8:	4b11      	ldr	r3, [pc, #68]	; (800f0f0 <RadioSetPublicNetwork+0x58>)
 800f0aa:	7b1a      	ldrb	r2, [r3, #12]
 800f0ac:	4b10      	ldr	r3, [pc, #64]	; (800f0f0 <RadioSetPublicNetwork+0x58>)
 800f0ae:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	f7ff f819 	bl	800e0e8 <RadioSetModem>
    if( enable == true )
 800f0b6:	79fb      	ldrb	r3, [r7, #7]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00a      	beq.n	800f0d2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f0bc:	2134      	movs	r1, #52	; 0x34
 800f0be:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f0c2:	f001 fe4f 	bl	8010d64 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f0c6:	2144      	movs	r1, #68	; 0x44
 800f0c8:	f240 7041 	movw	r0, #1857	; 0x741
 800f0cc:	f001 fe4a 	bl	8010d64 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800f0d0:	e009      	b.n	800f0e6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f0d2:	2114      	movs	r1, #20
 800f0d4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f0d8:	f001 fe44 	bl	8010d64 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f0dc:	2124      	movs	r1, #36	; 0x24
 800f0de:	f240 7041 	movw	r0, #1857	; 0x741
 800f0e2:	f001 fe3f 	bl	8010d64 <SUBGRF_WriteRegister>
}
 800f0e6:	bf00      	nop
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	2000201c 	.word	0x2000201c

0800f0f4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800f0f8:	f001 ff84 	bl	8011004 <SUBGRF_GetRadioWakeUpTime>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	3303      	adds	r3, #3
}
 800f100:	4618      	mov	r0, r3
 800f102:	bd80      	pop	{r7, pc}

0800f104 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800f10c:	f000 f80e 	bl	800f12c <RadioOnTxTimeoutProcess>
}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800f120:	f000 f818 	bl	800f154 <RadioOnRxTimeoutProcess>
}
 800f124:	bf00      	nop
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <RadioOnTxTimeoutProcess+0x24>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d008      	beq.n	800f14a <RadioOnTxTimeoutProcess+0x1e>
 800f138:	4b05      	ldr	r3, [pc, #20]	; (800f150 <RadioOnTxTimeoutProcess+0x24>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d003      	beq.n	800f14a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800f142:	4b03      	ldr	r3, [pc, #12]	; (800f150 <RadioOnTxTimeoutProcess+0x24>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	4798      	blx	r3
    }
}
 800f14a:	bf00      	nop
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	20002018 	.word	0x20002018

0800f154 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f158:	4b07      	ldr	r3, [pc, #28]	; (800f178 <RadioOnRxTimeoutProcess+0x24>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d008      	beq.n	800f172 <RadioOnRxTimeoutProcess+0x1e>
 800f160:	4b05      	ldr	r3, [pc, #20]	; (800f178 <RadioOnRxTimeoutProcess+0x24>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d003      	beq.n	800f172 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800f16a:	4b03      	ldr	r3, [pc, #12]	; (800f178 <RadioOnRxTimeoutProcess+0x24>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	4798      	blx	r3
    }
}
 800f172:	bf00      	nop
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	20002018 	.word	0x20002018

0800f17c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800f186:	4a05      	ldr	r2, [pc, #20]	; (800f19c <RadioOnDioIrq+0x20>)
 800f188:	88fb      	ldrh	r3, [r7, #6]
 800f18a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800f18e:	f000 f807 	bl	800f1a0 <RadioIrqProcess>
}
 800f192:	bf00      	nop
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	2000201c 	.word	0x2000201c

0800f1a0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800f1a0:	b590      	push	{r4, r7, lr}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800f1ae:	4ba5      	ldr	r3, [pc, #660]	; (800f444 <RadioIrqProcess+0x2a4>)
 800f1b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800f1b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1b8:	f000 810c 	beq.w	800f3d4 <RadioIrqProcess+0x234>
 800f1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1c0:	f300 81c0 	bgt.w	800f544 <RadioIrqProcess+0x3a4>
 800f1c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1c8:	f000 80f0 	beq.w	800f3ac <RadioIrqProcess+0x20c>
 800f1cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1d0:	f300 81b8 	bgt.w	800f544 <RadioIrqProcess+0x3a4>
 800f1d4:	2b80      	cmp	r3, #128	; 0x80
 800f1d6:	f000 80d5 	beq.w	800f384 <RadioIrqProcess+0x1e4>
 800f1da:	2b80      	cmp	r3, #128	; 0x80
 800f1dc:	f300 81b2 	bgt.w	800f544 <RadioIrqProcess+0x3a4>
 800f1e0:	2b20      	cmp	r3, #32
 800f1e2:	dc49      	bgt.n	800f278 <RadioIrqProcess+0xd8>
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f340 81ad 	ble.w	800f544 <RadioIrqProcess+0x3a4>
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	2b1f      	cmp	r3, #31
 800f1ee:	f200 81a9 	bhi.w	800f544 <RadioIrqProcess+0x3a4>
 800f1f2:	a201      	add	r2, pc, #4	; (adr r2, 800f1f8 <RadioIrqProcess+0x58>)
 800f1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f8:	0800f281 	.word	0x0800f281
 800f1fc:	0800f2bb 	.word	0x0800f2bb
 800f200:	0800f545 	.word	0x0800f545
 800f204:	0800f461 	.word	0x0800f461
 800f208:	0800f545 	.word	0x0800f545
 800f20c:	0800f545 	.word	0x0800f545
 800f210:	0800f545 	.word	0x0800f545
 800f214:	0800f4cf 	.word	0x0800f4cf
 800f218:	0800f545 	.word	0x0800f545
 800f21c:	0800f545 	.word	0x0800f545
 800f220:	0800f545 	.word	0x0800f545
 800f224:	0800f545 	.word	0x0800f545
 800f228:	0800f545 	.word	0x0800f545
 800f22c:	0800f545 	.word	0x0800f545
 800f230:	0800f545 	.word	0x0800f545
 800f234:	0800f545 	.word	0x0800f545
 800f238:	0800f545 	.word	0x0800f545
 800f23c:	0800f545 	.word	0x0800f545
 800f240:	0800f545 	.word	0x0800f545
 800f244:	0800f545 	.word	0x0800f545
 800f248:	0800f545 	.word	0x0800f545
 800f24c:	0800f545 	.word	0x0800f545
 800f250:	0800f545 	.word	0x0800f545
 800f254:	0800f545 	.word	0x0800f545
 800f258:	0800f545 	.word	0x0800f545
 800f25c:	0800f545 	.word	0x0800f545
 800f260:	0800f545 	.word	0x0800f545
 800f264:	0800f545 	.word	0x0800f545
 800f268:	0800f545 	.word	0x0800f545
 800f26c:	0800f545 	.word	0x0800f545
 800f270:	0800f545 	.word	0x0800f545
 800f274:	0800f4df 	.word	0x0800f4df
 800f278:	2b40      	cmp	r3, #64	; 0x40
 800f27a:	f000 814b 	beq.w	800f514 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800f27e:	e161      	b.n	800f544 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800f280:	4871      	ldr	r0, [pc, #452]	; (800f448 <RadioIrqProcess+0x2a8>)
 800f282:	f002 f9d5 	bl	8011630 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800f286:	2000      	movs	r0, #0
 800f288:	f000 ffe8 	bl	801025c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800f28c:	f001 ffbc 	bl	8011208 <RFW_Is_LongPacketModeEnabled>
 800f290:	4603      	mov	r3, r0
 800f292:	2b01      	cmp	r3, #1
 800f294:	d101      	bne.n	800f29a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800f296:	f001 ffe0 	bl	801125a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800f29a:	4b6c      	ldr	r3, [pc, #432]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f000 8152 	beq.w	800f548 <RadioIrqProcess+0x3a8>
 800f2a4:	4b69      	ldr	r3, [pc, #420]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 814c 	beq.w	800f548 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800f2b0:	4b66      	ldr	r3, [pc, #408]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4798      	blx	r3
        break;
 800f2b8:	e146      	b.n	800f548 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800f2ba:	4865      	ldr	r0, [pc, #404]	; (800f450 <RadioIrqProcess+0x2b0>)
 800f2bc:	f002 f9b8 	bl	8011630 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f2c0:	4b60      	ldr	r3, [pc, #384]	; (800f444 <RadioIrqProcess+0x2a4>)
 800f2c2:	785b      	ldrb	r3, [r3, #1]
 800f2c4:	f083 0301 	eor.w	r3, r3, #1
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d014      	beq.n	800f2f8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	f000 ffc4 	bl	801025c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	f640 1002 	movw	r0, #2306	; 0x902
 800f2da:	f001 fd43 	bl	8010d64 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800f2de:	f640 1044 	movw	r0, #2372	; 0x944
 800f2e2:	f001 fd53 	bl	8010d8c <SUBGRF_ReadRegister>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	f043 0302 	orr.w	r3, r3, #2
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	f640 1044 	movw	r0, #2372	; 0x944
 800f2f4:	f001 fd36 	bl	8010d64 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800f2f8:	1dfb      	adds	r3, r7, #7
 800f2fa:	22ff      	movs	r2, #255	; 0xff
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	4855      	ldr	r0, [pc, #340]	; (800f454 <RadioIrqProcess+0x2b4>)
 800f300:	f000 fe7c 	bl	800fffc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800f304:	4854      	ldr	r0, [pc, #336]	; (800f458 <RadioIrqProcess+0x2b8>)
 800f306:	f001 fcdb 	bl	8010cc0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f30a:	4b50      	ldr	r3, [pc, #320]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d036      	beq.n	800f380 <RadioIrqProcess+0x1e0>
 800f312:	4b4e      	ldr	r3, [pc, #312]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d031      	beq.n	800f380 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 800f31c:	4b49      	ldr	r3, [pc, #292]	; (800f444 <RadioIrqProcess+0x2a4>)
 800f31e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f322:	2b01      	cmp	r3, #1
 800f324:	d10e      	bne.n	800f344 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800f326:	4b49      	ldr	r3, [pc, #292]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	689c      	ldr	r4, [r3, #8]
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	b299      	uxth	r1, r3
 800f330:	4b44      	ldr	r3, [pc, #272]	; (800f444 <RadioIrqProcess+0x2a4>)
 800f332:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800f336:	b21a      	sxth	r2, r3
 800f338:	4b42      	ldr	r3, [pc, #264]	; (800f444 <RadioIrqProcess+0x2a4>)
 800f33a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800f33e:	4845      	ldr	r0, [pc, #276]	; (800f454 <RadioIrqProcess+0x2b4>)
 800f340:	47a0      	blx	r4
                break;
 800f342:	e01e      	b.n	800f382 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800f344:	4b3f      	ldr	r3, [pc, #252]	; (800f444 <RadioIrqProcess+0x2a4>)
 800f346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f348:	463a      	mov	r2, r7
 800f34a:	4611      	mov	r1, r2
 800f34c:	4618      	mov	r0, r3
 800f34e:	f001 fea9 	bl	80110a4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800f352:	4b3e      	ldr	r3, [pc, #248]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	689c      	ldr	r4, [r3, #8]
 800f358:	79fb      	ldrb	r3, [r7, #7]
 800f35a:	b299      	uxth	r1, r3
 800f35c:	4b39      	ldr	r3, [pc, #228]	; (800f444 <RadioIrqProcess+0x2a4>)
 800f35e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800f362:	b218      	sxth	r0, r3
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f36a:	4a3c      	ldr	r2, [pc, #240]	; (800f45c <RadioIrqProcess+0x2bc>)
 800f36c:	fb82 c203 	smull	ip, r2, r2, r3
 800f370:	1192      	asrs	r2, r2, #6
 800f372:	17db      	asrs	r3, r3, #31
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	b25b      	sxtb	r3, r3
 800f378:	4602      	mov	r2, r0
 800f37a:	4836      	ldr	r0, [pc, #216]	; (800f454 <RadioIrqProcess+0x2b4>)
 800f37c:	47a0      	blx	r4
                break;
 800f37e:	e000      	b.n	800f382 <RadioIrqProcess+0x1e2>
        }
 800f380:	bf00      	nop
        break;
 800f382:	e0f0      	b.n	800f566 <RadioIrqProcess+0x3c6>
        SUBGRF_SetStandby( STDBY_RC );
 800f384:	2000      	movs	r0, #0
 800f386:	f000 ff69 	bl	801025c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f38a:	4b30      	ldr	r3, [pc, #192]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 80dc 	beq.w	800f54c <RadioIrqProcess+0x3ac>
 800f394:	4b2d      	ldr	r3, [pc, #180]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	699b      	ldr	r3, [r3, #24]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 80d6 	beq.w	800f54c <RadioIrqProcess+0x3ac>
            RadioEvents->CadDone( false );
 800f3a0:	4b2a      	ldr	r3, [pc, #168]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	699b      	ldr	r3, [r3, #24]
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	4798      	blx	r3
        break;
 800f3aa:	e0cf      	b.n	800f54c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	f000 ff55 	bl	801025c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f3b2:	4b26      	ldr	r3, [pc, #152]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	f000 80ca 	beq.w	800f550 <RadioIrqProcess+0x3b0>
 800f3bc:	4b23      	ldr	r3, [pc, #140]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	699b      	ldr	r3, [r3, #24]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f000 80c4 	beq.w	800f550 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( true );
 800f3c8:	4b20      	ldr	r3, [pc, #128]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	2001      	movs	r0, #1
 800f3d0:	4798      	blx	r3
        break;
 800f3d2:	e0bd      	b.n	800f550 <RadioIrqProcess+0x3b0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800f3d4:	f000 fdf8 	bl	800ffc8 <SUBGRF_GetOperatingMode>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b04      	cmp	r3, #4
 800f3dc:	d115      	bne.n	800f40a <RadioIrqProcess+0x26a>
            TimerStop( &TxTimeoutTimer );
 800f3de:	481a      	ldr	r0, [pc, #104]	; (800f448 <RadioIrqProcess+0x2a8>)
 800f3e0:	f002 f926 	bl	8011630 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	f000 ff39 	bl	801025c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f3ea:	4b18      	ldr	r3, [pc, #96]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 80b0 	beq.w	800f554 <RadioIrqProcess+0x3b4>
 800f3f4:	4b15      	ldr	r3, [pc, #84]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f000 80aa 	beq.w	800f554 <RadioIrqProcess+0x3b4>
                RadioEvents->TxTimeout( );
 800f400:	4b12      	ldr	r3, [pc, #72]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	4798      	blx	r3
        break;
 800f408:	e0a4      	b.n	800f554 <RadioIrqProcess+0x3b4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800f40a:	f000 fddd 	bl	800ffc8 <SUBGRF_GetOperatingMode>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b05      	cmp	r3, #5
 800f412:	f040 809f 	bne.w	800f554 <RadioIrqProcess+0x3b4>
            TimerStop( &RxTimeoutTimer );
 800f416:	480e      	ldr	r0, [pc, #56]	; (800f450 <RadioIrqProcess+0x2b0>)
 800f418:	f002 f90a 	bl	8011630 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f41c:	2000      	movs	r0, #0
 800f41e:	f000 ff1d 	bl	801025c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f422:	4b0a      	ldr	r3, [pc, #40]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	f000 8094 	beq.w	800f554 <RadioIrqProcess+0x3b4>
 800f42c:	4b07      	ldr	r3, [pc, #28]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f000 808e 	beq.w	800f554 <RadioIrqProcess+0x3b4>
                RadioEvents->RxTimeout( );
 800f438:	4b04      	ldr	r3, [pc, #16]	; (800f44c <RadioIrqProcess+0x2ac>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	4798      	blx	r3
        break;
 800f440:	e088      	b.n	800f554 <RadioIrqProcess+0x3b4>
 800f442:	bf00      	nop
 800f444:	2000201c 	.word	0x2000201c
 800f448:	20002078 	.word	0x20002078
 800f44c:	20002018 	.word	0x20002018
 800f450:	20002090 	.word	0x20002090
 800f454:	20001f18 	.word	0x20001f18
 800f458:	20002040 	.word	0x20002040
 800f45c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800f460:	4b43      	ldr	r3, [pc, #268]	; (800f570 <RadioIrqProcess+0x3d0>)
 800f462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f464:	2b00      	cmp	r3, #0
 800f466:	d077      	beq.n	800f558 <RadioIrqProcess+0x3b8>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800f468:	4a42      	ldr	r2, [pc, #264]	; (800f574 <RadioIrqProcess+0x3d4>)
 800f46a:	4b41      	ldr	r3, [pc, #260]	; (800f570 <RadioIrqProcess+0x3d0>)
 800f46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f46e:	0c1b      	lsrs	r3, r3, #16
 800f470:	b2db      	uxtb	r3, r3
 800f472:	4619      	mov	r1, r3
 800f474:	f640 1003 	movw	r0, #2307	; 0x903
 800f478:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800f47a:	4a3e      	ldr	r2, [pc, #248]	; (800f574 <RadioIrqProcess+0x3d4>)
 800f47c:	4b3c      	ldr	r3, [pc, #240]	; (800f570 <RadioIrqProcess+0x3d0>)
 800f47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f480:	0a1b      	lsrs	r3, r3, #8
 800f482:	b2db      	uxtb	r3, r3
 800f484:	4619      	mov	r1, r3
 800f486:	f640 1004 	movw	r0, #2308	; 0x904
 800f48a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800f48c:	4a39      	ldr	r2, [pc, #228]	; (800f574 <RadioIrqProcess+0x3d4>)
 800f48e:	4b38      	ldr	r3, [pc, #224]	; (800f570 <RadioIrqProcess+0x3d0>)
 800f490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f492:	b2db      	uxtb	r3, r3
 800f494:	4619      	mov	r1, r3
 800f496:	f640 1005 	movw	r0, #2309	; 0x905
 800f49a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800f49c:	4c35      	ldr	r4, [pc, #212]	; (800f574 <RadioIrqProcess+0x3d4>)
 800f49e:	4b36      	ldr	r3, [pc, #216]	; (800f578 <RadioIrqProcess+0x3d8>)
 800f4a0:	f640 1002 	movw	r0, #2306	; 0x902
 800f4a4:	4798      	blx	r3
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	f043 0301 	orr.w	r3, r3, #1
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	f640 1002 	movw	r0, #2306	; 0x902
 800f4b4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800f4b6:	4b2e      	ldr	r3, [pc, #184]	; (800f570 <RadioIrqProcess+0x3d0>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f4bc:	2300      	movs	r3, #0
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f240 2162 	movw	r1, #610	; 0x262
 800f4c4:	f240 2062 	movw	r0, #610	; 0x262
 800f4c8:	f001 f89c 	bl	8010604 <SUBGRF_SetDioIrqParams>
        break;
 800f4cc:	e044      	b.n	800f558 <RadioIrqProcess+0x3b8>
        if( 1UL == RFW_Is_Init( ) )
 800f4ce:	f001 fe94 	bl	80111fa <RFW_Is_Init>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d141      	bne.n	800f55c <RadioIrqProcess+0x3bc>
            RFW_ReceivePayload( );
 800f4d8:	f001 fec5 	bl	8011266 <RFW_ReceivePayload>
        break;
 800f4dc:	e03e      	b.n	800f55c <RadioIrqProcess+0x3bc>
        TimerStop( &RxTimeoutTimer );
 800f4de:	4827      	ldr	r0, [pc, #156]	; (800f57c <RadioIrqProcess+0x3dc>)
 800f4e0:	f002 f8a6 	bl	8011630 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f4e4:	4b22      	ldr	r3, [pc, #136]	; (800f570 <RadioIrqProcess+0x3d0>)
 800f4e6:	785b      	ldrb	r3, [r3, #1]
 800f4e8:	f083 0301 	eor.w	r3, r3, #1
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	f000 feb2 	bl	801025c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f4f8:	4b21      	ldr	r3, [pc, #132]	; (800f580 <RadioIrqProcess+0x3e0>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d02f      	beq.n	800f560 <RadioIrqProcess+0x3c0>
 800f500:	4b1f      	ldr	r3, [pc, #124]	; (800f580 <RadioIrqProcess+0x3e0>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d02a      	beq.n	800f560 <RadioIrqProcess+0x3c0>
            RadioEvents->RxTimeout( );
 800f50a:	4b1d      	ldr	r3, [pc, #116]	; (800f580 <RadioIrqProcess+0x3e0>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	4798      	blx	r3
        break;
 800f512:	e025      	b.n	800f560 <RadioIrqProcess+0x3c0>
        if( SubgRf.RxContinuous == false )
 800f514:	4b16      	ldr	r3, [pc, #88]	; (800f570 <RadioIrqProcess+0x3d0>)
 800f516:	785b      	ldrb	r3, [r3, #1]
 800f518:	f083 0301 	eor.w	r3, r3, #1
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800f522:	2000      	movs	r0, #0
 800f524:	f000 fe9a 	bl	801025c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800f528:	4b15      	ldr	r3, [pc, #84]	; (800f580 <RadioIrqProcess+0x3e0>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d019      	beq.n	800f564 <RadioIrqProcess+0x3c4>
 800f530:	4b13      	ldr	r3, [pc, #76]	; (800f580 <RadioIrqProcess+0x3e0>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	691b      	ldr	r3, [r3, #16]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d014      	beq.n	800f564 <RadioIrqProcess+0x3c4>
            RadioEvents->RxError( );
 800f53a:	4b11      	ldr	r3, [pc, #68]	; (800f580 <RadioIrqProcess+0x3e0>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	4798      	blx	r3
        break;
 800f542:	e00f      	b.n	800f564 <RadioIrqProcess+0x3c4>
        break;
 800f544:	bf00      	nop
 800f546:	e00e      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f548:	bf00      	nop
 800f54a:	e00c      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f54c:	bf00      	nop
 800f54e:	e00a      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f550:	bf00      	nop
 800f552:	e008      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f554:	bf00      	nop
 800f556:	e006      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f558:	bf00      	nop
 800f55a:	e004      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f55c:	bf00      	nop
 800f55e:	e002      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f560:	bf00      	nop
 800f562:	e000      	b.n	800f566 <RadioIrqProcess+0x3c6>
        break;
 800f564:	bf00      	nop
    }
}
 800f566:	bf00      	nop
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd90      	pop	{r4, r7, pc}
 800f56e:	bf00      	nop
 800f570:	2000201c 	.word	0x2000201c
 800f574:	0800efaf 	.word	0x0800efaf
 800f578:	0800efd3 	.word	0x0800efd3
 800f57c:	20002090 	.word	0x20002090
 800f580:	20002018 	.word	0x20002018

0800f584 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f588:	4b09      	ldr	r3, [pc, #36]	; (800f5b0 <RadioTxPrbs+0x2c>)
 800f58a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f58e:	2101      	movs	r1, #1
 800f590:	4618      	mov	r0, r3
 800f592:	f001 fcdb 	bl	8010f4c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800f596:	4b07      	ldr	r3, [pc, #28]	; (800f5b4 <RadioTxPrbs+0x30>)
 800f598:	212d      	movs	r1, #45	; 0x2d
 800f59a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f59e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800f5a0:	f000 ff1f 	bl	80103e2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800f5a4:	4804      	ldr	r0, [pc, #16]	; (800f5b8 <RadioTxPrbs+0x34>)
 800f5a6:	f000 fe75 	bl	8010294 <SUBGRF_SetTx>
}
 800f5aa:	bf00      	nop
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	2000201c 	.word	0x2000201c
 800f5b4:	0800efaf 	.word	0x0800efaf
 800f5b8:	000fffff 	.word	0x000fffff

0800f5bc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800f5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f001 fce6 	bl	8010f9c <SUBGRF_SetRfTxPower>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f5d4:	210e      	movs	r1, #14
 800f5d6:	f640 101f 	movw	r0, #2335	; 0x91f
 800f5da:	f001 fbc3 	bl	8010d64 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800f5de:	7bfb      	ldrb	r3, [r7, #15]
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f001 fcb2 	bl	8010f4c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f5e8:	f000 fef2 	bl	80103d0 <SUBGRF_SetTxContinuousWave>
}
 800f5ec:	bf00      	nop
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b089      	sub	sp, #36	; 0x24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	4613      	mov	r3, r2
 800f600:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800f602:	2300      	movs	r3, #0
 800f604:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800f606:	2300      	movs	r3, #0
 800f608:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800f60a:	2300      	movs	r3, #0
 800f60c:	61bb      	str	r3, [r7, #24]
 800f60e:	e011      	b.n	800f634 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800f610:	69bb      	ldr	r3, [r7, #24]
 800f612:	68ba      	ldr	r2, [r7, #8]
 800f614:	4413      	add	r3, r2
 800f616:	781a      	ldrb	r2, [r3, #0]
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	68b9      	ldr	r1, [r7, #8]
 800f61c:	440b      	add	r3, r1
 800f61e:	43d2      	mvns	r2, r2
 800f620:	b2d2      	uxtb	r2, r2
 800f622:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	4413      	add	r3, r2
 800f62a:	2200      	movs	r2, #0
 800f62c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	3301      	adds	r3, #1
 800f632:	61bb      	str	r3, [r7, #24]
 800f634:	79fb      	ldrb	r3, [r7, #7]
 800f636:	69ba      	ldr	r2, [r7, #24]
 800f638:	429a      	cmp	r2, r3
 800f63a:	dbe9      	blt.n	800f610 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800f63c:	2300      	movs	r3, #0
 800f63e:	61bb      	str	r3, [r7, #24]
 800f640:	e049      	b.n	800f6d6 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	425a      	negs	r2, r3
 800f646:	f003 0307 	and.w	r3, r3, #7
 800f64a:	f002 0207 	and.w	r2, r2, #7
 800f64e:	bf58      	it	pl
 800f650:	4253      	negpl	r3, r2
 800f652:	b2db      	uxtb	r3, r3
 800f654:	f1c3 0307 	rsb	r3, r3, #7
 800f658:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	da00      	bge.n	800f662 <payload_integration+0x6e>
 800f660:	3307      	adds	r3, #7
 800f662:	10db      	asrs	r3, r3, #3
 800f664:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	3301      	adds	r3, #1
 800f66a:	425a      	negs	r2, r3
 800f66c:	f003 0307 	and.w	r3, r3, #7
 800f670:	f002 0207 	and.w	r2, r2, #7
 800f674:	bf58      	it	pl
 800f676:	4253      	negpl	r3, r2
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	f1c3 0307 	rsb	r3, r3, #7
 800f67e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	3301      	adds	r3, #1
 800f684:	2b00      	cmp	r3, #0
 800f686:	da00      	bge.n	800f68a <payload_integration+0x96>
 800f688:	3307      	adds	r3, #7
 800f68a:	10db      	asrs	r3, r3, #3
 800f68c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800f68e:	7dbb      	ldrb	r3, [r7, #22]
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	4413      	add	r3, r2
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	7dfb      	ldrb	r3, [r7, #23]
 800f69a:	fa42 f303 	asr.w	r3, r2, r3
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	f003 0301 	and.w	r3, r3, #1
 800f6a4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800f6a6:	7ffa      	ldrb	r2, [r7, #31]
 800f6a8:	7cfb      	ldrb	r3, [r7, #19]
 800f6aa:	4053      	eors	r3, r2
 800f6ac:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800f6ae:	7d3b      	ldrb	r3, [r7, #20]
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	b25a      	sxtb	r2, r3
 800f6b8:	7ff9      	ldrb	r1, [r7, #31]
 800f6ba:	7d7b      	ldrb	r3, [r7, #21]
 800f6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f6c0:	b25b      	sxtb	r3, r3
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	b259      	sxtb	r1, r3
 800f6c6:	7d3b      	ldrb	r3, [r7, #20]
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	b2ca      	uxtb	r2, r1
 800f6ce:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	61bb      	str	r3, [r7, #24]
 800f6d6:	79fb      	ldrb	r3, [r7, #7]
 800f6d8:	00db      	lsls	r3, r3, #3
 800f6da:	69ba      	ldr	r2, [r7, #24]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	dbb0      	blt.n	800f642 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f6e0:	7ffb      	ldrb	r3, [r7, #31]
 800f6e2:	01db      	lsls	r3, r3, #7
 800f6e4:	b25a      	sxtb	r2, r3
 800f6e6:	7ffb      	ldrb	r3, [r7, #31]
 800f6e8:	019b      	lsls	r3, r3, #6
 800f6ea:	b25b      	sxtb	r3, r3
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	b25b      	sxtb	r3, r3
 800f6f0:	7ffa      	ldrb	r2, [r7, #31]
 800f6f2:	2a00      	cmp	r2, #0
 800f6f4:	d101      	bne.n	800f6fa <payload_integration+0x106>
 800f6f6:	2220      	movs	r2, #32
 800f6f8:	e000      	b.n	800f6fc <payload_integration+0x108>
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	b259      	sxtb	r1, r3
 800f700:	79fb      	ldrb	r3, [r7, #7]
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	4413      	add	r3, r2
 800f706:	b2ca      	uxtb	r2, r1
 800f708:	701a      	strb	r2, [r3, #0]
}
 800f70a:	bf00      	nop
 800f70c:	3724      	adds	r7, #36	; 0x24
 800f70e:	46bd      	mov	sp, r7
 800f710:	bc80      	pop	{r7}
 800f712:	4770      	bx	lr

0800f714 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b08c      	sub	sp, #48	; 0x30
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60b9      	str	r1, [r7, #8]
 800f71c:	607a      	str	r2, [r7, #4]
 800f71e:	603b      	str	r3, [r7, #0]
 800f720:	4603      	mov	r3, r0
 800f722:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800f724:	2300      	movs	r3, #0
 800f726:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800f728:	2300      	movs	r3, #0
 800f72a:	623b      	str	r3, [r7, #32]
 800f72c:	2300      	movs	r3, #0
 800f72e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800f730:	f001 fd5d 	bl	80111ee <RFW_DeInit>

    if( rxContinuous != 0 )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d001      	beq.n	800f73e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2b00      	cmp	r3, #0
 800f742:	bf14      	ite	ne
 800f744:	2301      	movne	r3, #1
 800f746:	2300      	moveq	r3, #0
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	4ba3      	ldr	r3, [pc, #652]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f74c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d003      	beq.n	800f75c <RadioSetRxGenericConfig+0x48>
 800f754:	2b01      	cmp	r3, #1
 800f756:	f000 80dc 	beq.w	800f912 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800f75a:	e194      	b.n	800fa86 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d003      	beq.n	800f76c <RadioSetRxGenericConfig+0x58>
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d102      	bne.n	800f772 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800f76c:	f04f 33ff 	mov.w	r3, #4294967295
 800f770:	e18a      	b.n	800fa88 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	7f9b      	ldrb	r3, [r3, #30]
 800f776:	2b08      	cmp	r3, #8
 800f778:	d902      	bls.n	800f780 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800f77a:	f04f 33ff 	mov.w	r3, #4294967295
 800f77e:	e183      	b.n	800fa88 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	6919      	ldr	r1, [r3, #16]
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	7f9b      	ldrb	r3, [r3, #30]
 800f788:	b29a      	uxth	r2, r3
 800f78a:	f107 0320 	add.w	r3, r7, #32
 800f78e:	4618      	mov	r0, r3
 800f790:	f001 fd79 	bl	8011286 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	bf14      	ite	ne
 800f79c:	2301      	movne	r3, #1
 800f79e:	2300      	moveq	r3, #0
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f000 fe26 	bl	80103f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f7a8:	4b8b      	ldr	r3, [pc, #556]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	689b      	ldr	r3, [r3, #8]
 800f7b4:	4a88      	ldr	r2, [pc, #544]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7b6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f7be:	4b86      	ldr	r3, [pc, #536]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f001 fc43 	bl	8011054 <SUBGRF_GetFskBandwidthRegValue>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	4b81      	ldr	r3, [pc, #516]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f7d8:	4b7f      	ldr	r3, [pc, #508]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	00db      	lsls	r3, r3, #3
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	4b7b      	ldr	r3, [pc, #492]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7ea:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	7fda      	ldrb	r2, [r3, #31]
 800f7f0:	4b79      	ldr	r3, [pc, #484]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7f2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	7f9b      	ldrb	r3, [r3, #30]
 800f7f8:	00db      	lsls	r3, r3, #3
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	4b76      	ldr	r3, [pc, #472]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f7fe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f806:	4b74      	ldr	r3, [pc, #464]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f808:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f810:	2b00      	cmp	r3, #0
 800f812:	d105      	bne.n	800f820 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	4b6f      	ldr	r3, [pc, #444]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f81c:	759a      	strb	r2, [r3, #22]
 800f81e:	e00b      	b.n	800f838 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f826:	2b02      	cmp	r3, #2
 800f828:	d103      	bne.n	800f832 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f82a:	4b6b      	ldr	r3, [pc, #428]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f82c:	22ff      	movs	r2, #255	; 0xff
 800f82e:	759a      	strb	r2, [r3, #22]
 800f830:	e002      	b.n	800f838 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f832:	4b69      	ldr	r3, [pc, #420]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f834:	22ff      	movs	r2, #255	; 0xff
 800f836:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d004      	beq.n	800f84c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d12d      	bne.n	800f8a8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f852:	2bf1      	cmp	r3, #241	; 0xf1
 800f854:	d00c      	beq.n	800f870 <RadioSetRxGenericConfig+0x15c>
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f85c:	2bf2      	cmp	r3, #242	; 0xf2
 800f85e:	d007      	beq.n	800f870 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f866:	2b01      	cmp	r3, #1
 800f868:	d002      	beq.n	800f870 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800f86a:	f04f 33ff 	mov.w	r3, #4294967295
 800f86e:	e10b      	b.n	800fa88 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800f870:	2300      	movs	r3, #0
 800f872:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800f878:	4b58      	ldr	r3, [pc, #352]	; (800f9dc <RadioSetRxGenericConfig+0x2c8>)
 800f87a:	6819      	ldr	r1, [r3, #0]
 800f87c:	f107 0314 	add.w	r3, r7, #20
 800f880:	4a57      	ldr	r2, [pc, #348]	; (800f9e0 <RadioSetRxGenericConfig+0x2cc>)
 800f882:	4618      	mov	r0, r3
 800f884:	f001 fca6 	bl	80111d4 <RFW_Init>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <RadioSetRxGenericConfig+0x180>
                return -1;
 800f88e:	f04f 33ff 	mov.w	r3, #4294967295
 800f892:	e0f9      	b.n	800fa88 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800f894:	4b50      	ldr	r3, [pc, #320]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f896:	2200      	movs	r2, #0
 800f898:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800f89a:	4b4f      	ldr	r3, [pc, #316]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f89c:	2201      	movs	r2, #1
 800f89e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800f8a0:	4b4d      	ldr	r3, [pc, #308]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	755a      	strb	r2, [r3, #21]
        {
 800f8a6:	e00e      	b.n	800f8c6 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f8ae:	4b4a      	ldr	r3, [pc, #296]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f8b0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f8b8:	4b47      	ldr	r3, [pc, #284]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f8ba:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f8c2:	4b45      	ldr	r3, [pc, #276]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f8c4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800f8c6:	f7ff fa70 	bl	800edaa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	f7fe fc0c 	bl	800e0e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f8d0:	4844      	ldr	r0, [pc, #272]	; (800f9e4 <RadioSetRxGenericConfig+0x2d0>)
 800f8d2:	f001 f82d 	bl	8010930 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f8d6:	4844      	ldr	r0, [pc, #272]	; (800f9e8 <RadioSetRxGenericConfig+0x2d4>)
 800f8d8:	f001 f8fc 	bl	8010ad4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800f8dc:	f107 0320 	add.w	r3, r7, #32
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f000 fbc0 	bl	8010066 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	8b9b      	ldrh	r3, [r3, #28]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f000 fc0a 	bl	8010104 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	8b1b      	ldrh	r3, [r3, #24]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f000 fbe5 	bl	80100c4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800f900:	fb03 f202 	mul.w	r2, r3, r2
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	fbb2 f3f3 	udiv	r3, r2, r3
 800f90c:	4a32      	ldr	r2, [pc, #200]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f90e:	6093      	str	r3, [r2, #8]
        break;
 800f910:	e0b9      	b.n	800fa86 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f916:	2b00      	cmp	r3, #0
 800f918:	d102      	bne.n	800f920 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800f91a:	f04f 33ff 	mov.w	r3, #4294967295
 800f91e:	e0b3      	b.n	800fa88 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f926:	2b01      	cmp	r3, #1
 800f928:	d104      	bne.n	800f934 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	695b      	ldr	r3, [r3, #20]
 800f92e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f932:	e002      	b.n	800f93a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800f934:	23ff      	movs	r3, #255	; 0xff
 800f936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f93e:	2b00      	cmp	r3, #0
 800f940:	bf14      	ite	ne
 800f942:	2301      	movne	r3, #1
 800f944:	2300      	moveq	r3, #0
 800f946:	b2db      	uxtb	r3, r3
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 fd53 	bl	80103f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	b2db      	uxtb	r3, r3
 800f952:	4618      	mov	r0, r3
 800f954:	f000 fd5d 	bl	8010412 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f958:	4b1f      	ldr	r3, [pc, #124]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f966:	4b1c      	ldr	r3, [pc, #112]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f972:	4b19      	ldr	r3, [pc, #100]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f97e:	4b16      	ldr	r3, [pc, #88]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f980:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d010      	beq.n	800f9b0 <RadioSetRxGenericConfig+0x29c>
 800f98e:	2b02      	cmp	r3, #2
 800f990:	dc2c      	bgt.n	800f9ec <RadioSetRxGenericConfig+0x2d8>
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <RadioSetRxGenericConfig+0x288>
 800f996:	2b01      	cmp	r3, #1
 800f998:	d005      	beq.n	800f9a6 <RadioSetRxGenericConfig+0x292>
            break;
 800f99a:	e027      	b.n	800f9ec <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f99c:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f9a4:	e023      	b.n	800f9ee <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f9a6:	4b0c      	ldr	r3, [pc, #48]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f9ae:	e01e      	b.n	800f9ee <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9b6:	2b0b      	cmp	r3, #11
 800f9b8:	d004      	beq.n	800f9c4 <RadioSetRxGenericConfig+0x2b0>
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9c0:	2b0c      	cmp	r3, #12
 800f9c2:	d104      	bne.n	800f9ce <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f9c4:	4b04      	ldr	r3, [pc, #16]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f9cc:	e00f      	b.n	800f9ee <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f9ce:	4b02      	ldr	r3, [pc, #8]	; (800f9d8 <RadioSetRxGenericConfig+0x2c4>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f9d6:	e00a      	b.n	800f9ee <RadioSetRxGenericConfig+0x2da>
 800f9d8:	2000201c 	.word	0x2000201c
 800f9dc:	20002018 	.word	0x20002018
 800f9e0:	20002090 	.word	0x20002090
 800f9e4:	20002054 	.word	0x20002054
 800f9e8:	2000202a 	.word	0x2000202a
            break;
 800f9ec:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f9ee:	4b28      	ldr	r3, [pc, #160]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800f9f8:	4b25      	ldr	r3, [pc, #148]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800f9fa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800fa02:	4b23      	ldr	r3, [pc, #140]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800fa04:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800fa06:	4a22      	ldr	r2, [pc, #136]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800fa08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa0c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800fa14:	4b1e      	ldr	r3, [pc, #120]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800fa16:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800fa20:	4b1b      	ldr	r3, [pc, #108]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800fa22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800fa26:	f7ff f9c0 	bl	800edaa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800fa2a:	2001      	movs	r0, #1
 800fa2c:	f7fe fb5c 	bl	800e0e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fa30:	4818      	ldr	r0, [pc, #96]	; (800fa94 <RadioSetRxGenericConfig+0x380>)
 800fa32:	f000 ff7d 	bl	8010930 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fa36:	4818      	ldr	r0, [pc, #96]	; (800fa98 <RadioSetRxGenericConfig+0x384>)
 800fa38:	f001 f84c 	bl	8010ad4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800fa3c:	4b14      	ldr	r3, [pc, #80]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800fa3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d10d      	bne.n	800fa62 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800fa46:	f240 7036 	movw	r0, #1846	; 0x736
 800fa4a:	f001 f99f 	bl	8010d8c <SUBGRF_ReadRegister>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	f023 0304 	bic.w	r3, r3, #4
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	4619      	mov	r1, r3
 800fa58:	f240 7036 	movw	r0, #1846	; 0x736
 800fa5c:	f001 f982 	bl	8010d64 <SUBGRF_WriteRegister>
 800fa60:	e00c      	b.n	800fa7c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800fa62:	f240 7036 	movw	r0, #1846	; 0x736
 800fa66:	f001 f991 	bl	8010d8c <SUBGRF_ReadRegister>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	f043 0304 	orr.w	r3, r3, #4
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	4619      	mov	r1, r3
 800fa74:	f240 7036 	movw	r0, #1846	; 0x736
 800fa78:	f001 f974 	bl	8010d64 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800fa7c:	4b04      	ldr	r3, [pc, #16]	; (800fa90 <RadioSetRxGenericConfig+0x37c>)
 800fa7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa82:	609a      	str	r2, [r3, #8]
        break;
 800fa84:	bf00      	nop
    }
    return status;
 800fa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3730      	adds	r7, #48	; 0x30
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	2000201c 	.word	0x2000201c
 800fa94:	20002054 	.word	0x20002054
 800fa98:	2000202a 	.word	0x2000202a

0800fa9c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b08e      	sub	sp, #56	; 0x38
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60b9      	str	r1, [r7, #8]
 800faa4:	607b      	str	r3, [r7, #4]
 800faa6:	4603      	mov	r3, r0
 800faa8:	73fb      	strb	r3, [r7, #15]
 800faaa:	4613      	mov	r3, r2
 800faac:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800faae:	2300      	movs	r3, #0
 800fab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fab2:	2300      	movs	r3, #0
 800fab4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800fab6:	f001 fb9a 	bl	80111ee <RFW_DeInit>
    switch( modem )
 800faba:	7bfb      	ldrb	r3, [r7, #15]
 800fabc:	2b03      	cmp	r3, #3
 800fabe:	f200 8204 	bhi.w	800feca <RadioSetTxGenericConfig+0x42e>
 800fac2:	a201      	add	r2, pc, #4	; (adr r2, 800fac8 <RadioSetTxGenericConfig+0x2c>)
 800fac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac8:	0800fc4d 	.word	0x0800fc4d
 800facc:	0800fd95 	.word	0x0800fd95
 800fad0:	0800fe8d 	.word	0x0800fe8d
 800fad4:	0800fad9 	.word	0x0800fad9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	7c9b      	ldrb	r3, [r3, #18]
 800fadc:	2b08      	cmp	r3, #8
 800fade:	d902      	bls.n	800fae6 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800fae0:	f04f 33ff 	mov.w	r3, #4294967295
 800fae4:	e206      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	6899      	ldr	r1, [r3, #8]
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	7c9b      	ldrb	r3, [r3, #18]
 800faee:	b29a      	uxth	r2, r3
 800faf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800faf4:	4618      	mov	r0, r3
 800faf6:	f001 fbc6 	bl	8011286 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d102      	bne.n	800fb08 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800fb02:	f04f 33ff 	mov.w	r3, #4294967295
 800fb06:	e1f5      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f242 7210 	movw	r2, #10000	; 0x2710
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d813      	bhi.n	800fb3c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800fb14:	2302      	movs	r3, #2
 800fb16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800fb1a:	4b99      	ldr	r3, [pc, #612]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb1c:	2203      	movs	r2, #3
 800fb1e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800fb20:	4b97      	ldr	r3, [pc, #604]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb22:	2203      	movs	r2, #3
 800fb24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a94      	ldr	r2, [pc, #592]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb2e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	7cda      	ldrb	r2, [r3, #19]
 800fb34:	4b92      	ldr	r3, [pc, #584]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb3a:	e017      	b.n	800fb6c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fb42:	4b8f      	ldr	r3, [pc, #572]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fb48:	4b8d      	ldr	r3, [pc, #564]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a8a      	ldr	r2, [pc, #552]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb56:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	7cda      	ldrb	r2, [r3, #19]
 800fb5c:	4b88      	ldr	r3, [pc, #544]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	089b      	lsrs	r3, r3, #2
 800fb68:	4a85      	ldr	r2, [pc, #532]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb6a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	00db      	lsls	r3, r3, #3
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	4b82      	ldr	r3, [pc, #520]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb78:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800fb7a:	4b81      	ldr	r3, [pc, #516]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb7c:	2204      	movs	r2, #4
 800fb7e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	7c9b      	ldrb	r3, [r3, #18]
 800fb84:	00db      	lsls	r3, r3, #3
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	4b7d      	ldr	r3, [pc, #500]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb8a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800fb8c:	4b7c      	ldr	r3, [pc, #496]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	7d9b      	ldrb	r3, [r3, #22]
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d003      	beq.n	800fba2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	7d1b      	ldrb	r3, [r3, #20]
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d12b      	bne.n	800fbfa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	7d5b      	ldrb	r3, [r3, #21]
 800fba6:	2bf1      	cmp	r3, #241	; 0xf1
 800fba8:	d00a      	beq.n	800fbc0 <RadioSetTxGenericConfig+0x124>
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	7d5b      	ldrb	r3, [r3, #21]
 800fbae:	2bf2      	cmp	r3, #242	; 0xf2
 800fbb0:	d006      	beq.n	800fbc0 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	7d5b      	ldrb	r3, [r3, #21]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d002      	beq.n	800fbc0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800fbba:	f04f 33ff 	mov.w	r3, #4294967295
 800fbbe:	e199      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800fbca:	4b6e      	ldr	r3, [pc, #440]	; (800fd84 <RadioSetTxGenericConfig+0x2e8>)
 800fbcc:	6819      	ldr	r1, [r3, #0]
 800fbce:	f107 0320 	add.w	r3, r7, #32
 800fbd2:	4a6d      	ldr	r2, [pc, #436]	; (800fd88 <RadioSetTxGenericConfig+0x2ec>)
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f001 fafd 	bl	80111d4 <RFW_Init>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d002      	beq.n	800fbe6 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800fbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe4:	e186      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800fbe6:	4b66      	ldr	r3, [pc, #408]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800fbec:	4b64      	ldr	r3, [pc, #400]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fbee:	2201      	movs	r2, #1
 800fbf0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800fbf2:	4b63      	ldr	r3, [pc, #396]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	755a      	strb	r2, [r3, #21]
        {
 800fbf8:	e00b      	b.n	800fc12 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	7d5a      	ldrb	r2, [r3, #21]
 800fbfe:	4b60      	ldr	r3, [pc, #384]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fc00:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	7d9a      	ldrb	r2, [r3, #22]
 800fc06:	4b5e      	ldr	r3, [pc, #376]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fc08:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	7d1a      	ldrb	r2, [r3, #20]
 800fc0e:	4b5c      	ldr	r3, [pc, #368]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fc10:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800fc12:	f7ff f8ca 	bl	800edaa <RadioStandby>
        RadioSetModem( radio_modem );
 800fc16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe fa64 	bl	800e0e8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fc20:	485a      	ldr	r0, [pc, #360]	; (800fd8c <RadioSetTxGenericConfig+0x2f0>)
 800fc22:	f000 fe85 	bl	8010930 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fc26:	485a      	ldr	r0, [pc, #360]	; (800fd90 <RadioSetTxGenericConfig+0x2f4>)
 800fc28:	f000 ff54 	bl	8010ad4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800fc2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 fa18 	bl	8010066 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	8a1b      	ldrh	r3, [r3, #16]
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 fa62 	bl	8010104 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	899b      	ldrh	r3, [r3, #12]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f000 fa3d 	bl	80100c4 <SUBGRF_SetCrcPolynomial>
        break;
 800fc4a:	e13f      	b.n	800fecc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d102      	bne.n	800fc5a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800fc54:	f04f 33ff 	mov.w	r3, #4294967295
 800fc58:	e14c      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	7c9b      	ldrb	r3, [r3, #18]
 800fc5e:	2b08      	cmp	r3, #8
 800fc60:	d902      	bls.n	800fc68 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800fc62:	f04f 33ff 	mov.w	r3, #4294967295
 800fc66:	e145      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	6899      	ldr	r1, [r3, #8]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	7c9b      	ldrb	r3, [r3, #18]
 800fc70:	b29a      	uxth	r2, r3
 800fc72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc76:	4618      	mov	r0, r3
 800fc78:	f001 fb05 	bl	8011286 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fc7c:	4b40      	ldr	r3, [pc, #256]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a3d      	ldr	r2, [pc, #244]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fc8a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	7cda      	ldrb	r2, [r3, #19]
 800fc90:	4b3b      	ldr	r3, [pc, #236]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fc92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	699b      	ldr	r3, [r3, #24]
 800fc9a:	4a39      	ldr	r2, [pc, #228]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fc9c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fc9e:	4b38      	ldr	r3, [pc, #224]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fca0:	2200      	movs	r2, #0
 800fca2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	00db      	lsls	r3, r3, #3
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	4b34      	ldr	r3, [pc, #208]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fcb0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800fcb2:	4b33      	ldr	r3, [pc, #204]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fcb4:	2204      	movs	r2, #4
 800fcb6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	7c9b      	ldrb	r3, [r3, #18]
 800fcbc:	00db      	lsls	r3, r3, #3
 800fcbe:	b2da      	uxtb	r2, r3
 800fcc0:	4b2f      	ldr	r3, [pc, #188]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fcc2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800fcc4:	4b2e      	ldr	r3, [pc, #184]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	7d9b      	ldrb	r3, [r3, #22]
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	d003      	beq.n	800fcda <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	7d1b      	ldrb	r3, [r3, #20]
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	d12a      	bne.n	800fd30 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	7d5b      	ldrb	r3, [r3, #21]
 800fcde:	2bf1      	cmp	r3, #241	; 0xf1
 800fce0:	d00a      	beq.n	800fcf8 <RadioSetTxGenericConfig+0x25c>
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	7d5b      	ldrb	r3, [r3, #21]
 800fce6:	2bf2      	cmp	r3, #242	; 0xf2
 800fce8:	d006      	beq.n	800fcf8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	7d5b      	ldrb	r3, [r3, #21]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d002      	beq.n	800fcf8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800fcf2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf6:	e0fd      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800fd00:	4b20      	ldr	r3, [pc, #128]	; (800fd84 <RadioSetTxGenericConfig+0x2e8>)
 800fd02:	6819      	ldr	r1, [r3, #0]
 800fd04:	f107 0314 	add.w	r3, r7, #20
 800fd08:	4a1f      	ldr	r2, [pc, #124]	; (800fd88 <RadioSetTxGenericConfig+0x2ec>)
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f001 fa62 	bl	80111d4 <RFW_Init>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d002      	beq.n	800fd1c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800fd16:	f04f 33ff 	mov.w	r3, #4294967295
 800fd1a:	e0eb      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800fd1c:	4b18      	ldr	r3, [pc, #96]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fd1e:	2200      	movs	r2, #0
 800fd20:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800fd22:	4b17      	ldr	r3, [pc, #92]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fd24:	2201      	movs	r2, #1
 800fd26:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800fd28:	4b15      	ldr	r3, [pc, #84]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	755a      	strb	r2, [r3, #21]
        {
 800fd2e:	e00b      	b.n	800fd48 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	7d5a      	ldrb	r2, [r3, #21]
 800fd34:	4b12      	ldr	r3, [pc, #72]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fd36:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	7d9a      	ldrb	r2, [r3, #22]
 800fd3c:	4b10      	ldr	r3, [pc, #64]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fd3e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	7d1a      	ldrb	r2, [r3, #20]
 800fd44:	4b0e      	ldr	r3, [pc, #56]	; (800fd80 <RadioSetTxGenericConfig+0x2e4>)
 800fd46:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800fd48:	f7ff f82f 	bl	800edaa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	f7fe f9cb 	bl	800e0e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fd52:	480e      	ldr	r0, [pc, #56]	; (800fd8c <RadioSetTxGenericConfig+0x2f0>)
 800fd54:	f000 fdec 	bl	8010930 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fd58:	480d      	ldr	r0, [pc, #52]	; (800fd90 <RadioSetTxGenericConfig+0x2f4>)
 800fd5a:	f000 febb 	bl	8010ad4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800fd5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd62:	4618      	mov	r0, r3
 800fd64:	f000 f97f 	bl	8010066 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	8a1b      	ldrh	r3, [r3, #16]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f000 f9c9 	bl	8010104 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	899b      	ldrh	r3, [r3, #12]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 f9a4 	bl	80100c4 <SUBGRF_SetCrcPolynomial>
        break;
 800fd7c:	e0a6      	b.n	800fecc <RadioSetTxGenericConfig+0x430>
 800fd7e:	bf00      	nop
 800fd80:	2000201c 	.word	0x2000201c
 800fd84:	20002018 	.word	0x20002018
 800fd88:	20002078 	.word	0x20002078
 800fd8c:	20002054 	.word	0x20002054
 800fd90:	2000202a 	.word	0x2000202a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800fd94:	4b59      	ldr	r3, [pc, #356]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	781a      	ldrb	r2, [r3, #0]
 800fda0:	4b56      	ldr	r3, [pc, #344]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fda2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	785a      	ldrb	r2, [r3, #1]
 800fdaa:	4b54      	ldr	r3, [pc, #336]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fdac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	789a      	ldrb	r2, [r3, #2]
 800fdb4:	4b51      	ldr	r3, [pc, #324]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fdb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	78db      	ldrb	r3, [r3, #3]
 800fdbe:	2b02      	cmp	r3, #2
 800fdc0:	d010      	beq.n	800fde4 <RadioSetTxGenericConfig+0x348>
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	dc20      	bgt.n	800fe08 <RadioSetTxGenericConfig+0x36c>
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d002      	beq.n	800fdd0 <RadioSetTxGenericConfig+0x334>
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d005      	beq.n	800fdda <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800fdce:	e01b      	b.n	800fe08 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800fdd0:	4b4a      	ldr	r3, [pc, #296]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800fdd8:	e017      	b.n	800fe0a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800fdda:	4b48      	ldr	r3, [pc, #288]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fddc:	2201      	movs	r2, #1
 800fdde:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800fde2:	e012      	b.n	800fe0a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	2b0b      	cmp	r3, #11
 800fdea:	d003      	beq.n	800fdf4 <RadioSetTxGenericConfig+0x358>
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	2b0c      	cmp	r3, #12
 800fdf2:	d104      	bne.n	800fdfe <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800fdf4:	4b41      	ldr	r3, [pc, #260]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800fdfc:	e005      	b.n	800fe0a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800fdfe:	4b3f      	ldr	r3, [pc, #252]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800fe06:	e000      	b.n	800fe0a <RadioSetTxGenericConfig+0x36e>
            break;
 800fe08:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800fe0a:	4b3c      	ldr	r3, [pc, #240]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	889a      	ldrh	r2, [r3, #4]
 800fe14:	4b39      	ldr	r3, [pc, #228]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fe16:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	799a      	ldrb	r2, [r3, #6]
 800fe1c:	4b37      	ldr	r3, [pc, #220]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fe1e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	79da      	ldrb	r2, [r3, #7]
 800fe24:	4b35      	ldr	r3, [pc, #212]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fe26:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	7a1a      	ldrb	r2, [r3, #8]
 800fe2e:	4b33      	ldr	r3, [pc, #204]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fe30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800fe34:	f7fe ffb9 	bl	800edaa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800fe38:	2001      	movs	r0, #1
 800fe3a:	f7fe f955 	bl	800e0e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fe3e:	4830      	ldr	r0, [pc, #192]	; (800ff00 <RadioSetTxGenericConfig+0x464>)
 800fe40:	f000 fd76 	bl	8010930 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fe44:	482f      	ldr	r0, [pc, #188]	; (800ff04 <RadioSetTxGenericConfig+0x468>)
 800fe46:	f000 fe45 	bl	8010ad4 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800fe4a:	4b2c      	ldr	r3, [pc, #176]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fe4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe50:	2b06      	cmp	r3, #6
 800fe52:	d10d      	bne.n	800fe70 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800fe54:	f640 0089 	movw	r0, #2185	; 0x889
 800fe58:	f000 ff98 	bl	8010d8c <SUBGRF_ReadRegister>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f023 0304 	bic.w	r3, r3, #4
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	4619      	mov	r1, r3
 800fe66:	f640 0089 	movw	r0, #2185	; 0x889
 800fe6a:	f000 ff7b 	bl	8010d64 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800fe6e:	e02d      	b.n	800fecc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800fe70:	f640 0089 	movw	r0, #2185	; 0x889
 800fe74:	f000 ff8a 	bl	8010d8c <SUBGRF_ReadRegister>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	f043 0304 	orr.w	r3, r3, #4
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	4619      	mov	r1, r3
 800fe82:	f640 0089 	movw	r0, #2185	; 0x889
 800fe86:	f000 ff6d 	bl	8010d64 <SUBGRF_WriteRegister>
        break;
 800fe8a:	e01f      	b.n	800fecc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d004      	beq.n	800fe9e <RadioSetTxGenericConfig+0x402>
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe9c:	d902      	bls.n	800fea4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800fe9e:	f04f 33ff 	mov.w	r3, #4294967295
 800fea2:	e027      	b.n	800fef4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800fea4:	2003      	movs	r0, #3
 800fea6:	f7fe f91f 	bl	800e0e8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800feaa:	4b14      	ldr	r3, [pc, #80]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800feac:	2202      	movs	r2, #2
 800feae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a11      	ldr	r2, [pc, #68]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800feb8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800feba:	4b10      	ldr	r3, [pc, #64]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800febc:	2216      	movs	r2, #22
 800febe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fec2:	480f      	ldr	r0, [pc, #60]	; (800ff00 <RadioSetTxGenericConfig+0x464>)
 800fec4:	f000 fd34 	bl	8010930 <SUBGRF_SetModulationParams>
        break;
 800fec8:	e000      	b.n	800fecc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800feca:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800fecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fed0:	4618      	mov	r0, r3
 800fed2:	f001 f863 	bl	8010f9c <SUBGRF_SetRfTxPower>
 800fed6:	4603      	mov	r3, r0
 800fed8:	461a      	mov	r2, r3
 800feda:	4b08      	ldr	r3, [pc, #32]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fedc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800fee0:	4b06      	ldr	r3, [pc, #24]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800fee2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fee6:	4618      	mov	r0, r3
 800fee8:	f001 f995 	bl	8011216 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800feec:	4a03      	ldr	r2, [pc, #12]	; (800fefc <RadioSetTxGenericConfig+0x460>)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6053      	str	r3, [r2, #4]
    return 0;
 800fef2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3738      	adds	r7, #56	; 0x38
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	2000201c 	.word	0x2000201c
 800ff00:	20002054 	.word	0x20002054
 800ff04:	2000202a 	.word	0x2000202a

0800ff08 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800ff10:	2301      	movs	r3, #1
 800ff12:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800ff14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bc80      	pop	{r7}
 800ff1e:	4770      	bx	lr

0800ff20 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800ff2a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bc80      	pop	{r7}
 800ff34:	4770      	bx	lr
	...

0800ff38 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d002      	beq.n	800ff4c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800ff46:	4a1d      	ldr	r2, [pc, #116]	; (800ffbc <SUBGRF_Init+0x84>)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800ff4c:	f7f1 fd14 	bl	8001978 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800ff50:	2002      	movs	r0, #2
 800ff52:	f001 f85e 	bl	8011012 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800ff56:	4b1a      	ldr	r3, [pc, #104]	; (800ffc0 <SUBGRF_Init+0x88>)
 800ff58:	2200      	movs	r2, #0
 800ff5a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f000 f97d 	bl	801025c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800ff62:	f7f6 fe8a 	bl	8006c7a <RBI_IsTCXO>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d10e      	bne.n	800ff8a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800ff6c:	2140      	movs	r1, #64	; 0x40
 800ff6e:	2001      	movs	r0, #1
 800ff70:	f000 fb82 	bl	8010678 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800ff74:	2100      	movs	r1, #0
 800ff76:	f640 1011 	movw	r0, #2321	; 0x911
 800ff7a:	f000 fef3 	bl	8010d64 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800ff7e:	237f      	movs	r3, #127	; 0x7f
 800ff80:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800ff82:	7b38      	ldrb	r0, [r7, #12]
 800ff84:	f000 fa8b 	bl	801049e <SUBGRF_Calibrate>
 800ff88:	e009      	b.n	800ff9e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800ff8a:	2120      	movs	r1, #32
 800ff8c:	f640 1011 	movw	r0, #2321	; 0x911
 800ff90:	f000 fee8 	bl	8010d64 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800ff94:	2120      	movs	r1, #32
 800ff96:	f640 1012 	movw	r0, #2322	; 0x912
 800ff9a:	f000 fee3 	bl	8010d64 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ff9e:	210e      	movs	r1, #14
 800ffa0:	f640 101f 	movw	r0, #2335	; 0x91f
 800ffa4:	f000 fede 	bl	8010d64 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800ffa8:	f7f6 fe44 	bl	8006c34 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800ffac:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <SUBGRF_Init+0x8c>)
 800ffae:	2201      	movs	r2, #1
 800ffb0:	701a      	strb	r2, [r3, #0]
}
 800ffb2:	bf00      	nop
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	200020b4 	.word	0x200020b4
 800ffc0:	200020b0 	.word	0x200020b0
 800ffc4:	200020a8 	.word	0x200020a8

0800ffc8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800ffc8:	b480      	push	{r7}
 800ffca:	af00      	add	r7, sp, #0
    return OperatingMode;
 800ffcc:	4b02      	ldr	r3, [pc, #8]	; (800ffd8 <SUBGRF_GetOperatingMode+0x10>)
 800ffce:	781b      	ldrb	r3, [r3, #0]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bc80      	pop	{r7}
 800ffd6:	4770      	bx	lr
 800ffd8:	200020a8 	.word	0x200020a8

0800ffdc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800ffe8:	78fb      	ldrb	r3, [r7, #3]
 800ffea:	461a      	mov	r2, r3
 800ffec:	6879      	ldr	r1, [r7, #4]
 800ffee:	2000      	movs	r0, #0
 800fff0:	f000 ff24 	bl	8010e3c <SUBGRF_WriteBuffer>
}
 800fff4:	bf00      	nop
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	4613      	mov	r3, r2
 8010008:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801000e:	f107 0317 	add.w	r3, r7, #23
 8010012:	4619      	mov	r1, r3
 8010014:	68b8      	ldr	r0, [r7, #8]
 8010016:	f000 fe27 	bl	8010c68 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	79fa      	ldrb	r2, [r7, #7]
 8010020:	429a      	cmp	r2, r3
 8010022:	d201      	bcs.n	8010028 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8010024:	2301      	movs	r3, #1
 8010026:	e007      	b.n	8010038 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8010028:	7df8      	ldrb	r0, [r7, #23]
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	461a      	mov	r2, r3
 8010030:	68f9      	ldr	r1, [r7, #12]
 8010032:	f000 ff25 	bl	8010e80 <SUBGRF_ReadBuffer>

    return 0;
 8010036:	2300      	movs	r3, #0
}
 8010038:	4618      	mov	r0, r3
 801003a:	3718      	adds	r7, #24
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	460b      	mov	r3, r1
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801004e:	7afb      	ldrb	r3, [r7, #11]
 8010050:	4619      	mov	r1, r3
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f7ff ffc2 	bl	800ffdc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f91b 	bl	8010294 <SUBGRF_SetTx>
}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b082      	sub	sp, #8
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801006e:	2208      	movs	r2, #8
 8010070:	6879      	ldr	r1, [r7, #4]
 8010072:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8010076:	f000 fe9d 	bl	8010db4 <SUBGRF_WriteRegisters>
    return 0;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801008e:	88fb      	ldrh	r3, [r7, #6]
 8010090:	0a1b      	lsrs	r3, r3, #8
 8010092:	b29b      	uxth	r3, r3
 8010094:	b2db      	uxtb	r3, r3
 8010096:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8010098:	88fb      	ldrh	r3, [r7, #6]
 801009a:	b2db      	uxtb	r3, r3
 801009c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801009e:	f000 fb6f 	bl	8010780 <SUBGRF_GetPacketType>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d108      	bne.n	80100ba <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80100a8:	f107 030c 	add.w	r3, r7, #12
 80100ac:	2202      	movs	r2, #2
 80100ae:	4619      	mov	r1, r3
 80100b0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80100b4:	f000 fe7e 	bl	8010db4 <SUBGRF_WriteRegisters>
            break;
 80100b8:	e000      	b.n	80100bc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80100ba:	bf00      	nop
    }
}
 80100bc:	bf00      	nop
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	4603      	mov	r3, r0
 80100cc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80100ce:	88fb      	ldrh	r3, [r7, #6]
 80100d0:	0a1b      	lsrs	r3, r3, #8
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80100d8:	88fb      	ldrh	r3, [r7, #6]
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80100de:	f000 fb4f 	bl	8010780 <SUBGRF_GetPacketType>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d108      	bne.n	80100fa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80100e8:	f107 030c 	add.w	r3, r7, #12
 80100ec:	2202      	movs	r2, #2
 80100ee:	4619      	mov	r1, r3
 80100f0:	f240 60be 	movw	r0, #1726	; 0x6be
 80100f4:	f000 fe5e 	bl	8010db4 <SUBGRF_WriteRegisters>
            break;
 80100f8:	e000      	b.n	80100fc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80100fa:	bf00      	nop
    }
}
 80100fc:	bf00      	nop
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	4603      	mov	r3, r0
 801010c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8010112:	f000 fb35 	bl	8010780 <SUBGRF_GetPacketType>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d121      	bne.n	8010160 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801011c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010120:	f000 fe34 	bl	8010d8c <SUBGRF_ReadRegister>
 8010124:	4603      	mov	r3, r0
 8010126:	f023 0301 	bic.w	r3, r3, #1
 801012a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801012c:	88fb      	ldrh	r3, [r7, #6]
 801012e:	0a1b      	lsrs	r3, r3, #8
 8010130:	b29b      	uxth	r3, r3
 8010132:	b25b      	sxtb	r3, r3
 8010134:	f003 0301 	and.w	r3, r3, #1
 8010138:	b25a      	sxtb	r2, r3
 801013a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801013e:	4313      	orrs	r3, r2
 8010140:	b25b      	sxtb	r3, r3
 8010142:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8010144:	7bfb      	ldrb	r3, [r7, #15]
 8010146:	4619      	mov	r1, r3
 8010148:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801014c:	f000 fe0a 	bl	8010d64 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8010150:	88fb      	ldrh	r3, [r7, #6]
 8010152:	b2db      	uxtb	r3, r3
 8010154:	4619      	mov	r1, r3
 8010156:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801015a:	f000 fe03 	bl	8010d64 <SUBGRF_WriteRegister>
            break;
 801015e:	e000      	b.n	8010162 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8010160:	bf00      	nop
    }
}
 8010162:	bf00      	nop
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b082      	sub	sp, #8
 801016e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8010170:	2300      	movs	r3, #0
 8010172:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8010178:	2300      	movs	r3, #0
 801017a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801017c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010180:	f000 fe04 	bl	8010d8c <SUBGRF_ReadRegister>
 8010184:	4603      	mov	r3, r0
 8010186:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010188:	79fb      	ldrb	r3, [r7, #7]
 801018a:	f023 0301 	bic.w	r3, r3, #1
 801018e:	b2db      	uxtb	r3, r3
 8010190:	4619      	mov	r1, r3
 8010192:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010196:	f000 fde5 	bl	8010d64 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801019a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801019e:	f000 fdf5 	bl	8010d8c <SUBGRF_ReadRegister>
 80101a2:	4603      	mov	r3, r0
 80101a4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80101a6:	79bb      	ldrb	r3, [r7, #6]
 80101a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	4619      	mov	r1, r3
 80101b0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80101b4:	f000 fdd6 	bl	8010d64 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80101b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80101bc:	f000 f88a 	bl	80102d4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80101c0:	463b      	mov	r3, r7
 80101c2:	2204      	movs	r2, #4
 80101c4:	4619      	mov	r1, r3
 80101c6:	f640 0019 	movw	r0, #2073	; 0x819
 80101ca:	f000 fe15 	bl	8010df8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80101ce:	2000      	movs	r0, #0
 80101d0:	f000 f844 	bl	801025c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	4619      	mov	r1, r3
 80101d8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80101dc:	f000 fdc2 	bl	8010d64 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80101e0:	79bb      	ldrb	r3, [r7, #6]
 80101e2:	4619      	mov	r1, r3
 80101e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80101e8:	f000 fdbc 	bl	8010d64 <SUBGRF_WriteRegister>

    return number;
 80101ec:	683b      	ldr	r3, [r7, #0]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
	...

080101f8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8010200:	2000      	movs	r0, #0
 8010202:	f7f6 fd22 	bl	8006c4a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010206:	2002      	movs	r0, #2
 8010208:	f000 ff03 	bl	8011012 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801020c:	793b      	ldrb	r3, [r7, #4]
 801020e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010212:	b2db      	uxtb	r3, r3
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010218:	793b      	ldrb	r3, [r7, #4]
 801021a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801021e:	b2db      	uxtb	r3, r3
 8010220:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010222:	b25b      	sxtb	r3, r3
 8010224:	4313      	orrs	r3, r2
 8010226:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010228:	793b      	ldrb	r3, [r7, #4]
 801022a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801022e:	b2db      	uxtb	r3, r3
 8010230:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010232:	4313      	orrs	r3, r2
 8010234:	b25b      	sxtb	r3, r3
 8010236:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010238:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801023a:	f107 030f 	add.w	r3, r7, #15
 801023e:	2201      	movs	r2, #1
 8010240:	4619      	mov	r1, r3
 8010242:	2084      	movs	r0, #132	; 0x84
 8010244:	f000 fe3e 	bl	8010ec4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8010248:	4b03      	ldr	r3, [pc, #12]	; (8010258 <SUBGRF_SetSleep+0x60>)
 801024a:	2200      	movs	r2, #0
 801024c:	701a      	strb	r2, [r3, #0]
}
 801024e:	bf00      	nop
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	200020a8 	.word	0x200020a8

0801025c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	4603      	mov	r3, r0
 8010264:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010266:	1dfb      	adds	r3, r7, #7
 8010268:	2201      	movs	r2, #1
 801026a:	4619      	mov	r1, r3
 801026c:	2080      	movs	r0, #128	; 0x80
 801026e:	f000 fe29 	bl	8010ec4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8010272:	79fb      	ldrb	r3, [r7, #7]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d103      	bne.n	8010280 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8010278:	4b05      	ldr	r3, [pc, #20]	; (8010290 <SUBGRF_SetStandby+0x34>)
 801027a:	2201      	movs	r2, #1
 801027c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801027e:	e002      	b.n	8010286 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8010280:	4b03      	ldr	r3, [pc, #12]	; (8010290 <SUBGRF_SetStandby+0x34>)
 8010282:	2202      	movs	r2, #2
 8010284:	701a      	strb	r2, [r3, #0]
}
 8010286:	bf00      	nop
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	200020a8 	.word	0x200020a8

08010294 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801029c:	4b0c      	ldr	r3, [pc, #48]	; (80102d0 <SUBGRF_SetTx+0x3c>)
 801029e:	2204      	movs	r2, #4
 80102a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	0c1b      	lsrs	r3, r3, #16
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	0a1b      	lsrs	r3, r3, #8
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80102b8:	f107 030c 	add.w	r3, r7, #12
 80102bc:	2203      	movs	r2, #3
 80102be:	4619      	mov	r1, r3
 80102c0:	2083      	movs	r0, #131	; 0x83
 80102c2:	f000 fdff 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 80102c6:	bf00      	nop
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	200020a8 	.word	0x200020a8

080102d4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80102dc:	4b0c      	ldr	r3, [pc, #48]	; (8010310 <SUBGRF_SetRx+0x3c>)
 80102de:	2205      	movs	r2, #5
 80102e0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	0c1b      	lsrs	r3, r3, #16
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	0a1b      	lsrs	r3, r3, #8
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80102f8:	f107 030c 	add.w	r3, r7, #12
 80102fc:	2203      	movs	r2, #3
 80102fe:	4619      	mov	r1, r3
 8010300:	2082      	movs	r0, #130	; 0x82
 8010302:	f000 fddf 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010306:	bf00      	nop
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	200020a8 	.word	0x200020a8

08010314 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801031c:	4b0e      	ldr	r3, [pc, #56]	; (8010358 <SUBGRF_SetRxBoosted+0x44>)
 801031e:	2205      	movs	r2, #5
 8010320:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8010322:	2197      	movs	r1, #151	; 0x97
 8010324:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8010328:	f000 fd1c 	bl	8010d64 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	0c1b      	lsrs	r3, r3, #16
 8010330:	b2db      	uxtb	r3, r3
 8010332:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	0a1b      	lsrs	r3, r3, #8
 8010338:	b2db      	uxtb	r3, r3
 801033a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	b2db      	uxtb	r3, r3
 8010340:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010342:	f107 030c 	add.w	r3, r7, #12
 8010346:	2203      	movs	r2, #3
 8010348:	4619      	mov	r1, r3
 801034a:	2082      	movs	r0, #130	; 0x82
 801034c:	f000 fdba 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010350:	bf00      	nop
 8010352:	3710      	adds	r7, #16
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	200020a8 	.word	0x200020a8

0801035c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	0c1b      	lsrs	r3, r3, #16
 801036a:	b2db      	uxtb	r3, r3
 801036c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	0a1b      	lsrs	r3, r3, #8
 8010372:	b2db      	uxtb	r3, r3
 8010374:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	b2db      	uxtb	r3, r3
 801037a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	0c1b      	lsrs	r3, r3, #16
 8010380:	b2db      	uxtb	r3, r3
 8010382:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	0a1b      	lsrs	r3, r3, #8
 8010388:	b2db      	uxtb	r3, r3
 801038a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	b2db      	uxtb	r3, r3
 8010390:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010392:	f107 0308 	add.w	r3, r7, #8
 8010396:	2206      	movs	r2, #6
 8010398:	4619      	mov	r1, r3
 801039a:	2094      	movs	r0, #148	; 0x94
 801039c:	f000 fd92 	bl	8010ec4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80103a0:	4b03      	ldr	r3, [pc, #12]	; (80103b0 <SUBGRF_SetRxDutyCycle+0x54>)
 80103a2:	2206      	movs	r2, #6
 80103a4:	701a      	strb	r2, [r3, #0]
}
 80103a6:	bf00      	nop
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	200020a8 	.word	0x200020a8

080103b4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80103b8:	2200      	movs	r2, #0
 80103ba:	2100      	movs	r1, #0
 80103bc:	20c5      	movs	r0, #197	; 0xc5
 80103be:	f000 fd81 	bl	8010ec4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80103c2:	4b02      	ldr	r3, [pc, #8]	; (80103cc <SUBGRF_SetCad+0x18>)
 80103c4:	2207      	movs	r2, #7
 80103c6:	701a      	strb	r2, [r3, #0]
}
 80103c8:	bf00      	nop
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	200020a8 	.word	0x200020a8

080103d0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80103d4:	2200      	movs	r2, #0
 80103d6:	2100      	movs	r1, #0
 80103d8:	20d1      	movs	r0, #209	; 0xd1
 80103da:	f000 fd73 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 80103de:	bf00      	nop
 80103e0:	bd80      	pop	{r7, pc}

080103e2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80103e2:	b580      	push	{r7, lr}
 80103e4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80103e6:	2200      	movs	r2, #0
 80103e8:	2100      	movs	r1, #0
 80103ea:	20d2      	movs	r0, #210	; 0xd2
 80103ec:	f000 fd6a 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 80103f0:	bf00      	nop
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80103fe:	1dfb      	adds	r3, r7, #7
 8010400:	2201      	movs	r2, #1
 8010402:	4619      	mov	r1, r3
 8010404:	209f      	movs	r0, #159	; 0x9f
 8010406:	f000 fd5d 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 801040a:	bf00      	nop
 801040c:	3708      	adds	r7, #8
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	4603      	mov	r3, r0
 801041a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801041c:	1dfb      	adds	r3, r7, #7
 801041e:	2201      	movs	r2, #1
 8010420:	4619      	mov	r1, r3
 8010422:	20a0      	movs	r0, #160	; 0xa0
 8010424:	f000 fd4e 	bl	8010ec4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8010428:	79fb      	ldrb	r3, [r7, #7]
 801042a:	2b3f      	cmp	r3, #63	; 0x3f
 801042c:	d91c      	bls.n	8010468 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	085b      	lsrs	r3, r3, #1
 8010432:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8010434:	2300      	movs	r3, #0
 8010436:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801043c:	e005      	b.n	801044a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801043e:	7bfb      	ldrb	r3, [r7, #15]
 8010440:	089b      	lsrs	r3, r3, #2
 8010442:	73fb      	strb	r3, [r7, #15]
            exp++;
 8010444:	7bbb      	ldrb	r3, [r7, #14]
 8010446:	3301      	adds	r3, #1
 8010448:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801044a:	7bfb      	ldrb	r3, [r7, #15]
 801044c:	2b1f      	cmp	r3, #31
 801044e:	d8f6      	bhi.n	801043e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8010450:	7bfb      	ldrb	r3, [r7, #15]
 8010452:	00db      	lsls	r3, r3, #3
 8010454:	b2da      	uxtb	r2, r3
 8010456:	7bbb      	ldrb	r3, [r7, #14]
 8010458:	4413      	add	r3, r2
 801045a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801045c:	7b7b      	ldrb	r3, [r7, #13]
 801045e:	4619      	mov	r1, r3
 8010460:	f240 7006 	movw	r0, #1798	; 0x706
 8010464:	f000 fc7e 	bl	8010d64 <SUBGRF_WriteRegister>
    }
}
 8010468:	bf00      	nop
 801046a:	3710      	adds	r7, #16
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010476:	f7f6 fc0b 	bl	8006c90 <RBI_IsDCDC>
 801047a:	4603      	mov	r3, r0
 801047c:	2b01      	cmp	r3, #1
 801047e:	d102      	bne.n	8010486 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8010480:	2301      	movs	r3, #1
 8010482:	71fb      	strb	r3, [r7, #7]
 8010484:	e001      	b.n	801048a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8010486:	2300      	movs	r3, #0
 8010488:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801048a:	1dfb      	adds	r3, r7, #7
 801048c:	2201      	movs	r2, #1
 801048e:	4619      	mov	r1, r3
 8010490:	2096      	movs	r0, #150	; 0x96
 8010492:	f000 fd17 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010496:	bf00      	nop
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b084      	sub	sp, #16
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80104a6:	793b      	ldrb	r3, [r7, #4]
 80104a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	019b      	lsls	r3, r3, #6
 80104b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80104b2:	793b      	ldrb	r3, [r7, #4]
 80104b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80104bc:	b25b      	sxtb	r3, r3
 80104be:	4313      	orrs	r3, r2
 80104c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80104c2:	793b      	ldrb	r3, [r7, #4]
 80104c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80104cc:	b25b      	sxtb	r3, r3
 80104ce:	4313      	orrs	r3, r2
 80104d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80104d2:	793b      	ldrb	r3, [r7, #4]
 80104d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80104dc:	b25b      	sxtb	r3, r3
 80104de:	4313      	orrs	r3, r2
 80104e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80104e2:	793b      	ldrb	r3, [r7, #4]
 80104e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80104ec:	b25b      	sxtb	r3, r3
 80104ee:	4313      	orrs	r3, r2
 80104f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80104f2:	793b      	ldrb	r3, [r7, #4]
 80104f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80104fc:	b25b      	sxtb	r3, r3
 80104fe:	4313      	orrs	r3, r2
 8010500:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010502:	793b      	ldrb	r3, [r7, #4]
 8010504:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010508:	b2db      	uxtb	r3, r3
 801050a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801050c:	4313      	orrs	r3, r2
 801050e:	b25b      	sxtb	r3, r3
 8010510:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010512:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8010514:	f107 030f 	add.w	r3, r7, #15
 8010518:	2201      	movs	r2, #1
 801051a:	4619      	mov	r1, r3
 801051c:	2089      	movs	r0, #137	; 0x89
 801051e:	f000 fcd1 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010522:	bf00      	nop
 8010524:	3710      	adds	r7, #16
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
	...

0801052c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a1d      	ldr	r2, [pc, #116]	; (80105ac <SUBGRF_CalibrateImage+0x80>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d904      	bls.n	8010546 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801053c:	23e1      	movs	r3, #225	; 0xe1
 801053e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8010540:	23e9      	movs	r3, #233	; 0xe9
 8010542:	737b      	strb	r3, [r7, #13]
 8010544:	e027      	b.n	8010596 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4a19      	ldr	r2, [pc, #100]	; (80105b0 <SUBGRF_CalibrateImage+0x84>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d904      	bls.n	8010558 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801054e:	23d7      	movs	r3, #215	; 0xd7
 8010550:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8010552:	23db      	movs	r3, #219	; 0xdb
 8010554:	737b      	strb	r3, [r7, #13]
 8010556:	e01e      	b.n	8010596 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	4a16      	ldr	r2, [pc, #88]	; (80105b4 <SUBGRF_CalibrateImage+0x88>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d904      	bls.n	801056a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8010560:	23c1      	movs	r3, #193	; 0xc1
 8010562:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8010564:	23c5      	movs	r3, #197	; 0xc5
 8010566:	737b      	strb	r3, [r7, #13]
 8010568:	e015      	b.n	8010596 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4a12      	ldr	r2, [pc, #72]	; (80105b8 <SUBGRF_CalibrateImage+0x8c>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d904      	bls.n	801057c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8010572:	2375      	movs	r3, #117	; 0x75
 8010574:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8010576:	2381      	movs	r3, #129	; 0x81
 8010578:	737b      	strb	r3, [r7, #13]
 801057a:	e00c      	b.n	8010596 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a0f      	ldr	r2, [pc, #60]	; (80105bc <SUBGRF_CalibrateImage+0x90>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d904      	bls.n	801058e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8010584:	236b      	movs	r3, #107	; 0x6b
 8010586:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8010588:	236f      	movs	r3, #111	; 0x6f
 801058a:	737b      	strb	r3, [r7, #13]
 801058c:	e003      	b.n	8010596 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801058e:	2329      	movs	r3, #41	; 0x29
 8010590:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8010592:	232b      	movs	r3, #43	; 0x2b
 8010594:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8010596:	f107 030c 	add.w	r3, r7, #12
 801059a:	2202      	movs	r2, #2
 801059c:	4619      	mov	r1, r3
 801059e:	2098      	movs	r0, #152	; 0x98
 80105a0:	f000 fc90 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 80105a4:	bf00      	nop
 80105a6:	3710      	adds	r7, #16
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	35a4e900 	.word	0x35a4e900
 80105b0:	32a9f880 	.word	0x32a9f880
 80105b4:	2de54480 	.word	0x2de54480
 80105b8:	1b6b0b00 	.word	0x1b6b0b00
 80105bc:	1954fc40 	.word	0x1954fc40

080105c0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80105c0:	b590      	push	{r4, r7, lr}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	4604      	mov	r4, r0
 80105c8:	4608      	mov	r0, r1
 80105ca:	4611      	mov	r1, r2
 80105cc:	461a      	mov	r2, r3
 80105ce:	4623      	mov	r3, r4
 80105d0:	71fb      	strb	r3, [r7, #7]
 80105d2:	4603      	mov	r3, r0
 80105d4:	71bb      	strb	r3, [r7, #6]
 80105d6:	460b      	mov	r3, r1
 80105d8:	717b      	strb	r3, [r7, #5]
 80105da:	4613      	mov	r3, r2
 80105dc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80105de:	79fb      	ldrb	r3, [r7, #7]
 80105e0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80105e2:	79bb      	ldrb	r3, [r7, #6]
 80105e4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80105e6:	797b      	ldrb	r3, [r7, #5]
 80105e8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80105ea:	793b      	ldrb	r3, [r7, #4]
 80105ec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80105ee:	f107 030c 	add.w	r3, r7, #12
 80105f2:	2204      	movs	r2, #4
 80105f4:	4619      	mov	r1, r3
 80105f6:	2095      	movs	r0, #149	; 0x95
 80105f8:	f000 fc64 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 80105fc:	bf00      	nop
 80105fe:	3714      	adds	r7, #20
 8010600:	46bd      	mov	sp, r7
 8010602:	bd90      	pop	{r4, r7, pc}

08010604 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8010604:	b590      	push	{r4, r7, lr}
 8010606:	b085      	sub	sp, #20
 8010608:	af00      	add	r7, sp, #0
 801060a:	4604      	mov	r4, r0
 801060c:	4608      	mov	r0, r1
 801060e:	4611      	mov	r1, r2
 8010610:	461a      	mov	r2, r3
 8010612:	4623      	mov	r3, r4
 8010614:	80fb      	strh	r3, [r7, #6]
 8010616:	4603      	mov	r3, r0
 8010618:	80bb      	strh	r3, [r7, #4]
 801061a:	460b      	mov	r3, r1
 801061c:	807b      	strh	r3, [r7, #2]
 801061e:	4613      	mov	r3, r2
 8010620:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010622:	88fb      	ldrh	r3, [r7, #6]
 8010624:	0a1b      	lsrs	r3, r3, #8
 8010626:	b29b      	uxth	r3, r3
 8010628:	b2db      	uxtb	r3, r3
 801062a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801062c:	88fb      	ldrh	r3, [r7, #6]
 801062e:	b2db      	uxtb	r3, r3
 8010630:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010632:	88bb      	ldrh	r3, [r7, #4]
 8010634:	0a1b      	lsrs	r3, r3, #8
 8010636:	b29b      	uxth	r3, r3
 8010638:	b2db      	uxtb	r3, r3
 801063a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801063c:	88bb      	ldrh	r3, [r7, #4]
 801063e:	b2db      	uxtb	r3, r3
 8010640:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8010642:	887b      	ldrh	r3, [r7, #2]
 8010644:	0a1b      	lsrs	r3, r3, #8
 8010646:	b29b      	uxth	r3, r3
 8010648:	b2db      	uxtb	r3, r3
 801064a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801064c:	887b      	ldrh	r3, [r7, #2]
 801064e:	b2db      	uxtb	r3, r3
 8010650:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010652:	883b      	ldrh	r3, [r7, #0]
 8010654:	0a1b      	lsrs	r3, r3, #8
 8010656:	b29b      	uxth	r3, r3
 8010658:	b2db      	uxtb	r3, r3
 801065a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801065c:	883b      	ldrh	r3, [r7, #0]
 801065e:	b2db      	uxtb	r3, r3
 8010660:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010662:	f107 0308 	add.w	r3, r7, #8
 8010666:	2208      	movs	r2, #8
 8010668:	4619      	mov	r1, r3
 801066a:	2008      	movs	r0, #8
 801066c:	f000 fc2a 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010670:	bf00      	nop
 8010672:	3714      	adds	r7, #20
 8010674:	46bd      	mov	sp, r7
 8010676:	bd90      	pop	{r4, r7, pc}

08010678 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
 801067e:	4603      	mov	r3, r0
 8010680:	6039      	str	r1, [r7, #0]
 8010682:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8010684:	79fb      	ldrb	r3, [r7, #7]
 8010686:	f003 0307 	and.w	r3, r3, #7
 801068a:	b2db      	uxtb	r3, r3
 801068c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	0c1b      	lsrs	r3, r3, #16
 8010692:	b2db      	uxtb	r3, r3
 8010694:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	0a1b      	lsrs	r3, r3, #8
 801069a:	b2db      	uxtb	r3, r3
 801069c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80106a4:	f107 030c 	add.w	r3, r7, #12
 80106a8:	2204      	movs	r2, #4
 80106aa:	4619      	mov	r1, r3
 80106ac:	2097      	movs	r0, #151	; 0x97
 80106ae:	f000 fc09 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 80106b2:	bf00      	nop
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
	...

080106bc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80106bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80106c0:	b084      	sub	sp, #16
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80106ca:	4b1d      	ldr	r3, [pc, #116]	; (8010740 <SUBGRF_SetRfFrequency+0x84>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	f083 0301 	eor.w	r3, r3, #1
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d005      	beq.n	80106e4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7ff ff27 	bl	801052c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80106de:	4b18      	ldr	r3, [pc, #96]	; (8010740 <SUBGRF_SetRfFrequency+0x84>)
 80106e0:	2201      	movs	r2, #1
 80106e2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	461c      	mov	r4, r3
 80106ea:	4615      	mov	r5, r2
 80106ec:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80106f0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80106f4:	4a13      	ldr	r2, [pc, #76]	; (8010744 <SUBGRF_SetRfFrequency+0x88>)
 80106f6:	f04f 0300 	mov.w	r3, #0
 80106fa:	4640      	mov	r0, r8
 80106fc:	4649      	mov	r1, r9
 80106fe:	f7f0 fbeb 	bl	8000ed8 <__aeabi_uldivmod>
 8010702:	4602      	mov	r2, r0
 8010704:	460b      	mov	r3, r1
 8010706:	4613      	mov	r3, r2
 8010708:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	0e1b      	lsrs	r3, r3, #24
 801070e:	b2db      	uxtb	r3, r3
 8010710:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	0c1b      	lsrs	r3, r3, #16
 8010716:	b2db      	uxtb	r3, r3
 8010718:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	0a1b      	lsrs	r3, r3, #8
 801071e:	b2db      	uxtb	r3, r3
 8010720:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	b2db      	uxtb	r3, r3
 8010726:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8010728:	f107 0308 	add.w	r3, r7, #8
 801072c:	2204      	movs	r2, #4
 801072e:	4619      	mov	r1, r3
 8010730:	2086      	movs	r0, #134	; 0x86
 8010732:	f000 fbc7 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010736:	bf00      	nop
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010740:	200020b0 	.word	0x200020b0
 8010744:	01e84800 	.word	0x01e84800

08010748 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8010752:	79fa      	ldrb	r2, [r7, #7]
 8010754:	4b09      	ldr	r3, [pc, #36]	; (801077c <SUBGRF_SetPacketType+0x34>)
 8010756:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8010758:	79fb      	ldrb	r3, [r7, #7]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d104      	bne.n	8010768 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801075e:	2100      	movs	r1, #0
 8010760:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010764:	f000 fafe 	bl	8010d64 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010768:	1dfb      	adds	r3, r7, #7
 801076a:	2201      	movs	r2, #1
 801076c:	4619      	mov	r1, r3
 801076e:	208a      	movs	r0, #138	; 0x8a
 8010770:	f000 fba8 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	200020a9 	.word	0x200020a9

08010780 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8010780:	b480      	push	{r7}
 8010782:	af00      	add	r7, sp, #0
    return PacketType;
 8010784:	4b02      	ldr	r3, [pc, #8]	; (8010790 <SUBGRF_GetPacketType+0x10>)
 8010786:	781b      	ldrb	r3, [r3, #0]
}
 8010788:	4618      	mov	r0, r3
 801078a:	46bd      	mov	sp, r7
 801078c:	bc80      	pop	{r7}
 801078e:	4770      	bx	lr
 8010790:	200020a9 	.word	0x200020a9

08010794 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	71fb      	strb	r3, [r7, #7]
 801079e:	460b      	mov	r3, r1
 80107a0:	71bb      	strb	r3, [r7, #6]
 80107a2:	4613      	mov	r3, r2
 80107a4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d149      	bne.n	8010840 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80107ac:	2000      	movs	r0, #0
 80107ae:	f7f6 fa7a 	bl	8006ca6 <RBI_GetRFOMaxPowerConfig>
 80107b2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80107b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	da01      	bge.n	80107c2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2b0e      	cmp	r3, #14
 80107c6:	d10e      	bne.n	80107e6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80107c8:	2301      	movs	r3, #1
 80107ca:	2201      	movs	r2, #1
 80107cc:	2100      	movs	r1, #0
 80107ce:	2004      	movs	r0, #4
 80107d0:	f7ff fef6 	bl	80105c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80107d4:	79ba      	ldrb	r2, [r7, #6]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	330e      	adds	r3, #14
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	71bb      	strb	r3, [r7, #6]
 80107e4:	e01f      	b.n	8010826 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2b0a      	cmp	r3, #10
 80107ea:	d10e      	bne.n	801080a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80107ec:	2301      	movs	r3, #1
 80107ee:	2201      	movs	r2, #1
 80107f0:	2100      	movs	r1, #0
 80107f2:	2001      	movs	r0, #1
 80107f4:	f7ff fee4 	bl	80105c0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80107f8:	79ba      	ldrb	r2, [r7, #6]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	b2db      	uxtb	r3, r3
 8010802:	330d      	adds	r3, #13
 8010804:	b2db      	uxtb	r3, r3
 8010806:	71bb      	strb	r3, [r7, #6]
 8010808:	e00d      	b.n	8010826 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801080a:	2301      	movs	r3, #1
 801080c:	2201      	movs	r2, #1
 801080e:	2100      	movs	r1, #0
 8010810:	2007      	movs	r0, #7
 8010812:	f7ff fed5 	bl	80105c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010816:	79ba      	ldrb	r2, [r7, #6]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	b2db      	uxtb	r3, r3
 801081c:	1ad3      	subs	r3, r2, r3
 801081e:	b2db      	uxtb	r3, r3
 8010820:	330e      	adds	r3, #14
 8010822:	b2db      	uxtb	r3, r3
 8010824:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8010826:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801082a:	f113 0f11 	cmn.w	r3, #17
 801082e:	da01      	bge.n	8010834 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8010830:	23ef      	movs	r3, #239	; 0xef
 8010832:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8010834:	2118      	movs	r1, #24
 8010836:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801083a:	f000 fa93 	bl	8010d64 <SUBGRF_WriteRegister>
 801083e:	e067      	b.n	8010910 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8010840:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010844:	f000 faa2 	bl	8010d8c <SUBGRF_ReadRegister>
 8010848:	4603      	mov	r3, r0
 801084a:	f043 031e 	orr.w	r3, r3, #30
 801084e:	b2db      	uxtb	r3, r3
 8010850:	4619      	mov	r1, r3
 8010852:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010856:	f000 fa85 	bl	8010d64 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801085a:	2001      	movs	r0, #1
 801085c:	f7f6 fa23 	bl	8006ca6 <RBI_GetRFOMaxPowerConfig>
 8010860:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8010862:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	429a      	cmp	r2, r3
 801086a:	da01      	bge.n	8010870 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2b14      	cmp	r3, #20
 8010874:	d10e      	bne.n	8010894 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8010876:	2301      	movs	r3, #1
 8010878:	2200      	movs	r2, #0
 801087a:	2105      	movs	r1, #5
 801087c:	2003      	movs	r0, #3
 801087e:	f7ff fe9f 	bl	80105c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010882:	79ba      	ldrb	r2, [r7, #6]
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	b2db      	uxtb	r3, r3
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	b2db      	uxtb	r3, r3
 801088c:	3316      	adds	r3, #22
 801088e:	b2db      	uxtb	r3, r3
 8010890:	71bb      	strb	r3, [r7, #6]
 8010892:	e031      	b.n	80108f8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2b11      	cmp	r3, #17
 8010898:	d10e      	bne.n	80108b8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801089a:	2301      	movs	r3, #1
 801089c:	2200      	movs	r2, #0
 801089e:	2103      	movs	r1, #3
 80108a0:	2002      	movs	r0, #2
 80108a2:	f7ff fe8d 	bl	80105c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80108a6:	79ba      	ldrb	r2, [r7, #6]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	1ad3      	subs	r3, r2, r3
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	3316      	adds	r3, #22
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	71bb      	strb	r3, [r7, #6]
 80108b6:	e01f      	b.n	80108f8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b0e      	cmp	r3, #14
 80108bc:	d10e      	bne.n	80108dc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80108be:	2301      	movs	r3, #1
 80108c0:	2200      	movs	r2, #0
 80108c2:	2102      	movs	r1, #2
 80108c4:	2002      	movs	r0, #2
 80108c6:	f7ff fe7b 	bl	80105c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80108ca:	79ba      	ldrb	r2, [r7, #6]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	330e      	adds	r3, #14
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	71bb      	strb	r3, [r7, #6]
 80108da:	e00d      	b.n	80108f8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80108dc:	2301      	movs	r3, #1
 80108de:	2200      	movs	r2, #0
 80108e0:	2107      	movs	r1, #7
 80108e2:	2004      	movs	r0, #4
 80108e4:	f7ff fe6c 	bl	80105c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80108e8:	79ba      	ldrb	r2, [r7, #6]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	3316      	adds	r3, #22
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80108f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80108fc:	f113 0f09 	cmn.w	r3, #9
 8010900:	da01      	bge.n	8010906 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8010902:	23f7      	movs	r3, #247	; 0xf7
 8010904:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8010906:	2138      	movs	r1, #56	; 0x38
 8010908:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801090c:	f000 fa2a 	bl	8010d64 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8010910:	79bb      	ldrb	r3, [r7, #6]
 8010912:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8010914:	797b      	ldrb	r3, [r7, #5]
 8010916:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8010918:	f107 0308 	add.w	r3, r7, #8
 801091c:	2202      	movs	r2, #2
 801091e:	4619      	mov	r1, r3
 8010920:	208e      	movs	r0, #142	; 0x8e
 8010922:	f000 facf 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010926:	bf00      	nop
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
	...

08010930 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8010930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010934:	b086      	sub	sp, #24
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801093a:	2300      	movs	r3, #0
 801093c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801093e:	4a61      	ldr	r2, [pc, #388]	; (8010ac4 <SUBGRF_SetModulationParams+0x194>)
 8010940:	f107 0308 	add.w	r3, r7, #8
 8010944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010948:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	781a      	ldrb	r2, [r3, #0]
 8010950:	4b5d      	ldr	r3, [pc, #372]	; (8010ac8 <SUBGRF_SetModulationParams+0x198>)
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	429a      	cmp	r2, r3
 8010956:	d004      	beq.n	8010962 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff fef3 	bl	8010748 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b03      	cmp	r3, #3
 8010968:	f200 80a5 	bhi.w	8010ab6 <SUBGRF_SetModulationParams+0x186>
 801096c:	a201      	add	r2, pc, #4	; (adr r2, 8010974 <SUBGRF_SetModulationParams+0x44>)
 801096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010972:	bf00      	nop
 8010974:	08010985 	.word	0x08010985
 8010978:	08010a45 	.word	0x08010a45
 801097c:	08010a07 	.word	0x08010a07
 8010980:	08010a73 	.word	0x08010a73
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8010984:	2308      	movs	r3, #8
 8010986:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	4a4f      	ldr	r2, [pc, #316]	; (8010acc <SUBGRF_SetModulationParams+0x19c>)
 801098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010992:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	0c1b      	lsrs	r3, r3, #16
 8010998:	b2db      	uxtb	r3, r3
 801099a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	0a1b      	lsrs	r3, r3, #8
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	7b1b      	ldrb	r3, [r3, #12]
 80109ae:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	7b5b      	ldrb	r3, [r3, #13]
 80109b4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	689b      	ldr	r3, [r3, #8]
 80109ba:	2200      	movs	r2, #0
 80109bc:	461c      	mov	r4, r3
 80109be:	4615      	mov	r5, r2
 80109c0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80109c4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80109c8:	4a41      	ldr	r2, [pc, #260]	; (8010ad0 <SUBGRF_SetModulationParams+0x1a0>)
 80109ca:	f04f 0300 	mov.w	r3, #0
 80109ce:	4640      	mov	r0, r8
 80109d0:	4649      	mov	r1, r9
 80109d2:	f7f0 fa81 	bl	8000ed8 <__aeabi_uldivmod>
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	4613      	mov	r3, r2
 80109dc:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	0c1b      	lsrs	r3, r3, #16
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	0a1b      	lsrs	r3, r3, #8
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80109f4:	7cfb      	ldrb	r3, [r7, #19]
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	f107 0308 	add.w	r3, r7, #8
 80109fc:	4619      	mov	r1, r3
 80109fe:	208b      	movs	r0, #139	; 0x8b
 8010a00:	f000 fa60 	bl	8010ec4 <SUBGRF_WriteCommand>
        break;
 8010a04:	e058      	b.n	8010ab8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8010a06:	2304      	movs	r3, #4
 8010a08:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	4a2f      	ldr	r2, [pc, #188]	; (8010acc <SUBGRF_SetModulationParams+0x19c>)
 8010a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a14:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	0c1b      	lsrs	r3, r3, #16
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	0a1b      	lsrs	r3, r3, #8
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	7d1b      	ldrb	r3, [r3, #20]
 8010a30:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010a32:	7cfb      	ldrb	r3, [r7, #19]
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	f107 0308 	add.w	r3, r7, #8
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	208b      	movs	r0, #139	; 0x8b
 8010a3e:	f000 fa41 	bl	8010ec4 <SUBGRF_WriteCommand>
        break;
 8010a42:	e039      	b.n	8010ab8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8010a44:	2304      	movs	r3, #4
 8010a46:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	7e1b      	ldrb	r3, [r3, #24]
 8010a4c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	7e5b      	ldrb	r3, [r3, #25]
 8010a52:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	7e9b      	ldrb	r3, [r3, #26]
 8010a58:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	7edb      	ldrb	r3, [r3, #27]
 8010a5e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010a60:	7cfb      	ldrb	r3, [r7, #19]
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	f107 0308 	add.w	r3, r7, #8
 8010a68:	4619      	mov	r1, r3
 8010a6a:	208b      	movs	r0, #139	; 0x8b
 8010a6c:	f000 fa2a 	bl	8010ec4 <SUBGRF_WriteCommand>

        break;
 8010a70:	e022      	b.n	8010ab8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8010a72:	2305      	movs	r3, #5
 8010a74:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	4a14      	ldr	r2, [pc, #80]	; (8010acc <SUBGRF_SetModulationParams+0x19c>)
 8010a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a80:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	0c1b      	lsrs	r3, r3, #16
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	0a1b      	lsrs	r3, r3, #8
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	7b1b      	ldrb	r3, [r3, #12]
 8010a9c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	7b5b      	ldrb	r3, [r3, #13]
 8010aa2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010aa4:	7cfb      	ldrb	r3, [r7, #19]
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	f107 0308 	add.w	r3, r7, #8
 8010aac:	4619      	mov	r1, r3
 8010aae:	208b      	movs	r0, #139	; 0x8b
 8010ab0:	f000 fa08 	bl	8010ec4 <SUBGRF_WriteCommand>
        break;
 8010ab4:	e000      	b.n	8010ab8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8010ab6:	bf00      	nop
    }
}
 8010ab8:	bf00      	nop
 8010aba:	3718      	adds	r7, #24
 8010abc:	46bd      	mov	sp, r7
 8010abe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010ac2:	bf00      	nop
 8010ac4:	08014928 	.word	0x08014928
 8010ac8:	200020a9 	.word	0x200020a9
 8010acc:	3d090000 	.word	0x3d090000
 8010ad0:	01e84800 	.word	0x01e84800

08010ad4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b086      	sub	sp, #24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8010adc:	2300      	movs	r3, #0
 8010ade:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010ae0:	4a48      	ldr	r2, [pc, #288]	; (8010c04 <SUBGRF_SetPacketParams+0x130>)
 8010ae2:	f107 030c 	add.w	r3, r7, #12
 8010ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ae8:	c303      	stmia	r3!, {r0, r1}
 8010aea:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	781a      	ldrb	r2, [r3, #0]
 8010af0:	4b45      	ldr	r3, [pc, #276]	; (8010c08 <SUBGRF_SetPacketParams+0x134>)
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d004      	beq.n	8010b02 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7ff fe23 	bl	8010748 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	2b03      	cmp	r3, #3
 8010b08:	d878      	bhi.n	8010bfc <SUBGRF_SetPacketParams+0x128>
 8010b0a:	a201      	add	r2, pc, #4	; (adr r2, 8010b10 <SUBGRF_SetPacketParams+0x3c>)
 8010b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b10:	08010b21 	.word	0x08010b21
 8010b14:	08010bb1 	.word	0x08010bb1
 8010b18:	08010ba5 	.word	0x08010ba5
 8010b1c:	08010b21 	.word	0x08010b21
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	7a5b      	ldrb	r3, [r3, #9]
 8010b24:	2bf1      	cmp	r3, #241	; 0xf1
 8010b26:	d10a      	bne.n	8010b3e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8010b28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010b2c:	f7ff faaa 	bl	8010084 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8010b30:	f248 0005 	movw	r0, #32773	; 0x8005
 8010b34:	f7ff fac6 	bl	80100c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8010b38:	2302      	movs	r3, #2
 8010b3a:	75bb      	strb	r3, [r7, #22]
 8010b3c:	e011      	b.n	8010b62 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7a5b      	ldrb	r3, [r3, #9]
 8010b42:	2bf2      	cmp	r3, #242	; 0xf2
 8010b44:	d10a      	bne.n	8010b5c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8010b46:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8010b4a:	f7ff fa9b 	bl	8010084 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8010b4e:	f241 0021 	movw	r0, #4129	; 0x1021
 8010b52:	f7ff fab7 	bl	80100c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8010b56:	2306      	movs	r3, #6
 8010b58:	75bb      	strb	r3, [r7, #22]
 8010b5a:	e002      	b.n	8010b62 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	7a5b      	ldrb	r3, [r3, #9]
 8010b60:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8010b62:	2309      	movs	r3, #9
 8010b64:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	885b      	ldrh	r3, [r3, #2]
 8010b6a:	0a1b      	lsrs	r3, r3, #8
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	885b      	ldrh	r3, [r3, #2]
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	791b      	ldrb	r3, [r3, #4]
 8010b7e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	795b      	ldrb	r3, [r3, #5]
 8010b84:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	799b      	ldrb	r3, [r3, #6]
 8010b8a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	79db      	ldrb	r3, [r3, #7]
 8010b90:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	7a1b      	ldrb	r3, [r3, #8]
 8010b96:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8010b98:	7dbb      	ldrb	r3, [r7, #22]
 8010b9a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	7a9b      	ldrb	r3, [r3, #10]
 8010ba0:	753b      	strb	r3, [r7, #20]
        break;
 8010ba2:	e022      	b.n	8010bea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	7b1b      	ldrb	r3, [r3, #12]
 8010bac:	733b      	strb	r3, [r7, #12]
        break;
 8010bae:	e01c      	b.n	8010bea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8010bb0:	2306      	movs	r3, #6
 8010bb2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	89db      	ldrh	r3, [r3, #14]
 8010bb8:	0a1b      	lsrs	r3, r3, #8
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	89db      	ldrh	r3, [r3, #14]
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	7c1a      	ldrb	r2, [r3, #16]
 8010bcc:	4b0f      	ldr	r3, [pc, #60]	; (8010c0c <SUBGRF_SetPacketParams+0x138>)
 8010bce:	4611      	mov	r1, r2
 8010bd0:	7019      	strb	r1, [r3, #0]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	7c5b      	ldrb	r3, [r3, #17]
 8010bda:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	7c9b      	ldrb	r3, [r3, #18]
 8010be0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	7cdb      	ldrb	r3, [r3, #19]
 8010be6:	747b      	strb	r3, [r7, #17]
        break;
 8010be8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8010bea:	7dfb      	ldrb	r3, [r7, #23]
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	f107 030c 	add.w	r3, r7, #12
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	208c      	movs	r0, #140	; 0x8c
 8010bf6:	f000 f965 	bl	8010ec4 <SUBGRF_WriteCommand>
 8010bfa:	e000      	b.n	8010bfe <SUBGRF_SetPacketParams+0x12a>
        return;
 8010bfc:	bf00      	nop
}
 8010bfe:	3718      	adds	r7, #24
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	08014930 	.word	0x08014930
 8010c08:	200020a9 	.word	0x200020a9
 8010c0c:	200020aa 	.word	0x200020aa

08010c10 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	4603      	mov	r3, r0
 8010c18:	460a      	mov	r2, r1
 8010c1a:	71fb      	strb	r3, [r7, #7]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8010c20:	79fb      	ldrb	r3, [r7, #7]
 8010c22:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8010c24:	79bb      	ldrb	r3, [r7, #6]
 8010c26:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8010c28:	f107 030c 	add.w	r3, r7, #12
 8010c2c:	2202      	movs	r2, #2
 8010c2e:	4619      	mov	r1, r3
 8010c30:	208f      	movs	r0, #143	; 0x8f
 8010c32:	f000 f947 	bl	8010ec4 <SUBGRF_WriteCommand>
}
 8010c36:	bf00      	nop
 8010c38:	3710      	adds	r7, #16
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b082      	sub	sp, #8
 8010c42:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8010c48:	1d3b      	adds	r3, r7, #4
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	2015      	movs	r0, #21
 8010c50:	f000 f95a 	bl	8010f08 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8010c54:	793b      	ldrb	r3, [r7, #4]
 8010c56:	425b      	negs	r3, r3
 8010c58:	105b      	asrs	r3, r3, #1
 8010c5a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8010c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8010c72:	f107 030c 	add.w	r3, r7, #12
 8010c76:	2202      	movs	r2, #2
 8010c78:	4619      	mov	r1, r3
 8010c7a:	2013      	movs	r0, #19
 8010c7c:	f000 f944 	bl	8010f08 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010c80:	f7ff fd7e 	bl	8010780 <SUBGRF_GetPacketType>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d10d      	bne.n	8010ca6 <SUBGRF_GetRxBufferStatus+0x3e>
 8010c8a:	4b0c      	ldr	r3, [pc, #48]	; (8010cbc <SUBGRF_GetRxBufferStatus+0x54>)
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d108      	bne.n	8010ca6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8010c94:	f240 7002 	movw	r0, #1794	; 0x702
 8010c98:	f000 f878 	bl	8010d8c <SUBGRF_ReadRegister>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	701a      	strb	r2, [r3, #0]
 8010ca4:	e002      	b.n	8010cac <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8010ca6:	7b3a      	ldrb	r2, [r7, #12]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8010cac:	7b7a      	ldrb	r2, [r7, #13]
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	701a      	strb	r2, [r3, #0]
}
 8010cb2:	bf00      	nop
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	200020aa 	.word	0x200020aa

08010cc0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8010cc8:	f107 030c 	add.w	r3, r7, #12
 8010ccc:	2203      	movs	r2, #3
 8010cce:	4619      	mov	r1, r3
 8010cd0:	2014      	movs	r0, #20
 8010cd2:	f000 f919 	bl	8010f08 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8010cd6:	f7ff fd53 	bl	8010780 <SUBGRF_GetPacketType>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	461a      	mov	r2, r3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d002      	beq.n	8010cf0 <SUBGRF_GetPacketStatus+0x30>
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d013      	beq.n	8010d16 <SUBGRF_GetPacketStatus+0x56>
 8010cee:	e02a      	b.n	8010d46 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8010cf0:	7b3a      	ldrb	r2, [r7, #12]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8010cf6:	7b7b      	ldrb	r3, [r7, #13]
 8010cf8:	425b      	negs	r3, r3
 8010cfa:	105b      	asrs	r3, r3, #1
 8010cfc:	b25a      	sxtb	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8010d02:	7bbb      	ldrb	r3, [r7, #14]
 8010d04:	425b      	negs	r3, r3
 8010d06:	105b      	asrs	r3, r3, #1
 8010d08:	b25a      	sxtb	r2, r3
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	609a      	str	r2, [r3, #8]
            break;
 8010d14:	e020      	b.n	8010d58 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8010d16:	7b3b      	ldrb	r3, [r7, #12]
 8010d18:	425b      	negs	r3, r3
 8010d1a:	105b      	asrs	r3, r3, #1
 8010d1c:	b25a      	sxtb	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8010d22:	7b7b      	ldrb	r3, [r7, #13]
 8010d24:	b25b      	sxtb	r3, r3
 8010d26:	3302      	adds	r3, #2
 8010d28:	109b      	asrs	r3, r3, #2
 8010d2a:	b25a      	sxtb	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8010d30:	7bbb      	ldrb	r3, [r7, #14]
 8010d32:	425b      	negs	r3, r3
 8010d34:	105b      	asrs	r3, r3, #1
 8010d36:	b25a      	sxtb	r2, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8010d3c:	4b08      	ldr	r3, [pc, #32]	; (8010d60 <SUBGRF_GetPacketStatus+0xa0>)
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	611a      	str	r2, [r3, #16]
            break;
 8010d44:	e008      	b.n	8010d58 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8010d46:	2214      	movs	r2, #20
 8010d48:	2100      	movs	r1, #0
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 faba 	bl	80112c4 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	220f      	movs	r2, #15
 8010d54:	701a      	strb	r2, [r3, #0]
            break;
 8010d56:	bf00      	nop
    }
}
 8010d58:	bf00      	nop
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	200020ac 	.word	0x200020ac

08010d64 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	460a      	mov	r2, r1
 8010d6e:	80fb      	strh	r3, [r7, #6]
 8010d70:	4613      	mov	r3, r2
 8010d72:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8010d74:	1d7a      	adds	r2, r7, #5
 8010d76:	88f9      	ldrh	r1, [r7, #6]
 8010d78:	2301      	movs	r3, #1
 8010d7a:	4803      	ldr	r0, [pc, #12]	; (8010d88 <SUBGRF_WriteRegister+0x24>)
 8010d7c:	f7f5 f854 	bl	8005e28 <HAL_SUBGHZ_WriteRegisters>
}
 8010d80:	bf00      	nop
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	20000720 	.word	0x20000720

08010d8c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	4603      	mov	r3, r0
 8010d94:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8010d96:	f107 020f 	add.w	r2, r7, #15
 8010d9a:	88f9      	ldrh	r1, [r7, #6]
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	4804      	ldr	r0, [pc, #16]	; (8010db0 <SUBGRF_ReadRegister+0x24>)
 8010da0:	f7f5 f8a1 	bl	8005ee6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8010da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3710      	adds	r7, #16
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20000720 	.word	0x20000720

08010db4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b086      	sub	sp, #24
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	4603      	mov	r3, r0
 8010dbc:	6039      	str	r1, [r7, #0]
 8010dbe:	80fb      	strh	r3, [r7, #6]
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010dce:	b672      	cpsid	i
}
 8010dd0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8010dd2:	88bb      	ldrh	r3, [r7, #4]
 8010dd4:	88f9      	ldrh	r1, [r7, #6]
 8010dd6:	683a      	ldr	r2, [r7, #0]
 8010dd8:	4806      	ldr	r0, [pc, #24]	; (8010df4 <SUBGRF_WriteRegisters+0x40>)
 8010dda:	f7f5 f825 	bl	8005e28 <HAL_SUBGHZ_WriteRegisters>
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	f383 8810 	msr	PRIMASK, r3
}
 8010de8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010dea:	bf00      	nop
 8010dec:	3718      	adds	r7, #24
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	20000720 	.word	0x20000720

08010df8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	6039      	str	r1, [r7, #0]
 8010e02:	80fb      	strh	r3, [r7, #6]
 8010e04:	4613      	mov	r3, r2
 8010e06:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e08:	f3ef 8310 	mrs	r3, PRIMASK
 8010e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010e10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e12:	b672      	cpsid	i
}
 8010e14:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8010e16:	88bb      	ldrh	r3, [r7, #4]
 8010e18:	88f9      	ldrh	r1, [r7, #6]
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	4806      	ldr	r0, [pc, #24]	; (8010e38 <SUBGRF_ReadRegisters+0x40>)
 8010e1e:	f7f5 f862 	bl	8005ee6 <HAL_SUBGHZ_ReadRegisters>
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	f383 8810 	msr	PRIMASK, r3
}
 8010e2c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010e2e:	bf00      	nop
 8010e30:	3718      	adds	r7, #24
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	20000720 	.word	0x20000720

08010e3c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b086      	sub	sp, #24
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	4603      	mov	r3, r0
 8010e44:	6039      	str	r1, [r7, #0]
 8010e46:	71fb      	strb	r3, [r7, #7]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8010e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e52:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010e54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e56:	b672      	cpsid	i
}
 8010e58:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8010e5a:	79bb      	ldrb	r3, [r7, #6]
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	79f9      	ldrb	r1, [r7, #7]
 8010e60:	683a      	ldr	r2, [r7, #0]
 8010e62:	4806      	ldr	r0, [pc, #24]	; (8010e7c <SUBGRF_WriteBuffer+0x40>)
 8010e64:	f7f5 f953 	bl	800610e <HAL_SUBGHZ_WriteBuffer>
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f383 8810 	msr	PRIMASK, r3
}
 8010e72:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010e74:	bf00      	nop
 8010e76:	3718      	adds	r7, #24
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	20000720 	.word	0x20000720

08010e80 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	4603      	mov	r3, r0
 8010e88:	6039      	str	r1, [r7, #0]
 8010e8a:	71fb      	strb	r3, [r7, #7]
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e90:	f3ef 8310 	mrs	r3, PRIMASK
 8010e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e96:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010e98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e9a:	b672      	cpsid	i
}
 8010e9c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8010e9e:	79bb      	ldrb	r3, [r7, #6]
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	79f9      	ldrb	r1, [r7, #7]
 8010ea4:	683a      	ldr	r2, [r7, #0]
 8010ea6:	4806      	ldr	r0, [pc, #24]	; (8010ec0 <SUBGRF_ReadBuffer+0x40>)
 8010ea8:	f7f5 f984 	bl	80061b4 <HAL_SUBGHZ_ReadBuffer>
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	f383 8810 	msr	PRIMASK, r3
}
 8010eb6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010eb8:	bf00      	nop
 8010eba:	3718      	adds	r7, #24
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	20000720 	.word	0x20000720

08010ec4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b086      	sub	sp, #24
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	4603      	mov	r3, r0
 8010ecc:	6039      	str	r1, [r7, #0]
 8010ece:	71fb      	strb	r3, [r7, #7]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8010ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010eda:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010edc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ede:	b672      	cpsid	i
}
 8010ee0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8010ee2:	88bb      	ldrh	r3, [r7, #4]
 8010ee4:	79f9      	ldrb	r1, [r7, #7]
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	4806      	ldr	r0, [pc, #24]	; (8010f04 <SUBGRF_WriteCommand+0x40>)
 8010eea:	f7f5 f85d 	bl	8005fa8 <HAL_SUBGHZ_ExecSetCmd>
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	f383 8810 	msr	PRIMASK, r3
}
 8010ef8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010efa:	bf00      	nop
 8010efc:	3718      	adds	r7, #24
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	20000720 	.word	0x20000720

08010f08 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	4603      	mov	r3, r0
 8010f10:	6039      	str	r1, [r7, #0]
 8010f12:	71fb      	strb	r3, [r7, #7]
 8010f14:	4613      	mov	r3, r2
 8010f16:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f18:	f3ef 8310 	mrs	r3, PRIMASK
 8010f1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f22:	b672      	cpsid	i
}
 8010f24:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8010f26:	88bb      	ldrh	r3, [r7, #4]
 8010f28:	79f9      	ldrb	r1, [r7, #7]
 8010f2a:	683a      	ldr	r2, [r7, #0]
 8010f2c:	4806      	ldr	r0, [pc, #24]	; (8010f48 <SUBGRF_ReadCommand+0x40>)
 8010f2e:	f7f5 f89a 	bl	8006066 <HAL_SUBGHZ_ExecGetCmd>
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	f383 8810 	msr	PRIMASK, r3
}
 8010f3c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010f3e:	bf00      	nop
 8010f40:	3718      	adds	r7, #24
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	20000720 	.word	0x20000720

08010f4c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	4603      	mov	r3, r0
 8010f54:	460a      	mov	r2, r1
 8010f56:	71fb      	strb	r3, [r7, #7]
 8010f58:	4613      	mov	r3, r2
 8010f5a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8010f60:	79bb      	ldrb	r3, [r7, #6]
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d10d      	bne.n	8010f82 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8010f66:	79fb      	ldrb	r3, [r7, #7]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d104      	bne.n	8010f76 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8010f70:	2004      	movs	r0, #4
 8010f72:	f000 f84e 	bl	8011012 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8010f76:	79fb      	ldrb	r3, [r7, #7]
 8010f78:	2b02      	cmp	r3, #2
 8010f7a:	d107      	bne.n	8010f8c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8010f7c:	2303      	movs	r3, #3
 8010f7e:	73fb      	strb	r3, [r7, #15]
 8010f80:	e004      	b.n	8010f8c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8010f82:	79bb      	ldrb	r3, [r7, #6]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d101      	bne.n	8010f8c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8010f8c:	7bfb      	ldrb	r3, [r7, #15]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7f5 fe5b 	bl	8006c4a <RBI_ConfigRFSwitch>
}
 8010f94:	bf00      	nop
 8010f96:	3710      	adds	r7, #16
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8010faa:	f7f5 fe5b 	bl	8006c64 <RBI_GetTxConfig>
 8010fae:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	2b02      	cmp	r3, #2
 8010fb4:	d016      	beq.n	8010fe4 <SUBGRF_SetRfTxPower+0x48>
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	dc16      	bgt.n	8010fea <SUBGRF_SetRfTxPower+0x4e>
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d003      	beq.n	8010fca <SUBGRF_SetRfTxPower+0x2e>
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d00a      	beq.n	8010fde <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8010fc8:	e00f      	b.n	8010fea <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8010fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fce:	2b0f      	cmp	r3, #15
 8010fd0:	dd02      	ble.n	8010fd8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8010fd2:	2302      	movs	r3, #2
 8010fd4:	73fb      	strb	r3, [r7, #15]
            break;
 8010fd6:	e009      	b.n	8010fec <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	73fb      	strb	r3, [r7, #15]
            break;
 8010fdc:	e006      	b.n	8010fec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	73fb      	strb	r3, [r7, #15]
            break;
 8010fe2:	e003      	b.n	8010fec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8010fe4:	2302      	movs	r3, #2
 8010fe6:	73fb      	strb	r3, [r7, #15]
            break;
 8010fe8:	e000      	b.n	8010fec <SUBGRF_SetRfTxPower+0x50>
            break;
 8010fea:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010fec:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8010ff0:	7bfb      	ldrb	r3, [r7, #15]
 8010ff2:	2202      	movs	r2, #2
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff fbcd 	bl	8010794 <SUBGRF_SetTxParams>

    return paSelect;
 8010ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8011004:	b480      	push	{r7}
 8011006:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8011008:	2301      	movs	r3, #1
}
 801100a:	4618      	mov	r0, r3
 801100c:	46bd      	mov	sp, r7
 801100e:	bc80      	pop	{r7}
 8011010:	4770      	bx	lr

08011012 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8011012:	b580      	push	{r7, lr}
 8011014:	b084      	sub	sp, #16
 8011016:	af00      	add	r7, sp, #0
 8011018:	4603      	mov	r3, r0
 801101a:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801101c:	f7f5 fe38 	bl	8006c90 <RBI_IsDCDC>
 8011020:	4603      	mov	r3, r0
 8011022:	2b01      	cmp	r3, #1
 8011024:	d112      	bne.n	801104c <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8011026:	f640 1023 	movw	r0, #2339	; 0x923
 801102a:	f7ff feaf 	bl	8010d8c <SUBGRF_ReadRegister>
 801102e:	4603      	mov	r3, r0
 8011030:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8011032:	7bfb      	ldrb	r3, [r7, #15]
 8011034:	f023 0306 	bic.w	r3, r3, #6
 8011038:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801103a:	7bfa      	ldrb	r2, [r7, #15]
 801103c:	79fb      	ldrb	r3, [r7, #7]
 801103e:	4313      	orrs	r3, r2
 8011040:	b2db      	uxtb	r3, r3
 8011042:	4619      	mov	r1, r3
 8011044:	f640 1023 	movw	r0, #2339	; 0x923
 8011048:	f7ff fe8c 	bl	8010d64 <SUBGRF_WriteRegister>
  }
}
 801104c:	bf00      	nop
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8011054:	b480      	push	{r7}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d101      	bne.n	8011066 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8011062:	231f      	movs	r3, #31
 8011064:	e016      	b.n	8011094 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011066:	2300      	movs	r3, #0
 8011068:	73fb      	strb	r3, [r7, #15]
 801106a:	e00f      	b.n	801108c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801106c:	7bfb      	ldrb	r3, [r7, #15]
 801106e:	4a0c      	ldr	r2, [pc, #48]	; (80110a0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8011070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011074:	687a      	ldr	r2, [r7, #4]
 8011076:	429a      	cmp	r2, r3
 8011078:	d205      	bcs.n	8011086 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801107a:	7bfb      	ldrb	r3, [r7, #15]
 801107c:	4a08      	ldr	r2, [pc, #32]	; (80110a0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801107e:	00db      	lsls	r3, r3, #3
 8011080:	4413      	add	r3, r2
 8011082:	791b      	ldrb	r3, [r3, #4]
 8011084:	e006      	b.n	8011094 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011086:	7bfb      	ldrb	r3, [r7, #15]
 8011088:	3301      	adds	r3, #1
 801108a:	73fb      	strb	r3, [r7, #15]
 801108c:	7bfb      	ldrb	r3, [r7, #15]
 801108e:	2b15      	cmp	r3, #21
 8011090:	d9ec      	bls.n	801106c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8011092:	e7fe      	b.n	8011092 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8011094:	4618      	mov	r0, r3
 8011096:	3714      	adds	r7, #20
 8011098:	46bd      	mov	sp, r7
 801109a:	bc80      	pop	{r7}
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	080150c4 	.word	0x080150c4

080110a4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b08a      	sub	sp, #40	; 0x28
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80110ae:	4b35      	ldr	r3, [pc, #212]	; (8011184 <SUBGRF_GetCFO+0xe0>)
 80110b0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80110b2:	f640 0007 	movw	r0, #2055	; 0x807
 80110b6:	f7ff fe69 	bl	8010d8c <SUBGRF_ReadRegister>
 80110ba:	4603      	mov	r3, r0
 80110bc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80110be:	7ffb      	ldrb	r3, [r7, #31]
 80110c0:	08db      	lsrs	r3, r3, #3
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	f003 0303 	and.w	r3, r3, #3
 80110c8:	3328      	adds	r3, #40	; 0x28
 80110ca:	443b      	add	r3, r7
 80110cc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80110d0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80110d2:	7ffb      	ldrb	r3, [r7, #31]
 80110d4:	f003 0307 	and.w	r3, r3, #7
 80110d8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80110da:	7fba      	ldrb	r2, [r7, #30]
 80110dc:	7f7b      	ldrb	r3, [r7, #29]
 80110de:	3301      	adds	r3, #1
 80110e0:	fa02 f303 	lsl.w	r3, r2, r3
 80110e4:	461a      	mov	r2, r3
 80110e6:	4b28      	ldr	r3, [pc, #160]	; (8011188 <SUBGRF_GetCFO+0xe4>)
 80110e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80110ec:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80110ee:	69ba      	ldr	r2, [r7, #24]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80110f6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80110f8:	2301      	movs	r3, #1
 80110fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80110fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011102:	697a      	ldr	r2, [r7, #20]
 8011104:	fb02 f303 	mul.w	r3, r2, r3
 8011108:	2b07      	cmp	r3, #7
 801110a:	d802      	bhi.n	8011112 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801110c:	2302      	movs	r3, #2
 801110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8011112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	fb02 f303 	mul.w	r3, r2, r3
 801111c:	2b03      	cmp	r3, #3
 801111e:	d802      	bhi.n	8011126 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8011120:	2304      	movs	r3, #4
 8011122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011126:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	fb02 f303 	mul.w	r3, r2, r3
 8011130:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011132:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8011136:	f7ff fe29 	bl	8010d8c <SUBGRF_ReadRegister>
 801113a:	4603      	mov	r3, r0
 801113c:	021b      	lsls	r3, r3, #8
 801113e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8011142:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011144:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8011148:	f7ff fe20 	bl	8010d8c <SUBGRF_ReadRegister>
 801114c:	4603      	mov	r3, r0
 801114e:	461a      	mov	r2, r3
 8011150:	6a3b      	ldr	r3, [r7, #32]
 8011152:	4313      	orrs	r3, r2
 8011154:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011156:	6a3b      	ldr	r3, [r7, #32]
 8011158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801115c:	2b00      	cmp	r3, #0
 801115e:	d005      	beq.n	801116c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8011160:	6a3b      	ldr	r3, [r7, #32]
 8011162:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8011166:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801116a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	095b      	lsrs	r3, r3, #5
 8011170:	6a3a      	ldr	r2, [r7, #32]
 8011172:	fb02 f303 	mul.w	r3, r2, r3
 8011176:	11da      	asrs	r2, r3, #7
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	601a      	str	r2, [r3, #0]
}
 801117c:	bf00      	nop
 801117e:	3728      	adds	r7, #40	; 0x28
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	0c0a0804 	.word	0x0c0a0804
 8011188:	01e84800 	.word	0x01e84800

0801118c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801118c:	b480      	push	{r7}
 801118e:	b087      	sub	sp, #28
 8011190:	af00      	add	r7, sp, #0
 8011192:	4603      	mov	r3, r0
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801119a:	2300      	movs	r3, #0
 801119c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801119e:	f04f 33ff 	mov.w	r3, #4294967295
 80111a2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80111a4:	697b      	ldr	r3, [r7, #20]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	371c      	adds	r7, #28
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bc80      	pop	{r7}
 80111ae:	4770      	bx	lr

080111b0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 80111b0:	b480      	push	{r7}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	4603      	mov	r3, r0
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
 80111bc:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80111be:	2300      	movs	r3, #0
 80111c0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 80111c2:	f04f 33ff 	mov.w	r3, #4294967295
 80111c6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80111c8:	697b      	ldr	r3, [r7, #20]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	371c      	adds	r7, #28
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bc80      	pop	{r7}
 80111d2:	4770      	bx	lr

080111d4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 80111e0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3714      	adds	r7, #20
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bc80      	pop	{r7}
 80111ec:	4770      	bx	lr

080111ee <RFW_DeInit>:

void RFW_DeInit( void )
{
 80111ee:	b480      	push	{r7}
 80111f0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80111f2:	bf00      	nop
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bc80      	pop	{r7}
 80111f8:	4770      	bx	lr

080111fa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 80111fa:	b480      	push	{r7}
 80111fc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 80111fe:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8011200:	4618      	mov	r0, r3
 8011202:	46bd      	mov	sp, r7
 8011204:	bc80      	pop	{r7}
 8011206:	4770      	bx	lr

08011208 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8011208:	b480      	push	{r7}
 801120a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801120c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801120e:	4618      	mov	r0, r3
 8011210:	46bd      	mov	sp, r7
 8011212:	bc80      	pop	{r7}
 8011214:	4770      	bx	lr

08011216 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8011216:	b480      	push	{r7}
 8011218:	b083      	sub	sp, #12
 801121a:	af00      	add	r7, sp, #0
 801121c:	4603      	mov	r3, r0
 801121e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	bc80      	pop	{r7}
 8011228:	4770      	bx	lr

0801122a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801122a:	b480      	push	{r7}
 801122c:	b087      	sub	sp, #28
 801122e:	af00      	add	r7, sp, #0
 8011230:	60f8      	str	r0, [r7, #12]
 8011232:	460b      	mov	r3, r1
 8011234:	607a      	str	r2, [r7, #4]
 8011236:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8011238:	f04f 33ff 	mov.w	r3, #4294967295
 801123c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801123e:	697b      	ldr	r3, [r7, #20]
}
 8011240:	4618      	mov	r0, r3
 8011242:	371c      	adds	r7, #28
 8011244:	46bd      	mov	sp, r7
 8011246:	bc80      	pop	{r7}
 8011248:	4770      	bx	lr

0801124a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801124a:	b480      	push	{r7}
 801124c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801124e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8011252:	4618      	mov	r0, r3
 8011254:	46bd      	mov	sp, r7
 8011256:	bc80      	pop	{r7}
 8011258:	4770      	bx	lr

0801125a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801125a:	b480      	push	{r7}
 801125c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801125e:	bf00      	nop
 8011260:	46bd      	mov	sp, r7
 8011262:	bc80      	pop	{r7}
 8011264:	4770      	bx	lr

08011266 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8011266:	b480      	push	{r7}
 8011268:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801126a:	bf00      	nop
 801126c:	46bd      	mov	sp, r7
 801126e:	bc80      	pop	{r7}
 8011270:	4770      	bx	lr

08011272 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8011272:	b480      	push	{r7}
 8011274:	b083      	sub	sp, #12
 8011276:	af00      	add	r7, sp, #0
 8011278:	4603      	mov	r3, r0
 801127a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801127c:	bf00      	nop
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	bc80      	pop	{r7}
 8011284:	4770      	bx	lr

08011286 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8011286:	b480      	push	{r7}
 8011288:	b087      	sub	sp, #28
 801128a:	af00      	add	r7, sp, #0
 801128c:	60f8      	str	r0, [r7, #12]
 801128e:	60b9      	str	r1, [r7, #8]
 8011290:	4613      	mov	r3, r2
 8011292:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	613b      	str	r3, [r7, #16]

  while( size-- )
 801129c:	e007      	b.n	80112ae <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801129e:	693a      	ldr	r2, [r7, #16]
 80112a0:	1c53      	adds	r3, r2, #1
 80112a2:	613b      	str	r3, [r7, #16]
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	1c59      	adds	r1, r3, #1
 80112a8:	6179      	str	r1, [r7, #20]
 80112aa:	7812      	ldrb	r2, [r2, #0]
 80112ac:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80112ae:	88fb      	ldrh	r3, [r7, #6]
 80112b0:	1e5a      	subs	r2, r3, #1
 80112b2:	80fa      	strh	r2, [r7, #6]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d1f2      	bne.n	801129e <UTIL_MEM_cpy_8+0x18>
    }
}
 80112b8:	bf00      	nop
 80112ba:	bf00      	nop
 80112bc:	371c      	adds	r7, #28
 80112be:	46bd      	mov	sp, r7
 80112c0:	bc80      	pop	{r7}
 80112c2:	4770      	bx	lr

080112c4 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	460b      	mov	r3, r1
 80112ce:	70fb      	strb	r3, [r7, #3]
 80112d0:	4613      	mov	r3, r2
 80112d2:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80112d8:	e004      	b.n	80112e4 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	1c5a      	adds	r2, r3, #1
 80112de:	60fa      	str	r2, [r7, #12]
 80112e0:	78fa      	ldrb	r2, [r7, #3]
 80112e2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80112e4:	883b      	ldrh	r3, [r7, #0]
 80112e6:	1e5a      	subs	r2, r3, #1
 80112e8:	803a      	strh	r2, [r7, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d1f5      	bne.n	80112da <UTIL_MEM_set_8+0x16>
  }
}
 80112ee:	bf00      	nop
 80112f0:	bf00      	nop
 80112f2:	3714      	adds	r7, #20
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bc80      	pop	{r7}
 80112f8:	4770      	bx	lr

080112fa <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80112fa:	b082      	sub	sp, #8
 80112fc:	b480      	push	{r7}
 80112fe:	b087      	sub	sp, #28
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	1d38      	adds	r0, r7, #4
 8011306:	e880 0006 	stmia.w	r0, {r1, r2}
 801130a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801130c:	2300      	movs	r3, #0
 801130e:	613b      	str	r3, [r7, #16]
 8011310:	2300      	movs	r3, #0
 8011312:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011318:	4413      	add	r3, r2
 801131a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801131c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011320:	b29a      	uxth	r2, r3
 8011322:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011326:	b29b      	uxth	r3, r3
 8011328:	4413      	add	r3, r2
 801132a:	b29b      	uxth	r3, r3
 801132c:	b21b      	sxth	r3, r3
 801132e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8011330:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011338:	db0a      	blt.n	8011350 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	3301      	adds	r3, #1
 801133e:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8011340:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011344:	b29b      	uxth	r3, r3
 8011346:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801134a:	b29b      	uxth	r3, r3
 801134c:	b21b      	sxth	r3, r3
 801134e:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	461a      	mov	r2, r3
 8011354:	f107 0310 	add.w	r3, r7, #16
 8011358:	e893 0003 	ldmia.w	r3, {r0, r1}
 801135c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	371c      	adds	r7, #28
 8011364:	46bd      	mov	sp, r7
 8011366:	bc80      	pop	{r7}
 8011368:	b002      	add	sp, #8
 801136a:	4770      	bx	lr

0801136c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801136c:	b082      	sub	sp, #8
 801136e:	b480      	push	{r7}
 8011370:	b087      	sub	sp, #28
 8011372:	af00      	add	r7, sp, #0
 8011374:	60f8      	str	r0, [r7, #12]
 8011376:	1d38      	adds	r0, r7, #4
 8011378:	e880 0006 	stmia.w	r0, {r1, r2}
 801137c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801137e:	2300      	movs	r3, #0
 8011380:	613b      	str	r3, [r7, #16]
 8011382:	2300      	movs	r3, #0
 8011384:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801138e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011392:	b29a      	uxth	r2, r3
 8011394:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011398:	b29b      	uxth	r3, r3
 801139a:	1ad3      	subs	r3, r2, r3
 801139c:	b29b      	uxth	r3, r3
 801139e:	b21b      	sxth	r3, r3
 80113a0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 80113a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	da0a      	bge.n	80113c0 <SysTimeSub+0x54>
  {
    c.Seconds--;
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 80113b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	b21b      	sxth	r3, r3
 80113be:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	461a      	mov	r2, r3
 80113c4:	f107 0310 	add.w	r3, r7, #16
 80113c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80113cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	371c      	adds	r7, #28
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bc80      	pop	{r7}
 80113d8:	b002      	add	sp, #8
 80113da:	4770      	bx	lr

080113dc <SysTimeGetMcuTime>:
  return sysTime;
}


SysTime_t SysTimeGetMcuTime( void )
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80113e4:	2300      	movs	r3, #0
 80113e6:	60bb      	str	r3, [r7, #8]
 80113e8:	2300      	movs	r3, #0
 80113ea:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80113ec:	4b0a      	ldr	r3, [pc, #40]	; (8011418 <SysTimeGetMcuTime+0x3c>)
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	f107 0208 	add.w	r2, r7, #8
 80113f4:	3204      	adds	r2, #4
 80113f6:	4610      	mov	r0, r2
 80113f8:	4798      	blx	r3
 80113fa:	4603      	mov	r3, r0
 80113fc:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	461a      	mov	r2, r3
 8011402:	f107 0308 	add.w	r3, r7, #8
 8011406:	e893 0003 	ldmia.w	r3, {r0, r1}
 801140a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	3710      	adds	r7, #16
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	080149e8 	.word	0x080149e8

0801141c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b088      	sub	sp, #32
 8011420:	af02      	add	r7, sp, #8
 8011422:	463b      	mov	r3, r7
 8011424:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011428:	4b0f      	ldr	r3, [pc, #60]	; (8011468 <SysTimeToMs+0x4c>)
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	4798      	blx	r3
 801142e:	4603      	mov	r3, r0
 8011430:	b21b      	sxth	r3, r3
 8011432:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011434:	4b0c      	ldr	r3, [pc, #48]	; (8011468 <SysTimeToMs+0x4c>)
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	4798      	blx	r3
 801143a:	4603      	mov	r3, r0
 801143c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801143e:	f107 0008 	add.w	r0, r7, #8
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	463a      	mov	r2, r7
 801144a:	ca06      	ldmia	r2, {r1, r2}
 801144c:	f7ff ff8e 	bl	801136c <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011456:	fb02 f303 	mul.w	r3, r2, r3
 801145a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801145e:	4413      	add	r3, r2
}
 8011460:	4618      	mov	r0, r3
 8011462:	3718      	adds	r7, #24
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	080149e8 	.word	0x080149e8

0801146c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08a      	sub	sp, #40	; 0x28
 8011470:	af02      	add	r7, sp, #8
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	4a19      	ldr	r2, [pc, #100]	; (80114e0 <SysTimeFromMs+0x74>)
 801147a:	fba2 2303 	umull	r2, r3, r2, r3
 801147e:	099b      	lsrs	r3, r3, #6
 8011480:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8011482:	69fb      	ldr	r3, [r7, #28]
 8011484:	617b      	str	r3, [r7, #20]
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	b29a      	uxth	r2, r3
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	b29b      	uxth	r3, r3
 801148e:	4619      	mov	r1, r3
 8011490:	0149      	lsls	r1, r1, #5
 8011492:	1ac9      	subs	r1, r1, r3
 8011494:	0089      	lsls	r1, r1, #2
 8011496:	440b      	add	r3, r1
 8011498:	00db      	lsls	r3, r3, #3
 801149a:	b29b      	uxth	r3, r3
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	b29b      	uxth	r3, r3
 80114a0:	b21b      	sxth	r3, r3
 80114a2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 80114a4:	f107 030c 	add.w	r3, r7, #12
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]
 80114ac:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80114ae:	4b0d      	ldr	r3, [pc, #52]	; (80114e4 <SysTimeFromMs+0x78>)
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	4798      	blx	r3
 80114b4:	4603      	mov	r3, r0
 80114b6:	b21b      	sxth	r3, r3
 80114b8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80114ba:	4b0a      	ldr	r3, [pc, #40]	; (80114e4 <SysTimeFromMs+0x78>)
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	4798      	blx	r3
 80114c0:	4603      	mov	r3, r0
 80114c2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	f107 0214 	add.w	r2, r7, #20
 80114d0:	ca06      	ldmia	r2, {r1, r2}
 80114d2:	f7ff ff12 	bl	80112fa <SysTimeAdd>
}
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	10624dd3 	.word	0x10624dd3
 80114e4:	080149e8 	.word	0x080149e8

080114e8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b084      	sub	sp, #16
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	603b      	str	r3, [r7, #0]
 80114f4:	4613      	mov	r3, r2
 80114f6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d023      	beq.n	8011546 <UTIL_TIMER_Create+0x5e>
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d020      	beq.n	8011546 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2200      	movs	r2, #0
 8011508:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801150a:	4b11      	ldr	r3, [pc, #68]	; (8011550 <UTIL_TIMER_Create+0x68>)
 801150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801150e:	68b8      	ldr	r0, [r7, #8]
 8011510:	4798      	blx	r3
 8011512:	4602      	mov	r2, r0
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2200      	movs	r2, #0
 801151c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2200      	movs	r2, #0
 8011522:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2200      	movs	r2, #0
 8011528:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	683a      	ldr	r2, [r7, #0]
 801152e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	69ba      	ldr	r2, [r7, #24]
 8011534:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	79fa      	ldrb	r2, [r7, #7]
 801153a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2200      	movs	r2, #0
 8011540:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8011542:	2300      	movs	r3, #0
 8011544:	e000      	b.n	8011548 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8011546:	2301      	movs	r3, #1
  }
}
 8011548:	4618      	mov	r0, r3
 801154a:	3710      	adds	r7, #16
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	080149bc 	.word	0x080149bc

08011554 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b08a      	sub	sp, #40	; 0x28
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801155c:	2300      	movs	r3, #0
 801155e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d056      	beq.n	8011616 <UTIL_TIMER_Start+0xc2>
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f000 f929 	bl	80117c0 <TimerExists>
 801156e:	4603      	mov	r3, r0
 8011570:	f083 0301 	eor.w	r3, r3, #1
 8011574:	b2db      	uxtb	r3, r3
 8011576:	2b00      	cmp	r3, #0
 8011578:	d04d      	beq.n	8011616 <UTIL_TIMER_Start+0xc2>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	7a5b      	ldrb	r3, [r3, #9]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d149      	bne.n	8011616 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011582:	f3ef 8310 	mrs	r3, PRIMASK
 8011586:	613b      	str	r3, [r7, #16]
  return(result);
 8011588:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801158a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801158c:	b672      	cpsid	i
}
 801158e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8011596:	4b24      	ldr	r3, [pc, #144]	; (8011628 <UTIL_TIMER_Start+0xd4>)
 8011598:	6a1b      	ldr	r3, [r3, #32]
 801159a:	4798      	blx	r3
 801159c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801159e:	6a3a      	ldr	r2, [r7, #32]
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d201      	bcs.n	80115aa <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80115a6:	69bb      	ldr	r3, [r7, #24]
 80115a8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a3a      	ldr	r2, [r7, #32]
 80115ae:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2200      	movs	r2, #0
 80115b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2201      	movs	r2, #1
 80115ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2200      	movs	r2, #0
 80115c0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80115c2:	4b1a      	ldr	r3, [pc, #104]	; (801162c <UTIL_TIMER_Start+0xd8>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d106      	bne.n	80115d8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80115ca:	4b17      	ldr	r3, [pc, #92]	; (8011628 <UTIL_TIMER_Start+0xd4>)
 80115cc:	691b      	ldr	r3, [r3, #16]
 80115ce:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f000 f96b 	bl	80118ac <TimerInsertNewHeadTimer>
 80115d6:	e017      	b.n	8011608 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80115d8:	4b13      	ldr	r3, [pc, #76]	; (8011628 <UTIL_TIMER_Start+0xd4>)
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	4798      	blx	r3
 80115de:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	441a      	add	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	4b0e      	ldr	r3, [pc, #56]	; (801162c <UTIL_TIMER_Start+0xd8>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d203      	bcs.n	8011602 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f956 	bl	80118ac <TimerInsertNewHeadTimer>
 8011600:	e002      	b.n	8011608 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f922 	bl	801184c <TimerInsertTimer>
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f383 8810 	msr	PRIMASK, r3
}
 8011612:	bf00      	nop
  {
 8011614:	e002      	b.n	801161c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011616:	2301      	movs	r3, #1
 8011618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801161c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011620:	4618      	mov	r0, r3
 8011622:	3728      	adds	r7, #40	; 0x28
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	080149bc 	.word	0x080149bc
 801162c:	200020b8 	.word	0x200020b8

08011630 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b088      	sub	sp, #32
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011638:	2300      	movs	r3, #0
 801163a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d05b      	beq.n	80116fa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011642:	f3ef 8310 	mrs	r3, PRIMASK
 8011646:	60fb      	str	r3, [r7, #12]
  return(result);
 8011648:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801164a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801164c:	b672      	cpsid	i
}
 801164e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011650:	4b2d      	ldr	r3, [pc, #180]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8011656:	4b2c      	ldr	r3, [pc, #176]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2201      	movs	r2, #1
 8011660:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8011662:	4b29      	ldr	r3, [pc, #164]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d041      	beq.n	80116ee <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011670:	4b25      	ldr	r3, [pc, #148]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	429a      	cmp	r2, r3
 8011678:	d134      	bne.n	80116e4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801167a:	4b23      	ldr	r3, [pc, #140]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2200      	movs	r2, #0
 8011680:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8011682:	4b21      	ldr	r3, [pc, #132]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	695b      	ldr	r3, [r3, #20]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00a      	beq.n	80116a2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801168c:	4b1e      	ldr	r3, [pc, #120]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	4a1d      	ldr	r2, [pc, #116]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 8011694:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8011696:	4b1c      	ldr	r3, [pc, #112]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	4618      	mov	r0, r3
 801169c:	f000 f8ac 	bl	80117f8 <TimerSetTimeout>
 80116a0:	e023      	b.n	80116ea <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80116a2:	4b1a      	ldr	r3, [pc, #104]	; (801170c <UTIL_TIMER_Stop+0xdc>)
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	4798      	blx	r3
            TimerListHead = NULL;
 80116a8:	4b17      	ldr	r3, [pc, #92]	; (8011708 <UTIL_TIMER_Stop+0xd8>)
 80116aa:	2200      	movs	r2, #0
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	e01c      	b.n	80116ea <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d110      	bne.n	80116da <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	695b      	ldr	r3, [r3, #20]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d006      	beq.n	80116ce <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	695b      	ldr	r3, [r3, #20]
 80116c4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80116c6:	69bb      	ldr	r3, [r7, #24]
 80116c8:	697a      	ldr	r2, [r7, #20]
 80116ca:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80116cc:	e00d      	b.n	80116ea <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80116ce:	2300      	movs	r3, #0
 80116d0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	697a      	ldr	r2, [r7, #20]
 80116d6:	615a      	str	r2, [r3, #20]
            break;
 80116d8:	e007      	b.n	80116ea <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	695b      	ldr	r3, [r3, #20]
 80116e2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1e2      	bne.n	80116b0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80116ea:	2300      	movs	r3, #0
 80116ec:	77fb      	strb	r3, [r7, #31]
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	f383 8810 	msr	PRIMASK, r3
}
 80116f8:	e001      	b.n	80116fe <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 80116fa:	2301      	movs	r3, #1
 80116fc:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80116fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8011700:	4618      	mov	r0, r3
 8011702:	3720      	adds	r7, #32
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	200020b8 	.word	0x200020b8
 801170c:	080149bc 	.word	0x080149bc

08011710 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801171a:	2300      	movs	r3, #0
 801171c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d102      	bne.n	801172a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011724:	2301      	movs	r3, #1
 8011726:	73fb      	strb	r3, [r7, #15]
 8011728:	e014      	b.n	8011754 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801172a:	4b0d      	ldr	r3, [pc, #52]	; (8011760 <UTIL_TIMER_SetPeriod+0x50>)
 801172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801172e:	6838      	ldr	r0, [r7, #0]
 8011730:	4798      	blx	r3
 8011732:	4602      	mov	r2, r0
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 f841 	bl	80117c0 <TimerExists>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d007      	beq.n	8011754 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f7ff ff73 	bl	8011630 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f7ff ff02 	bl	8011554 <UTIL_TIMER_Start>
 8011750:	4603      	mov	r3, r0
 8011752:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8011754:	7bfb      	ldrb	r3, [r7, #15]
}
 8011756:	4618      	mov	r0, r3
 8011758:	3710      	adds	r7, #16
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	080149bc 	.word	0x080149bc

08011764 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801176a:	4b06      	ldr	r3, [pc, #24]	; (8011784 <UTIL_TIMER_GetCurrentTime+0x20>)
 801176c:	69db      	ldr	r3, [r3, #28]
 801176e:	4798      	blx	r3
 8011770:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8011772:	4b04      	ldr	r3, [pc, #16]	; (8011784 <UTIL_TIMER_GetCurrentTime+0x20>)
 8011774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	4798      	blx	r3
 801177a:	4603      	mov	r3, r0
}
 801177c:	4618      	mov	r0, r3
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	080149bc 	.word	0x080149bc

08011788 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8011790:	4b0a      	ldr	r3, [pc, #40]	; (80117bc <UTIL_TIMER_GetElapsedTime+0x34>)
 8011792:	69db      	ldr	r3, [r3, #28]
 8011794:	4798      	blx	r3
 8011796:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8011798:	4b08      	ldr	r3, [pc, #32]	; (80117bc <UTIL_TIMER_GetElapsedTime+0x34>)
 801179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	4798      	blx	r3
 80117a0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80117a2:	4b06      	ldr	r3, [pc, #24]	; (80117bc <UTIL_TIMER_GetElapsedTime+0x34>)
 80117a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117a6:	68f9      	ldr	r1, [r7, #12]
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	1a8a      	subs	r2, r1, r2
 80117ac:	4610      	mov	r0, r2
 80117ae:	4798      	blx	r3
 80117b0:	4603      	mov	r3, r0
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3710      	adds	r7, #16
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	080149bc 	.word	0x080149bc

080117c0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80117c0:	b480      	push	{r7}
 80117c2:	b085      	sub	sp, #20
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80117c8:	4b0a      	ldr	r3, [pc, #40]	; (80117f4 <TimerExists+0x34>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80117ce:	e008      	b.n	80117e2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d101      	bne.n	80117dc <TimerExists+0x1c>
    {
      return true;
 80117d8:	2301      	movs	r3, #1
 80117da:	e006      	b.n	80117ea <TimerExists+0x2a>
    }
    cur = cur->Next;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	695b      	ldr	r3, [r3, #20]
 80117e0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1f3      	bne.n	80117d0 <TimerExists+0x10>
  }
  return false;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bc80      	pop	{r7}
 80117f2:	4770      	bx	lr
 80117f4:	200020b8 	.word	0x200020b8

080117f8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80117f8:	b590      	push	{r4, r7, lr}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8011800:	4b11      	ldr	r3, [pc, #68]	; (8011848 <TimerSetTimeout+0x50>)
 8011802:	6a1b      	ldr	r3, [r3, #32]
 8011804:	4798      	blx	r3
 8011806:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2201      	movs	r2, #1
 801180c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681c      	ldr	r4, [r3, #0]
 8011812:	4b0d      	ldr	r3, [pc, #52]	; (8011848 <TimerSetTimeout+0x50>)
 8011814:	699b      	ldr	r3, [r3, #24]
 8011816:	4798      	blx	r3
 8011818:	4602      	mov	r2, r0
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	4413      	add	r3, r2
 801181e:	429c      	cmp	r4, r3
 8011820:	d207      	bcs.n	8011832 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8011822:	4b09      	ldr	r3, [pc, #36]	; (8011848 <TimerSetTimeout+0x50>)
 8011824:	699b      	ldr	r3, [r3, #24]
 8011826:	4798      	blx	r3
 8011828:	4602      	mov	r2, r0
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	441a      	add	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8011832:	4b05      	ldr	r3, [pc, #20]	; (8011848 <TimerSetTimeout+0x50>)
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	6812      	ldr	r2, [r2, #0]
 801183a:	4610      	mov	r0, r2
 801183c:	4798      	blx	r3
}
 801183e:	bf00      	nop
 8011840:	3714      	adds	r7, #20
 8011842:	46bd      	mov	sp, r7
 8011844:	bd90      	pop	{r4, r7, pc}
 8011846:	bf00      	nop
 8011848:	080149bc 	.word	0x080149bc

0801184c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011854:	4b14      	ldr	r3, [pc, #80]	; (80118a8 <TimerInsertTimer+0x5c>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801185a:	4b13      	ldr	r3, [pc, #76]	; (80118a8 <TimerInsertTimer+0x5c>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	695b      	ldr	r3, [r3, #20]
 8011860:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8011862:	e012      	b.n	801188a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	429a      	cmp	r2, r3
 801186e:	d905      	bls.n	801187c <TimerInsertTimer+0x30>
    {
        cur = next;
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	695b      	ldr	r3, [r3, #20]
 8011878:	60bb      	str	r3, [r7, #8]
 801187a:	e006      	b.n	801188a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	615a      	str	r2, [r3, #20]
        return;
 8011888:	e009      	b.n	801189e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	695b      	ldr	r3, [r3, #20]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1e8      	bne.n	8011864 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	615a      	str	r2, [r3, #20]
}
 801189e:	3714      	adds	r7, #20
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bc80      	pop	{r7}
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop
 80118a8:	200020b8 	.word	0x200020b8

080118ac <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80118b4:	4b0b      	ldr	r3, [pc, #44]	; (80118e4 <TimerInsertNewHeadTimer+0x38>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2200      	movs	r2, #0
 80118c4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	68fa      	ldr	r2, [r7, #12]
 80118ca:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80118cc:	4a05      	ldr	r2, [pc, #20]	; (80118e4 <TimerInsertNewHeadTimer+0x38>)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80118d2:	4b04      	ldr	r3, [pc, #16]	; (80118e4 <TimerInsertNewHeadTimer+0x38>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7ff ff8e 	bl	80117f8 <TimerSetTimeout>
}
 80118dc:	bf00      	nop
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	200020b8 	.word	0x200020b8

080118e8 <abs>:
 80118e8:	2800      	cmp	r0, #0
 80118ea:	bfb8      	it	lt
 80118ec:	4240      	neglt	r0, r0
 80118ee:	4770      	bx	lr

080118f0 <__errno>:
 80118f0:	4b01      	ldr	r3, [pc, #4]	; (80118f8 <__errno+0x8>)
 80118f2:	6818      	ldr	r0, [r3, #0]
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop
 80118f8:	20000284 	.word	0x20000284

080118fc <__libc_init_array>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	4d0d      	ldr	r5, [pc, #52]	; (8011934 <__libc_init_array+0x38>)
 8011900:	4c0d      	ldr	r4, [pc, #52]	; (8011938 <__libc_init_array+0x3c>)
 8011902:	1b64      	subs	r4, r4, r5
 8011904:	10a4      	asrs	r4, r4, #2
 8011906:	2600      	movs	r6, #0
 8011908:	42a6      	cmp	r6, r4
 801190a:	d109      	bne.n	8011920 <__libc_init_array+0x24>
 801190c:	4d0b      	ldr	r5, [pc, #44]	; (801193c <__libc_init_array+0x40>)
 801190e:	4c0c      	ldr	r4, [pc, #48]	; (8011940 <__libc_init_array+0x44>)
 8011910:	f002 ff9e 	bl	8014850 <_init>
 8011914:	1b64      	subs	r4, r4, r5
 8011916:	10a4      	asrs	r4, r4, #2
 8011918:	2600      	movs	r6, #0
 801191a:	42a6      	cmp	r6, r4
 801191c:	d105      	bne.n	801192a <__libc_init_array+0x2e>
 801191e:	bd70      	pop	{r4, r5, r6, pc}
 8011920:	f855 3b04 	ldr.w	r3, [r5], #4
 8011924:	4798      	blx	r3
 8011926:	3601      	adds	r6, #1
 8011928:	e7ee      	b.n	8011908 <__libc_init_array+0xc>
 801192a:	f855 3b04 	ldr.w	r3, [r5], #4
 801192e:	4798      	blx	r3
 8011930:	3601      	adds	r6, #1
 8011932:	e7f2      	b.n	801191a <__libc_init_array+0x1e>
 8011934:	08015554 	.word	0x08015554
 8011938:	08015554 	.word	0x08015554
 801193c:	08015554 	.word	0x08015554
 8011940:	08015558 	.word	0x08015558

08011944 <malloc>:
 8011944:	4b02      	ldr	r3, [pc, #8]	; (8011950 <malloc+0xc>)
 8011946:	4601      	mov	r1, r0
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	f000 b88b 	b.w	8011a64 <_malloc_r>
 801194e:	bf00      	nop
 8011950:	20000284 	.word	0x20000284

08011954 <free>:
 8011954:	4b02      	ldr	r3, [pc, #8]	; (8011960 <free+0xc>)
 8011956:	4601      	mov	r1, r0
 8011958:	6818      	ldr	r0, [r3, #0]
 801195a:	f000 b819 	b.w	8011990 <_free_r>
 801195e:	bf00      	nop
 8011960:	20000284 	.word	0x20000284

08011964 <memcpy>:
 8011964:	440a      	add	r2, r1
 8011966:	4291      	cmp	r1, r2
 8011968:	f100 33ff 	add.w	r3, r0, #4294967295
 801196c:	d100      	bne.n	8011970 <memcpy+0xc>
 801196e:	4770      	bx	lr
 8011970:	b510      	push	{r4, lr}
 8011972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011976:	f803 4f01 	strb.w	r4, [r3, #1]!
 801197a:	4291      	cmp	r1, r2
 801197c:	d1f9      	bne.n	8011972 <memcpy+0xe>
 801197e:	bd10      	pop	{r4, pc}

08011980 <memset>:
 8011980:	4402      	add	r2, r0
 8011982:	4603      	mov	r3, r0
 8011984:	4293      	cmp	r3, r2
 8011986:	d100      	bne.n	801198a <memset+0xa>
 8011988:	4770      	bx	lr
 801198a:	f803 1b01 	strb.w	r1, [r3], #1
 801198e:	e7f9      	b.n	8011984 <memset+0x4>

08011990 <_free_r>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	4605      	mov	r5, r0
 8011994:	2900      	cmp	r1, #0
 8011996:	d041      	beq.n	8011a1c <_free_r+0x8c>
 8011998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801199c:	1f0c      	subs	r4, r1, #4
 801199e:	2b00      	cmp	r3, #0
 80119a0:	bfb8      	it	lt
 80119a2:	18e4      	addlt	r4, r4, r3
 80119a4:	f001 feea 	bl	801377c <__malloc_lock>
 80119a8:	4a1d      	ldr	r2, [pc, #116]	; (8011a20 <_free_r+0x90>)
 80119aa:	6813      	ldr	r3, [r2, #0]
 80119ac:	b933      	cbnz	r3, 80119bc <_free_r+0x2c>
 80119ae:	6063      	str	r3, [r4, #4]
 80119b0:	6014      	str	r4, [r2, #0]
 80119b2:	4628      	mov	r0, r5
 80119b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119b8:	f001 bee6 	b.w	8013788 <__malloc_unlock>
 80119bc:	42a3      	cmp	r3, r4
 80119be:	d908      	bls.n	80119d2 <_free_r+0x42>
 80119c0:	6820      	ldr	r0, [r4, #0]
 80119c2:	1821      	adds	r1, r4, r0
 80119c4:	428b      	cmp	r3, r1
 80119c6:	bf01      	itttt	eq
 80119c8:	6819      	ldreq	r1, [r3, #0]
 80119ca:	685b      	ldreq	r3, [r3, #4]
 80119cc:	1809      	addeq	r1, r1, r0
 80119ce:	6021      	streq	r1, [r4, #0]
 80119d0:	e7ed      	b.n	80119ae <_free_r+0x1e>
 80119d2:	461a      	mov	r2, r3
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	b10b      	cbz	r3, 80119dc <_free_r+0x4c>
 80119d8:	42a3      	cmp	r3, r4
 80119da:	d9fa      	bls.n	80119d2 <_free_r+0x42>
 80119dc:	6811      	ldr	r1, [r2, #0]
 80119de:	1850      	adds	r0, r2, r1
 80119e0:	42a0      	cmp	r0, r4
 80119e2:	d10b      	bne.n	80119fc <_free_r+0x6c>
 80119e4:	6820      	ldr	r0, [r4, #0]
 80119e6:	4401      	add	r1, r0
 80119e8:	1850      	adds	r0, r2, r1
 80119ea:	4283      	cmp	r3, r0
 80119ec:	6011      	str	r1, [r2, #0]
 80119ee:	d1e0      	bne.n	80119b2 <_free_r+0x22>
 80119f0:	6818      	ldr	r0, [r3, #0]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	6053      	str	r3, [r2, #4]
 80119f6:	4401      	add	r1, r0
 80119f8:	6011      	str	r1, [r2, #0]
 80119fa:	e7da      	b.n	80119b2 <_free_r+0x22>
 80119fc:	d902      	bls.n	8011a04 <_free_r+0x74>
 80119fe:	230c      	movs	r3, #12
 8011a00:	602b      	str	r3, [r5, #0]
 8011a02:	e7d6      	b.n	80119b2 <_free_r+0x22>
 8011a04:	6820      	ldr	r0, [r4, #0]
 8011a06:	1821      	adds	r1, r4, r0
 8011a08:	428b      	cmp	r3, r1
 8011a0a:	bf04      	itt	eq
 8011a0c:	6819      	ldreq	r1, [r3, #0]
 8011a0e:	685b      	ldreq	r3, [r3, #4]
 8011a10:	6063      	str	r3, [r4, #4]
 8011a12:	bf04      	itt	eq
 8011a14:	1809      	addeq	r1, r1, r0
 8011a16:	6021      	streq	r1, [r4, #0]
 8011a18:	6054      	str	r4, [r2, #4]
 8011a1a:	e7ca      	b.n	80119b2 <_free_r+0x22>
 8011a1c:	bd38      	pop	{r3, r4, r5, pc}
 8011a1e:	bf00      	nop
 8011a20:	200020bc 	.word	0x200020bc

08011a24 <sbrk_aligned>:
 8011a24:	b570      	push	{r4, r5, r6, lr}
 8011a26:	4e0e      	ldr	r6, [pc, #56]	; (8011a60 <sbrk_aligned+0x3c>)
 8011a28:	460c      	mov	r4, r1
 8011a2a:	6831      	ldr	r1, [r6, #0]
 8011a2c:	4605      	mov	r5, r0
 8011a2e:	b911      	cbnz	r1, 8011a36 <sbrk_aligned+0x12>
 8011a30:	f000 fce8 	bl	8012404 <_sbrk_r>
 8011a34:	6030      	str	r0, [r6, #0]
 8011a36:	4621      	mov	r1, r4
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f000 fce3 	bl	8012404 <_sbrk_r>
 8011a3e:	1c43      	adds	r3, r0, #1
 8011a40:	d00a      	beq.n	8011a58 <sbrk_aligned+0x34>
 8011a42:	1cc4      	adds	r4, r0, #3
 8011a44:	f024 0403 	bic.w	r4, r4, #3
 8011a48:	42a0      	cmp	r0, r4
 8011a4a:	d007      	beq.n	8011a5c <sbrk_aligned+0x38>
 8011a4c:	1a21      	subs	r1, r4, r0
 8011a4e:	4628      	mov	r0, r5
 8011a50:	f000 fcd8 	bl	8012404 <_sbrk_r>
 8011a54:	3001      	adds	r0, #1
 8011a56:	d101      	bne.n	8011a5c <sbrk_aligned+0x38>
 8011a58:	f04f 34ff 	mov.w	r4, #4294967295
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}
 8011a60:	200020c0 	.word	0x200020c0

08011a64 <_malloc_r>:
 8011a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a68:	1ccd      	adds	r5, r1, #3
 8011a6a:	f025 0503 	bic.w	r5, r5, #3
 8011a6e:	3508      	adds	r5, #8
 8011a70:	2d0c      	cmp	r5, #12
 8011a72:	bf38      	it	cc
 8011a74:	250c      	movcc	r5, #12
 8011a76:	2d00      	cmp	r5, #0
 8011a78:	4607      	mov	r7, r0
 8011a7a:	db01      	blt.n	8011a80 <_malloc_r+0x1c>
 8011a7c:	42a9      	cmp	r1, r5
 8011a7e:	d905      	bls.n	8011a8c <_malloc_r+0x28>
 8011a80:	230c      	movs	r3, #12
 8011a82:	603b      	str	r3, [r7, #0]
 8011a84:	2600      	movs	r6, #0
 8011a86:	4630      	mov	r0, r6
 8011a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a8c:	4e2e      	ldr	r6, [pc, #184]	; (8011b48 <_malloc_r+0xe4>)
 8011a8e:	f001 fe75 	bl	801377c <__malloc_lock>
 8011a92:	6833      	ldr	r3, [r6, #0]
 8011a94:	461c      	mov	r4, r3
 8011a96:	bb34      	cbnz	r4, 8011ae6 <_malloc_r+0x82>
 8011a98:	4629      	mov	r1, r5
 8011a9a:	4638      	mov	r0, r7
 8011a9c:	f7ff ffc2 	bl	8011a24 <sbrk_aligned>
 8011aa0:	1c43      	adds	r3, r0, #1
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	d14d      	bne.n	8011b42 <_malloc_r+0xde>
 8011aa6:	6834      	ldr	r4, [r6, #0]
 8011aa8:	4626      	mov	r6, r4
 8011aaa:	2e00      	cmp	r6, #0
 8011aac:	d140      	bne.n	8011b30 <_malloc_r+0xcc>
 8011aae:	6823      	ldr	r3, [r4, #0]
 8011ab0:	4631      	mov	r1, r6
 8011ab2:	4638      	mov	r0, r7
 8011ab4:	eb04 0803 	add.w	r8, r4, r3
 8011ab8:	f000 fca4 	bl	8012404 <_sbrk_r>
 8011abc:	4580      	cmp	r8, r0
 8011abe:	d13a      	bne.n	8011b36 <_malloc_r+0xd2>
 8011ac0:	6821      	ldr	r1, [r4, #0]
 8011ac2:	3503      	adds	r5, #3
 8011ac4:	1a6d      	subs	r5, r5, r1
 8011ac6:	f025 0503 	bic.w	r5, r5, #3
 8011aca:	3508      	adds	r5, #8
 8011acc:	2d0c      	cmp	r5, #12
 8011ace:	bf38      	it	cc
 8011ad0:	250c      	movcc	r5, #12
 8011ad2:	4629      	mov	r1, r5
 8011ad4:	4638      	mov	r0, r7
 8011ad6:	f7ff ffa5 	bl	8011a24 <sbrk_aligned>
 8011ada:	3001      	adds	r0, #1
 8011adc:	d02b      	beq.n	8011b36 <_malloc_r+0xd2>
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	442b      	add	r3, r5
 8011ae2:	6023      	str	r3, [r4, #0]
 8011ae4:	e00e      	b.n	8011b04 <_malloc_r+0xa0>
 8011ae6:	6822      	ldr	r2, [r4, #0]
 8011ae8:	1b52      	subs	r2, r2, r5
 8011aea:	d41e      	bmi.n	8011b2a <_malloc_r+0xc6>
 8011aec:	2a0b      	cmp	r2, #11
 8011aee:	d916      	bls.n	8011b1e <_malloc_r+0xba>
 8011af0:	1961      	adds	r1, r4, r5
 8011af2:	42a3      	cmp	r3, r4
 8011af4:	6025      	str	r5, [r4, #0]
 8011af6:	bf18      	it	ne
 8011af8:	6059      	strne	r1, [r3, #4]
 8011afa:	6863      	ldr	r3, [r4, #4]
 8011afc:	bf08      	it	eq
 8011afe:	6031      	streq	r1, [r6, #0]
 8011b00:	5162      	str	r2, [r4, r5]
 8011b02:	604b      	str	r3, [r1, #4]
 8011b04:	4638      	mov	r0, r7
 8011b06:	f104 060b 	add.w	r6, r4, #11
 8011b0a:	f001 fe3d 	bl	8013788 <__malloc_unlock>
 8011b0e:	f026 0607 	bic.w	r6, r6, #7
 8011b12:	1d23      	adds	r3, r4, #4
 8011b14:	1af2      	subs	r2, r6, r3
 8011b16:	d0b6      	beq.n	8011a86 <_malloc_r+0x22>
 8011b18:	1b9b      	subs	r3, r3, r6
 8011b1a:	50a3      	str	r3, [r4, r2]
 8011b1c:	e7b3      	b.n	8011a86 <_malloc_r+0x22>
 8011b1e:	6862      	ldr	r2, [r4, #4]
 8011b20:	42a3      	cmp	r3, r4
 8011b22:	bf0c      	ite	eq
 8011b24:	6032      	streq	r2, [r6, #0]
 8011b26:	605a      	strne	r2, [r3, #4]
 8011b28:	e7ec      	b.n	8011b04 <_malloc_r+0xa0>
 8011b2a:	4623      	mov	r3, r4
 8011b2c:	6864      	ldr	r4, [r4, #4]
 8011b2e:	e7b2      	b.n	8011a96 <_malloc_r+0x32>
 8011b30:	4634      	mov	r4, r6
 8011b32:	6876      	ldr	r6, [r6, #4]
 8011b34:	e7b9      	b.n	8011aaa <_malloc_r+0x46>
 8011b36:	230c      	movs	r3, #12
 8011b38:	603b      	str	r3, [r7, #0]
 8011b3a:	4638      	mov	r0, r7
 8011b3c:	f001 fe24 	bl	8013788 <__malloc_unlock>
 8011b40:	e7a1      	b.n	8011a86 <_malloc_r+0x22>
 8011b42:	6025      	str	r5, [r4, #0]
 8011b44:	e7de      	b.n	8011b04 <_malloc_r+0xa0>
 8011b46:	bf00      	nop
 8011b48:	200020bc 	.word	0x200020bc

08011b4c <__cvt>:
 8011b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b50:	b088      	sub	sp, #32
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	461f      	mov	r7, r3
 8011b56:	4614      	mov	r4, r2
 8011b58:	bfb8      	it	lt
 8011b5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011b62:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011b66:	bfb6      	itet	lt
 8011b68:	461f      	movlt	r7, r3
 8011b6a:	2300      	movge	r3, #0
 8011b6c:	232d      	movlt	r3, #45	; 0x2d
 8011b6e:	7013      	strb	r3, [r2, #0]
 8011b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b72:	f023 0820 	bic.w	r8, r3, #32
 8011b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b7a:	d005      	beq.n	8011b88 <__cvt+0x3c>
 8011b7c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011b80:	d100      	bne.n	8011b84 <__cvt+0x38>
 8011b82:	3501      	adds	r5, #1
 8011b84:	2302      	movs	r3, #2
 8011b86:	e000      	b.n	8011b8a <__cvt+0x3e>
 8011b88:	2303      	movs	r3, #3
 8011b8a:	aa07      	add	r2, sp, #28
 8011b8c:	9204      	str	r2, [sp, #16]
 8011b8e:	aa06      	add	r2, sp, #24
 8011b90:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011b94:	e9cd 3500 	strd	r3, r5, [sp]
 8011b98:	4622      	mov	r2, r4
 8011b9a:	463b      	mov	r3, r7
 8011b9c:	f000 fde0 	bl	8012760 <_dtoa_r>
 8011ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011ba4:	4606      	mov	r6, r0
 8011ba6:	d102      	bne.n	8011bae <__cvt+0x62>
 8011ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011baa:	07db      	lsls	r3, r3, #31
 8011bac:	d522      	bpl.n	8011bf4 <__cvt+0xa8>
 8011bae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011bb2:	eb06 0905 	add.w	r9, r6, r5
 8011bb6:	d110      	bne.n	8011bda <__cvt+0x8e>
 8011bb8:	7833      	ldrb	r3, [r6, #0]
 8011bba:	2b30      	cmp	r3, #48	; 0x30
 8011bbc:	d10a      	bne.n	8011bd4 <__cvt+0x88>
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	4639      	mov	r1, r7
 8011bc6:	f7ee ff57 	bl	8000a78 <__aeabi_dcmpeq>
 8011bca:	b918      	cbnz	r0, 8011bd4 <__cvt+0x88>
 8011bcc:	f1c5 0501 	rsb	r5, r5, #1
 8011bd0:	f8ca 5000 	str.w	r5, [sl]
 8011bd4:	f8da 3000 	ldr.w	r3, [sl]
 8011bd8:	4499      	add	r9, r3
 8011bda:	2200      	movs	r2, #0
 8011bdc:	2300      	movs	r3, #0
 8011bde:	4620      	mov	r0, r4
 8011be0:	4639      	mov	r1, r7
 8011be2:	f7ee ff49 	bl	8000a78 <__aeabi_dcmpeq>
 8011be6:	b108      	cbz	r0, 8011bec <__cvt+0xa0>
 8011be8:	f8cd 901c 	str.w	r9, [sp, #28]
 8011bec:	2230      	movs	r2, #48	; 0x30
 8011bee:	9b07      	ldr	r3, [sp, #28]
 8011bf0:	454b      	cmp	r3, r9
 8011bf2:	d307      	bcc.n	8011c04 <__cvt+0xb8>
 8011bf4:	9b07      	ldr	r3, [sp, #28]
 8011bf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011bf8:	1b9b      	subs	r3, r3, r6
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	6013      	str	r3, [r2, #0]
 8011bfe:	b008      	add	sp, #32
 8011c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c04:	1c59      	adds	r1, r3, #1
 8011c06:	9107      	str	r1, [sp, #28]
 8011c08:	701a      	strb	r2, [r3, #0]
 8011c0a:	e7f0      	b.n	8011bee <__cvt+0xa2>

08011c0c <__exponent>:
 8011c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2900      	cmp	r1, #0
 8011c12:	bfb8      	it	lt
 8011c14:	4249      	neglt	r1, r1
 8011c16:	f803 2b02 	strb.w	r2, [r3], #2
 8011c1a:	bfb4      	ite	lt
 8011c1c:	222d      	movlt	r2, #45	; 0x2d
 8011c1e:	222b      	movge	r2, #43	; 0x2b
 8011c20:	2909      	cmp	r1, #9
 8011c22:	7042      	strb	r2, [r0, #1]
 8011c24:	dd2a      	ble.n	8011c7c <__exponent+0x70>
 8011c26:	f10d 0407 	add.w	r4, sp, #7
 8011c2a:	46a4      	mov	ip, r4
 8011c2c:	270a      	movs	r7, #10
 8011c2e:	46a6      	mov	lr, r4
 8011c30:	460a      	mov	r2, r1
 8011c32:	fb91 f6f7 	sdiv	r6, r1, r7
 8011c36:	fb07 1516 	mls	r5, r7, r6, r1
 8011c3a:	3530      	adds	r5, #48	; 0x30
 8011c3c:	2a63      	cmp	r2, #99	; 0x63
 8011c3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011c42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011c46:	4631      	mov	r1, r6
 8011c48:	dcf1      	bgt.n	8011c2e <__exponent+0x22>
 8011c4a:	3130      	adds	r1, #48	; 0x30
 8011c4c:	f1ae 0502 	sub.w	r5, lr, #2
 8011c50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011c54:	1c44      	adds	r4, r0, #1
 8011c56:	4629      	mov	r1, r5
 8011c58:	4561      	cmp	r1, ip
 8011c5a:	d30a      	bcc.n	8011c72 <__exponent+0x66>
 8011c5c:	f10d 0209 	add.w	r2, sp, #9
 8011c60:	eba2 020e 	sub.w	r2, r2, lr
 8011c64:	4565      	cmp	r5, ip
 8011c66:	bf88      	it	hi
 8011c68:	2200      	movhi	r2, #0
 8011c6a:	4413      	add	r3, r2
 8011c6c:	1a18      	subs	r0, r3, r0
 8011c6e:	b003      	add	sp, #12
 8011c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011c7a:	e7ed      	b.n	8011c58 <__exponent+0x4c>
 8011c7c:	2330      	movs	r3, #48	; 0x30
 8011c7e:	3130      	adds	r1, #48	; 0x30
 8011c80:	7083      	strb	r3, [r0, #2]
 8011c82:	70c1      	strb	r1, [r0, #3]
 8011c84:	1d03      	adds	r3, r0, #4
 8011c86:	e7f1      	b.n	8011c6c <__exponent+0x60>

08011c88 <_printf_float>:
 8011c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c8c:	b091      	sub	sp, #68	; 0x44
 8011c8e:	460c      	mov	r4, r1
 8011c90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011c94:	4616      	mov	r6, r2
 8011c96:	461f      	mov	r7, r3
 8011c98:	4605      	mov	r5, r0
 8011c9a:	f001 fd03 	bl	80136a4 <_localeconv_r>
 8011c9e:	6803      	ldr	r3, [r0, #0]
 8011ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7ee fa6c 	bl	8000180 <strlen>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	930e      	str	r3, [sp, #56]	; 0x38
 8011cac:	f8d8 3000 	ldr.w	r3, [r8]
 8011cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8011cb2:	3307      	adds	r3, #7
 8011cb4:	f023 0307 	bic.w	r3, r3, #7
 8011cb8:	f103 0208 	add.w	r2, r3, #8
 8011cbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8011cc4:	f8c8 2000 	str.w	r2, [r8]
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011cd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011cd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cdc:	4b9c      	ldr	r3, [pc, #624]	; (8011f50 <_printf_float+0x2c8>)
 8011cde:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	f7ee fefa 	bl	8000adc <__aeabi_dcmpun>
 8011ce8:	bb70      	cbnz	r0, 8011d48 <_printf_float+0xc0>
 8011cea:	4b99      	ldr	r3, [pc, #612]	; (8011f50 <_printf_float+0x2c8>)
 8011cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cee:	f04f 32ff 	mov.w	r2, #4294967295
 8011cf2:	4640      	mov	r0, r8
 8011cf4:	f7ee fed4 	bl	8000aa0 <__aeabi_dcmple>
 8011cf8:	bb30      	cbnz	r0, 8011d48 <_printf_float+0xc0>
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4640      	mov	r0, r8
 8011d00:	4651      	mov	r1, sl
 8011d02:	f7ee fec3 	bl	8000a8c <__aeabi_dcmplt>
 8011d06:	b110      	cbz	r0, 8011d0e <_printf_float+0x86>
 8011d08:	232d      	movs	r3, #45	; 0x2d
 8011d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d0e:	4b91      	ldr	r3, [pc, #580]	; (8011f54 <_printf_float+0x2cc>)
 8011d10:	4891      	ldr	r0, [pc, #580]	; (8011f58 <_printf_float+0x2d0>)
 8011d12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011d16:	bf94      	ite	ls
 8011d18:	4698      	movls	r8, r3
 8011d1a:	4680      	movhi	r8, r0
 8011d1c:	2303      	movs	r3, #3
 8011d1e:	6123      	str	r3, [r4, #16]
 8011d20:	f02b 0304 	bic.w	r3, fp, #4
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	f04f 0a00 	mov.w	sl, #0
 8011d2a:	9700      	str	r7, [sp, #0]
 8011d2c:	4633      	mov	r3, r6
 8011d2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8011d30:	4621      	mov	r1, r4
 8011d32:	4628      	mov	r0, r5
 8011d34:	f000 f9d2 	bl	80120dc <_printf_common>
 8011d38:	3001      	adds	r0, #1
 8011d3a:	f040 808f 	bne.w	8011e5c <_printf_float+0x1d4>
 8011d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d42:	b011      	add	sp, #68	; 0x44
 8011d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d48:	4642      	mov	r2, r8
 8011d4a:	4653      	mov	r3, sl
 8011d4c:	4640      	mov	r0, r8
 8011d4e:	4651      	mov	r1, sl
 8011d50:	f7ee fec4 	bl	8000adc <__aeabi_dcmpun>
 8011d54:	b140      	cbz	r0, 8011d68 <_printf_float+0xe0>
 8011d56:	f1ba 0f00 	cmp.w	sl, #0
 8011d5a:	bfbc      	itt	lt
 8011d5c:	232d      	movlt	r3, #45	; 0x2d
 8011d5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011d62:	487e      	ldr	r0, [pc, #504]	; (8011f5c <_printf_float+0x2d4>)
 8011d64:	4b7e      	ldr	r3, [pc, #504]	; (8011f60 <_printf_float+0x2d8>)
 8011d66:	e7d4      	b.n	8011d12 <_printf_float+0x8a>
 8011d68:	6863      	ldr	r3, [r4, #4]
 8011d6a:	1c5a      	adds	r2, r3, #1
 8011d6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011d70:	d142      	bne.n	8011df8 <_printf_float+0x170>
 8011d72:	2306      	movs	r3, #6
 8011d74:	6063      	str	r3, [r4, #4]
 8011d76:	2200      	movs	r2, #0
 8011d78:	9206      	str	r2, [sp, #24]
 8011d7a:	aa0e      	add	r2, sp, #56	; 0x38
 8011d7c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011d80:	aa0d      	add	r2, sp, #52	; 0x34
 8011d82:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011d86:	9203      	str	r2, [sp, #12]
 8011d88:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011d8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011d90:	6023      	str	r3, [r4, #0]
 8011d92:	6863      	ldr	r3, [r4, #4]
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	4642      	mov	r2, r8
 8011d98:	4653      	mov	r3, sl
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8011d9e:	f7ff fed5 	bl	8011b4c <__cvt>
 8011da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011da4:	2947      	cmp	r1, #71	; 0x47
 8011da6:	4680      	mov	r8, r0
 8011da8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011daa:	d108      	bne.n	8011dbe <_printf_float+0x136>
 8011dac:	1cc8      	adds	r0, r1, #3
 8011dae:	db02      	blt.n	8011db6 <_printf_float+0x12e>
 8011db0:	6863      	ldr	r3, [r4, #4]
 8011db2:	4299      	cmp	r1, r3
 8011db4:	dd40      	ble.n	8011e38 <_printf_float+0x1b0>
 8011db6:	f1a9 0902 	sub.w	r9, r9, #2
 8011dba:	fa5f f989 	uxtb.w	r9, r9
 8011dbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011dc2:	d81f      	bhi.n	8011e04 <_printf_float+0x17c>
 8011dc4:	3901      	subs	r1, #1
 8011dc6:	464a      	mov	r2, r9
 8011dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011dcc:	910d      	str	r1, [sp, #52]	; 0x34
 8011dce:	f7ff ff1d 	bl	8011c0c <__exponent>
 8011dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dd4:	1813      	adds	r3, r2, r0
 8011dd6:	2a01      	cmp	r2, #1
 8011dd8:	4682      	mov	sl, r0
 8011dda:	6123      	str	r3, [r4, #16]
 8011ddc:	dc02      	bgt.n	8011de4 <_printf_float+0x15c>
 8011dde:	6822      	ldr	r2, [r4, #0]
 8011de0:	07d2      	lsls	r2, r2, #31
 8011de2:	d501      	bpl.n	8011de8 <_printf_float+0x160>
 8011de4:	3301      	adds	r3, #1
 8011de6:	6123      	str	r3, [r4, #16]
 8011de8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d09c      	beq.n	8011d2a <_printf_float+0xa2>
 8011df0:	232d      	movs	r3, #45	; 0x2d
 8011df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011df6:	e798      	b.n	8011d2a <_printf_float+0xa2>
 8011df8:	2947      	cmp	r1, #71	; 0x47
 8011dfa:	d1bc      	bne.n	8011d76 <_printf_float+0xee>
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d1ba      	bne.n	8011d76 <_printf_float+0xee>
 8011e00:	2301      	movs	r3, #1
 8011e02:	e7b7      	b.n	8011d74 <_printf_float+0xec>
 8011e04:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011e08:	d118      	bne.n	8011e3c <_printf_float+0x1b4>
 8011e0a:	2900      	cmp	r1, #0
 8011e0c:	6863      	ldr	r3, [r4, #4]
 8011e0e:	dd0b      	ble.n	8011e28 <_printf_float+0x1a0>
 8011e10:	6121      	str	r1, [r4, #16]
 8011e12:	b913      	cbnz	r3, 8011e1a <_printf_float+0x192>
 8011e14:	6822      	ldr	r2, [r4, #0]
 8011e16:	07d0      	lsls	r0, r2, #31
 8011e18:	d502      	bpl.n	8011e20 <_printf_float+0x198>
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	440b      	add	r3, r1
 8011e1e:	6123      	str	r3, [r4, #16]
 8011e20:	65a1      	str	r1, [r4, #88]	; 0x58
 8011e22:	f04f 0a00 	mov.w	sl, #0
 8011e26:	e7df      	b.n	8011de8 <_printf_float+0x160>
 8011e28:	b913      	cbnz	r3, 8011e30 <_printf_float+0x1a8>
 8011e2a:	6822      	ldr	r2, [r4, #0]
 8011e2c:	07d2      	lsls	r2, r2, #31
 8011e2e:	d501      	bpl.n	8011e34 <_printf_float+0x1ac>
 8011e30:	3302      	adds	r3, #2
 8011e32:	e7f4      	b.n	8011e1e <_printf_float+0x196>
 8011e34:	2301      	movs	r3, #1
 8011e36:	e7f2      	b.n	8011e1e <_printf_float+0x196>
 8011e38:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e3e:	4299      	cmp	r1, r3
 8011e40:	db05      	blt.n	8011e4e <_printf_float+0x1c6>
 8011e42:	6823      	ldr	r3, [r4, #0]
 8011e44:	6121      	str	r1, [r4, #16]
 8011e46:	07d8      	lsls	r0, r3, #31
 8011e48:	d5ea      	bpl.n	8011e20 <_printf_float+0x198>
 8011e4a:	1c4b      	adds	r3, r1, #1
 8011e4c:	e7e7      	b.n	8011e1e <_printf_float+0x196>
 8011e4e:	2900      	cmp	r1, #0
 8011e50:	bfd4      	ite	le
 8011e52:	f1c1 0202 	rsble	r2, r1, #2
 8011e56:	2201      	movgt	r2, #1
 8011e58:	4413      	add	r3, r2
 8011e5a:	e7e0      	b.n	8011e1e <_printf_float+0x196>
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	055a      	lsls	r2, r3, #21
 8011e60:	d407      	bmi.n	8011e72 <_printf_float+0x1ea>
 8011e62:	6923      	ldr	r3, [r4, #16]
 8011e64:	4642      	mov	r2, r8
 8011e66:	4631      	mov	r1, r6
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b8      	blx	r7
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d12b      	bne.n	8011ec8 <_printf_float+0x240>
 8011e70:	e765      	b.n	8011d3e <_printf_float+0xb6>
 8011e72:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011e76:	f240 80dc 	bls.w	8012032 <_printf_float+0x3aa>
 8011e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e7e:	2200      	movs	r2, #0
 8011e80:	2300      	movs	r3, #0
 8011e82:	f7ee fdf9 	bl	8000a78 <__aeabi_dcmpeq>
 8011e86:	2800      	cmp	r0, #0
 8011e88:	d033      	beq.n	8011ef2 <_printf_float+0x26a>
 8011e8a:	4a36      	ldr	r2, [pc, #216]	; (8011f64 <_printf_float+0x2dc>)
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	4631      	mov	r1, r6
 8011e90:	4628      	mov	r0, r5
 8011e92:	47b8      	blx	r7
 8011e94:	3001      	adds	r0, #1
 8011e96:	f43f af52 	beq.w	8011d3e <_printf_float+0xb6>
 8011e9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	db02      	blt.n	8011ea8 <_printf_float+0x220>
 8011ea2:	6823      	ldr	r3, [r4, #0]
 8011ea4:	07d8      	lsls	r0, r3, #31
 8011ea6:	d50f      	bpl.n	8011ec8 <_printf_float+0x240>
 8011ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011eac:	4631      	mov	r1, r6
 8011eae:	4628      	mov	r0, r5
 8011eb0:	47b8      	blx	r7
 8011eb2:	3001      	adds	r0, #1
 8011eb4:	f43f af43 	beq.w	8011d3e <_printf_float+0xb6>
 8011eb8:	f04f 0800 	mov.w	r8, #0
 8011ebc:	f104 091a 	add.w	r9, r4, #26
 8011ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ec2:	3b01      	subs	r3, #1
 8011ec4:	4543      	cmp	r3, r8
 8011ec6:	dc09      	bgt.n	8011edc <_printf_float+0x254>
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	079b      	lsls	r3, r3, #30
 8011ecc:	f100 8101 	bmi.w	80120d2 <_printf_float+0x44a>
 8011ed0:	68e0      	ldr	r0, [r4, #12]
 8011ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ed4:	4298      	cmp	r0, r3
 8011ed6:	bfb8      	it	lt
 8011ed8:	4618      	movlt	r0, r3
 8011eda:	e732      	b.n	8011d42 <_printf_float+0xba>
 8011edc:	2301      	movs	r3, #1
 8011ede:	464a      	mov	r2, r9
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	47b8      	blx	r7
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	f43f af29 	beq.w	8011d3e <_printf_float+0xb6>
 8011eec:	f108 0801 	add.w	r8, r8, #1
 8011ef0:	e7e6      	b.n	8011ec0 <_printf_float+0x238>
 8011ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	dc37      	bgt.n	8011f68 <_printf_float+0x2e0>
 8011ef8:	4a1a      	ldr	r2, [pc, #104]	; (8011f64 <_printf_float+0x2dc>)
 8011efa:	2301      	movs	r3, #1
 8011efc:	4631      	mov	r1, r6
 8011efe:	4628      	mov	r0, r5
 8011f00:	47b8      	blx	r7
 8011f02:	3001      	adds	r0, #1
 8011f04:	f43f af1b 	beq.w	8011d3e <_printf_float+0xb6>
 8011f08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011f0c:	4313      	orrs	r3, r2
 8011f0e:	d102      	bne.n	8011f16 <_printf_float+0x28e>
 8011f10:	6823      	ldr	r3, [r4, #0]
 8011f12:	07d9      	lsls	r1, r3, #31
 8011f14:	d5d8      	bpl.n	8011ec8 <_printf_float+0x240>
 8011f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f1a:	4631      	mov	r1, r6
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	47b8      	blx	r7
 8011f20:	3001      	adds	r0, #1
 8011f22:	f43f af0c 	beq.w	8011d3e <_printf_float+0xb6>
 8011f26:	f04f 0900 	mov.w	r9, #0
 8011f2a:	f104 0a1a 	add.w	sl, r4, #26
 8011f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f30:	425b      	negs	r3, r3
 8011f32:	454b      	cmp	r3, r9
 8011f34:	dc01      	bgt.n	8011f3a <_printf_float+0x2b2>
 8011f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f38:	e794      	b.n	8011e64 <_printf_float+0x1dc>
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	4652      	mov	r2, sl
 8011f3e:	4631      	mov	r1, r6
 8011f40:	4628      	mov	r0, r5
 8011f42:	47b8      	blx	r7
 8011f44:	3001      	adds	r0, #1
 8011f46:	f43f aefa 	beq.w	8011d3e <_printf_float+0xb6>
 8011f4a:	f109 0901 	add.w	r9, r9, #1
 8011f4e:	e7ee      	b.n	8011f2e <_printf_float+0x2a6>
 8011f50:	7fefffff 	.word	0x7fefffff
 8011f54:	08015178 	.word	0x08015178
 8011f58:	0801517c 	.word	0x0801517c
 8011f5c:	08015184 	.word	0x08015184
 8011f60:	08015180 	.word	0x08015180
 8011f64:	08015188 	.word	0x08015188
 8011f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	bfa8      	it	ge
 8011f70:	461a      	movge	r2, r3
 8011f72:	2a00      	cmp	r2, #0
 8011f74:	4691      	mov	r9, r2
 8011f76:	dc37      	bgt.n	8011fe8 <_printf_float+0x360>
 8011f78:	f04f 0b00 	mov.w	fp, #0
 8011f7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f80:	f104 021a 	add.w	r2, r4, #26
 8011f84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011f88:	ebaa 0309 	sub.w	r3, sl, r9
 8011f8c:	455b      	cmp	r3, fp
 8011f8e:	dc33      	bgt.n	8011ff8 <_printf_float+0x370>
 8011f90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011f94:	429a      	cmp	r2, r3
 8011f96:	db3b      	blt.n	8012010 <_printf_float+0x388>
 8011f98:	6823      	ldr	r3, [r4, #0]
 8011f9a:	07da      	lsls	r2, r3, #31
 8011f9c:	d438      	bmi.n	8012010 <_printf_float+0x388>
 8011f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011fa2:	eba3 020a 	sub.w	r2, r3, sl
 8011fa6:	eba3 0901 	sub.w	r9, r3, r1
 8011faa:	4591      	cmp	r9, r2
 8011fac:	bfa8      	it	ge
 8011fae:	4691      	movge	r9, r2
 8011fb0:	f1b9 0f00 	cmp.w	r9, #0
 8011fb4:	dc34      	bgt.n	8012020 <_printf_float+0x398>
 8011fb6:	f04f 0800 	mov.w	r8, #0
 8011fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fbe:	f104 0a1a 	add.w	sl, r4, #26
 8011fc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011fc6:	1a9b      	subs	r3, r3, r2
 8011fc8:	eba3 0309 	sub.w	r3, r3, r9
 8011fcc:	4543      	cmp	r3, r8
 8011fce:	f77f af7b 	ble.w	8011ec8 <_printf_float+0x240>
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	4652      	mov	r2, sl
 8011fd6:	4631      	mov	r1, r6
 8011fd8:	4628      	mov	r0, r5
 8011fda:	47b8      	blx	r7
 8011fdc:	3001      	adds	r0, #1
 8011fde:	f43f aeae 	beq.w	8011d3e <_printf_float+0xb6>
 8011fe2:	f108 0801 	add.w	r8, r8, #1
 8011fe6:	e7ec      	b.n	8011fc2 <_printf_float+0x33a>
 8011fe8:	4613      	mov	r3, r2
 8011fea:	4631      	mov	r1, r6
 8011fec:	4642      	mov	r2, r8
 8011fee:	4628      	mov	r0, r5
 8011ff0:	47b8      	blx	r7
 8011ff2:	3001      	adds	r0, #1
 8011ff4:	d1c0      	bne.n	8011f78 <_printf_float+0x2f0>
 8011ff6:	e6a2      	b.n	8011d3e <_printf_float+0xb6>
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	4631      	mov	r1, r6
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	920b      	str	r2, [sp, #44]	; 0x2c
 8012000:	47b8      	blx	r7
 8012002:	3001      	adds	r0, #1
 8012004:	f43f ae9b 	beq.w	8011d3e <_printf_float+0xb6>
 8012008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801200a:	f10b 0b01 	add.w	fp, fp, #1
 801200e:	e7b9      	b.n	8011f84 <_printf_float+0x2fc>
 8012010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012014:	4631      	mov	r1, r6
 8012016:	4628      	mov	r0, r5
 8012018:	47b8      	blx	r7
 801201a:	3001      	adds	r0, #1
 801201c:	d1bf      	bne.n	8011f9e <_printf_float+0x316>
 801201e:	e68e      	b.n	8011d3e <_printf_float+0xb6>
 8012020:	464b      	mov	r3, r9
 8012022:	eb08 020a 	add.w	r2, r8, sl
 8012026:	4631      	mov	r1, r6
 8012028:	4628      	mov	r0, r5
 801202a:	47b8      	blx	r7
 801202c:	3001      	adds	r0, #1
 801202e:	d1c2      	bne.n	8011fb6 <_printf_float+0x32e>
 8012030:	e685      	b.n	8011d3e <_printf_float+0xb6>
 8012032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012034:	2a01      	cmp	r2, #1
 8012036:	dc01      	bgt.n	801203c <_printf_float+0x3b4>
 8012038:	07db      	lsls	r3, r3, #31
 801203a:	d537      	bpl.n	80120ac <_printf_float+0x424>
 801203c:	2301      	movs	r3, #1
 801203e:	4642      	mov	r2, r8
 8012040:	4631      	mov	r1, r6
 8012042:	4628      	mov	r0, r5
 8012044:	47b8      	blx	r7
 8012046:	3001      	adds	r0, #1
 8012048:	f43f ae79 	beq.w	8011d3e <_printf_float+0xb6>
 801204c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012050:	4631      	mov	r1, r6
 8012052:	4628      	mov	r0, r5
 8012054:	47b8      	blx	r7
 8012056:	3001      	adds	r0, #1
 8012058:	f43f ae71 	beq.w	8011d3e <_printf_float+0xb6>
 801205c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012060:	2200      	movs	r2, #0
 8012062:	2300      	movs	r3, #0
 8012064:	f7ee fd08 	bl	8000a78 <__aeabi_dcmpeq>
 8012068:	b9d8      	cbnz	r0, 80120a2 <_printf_float+0x41a>
 801206a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801206c:	f108 0201 	add.w	r2, r8, #1
 8012070:	3b01      	subs	r3, #1
 8012072:	4631      	mov	r1, r6
 8012074:	4628      	mov	r0, r5
 8012076:	47b8      	blx	r7
 8012078:	3001      	adds	r0, #1
 801207a:	d10e      	bne.n	801209a <_printf_float+0x412>
 801207c:	e65f      	b.n	8011d3e <_printf_float+0xb6>
 801207e:	2301      	movs	r3, #1
 8012080:	464a      	mov	r2, r9
 8012082:	4631      	mov	r1, r6
 8012084:	4628      	mov	r0, r5
 8012086:	47b8      	blx	r7
 8012088:	3001      	adds	r0, #1
 801208a:	f43f ae58 	beq.w	8011d3e <_printf_float+0xb6>
 801208e:	f108 0801 	add.w	r8, r8, #1
 8012092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012094:	3b01      	subs	r3, #1
 8012096:	4543      	cmp	r3, r8
 8012098:	dcf1      	bgt.n	801207e <_printf_float+0x3f6>
 801209a:	4653      	mov	r3, sl
 801209c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80120a0:	e6e1      	b.n	8011e66 <_printf_float+0x1de>
 80120a2:	f04f 0800 	mov.w	r8, #0
 80120a6:	f104 091a 	add.w	r9, r4, #26
 80120aa:	e7f2      	b.n	8012092 <_printf_float+0x40a>
 80120ac:	2301      	movs	r3, #1
 80120ae:	4642      	mov	r2, r8
 80120b0:	e7df      	b.n	8012072 <_printf_float+0x3ea>
 80120b2:	2301      	movs	r3, #1
 80120b4:	464a      	mov	r2, r9
 80120b6:	4631      	mov	r1, r6
 80120b8:	4628      	mov	r0, r5
 80120ba:	47b8      	blx	r7
 80120bc:	3001      	adds	r0, #1
 80120be:	f43f ae3e 	beq.w	8011d3e <_printf_float+0xb6>
 80120c2:	f108 0801 	add.w	r8, r8, #1
 80120c6:	68e3      	ldr	r3, [r4, #12]
 80120c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80120ca:	1a5b      	subs	r3, r3, r1
 80120cc:	4543      	cmp	r3, r8
 80120ce:	dcf0      	bgt.n	80120b2 <_printf_float+0x42a>
 80120d0:	e6fe      	b.n	8011ed0 <_printf_float+0x248>
 80120d2:	f04f 0800 	mov.w	r8, #0
 80120d6:	f104 0919 	add.w	r9, r4, #25
 80120da:	e7f4      	b.n	80120c6 <_printf_float+0x43e>

080120dc <_printf_common>:
 80120dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120e0:	4616      	mov	r6, r2
 80120e2:	4699      	mov	r9, r3
 80120e4:	688a      	ldr	r2, [r1, #8]
 80120e6:	690b      	ldr	r3, [r1, #16]
 80120e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120ec:	4293      	cmp	r3, r2
 80120ee:	bfb8      	it	lt
 80120f0:	4613      	movlt	r3, r2
 80120f2:	6033      	str	r3, [r6, #0]
 80120f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120f8:	4607      	mov	r7, r0
 80120fa:	460c      	mov	r4, r1
 80120fc:	b10a      	cbz	r2, 8012102 <_printf_common+0x26>
 80120fe:	3301      	adds	r3, #1
 8012100:	6033      	str	r3, [r6, #0]
 8012102:	6823      	ldr	r3, [r4, #0]
 8012104:	0699      	lsls	r1, r3, #26
 8012106:	bf42      	ittt	mi
 8012108:	6833      	ldrmi	r3, [r6, #0]
 801210a:	3302      	addmi	r3, #2
 801210c:	6033      	strmi	r3, [r6, #0]
 801210e:	6825      	ldr	r5, [r4, #0]
 8012110:	f015 0506 	ands.w	r5, r5, #6
 8012114:	d106      	bne.n	8012124 <_printf_common+0x48>
 8012116:	f104 0a19 	add.w	sl, r4, #25
 801211a:	68e3      	ldr	r3, [r4, #12]
 801211c:	6832      	ldr	r2, [r6, #0]
 801211e:	1a9b      	subs	r3, r3, r2
 8012120:	42ab      	cmp	r3, r5
 8012122:	dc26      	bgt.n	8012172 <_printf_common+0x96>
 8012124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012128:	1e13      	subs	r3, r2, #0
 801212a:	6822      	ldr	r2, [r4, #0]
 801212c:	bf18      	it	ne
 801212e:	2301      	movne	r3, #1
 8012130:	0692      	lsls	r2, r2, #26
 8012132:	d42b      	bmi.n	801218c <_printf_common+0xb0>
 8012134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012138:	4649      	mov	r1, r9
 801213a:	4638      	mov	r0, r7
 801213c:	47c0      	blx	r8
 801213e:	3001      	adds	r0, #1
 8012140:	d01e      	beq.n	8012180 <_printf_common+0xa4>
 8012142:	6823      	ldr	r3, [r4, #0]
 8012144:	68e5      	ldr	r5, [r4, #12]
 8012146:	6832      	ldr	r2, [r6, #0]
 8012148:	f003 0306 	and.w	r3, r3, #6
 801214c:	2b04      	cmp	r3, #4
 801214e:	bf08      	it	eq
 8012150:	1aad      	subeq	r5, r5, r2
 8012152:	68a3      	ldr	r3, [r4, #8]
 8012154:	6922      	ldr	r2, [r4, #16]
 8012156:	bf0c      	ite	eq
 8012158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801215c:	2500      	movne	r5, #0
 801215e:	4293      	cmp	r3, r2
 8012160:	bfc4      	itt	gt
 8012162:	1a9b      	subgt	r3, r3, r2
 8012164:	18ed      	addgt	r5, r5, r3
 8012166:	2600      	movs	r6, #0
 8012168:	341a      	adds	r4, #26
 801216a:	42b5      	cmp	r5, r6
 801216c:	d11a      	bne.n	80121a4 <_printf_common+0xc8>
 801216e:	2000      	movs	r0, #0
 8012170:	e008      	b.n	8012184 <_printf_common+0xa8>
 8012172:	2301      	movs	r3, #1
 8012174:	4652      	mov	r2, sl
 8012176:	4649      	mov	r1, r9
 8012178:	4638      	mov	r0, r7
 801217a:	47c0      	blx	r8
 801217c:	3001      	adds	r0, #1
 801217e:	d103      	bne.n	8012188 <_printf_common+0xac>
 8012180:	f04f 30ff 	mov.w	r0, #4294967295
 8012184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012188:	3501      	adds	r5, #1
 801218a:	e7c6      	b.n	801211a <_printf_common+0x3e>
 801218c:	18e1      	adds	r1, r4, r3
 801218e:	1c5a      	adds	r2, r3, #1
 8012190:	2030      	movs	r0, #48	; 0x30
 8012192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012196:	4422      	add	r2, r4
 8012198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801219c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80121a0:	3302      	adds	r3, #2
 80121a2:	e7c7      	b.n	8012134 <_printf_common+0x58>
 80121a4:	2301      	movs	r3, #1
 80121a6:	4622      	mov	r2, r4
 80121a8:	4649      	mov	r1, r9
 80121aa:	4638      	mov	r0, r7
 80121ac:	47c0      	blx	r8
 80121ae:	3001      	adds	r0, #1
 80121b0:	d0e6      	beq.n	8012180 <_printf_common+0xa4>
 80121b2:	3601      	adds	r6, #1
 80121b4:	e7d9      	b.n	801216a <_printf_common+0x8e>
	...

080121b8 <_printf_i>:
 80121b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121bc:	7e0f      	ldrb	r7, [r1, #24]
 80121be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121c0:	2f78      	cmp	r7, #120	; 0x78
 80121c2:	4691      	mov	r9, r2
 80121c4:	4680      	mov	r8, r0
 80121c6:	460c      	mov	r4, r1
 80121c8:	469a      	mov	sl, r3
 80121ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80121ce:	d807      	bhi.n	80121e0 <_printf_i+0x28>
 80121d0:	2f62      	cmp	r7, #98	; 0x62
 80121d2:	d80a      	bhi.n	80121ea <_printf_i+0x32>
 80121d4:	2f00      	cmp	r7, #0
 80121d6:	f000 80d8 	beq.w	801238a <_printf_i+0x1d2>
 80121da:	2f58      	cmp	r7, #88	; 0x58
 80121dc:	f000 80a3 	beq.w	8012326 <_printf_i+0x16e>
 80121e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121e8:	e03a      	b.n	8012260 <_printf_i+0xa8>
 80121ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121ee:	2b15      	cmp	r3, #21
 80121f0:	d8f6      	bhi.n	80121e0 <_printf_i+0x28>
 80121f2:	a101      	add	r1, pc, #4	; (adr r1, 80121f8 <_printf_i+0x40>)
 80121f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121f8:	08012251 	.word	0x08012251
 80121fc:	08012265 	.word	0x08012265
 8012200:	080121e1 	.word	0x080121e1
 8012204:	080121e1 	.word	0x080121e1
 8012208:	080121e1 	.word	0x080121e1
 801220c:	080121e1 	.word	0x080121e1
 8012210:	08012265 	.word	0x08012265
 8012214:	080121e1 	.word	0x080121e1
 8012218:	080121e1 	.word	0x080121e1
 801221c:	080121e1 	.word	0x080121e1
 8012220:	080121e1 	.word	0x080121e1
 8012224:	08012371 	.word	0x08012371
 8012228:	08012295 	.word	0x08012295
 801222c:	08012353 	.word	0x08012353
 8012230:	080121e1 	.word	0x080121e1
 8012234:	080121e1 	.word	0x080121e1
 8012238:	08012393 	.word	0x08012393
 801223c:	080121e1 	.word	0x080121e1
 8012240:	08012295 	.word	0x08012295
 8012244:	080121e1 	.word	0x080121e1
 8012248:	080121e1 	.word	0x080121e1
 801224c:	0801235b 	.word	0x0801235b
 8012250:	682b      	ldr	r3, [r5, #0]
 8012252:	1d1a      	adds	r2, r3, #4
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	602a      	str	r2, [r5, #0]
 8012258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801225c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012260:	2301      	movs	r3, #1
 8012262:	e0a3      	b.n	80123ac <_printf_i+0x1f4>
 8012264:	6820      	ldr	r0, [r4, #0]
 8012266:	6829      	ldr	r1, [r5, #0]
 8012268:	0606      	lsls	r6, r0, #24
 801226a:	f101 0304 	add.w	r3, r1, #4
 801226e:	d50a      	bpl.n	8012286 <_printf_i+0xce>
 8012270:	680e      	ldr	r6, [r1, #0]
 8012272:	602b      	str	r3, [r5, #0]
 8012274:	2e00      	cmp	r6, #0
 8012276:	da03      	bge.n	8012280 <_printf_i+0xc8>
 8012278:	232d      	movs	r3, #45	; 0x2d
 801227a:	4276      	negs	r6, r6
 801227c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012280:	485e      	ldr	r0, [pc, #376]	; (80123fc <_printf_i+0x244>)
 8012282:	230a      	movs	r3, #10
 8012284:	e019      	b.n	80122ba <_printf_i+0x102>
 8012286:	680e      	ldr	r6, [r1, #0]
 8012288:	602b      	str	r3, [r5, #0]
 801228a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801228e:	bf18      	it	ne
 8012290:	b236      	sxthne	r6, r6
 8012292:	e7ef      	b.n	8012274 <_printf_i+0xbc>
 8012294:	682b      	ldr	r3, [r5, #0]
 8012296:	6820      	ldr	r0, [r4, #0]
 8012298:	1d19      	adds	r1, r3, #4
 801229a:	6029      	str	r1, [r5, #0]
 801229c:	0601      	lsls	r1, r0, #24
 801229e:	d501      	bpl.n	80122a4 <_printf_i+0xec>
 80122a0:	681e      	ldr	r6, [r3, #0]
 80122a2:	e002      	b.n	80122aa <_printf_i+0xf2>
 80122a4:	0646      	lsls	r6, r0, #25
 80122a6:	d5fb      	bpl.n	80122a0 <_printf_i+0xe8>
 80122a8:	881e      	ldrh	r6, [r3, #0]
 80122aa:	4854      	ldr	r0, [pc, #336]	; (80123fc <_printf_i+0x244>)
 80122ac:	2f6f      	cmp	r7, #111	; 0x6f
 80122ae:	bf0c      	ite	eq
 80122b0:	2308      	moveq	r3, #8
 80122b2:	230a      	movne	r3, #10
 80122b4:	2100      	movs	r1, #0
 80122b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80122ba:	6865      	ldr	r5, [r4, #4]
 80122bc:	60a5      	str	r5, [r4, #8]
 80122be:	2d00      	cmp	r5, #0
 80122c0:	bfa2      	ittt	ge
 80122c2:	6821      	ldrge	r1, [r4, #0]
 80122c4:	f021 0104 	bicge.w	r1, r1, #4
 80122c8:	6021      	strge	r1, [r4, #0]
 80122ca:	b90e      	cbnz	r6, 80122d0 <_printf_i+0x118>
 80122cc:	2d00      	cmp	r5, #0
 80122ce:	d04d      	beq.n	801236c <_printf_i+0x1b4>
 80122d0:	4615      	mov	r5, r2
 80122d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80122d6:	fb03 6711 	mls	r7, r3, r1, r6
 80122da:	5dc7      	ldrb	r7, [r0, r7]
 80122dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80122e0:	4637      	mov	r7, r6
 80122e2:	42bb      	cmp	r3, r7
 80122e4:	460e      	mov	r6, r1
 80122e6:	d9f4      	bls.n	80122d2 <_printf_i+0x11a>
 80122e8:	2b08      	cmp	r3, #8
 80122ea:	d10b      	bne.n	8012304 <_printf_i+0x14c>
 80122ec:	6823      	ldr	r3, [r4, #0]
 80122ee:	07de      	lsls	r6, r3, #31
 80122f0:	d508      	bpl.n	8012304 <_printf_i+0x14c>
 80122f2:	6923      	ldr	r3, [r4, #16]
 80122f4:	6861      	ldr	r1, [r4, #4]
 80122f6:	4299      	cmp	r1, r3
 80122f8:	bfde      	ittt	le
 80122fa:	2330      	movle	r3, #48	; 0x30
 80122fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012304:	1b52      	subs	r2, r2, r5
 8012306:	6122      	str	r2, [r4, #16]
 8012308:	f8cd a000 	str.w	sl, [sp]
 801230c:	464b      	mov	r3, r9
 801230e:	aa03      	add	r2, sp, #12
 8012310:	4621      	mov	r1, r4
 8012312:	4640      	mov	r0, r8
 8012314:	f7ff fee2 	bl	80120dc <_printf_common>
 8012318:	3001      	adds	r0, #1
 801231a:	d14c      	bne.n	80123b6 <_printf_i+0x1fe>
 801231c:	f04f 30ff 	mov.w	r0, #4294967295
 8012320:	b004      	add	sp, #16
 8012322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012326:	4835      	ldr	r0, [pc, #212]	; (80123fc <_printf_i+0x244>)
 8012328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801232c:	6829      	ldr	r1, [r5, #0]
 801232e:	6823      	ldr	r3, [r4, #0]
 8012330:	f851 6b04 	ldr.w	r6, [r1], #4
 8012334:	6029      	str	r1, [r5, #0]
 8012336:	061d      	lsls	r5, r3, #24
 8012338:	d514      	bpl.n	8012364 <_printf_i+0x1ac>
 801233a:	07df      	lsls	r7, r3, #31
 801233c:	bf44      	itt	mi
 801233e:	f043 0320 	orrmi.w	r3, r3, #32
 8012342:	6023      	strmi	r3, [r4, #0]
 8012344:	b91e      	cbnz	r6, 801234e <_printf_i+0x196>
 8012346:	6823      	ldr	r3, [r4, #0]
 8012348:	f023 0320 	bic.w	r3, r3, #32
 801234c:	6023      	str	r3, [r4, #0]
 801234e:	2310      	movs	r3, #16
 8012350:	e7b0      	b.n	80122b4 <_printf_i+0xfc>
 8012352:	6823      	ldr	r3, [r4, #0]
 8012354:	f043 0320 	orr.w	r3, r3, #32
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	2378      	movs	r3, #120	; 0x78
 801235c:	4828      	ldr	r0, [pc, #160]	; (8012400 <_printf_i+0x248>)
 801235e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012362:	e7e3      	b.n	801232c <_printf_i+0x174>
 8012364:	0659      	lsls	r1, r3, #25
 8012366:	bf48      	it	mi
 8012368:	b2b6      	uxthmi	r6, r6
 801236a:	e7e6      	b.n	801233a <_printf_i+0x182>
 801236c:	4615      	mov	r5, r2
 801236e:	e7bb      	b.n	80122e8 <_printf_i+0x130>
 8012370:	682b      	ldr	r3, [r5, #0]
 8012372:	6826      	ldr	r6, [r4, #0]
 8012374:	6961      	ldr	r1, [r4, #20]
 8012376:	1d18      	adds	r0, r3, #4
 8012378:	6028      	str	r0, [r5, #0]
 801237a:	0635      	lsls	r5, r6, #24
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	d501      	bpl.n	8012384 <_printf_i+0x1cc>
 8012380:	6019      	str	r1, [r3, #0]
 8012382:	e002      	b.n	801238a <_printf_i+0x1d2>
 8012384:	0670      	lsls	r0, r6, #25
 8012386:	d5fb      	bpl.n	8012380 <_printf_i+0x1c8>
 8012388:	8019      	strh	r1, [r3, #0]
 801238a:	2300      	movs	r3, #0
 801238c:	6123      	str	r3, [r4, #16]
 801238e:	4615      	mov	r5, r2
 8012390:	e7ba      	b.n	8012308 <_printf_i+0x150>
 8012392:	682b      	ldr	r3, [r5, #0]
 8012394:	1d1a      	adds	r2, r3, #4
 8012396:	602a      	str	r2, [r5, #0]
 8012398:	681d      	ldr	r5, [r3, #0]
 801239a:	6862      	ldr	r2, [r4, #4]
 801239c:	2100      	movs	r1, #0
 801239e:	4628      	mov	r0, r5
 80123a0:	f7ed fef6 	bl	8000190 <memchr>
 80123a4:	b108      	cbz	r0, 80123aa <_printf_i+0x1f2>
 80123a6:	1b40      	subs	r0, r0, r5
 80123a8:	6060      	str	r0, [r4, #4]
 80123aa:	6863      	ldr	r3, [r4, #4]
 80123ac:	6123      	str	r3, [r4, #16]
 80123ae:	2300      	movs	r3, #0
 80123b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123b4:	e7a8      	b.n	8012308 <_printf_i+0x150>
 80123b6:	6923      	ldr	r3, [r4, #16]
 80123b8:	462a      	mov	r2, r5
 80123ba:	4649      	mov	r1, r9
 80123bc:	4640      	mov	r0, r8
 80123be:	47d0      	blx	sl
 80123c0:	3001      	adds	r0, #1
 80123c2:	d0ab      	beq.n	801231c <_printf_i+0x164>
 80123c4:	6823      	ldr	r3, [r4, #0]
 80123c6:	079b      	lsls	r3, r3, #30
 80123c8:	d413      	bmi.n	80123f2 <_printf_i+0x23a>
 80123ca:	68e0      	ldr	r0, [r4, #12]
 80123cc:	9b03      	ldr	r3, [sp, #12]
 80123ce:	4298      	cmp	r0, r3
 80123d0:	bfb8      	it	lt
 80123d2:	4618      	movlt	r0, r3
 80123d4:	e7a4      	b.n	8012320 <_printf_i+0x168>
 80123d6:	2301      	movs	r3, #1
 80123d8:	4632      	mov	r2, r6
 80123da:	4649      	mov	r1, r9
 80123dc:	4640      	mov	r0, r8
 80123de:	47d0      	blx	sl
 80123e0:	3001      	adds	r0, #1
 80123e2:	d09b      	beq.n	801231c <_printf_i+0x164>
 80123e4:	3501      	adds	r5, #1
 80123e6:	68e3      	ldr	r3, [r4, #12]
 80123e8:	9903      	ldr	r1, [sp, #12]
 80123ea:	1a5b      	subs	r3, r3, r1
 80123ec:	42ab      	cmp	r3, r5
 80123ee:	dcf2      	bgt.n	80123d6 <_printf_i+0x21e>
 80123f0:	e7eb      	b.n	80123ca <_printf_i+0x212>
 80123f2:	2500      	movs	r5, #0
 80123f4:	f104 0619 	add.w	r6, r4, #25
 80123f8:	e7f5      	b.n	80123e6 <_printf_i+0x22e>
 80123fa:	bf00      	nop
 80123fc:	0801518a 	.word	0x0801518a
 8012400:	0801519b 	.word	0x0801519b

08012404 <_sbrk_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d06      	ldr	r5, [pc, #24]	; (8012420 <_sbrk_r+0x1c>)
 8012408:	2300      	movs	r3, #0
 801240a:	4604      	mov	r4, r0
 801240c:	4608      	mov	r0, r1
 801240e:	602b      	str	r3, [r5, #0]
 8012410:	f7ef ff18 	bl	8002244 <_sbrk>
 8012414:	1c43      	adds	r3, r0, #1
 8012416:	d102      	bne.n	801241e <_sbrk_r+0x1a>
 8012418:	682b      	ldr	r3, [r5, #0]
 801241a:	b103      	cbz	r3, 801241e <_sbrk_r+0x1a>
 801241c:	6023      	str	r3, [r4, #0]
 801241e:	bd38      	pop	{r3, r4, r5, pc}
 8012420:	200020c8 	.word	0x200020c8

08012424 <sniprintf>:
 8012424:	b40c      	push	{r2, r3}
 8012426:	b530      	push	{r4, r5, lr}
 8012428:	4b17      	ldr	r3, [pc, #92]	; (8012488 <sniprintf+0x64>)
 801242a:	1e0c      	subs	r4, r1, #0
 801242c:	681d      	ldr	r5, [r3, #0]
 801242e:	b09d      	sub	sp, #116	; 0x74
 8012430:	da08      	bge.n	8012444 <sniprintf+0x20>
 8012432:	238b      	movs	r3, #139	; 0x8b
 8012434:	602b      	str	r3, [r5, #0]
 8012436:	f04f 30ff 	mov.w	r0, #4294967295
 801243a:	b01d      	add	sp, #116	; 0x74
 801243c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012440:	b002      	add	sp, #8
 8012442:	4770      	bx	lr
 8012444:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012448:	f8ad 3014 	strh.w	r3, [sp, #20]
 801244c:	bf14      	ite	ne
 801244e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012452:	4623      	moveq	r3, r4
 8012454:	9304      	str	r3, [sp, #16]
 8012456:	9307      	str	r3, [sp, #28]
 8012458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801245c:	9002      	str	r0, [sp, #8]
 801245e:	9006      	str	r0, [sp, #24]
 8012460:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012464:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012466:	ab21      	add	r3, sp, #132	; 0x84
 8012468:	a902      	add	r1, sp, #8
 801246a:	4628      	mov	r0, r5
 801246c:	9301      	str	r3, [sp, #4]
 801246e:	f001 fd7f 	bl	8013f70 <_svfiprintf_r>
 8012472:	1c43      	adds	r3, r0, #1
 8012474:	bfbc      	itt	lt
 8012476:	238b      	movlt	r3, #139	; 0x8b
 8012478:	602b      	strlt	r3, [r5, #0]
 801247a:	2c00      	cmp	r4, #0
 801247c:	d0dd      	beq.n	801243a <sniprintf+0x16>
 801247e:	9b02      	ldr	r3, [sp, #8]
 8012480:	2200      	movs	r2, #0
 8012482:	701a      	strb	r2, [r3, #0]
 8012484:	e7d9      	b.n	801243a <sniprintf+0x16>
 8012486:	bf00      	nop
 8012488:	20000284 	.word	0x20000284

0801248c <siprintf>:
 801248c:	b40e      	push	{r1, r2, r3}
 801248e:	b500      	push	{lr}
 8012490:	b09c      	sub	sp, #112	; 0x70
 8012492:	ab1d      	add	r3, sp, #116	; 0x74
 8012494:	9002      	str	r0, [sp, #8]
 8012496:	9006      	str	r0, [sp, #24]
 8012498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801249c:	4809      	ldr	r0, [pc, #36]	; (80124c4 <siprintf+0x38>)
 801249e:	9107      	str	r1, [sp, #28]
 80124a0:	9104      	str	r1, [sp, #16]
 80124a2:	4909      	ldr	r1, [pc, #36]	; (80124c8 <siprintf+0x3c>)
 80124a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80124a8:	9105      	str	r1, [sp, #20]
 80124aa:	6800      	ldr	r0, [r0, #0]
 80124ac:	9301      	str	r3, [sp, #4]
 80124ae:	a902      	add	r1, sp, #8
 80124b0:	f001 fd5e 	bl	8013f70 <_svfiprintf_r>
 80124b4:	9b02      	ldr	r3, [sp, #8]
 80124b6:	2200      	movs	r2, #0
 80124b8:	701a      	strb	r2, [r3, #0]
 80124ba:	b01c      	add	sp, #112	; 0x70
 80124bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80124c0:	b003      	add	sp, #12
 80124c2:	4770      	bx	lr
 80124c4:	20000284 	.word	0x20000284
 80124c8:	ffff0208 	.word	0xffff0208

080124cc <__swbuf_r>:
 80124cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ce:	460e      	mov	r6, r1
 80124d0:	4614      	mov	r4, r2
 80124d2:	4605      	mov	r5, r0
 80124d4:	b118      	cbz	r0, 80124de <__swbuf_r+0x12>
 80124d6:	6983      	ldr	r3, [r0, #24]
 80124d8:	b90b      	cbnz	r3, 80124de <__swbuf_r+0x12>
 80124da:	f001 f845 	bl	8013568 <__sinit>
 80124de:	4b21      	ldr	r3, [pc, #132]	; (8012564 <__swbuf_r+0x98>)
 80124e0:	429c      	cmp	r4, r3
 80124e2:	d12b      	bne.n	801253c <__swbuf_r+0x70>
 80124e4:	686c      	ldr	r4, [r5, #4]
 80124e6:	69a3      	ldr	r3, [r4, #24]
 80124e8:	60a3      	str	r3, [r4, #8]
 80124ea:	89a3      	ldrh	r3, [r4, #12]
 80124ec:	071a      	lsls	r2, r3, #28
 80124ee:	d52f      	bpl.n	8012550 <__swbuf_r+0x84>
 80124f0:	6923      	ldr	r3, [r4, #16]
 80124f2:	b36b      	cbz	r3, 8012550 <__swbuf_r+0x84>
 80124f4:	6923      	ldr	r3, [r4, #16]
 80124f6:	6820      	ldr	r0, [r4, #0]
 80124f8:	1ac0      	subs	r0, r0, r3
 80124fa:	6963      	ldr	r3, [r4, #20]
 80124fc:	b2f6      	uxtb	r6, r6
 80124fe:	4283      	cmp	r3, r0
 8012500:	4637      	mov	r7, r6
 8012502:	dc04      	bgt.n	801250e <__swbuf_r+0x42>
 8012504:	4621      	mov	r1, r4
 8012506:	4628      	mov	r0, r5
 8012508:	f000 ff9a 	bl	8013440 <_fflush_r>
 801250c:	bb30      	cbnz	r0, 801255c <__swbuf_r+0x90>
 801250e:	68a3      	ldr	r3, [r4, #8]
 8012510:	3b01      	subs	r3, #1
 8012512:	60a3      	str	r3, [r4, #8]
 8012514:	6823      	ldr	r3, [r4, #0]
 8012516:	1c5a      	adds	r2, r3, #1
 8012518:	6022      	str	r2, [r4, #0]
 801251a:	701e      	strb	r6, [r3, #0]
 801251c:	6963      	ldr	r3, [r4, #20]
 801251e:	3001      	adds	r0, #1
 8012520:	4283      	cmp	r3, r0
 8012522:	d004      	beq.n	801252e <__swbuf_r+0x62>
 8012524:	89a3      	ldrh	r3, [r4, #12]
 8012526:	07db      	lsls	r3, r3, #31
 8012528:	d506      	bpl.n	8012538 <__swbuf_r+0x6c>
 801252a:	2e0a      	cmp	r6, #10
 801252c:	d104      	bne.n	8012538 <__swbuf_r+0x6c>
 801252e:	4621      	mov	r1, r4
 8012530:	4628      	mov	r0, r5
 8012532:	f000 ff85 	bl	8013440 <_fflush_r>
 8012536:	b988      	cbnz	r0, 801255c <__swbuf_r+0x90>
 8012538:	4638      	mov	r0, r7
 801253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801253c:	4b0a      	ldr	r3, [pc, #40]	; (8012568 <__swbuf_r+0x9c>)
 801253e:	429c      	cmp	r4, r3
 8012540:	d101      	bne.n	8012546 <__swbuf_r+0x7a>
 8012542:	68ac      	ldr	r4, [r5, #8]
 8012544:	e7cf      	b.n	80124e6 <__swbuf_r+0x1a>
 8012546:	4b09      	ldr	r3, [pc, #36]	; (801256c <__swbuf_r+0xa0>)
 8012548:	429c      	cmp	r4, r3
 801254a:	bf08      	it	eq
 801254c:	68ec      	ldreq	r4, [r5, #12]
 801254e:	e7ca      	b.n	80124e6 <__swbuf_r+0x1a>
 8012550:	4621      	mov	r1, r4
 8012552:	4628      	mov	r0, r5
 8012554:	f000 f80c 	bl	8012570 <__swsetup_r>
 8012558:	2800      	cmp	r0, #0
 801255a:	d0cb      	beq.n	80124f4 <__swbuf_r+0x28>
 801255c:	f04f 37ff 	mov.w	r7, #4294967295
 8012560:	e7ea      	b.n	8012538 <__swbuf_r+0x6c>
 8012562:	bf00      	nop
 8012564:	0801525c 	.word	0x0801525c
 8012568:	0801527c 	.word	0x0801527c
 801256c:	0801523c 	.word	0x0801523c

08012570 <__swsetup_r>:
 8012570:	4b32      	ldr	r3, [pc, #200]	; (801263c <__swsetup_r+0xcc>)
 8012572:	b570      	push	{r4, r5, r6, lr}
 8012574:	681d      	ldr	r5, [r3, #0]
 8012576:	4606      	mov	r6, r0
 8012578:	460c      	mov	r4, r1
 801257a:	b125      	cbz	r5, 8012586 <__swsetup_r+0x16>
 801257c:	69ab      	ldr	r3, [r5, #24]
 801257e:	b913      	cbnz	r3, 8012586 <__swsetup_r+0x16>
 8012580:	4628      	mov	r0, r5
 8012582:	f000 fff1 	bl	8013568 <__sinit>
 8012586:	4b2e      	ldr	r3, [pc, #184]	; (8012640 <__swsetup_r+0xd0>)
 8012588:	429c      	cmp	r4, r3
 801258a:	d10f      	bne.n	80125ac <__swsetup_r+0x3c>
 801258c:	686c      	ldr	r4, [r5, #4]
 801258e:	89a3      	ldrh	r3, [r4, #12]
 8012590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012594:	0719      	lsls	r1, r3, #28
 8012596:	d42c      	bmi.n	80125f2 <__swsetup_r+0x82>
 8012598:	06dd      	lsls	r5, r3, #27
 801259a:	d411      	bmi.n	80125c0 <__swsetup_r+0x50>
 801259c:	2309      	movs	r3, #9
 801259e:	6033      	str	r3, [r6, #0]
 80125a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80125a4:	81a3      	strh	r3, [r4, #12]
 80125a6:	f04f 30ff 	mov.w	r0, #4294967295
 80125aa:	e03e      	b.n	801262a <__swsetup_r+0xba>
 80125ac:	4b25      	ldr	r3, [pc, #148]	; (8012644 <__swsetup_r+0xd4>)
 80125ae:	429c      	cmp	r4, r3
 80125b0:	d101      	bne.n	80125b6 <__swsetup_r+0x46>
 80125b2:	68ac      	ldr	r4, [r5, #8]
 80125b4:	e7eb      	b.n	801258e <__swsetup_r+0x1e>
 80125b6:	4b24      	ldr	r3, [pc, #144]	; (8012648 <__swsetup_r+0xd8>)
 80125b8:	429c      	cmp	r4, r3
 80125ba:	bf08      	it	eq
 80125bc:	68ec      	ldreq	r4, [r5, #12]
 80125be:	e7e6      	b.n	801258e <__swsetup_r+0x1e>
 80125c0:	0758      	lsls	r0, r3, #29
 80125c2:	d512      	bpl.n	80125ea <__swsetup_r+0x7a>
 80125c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125c6:	b141      	cbz	r1, 80125da <__swsetup_r+0x6a>
 80125c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125cc:	4299      	cmp	r1, r3
 80125ce:	d002      	beq.n	80125d6 <__swsetup_r+0x66>
 80125d0:	4630      	mov	r0, r6
 80125d2:	f7ff f9dd 	bl	8011990 <_free_r>
 80125d6:	2300      	movs	r3, #0
 80125d8:	6363      	str	r3, [r4, #52]	; 0x34
 80125da:	89a3      	ldrh	r3, [r4, #12]
 80125dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80125e0:	81a3      	strh	r3, [r4, #12]
 80125e2:	2300      	movs	r3, #0
 80125e4:	6063      	str	r3, [r4, #4]
 80125e6:	6923      	ldr	r3, [r4, #16]
 80125e8:	6023      	str	r3, [r4, #0]
 80125ea:	89a3      	ldrh	r3, [r4, #12]
 80125ec:	f043 0308 	orr.w	r3, r3, #8
 80125f0:	81a3      	strh	r3, [r4, #12]
 80125f2:	6923      	ldr	r3, [r4, #16]
 80125f4:	b94b      	cbnz	r3, 801260a <__swsetup_r+0x9a>
 80125f6:	89a3      	ldrh	r3, [r4, #12]
 80125f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80125fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012600:	d003      	beq.n	801260a <__swsetup_r+0x9a>
 8012602:	4621      	mov	r1, r4
 8012604:	4630      	mov	r0, r6
 8012606:	f001 f879 	bl	80136fc <__smakebuf_r>
 801260a:	89a0      	ldrh	r0, [r4, #12]
 801260c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012610:	f010 0301 	ands.w	r3, r0, #1
 8012614:	d00a      	beq.n	801262c <__swsetup_r+0xbc>
 8012616:	2300      	movs	r3, #0
 8012618:	60a3      	str	r3, [r4, #8]
 801261a:	6963      	ldr	r3, [r4, #20]
 801261c:	425b      	negs	r3, r3
 801261e:	61a3      	str	r3, [r4, #24]
 8012620:	6923      	ldr	r3, [r4, #16]
 8012622:	b943      	cbnz	r3, 8012636 <__swsetup_r+0xc6>
 8012624:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012628:	d1ba      	bne.n	80125a0 <__swsetup_r+0x30>
 801262a:	bd70      	pop	{r4, r5, r6, pc}
 801262c:	0781      	lsls	r1, r0, #30
 801262e:	bf58      	it	pl
 8012630:	6963      	ldrpl	r3, [r4, #20]
 8012632:	60a3      	str	r3, [r4, #8]
 8012634:	e7f4      	b.n	8012620 <__swsetup_r+0xb0>
 8012636:	2000      	movs	r0, #0
 8012638:	e7f7      	b.n	801262a <__swsetup_r+0xba>
 801263a:	bf00      	nop
 801263c:	20000284 	.word	0x20000284
 8012640:	0801525c 	.word	0x0801525c
 8012644:	0801527c 	.word	0x0801527c
 8012648:	0801523c 	.word	0x0801523c

0801264c <quorem>:
 801264c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012650:	6903      	ldr	r3, [r0, #16]
 8012652:	690c      	ldr	r4, [r1, #16]
 8012654:	42a3      	cmp	r3, r4
 8012656:	4607      	mov	r7, r0
 8012658:	db7d      	blt.n	8012756 <quorem+0x10a>
 801265a:	3c01      	subs	r4, #1
 801265c:	f101 0814 	add.w	r8, r1, #20
 8012660:	f100 0514 	add.w	r5, r0, #20
 8012664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012668:	9301      	str	r3, [sp, #4]
 801266a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801266e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012672:	3301      	adds	r3, #1
 8012674:	429a      	cmp	r2, r3
 8012676:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801267a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801267e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012682:	d32e      	bcc.n	80126e2 <quorem+0x96>
 8012684:	f04f 0e00 	mov.w	lr, #0
 8012688:	4640      	mov	r0, r8
 801268a:	46ac      	mov	ip, r5
 801268c:	46f2      	mov	sl, lr
 801268e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012692:	b293      	uxth	r3, r2
 8012694:	fb06 e303 	mla	r3, r6, r3, lr
 8012698:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801269c:	0c12      	lsrs	r2, r2, #16
 801269e:	b29b      	uxth	r3, r3
 80126a0:	fb06 e202 	mla	r2, r6, r2, lr
 80126a4:	ebaa 0303 	sub.w	r3, sl, r3
 80126a8:	f8dc a000 	ldr.w	sl, [ip]
 80126ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80126b0:	b292      	uxth	r2, r2
 80126b2:	fa13 f38a 	uxtah	r3, r3, sl
 80126b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80126ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126be:	b29b      	uxth	r3, r3
 80126c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126c4:	4581      	cmp	r9, r0
 80126c6:	f84c 3b04 	str.w	r3, [ip], #4
 80126ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80126ce:	d2de      	bcs.n	801268e <quorem+0x42>
 80126d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80126d4:	b92b      	cbnz	r3, 80126e2 <quorem+0x96>
 80126d6:	9b01      	ldr	r3, [sp, #4]
 80126d8:	3b04      	subs	r3, #4
 80126da:	429d      	cmp	r5, r3
 80126dc:	461a      	mov	r2, r3
 80126de:	d32e      	bcc.n	801273e <quorem+0xf2>
 80126e0:	613c      	str	r4, [r7, #16]
 80126e2:	4638      	mov	r0, r7
 80126e4:	f001 fad4 	bl	8013c90 <__mcmp>
 80126e8:	2800      	cmp	r0, #0
 80126ea:	db24      	blt.n	8012736 <quorem+0xea>
 80126ec:	3601      	adds	r6, #1
 80126ee:	4628      	mov	r0, r5
 80126f0:	f04f 0c00 	mov.w	ip, #0
 80126f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80126f8:	f8d0 e000 	ldr.w	lr, [r0]
 80126fc:	b293      	uxth	r3, r2
 80126fe:	ebac 0303 	sub.w	r3, ip, r3
 8012702:	0c12      	lsrs	r2, r2, #16
 8012704:	fa13 f38e 	uxtah	r3, r3, lr
 8012708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801270c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012710:	b29b      	uxth	r3, r3
 8012712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012716:	45c1      	cmp	r9, r8
 8012718:	f840 3b04 	str.w	r3, [r0], #4
 801271c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012720:	d2e8      	bcs.n	80126f4 <quorem+0xa8>
 8012722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801272a:	b922      	cbnz	r2, 8012736 <quorem+0xea>
 801272c:	3b04      	subs	r3, #4
 801272e:	429d      	cmp	r5, r3
 8012730:	461a      	mov	r2, r3
 8012732:	d30a      	bcc.n	801274a <quorem+0xfe>
 8012734:	613c      	str	r4, [r7, #16]
 8012736:	4630      	mov	r0, r6
 8012738:	b003      	add	sp, #12
 801273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273e:	6812      	ldr	r2, [r2, #0]
 8012740:	3b04      	subs	r3, #4
 8012742:	2a00      	cmp	r2, #0
 8012744:	d1cc      	bne.n	80126e0 <quorem+0x94>
 8012746:	3c01      	subs	r4, #1
 8012748:	e7c7      	b.n	80126da <quorem+0x8e>
 801274a:	6812      	ldr	r2, [r2, #0]
 801274c:	3b04      	subs	r3, #4
 801274e:	2a00      	cmp	r2, #0
 8012750:	d1f0      	bne.n	8012734 <quorem+0xe8>
 8012752:	3c01      	subs	r4, #1
 8012754:	e7eb      	b.n	801272e <quorem+0xe2>
 8012756:	2000      	movs	r0, #0
 8012758:	e7ee      	b.n	8012738 <quorem+0xec>
 801275a:	0000      	movs	r0, r0
 801275c:	0000      	movs	r0, r0
	...

08012760 <_dtoa_r>:
 8012760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012764:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012766:	b099      	sub	sp, #100	; 0x64
 8012768:	4616      	mov	r6, r2
 801276a:	461f      	mov	r7, r3
 801276c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012770:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8012774:	4605      	mov	r5, r0
 8012776:	b974      	cbnz	r4, 8012796 <_dtoa_r+0x36>
 8012778:	2010      	movs	r0, #16
 801277a:	f7ff f8e3 	bl	8011944 <malloc>
 801277e:	4602      	mov	r2, r0
 8012780:	6268      	str	r0, [r5, #36]	; 0x24
 8012782:	b920      	cbnz	r0, 801278e <_dtoa_r+0x2e>
 8012784:	4ba8      	ldr	r3, [pc, #672]	; (8012a28 <_dtoa_r+0x2c8>)
 8012786:	21ea      	movs	r1, #234	; 0xea
 8012788:	48a8      	ldr	r0, [pc, #672]	; (8012a2c <_dtoa_r+0x2cc>)
 801278a:	f001 fe9f 	bl	80144cc <__assert_func>
 801278e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012792:	6004      	str	r4, [r0, #0]
 8012794:	60c4      	str	r4, [r0, #12]
 8012796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012798:	6819      	ldr	r1, [r3, #0]
 801279a:	b151      	cbz	r1, 80127b2 <_dtoa_r+0x52>
 801279c:	685a      	ldr	r2, [r3, #4]
 801279e:	604a      	str	r2, [r1, #4]
 80127a0:	2301      	movs	r3, #1
 80127a2:	4093      	lsls	r3, r2
 80127a4:	608b      	str	r3, [r1, #8]
 80127a6:	4628      	mov	r0, r5
 80127a8:	f001 f834 	bl	8013814 <_Bfree>
 80127ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127ae:	2200      	movs	r2, #0
 80127b0:	601a      	str	r2, [r3, #0]
 80127b2:	1e3b      	subs	r3, r7, #0
 80127b4:	bfb9      	ittee	lt
 80127b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80127ba:	9305      	strlt	r3, [sp, #20]
 80127bc:	2300      	movge	r3, #0
 80127be:	f8c8 3000 	strge.w	r3, [r8]
 80127c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80127c6:	4b9a      	ldr	r3, [pc, #616]	; (8012a30 <_dtoa_r+0x2d0>)
 80127c8:	bfbc      	itt	lt
 80127ca:	2201      	movlt	r2, #1
 80127cc:	f8c8 2000 	strlt.w	r2, [r8]
 80127d0:	ea33 0309 	bics.w	r3, r3, r9
 80127d4:	d119      	bne.n	801280a <_dtoa_r+0xaa>
 80127d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80127d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80127dc:	6013      	str	r3, [r2, #0]
 80127de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127e2:	4333      	orrs	r3, r6
 80127e4:	f000 8580 	beq.w	80132e8 <_dtoa_r+0xb88>
 80127e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80127ea:	b953      	cbnz	r3, 8012802 <_dtoa_r+0xa2>
 80127ec:	4b91      	ldr	r3, [pc, #580]	; (8012a34 <_dtoa_r+0x2d4>)
 80127ee:	e022      	b.n	8012836 <_dtoa_r+0xd6>
 80127f0:	4b91      	ldr	r3, [pc, #580]	; (8012a38 <_dtoa_r+0x2d8>)
 80127f2:	9303      	str	r3, [sp, #12]
 80127f4:	3308      	adds	r3, #8
 80127f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80127f8:	6013      	str	r3, [r2, #0]
 80127fa:	9803      	ldr	r0, [sp, #12]
 80127fc:	b019      	add	sp, #100	; 0x64
 80127fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012802:	4b8c      	ldr	r3, [pc, #560]	; (8012a34 <_dtoa_r+0x2d4>)
 8012804:	9303      	str	r3, [sp, #12]
 8012806:	3303      	adds	r3, #3
 8012808:	e7f5      	b.n	80127f6 <_dtoa_r+0x96>
 801280a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801280e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8012812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012816:	2200      	movs	r2, #0
 8012818:	2300      	movs	r3, #0
 801281a:	f7ee f92d 	bl	8000a78 <__aeabi_dcmpeq>
 801281e:	4680      	mov	r8, r0
 8012820:	b158      	cbz	r0, 801283a <_dtoa_r+0xda>
 8012822:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012824:	2301      	movs	r3, #1
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801282a:	2b00      	cmp	r3, #0
 801282c:	f000 8559 	beq.w	80132e2 <_dtoa_r+0xb82>
 8012830:	4882      	ldr	r0, [pc, #520]	; (8012a3c <_dtoa_r+0x2dc>)
 8012832:	6018      	str	r0, [r3, #0]
 8012834:	1e43      	subs	r3, r0, #1
 8012836:	9303      	str	r3, [sp, #12]
 8012838:	e7df      	b.n	80127fa <_dtoa_r+0x9a>
 801283a:	ab16      	add	r3, sp, #88	; 0x58
 801283c:	9301      	str	r3, [sp, #4]
 801283e:	ab17      	add	r3, sp, #92	; 0x5c
 8012840:	9300      	str	r3, [sp, #0]
 8012842:	4628      	mov	r0, r5
 8012844:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012848:	f001 fac6 	bl	8013dd8 <__d2b>
 801284c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012850:	4683      	mov	fp, r0
 8012852:	2c00      	cmp	r4, #0
 8012854:	d07e      	beq.n	8012954 <_dtoa_r+0x1f4>
 8012856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012858:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801285c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012864:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012868:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801286c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012870:	4b73      	ldr	r3, [pc, #460]	; (8012a40 <_dtoa_r+0x2e0>)
 8012872:	2200      	movs	r2, #0
 8012874:	f7ed fce0 	bl	8000238 <__aeabi_dsub>
 8012878:	a365      	add	r3, pc, #404	; (adr r3, 8012a10 <_dtoa_r+0x2b0>)
 801287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287e:	f7ed fe93 	bl	80005a8 <__aeabi_dmul>
 8012882:	a365      	add	r3, pc, #404	; (adr r3, 8012a18 <_dtoa_r+0x2b8>)
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	f7ed fcd8 	bl	800023c <__adddf3>
 801288c:	4606      	mov	r6, r0
 801288e:	4620      	mov	r0, r4
 8012890:	460f      	mov	r7, r1
 8012892:	f7ed fe1f 	bl	80004d4 <__aeabi_i2d>
 8012896:	a362      	add	r3, pc, #392	; (adr r3, 8012a20 <_dtoa_r+0x2c0>)
 8012898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289c:	f7ed fe84 	bl	80005a8 <__aeabi_dmul>
 80128a0:	4602      	mov	r2, r0
 80128a2:	460b      	mov	r3, r1
 80128a4:	4630      	mov	r0, r6
 80128a6:	4639      	mov	r1, r7
 80128a8:	f7ed fcc8 	bl	800023c <__adddf3>
 80128ac:	4606      	mov	r6, r0
 80128ae:	460f      	mov	r7, r1
 80128b0:	f7ee f92a 	bl	8000b08 <__aeabi_d2iz>
 80128b4:	2200      	movs	r2, #0
 80128b6:	4682      	mov	sl, r0
 80128b8:	2300      	movs	r3, #0
 80128ba:	4630      	mov	r0, r6
 80128bc:	4639      	mov	r1, r7
 80128be:	f7ee f8e5 	bl	8000a8c <__aeabi_dcmplt>
 80128c2:	b148      	cbz	r0, 80128d8 <_dtoa_r+0x178>
 80128c4:	4650      	mov	r0, sl
 80128c6:	f7ed fe05 	bl	80004d4 <__aeabi_i2d>
 80128ca:	4632      	mov	r2, r6
 80128cc:	463b      	mov	r3, r7
 80128ce:	f7ee f8d3 	bl	8000a78 <__aeabi_dcmpeq>
 80128d2:	b908      	cbnz	r0, 80128d8 <_dtoa_r+0x178>
 80128d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128d8:	f1ba 0f16 	cmp.w	sl, #22
 80128dc:	d857      	bhi.n	801298e <_dtoa_r+0x22e>
 80128de:	4b59      	ldr	r3, [pc, #356]	; (8012a44 <_dtoa_r+0x2e4>)
 80128e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80128e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80128ec:	f7ee f8ce 	bl	8000a8c <__aeabi_dcmplt>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d04e      	beq.n	8012992 <_dtoa_r+0x232>
 80128f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128f8:	2300      	movs	r3, #0
 80128fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80128fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80128fe:	1b1c      	subs	r4, r3, r4
 8012900:	1e63      	subs	r3, r4, #1
 8012902:	9309      	str	r3, [sp, #36]	; 0x24
 8012904:	bf45      	ittet	mi
 8012906:	f1c4 0301 	rsbmi	r3, r4, #1
 801290a:	9306      	strmi	r3, [sp, #24]
 801290c:	2300      	movpl	r3, #0
 801290e:	2300      	movmi	r3, #0
 8012910:	bf4c      	ite	mi
 8012912:	9309      	strmi	r3, [sp, #36]	; 0x24
 8012914:	9306      	strpl	r3, [sp, #24]
 8012916:	f1ba 0f00 	cmp.w	sl, #0
 801291a:	db3c      	blt.n	8012996 <_dtoa_r+0x236>
 801291c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801291e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012922:	4453      	add	r3, sl
 8012924:	9309      	str	r3, [sp, #36]	; 0x24
 8012926:	2300      	movs	r3, #0
 8012928:	930a      	str	r3, [sp, #40]	; 0x28
 801292a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801292c:	2b09      	cmp	r3, #9
 801292e:	f200 808d 	bhi.w	8012a4c <_dtoa_r+0x2ec>
 8012932:	2b05      	cmp	r3, #5
 8012934:	bfc4      	itt	gt
 8012936:	3b04      	subgt	r3, #4
 8012938:	9322      	strgt	r3, [sp, #136]	; 0x88
 801293a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801293c:	f1a3 0302 	sub.w	r3, r3, #2
 8012940:	bfcc      	ite	gt
 8012942:	2400      	movgt	r4, #0
 8012944:	2401      	movle	r4, #1
 8012946:	2b03      	cmp	r3, #3
 8012948:	f200 808c 	bhi.w	8012a64 <_dtoa_r+0x304>
 801294c:	e8df f003 	tbb	[pc, r3]
 8012950:	5b4d4f2d 	.word	0x5b4d4f2d
 8012954:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8012958:	441c      	add	r4, r3
 801295a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801295e:	2b20      	cmp	r3, #32
 8012960:	bfc3      	ittte	gt
 8012962:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012966:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801296a:	fa09 f303 	lslgt.w	r3, r9, r3
 801296e:	f1c3 0320 	rsble	r3, r3, #32
 8012972:	bfc6      	itte	gt
 8012974:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012978:	4318      	orrgt	r0, r3
 801297a:	fa06 f003 	lslle.w	r0, r6, r3
 801297e:	f7ed fd99 	bl	80004b4 <__aeabi_ui2d>
 8012982:	2301      	movs	r3, #1
 8012984:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012988:	3c01      	subs	r4, #1
 801298a:	9313      	str	r3, [sp, #76]	; 0x4c
 801298c:	e770      	b.n	8012870 <_dtoa_r+0x110>
 801298e:	2301      	movs	r3, #1
 8012990:	e7b3      	b.n	80128fa <_dtoa_r+0x19a>
 8012992:	900f      	str	r0, [sp, #60]	; 0x3c
 8012994:	e7b2      	b.n	80128fc <_dtoa_r+0x19c>
 8012996:	9b06      	ldr	r3, [sp, #24]
 8012998:	eba3 030a 	sub.w	r3, r3, sl
 801299c:	9306      	str	r3, [sp, #24]
 801299e:	f1ca 0300 	rsb	r3, sl, #0
 80129a2:	930a      	str	r3, [sp, #40]	; 0x28
 80129a4:	2300      	movs	r3, #0
 80129a6:	930e      	str	r3, [sp, #56]	; 0x38
 80129a8:	e7bf      	b.n	801292a <_dtoa_r+0x1ca>
 80129aa:	2300      	movs	r3, #0
 80129ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80129ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	dc5a      	bgt.n	8012a6a <_dtoa_r+0x30a>
 80129b4:	f04f 0901 	mov.w	r9, #1
 80129b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80129bc:	464b      	mov	r3, r9
 80129be:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80129c2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80129c4:	2200      	movs	r2, #0
 80129c6:	6042      	str	r2, [r0, #4]
 80129c8:	2204      	movs	r2, #4
 80129ca:	f102 0614 	add.w	r6, r2, #20
 80129ce:	429e      	cmp	r6, r3
 80129d0:	6841      	ldr	r1, [r0, #4]
 80129d2:	d950      	bls.n	8012a76 <_dtoa_r+0x316>
 80129d4:	4628      	mov	r0, r5
 80129d6:	f000 fedd 	bl	8013794 <_Balloc>
 80129da:	9003      	str	r0, [sp, #12]
 80129dc:	2800      	cmp	r0, #0
 80129de:	d14e      	bne.n	8012a7e <_dtoa_r+0x31e>
 80129e0:	4b19      	ldr	r3, [pc, #100]	; (8012a48 <_dtoa_r+0x2e8>)
 80129e2:	4602      	mov	r2, r0
 80129e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80129e8:	e6ce      	b.n	8012788 <_dtoa_r+0x28>
 80129ea:	2301      	movs	r3, #1
 80129ec:	e7de      	b.n	80129ac <_dtoa_r+0x24c>
 80129ee:	2300      	movs	r3, #0
 80129f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80129f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80129f4:	eb0a 0903 	add.w	r9, sl, r3
 80129f8:	f109 0301 	add.w	r3, r9, #1
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	9308      	str	r3, [sp, #32]
 8012a00:	bfb8      	it	lt
 8012a02:	2301      	movlt	r3, #1
 8012a04:	e7dd      	b.n	80129c2 <_dtoa_r+0x262>
 8012a06:	2301      	movs	r3, #1
 8012a08:	e7f2      	b.n	80129f0 <_dtoa_r+0x290>
 8012a0a:	bf00      	nop
 8012a0c:	f3af 8000 	nop.w
 8012a10:	636f4361 	.word	0x636f4361
 8012a14:	3fd287a7 	.word	0x3fd287a7
 8012a18:	8b60c8b3 	.word	0x8b60c8b3
 8012a1c:	3fc68a28 	.word	0x3fc68a28
 8012a20:	509f79fb 	.word	0x509f79fb
 8012a24:	3fd34413 	.word	0x3fd34413
 8012a28:	080151b9 	.word	0x080151b9
 8012a2c:	080151d0 	.word	0x080151d0
 8012a30:	7ff00000 	.word	0x7ff00000
 8012a34:	080151b5 	.word	0x080151b5
 8012a38:	080151ac 	.word	0x080151ac
 8012a3c:	08015189 	.word	0x08015189
 8012a40:	3ff80000 	.word	0x3ff80000
 8012a44:	08015320 	.word	0x08015320
 8012a48:	0801522b 	.word	0x0801522b
 8012a4c:	2401      	movs	r4, #1
 8012a4e:	2300      	movs	r3, #0
 8012a50:	9322      	str	r3, [sp, #136]	; 0x88
 8012a52:	940b      	str	r4, [sp, #44]	; 0x2c
 8012a54:	f04f 39ff 	mov.w	r9, #4294967295
 8012a58:	2200      	movs	r2, #0
 8012a5a:	f8cd 9020 	str.w	r9, [sp, #32]
 8012a5e:	2312      	movs	r3, #18
 8012a60:	9223      	str	r2, [sp, #140]	; 0x8c
 8012a62:	e7ae      	b.n	80129c2 <_dtoa_r+0x262>
 8012a64:	2301      	movs	r3, #1
 8012a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a68:	e7f4      	b.n	8012a54 <_dtoa_r+0x2f4>
 8012a6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8012a6e:	f8cd 9020 	str.w	r9, [sp, #32]
 8012a72:	464b      	mov	r3, r9
 8012a74:	e7a5      	b.n	80129c2 <_dtoa_r+0x262>
 8012a76:	3101      	adds	r1, #1
 8012a78:	6041      	str	r1, [r0, #4]
 8012a7a:	0052      	lsls	r2, r2, #1
 8012a7c:	e7a5      	b.n	80129ca <_dtoa_r+0x26a>
 8012a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012a80:	9a03      	ldr	r2, [sp, #12]
 8012a82:	601a      	str	r2, [r3, #0]
 8012a84:	9b08      	ldr	r3, [sp, #32]
 8012a86:	2b0e      	cmp	r3, #14
 8012a88:	f200 80a8 	bhi.w	8012bdc <_dtoa_r+0x47c>
 8012a8c:	2c00      	cmp	r4, #0
 8012a8e:	f000 80a5 	beq.w	8012bdc <_dtoa_r+0x47c>
 8012a92:	f1ba 0f00 	cmp.w	sl, #0
 8012a96:	dd34      	ble.n	8012b02 <_dtoa_r+0x3a2>
 8012a98:	4a9a      	ldr	r2, [pc, #616]	; (8012d04 <_dtoa_r+0x5a4>)
 8012a9a:	f00a 030f 	and.w	r3, sl, #15
 8012a9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012aa6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012aaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012aae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8012ab2:	d016      	beq.n	8012ae2 <_dtoa_r+0x382>
 8012ab4:	4b94      	ldr	r3, [pc, #592]	; (8012d08 <_dtoa_r+0x5a8>)
 8012ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012aba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012abe:	f7ed fe9d 	bl	80007fc <__aeabi_ddiv>
 8012ac2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ac6:	f004 040f 	and.w	r4, r4, #15
 8012aca:	2703      	movs	r7, #3
 8012acc:	4e8e      	ldr	r6, [pc, #568]	; (8012d08 <_dtoa_r+0x5a8>)
 8012ace:	b954      	cbnz	r4, 8012ae6 <_dtoa_r+0x386>
 8012ad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ad8:	f7ed fe90 	bl	80007fc <__aeabi_ddiv>
 8012adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ae0:	e029      	b.n	8012b36 <_dtoa_r+0x3d6>
 8012ae2:	2702      	movs	r7, #2
 8012ae4:	e7f2      	b.n	8012acc <_dtoa_r+0x36c>
 8012ae6:	07e1      	lsls	r1, r4, #31
 8012ae8:	d508      	bpl.n	8012afc <_dtoa_r+0x39c>
 8012aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012aee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012af2:	f7ed fd59 	bl	80005a8 <__aeabi_dmul>
 8012af6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012afa:	3701      	adds	r7, #1
 8012afc:	1064      	asrs	r4, r4, #1
 8012afe:	3608      	adds	r6, #8
 8012b00:	e7e5      	b.n	8012ace <_dtoa_r+0x36e>
 8012b02:	f000 80a5 	beq.w	8012c50 <_dtoa_r+0x4f0>
 8012b06:	f1ca 0400 	rsb	r4, sl, #0
 8012b0a:	4b7e      	ldr	r3, [pc, #504]	; (8012d04 <_dtoa_r+0x5a4>)
 8012b0c:	4e7e      	ldr	r6, [pc, #504]	; (8012d08 <_dtoa_r+0x5a8>)
 8012b0e:	f004 020f 	and.w	r2, r4, #15
 8012b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b1e:	f7ed fd43 	bl	80005a8 <__aeabi_dmul>
 8012b22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b26:	1124      	asrs	r4, r4, #4
 8012b28:	2300      	movs	r3, #0
 8012b2a:	2702      	movs	r7, #2
 8012b2c:	2c00      	cmp	r4, #0
 8012b2e:	f040 8084 	bne.w	8012c3a <_dtoa_r+0x4da>
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d1d2      	bne.n	8012adc <_dtoa_r+0x37c>
 8012b36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f000 808b 	beq.w	8012c54 <_dtoa_r+0x4f4>
 8012b3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012b42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012b46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012b4a:	4b70      	ldr	r3, [pc, #448]	; (8012d0c <_dtoa_r+0x5ac>)
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	f7ed ff9d 	bl	8000a8c <__aeabi_dcmplt>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d07e      	beq.n	8012c54 <_dtoa_r+0x4f4>
 8012b56:	9b08      	ldr	r3, [sp, #32]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d07b      	beq.n	8012c54 <_dtoa_r+0x4f4>
 8012b5c:	f1b9 0f00 	cmp.w	r9, #0
 8012b60:	dd38      	ble.n	8012bd4 <_dtoa_r+0x474>
 8012b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012b66:	4b6a      	ldr	r3, [pc, #424]	; (8012d10 <_dtoa_r+0x5b0>)
 8012b68:	2200      	movs	r2, #0
 8012b6a:	f7ed fd1d 	bl	80005a8 <__aeabi_dmul>
 8012b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b72:	f10a 38ff 	add.w	r8, sl, #4294967295
 8012b76:	3701      	adds	r7, #1
 8012b78:	464c      	mov	r4, r9
 8012b7a:	4638      	mov	r0, r7
 8012b7c:	f7ed fcaa 	bl	80004d4 <__aeabi_i2d>
 8012b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b84:	f7ed fd10 	bl	80005a8 <__aeabi_dmul>
 8012b88:	4b62      	ldr	r3, [pc, #392]	; (8012d14 <_dtoa_r+0x5b4>)
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f7ed fb56 	bl	800023c <__adddf3>
 8012b90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012b94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012b98:	9611      	str	r6, [sp, #68]	; 0x44
 8012b9a:	2c00      	cmp	r4, #0
 8012b9c:	d15d      	bne.n	8012c5a <_dtoa_r+0x4fa>
 8012b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ba2:	4b5d      	ldr	r3, [pc, #372]	; (8012d18 <_dtoa_r+0x5b8>)
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	f7ed fb47 	bl	8000238 <__aeabi_dsub>
 8012baa:	4602      	mov	r2, r0
 8012bac:	460b      	mov	r3, r1
 8012bae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012bb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012bb4:	4633      	mov	r3, r6
 8012bb6:	f7ed ff87 	bl	8000ac8 <__aeabi_dcmpgt>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	f040 829c 	bne.w	80130f8 <_dtoa_r+0x998>
 8012bc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012bc6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012bca:	f7ed ff5f 	bl	8000a8c <__aeabi_dcmplt>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	f040 8290 	bne.w	80130f4 <_dtoa_r+0x994>
 8012bd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8012bd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012bdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f2c0 8152 	blt.w	8012e88 <_dtoa_r+0x728>
 8012be4:	f1ba 0f0e 	cmp.w	sl, #14
 8012be8:	f300 814e 	bgt.w	8012e88 <_dtoa_r+0x728>
 8012bec:	4b45      	ldr	r3, [pc, #276]	; (8012d04 <_dtoa_r+0x5a4>)
 8012bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012bf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012bf6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8012bfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	f280 80db 	bge.w	8012db8 <_dtoa_r+0x658>
 8012c02:	9b08      	ldr	r3, [sp, #32]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	f300 80d7 	bgt.w	8012db8 <_dtoa_r+0x658>
 8012c0a:	f040 8272 	bne.w	80130f2 <_dtoa_r+0x992>
 8012c0e:	4b42      	ldr	r3, [pc, #264]	; (8012d18 <_dtoa_r+0x5b8>)
 8012c10:	2200      	movs	r2, #0
 8012c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c16:	f7ed fcc7 	bl	80005a8 <__aeabi_dmul>
 8012c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c1e:	f7ed ff49 	bl	8000ab4 <__aeabi_dcmpge>
 8012c22:	9c08      	ldr	r4, [sp, #32]
 8012c24:	4626      	mov	r6, r4
 8012c26:	2800      	cmp	r0, #0
 8012c28:	f040 8248 	bne.w	80130bc <_dtoa_r+0x95c>
 8012c2c:	9f03      	ldr	r7, [sp, #12]
 8012c2e:	2331      	movs	r3, #49	; 0x31
 8012c30:	f807 3b01 	strb.w	r3, [r7], #1
 8012c34:	f10a 0a01 	add.w	sl, sl, #1
 8012c38:	e244      	b.n	80130c4 <_dtoa_r+0x964>
 8012c3a:	07e2      	lsls	r2, r4, #31
 8012c3c:	d505      	bpl.n	8012c4a <_dtoa_r+0x4ea>
 8012c3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012c42:	f7ed fcb1 	bl	80005a8 <__aeabi_dmul>
 8012c46:	3701      	adds	r7, #1
 8012c48:	2301      	movs	r3, #1
 8012c4a:	1064      	asrs	r4, r4, #1
 8012c4c:	3608      	adds	r6, #8
 8012c4e:	e76d      	b.n	8012b2c <_dtoa_r+0x3cc>
 8012c50:	2702      	movs	r7, #2
 8012c52:	e770      	b.n	8012b36 <_dtoa_r+0x3d6>
 8012c54:	9c08      	ldr	r4, [sp, #32]
 8012c56:	46d0      	mov	r8, sl
 8012c58:	e78f      	b.n	8012b7a <_dtoa_r+0x41a>
 8012c5a:	9903      	ldr	r1, [sp, #12]
 8012c5c:	4b29      	ldr	r3, [pc, #164]	; (8012d04 <_dtoa_r+0x5a4>)
 8012c5e:	4421      	add	r1, r4
 8012c60:	9112      	str	r1, [sp, #72]	; 0x48
 8012c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012c6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c70:	2900      	cmp	r1, #0
 8012c72:	d055      	beq.n	8012d20 <_dtoa_r+0x5c0>
 8012c74:	4929      	ldr	r1, [pc, #164]	; (8012d1c <_dtoa_r+0x5bc>)
 8012c76:	2000      	movs	r0, #0
 8012c78:	f7ed fdc0 	bl	80007fc <__aeabi_ddiv>
 8012c7c:	463b      	mov	r3, r7
 8012c7e:	4632      	mov	r2, r6
 8012c80:	f7ed fada 	bl	8000238 <__aeabi_dsub>
 8012c84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012c88:	9f03      	ldr	r7, [sp, #12]
 8012c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c8e:	f7ed ff3b 	bl	8000b08 <__aeabi_d2iz>
 8012c92:	4604      	mov	r4, r0
 8012c94:	f7ed fc1e 	bl	80004d4 <__aeabi_i2d>
 8012c98:	4602      	mov	r2, r0
 8012c9a:	460b      	mov	r3, r1
 8012c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ca0:	f7ed faca 	bl	8000238 <__aeabi_dsub>
 8012ca4:	3430      	adds	r4, #48	; 0x30
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	460b      	mov	r3, r1
 8012caa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012cae:	f807 4b01 	strb.w	r4, [r7], #1
 8012cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012cb6:	f7ed fee9 	bl	8000a8c <__aeabi_dcmplt>
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	d174      	bne.n	8012da8 <_dtoa_r+0x648>
 8012cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cc2:	4912      	ldr	r1, [pc, #72]	; (8012d0c <_dtoa_r+0x5ac>)
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	f7ed fab7 	bl	8000238 <__aeabi_dsub>
 8012cca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012cce:	f7ed fedd 	bl	8000a8c <__aeabi_dcmplt>
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	f040 80b7 	bne.w	8012e46 <_dtoa_r+0x6e6>
 8012cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012cda:	429f      	cmp	r7, r3
 8012cdc:	f43f af7a 	beq.w	8012bd4 <_dtoa_r+0x474>
 8012ce0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012ce4:	4b0a      	ldr	r3, [pc, #40]	; (8012d10 <_dtoa_r+0x5b0>)
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	f7ed fc5e 	bl	80005a8 <__aeabi_dmul>
 8012cec:	4b08      	ldr	r3, [pc, #32]	; (8012d10 <_dtoa_r+0x5b0>)
 8012cee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012cf8:	f7ed fc56 	bl	80005a8 <__aeabi_dmul>
 8012cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d00:	e7c3      	b.n	8012c8a <_dtoa_r+0x52a>
 8012d02:	bf00      	nop
 8012d04:	08015320 	.word	0x08015320
 8012d08:	080152f8 	.word	0x080152f8
 8012d0c:	3ff00000 	.word	0x3ff00000
 8012d10:	40240000 	.word	0x40240000
 8012d14:	401c0000 	.word	0x401c0000
 8012d18:	40140000 	.word	0x40140000
 8012d1c:	3fe00000 	.word	0x3fe00000
 8012d20:	4630      	mov	r0, r6
 8012d22:	4639      	mov	r1, r7
 8012d24:	f7ed fc40 	bl	80005a8 <__aeabi_dmul>
 8012d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d2e:	9c03      	ldr	r4, [sp, #12]
 8012d30:	9314      	str	r3, [sp, #80]	; 0x50
 8012d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d36:	f7ed fee7 	bl	8000b08 <__aeabi_d2iz>
 8012d3a:	9015      	str	r0, [sp, #84]	; 0x54
 8012d3c:	f7ed fbca 	bl	80004d4 <__aeabi_i2d>
 8012d40:	4602      	mov	r2, r0
 8012d42:	460b      	mov	r3, r1
 8012d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d48:	f7ed fa76 	bl	8000238 <__aeabi_dsub>
 8012d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d4e:	3330      	adds	r3, #48	; 0x30
 8012d50:	f804 3b01 	strb.w	r3, [r4], #1
 8012d54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d56:	429c      	cmp	r4, r3
 8012d58:	4606      	mov	r6, r0
 8012d5a:	460f      	mov	r7, r1
 8012d5c:	f04f 0200 	mov.w	r2, #0
 8012d60:	d124      	bne.n	8012dac <_dtoa_r+0x64c>
 8012d62:	4ba4      	ldr	r3, [pc, #656]	; (8012ff4 <_dtoa_r+0x894>)
 8012d64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012d68:	f7ed fa68 	bl	800023c <__adddf3>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	460b      	mov	r3, r1
 8012d70:	4630      	mov	r0, r6
 8012d72:	4639      	mov	r1, r7
 8012d74:	f7ed fea8 	bl	8000ac8 <__aeabi_dcmpgt>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d163      	bne.n	8012e44 <_dtoa_r+0x6e4>
 8012d7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012d80:	499c      	ldr	r1, [pc, #624]	; (8012ff4 <_dtoa_r+0x894>)
 8012d82:	2000      	movs	r0, #0
 8012d84:	f7ed fa58 	bl	8000238 <__aeabi_dsub>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	4639      	mov	r1, r7
 8012d90:	f7ed fe7c 	bl	8000a8c <__aeabi_dcmplt>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	f43f af1d 	beq.w	8012bd4 <_dtoa_r+0x474>
 8012d9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012d9c:	1e7b      	subs	r3, r7, #1
 8012d9e:	9314      	str	r3, [sp, #80]	; 0x50
 8012da0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8012da4:	2b30      	cmp	r3, #48	; 0x30
 8012da6:	d0f8      	beq.n	8012d9a <_dtoa_r+0x63a>
 8012da8:	46c2      	mov	sl, r8
 8012daa:	e03b      	b.n	8012e24 <_dtoa_r+0x6c4>
 8012dac:	4b92      	ldr	r3, [pc, #584]	; (8012ff8 <_dtoa_r+0x898>)
 8012dae:	f7ed fbfb 	bl	80005a8 <__aeabi_dmul>
 8012db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012db6:	e7bc      	b.n	8012d32 <_dtoa_r+0x5d2>
 8012db8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012dbc:	9f03      	ldr	r7, [sp, #12]
 8012dbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012dc2:	4640      	mov	r0, r8
 8012dc4:	4649      	mov	r1, r9
 8012dc6:	f7ed fd19 	bl	80007fc <__aeabi_ddiv>
 8012dca:	f7ed fe9d 	bl	8000b08 <__aeabi_d2iz>
 8012dce:	4604      	mov	r4, r0
 8012dd0:	f7ed fb80 	bl	80004d4 <__aeabi_i2d>
 8012dd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012dd8:	f7ed fbe6 	bl	80005a8 <__aeabi_dmul>
 8012ddc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012de0:	4602      	mov	r2, r0
 8012de2:	460b      	mov	r3, r1
 8012de4:	4640      	mov	r0, r8
 8012de6:	4649      	mov	r1, r9
 8012de8:	f7ed fa26 	bl	8000238 <__aeabi_dsub>
 8012dec:	f807 6b01 	strb.w	r6, [r7], #1
 8012df0:	9e03      	ldr	r6, [sp, #12]
 8012df2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012df6:	1bbe      	subs	r6, r7, r6
 8012df8:	45b4      	cmp	ip, r6
 8012dfa:	4602      	mov	r2, r0
 8012dfc:	460b      	mov	r3, r1
 8012dfe:	d136      	bne.n	8012e6e <_dtoa_r+0x70e>
 8012e00:	f7ed fa1c 	bl	800023c <__adddf3>
 8012e04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e08:	4680      	mov	r8, r0
 8012e0a:	4689      	mov	r9, r1
 8012e0c:	f7ed fe5c 	bl	8000ac8 <__aeabi_dcmpgt>
 8012e10:	bb58      	cbnz	r0, 8012e6a <_dtoa_r+0x70a>
 8012e12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e16:	4640      	mov	r0, r8
 8012e18:	4649      	mov	r1, r9
 8012e1a:	f7ed fe2d 	bl	8000a78 <__aeabi_dcmpeq>
 8012e1e:	b108      	cbz	r0, 8012e24 <_dtoa_r+0x6c4>
 8012e20:	07e1      	lsls	r1, r4, #31
 8012e22:	d422      	bmi.n	8012e6a <_dtoa_r+0x70a>
 8012e24:	4628      	mov	r0, r5
 8012e26:	4659      	mov	r1, fp
 8012e28:	f000 fcf4 	bl	8013814 <_Bfree>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	703b      	strb	r3, [r7, #0]
 8012e30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012e32:	f10a 0001 	add.w	r0, sl, #1
 8012e36:	6018      	str	r0, [r3, #0]
 8012e38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f43f acdd 	beq.w	80127fa <_dtoa_r+0x9a>
 8012e40:	601f      	str	r7, [r3, #0]
 8012e42:	e4da      	b.n	80127fa <_dtoa_r+0x9a>
 8012e44:	4627      	mov	r7, r4
 8012e46:	463b      	mov	r3, r7
 8012e48:	461f      	mov	r7, r3
 8012e4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e4e:	2a39      	cmp	r2, #57	; 0x39
 8012e50:	d107      	bne.n	8012e62 <_dtoa_r+0x702>
 8012e52:	9a03      	ldr	r2, [sp, #12]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d1f7      	bne.n	8012e48 <_dtoa_r+0x6e8>
 8012e58:	9903      	ldr	r1, [sp, #12]
 8012e5a:	2230      	movs	r2, #48	; 0x30
 8012e5c:	f108 0801 	add.w	r8, r8, #1
 8012e60:	700a      	strb	r2, [r1, #0]
 8012e62:	781a      	ldrb	r2, [r3, #0]
 8012e64:	3201      	adds	r2, #1
 8012e66:	701a      	strb	r2, [r3, #0]
 8012e68:	e79e      	b.n	8012da8 <_dtoa_r+0x648>
 8012e6a:	46d0      	mov	r8, sl
 8012e6c:	e7eb      	b.n	8012e46 <_dtoa_r+0x6e6>
 8012e6e:	4b62      	ldr	r3, [pc, #392]	; (8012ff8 <_dtoa_r+0x898>)
 8012e70:	2200      	movs	r2, #0
 8012e72:	f7ed fb99 	bl	80005a8 <__aeabi_dmul>
 8012e76:	2200      	movs	r2, #0
 8012e78:	2300      	movs	r3, #0
 8012e7a:	4680      	mov	r8, r0
 8012e7c:	4689      	mov	r9, r1
 8012e7e:	f7ed fdfb 	bl	8000a78 <__aeabi_dcmpeq>
 8012e82:	2800      	cmp	r0, #0
 8012e84:	d09b      	beq.n	8012dbe <_dtoa_r+0x65e>
 8012e86:	e7cd      	b.n	8012e24 <_dtoa_r+0x6c4>
 8012e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e8a:	2a00      	cmp	r2, #0
 8012e8c:	f000 80d0 	beq.w	8013030 <_dtoa_r+0x8d0>
 8012e90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012e92:	2a01      	cmp	r2, #1
 8012e94:	f300 80b2 	bgt.w	8012ffc <_dtoa_r+0x89c>
 8012e98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012e9a:	2a00      	cmp	r2, #0
 8012e9c:	f000 80a6 	beq.w	8012fec <_dtoa_r+0x88c>
 8012ea0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ea4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012ea6:	9f06      	ldr	r7, [sp, #24]
 8012ea8:	9a06      	ldr	r2, [sp, #24]
 8012eaa:	441a      	add	r2, r3
 8012eac:	9206      	str	r2, [sp, #24]
 8012eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012eb0:	2101      	movs	r1, #1
 8012eb2:	441a      	add	r2, r3
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8012eb8:	f000 fd62 	bl	8013980 <__i2b>
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	2f00      	cmp	r7, #0
 8012ec0:	dd0c      	ble.n	8012edc <_dtoa_r+0x77c>
 8012ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dd09      	ble.n	8012edc <_dtoa_r+0x77c>
 8012ec8:	42bb      	cmp	r3, r7
 8012eca:	9a06      	ldr	r2, [sp, #24]
 8012ecc:	bfa8      	it	ge
 8012ece:	463b      	movge	r3, r7
 8012ed0:	1ad2      	subs	r2, r2, r3
 8012ed2:	9206      	str	r2, [sp, #24]
 8012ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ed6:	1aff      	subs	r7, r7, r3
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	9309      	str	r3, [sp, #36]	; 0x24
 8012edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ede:	b1f3      	cbz	r3, 8012f1e <_dtoa_r+0x7be>
 8012ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	f000 80a8 	beq.w	8013038 <_dtoa_r+0x8d8>
 8012ee8:	2c00      	cmp	r4, #0
 8012eea:	dd10      	ble.n	8012f0e <_dtoa_r+0x7ae>
 8012eec:	4631      	mov	r1, r6
 8012eee:	4622      	mov	r2, r4
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f000 fe03 	bl	8013afc <__pow5mult>
 8012ef6:	465a      	mov	r2, fp
 8012ef8:	4601      	mov	r1, r0
 8012efa:	4606      	mov	r6, r0
 8012efc:	4628      	mov	r0, r5
 8012efe:	f000 fd55 	bl	80139ac <__multiply>
 8012f02:	4659      	mov	r1, fp
 8012f04:	4680      	mov	r8, r0
 8012f06:	4628      	mov	r0, r5
 8012f08:	f000 fc84 	bl	8013814 <_Bfree>
 8012f0c:	46c3      	mov	fp, r8
 8012f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f10:	1b1a      	subs	r2, r3, r4
 8012f12:	d004      	beq.n	8012f1e <_dtoa_r+0x7be>
 8012f14:	4659      	mov	r1, fp
 8012f16:	4628      	mov	r0, r5
 8012f18:	f000 fdf0 	bl	8013afc <__pow5mult>
 8012f1c:	4683      	mov	fp, r0
 8012f1e:	2101      	movs	r1, #1
 8012f20:	4628      	mov	r0, r5
 8012f22:	f000 fd2d 	bl	8013980 <__i2b>
 8012f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	f340 8086 	ble.w	801303c <_dtoa_r+0x8dc>
 8012f30:	461a      	mov	r2, r3
 8012f32:	4601      	mov	r1, r0
 8012f34:	4628      	mov	r0, r5
 8012f36:	f000 fde1 	bl	8013afc <__pow5mult>
 8012f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	4604      	mov	r4, r0
 8012f40:	dd7f      	ble.n	8013042 <_dtoa_r+0x8e2>
 8012f42:	f04f 0800 	mov.w	r8, #0
 8012f46:	6923      	ldr	r3, [r4, #16]
 8012f48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012f4c:	6918      	ldr	r0, [r3, #16]
 8012f4e:	f000 fcc9 	bl	80138e4 <__hi0bits>
 8012f52:	f1c0 0020 	rsb	r0, r0, #32
 8012f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f58:	4418      	add	r0, r3
 8012f5a:	f010 001f 	ands.w	r0, r0, #31
 8012f5e:	f000 8092 	beq.w	8013086 <_dtoa_r+0x926>
 8012f62:	f1c0 0320 	rsb	r3, r0, #32
 8012f66:	2b04      	cmp	r3, #4
 8012f68:	f340 808a 	ble.w	8013080 <_dtoa_r+0x920>
 8012f6c:	f1c0 001c 	rsb	r0, r0, #28
 8012f70:	9b06      	ldr	r3, [sp, #24]
 8012f72:	4403      	add	r3, r0
 8012f74:	9306      	str	r3, [sp, #24]
 8012f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f78:	4403      	add	r3, r0
 8012f7a:	4407      	add	r7, r0
 8012f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f7e:	9b06      	ldr	r3, [sp, #24]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	dd05      	ble.n	8012f90 <_dtoa_r+0x830>
 8012f84:	4659      	mov	r1, fp
 8012f86:	461a      	mov	r2, r3
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f000 fe11 	bl	8013bb0 <__lshift>
 8012f8e:	4683      	mov	fp, r0
 8012f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	dd05      	ble.n	8012fa2 <_dtoa_r+0x842>
 8012f96:	4621      	mov	r1, r4
 8012f98:	461a      	mov	r2, r3
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	f000 fe08 	bl	8013bb0 <__lshift>
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d070      	beq.n	801308a <_dtoa_r+0x92a>
 8012fa8:	4621      	mov	r1, r4
 8012faa:	4658      	mov	r0, fp
 8012fac:	f000 fe70 	bl	8013c90 <__mcmp>
 8012fb0:	2800      	cmp	r0, #0
 8012fb2:	da6a      	bge.n	801308a <_dtoa_r+0x92a>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	4659      	mov	r1, fp
 8012fb8:	220a      	movs	r2, #10
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f000 fc4c 	bl	8013858 <__multadd>
 8012fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012fc6:	4683      	mov	fp, r0
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	f000 8194 	beq.w	80132f6 <_dtoa_r+0xb96>
 8012fce:	4631      	mov	r1, r6
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	220a      	movs	r2, #10
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	f000 fc3f 	bl	8013858 <__multadd>
 8012fda:	f1b9 0f00 	cmp.w	r9, #0
 8012fde:	4606      	mov	r6, r0
 8012fe0:	f300 8093 	bgt.w	801310a <_dtoa_r+0x9aa>
 8012fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012fe6:	2b02      	cmp	r3, #2
 8012fe8:	dc57      	bgt.n	801309a <_dtoa_r+0x93a>
 8012fea:	e08e      	b.n	801310a <_dtoa_r+0x9aa>
 8012fec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ff2:	e757      	b.n	8012ea4 <_dtoa_r+0x744>
 8012ff4:	3fe00000 	.word	0x3fe00000
 8012ff8:	40240000 	.word	0x40240000
 8012ffc:	9b08      	ldr	r3, [sp, #32]
 8012ffe:	1e5c      	subs	r4, r3, #1
 8013000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013002:	42a3      	cmp	r3, r4
 8013004:	bfbf      	itttt	lt
 8013006:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013008:	940a      	strlt	r4, [sp, #40]	; 0x28
 801300a:	1ae2      	sublt	r2, r4, r3
 801300c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801300e:	bfb6      	itet	lt
 8013010:	189b      	addlt	r3, r3, r2
 8013012:	1b1c      	subge	r4, r3, r4
 8013014:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013016:	9b08      	ldr	r3, [sp, #32]
 8013018:	bfb8      	it	lt
 801301a:	2400      	movlt	r4, #0
 801301c:	2b00      	cmp	r3, #0
 801301e:	bfb9      	ittee	lt
 8013020:	9b06      	ldrlt	r3, [sp, #24]
 8013022:	9a08      	ldrlt	r2, [sp, #32]
 8013024:	9f06      	ldrge	r7, [sp, #24]
 8013026:	9b08      	ldrge	r3, [sp, #32]
 8013028:	bfbc      	itt	lt
 801302a:	1a9f      	sublt	r7, r3, r2
 801302c:	2300      	movlt	r3, #0
 801302e:	e73b      	b.n	8012ea8 <_dtoa_r+0x748>
 8013030:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013032:	9f06      	ldr	r7, [sp, #24]
 8013034:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013036:	e742      	b.n	8012ebe <_dtoa_r+0x75e>
 8013038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801303a:	e76b      	b.n	8012f14 <_dtoa_r+0x7b4>
 801303c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801303e:	2b01      	cmp	r3, #1
 8013040:	dc19      	bgt.n	8013076 <_dtoa_r+0x916>
 8013042:	9b04      	ldr	r3, [sp, #16]
 8013044:	b9bb      	cbnz	r3, 8013076 <_dtoa_r+0x916>
 8013046:	9b05      	ldr	r3, [sp, #20]
 8013048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801304c:	b99b      	cbnz	r3, 8013076 <_dtoa_r+0x916>
 801304e:	9b05      	ldr	r3, [sp, #20]
 8013050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013054:	0d1b      	lsrs	r3, r3, #20
 8013056:	051b      	lsls	r3, r3, #20
 8013058:	b183      	cbz	r3, 801307c <_dtoa_r+0x91c>
 801305a:	9b06      	ldr	r3, [sp, #24]
 801305c:	3301      	adds	r3, #1
 801305e:	9306      	str	r3, [sp, #24]
 8013060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013062:	3301      	adds	r3, #1
 8013064:	9309      	str	r3, [sp, #36]	; 0x24
 8013066:	f04f 0801 	mov.w	r8, #1
 801306a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801306c:	2b00      	cmp	r3, #0
 801306e:	f47f af6a 	bne.w	8012f46 <_dtoa_r+0x7e6>
 8013072:	2001      	movs	r0, #1
 8013074:	e76f      	b.n	8012f56 <_dtoa_r+0x7f6>
 8013076:	f04f 0800 	mov.w	r8, #0
 801307a:	e7f6      	b.n	801306a <_dtoa_r+0x90a>
 801307c:	4698      	mov	r8, r3
 801307e:	e7f4      	b.n	801306a <_dtoa_r+0x90a>
 8013080:	f43f af7d 	beq.w	8012f7e <_dtoa_r+0x81e>
 8013084:	4618      	mov	r0, r3
 8013086:	301c      	adds	r0, #28
 8013088:	e772      	b.n	8012f70 <_dtoa_r+0x810>
 801308a:	9b08      	ldr	r3, [sp, #32]
 801308c:	2b00      	cmp	r3, #0
 801308e:	dc36      	bgt.n	80130fe <_dtoa_r+0x99e>
 8013090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013092:	2b02      	cmp	r3, #2
 8013094:	dd33      	ble.n	80130fe <_dtoa_r+0x99e>
 8013096:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801309a:	f1b9 0f00 	cmp.w	r9, #0
 801309e:	d10d      	bne.n	80130bc <_dtoa_r+0x95c>
 80130a0:	4621      	mov	r1, r4
 80130a2:	464b      	mov	r3, r9
 80130a4:	2205      	movs	r2, #5
 80130a6:	4628      	mov	r0, r5
 80130a8:	f000 fbd6 	bl	8013858 <__multadd>
 80130ac:	4601      	mov	r1, r0
 80130ae:	4604      	mov	r4, r0
 80130b0:	4658      	mov	r0, fp
 80130b2:	f000 fded 	bl	8013c90 <__mcmp>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	f73f adb8 	bgt.w	8012c2c <_dtoa_r+0x4cc>
 80130bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80130be:	9f03      	ldr	r7, [sp, #12]
 80130c0:	ea6f 0a03 	mvn.w	sl, r3
 80130c4:	f04f 0800 	mov.w	r8, #0
 80130c8:	4621      	mov	r1, r4
 80130ca:	4628      	mov	r0, r5
 80130cc:	f000 fba2 	bl	8013814 <_Bfree>
 80130d0:	2e00      	cmp	r6, #0
 80130d2:	f43f aea7 	beq.w	8012e24 <_dtoa_r+0x6c4>
 80130d6:	f1b8 0f00 	cmp.w	r8, #0
 80130da:	d005      	beq.n	80130e8 <_dtoa_r+0x988>
 80130dc:	45b0      	cmp	r8, r6
 80130de:	d003      	beq.n	80130e8 <_dtoa_r+0x988>
 80130e0:	4641      	mov	r1, r8
 80130e2:	4628      	mov	r0, r5
 80130e4:	f000 fb96 	bl	8013814 <_Bfree>
 80130e8:	4631      	mov	r1, r6
 80130ea:	4628      	mov	r0, r5
 80130ec:	f000 fb92 	bl	8013814 <_Bfree>
 80130f0:	e698      	b.n	8012e24 <_dtoa_r+0x6c4>
 80130f2:	2400      	movs	r4, #0
 80130f4:	4626      	mov	r6, r4
 80130f6:	e7e1      	b.n	80130bc <_dtoa_r+0x95c>
 80130f8:	46c2      	mov	sl, r8
 80130fa:	4626      	mov	r6, r4
 80130fc:	e596      	b.n	8012c2c <_dtoa_r+0x4cc>
 80130fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013104:	2b00      	cmp	r3, #0
 8013106:	f000 80fd 	beq.w	8013304 <_dtoa_r+0xba4>
 801310a:	2f00      	cmp	r7, #0
 801310c:	dd05      	ble.n	801311a <_dtoa_r+0x9ba>
 801310e:	4631      	mov	r1, r6
 8013110:	463a      	mov	r2, r7
 8013112:	4628      	mov	r0, r5
 8013114:	f000 fd4c 	bl	8013bb0 <__lshift>
 8013118:	4606      	mov	r6, r0
 801311a:	f1b8 0f00 	cmp.w	r8, #0
 801311e:	d05c      	beq.n	80131da <_dtoa_r+0xa7a>
 8013120:	6871      	ldr	r1, [r6, #4]
 8013122:	4628      	mov	r0, r5
 8013124:	f000 fb36 	bl	8013794 <_Balloc>
 8013128:	4607      	mov	r7, r0
 801312a:	b928      	cbnz	r0, 8013138 <_dtoa_r+0x9d8>
 801312c:	4b80      	ldr	r3, [pc, #512]	; (8013330 <_dtoa_r+0xbd0>)
 801312e:	4602      	mov	r2, r0
 8013130:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013134:	f7ff bb28 	b.w	8012788 <_dtoa_r+0x28>
 8013138:	6932      	ldr	r2, [r6, #16]
 801313a:	3202      	adds	r2, #2
 801313c:	0092      	lsls	r2, r2, #2
 801313e:	f106 010c 	add.w	r1, r6, #12
 8013142:	300c      	adds	r0, #12
 8013144:	f7fe fc0e 	bl	8011964 <memcpy>
 8013148:	2201      	movs	r2, #1
 801314a:	4639      	mov	r1, r7
 801314c:	4628      	mov	r0, r5
 801314e:	f000 fd2f 	bl	8013bb0 <__lshift>
 8013152:	9b03      	ldr	r3, [sp, #12]
 8013154:	3301      	adds	r3, #1
 8013156:	9308      	str	r3, [sp, #32]
 8013158:	9b03      	ldr	r3, [sp, #12]
 801315a:	444b      	add	r3, r9
 801315c:	930a      	str	r3, [sp, #40]	; 0x28
 801315e:	9b04      	ldr	r3, [sp, #16]
 8013160:	f003 0301 	and.w	r3, r3, #1
 8013164:	46b0      	mov	r8, r6
 8013166:	9309      	str	r3, [sp, #36]	; 0x24
 8013168:	4606      	mov	r6, r0
 801316a:	9b08      	ldr	r3, [sp, #32]
 801316c:	4621      	mov	r1, r4
 801316e:	3b01      	subs	r3, #1
 8013170:	4658      	mov	r0, fp
 8013172:	9304      	str	r3, [sp, #16]
 8013174:	f7ff fa6a 	bl	801264c <quorem>
 8013178:	4603      	mov	r3, r0
 801317a:	3330      	adds	r3, #48	; 0x30
 801317c:	9006      	str	r0, [sp, #24]
 801317e:	4641      	mov	r1, r8
 8013180:	4658      	mov	r0, fp
 8013182:	930b      	str	r3, [sp, #44]	; 0x2c
 8013184:	f000 fd84 	bl	8013c90 <__mcmp>
 8013188:	4632      	mov	r2, r6
 801318a:	4681      	mov	r9, r0
 801318c:	4621      	mov	r1, r4
 801318e:	4628      	mov	r0, r5
 8013190:	f000 fd9a 	bl	8013cc8 <__mdiff>
 8013194:	68c2      	ldr	r2, [r0, #12]
 8013196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013198:	4607      	mov	r7, r0
 801319a:	bb02      	cbnz	r2, 80131de <_dtoa_r+0xa7e>
 801319c:	4601      	mov	r1, r0
 801319e:	4658      	mov	r0, fp
 80131a0:	f000 fd76 	bl	8013c90 <__mcmp>
 80131a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a6:	4602      	mov	r2, r0
 80131a8:	4639      	mov	r1, r7
 80131aa:	4628      	mov	r0, r5
 80131ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80131b0:	f000 fb30 	bl	8013814 <_Bfree>
 80131b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80131b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131b8:	9f08      	ldr	r7, [sp, #32]
 80131ba:	ea43 0102 	orr.w	r1, r3, r2
 80131be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131c0:	430b      	orrs	r3, r1
 80131c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131c4:	d10d      	bne.n	80131e2 <_dtoa_r+0xa82>
 80131c6:	2b39      	cmp	r3, #57	; 0x39
 80131c8:	d029      	beq.n	801321e <_dtoa_r+0xabe>
 80131ca:	f1b9 0f00 	cmp.w	r9, #0
 80131ce:	dd01      	ble.n	80131d4 <_dtoa_r+0xa74>
 80131d0:	9b06      	ldr	r3, [sp, #24]
 80131d2:	3331      	adds	r3, #49	; 0x31
 80131d4:	9a04      	ldr	r2, [sp, #16]
 80131d6:	7013      	strb	r3, [r2, #0]
 80131d8:	e776      	b.n	80130c8 <_dtoa_r+0x968>
 80131da:	4630      	mov	r0, r6
 80131dc:	e7b9      	b.n	8013152 <_dtoa_r+0x9f2>
 80131de:	2201      	movs	r2, #1
 80131e0:	e7e2      	b.n	80131a8 <_dtoa_r+0xa48>
 80131e2:	f1b9 0f00 	cmp.w	r9, #0
 80131e6:	db06      	blt.n	80131f6 <_dtoa_r+0xa96>
 80131e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80131ea:	ea41 0909 	orr.w	r9, r1, r9
 80131ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131f0:	ea59 0101 	orrs.w	r1, r9, r1
 80131f4:	d120      	bne.n	8013238 <_dtoa_r+0xad8>
 80131f6:	2a00      	cmp	r2, #0
 80131f8:	ddec      	ble.n	80131d4 <_dtoa_r+0xa74>
 80131fa:	4659      	mov	r1, fp
 80131fc:	2201      	movs	r2, #1
 80131fe:	4628      	mov	r0, r5
 8013200:	9308      	str	r3, [sp, #32]
 8013202:	f000 fcd5 	bl	8013bb0 <__lshift>
 8013206:	4621      	mov	r1, r4
 8013208:	4683      	mov	fp, r0
 801320a:	f000 fd41 	bl	8013c90 <__mcmp>
 801320e:	2800      	cmp	r0, #0
 8013210:	9b08      	ldr	r3, [sp, #32]
 8013212:	dc02      	bgt.n	801321a <_dtoa_r+0xaba>
 8013214:	d1de      	bne.n	80131d4 <_dtoa_r+0xa74>
 8013216:	07da      	lsls	r2, r3, #31
 8013218:	d5dc      	bpl.n	80131d4 <_dtoa_r+0xa74>
 801321a:	2b39      	cmp	r3, #57	; 0x39
 801321c:	d1d8      	bne.n	80131d0 <_dtoa_r+0xa70>
 801321e:	9a04      	ldr	r2, [sp, #16]
 8013220:	2339      	movs	r3, #57	; 0x39
 8013222:	7013      	strb	r3, [r2, #0]
 8013224:	463b      	mov	r3, r7
 8013226:	461f      	mov	r7, r3
 8013228:	3b01      	subs	r3, #1
 801322a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801322e:	2a39      	cmp	r2, #57	; 0x39
 8013230:	d050      	beq.n	80132d4 <_dtoa_r+0xb74>
 8013232:	3201      	adds	r2, #1
 8013234:	701a      	strb	r2, [r3, #0]
 8013236:	e747      	b.n	80130c8 <_dtoa_r+0x968>
 8013238:	2a00      	cmp	r2, #0
 801323a:	dd03      	ble.n	8013244 <_dtoa_r+0xae4>
 801323c:	2b39      	cmp	r3, #57	; 0x39
 801323e:	d0ee      	beq.n	801321e <_dtoa_r+0xabe>
 8013240:	3301      	adds	r3, #1
 8013242:	e7c7      	b.n	80131d4 <_dtoa_r+0xa74>
 8013244:	9a08      	ldr	r2, [sp, #32]
 8013246:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013248:	f802 3c01 	strb.w	r3, [r2, #-1]
 801324c:	428a      	cmp	r2, r1
 801324e:	d02a      	beq.n	80132a6 <_dtoa_r+0xb46>
 8013250:	4659      	mov	r1, fp
 8013252:	2300      	movs	r3, #0
 8013254:	220a      	movs	r2, #10
 8013256:	4628      	mov	r0, r5
 8013258:	f000 fafe 	bl	8013858 <__multadd>
 801325c:	45b0      	cmp	r8, r6
 801325e:	4683      	mov	fp, r0
 8013260:	f04f 0300 	mov.w	r3, #0
 8013264:	f04f 020a 	mov.w	r2, #10
 8013268:	4641      	mov	r1, r8
 801326a:	4628      	mov	r0, r5
 801326c:	d107      	bne.n	801327e <_dtoa_r+0xb1e>
 801326e:	f000 faf3 	bl	8013858 <__multadd>
 8013272:	4680      	mov	r8, r0
 8013274:	4606      	mov	r6, r0
 8013276:	9b08      	ldr	r3, [sp, #32]
 8013278:	3301      	adds	r3, #1
 801327a:	9308      	str	r3, [sp, #32]
 801327c:	e775      	b.n	801316a <_dtoa_r+0xa0a>
 801327e:	f000 faeb 	bl	8013858 <__multadd>
 8013282:	4631      	mov	r1, r6
 8013284:	4680      	mov	r8, r0
 8013286:	2300      	movs	r3, #0
 8013288:	220a      	movs	r2, #10
 801328a:	4628      	mov	r0, r5
 801328c:	f000 fae4 	bl	8013858 <__multadd>
 8013290:	4606      	mov	r6, r0
 8013292:	e7f0      	b.n	8013276 <_dtoa_r+0xb16>
 8013294:	f1b9 0f00 	cmp.w	r9, #0
 8013298:	9a03      	ldr	r2, [sp, #12]
 801329a:	bfcc      	ite	gt
 801329c:	464f      	movgt	r7, r9
 801329e:	2701      	movle	r7, #1
 80132a0:	4417      	add	r7, r2
 80132a2:	f04f 0800 	mov.w	r8, #0
 80132a6:	4659      	mov	r1, fp
 80132a8:	2201      	movs	r2, #1
 80132aa:	4628      	mov	r0, r5
 80132ac:	9308      	str	r3, [sp, #32]
 80132ae:	f000 fc7f 	bl	8013bb0 <__lshift>
 80132b2:	4621      	mov	r1, r4
 80132b4:	4683      	mov	fp, r0
 80132b6:	f000 fceb 	bl	8013c90 <__mcmp>
 80132ba:	2800      	cmp	r0, #0
 80132bc:	dcb2      	bgt.n	8013224 <_dtoa_r+0xac4>
 80132be:	d102      	bne.n	80132c6 <_dtoa_r+0xb66>
 80132c0:	9b08      	ldr	r3, [sp, #32]
 80132c2:	07db      	lsls	r3, r3, #31
 80132c4:	d4ae      	bmi.n	8013224 <_dtoa_r+0xac4>
 80132c6:	463b      	mov	r3, r7
 80132c8:	461f      	mov	r7, r3
 80132ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132ce:	2a30      	cmp	r2, #48	; 0x30
 80132d0:	d0fa      	beq.n	80132c8 <_dtoa_r+0xb68>
 80132d2:	e6f9      	b.n	80130c8 <_dtoa_r+0x968>
 80132d4:	9a03      	ldr	r2, [sp, #12]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d1a5      	bne.n	8013226 <_dtoa_r+0xac6>
 80132da:	f10a 0a01 	add.w	sl, sl, #1
 80132de:	2331      	movs	r3, #49	; 0x31
 80132e0:	e779      	b.n	80131d6 <_dtoa_r+0xa76>
 80132e2:	4b14      	ldr	r3, [pc, #80]	; (8013334 <_dtoa_r+0xbd4>)
 80132e4:	f7ff baa7 	b.w	8012836 <_dtoa_r+0xd6>
 80132e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	f47f aa80 	bne.w	80127f0 <_dtoa_r+0x90>
 80132f0:	4b11      	ldr	r3, [pc, #68]	; (8013338 <_dtoa_r+0xbd8>)
 80132f2:	f7ff baa0 	b.w	8012836 <_dtoa_r+0xd6>
 80132f6:	f1b9 0f00 	cmp.w	r9, #0
 80132fa:	dc03      	bgt.n	8013304 <_dtoa_r+0xba4>
 80132fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80132fe:	2b02      	cmp	r3, #2
 8013300:	f73f aecb 	bgt.w	801309a <_dtoa_r+0x93a>
 8013304:	9f03      	ldr	r7, [sp, #12]
 8013306:	4621      	mov	r1, r4
 8013308:	4658      	mov	r0, fp
 801330a:	f7ff f99f 	bl	801264c <quorem>
 801330e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013312:	f807 3b01 	strb.w	r3, [r7], #1
 8013316:	9a03      	ldr	r2, [sp, #12]
 8013318:	1aba      	subs	r2, r7, r2
 801331a:	4591      	cmp	r9, r2
 801331c:	ddba      	ble.n	8013294 <_dtoa_r+0xb34>
 801331e:	4659      	mov	r1, fp
 8013320:	2300      	movs	r3, #0
 8013322:	220a      	movs	r2, #10
 8013324:	4628      	mov	r0, r5
 8013326:	f000 fa97 	bl	8013858 <__multadd>
 801332a:	4683      	mov	fp, r0
 801332c:	e7eb      	b.n	8013306 <_dtoa_r+0xba6>
 801332e:	bf00      	nop
 8013330:	0801522b 	.word	0x0801522b
 8013334:	08015188 	.word	0x08015188
 8013338:	080151ac 	.word	0x080151ac

0801333c <__sflush_r>:
 801333c:	898a      	ldrh	r2, [r1, #12]
 801333e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013340:	4605      	mov	r5, r0
 8013342:	0710      	lsls	r0, r2, #28
 8013344:	460c      	mov	r4, r1
 8013346:	d457      	bmi.n	80133f8 <__sflush_r+0xbc>
 8013348:	684b      	ldr	r3, [r1, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	dc04      	bgt.n	8013358 <__sflush_r+0x1c>
 801334e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013350:	2b00      	cmp	r3, #0
 8013352:	dc01      	bgt.n	8013358 <__sflush_r+0x1c>
 8013354:	2000      	movs	r0, #0
 8013356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801335a:	2e00      	cmp	r6, #0
 801335c:	d0fa      	beq.n	8013354 <__sflush_r+0x18>
 801335e:	2300      	movs	r3, #0
 8013360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013364:	682f      	ldr	r7, [r5, #0]
 8013366:	602b      	str	r3, [r5, #0]
 8013368:	d032      	beq.n	80133d0 <__sflush_r+0x94>
 801336a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801336c:	89a3      	ldrh	r3, [r4, #12]
 801336e:	075a      	lsls	r2, r3, #29
 8013370:	d505      	bpl.n	801337e <__sflush_r+0x42>
 8013372:	6863      	ldr	r3, [r4, #4]
 8013374:	1ac0      	subs	r0, r0, r3
 8013376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013378:	b10b      	cbz	r3, 801337e <__sflush_r+0x42>
 801337a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801337c:	1ac0      	subs	r0, r0, r3
 801337e:	2300      	movs	r3, #0
 8013380:	4602      	mov	r2, r0
 8013382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013384:	6a21      	ldr	r1, [r4, #32]
 8013386:	4628      	mov	r0, r5
 8013388:	47b0      	blx	r6
 801338a:	1c43      	adds	r3, r0, #1
 801338c:	89a3      	ldrh	r3, [r4, #12]
 801338e:	d106      	bne.n	801339e <__sflush_r+0x62>
 8013390:	6829      	ldr	r1, [r5, #0]
 8013392:	291d      	cmp	r1, #29
 8013394:	d82c      	bhi.n	80133f0 <__sflush_r+0xb4>
 8013396:	4a29      	ldr	r2, [pc, #164]	; (801343c <__sflush_r+0x100>)
 8013398:	40ca      	lsrs	r2, r1
 801339a:	07d6      	lsls	r6, r2, #31
 801339c:	d528      	bpl.n	80133f0 <__sflush_r+0xb4>
 801339e:	2200      	movs	r2, #0
 80133a0:	6062      	str	r2, [r4, #4]
 80133a2:	04d9      	lsls	r1, r3, #19
 80133a4:	6922      	ldr	r2, [r4, #16]
 80133a6:	6022      	str	r2, [r4, #0]
 80133a8:	d504      	bpl.n	80133b4 <__sflush_r+0x78>
 80133aa:	1c42      	adds	r2, r0, #1
 80133ac:	d101      	bne.n	80133b2 <__sflush_r+0x76>
 80133ae:	682b      	ldr	r3, [r5, #0]
 80133b0:	b903      	cbnz	r3, 80133b4 <__sflush_r+0x78>
 80133b2:	6560      	str	r0, [r4, #84]	; 0x54
 80133b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133b6:	602f      	str	r7, [r5, #0]
 80133b8:	2900      	cmp	r1, #0
 80133ba:	d0cb      	beq.n	8013354 <__sflush_r+0x18>
 80133bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133c0:	4299      	cmp	r1, r3
 80133c2:	d002      	beq.n	80133ca <__sflush_r+0x8e>
 80133c4:	4628      	mov	r0, r5
 80133c6:	f7fe fae3 	bl	8011990 <_free_r>
 80133ca:	2000      	movs	r0, #0
 80133cc:	6360      	str	r0, [r4, #52]	; 0x34
 80133ce:	e7c2      	b.n	8013356 <__sflush_r+0x1a>
 80133d0:	6a21      	ldr	r1, [r4, #32]
 80133d2:	2301      	movs	r3, #1
 80133d4:	4628      	mov	r0, r5
 80133d6:	47b0      	blx	r6
 80133d8:	1c41      	adds	r1, r0, #1
 80133da:	d1c7      	bne.n	801336c <__sflush_r+0x30>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d0c4      	beq.n	801336c <__sflush_r+0x30>
 80133e2:	2b1d      	cmp	r3, #29
 80133e4:	d001      	beq.n	80133ea <__sflush_r+0xae>
 80133e6:	2b16      	cmp	r3, #22
 80133e8:	d101      	bne.n	80133ee <__sflush_r+0xb2>
 80133ea:	602f      	str	r7, [r5, #0]
 80133ec:	e7b2      	b.n	8013354 <__sflush_r+0x18>
 80133ee:	89a3      	ldrh	r3, [r4, #12]
 80133f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133f4:	81a3      	strh	r3, [r4, #12]
 80133f6:	e7ae      	b.n	8013356 <__sflush_r+0x1a>
 80133f8:	690f      	ldr	r7, [r1, #16]
 80133fa:	2f00      	cmp	r7, #0
 80133fc:	d0aa      	beq.n	8013354 <__sflush_r+0x18>
 80133fe:	0793      	lsls	r3, r2, #30
 8013400:	680e      	ldr	r6, [r1, #0]
 8013402:	bf08      	it	eq
 8013404:	694b      	ldreq	r3, [r1, #20]
 8013406:	600f      	str	r7, [r1, #0]
 8013408:	bf18      	it	ne
 801340a:	2300      	movne	r3, #0
 801340c:	1bf6      	subs	r6, r6, r7
 801340e:	608b      	str	r3, [r1, #8]
 8013410:	2e00      	cmp	r6, #0
 8013412:	dd9f      	ble.n	8013354 <__sflush_r+0x18>
 8013414:	6a21      	ldr	r1, [r4, #32]
 8013416:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801341a:	4633      	mov	r3, r6
 801341c:	463a      	mov	r2, r7
 801341e:	4628      	mov	r0, r5
 8013420:	47e0      	blx	ip
 8013422:	2800      	cmp	r0, #0
 8013424:	dc06      	bgt.n	8013434 <__sflush_r+0xf8>
 8013426:	89a3      	ldrh	r3, [r4, #12]
 8013428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801342c:	81a3      	strh	r3, [r4, #12]
 801342e:	f04f 30ff 	mov.w	r0, #4294967295
 8013432:	e790      	b.n	8013356 <__sflush_r+0x1a>
 8013434:	4407      	add	r7, r0
 8013436:	1a36      	subs	r6, r6, r0
 8013438:	e7ea      	b.n	8013410 <__sflush_r+0xd4>
 801343a:	bf00      	nop
 801343c:	20400001 	.word	0x20400001

08013440 <_fflush_r>:
 8013440:	b538      	push	{r3, r4, r5, lr}
 8013442:	690b      	ldr	r3, [r1, #16]
 8013444:	4605      	mov	r5, r0
 8013446:	460c      	mov	r4, r1
 8013448:	b913      	cbnz	r3, 8013450 <_fflush_r+0x10>
 801344a:	2500      	movs	r5, #0
 801344c:	4628      	mov	r0, r5
 801344e:	bd38      	pop	{r3, r4, r5, pc}
 8013450:	b118      	cbz	r0, 801345a <_fflush_r+0x1a>
 8013452:	6983      	ldr	r3, [r0, #24]
 8013454:	b90b      	cbnz	r3, 801345a <_fflush_r+0x1a>
 8013456:	f000 f887 	bl	8013568 <__sinit>
 801345a:	4b14      	ldr	r3, [pc, #80]	; (80134ac <_fflush_r+0x6c>)
 801345c:	429c      	cmp	r4, r3
 801345e:	d11b      	bne.n	8013498 <_fflush_r+0x58>
 8013460:	686c      	ldr	r4, [r5, #4]
 8013462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d0ef      	beq.n	801344a <_fflush_r+0xa>
 801346a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801346c:	07d0      	lsls	r0, r2, #31
 801346e:	d404      	bmi.n	801347a <_fflush_r+0x3a>
 8013470:	0599      	lsls	r1, r3, #22
 8013472:	d402      	bmi.n	801347a <_fflush_r+0x3a>
 8013474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013476:	f000 f91a 	bl	80136ae <__retarget_lock_acquire_recursive>
 801347a:	4628      	mov	r0, r5
 801347c:	4621      	mov	r1, r4
 801347e:	f7ff ff5d 	bl	801333c <__sflush_r>
 8013482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013484:	07da      	lsls	r2, r3, #31
 8013486:	4605      	mov	r5, r0
 8013488:	d4e0      	bmi.n	801344c <_fflush_r+0xc>
 801348a:	89a3      	ldrh	r3, [r4, #12]
 801348c:	059b      	lsls	r3, r3, #22
 801348e:	d4dd      	bmi.n	801344c <_fflush_r+0xc>
 8013490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013492:	f000 f90d 	bl	80136b0 <__retarget_lock_release_recursive>
 8013496:	e7d9      	b.n	801344c <_fflush_r+0xc>
 8013498:	4b05      	ldr	r3, [pc, #20]	; (80134b0 <_fflush_r+0x70>)
 801349a:	429c      	cmp	r4, r3
 801349c:	d101      	bne.n	80134a2 <_fflush_r+0x62>
 801349e:	68ac      	ldr	r4, [r5, #8]
 80134a0:	e7df      	b.n	8013462 <_fflush_r+0x22>
 80134a2:	4b04      	ldr	r3, [pc, #16]	; (80134b4 <_fflush_r+0x74>)
 80134a4:	429c      	cmp	r4, r3
 80134a6:	bf08      	it	eq
 80134a8:	68ec      	ldreq	r4, [r5, #12]
 80134aa:	e7da      	b.n	8013462 <_fflush_r+0x22>
 80134ac:	0801525c 	.word	0x0801525c
 80134b0:	0801527c 	.word	0x0801527c
 80134b4:	0801523c 	.word	0x0801523c

080134b8 <std>:
 80134b8:	2300      	movs	r3, #0
 80134ba:	b510      	push	{r4, lr}
 80134bc:	4604      	mov	r4, r0
 80134be:	e9c0 3300 	strd	r3, r3, [r0]
 80134c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134c6:	6083      	str	r3, [r0, #8]
 80134c8:	8181      	strh	r1, [r0, #12]
 80134ca:	6643      	str	r3, [r0, #100]	; 0x64
 80134cc:	81c2      	strh	r2, [r0, #14]
 80134ce:	6183      	str	r3, [r0, #24]
 80134d0:	4619      	mov	r1, r3
 80134d2:	2208      	movs	r2, #8
 80134d4:	305c      	adds	r0, #92	; 0x5c
 80134d6:	f7fe fa53 	bl	8011980 <memset>
 80134da:	4b05      	ldr	r3, [pc, #20]	; (80134f0 <std+0x38>)
 80134dc:	6263      	str	r3, [r4, #36]	; 0x24
 80134de:	4b05      	ldr	r3, [pc, #20]	; (80134f4 <std+0x3c>)
 80134e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80134e2:	4b05      	ldr	r3, [pc, #20]	; (80134f8 <std+0x40>)
 80134e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80134e6:	4b05      	ldr	r3, [pc, #20]	; (80134fc <std+0x44>)
 80134e8:	6224      	str	r4, [r4, #32]
 80134ea:	6323      	str	r3, [r4, #48]	; 0x30
 80134ec:	bd10      	pop	{r4, pc}
 80134ee:	bf00      	nop
 80134f0:	08014421 	.word	0x08014421
 80134f4:	08014443 	.word	0x08014443
 80134f8:	0801447b 	.word	0x0801447b
 80134fc:	0801449f 	.word	0x0801449f

08013500 <_cleanup_r>:
 8013500:	4901      	ldr	r1, [pc, #4]	; (8013508 <_cleanup_r+0x8>)
 8013502:	f000 b8af 	b.w	8013664 <_fwalk_reent>
 8013506:	bf00      	nop
 8013508:	08013441 	.word	0x08013441

0801350c <__sfmoreglue>:
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	2268      	movs	r2, #104	; 0x68
 8013510:	1e4d      	subs	r5, r1, #1
 8013512:	4355      	muls	r5, r2
 8013514:	460e      	mov	r6, r1
 8013516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801351a:	f7fe faa3 	bl	8011a64 <_malloc_r>
 801351e:	4604      	mov	r4, r0
 8013520:	b140      	cbz	r0, 8013534 <__sfmoreglue+0x28>
 8013522:	2100      	movs	r1, #0
 8013524:	e9c0 1600 	strd	r1, r6, [r0]
 8013528:	300c      	adds	r0, #12
 801352a:	60a0      	str	r0, [r4, #8]
 801352c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013530:	f7fe fa26 	bl	8011980 <memset>
 8013534:	4620      	mov	r0, r4
 8013536:	bd70      	pop	{r4, r5, r6, pc}

08013538 <__sfp_lock_acquire>:
 8013538:	4801      	ldr	r0, [pc, #4]	; (8013540 <__sfp_lock_acquire+0x8>)
 801353a:	f000 b8b8 	b.w	80136ae <__retarget_lock_acquire_recursive>
 801353e:	bf00      	nop
 8013540:	200020c5 	.word	0x200020c5

08013544 <__sfp_lock_release>:
 8013544:	4801      	ldr	r0, [pc, #4]	; (801354c <__sfp_lock_release+0x8>)
 8013546:	f000 b8b3 	b.w	80136b0 <__retarget_lock_release_recursive>
 801354a:	bf00      	nop
 801354c:	200020c5 	.word	0x200020c5

08013550 <__sinit_lock_acquire>:
 8013550:	4801      	ldr	r0, [pc, #4]	; (8013558 <__sinit_lock_acquire+0x8>)
 8013552:	f000 b8ac 	b.w	80136ae <__retarget_lock_acquire_recursive>
 8013556:	bf00      	nop
 8013558:	200020c6 	.word	0x200020c6

0801355c <__sinit_lock_release>:
 801355c:	4801      	ldr	r0, [pc, #4]	; (8013564 <__sinit_lock_release+0x8>)
 801355e:	f000 b8a7 	b.w	80136b0 <__retarget_lock_release_recursive>
 8013562:	bf00      	nop
 8013564:	200020c6 	.word	0x200020c6

08013568 <__sinit>:
 8013568:	b510      	push	{r4, lr}
 801356a:	4604      	mov	r4, r0
 801356c:	f7ff fff0 	bl	8013550 <__sinit_lock_acquire>
 8013570:	69a3      	ldr	r3, [r4, #24]
 8013572:	b11b      	cbz	r3, 801357c <__sinit+0x14>
 8013574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013578:	f7ff bff0 	b.w	801355c <__sinit_lock_release>
 801357c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013580:	6523      	str	r3, [r4, #80]	; 0x50
 8013582:	4b13      	ldr	r3, [pc, #76]	; (80135d0 <__sinit+0x68>)
 8013584:	4a13      	ldr	r2, [pc, #76]	; (80135d4 <__sinit+0x6c>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	62a2      	str	r2, [r4, #40]	; 0x28
 801358a:	42a3      	cmp	r3, r4
 801358c:	bf04      	itt	eq
 801358e:	2301      	moveq	r3, #1
 8013590:	61a3      	streq	r3, [r4, #24]
 8013592:	4620      	mov	r0, r4
 8013594:	f000 f820 	bl	80135d8 <__sfp>
 8013598:	6060      	str	r0, [r4, #4]
 801359a:	4620      	mov	r0, r4
 801359c:	f000 f81c 	bl	80135d8 <__sfp>
 80135a0:	60a0      	str	r0, [r4, #8]
 80135a2:	4620      	mov	r0, r4
 80135a4:	f000 f818 	bl	80135d8 <__sfp>
 80135a8:	2200      	movs	r2, #0
 80135aa:	60e0      	str	r0, [r4, #12]
 80135ac:	2104      	movs	r1, #4
 80135ae:	6860      	ldr	r0, [r4, #4]
 80135b0:	f7ff ff82 	bl	80134b8 <std>
 80135b4:	68a0      	ldr	r0, [r4, #8]
 80135b6:	2201      	movs	r2, #1
 80135b8:	2109      	movs	r1, #9
 80135ba:	f7ff ff7d 	bl	80134b8 <std>
 80135be:	68e0      	ldr	r0, [r4, #12]
 80135c0:	2202      	movs	r2, #2
 80135c2:	2112      	movs	r1, #18
 80135c4:	f7ff ff78 	bl	80134b8 <std>
 80135c8:	2301      	movs	r3, #1
 80135ca:	61a3      	str	r3, [r4, #24]
 80135cc:	e7d2      	b.n	8013574 <__sinit+0xc>
 80135ce:	bf00      	nop
 80135d0:	08015174 	.word	0x08015174
 80135d4:	08013501 	.word	0x08013501

080135d8 <__sfp>:
 80135d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135da:	4607      	mov	r7, r0
 80135dc:	f7ff ffac 	bl	8013538 <__sfp_lock_acquire>
 80135e0:	4b1e      	ldr	r3, [pc, #120]	; (801365c <__sfp+0x84>)
 80135e2:	681e      	ldr	r6, [r3, #0]
 80135e4:	69b3      	ldr	r3, [r6, #24]
 80135e6:	b913      	cbnz	r3, 80135ee <__sfp+0x16>
 80135e8:	4630      	mov	r0, r6
 80135ea:	f7ff ffbd 	bl	8013568 <__sinit>
 80135ee:	3648      	adds	r6, #72	; 0x48
 80135f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80135f4:	3b01      	subs	r3, #1
 80135f6:	d503      	bpl.n	8013600 <__sfp+0x28>
 80135f8:	6833      	ldr	r3, [r6, #0]
 80135fa:	b30b      	cbz	r3, 8013640 <__sfp+0x68>
 80135fc:	6836      	ldr	r6, [r6, #0]
 80135fe:	e7f7      	b.n	80135f0 <__sfp+0x18>
 8013600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013604:	b9d5      	cbnz	r5, 801363c <__sfp+0x64>
 8013606:	4b16      	ldr	r3, [pc, #88]	; (8013660 <__sfp+0x88>)
 8013608:	60e3      	str	r3, [r4, #12]
 801360a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801360e:	6665      	str	r5, [r4, #100]	; 0x64
 8013610:	f000 f84c 	bl	80136ac <__retarget_lock_init_recursive>
 8013614:	f7ff ff96 	bl	8013544 <__sfp_lock_release>
 8013618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801361c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013620:	6025      	str	r5, [r4, #0]
 8013622:	61a5      	str	r5, [r4, #24]
 8013624:	2208      	movs	r2, #8
 8013626:	4629      	mov	r1, r5
 8013628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801362c:	f7fe f9a8 	bl	8011980 <memset>
 8013630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013638:	4620      	mov	r0, r4
 801363a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801363c:	3468      	adds	r4, #104	; 0x68
 801363e:	e7d9      	b.n	80135f4 <__sfp+0x1c>
 8013640:	2104      	movs	r1, #4
 8013642:	4638      	mov	r0, r7
 8013644:	f7ff ff62 	bl	801350c <__sfmoreglue>
 8013648:	4604      	mov	r4, r0
 801364a:	6030      	str	r0, [r6, #0]
 801364c:	2800      	cmp	r0, #0
 801364e:	d1d5      	bne.n	80135fc <__sfp+0x24>
 8013650:	f7ff ff78 	bl	8013544 <__sfp_lock_release>
 8013654:	230c      	movs	r3, #12
 8013656:	603b      	str	r3, [r7, #0]
 8013658:	e7ee      	b.n	8013638 <__sfp+0x60>
 801365a:	bf00      	nop
 801365c:	08015174 	.word	0x08015174
 8013660:	ffff0001 	.word	0xffff0001

08013664 <_fwalk_reent>:
 8013664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013668:	4606      	mov	r6, r0
 801366a:	4688      	mov	r8, r1
 801366c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013670:	2700      	movs	r7, #0
 8013672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013676:	f1b9 0901 	subs.w	r9, r9, #1
 801367a:	d505      	bpl.n	8013688 <_fwalk_reent+0x24>
 801367c:	6824      	ldr	r4, [r4, #0]
 801367e:	2c00      	cmp	r4, #0
 8013680:	d1f7      	bne.n	8013672 <_fwalk_reent+0xe>
 8013682:	4638      	mov	r0, r7
 8013684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013688:	89ab      	ldrh	r3, [r5, #12]
 801368a:	2b01      	cmp	r3, #1
 801368c:	d907      	bls.n	801369e <_fwalk_reent+0x3a>
 801368e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013692:	3301      	adds	r3, #1
 8013694:	d003      	beq.n	801369e <_fwalk_reent+0x3a>
 8013696:	4629      	mov	r1, r5
 8013698:	4630      	mov	r0, r6
 801369a:	47c0      	blx	r8
 801369c:	4307      	orrs	r7, r0
 801369e:	3568      	adds	r5, #104	; 0x68
 80136a0:	e7e9      	b.n	8013676 <_fwalk_reent+0x12>
	...

080136a4 <_localeconv_r>:
 80136a4:	4800      	ldr	r0, [pc, #0]	; (80136a8 <_localeconv_r+0x4>)
 80136a6:	4770      	bx	lr
 80136a8:	200003d8 	.word	0x200003d8

080136ac <__retarget_lock_init_recursive>:
 80136ac:	4770      	bx	lr

080136ae <__retarget_lock_acquire_recursive>:
 80136ae:	4770      	bx	lr

080136b0 <__retarget_lock_release_recursive>:
 80136b0:	4770      	bx	lr

080136b2 <__swhatbuf_r>:
 80136b2:	b570      	push	{r4, r5, r6, lr}
 80136b4:	460e      	mov	r6, r1
 80136b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ba:	2900      	cmp	r1, #0
 80136bc:	b096      	sub	sp, #88	; 0x58
 80136be:	4614      	mov	r4, r2
 80136c0:	461d      	mov	r5, r3
 80136c2:	da08      	bge.n	80136d6 <__swhatbuf_r+0x24>
 80136c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80136c8:	2200      	movs	r2, #0
 80136ca:	602a      	str	r2, [r5, #0]
 80136cc:	061a      	lsls	r2, r3, #24
 80136ce:	d410      	bmi.n	80136f2 <__swhatbuf_r+0x40>
 80136d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136d4:	e00e      	b.n	80136f4 <__swhatbuf_r+0x42>
 80136d6:	466a      	mov	r2, sp
 80136d8:	f000 ff38 	bl	801454c <_fstat_r>
 80136dc:	2800      	cmp	r0, #0
 80136de:	dbf1      	blt.n	80136c4 <__swhatbuf_r+0x12>
 80136e0:	9a01      	ldr	r2, [sp, #4]
 80136e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80136e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80136ea:	425a      	negs	r2, r3
 80136ec:	415a      	adcs	r2, r3
 80136ee:	602a      	str	r2, [r5, #0]
 80136f0:	e7ee      	b.n	80136d0 <__swhatbuf_r+0x1e>
 80136f2:	2340      	movs	r3, #64	; 0x40
 80136f4:	2000      	movs	r0, #0
 80136f6:	6023      	str	r3, [r4, #0]
 80136f8:	b016      	add	sp, #88	; 0x58
 80136fa:	bd70      	pop	{r4, r5, r6, pc}

080136fc <__smakebuf_r>:
 80136fc:	898b      	ldrh	r3, [r1, #12]
 80136fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013700:	079d      	lsls	r5, r3, #30
 8013702:	4606      	mov	r6, r0
 8013704:	460c      	mov	r4, r1
 8013706:	d507      	bpl.n	8013718 <__smakebuf_r+0x1c>
 8013708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801370c:	6023      	str	r3, [r4, #0]
 801370e:	6123      	str	r3, [r4, #16]
 8013710:	2301      	movs	r3, #1
 8013712:	6163      	str	r3, [r4, #20]
 8013714:	b002      	add	sp, #8
 8013716:	bd70      	pop	{r4, r5, r6, pc}
 8013718:	ab01      	add	r3, sp, #4
 801371a:	466a      	mov	r2, sp
 801371c:	f7ff ffc9 	bl	80136b2 <__swhatbuf_r>
 8013720:	9900      	ldr	r1, [sp, #0]
 8013722:	4605      	mov	r5, r0
 8013724:	4630      	mov	r0, r6
 8013726:	f7fe f99d 	bl	8011a64 <_malloc_r>
 801372a:	b948      	cbnz	r0, 8013740 <__smakebuf_r+0x44>
 801372c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013730:	059a      	lsls	r2, r3, #22
 8013732:	d4ef      	bmi.n	8013714 <__smakebuf_r+0x18>
 8013734:	f023 0303 	bic.w	r3, r3, #3
 8013738:	f043 0302 	orr.w	r3, r3, #2
 801373c:	81a3      	strh	r3, [r4, #12]
 801373e:	e7e3      	b.n	8013708 <__smakebuf_r+0xc>
 8013740:	4b0d      	ldr	r3, [pc, #52]	; (8013778 <__smakebuf_r+0x7c>)
 8013742:	62b3      	str	r3, [r6, #40]	; 0x28
 8013744:	89a3      	ldrh	r3, [r4, #12]
 8013746:	6020      	str	r0, [r4, #0]
 8013748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801374c:	81a3      	strh	r3, [r4, #12]
 801374e:	9b00      	ldr	r3, [sp, #0]
 8013750:	6163      	str	r3, [r4, #20]
 8013752:	9b01      	ldr	r3, [sp, #4]
 8013754:	6120      	str	r0, [r4, #16]
 8013756:	b15b      	cbz	r3, 8013770 <__smakebuf_r+0x74>
 8013758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801375c:	4630      	mov	r0, r6
 801375e:	f000 ff07 	bl	8014570 <_isatty_r>
 8013762:	b128      	cbz	r0, 8013770 <__smakebuf_r+0x74>
 8013764:	89a3      	ldrh	r3, [r4, #12]
 8013766:	f023 0303 	bic.w	r3, r3, #3
 801376a:	f043 0301 	orr.w	r3, r3, #1
 801376e:	81a3      	strh	r3, [r4, #12]
 8013770:	89a0      	ldrh	r0, [r4, #12]
 8013772:	4305      	orrs	r5, r0
 8013774:	81a5      	strh	r5, [r4, #12]
 8013776:	e7cd      	b.n	8013714 <__smakebuf_r+0x18>
 8013778:	08013501 	.word	0x08013501

0801377c <__malloc_lock>:
 801377c:	4801      	ldr	r0, [pc, #4]	; (8013784 <__malloc_lock+0x8>)
 801377e:	f7ff bf96 	b.w	80136ae <__retarget_lock_acquire_recursive>
 8013782:	bf00      	nop
 8013784:	200020c4 	.word	0x200020c4

08013788 <__malloc_unlock>:
 8013788:	4801      	ldr	r0, [pc, #4]	; (8013790 <__malloc_unlock+0x8>)
 801378a:	f7ff bf91 	b.w	80136b0 <__retarget_lock_release_recursive>
 801378e:	bf00      	nop
 8013790:	200020c4 	.word	0x200020c4

08013794 <_Balloc>:
 8013794:	b570      	push	{r4, r5, r6, lr}
 8013796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013798:	4604      	mov	r4, r0
 801379a:	460d      	mov	r5, r1
 801379c:	b976      	cbnz	r6, 80137bc <_Balloc+0x28>
 801379e:	2010      	movs	r0, #16
 80137a0:	f7fe f8d0 	bl	8011944 <malloc>
 80137a4:	4602      	mov	r2, r0
 80137a6:	6260      	str	r0, [r4, #36]	; 0x24
 80137a8:	b920      	cbnz	r0, 80137b4 <_Balloc+0x20>
 80137aa:	4b18      	ldr	r3, [pc, #96]	; (801380c <_Balloc+0x78>)
 80137ac:	4818      	ldr	r0, [pc, #96]	; (8013810 <_Balloc+0x7c>)
 80137ae:	2166      	movs	r1, #102	; 0x66
 80137b0:	f000 fe8c 	bl	80144cc <__assert_func>
 80137b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137b8:	6006      	str	r6, [r0, #0]
 80137ba:	60c6      	str	r6, [r0, #12]
 80137bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80137be:	68f3      	ldr	r3, [r6, #12]
 80137c0:	b183      	cbz	r3, 80137e4 <_Balloc+0x50>
 80137c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137ca:	b9b8      	cbnz	r0, 80137fc <_Balloc+0x68>
 80137cc:	2101      	movs	r1, #1
 80137ce:	fa01 f605 	lsl.w	r6, r1, r5
 80137d2:	1d72      	adds	r2, r6, #5
 80137d4:	0092      	lsls	r2, r2, #2
 80137d6:	4620      	mov	r0, r4
 80137d8:	f000 fb5a 	bl	8013e90 <_calloc_r>
 80137dc:	b160      	cbz	r0, 80137f8 <_Balloc+0x64>
 80137de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80137e2:	e00e      	b.n	8013802 <_Balloc+0x6e>
 80137e4:	2221      	movs	r2, #33	; 0x21
 80137e6:	2104      	movs	r1, #4
 80137e8:	4620      	mov	r0, r4
 80137ea:	f000 fb51 	bl	8013e90 <_calloc_r>
 80137ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137f0:	60f0      	str	r0, [r6, #12]
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1e4      	bne.n	80137c2 <_Balloc+0x2e>
 80137f8:	2000      	movs	r0, #0
 80137fa:	bd70      	pop	{r4, r5, r6, pc}
 80137fc:	6802      	ldr	r2, [r0, #0]
 80137fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013802:	2300      	movs	r3, #0
 8013804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013808:	e7f7      	b.n	80137fa <_Balloc+0x66>
 801380a:	bf00      	nop
 801380c:	080151b9 	.word	0x080151b9
 8013810:	0801529c 	.word	0x0801529c

08013814 <_Bfree>:
 8013814:	b570      	push	{r4, r5, r6, lr}
 8013816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013818:	4605      	mov	r5, r0
 801381a:	460c      	mov	r4, r1
 801381c:	b976      	cbnz	r6, 801383c <_Bfree+0x28>
 801381e:	2010      	movs	r0, #16
 8013820:	f7fe f890 	bl	8011944 <malloc>
 8013824:	4602      	mov	r2, r0
 8013826:	6268      	str	r0, [r5, #36]	; 0x24
 8013828:	b920      	cbnz	r0, 8013834 <_Bfree+0x20>
 801382a:	4b09      	ldr	r3, [pc, #36]	; (8013850 <_Bfree+0x3c>)
 801382c:	4809      	ldr	r0, [pc, #36]	; (8013854 <_Bfree+0x40>)
 801382e:	218a      	movs	r1, #138	; 0x8a
 8013830:	f000 fe4c 	bl	80144cc <__assert_func>
 8013834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013838:	6006      	str	r6, [r0, #0]
 801383a:	60c6      	str	r6, [r0, #12]
 801383c:	b13c      	cbz	r4, 801384e <_Bfree+0x3a>
 801383e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013840:	6862      	ldr	r2, [r4, #4]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013848:	6021      	str	r1, [r4, #0]
 801384a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801384e:	bd70      	pop	{r4, r5, r6, pc}
 8013850:	080151b9 	.word	0x080151b9
 8013854:	0801529c 	.word	0x0801529c

08013858 <__multadd>:
 8013858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801385c:	690d      	ldr	r5, [r1, #16]
 801385e:	4607      	mov	r7, r0
 8013860:	460c      	mov	r4, r1
 8013862:	461e      	mov	r6, r3
 8013864:	f101 0c14 	add.w	ip, r1, #20
 8013868:	2000      	movs	r0, #0
 801386a:	f8dc 3000 	ldr.w	r3, [ip]
 801386e:	b299      	uxth	r1, r3
 8013870:	fb02 6101 	mla	r1, r2, r1, r6
 8013874:	0c1e      	lsrs	r6, r3, #16
 8013876:	0c0b      	lsrs	r3, r1, #16
 8013878:	fb02 3306 	mla	r3, r2, r6, r3
 801387c:	b289      	uxth	r1, r1
 801387e:	3001      	adds	r0, #1
 8013880:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013884:	4285      	cmp	r5, r0
 8013886:	f84c 1b04 	str.w	r1, [ip], #4
 801388a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801388e:	dcec      	bgt.n	801386a <__multadd+0x12>
 8013890:	b30e      	cbz	r6, 80138d6 <__multadd+0x7e>
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	42ab      	cmp	r3, r5
 8013896:	dc19      	bgt.n	80138cc <__multadd+0x74>
 8013898:	6861      	ldr	r1, [r4, #4]
 801389a:	4638      	mov	r0, r7
 801389c:	3101      	adds	r1, #1
 801389e:	f7ff ff79 	bl	8013794 <_Balloc>
 80138a2:	4680      	mov	r8, r0
 80138a4:	b928      	cbnz	r0, 80138b2 <__multadd+0x5a>
 80138a6:	4602      	mov	r2, r0
 80138a8:	4b0c      	ldr	r3, [pc, #48]	; (80138dc <__multadd+0x84>)
 80138aa:	480d      	ldr	r0, [pc, #52]	; (80138e0 <__multadd+0x88>)
 80138ac:	21b5      	movs	r1, #181	; 0xb5
 80138ae:	f000 fe0d 	bl	80144cc <__assert_func>
 80138b2:	6922      	ldr	r2, [r4, #16]
 80138b4:	3202      	adds	r2, #2
 80138b6:	f104 010c 	add.w	r1, r4, #12
 80138ba:	0092      	lsls	r2, r2, #2
 80138bc:	300c      	adds	r0, #12
 80138be:	f7fe f851 	bl	8011964 <memcpy>
 80138c2:	4621      	mov	r1, r4
 80138c4:	4638      	mov	r0, r7
 80138c6:	f7ff ffa5 	bl	8013814 <_Bfree>
 80138ca:	4644      	mov	r4, r8
 80138cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80138d0:	3501      	adds	r5, #1
 80138d2:	615e      	str	r6, [r3, #20]
 80138d4:	6125      	str	r5, [r4, #16]
 80138d6:	4620      	mov	r0, r4
 80138d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138dc:	0801522b 	.word	0x0801522b
 80138e0:	0801529c 	.word	0x0801529c

080138e4 <__hi0bits>:
 80138e4:	0c02      	lsrs	r2, r0, #16
 80138e6:	0412      	lsls	r2, r2, #16
 80138e8:	4603      	mov	r3, r0
 80138ea:	b9ca      	cbnz	r2, 8013920 <__hi0bits+0x3c>
 80138ec:	0403      	lsls	r3, r0, #16
 80138ee:	2010      	movs	r0, #16
 80138f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80138f4:	bf04      	itt	eq
 80138f6:	021b      	lsleq	r3, r3, #8
 80138f8:	3008      	addeq	r0, #8
 80138fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80138fe:	bf04      	itt	eq
 8013900:	011b      	lsleq	r3, r3, #4
 8013902:	3004      	addeq	r0, #4
 8013904:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013908:	bf04      	itt	eq
 801390a:	009b      	lsleq	r3, r3, #2
 801390c:	3002      	addeq	r0, #2
 801390e:	2b00      	cmp	r3, #0
 8013910:	db05      	blt.n	801391e <__hi0bits+0x3a>
 8013912:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013916:	f100 0001 	add.w	r0, r0, #1
 801391a:	bf08      	it	eq
 801391c:	2020      	moveq	r0, #32
 801391e:	4770      	bx	lr
 8013920:	2000      	movs	r0, #0
 8013922:	e7e5      	b.n	80138f0 <__hi0bits+0xc>

08013924 <__lo0bits>:
 8013924:	6803      	ldr	r3, [r0, #0]
 8013926:	4602      	mov	r2, r0
 8013928:	f013 0007 	ands.w	r0, r3, #7
 801392c:	d00b      	beq.n	8013946 <__lo0bits+0x22>
 801392e:	07d9      	lsls	r1, r3, #31
 8013930:	d421      	bmi.n	8013976 <__lo0bits+0x52>
 8013932:	0798      	lsls	r0, r3, #30
 8013934:	bf49      	itett	mi
 8013936:	085b      	lsrmi	r3, r3, #1
 8013938:	089b      	lsrpl	r3, r3, #2
 801393a:	2001      	movmi	r0, #1
 801393c:	6013      	strmi	r3, [r2, #0]
 801393e:	bf5c      	itt	pl
 8013940:	6013      	strpl	r3, [r2, #0]
 8013942:	2002      	movpl	r0, #2
 8013944:	4770      	bx	lr
 8013946:	b299      	uxth	r1, r3
 8013948:	b909      	cbnz	r1, 801394e <__lo0bits+0x2a>
 801394a:	0c1b      	lsrs	r3, r3, #16
 801394c:	2010      	movs	r0, #16
 801394e:	b2d9      	uxtb	r1, r3
 8013950:	b909      	cbnz	r1, 8013956 <__lo0bits+0x32>
 8013952:	3008      	adds	r0, #8
 8013954:	0a1b      	lsrs	r3, r3, #8
 8013956:	0719      	lsls	r1, r3, #28
 8013958:	bf04      	itt	eq
 801395a:	091b      	lsreq	r3, r3, #4
 801395c:	3004      	addeq	r0, #4
 801395e:	0799      	lsls	r1, r3, #30
 8013960:	bf04      	itt	eq
 8013962:	089b      	lsreq	r3, r3, #2
 8013964:	3002      	addeq	r0, #2
 8013966:	07d9      	lsls	r1, r3, #31
 8013968:	d403      	bmi.n	8013972 <__lo0bits+0x4e>
 801396a:	085b      	lsrs	r3, r3, #1
 801396c:	f100 0001 	add.w	r0, r0, #1
 8013970:	d003      	beq.n	801397a <__lo0bits+0x56>
 8013972:	6013      	str	r3, [r2, #0]
 8013974:	4770      	bx	lr
 8013976:	2000      	movs	r0, #0
 8013978:	4770      	bx	lr
 801397a:	2020      	movs	r0, #32
 801397c:	4770      	bx	lr
	...

08013980 <__i2b>:
 8013980:	b510      	push	{r4, lr}
 8013982:	460c      	mov	r4, r1
 8013984:	2101      	movs	r1, #1
 8013986:	f7ff ff05 	bl	8013794 <_Balloc>
 801398a:	4602      	mov	r2, r0
 801398c:	b928      	cbnz	r0, 801399a <__i2b+0x1a>
 801398e:	4b05      	ldr	r3, [pc, #20]	; (80139a4 <__i2b+0x24>)
 8013990:	4805      	ldr	r0, [pc, #20]	; (80139a8 <__i2b+0x28>)
 8013992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013996:	f000 fd99 	bl	80144cc <__assert_func>
 801399a:	2301      	movs	r3, #1
 801399c:	6144      	str	r4, [r0, #20]
 801399e:	6103      	str	r3, [r0, #16]
 80139a0:	bd10      	pop	{r4, pc}
 80139a2:	bf00      	nop
 80139a4:	0801522b 	.word	0x0801522b
 80139a8:	0801529c 	.word	0x0801529c

080139ac <__multiply>:
 80139ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b0:	4691      	mov	r9, r2
 80139b2:	690a      	ldr	r2, [r1, #16]
 80139b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	bfb8      	it	lt
 80139bc:	460b      	movlt	r3, r1
 80139be:	460c      	mov	r4, r1
 80139c0:	bfbc      	itt	lt
 80139c2:	464c      	movlt	r4, r9
 80139c4:	4699      	movlt	r9, r3
 80139c6:	6927      	ldr	r7, [r4, #16]
 80139c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80139cc:	68a3      	ldr	r3, [r4, #8]
 80139ce:	6861      	ldr	r1, [r4, #4]
 80139d0:	eb07 060a 	add.w	r6, r7, sl
 80139d4:	42b3      	cmp	r3, r6
 80139d6:	b085      	sub	sp, #20
 80139d8:	bfb8      	it	lt
 80139da:	3101      	addlt	r1, #1
 80139dc:	f7ff feda 	bl	8013794 <_Balloc>
 80139e0:	b930      	cbnz	r0, 80139f0 <__multiply+0x44>
 80139e2:	4602      	mov	r2, r0
 80139e4:	4b43      	ldr	r3, [pc, #268]	; (8013af4 <__multiply+0x148>)
 80139e6:	4844      	ldr	r0, [pc, #272]	; (8013af8 <__multiply+0x14c>)
 80139e8:	f240 115d 	movw	r1, #349	; 0x15d
 80139ec:	f000 fd6e 	bl	80144cc <__assert_func>
 80139f0:	f100 0514 	add.w	r5, r0, #20
 80139f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80139f8:	462b      	mov	r3, r5
 80139fa:	2200      	movs	r2, #0
 80139fc:	4543      	cmp	r3, r8
 80139fe:	d321      	bcc.n	8013a44 <__multiply+0x98>
 8013a00:	f104 0314 	add.w	r3, r4, #20
 8013a04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013a08:	f109 0314 	add.w	r3, r9, #20
 8013a0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013a10:	9202      	str	r2, [sp, #8]
 8013a12:	1b3a      	subs	r2, r7, r4
 8013a14:	3a15      	subs	r2, #21
 8013a16:	f022 0203 	bic.w	r2, r2, #3
 8013a1a:	3204      	adds	r2, #4
 8013a1c:	f104 0115 	add.w	r1, r4, #21
 8013a20:	428f      	cmp	r7, r1
 8013a22:	bf38      	it	cc
 8013a24:	2204      	movcc	r2, #4
 8013a26:	9201      	str	r2, [sp, #4]
 8013a28:	9a02      	ldr	r2, [sp, #8]
 8013a2a:	9303      	str	r3, [sp, #12]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d80c      	bhi.n	8013a4a <__multiply+0x9e>
 8013a30:	2e00      	cmp	r6, #0
 8013a32:	dd03      	ble.n	8013a3c <__multiply+0x90>
 8013a34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d059      	beq.n	8013af0 <__multiply+0x144>
 8013a3c:	6106      	str	r6, [r0, #16]
 8013a3e:	b005      	add	sp, #20
 8013a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a44:	f843 2b04 	str.w	r2, [r3], #4
 8013a48:	e7d8      	b.n	80139fc <__multiply+0x50>
 8013a4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8013a4e:	f1ba 0f00 	cmp.w	sl, #0
 8013a52:	d023      	beq.n	8013a9c <__multiply+0xf0>
 8013a54:	f104 0e14 	add.w	lr, r4, #20
 8013a58:	46a9      	mov	r9, r5
 8013a5a:	f04f 0c00 	mov.w	ip, #0
 8013a5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013a62:	f8d9 1000 	ldr.w	r1, [r9]
 8013a66:	fa1f fb82 	uxth.w	fp, r2
 8013a6a:	b289      	uxth	r1, r1
 8013a6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013a70:	4461      	add	r1, ip
 8013a72:	f8d9 c000 	ldr.w	ip, [r9]
 8013a76:	0c12      	lsrs	r2, r2, #16
 8013a78:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8013a7c:	fb0a c202 	mla	r2, sl, r2, ip
 8013a80:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013a84:	b289      	uxth	r1, r1
 8013a86:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013a8a:	4577      	cmp	r7, lr
 8013a8c:	f849 1b04 	str.w	r1, [r9], #4
 8013a90:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013a94:	d8e3      	bhi.n	8013a5e <__multiply+0xb2>
 8013a96:	9a01      	ldr	r2, [sp, #4]
 8013a98:	f845 c002 	str.w	ip, [r5, r2]
 8013a9c:	9a03      	ldr	r2, [sp, #12]
 8013a9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013aa2:	3304      	adds	r3, #4
 8013aa4:	f1b9 0f00 	cmp.w	r9, #0
 8013aa8:	d020      	beq.n	8013aec <__multiply+0x140>
 8013aaa:	6829      	ldr	r1, [r5, #0]
 8013aac:	f104 0c14 	add.w	ip, r4, #20
 8013ab0:	46ae      	mov	lr, r5
 8013ab2:	f04f 0a00 	mov.w	sl, #0
 8013ab6:	f8bc b000 	ldrh.w	fp, [ip]
 8013aba:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013abe:	fb09 220b 	mla	r2, r9, fp, r2
 8013ac2:	4492      	add	sl, r2
 8013ac4:	b289      	uxth	r1, r1
 8013ac6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013aca:	f84e 1b04 	str.w	r1, [lr], #4
 8013ace:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013ad2:	f8be 1000 	ldrh.w	r1, [lr]
 8013ad6:	0c12      	lsrs	r2, r2, #16
 8013ad8:	fb09 1102 	mla	r1, r9, r2, r1
 8013adc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013ae0:	4567      	cmp	r7, ip
 8013ae2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013ae6:	d8e6      	bhi.n	8013ab6 <__multiply+0x10a>
 8013ae8:	9a01      	ldr	r2, [sp, #4]
 8013aea:	50a9      	str	r1, [r5, r2]
 8013aec:	3504      	adds	r5, #4
 8013aee:	e79b      	b.n	8013a28 <__multiply+0x7c>
 8013af0:	3e01      	subs	r6, #1
 8013af2:	e79d      	b.n	8013a30 <__multiply+0x84>
 8013af4:	0801522b 	.word	0x0801522b
 8013af8:	0801529c 	.word	0x0801529c

08013afc <__pow5mult>:
 8013afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b00:	4615      	mov	r5, r2
 8013b02:	f012 0203 	ands.w	r2, r2, #3
 8013b06:	4606      	mov	r6, r0
 8013b08:	460f      	mov	r7, r1
 8013b0a:	d007      	beq.n	8013b1c <__pow5mult+0x20>
 8013b0c:	4c25      	ldr	r4, [pc, #148]	; (8013ba4 <__pow5mult+0xa8>)
 8013b0e:	3a01      	subs	r2, #1
 8013b10:	2300      	movs	r3, #0
 8013b12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b16:	f7ff fe9f 	bl	8013858 <__multadd>
 8013b1a:	4607      	mov	r7, r0
 8013b1c:	10ad      	asrs	r5, r5, #2
 8013b1e:	d03d      	beq.n	8013b9c <__pow5mult+0xa0>
 8013b20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013b22:	b97c      	cbnz	r4, 8013b44 <__pow5mult+0x48>
 8013b24:	2010      	movs	r0, #16
 8013b26:	f7fd ff0d 	bl	8011944 <malloc>
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	6270      	str	r0, [r6, #36]	; 0x24
 8013b2e:	b928      	cbnz	r0, 8013b3c <__pow5mult+0x40>
 8013b30:	4b1d      	ldr	r3, [pc, #116]	; (8013ba8 <__pow5mult+0xac>)
 8013b32:	481e      	ldr	r0, [pc, #120]	; (8013bac <__pow5mult+0xb0>)
 8013b34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013b38:	f000 fcc8 	bl	80144cc <__assert_func>
 8013b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b40:	6004      	str	r4, [r0, #0]
 8013b42:	60c4      	str	r4, [r0, #12]
 8013b44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b4c:	b94c      	cbnz	r4, 8013b62 <__pow5mult+0x66>
 8013b4e:	f240 2171 	movw	r1, #625	; 0x271
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7ff ff14 	bl	8013980 <__i2b>
 8013b58:	2300      	movs	r3, #0
 8013b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b5e:	4604      	mov	r4, r0
 8013b60:	6003      	str	r3, [r0, #0]
 8013b62:	f04f 0900 	mov.w	r9, #0
 8013b66:	07eb      	lsls	r3, r5, #31
 8013b68:	d50a      	bpl.n	8013b80 <__pow5mult+0x84>
 8013b6a:	4639      	mov	r1, r7
 8013b6c:	4622      	mov	r2, r4
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f7ff ff1c 	bl	80139ac <__multiply>
 8013b74:	4639      	mov	r1, r7
 8013b76:	4680      	mov	r8, r0
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f7ff fe4b 	bl	8013814 <_Bfree>
 8013b7e:	4647      	mov	r7, r8
 8013b80:	106d      	asrs	r5, r5, #1
 8013b82:	d00b      	beq.n	8013b9c <__pow5mult+0xa0>
 8013b84:	6820      	ldr	r0, [r4, #0]
 8013b86:	b938      	cbnz	r0, 8013b98 <__pow5mult+0x9c>
 8013b88:	4622      	mov	r2, r4
 8013b8a:	4621      	mov	r1, r4
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7ff ff0d 	bl	80139ac <__multiply>
 8013b92:	6020      	str	r0, [r4, #0]
 8013b94:	f8c0 9000 	str.w	r9, [r0]
 8013b98:	4604      	mov	r4, r0
 8013b9a:	e7e4      	b.n	8013b66 <__pow5mult+0x6a>
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ba2:	bf00      	nop
 8013ba4:	080153e8 	.word	0x080153e8
 8013ba8:	080151b9 	.word	0x080151b9
 8013bac:	0801529c 	.word	0x0801529c

08013bb0 <__lshift>:
 8013bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bb4:	460c      	mov	r4, r1
 8013bb6:	6849      	ldr	r1, [r1, #4]
 8013bb8:	6923      	ldr	r3, [r4, #16]
 8013bba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013bbe:	68a3      	ldr	r3, [r4, #8]
 8013bc0:	4607      	mov	r7, r0
 8013bc2:	4691      	mov	r9, r2
 8013bc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013bc8:	f108 0601 	add.w	r6, r8, #1
 8013bcc:	42b3      	cmp	r3, r6
 8013bce:	db0b      	blt.n	8013be8 <__lshift+0x38>
 8013bd0:	4638      	mov	r0, r7
 8013bd2:	f7ff fddf 	bl	8013794 <_Balloc>
 8013bd6:	4605      	mov	r5, r0
 8013bd8:	b948      	cbnz	r0, 8013bee <__lshift+0x3e>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	4b2a      	ldr	r3, [pc, #168]	; (8013c88 <__lshift+0xd8>)
 8013bde:	482b      	ldr	r0, [pc, #172]	; (8013c8c <__lshift+0xdc>)
 8013be0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013be4:	f000 fc72 	bl	80144cc <__assert_func>
 8013be8:	3101      	adds	r1, #1
 8013bea:	005b      	lsls	r3, r3, #1
 8013bec:	e7ee      	b.n	8013bcc <__lshift+0x1c>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	f100 0114 	add.w	r1, r0, #20
 8013bf4:	f100 0210 	add.w	r2, r0, #16
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	4553      	cmp	r3, sl
 8013bfc:	db37      	blt.n	8013c6e <__lshift+0xbe>
 8013bfe:	6920      	ldr	r0, [r4, #16]
 8013c00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c04:	f104 0314 	add.w	r3, r4, #20
 8013c08:	f019 091f 	ands.w	r9, r9, #31
 8013c0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013c14:	d02f      	beq.n	8013c76 <__lshift+0xc6>
 8013c16:	f1c9 0e20 	rsb	lr, r9, #32
 8013c1a:	468a      	mov	sl, r1
 8013c1c:	f04f 0c00 	mov.w	ip, #0
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	fa02 f209 	lsl.w	r2, r2, r9
 8013c26:	ea42 020c 	orr.w	r2, r2, ip
 8013c2a:	f84a 2b04 	str.w	r2, [sl], #4
 8013c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c32:	4298      	cmp	r0, r3
 8013c34:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013c38:	d8f2      	bhi.n	8013c20 <__lshift+0x70>
 8013c3a:	1b03      	subs	r3, r0, r4
 8013c3c:	3b15      	subs	r3, #21
 8013c3e:	f023 0303 	bic.w	r3, r3, #3
 8013c42:	3304      	adds	r3, #4
 8013c44:	f104 0215 	add.w	r2, r4, #21
 8013c48:	4290      	cmp	r0, r2
 8013c4a:	bf38      	it	cc
 8013c4c:	2304      	movcc	r3, #4
 8013c4e:	f841 c003 	str.w	ip, [r1, r3]
 8013c52:	f1bc 0f00 	cmp.w	ip, #0
 8013c56:	d001      	beq.n	8013c5c <__lshift+0xac>
 8013c58:	f108 0602 	add.w	r6, r8, #2
 8013c5c:	3e01      	subs	r6, #1
 8013c5e:	4638      	mov	r0, r7
 8013c60:	612e      	str	r6, [r5, #16]
 8013c62:	4621      	mov	r1, r4
 8013c64:	f7ff fdd6 	bl	8013814 <_Bfree>
 8013c68:	4628      	mov	r0, r5
 8013c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c72:	3301      	adds	r3, #1
 8013c74:	e7c1      	b.n	8013bfa <__lshift+0x4a>
 8013c76:	3904      	subs	r1, #4
 8013c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c80:	4298      	cmp	r0, r3
 8013c82:	d8f9      	bhi.n	8013c78 <__lshift+0xc8>
 8013c84:	e7ea      	b.n	8013c5c <__lshift+0xac>
 8013c86:	bf00      	nop
 8013c88:	0801522b 	.word	0x0801522b
 8013c8c:	0801529c 	.word	0x0801529c

08013c90 <__mcmp>:
 8013c90:	690a      	ldr	r2, [r1, #16]
 8013c92:	4603      	mov	r3, r0
 8013c94:	6900      	ldr	r0, [r0, #16]
 8013c96:	1a80      	subs	r0, r0, r2
 8013c98:	b530      	push	{r4, r5, lr}
 8013c9a:	d10d      	bne.n	8013cb8 <__mcmp+0x28>
 8013c9c:	3314      	adds	r3, #20
 8013c9e:	3114      	adds	r1, #20
 8013ca0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013ca4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013ca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013cac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013cb0:	4295      	cmp	r5, r2
 8013cb2:	d002      	beq.n	8013cba <__mcmp+0x2a>
 8013cb4:	d304      	bcc.n	8013cc0 <__mcmp+0x30>
 8013cb6:	2001      	movs	r0, #1
 8013cb8:	bd30      	pop	{r4, r5, pc}
 8013cba:	42a3      	cmp	r3, r4
 8013cbc:	d3f4      	bcc.n	8013ca8 <__mcmp+0x18>
 8013cbe:	e7fb      	b.n	8013cb8 <__mcmp+0x28>
 8013cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc4:	e7f8      	b.n	8013cb8 <__mcmp+0x28>
	...

08013cc8 <__mdiff>:
 8013cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ccc:	460d      	mov	r5, r1
 8013cce:	4607      	mov	r7, r0
 8013cd0:	4611      	mov	r1, r2
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	4614      	mov	r4, r2
 8013cd6:	f7ff ffdb 	bl	8013c90 <__mcmp>
 8013cda:	1e06      	subs	r6, r0, #0
 8013cdc:	d111      	bne.n	8013d02 <__mdiff+0x3a>
 8013cde:	4631      	mov	r1, r6
 8013ce0:	4638      	mov	r0, r7
 8013ce2:	f7ff fd57 	bl	8013794 <_Balloc>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	b928      	cbnz	r0, 8013cf6 <__mdiff+0x2e>
 8013cea:	4b39      	ldr	r3, [pc, #228]	; (8013dd0 <__mdiff+0x108>)
 8013cec:	f240 2132 	movw	r1, #562	; 0x232
 8013cf0:	4838      	ldr	r0, [pc, #224]	; (8013dd4 <__mdiff+0x10c>)
 8013cf2:	f000 fbeb 	bl	80144cc <__assert_func>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013cfc:	4610      	mov	r0, r2
 8013cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d02:	bfa4      	itt	ge
 8013d04:	4623      	movge	r3, r4
 8013d06:	462c      	movge	r4, r5
 8013d08:	4638      	mov	r0, r7
 8013d0a:	6861      	ldr	r1, [r4, #4]
 8013d0c:	bfa6      	itte	ge
 8013d0e:	461d      	movge	r5, r3
 8013d10:	2600      	movge	r6, #0
 8013d12:	2601      	movlt	r6, #1
 8013d14:	f7ff fd3e 	bl	8013794 <_Balloc>
 8013d18:	4602      	mov	r2, r0
 8013d1a:	b918      	cbnz	r0, 8013d24 <__mdiff+0x5c>
 8013d1c:	4b2c      	ldr	r3, [pc, #176]	; (8013dd0 <__mdiff+0x108>)
 8013d1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013d22:	e7e5      	b.n	8013cf0 <__mdiff+0x28>
 8013d24:	6927      	ldr	r7, [r4, #16]
 8013d26:	60c6      	str	r6, [r0, #12]
 8013d28:	692e      	ldr	r6, [r5, #16]
 8013d2a:	f104 0014 	add.w	r0, r4, #20
 8013d2e:	f105 0914 	add.w	r9, r5, #20
 8013d32:	f102 0e14 	add.w	lr, r2, #20
 8013d36:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8013d3a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013d3e:	3410      	adds	r4, #16
 8013d40:	46f2      	mov	sl, lr
 8013d42:	2100      	movs	r1, #0
 8013d44:	f859 3b04 	ldr.w	r3, [r9], #4
 8013d48:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8013d4c:	fa1f f883 	uxth.w	r8, r3
 8013d50:	fa11 f18b 	uxtah	r1, r1, fp
 8013d54:	0c1b      	lsrs	r3, r3, #16
 8013d56:	eba1 0808 	sub.w	r8, r1, r8
 8013d5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013d5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013d62:	fa1f f888 	uxth.w	r8, r8
 8013d66:	1419      	asrs	r1, r3, #16
 8013d68:	454e      	cmp	r6, r9
 8013d6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013d6e:	f84a 3b04 	str.w	r3, [sl], #4
 8013d72:	d8e7      	bhi.n	8013d44 <__mdiff+0x7c>
 8013d74:	1b73      	subs	r3, r6, r5
 8013d76:	3b15      	subs	r3, #21
 8013d78:	f023 0303 	bic.w	r3, r3, #3
 8013d7c:	3304      	adds	r3, #4
 8013d7e:	3515      	adds	r5, #21
 8013d80:	42ae      	cmp	r6, r5
 8013d82:	bf38      	it	cc
 8013d84:	2304      	movcc	r3, #4
 8013d86:	4418      	add	r0, r3
 8013d88:	4473      	add	r3, lr
 8013d8a:	469e      	mov	lr, r3
 8013d8c:	4606      	mov	r6, r0
 8013d8e:	4566      	cmp	r6, ip
 8013d90:	d30e      	bcc.n	8013db0 <__mdiff+0xe8>
 8013d92:	f10c 0103 	add.w	r1, ip, #3
 8013d96:	1a09      	subs	r1, r1, r0
 8013d98:	f021 0103 	bic.w	r1, r1, #3
 8013d9c:	3803      	subs	r0, #3
 8013d9e:	4584      	cmp	ip, r0
 8013da0:	bf38      	it	cc
 8013da2:	2100      	movcc	r1, #0
 8013da4:	4419      	add	r1, r3
 8013da6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8013daa:	b17b      	cbz	r3, 8013dcc <__mdiff+0x104>
 8013dac:	6117      	str	r7, [r2, #16]
 8013dae:	e7a5      	b.n	8013cfc <__mdiff+0x34>
 8013db0:	f856 8b04 	ldr.w	r8, [r6], #4
 8013db4:	fa11 f488 	uxtah	r4, r1, r8
 8013db8:	1425      	asrs	r5, r4, #16
 8013dba:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8013dbe:	b2a4      	uxth	r4, r4
 8013dc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8013dc4:	f84e 4b04 	str.w	r4, [lr], #4
 8013dc8:	1429      	asrs	r1, r5, #16
 8013dca:	e7e0      	b.n	8013d8e <__mdiff+0xc6>
 8013dcc:	3f01      	subs	r7, #1
 8013dce:	e7ea      	b.n	8013da6 <__mdiff+0xde>
 8013dd0:	0801522b 	.word	0x0801522b
 8013dd4:	0801529c 	.word	0x0801529c

08013dd8 <__d2b>:
 8013dd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013ddc:	2101      	movs	r1, #1
 8013dde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8013de2:	4690      	mov	r8, r2
 8013de4:	461d      	mov	r5, r3
 8013de6:	f7ff fcd5 	bl	8013794 <_Balloc>
 8013dea:	4604      	mov	r4, r0
 8013dec:	b930      	cbnz	r0, 8013dfc <__d2b+0x24>
 8013dee:	4602      	mov	r2, r0
 8013df0:	4b25      	ldr	r3, [pc, #148]	; (8013e88 <__d2b+0xb0>)
 8013df2:	4826      	ldr	r0, [pc, #152]	; (8013e8c <__d2b+0xb4>)
 8013df4:	f240 310a 	movw	r1, #778	; 0x30a
 8013df8:	f000 fb68 	bl	80144cc <__assert_func>
 8013dfc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8013e00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8013e04:	bb2d      	cbnz	r5, 8013e52 <__d2b+0x7a>
 8013e06:	9301      	str	r3, [sp, #4]
 8013e08:	f1b8 0300 	subs.w	r3, r8, #0
 8013e0c:	d026      	beq.n	8013e5c <__d2b+0x84>
 8013e0e:	4668      	mov	r0, sp
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	f7ff fd87 	bl	8013924 <__lo0bits>
 8013e16:	9900      	ldr	r1, [sp, #0]
 8013e18:	b1f0      	cbz	r0, 8013e58 <__d2b+0x80>
 8013e1a:	9a01      	ldr	r2, [sp, #4]
 8013e1c:	f1c0 0320 	rsb	r3, r0, #32
 8013e20:	fa02 f303 	lsl.w	r3, r2, r3
 8013e24:	430b      	orrs	r3, r1
 8013e26:	40c2      	lsrs	r2, r0
 8013e28:	6163      	str	r3, [r4, #20]
 8013e2a:	9201      	str	r2, [sp, #4]
 8013e2c:	9b01      	ldr	r3, [sp, #4]
 8013e2e:	61a3      	str	r3, [r4, #24]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	bf14      	ite	ne
 8013e34:	2102      	movne	r1, #2
 8013e36:	2101      	moveq	r1, #1
 8013e38:	6121      	str	r1, [r4, #16]
 8013e3a:	b1c5      	cbz	r5, 8013e6e <__d2b+0x96>
 8013e3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013e40:	4405      	add	r5, r0
 8013e42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013e46:	603d      	str	r5, [r7, #0]
 8013e48:	6030      	str	r0, [r6, #0]
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	b002      	add	sp, #8
 8013e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013e56:	e7d6      	b.n	8013e06 <__d2b+0x2e>
 8013e58:	6161      	str	r1, [r4, #20]
 8013e5a:	e7e7      	b.n	8013e2c <__d2b+0x54>
 8013e5c:	a801      	add	r0, sp, #4
 8013e5e:	f7ff fd61 	bl	8013924 <__lo0bits>
 8013e62:	9b01      	ldr	r3, [sp, #4]
 8013e64:	6163      	str	r3, [r4, #20]
 8013e66:	2101      	movs	r1, #1
 8013e68:	6121      	str	r1, [r4, #16]
 8013e6a:	3020      	adds	r0, #32
 8013e6c:	e7e5      	b.n	8013e3a <__d2b+0x62>
 8013e6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8013e72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013e76:	6038      	str	r0, [r7, #0]
 8013e78:	6918      	ldr	r0, [r3, #16]
 8013e7a:	f7ff fd33 	bl	80138e4 <__hi0bits>
 8013e7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8013e82:	6031      	str	r1, [r6, #0]
 8013e84:	e7e1      	b.n	8013e4a <__d2b+0x72>
 8013e86:	bf00      	nop
 8013e88:	0801522b 	.word	0x0801522b
 8013e8c:	0801529c 	.word	0x0801529c

08013e90 <_calloc_r>:
 8013e90:	b570      	push	{r4, r5, r6, lr}
 8013e92:	fba1 5402 	umull	r5, r4, r1, r2
 8013e96:	b934      	cbnz	r4, 8013ea6 <_calloc_r+0x16>
 8013e98:	4629      	mov	r1, r5
 8013e9a:	f7fd fde3 	bl	8011a64 <_malloc_r>
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	b928      	cbnz	r0, 8013eae <_calloc_r+0x1e>
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	bd70      	pop	{r4, r5, r6, pc}
 8013ea6:	220c      	movs	r2, #12
 8013ea8:	6002      	str	r2, [r0, #0]
 8013eaa:	2600      	movs	r6, #0
 8013eac:	e7f9      	b.n	8013ea2 <_calloc_r+0x12>
 8013eae:	462a      	mov	r2, r5
 8013eb0:	4621      	mov	r1, r4
 8013eb2:	f7fd fd65 	bl	8011980 <memset>
 8013eb6:	e7f4      	b.n	8013ea2 <_calloc_r+0x12>

08013eb8 <__ssputs_r>:
 8013eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ebc:	688e      	ldr	r6, [r1, #8]
 8013ebe:	429e      	cmp	r6, r3
 8013ec0:	4682      	mov	sl, r0
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	4690      	mov	r8, r2
 8013ec6:	461f      	mov	r7, r3
 8013ec8:	d838      	bhi.n	8013f3c <__ssputs_r+0x84>
 8013eca:	898a      	ldrh	r2, [r1, #12]
 8013ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ed0:	d032      	beq.n	8013f38 <__ssputs_r+0x80>
 8013ed2:	6825      	ldr	r5, [r4, #0]
 8013ed4:	6909      	ldr	r1, [r1, #16]
 8013ed6:	eba5 0901 	sub.w	r9, r5, r1
 8013eda:	6965      	ldr	r5, [r4, #20]
 8013edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	444b      	add	r3, r9
 8013ee8:	106d      	asrs	r5, r5, #1
 8013eea:	429d      	cmp	r5, r3
 8013eec:	bf38      	it	cc
 8013eee:	461d      	movcc	r5, r3
 8013ef0:	0553      	lsls	r3, r2, #21
 8013ef2:	d531      	bpl.n	8013f58 <__ssputs_r+0xa0>
 8013ef4:	4629      	mov	r1, r5
 8013ef6:	f7fd fdb5 	bl	8011a64 <_malloc_r>
 8013efa:	4606      	mov	r6, r0
 8013efc:	b950      	cbnz	r0, 8013f14 <__ssputs_r+0x5c>
 8013efe:	230c      	movs	r3, #12
 8013f00:	f8ca 3000 	str.w	r3, [sl]
 8013f04:	89a3      	ldrh	r3, [r4, #12]
 8013f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f0a:	81a3      	strh	r3, [r4, #12]
 8013f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f14:	6921      	ldr	r1, [r4, #16]
 8013f16:	464a      	mov	r2, r9
 8013f18:	f7fd fd24 	bl	8011964 <memcpy>
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f26:	81a3      	strh	r3, [r4, #12]
 8013f28:	6126      	str	r6, [r4, #16]
 8013f2a:	6165      	str	r5, [r4, #20]
 8013f2c:	444e      	add	r6, r9
 8013f2e:	eba5 0509 	sub.w	r5, r5, r9
 8013f32:	6026      	str	r6, [r4, #0]
 8013f34:	60a5      	str	r5, [r4, #8]
 8013f36:	463e      	mov	r6, r7
 8013f38:	42be      	cmp	r6, r7
 8013f3a:	d900      	bls.n	8013f3e <__ssputs_r+0x86>
 8013f3c:	463e      	mov	r6, r7
 8013f3e:	6820      	ldr	r0, [r4, #0]
 8013f40:	4632      	mov	r2, r6
 8013f42:	4641      	mov	r1, r8
 8013f44:	f000 fb48 	bl	80145d8 <memmove>
 8013f48:	68a3      	ldr	r3, [r4, #8]
 8013f4a:	1b9b      	subs	r3, r3, r6
 8013f4c:	60a3      	str	r3, [r4, #8]
 8013f4e:	6823      	ldr	r3, [r4, #0]
 8013f50:	4433      	add	r3, r6
 8013f52:	6023      	str	r3, [r4, #0]
 8013f54:	2000      	movs	r0, #0
 8013f56:	e7db      	b.n	8013f10 <__ssputs_r+0x58>
 8013f58:	462a      	mov	r2, r5
 8013f5a:	f000 fb57 	bl	801460c <_realloc_r>
 8013f5e:	4606      	mov	r6, r0
 8013f60:	2800      	cmp	r0, #0
 8013f62:	d1e1      	bne.n	8013f28 <__ssputs_r+0x70>
 8013f64:	6921      	ldr	r1, [r4, #16]
 8013f66:	4650      	mov	r0, sl
 8013f68:	f7fd fd12 	bl	8011990 <_free_r>
 8013f6c:	e7c7      	b.n	8013efe <__ssputs_r+0x46>
	...

08013f70 <_svfiprintf_r>:
 8013f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f74:	4698      	mov	r8, r3
 8013f76:	898b      	ldrh	r3, [r1, #12]
 8013f78:	061b      	lsls	r3, r3, #24
 8013f7a:	b09d      	sub	sp, #116	; 0x74
 8013f7c:	4607      	mov	r7, r0
 8013f7e:	460d      	mov	r5, r1
 8013f80:	4614      	mov	r4, r2
 8013f82:	d50e      	bpl.n	8013fa2 <_svfiprintf_r+0x32>
 8013f84:	690b      	ldr	r3, [r1, #16]
 8013f86:	b963      	cbnz	r3, 8013fa2 <_svfiprintf_r+0x32>
 8013f88:	2140      	movs	r1, #64	; 0x40
 8013f8a:	f7fd fd6b 	bl	8011a64 <_malloc_r>
 8013f8e:	6028      	str	r0, [r5, #0]
 8013f90:	6128      	str	r0, [r5, #16]
 8013f92:	b920      	cbnz	r0, 8013f9e <_svfiprintf_r+0x2e>
 8013f94:	230c      	movs	r3, #12
 8013f96:	603b      	str	r3, [r7, #0]
 8013f98:	f04f 30ff 	mov.w	r0, #4294967295
 8013f9c:	e0d1      	b.n	8014142 <_svfiprintf_r+0x1d2>
 8013f9e:	2340      	movs	r3, #64	; 0x40
 8013fa0:	616b      	str	r3, [r5, #20]
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8013fa6:	2320      	movs	r3, #32
 8013fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fb0:	2330      	movs	r3, #48	; 0x30
 8013fb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801415c <_svfiprintf_r+0x1ec>
 8013fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fba:	f04f 0901 	mov.w	r9, #1
 8013fbe:	4623      	mov	r3, r4
 8013fc0:	469a      	mov	sl, r3
 8013fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fc6:	b10a      	cbz	r2, 8013fcc <_svfiprintf_r+0x5c>
 8013fc8:	2a25      	cmp	r2, #37	; 0x25
 8013fca:	d1f9      	bne.n	8013fc0 <_svfiprintf_r+0x50>
 8013fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8013fd0:	d00b      	beq.n	8013fea <_svfiprintf_r+0x7a>
 8013fd2:	465b      	mov	r3, fp
 8013fd4:	4622      	mov	r2, r4
 8013fd6:	4629      	mov	r1, r5
 8013fd8:	4638      	mov	r0, r7
 8013fda:	f7ff ff6d 	bl	8013eb8 <__ssputs_r>
 8013fde:	3001      	adds	r0, #1
 8013fe0:	f000 80aa 	beq.w	8014138 <_svfiprintf_r+0x1c8>
 8013fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fe6:	445a      	add	r2, fp
 8013fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8013fea:	f89a 3000 	ldrb.w	r3, [sl]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	f000 80a2 	beq.w	8014138 <_svfiprintf_r+0x1c8>
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8013ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ffe:	f10a 0a01 	add.w	sl, sl, #1
 8014002:	9304      	str	r3, [sp, #16]
 8014004:	9307      	str	r3, [sp, #28]
 8014006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801400a:	931a      	str	r3, [sp, #104]	; 0x68
 801400c:	4654      	mov	r4, sl
 801400e:	2205      	movs	r2, #5
 8014010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014014:	4851      	ldr	r0, [pc, #324]	; (801415c <_svfiprintf_r+0x1ec>)
 8014016:	f7ec f8bb 	bl	8000190 <memchr>
 801401a:	9a04      	ldr	r2, [sp, #16]
 801401c:	b9d8      	cbnz	r0, 8014056 <_svfiprintf_r+0xe6>
 801401e:	06d0      	lsls	r0, r2, #27
 8014020:	bf44      	itt	mi
 8014022:	2320      	movmi	r3, #32
 8014024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014028:	0711      	lsls	r1, r2, #28
 801402a:	bf44      	itt	mi
 801402c:	232b      	movmi	r3, #43	; 0x2b
 801402e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014032:	f89a 3000 	ldrb.w	r3, [sl]
 8014036:	2b2a      	cmp	r3, #42	; 0x2a
 8014038:	d015      	beq.n	8014066 <_svfiprintf_r+0xf6>
 801403a:	9a07      	ldr	r2, [sp, #28]
 801403c:	4654      	mov	r4, sl
 801403e:	2000      	movs	r0, #0
 8014040:	f04f 0c0a 	mov.w	ip, #10
 8014044:	4621      	mov	r1, r4
 8014046:	f811 3b01 	ldrb.w	r3, [r1], #1
 801404a:	3b30      	subs	r3, #48	; 0x30
 801404c:	2b09      	cmp	r3, #9
 801404e:	d94e      	bls.n	80140ee <_svfiprintf_r+0x17e>
 8014050:	b1b0      	cbz	r0, 8014080 <_svfiprintf_r+0x110>
 8014052:	9207      	str	r2, [sp, #28]
 8014054:	e014      	b.n	8014080 <_svfiprintf_r+0x110>
 8014056:	eba0 0308 	sub.w	r3, r0, r8
 801405a:	fa09 f303 	lsl.w	r3, r9, r3
 801405e:	4313      	orrs	r3, r2
 8014060:	9304      	str	r3, [sp, #16]
 8014062:	46a2      	mov	sl, r4
 8014064:	e7d2      	b.n	801400c <_svfiprintf_r+0x9c>
 8014066:	9b03      	ldr	r3, [sp, #12]
 8014068:	1d19      	adds	r1, r3, #4
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	9103      	str	r1, [sp, #12]
 801406e:	2b00      	cmp	r3, #0
 8014070:	bfbb      	ittet	lt
 8014072:	425b      	neglt	r3, r3
 8014074:	f042 0202 	orrlt.w	r2, r2, #2
 8014078:	9307      	strge	r3, [sp, #28]
 801407a:	9307      	strlt	r3, [sp, #28]
 801407c:	bfb8      	it	lt
 801407e:	9204      	strlt	r2, [sp, #16]
 8014080:	7823      	ldrb	r3, [r4, #0]
 8014082:	2b2e      	cmp	r3, #46	; 0x2e
 8014084:	d10c      	bne.n	80140a0 <_svfiprintf_r+0x130>
 8014086:	7863      	ldrb	r3, [r4, #1]
 8014088:	2b2a      	cmp	r3, #42	; 0x2a
 801408a:	d135      	bne.n	80140f8 <_svfiprintf_r+0x188>
 801408c:	9b03      	ldr	r3, [sp, #12]
 801408e:	1d1a      	adds	r2, r3, #4
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	9203      	str	r2, [sp, #12]
 8014094:	2b00      	cmp	r3, #0
 8014096:	bfb8      	it	lt
 8014098:	f04f 33ff 	movlt.w	r3, #4294967295
 801409c:	3402      	adds	r4, #2
 801409e:	9305      	str	r3, [sp, #20]
 80140a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8014160 <_svfiprintf_r+0x1f0>
 80140a4:	7821      	ldrb	r1, [r4, #0]
 80140a6:	2203      	movs	r2, #3
 80140a8:	4650      	mov	r0, sl
 80140aa:	f7ec f871 	bl	8000190 <memchr>
 80140ae:	b140      	cbz	r0, 80140c2 <_svfiprintf_r+0x152>
 80140b0:	2340      	movs	r3, #64	; 0x40
 80140b2:	eba0 000a 	sub.w	r0, r0, sl
 80140b6:	fa03 f000 	lsl.w	r0, r3, r0
 80140ba:	9b04      	ldr	r3, [sp, #16]
 80140bc:	4303      	orrs	r3, r0
 80140be:	3401      	adds	r4, #1
 80140c0:	9304      	str	r3, [sp, #16]
 80140c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140c6:	4827      	ldr	r0, [pc, #156]	; (8014164 <_svfiprintf_r+0x1f4>)
 80140c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140cc:	2206      	movs	r2, #6
 80140ce:	f7ec f85f 	bl	8000190 <memchr>
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d038      	beq.n	8014148 <_svfiprintf_r+0x1d8>
 80140d6:	4b24      	ldr	r3, [pc, #144]	; (8014168 <_svfiprintf_r+0x1f8>)
 80140d8:	bb1b      	cbnz	r3, 8014122 <_svfiprintf_r+0x1b2>
 80140da:	9b03      	ldr	r3, [sp, #12]
 80140dc:	3307      	adds	r3, #7
 80140de:	f023 0307 	bic.w	r3, r3, #7
 80140e2:	3308      	adds	r3, #8
 80140e4:	9303      	str	r3, [sp, #12]
 80140e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e8:	4433      	add	r3, r6
 80140ea:	9309      	str	r3, [sp, #36]	; 0x24
 80140ec:	e767      	b.n	8013fbe <_svfiprintf_r+0x4e>
 80140ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80140f2:	460c      	mov	r4, r1
 80140f4:	2001      	movs	r0, #1
 80140f6:	e7a5      	b.n	8014044 <_svfiprintf_r+0xd4>
 80140f8:	2300      	movs	r3, #0
 80140fa:	3401      	adds	r4, #1
 80140fc:	9305      	str	r3, [sp, #20]
 80140fe:	4619      	mov	r1, r3
 8014100:	f04f 0c0a 	mov.w	ip, #10
 8014104:	4620      	mov	r0, r4
 8014106:	f810 2b01 	ldrb.w	r2, [r0], #1
 801410a:	3a30      	subs	r2, #48	; 0x30
 801410c:	2a09      	cmp	r2, #9
 801410e:	d903      	bls.n	8014118 <_svfiprintf_r+0x1a8>
 8014110:	2b00      	cmp	r3, #0
 8014112:	d0c5      	beq.n	80140a0 <_svfiprintf_r+0x130>
 8014114:	9105      	str	r1, [sp, #20]
 8014116:	e7c3      	b.n	80140a0 <_svfiprintf_r+0x130>
 8014118:	fb0c 2101 	mla	r1, ip, r1, r2
 801411c:	4604      	mov	r4, r0
 801411e:	2301      	movs	r3, #1
 8014120:	e7f0      	b.n	8014104 <_svfiprintf_r+0x194>
 8014122:	ab03      	add	r3, sp, #12
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	462a      	mov	r2, r5
 8014128:	4b10      	ldr	r3, [pc, #64]	; (801416c <_svfiprintf_r+0x1fc>)
 801412a:	a904      	add	r1, sp, #16
 801412c:	4638      	mov	r0, r7
 801412e:	f7fd fdab 	bl	8011c88 <_printf_float>
 8014132:	1c42      	adds	r2, r0, #1
 8014134:	4606      	mov	r6, r0
 8014136:	d1d6      	bne.n	80140e6 <_svfiprintf_r+0x176>
 8014138:	89ab      	ldrh	r3, [r5, #12]
 801413a:	065b      	lsls	r3, r3, #25
 801413c:	f53f af2c 	bmi.w	8013f98 <_svfiprintf_r+0x28>
 8014140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014142:	b01d      	add	sp, #116	; 0x74
 8014144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014148:	ab03      	add	r3, sp, #12
 801414a:	9300      	str	r3, [sp, #0]
 801414c:	462a      	mov	r2, r5
 801414e:	4b07      	ldr	r3, [pc, #28]	; (801416c <_svfiprintf_r+0x1fc>)
 8014150:	a904      	add	r1, sp, #16
 8014152:	4638      	mov	r0, r7
 8014154:	f7fe f830 	bl	80121b8 <_printf_i>
 8014158:	e7eb      	b.n	8014132 <_svfiprintf_r+0x1c2>
 801415a:	bf00      	nop
 801415c:	080153f4 	.word	0x080153f4
 8014160:	080153fa 	.word	0x080153fa
 8014164:	080153fe 	.word	0x080153fe
 8014168:	08011c89 	.word	0x08011c89
 801416c:	08013eb9 	.word	0x08013eb9

08014170 <__sfputc_r>:
 8014170:	6893      	ldr	r3, [r2, #8]
 8014172:	3b01      	subs	r3, #1
 8014174:	2b00      	cmp	r3, #0
 8014176:	b410      	push	{r4}
 8014178:	6093      	str	r3, [r2, #8]
 801417a:	da07      	bge.n	801418c <__sfputc_r+0x1c>
 801417c:	6994      	ldr	r4, [r2, #24]
 801417e:	42a3      	cmp	r3, r4
 8014180:	db01      	blt.n	8014186 <__sfputc_r+0x16>
 8014182:	290a      	cmp	r1, #10
 8014184:	d102      	bne.n	801418c <__sfputc_r+0x1c>
 8014186:	bc10      	pop	{r4}
 8014188:	f7fe b9a0 	b.w	80124cc <__swbuf_r>
 801418c:	6813      	ldr	r3, [r2, #0]
 801418e:	1c58      	adds	r0, r3, #1
 8014190:	6010      	str	r0, [r2, #0]
 8014192:	7019      	strb	r1, [r3, #0]
 8014194:	4608      	mov	r0, r1
 8014196:	bc10      	pop	{r4}
 8014198:	4770      	bx	lr

0801419a <__sfputs_r>:
 801419a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801419c:	4606      	mov	r6, r0
 801419e:	460f      	mov	r7, r1
 80141a0:	4614      	mov	r4, r2
 80141a2:	18d5      	adds	r5, r2, r3
 80141a4:	42ac      	cmp	r4, r5
 80141a6:	d101      	bne.n	80141ac <__sfputs_r+0x12>
 80141a8:	2000      	movs	r0, #0
 80141aa:	e007      	b.n	80141bc <__sfputs_r+0x22>
 80141ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141b0:	463a      	mov	r2, r7
 80141b2:	4630      	mov	r0, r6
 80141b4:	f7ff ffdc 	bl	8014170 <__sfputc_r>
 80141b8:	1c43      	adds	r3, r0, #1
 80141ba:	d1f3      	bne.n	80141a4 <__sfputs_r+0xa>
 80141bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080141c0 <_vfiprintf_r>:
 80141c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c4:	460d      	mov	r5, r1
 80141c6:	b09d      	sub	sp, #116	; 0x74
 80141c8:	4614      	mov	r4, r2
 80141ca:	4698      	mov	r8, r3
 80141cc:	4606      	mov	r6, r0
 80141ce:	b118      	cbz	r0, 80141d8 <_vfiprintf_r+0x18>
 80141d0:	6983      	ldr	r3, [r0, #24]
 80141d2:	b90b      	cbnz	r3, 80141d8 <_vfiprintf_r+0x18>
 80141d4:	f7ff f9c8 	bl	8013568 <__sinit>
 80141d8:	4b89      	ldr	r3, [pc, #548]	; (8014400 <_vfiprintf_r+0x240>)
 80141da:	429d      	cmp	r5, r3
 80141dc:	d11b      	bne.n	8014216 <_vfiprintf_r+0x56>
 80141de:	6875      	ldr	r5, [r6, #4]
 80141e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141e2:	07d9      	lsls	r1, r3, #31
 80141e4:	d405      	bmi.n	80141f2 <_vfiprintf_r+0x32>
 80141e6:	89ab      	ldrh	r3, [r5, #12]
 80141e8:	059a      	lsls	r2, r3, #22
 80141ea:	d402      	bmi.n	80141f2 <_vfiprintf_r+0x32>
 80141ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141ee:	f7ff fa5e 	bl	80136ae <__retarget_lock_acquire_recursive>
 80141f2:	89ab      	ldrh	r3, [r5, #12]
 80141f4:	071b      	lsls	r3, r3, #28
 80141f6:	d501      	bpl.n	80141fc <_vfiprintf_r+0x3c>
 80141f8:	692b      	ldr	r3, [r5, #16]
 80141fa:	b9eb      	cbnz	r3, 8014238 <_vfiprintf_r+0x78>
 80141fc:	4629      	mov	r1, r5
 80141fe:	4630      	mov	r0, r6
 8014200:	f7fe f9b6 	bl	8012570 <__swsetup_r>
 8014204:	b1c0      	cbz	r0, 8014238 <_vfiprintf_r+0x78>
 8014206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014208:	07dc      	lsls	r4, r3, #31
 801420a:	d50e      	bpl.n	801422a <_vfiprintf_r+0x6a>
 801420c:	f04f 30ff 	mov.w	r0, #4294967295
 8014210:	b01d      	add	sp, #116	; 0x74
 8014212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014216:	4b7b      	ldr	r3, [pc, #492]	; (8014404 <_vfiprintf_r+0x244>)
 8014218:	429d      	cmp	r5, r3
 801421a:	d101      	bne.n	8014220 <_vfiprintf_r+0x60>
 801421c:	68b5      	ldr	r5, [r6, #8]
 801421e:	e7df      	b.n	80141e0 <_vfiprintf_r+0x20>
 8014220:	4b79      	ldr	r3, [pc, #484]	; (8014408 <_vfiprintf_r+0x248>)
 8014222:	429d      	cmp	r5, r3
 8014224:	bf08      	it	eq
 8014226:	68f5      	ldreq	r5, [r6, #12]
 8014228:	e7da      	b.n	80141e0 <_vfiprintf_r+0x20>
 801422a:	89ab      	ldrh	r3, [r5, #12]
 801422c:	0598      	lsls	r0, r3, #22
 801422e:	d4ed      	bmi.n	801420c <_vfiprintf_r+0x4c>
 8014230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014232:	f7ff fa3d 	bl	80136b0 <__retarget_lock_release_recursive>
 8014236:	e7e9      	b.n	801420c <_vfiprintf_r+0x4c>
 8014238:	2300      	movs	r3, #0
 801423a:	9309      	str	r3, [sp, #36]	; 0x24
 801423c:	2320      	movs	r3, #32
 801423e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014242:	f8cd 800c 	str.w	r8, [sp, #12]
 8014246:	2330      	movs	r3, #48	; 0x30
 8014248:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801440c <_vfiprintf_r+0x24c>
 801424c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014250:	f04f 0901 	mov.w	r9, #1
 8014254:	4623      	mov	r3, r4
 8014256:	469a      	mov	sl, r3
 8014258:	f813 2b01 	ldrb.w	r2, [r3], #1
 801425c:	b10a      	cbz	r2, 8014262 <_vfiprintf_r+0xa2>
 801425e:	2a25      	cmp	r2, #37	; 0x25
 8014260:	d1f9      	bne.n	8014256 <_vfiprintf_r+0x96>
 8014262:	ebba 0b04 	subs.w	fp, sl, r4
 8014266:	d00b      	beq.n	8014280 <_vfiprintf_r+0xc0>
 8014268:	465b      	mov	r3, fp
 801426a:	4622      	mov	r2, r4
 801426c:	4629      	mov	r1, r5
 801426e:	4630      	mov	r0, r6
 8014270:	f7ff ff93 	bl	801419a <__sfputs_r>
 8014274:	3001      	adds	r0, #1
 8014276:	f000 80aa 	beq.w	80143ce <_vfiprintf_r+0x20e>
 801427a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801427c:	445a      	add	r2, fp
 801427e:	9209      	str	r2, [sp, #36]	; 0x24
 8014280:	f89a 3000 	ldrb.w	r3, [sl]
 8014284:	2b00      	cmp	r3, #0
 8014286:	f000 80a2 	beq.w	80143ce <_vfiprintf_r+0x20e>
 801428a:	2300      	movs	r3, #0
 801428c:	f04f 32ff 	mov.w	r2, #4294967295
 8014290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014294:	f10a 0a01 	add.w	sl, sl, #1
 8014298:	9304      	str	r3, [sp, #16]
 801429a:	9307      	str	r3, [sp, #28]
 801429c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142a0:	931a      	str	r3, [sp, #104]	; 0x68
 80142a2:	4654      	mov	r4, sl
 80142a4:	2205      	movs	r2, #5
 80142a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142aa:	4858      	ldr	r0, [pc, #352]	; (801440c <_vfiprintf_r+0x24c>)
 80142ac:	f7eb ff70 	bl	8000190 <memchr>
 80142b0:	9a04      	ldr	r2, [sp, #16]
 80142b2:	b9d8      	cbnz	r0, 80142ec <_vfiprintf_r+0x12c>
 80142b4:	06d1      	lsls	r1, r2, #27
 80142b6:	bf44      	itt	mi
 80142b8:	2320      	movmi	r3, #32
 80142ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142be:	0713      	lsls	r3, r2, #28
 80142c0:	bf44      	itt	mi
 80142c2:	232b      	movmi	r3, #43	; 0x2b
 80142c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142c8:	f89a 3000 	ldrb.w	r3, [sl]
 80142cc:	2b2a      	cmp	r3, #42	; 0x2a
 80142ce:	d015      	beq.n	80142fc <_vfiprintf_r+0x13c>
 80142d0:	9a07      	ldr	r2, [sp, #28]
 80142d2:	4654      	mov	r4, sl
 80142d4:	2000      	movs	r0, #0
 80142d6:	f04f 0c0a 	mov.w	ip, #10
 80142da:	4621      	mov	r1, r4
 80142dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142e0:	3b30      	subs	r3, #48	; 0x30
 80142e2:	2b09      	cmp	r3, #9
 80142e4:	d94e      	bls.n	8014384 <_vfiprintf_r+0x1c4>
 80142e6:	b1b0      	cbz	r0, 8014316 <_vfiprintf_r+0x156>
 80142e8:	9207      	str	r2, [sp, #28]
 80142ea:	e014      	b.n	8014316 <_vfiprintf_r+0x156>
 80142ec:	eba0 0308 	sub.w	r3, r0, r8
 80142f0:	fa09 f303 	lsl.w	r3, r9, r3
 80142f4:	4313      	orrs	r3, r2
 80142f6:	9304      	str	r3, [sp, #16]
 80142f8:	46a2      	mov	sl, r4
 80142fa:	e7d2      	b.n	80142a2 <_vfiprintf_r+0xe2>
 80142fc:	9b03      	ldr	r3, [sp, #12]
 80142fe:	1d19      	adds	r1, r3, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	9103      	str	r1, [sp, #12]
 8014304:	2b00      	cmp	r3, #0
 8014306:	bfbb      	ittet	lt
 8014308:	425b      	neglt	r3, r3
 801430a:	f042 0202 	orrlt.w	r2, r2, #2
 801430e:	9307      	strge	r3, [sp, #28]
 8014310:	9307      	strlt	r3, [sp, #28]
 8014312:	bfb8      	it	lt
 8014314:	9204      	strlt	r2, [sp, #16]
 8014316:	7823      	ldrb	r3, [r4, #0]
 8014318:	2b2e      	cmp	r3, #46	; 0x2e
 801431a:	d10c      	bne.n	8014336 <_vfiprintf_r+0x176>
 801431c:	7863      	ldrb	r3, [r4, #1]
 801431e:	2b2a      	cmp	r3, #42	; 0x2a
 8014320:	d135      	bne.n	801438e <_vfiprintf_r+0x1ce>
 8014322:	9b03      	ldr	r3, [sp, #12]
 8014324:	1d1a      	adds	r2, r3, #4
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	9203      	str	r2, [sp, #12]
 801432a:	2b00      	cmp	r3, #0
 801432c:	bfb8      	it	lt
 801432e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014332:	3402      	adds	r4, #2
 8014334:	9305      	str	r3, [sp, #20]
 8014336:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8014410 <_vfiprintf_r+0x250>
 801433a:	7821      	ldrb	r1, [r4, #0]
 801433c:	2203      	movs	r2, #3
 801433e:	4650      	mov	r0, sl
 8014340:	f7eb ff26 	bl	8000190 <memchr>
 8014344:	b140      	cbz	r0, 8014358 <_vfiprintf_r+0x198>
 8014346:	2340      	movs	r3, #64	; 0x40
 8014348:	eba0 000a 	sub.w	r0, r0, sl
 801434c:	fa03 f000 	lsl.w	r0, r3, r0
 8014350:	9b04      	ldr	r3, [sp, #16]
 8014352:	4303      	orrs	r3, r0
 8014354:	3401      	adds	r4, #1
 8014356:	9304      	str	r3, [sp, #16]
 8014358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801435c:	482d      	ldr	r0, [pc, #180]	; (8014414 <_vfiprintf_r+0x254>)
 801435e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014362:	2206      	movs	r2, #6
 8014364:	f7eb ff14 	bl	8000190 <memchr>
 8014368:	2800      	cmp	r0, #0
 801436a:	d03f      	beq.n	80143ec <_vfiprintf_r+0x22c>
 801436c:	4b2a      	ldr	r3, [pc, #168]	; (8014418 <_vfiprintf_r+0x258>)
 801436e:	bb1b      	cbnz	r3, 80143b8 <_vfiprintf_r+0x1f8>
 8014370:	9b03      	ldr	r3, [sp, #12]
 8014372:	3307      	adds	r3, #7
 8014374:	f023 0307 	bic.w	r3, r3, #7
 8014378:	3308      	adds	r3, #8
 801437a:	9303      	str	r3, [sp, #12]
 801437c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801437e:	443b      	add	r3, r7
 8014380:	9309      	str	r3, [sp, #36]	; 0x24
 8014382:	e767      	b.n	8014254 <_vfiprintf_r+0x94>
 8014384:	fb0c 3202 	mla	r2, ip, r2, r3
 8014388:	460c      	mov	r4, r1
 801438a:	2001      	movs	r0, #1
 801438c:	e7a5      	b.n	80142da <_vfiprintf_r+0x11a>
 801438e:	2300      	movs	r3, #0
 8014390:	3401      	adds	r4, #1
 8014392:	9305      	str	r3, [sp, #20]
 8014394:	4619      	mov	r1, r3
 8014396:	f04f 0c0a 	mov.w	ip, #10
 801439a:	4620      	mov	r0, r4
 801439c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143a0:	3a30      	subs	r2, #48	; 0x30
 80143a2:	2a09      	cmp	r2, #9
 80143a4:	d903      	bls.n	80143ae <_vfiprintf_r+0x1ee>
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d0c5      	beq.n	8014336 <_vfiprintf_r+0x176>
 80143aa:	9105      	str	r1, [sp, #20]
 80143ac:	e7c3      	b.n	8014336 <_vfiprintf_r+0x176>
 80143ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80143b2:	4604      	mov	r4, r0
 80143b4:	2301      	movs	r3, #1
 80143b6:	e7f0      	b.n	801439a <_vfiprintf_r+0x1da>
 80143b8:	ab03      	add	r3, sp, #12
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	462a      	mov	r2, r5
 80143be:	4b17      	ldr	r3, [pc, #92]	; (801441c <_vfiprintf_r+0x25c>)
 80143c0:	a904      	add	r1, sp, #16
 80143c2:	4630      	mov	r0, r6
 80143c4:	f7fd fc60 	bl	8011c88 <_printf_float>
 80143c8:	4607      	mov	r7, r0
 80143ca:	1c78      	adds	r0, r7, #1
 80143cc:	d1d6      	bne.n	801437c <_vfiprintf_r+0x1bc>
 80143ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143d0:	07d9      	lsls	r1, r3, #31
 80143d2:	d405      	bmi.n	80143e0 <_vfiprintf_r+0x220>
 80143d4:	89ab      	ldrh	r3, [r5, #12]
 80143d6:	059a      	lsls	r2, r3, #22
 80143d8:	d402      	bmi.n	80143e0 <_vfiprintf_r+0x220>
 80143da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143dc:	f7ff f968 	bl	80136b0 <__retarget_lock_release_recursive>
 80143e0:	89ab      	ldrh	r3, [r5, #12]
 80143e2:	065b      	lsls	r3, r3, #25
 80143e4:	f53f af12 	bmi.w	801420c <_vfiprintf_r+0x4c>
 80143e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143ea:	e711      	b.n	8014210 <_vfiprintf_r+0x50>
 80143ec:	ab03      	add	r3, sp, #12
 80143ee:	9300      	str	r3, [sp, #0]
 80143f0:	462a      	mov	r2, r5
 80143f2:	4b0a      	ldr	r3, [pc, #40]	; (801441c <_vfiprintf_r+0x25c>)
 80143f4:	a904      	add	r1, sp, #16
 80143f6:	4630      	mov	r0, r6
 80143f8:	f7fd fede 	bl	80121b8 <_printf_i>
 80143fc:	e7e4      	b.n	80143c8 <_vfiprintf_r+0x208>
 80143fe:	bf00      	nop
 8014400:	0801525c 	.word	0x0801525c
 8014404:	0801527c 	.word	0x0801527c
 8014408:	0801523c 	.word	0x0801523c
 801440c:	080153f4 	.word	0x080153f4
 8014410:	080153fa 	.word	0x080153fa
 8014414:	080153fe 	.word	0x080153fe
 8014418:	08011c89 	.word	0x08011c89
 801441c:	0801419b 	.word	0x0801419b

08014420 <__sread>:
 8014420:	b510      	push	{r4, lr}
 8014422:	460c      	mov	r4, r1
 8014424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014428:	f000 f920 	bl	801466c <_read_r>
 801442c:	2800      	cmp	r0, #0
 801442e:	bfab      	itete	ge
 8014430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014432:	89a3      	ldrhlt	r3, [r4, #12]
 8014434:	181b      	addge	r3, r3, r0
 8014436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801443a:	bfac      	ite	ge
 801443c:	6563      	strge	r3, [r4, #84]	; 0x54
 801443e:	81a3      	strhlt	r3, [r4, #12]
 8014440:	bd10      	pop	{r4, pc}

08014442 <__swrite>:
 8014442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014446:	461f      	mov	r7, r3
 8014448:	898b      	ldrh	r3, [r1, #12]
 801444a:	05db      	lsls	r3, r3, #23
 801444c:	4605      	mov	r5, r0
 801444e:	460c      	mov	r4, r1
 8014450:	4616      	mov	r6, r2
 8014452:	d505      	bpl.n	8014460 <__swrite+0x1e>
 8014454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014458:	2302      	movs	r3, #2
 801445a:	2200      	movs	r2, #0
 801445c:	f000 f898 	bl	8014590 <_lseek_r>
 8014460:	89a3      	ldrh	r3, [r4, #12]
 8014462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801446a:	81a3      	strh	r3, [r4, #12]
 801446c:	4632      	mov	r2, r6
 801446e:	463b      	mov	r3, r7
 8014470:	4628      	mov	r0, r5
 8014472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014476:	f000 b817 	b.w	80144a8 <_write_r>

0801447a <__sseek>:
 801447a:	b510      	push	{r4, lr}
 801447c:	460c      	mov	r4, r1
 801447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014482:	f000 f885 	bl	8014590 <_lseek_r>
 8014486:	1c43      	adds	r3, r0, #1
 8014488:	89a3      	ldrh	r3, [r4, #12]
 801448a:	bf15      	itete	ne
 801448c:	6560      	strne	r0, [r4, #84]	; 0x54
 801448e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014496:	81a3      	strheq	r3, [r4, #12]
 8014498:	bf18      	it	ne
 801449a:	81a3      	strhne	r3, [r4, #12]
 801449c:	bd10      	pop	{r4, pc}

0801449e <__sclose>:
 801449e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144a2:	f000 b831 	b.w	8014508 <_close_r>
	...

080144a8 <_write_r>:
 80144a8:	b538      	push	{r3, r4, r5, lr}
 80144aa:	4d07      	ldr	r5, [pc, #28]	; (80144c8 <_write_r+0x20>)
 80144ac:	4604      	mov	r4, r0
 80144ae:	4608      	mov	r0, r1
 80144b0:	4611      	mov	r1, r2
 80144b2:	2200      	movs	r2, #0
 80144b4:	602a      	str	r2, [r5, #0]
 80144b6:	461a      	mov	r2, r3
 80144b8:	f7ed fe78 	bl	80021ac <_write>
 80144bc:	1c43      	adds	r3, r0, #1
 80144be:	d102      	bne.n	80144c6 <_write_r+0x1e>
 80144c0:	682b      	ldr	r3, [r5, #0]
 80144c2:	b103      	cbz	r3, 80144c6 <_write_r+0x1e>
 80144c4:	6023      	str	r3, [r4, #0]
 80144c6:	bd38      	pop	{r3, r4, r5, pc}
 80144c8:	200020c8 	.word	0x200020c8

080144cc <__assert_func>:
 80144cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144ce:	4614      	mov	r4, r2
 80144d0:	461a      	mov	r2, r3
 80144d2:	4b09      	ldr	r3, [pc, #36]	; (80144f8 <__assert_func+0x2c>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	4605      	mov	r5, r0
 80144d8:	68d8      	ldr	r0, [r3, #12]
 80144da:	b14c      	cbz	r4, 80144f0 <__assert_func+0x24>
 80144dc:	4b07      	ldr	r3, [pc, #28]	; (80144fc <__assert_func+0x30>)
 80144de:	9100      	str	r1, [sp, #0]
 80144e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80144e4:	4906      	ldr	r1, [pc, #24]	; (8014500 <__assert_func+0x34>)
 80144e6:	462b      	mov	r3, r5
 80144e8:	f000 f81e 	bl	8014528 <fiprintf>
 80144ec:	f000 f8dd 	bl	80146aa <abort>
 80144f0:	4b04      	ldr	r3, [pc, #16]	; (8014504 <__assert_func+0x38>)
 80144f2:	461c      	mov	r4, r3
 80144f4:	e7f3      	b.n	80144de <__assert_func+0x12>
 80144f6:	bf00      	nop
 80144f8:	20000284 	.word	0x20000284
 80144fc:	08015405 	.word	0x08015405
 8014500:	08015412 	.word	0x08015412
 8014504:	08015440 	.word	0x08015440

08014508 <_close_r>:
 8014508:	b538      	push	{r3, r4, r5, lr}
 801450a:	4d06      	ldr	r5, [pc, #24]	; (8014524 <_close_r+0x1c>)
 801450c:	2300      	movs	r3, #0
 801450e:	4604      	mov	r4, r0
 8014510:	4608      	mov	r0, r1
 8014512:	602b      	str	r3, [r5, #0]
 8014514:	f7ed fe66 	bl	80021e4 <_close>
 8014518:	1c43      	adds	r3, r0, #1
 801451a:	d102      	bne.n	8014522 <_close_r+0x1a>
 801451c:	682b      	ldr	r3, [r5, #0]
 801451e:	b103      	cbz	r3, 8014522 <_close_r+0x1a>
 8014520:	6023      	str	r3, [r4, #0]
 8014522:	bd38      	pop	{r3, r4, r5, pc}
 8014524:	200020c8 	.word	0x200020c8

08014528 <fiprintf>:
 8014528:	b40e      	push	{r1, r2, r3}
 801452a:	b503      	push	{r0, r1, lr}
 801452c:	4601      	mov	r1, r0
 801452e:	ab03      	add	r3, sp, #12
 8014530:	4805      	ldr	r0, [pc, #20]	; (8014548 <fiprintf+0x20>)
 8014532:	f853 2b04 	ldr.w	r2, [r3], #4
 8014536:	6800      	ldr	r0, [r0, #0]
 8014538:	9301      	str	r3, [sp, #4]
 801453a:	f7ff fe41 	bl	80141c0 <_vfiprintf_r>
 801453e:	b002      	add	sp, #8
 8014540:	f85d eb04 	ldr.w	lr, [sp], #4
 8014544:	b003      	add	sp, #12
 8014546:	4770      	bx	lr
 8014548:	20000284 	.word	0x20000284

0801454c <_fstat_r>:
 801454c:	b538      	push	{r3, r4, r5, lr}
 801454e:	4d07      	ldr	r5, [pc, #28]	; (801456c <_fstat_r+0x20>)
 8014550:	2300      	movs	r3, #0
 8014552:	4604      	mov	r4, r0
 8014554:	4608      	mov	r0, r1
 8014556:	4611      	mov	r1, r2
 8014558:	602b      	str	r3, [r5, #0]
 801455a:	f7ed fe4e 	bl	80021fa <_fstat>
 801455e:	1c43      	adds	r3, r0, #1
 8014560:	d102      	bne.n	8014568 <_fstat_r+0x1c>
 8014562:	682b      	ldr	r3, [r5, #0]
 8014564:	b103      	cbz	r3, 8014568 <_fstat_r+0x1c>
 8014566:	6023      	str	r3, [r4, #0]
 8014568:	bd38      	pop	{r3, r4, r5, pc}
 801456a:	bf00      	nop
 801456c:	200020c8 	.word	0x200020c8

08014570 <_isatty_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4d06      	ldr	r5, [pc, #24]	; (801458c <_isatty_r+0x1c>)
 8014574:	2300      	movs	r3, #0
 8014576:	4604      	mov	r4, r0
 8014578:	4608      	mov	r0, r1
 801457a:	602b      	str	r3, [r5, #0]
 801457c:	f7ed fe4c 	bl	8002218 <_isatty>
 8014580:	1c43      	adds	r3, r0, #1
 8014582:	d102      	bne.n	801458a <_isatty_r+0x1a>
 8014584:	682b      	ldr	r3, [r5, #0]
 8014586:	b103      	cbz	r3, 801458a <_isatty_r+0x1a>
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	bd38      	pop	{r3, r4, r5, pc}
 801458c:	200020c8 	.word	0x200020c8

08014590 <_lseek_r>:
 8014590:	b538      	push	{r3, r4, r5, lr}
 8014592:	4d07      	ldr	r5, [pc, #28]	; (80145b0 <_lseek_r+0x20>)
 8014594:	4604      	mov	r4, r0
 8014596:	4608      	mov	r0, r1
 8014598:	4611      	mov	r1, r2
 801459a:	2200      	movs	r2, #0
 801459c:	602a      	str	r2, [r5, #0]
 801459e:	461a      	mov	r2, r3
 80145a0:	f7ed fe44 	bl	800222c <_lseek>
 80145a4:	1c43      	adds	r3, r0, #1
 80145a6:	d102      	bne.n	80145ae <_lseek_r+0x1e>
 80145a8:	682b      	ldr	r3, [r5, #0]
 80145aa:	b103      	cbz	r3, 80145ae <_lseek_r+0x1e>
 80145ac:	6023      	str	r3, [r4, #0]
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	200020c8 	.word	0x200020c8

080145b4 <__ascii_mbtowc>:
 80145b4:	b082      	sub	sp, #8
 80145b6:	b901      	cbnz	r1, 80145ba <__ascii_mbtowc+0x6>
 80145b8:	a901      	add	r1, sp, #4
 80145ba:	b142      	cbz	r2, 80145ce <__ascii_mbtowc+0x1a>
 80145bc:	b14b      	cbz	r3, 80145d2 <__ascii_mbtowc+0x1e>
 80145be:	7813      	ldrb	r3, [r2, #0]
 80145c0:	600b      	str	r3, [r1, #0]
 80145c2:	7812      	ldrb	r2, [r2, #0]
 80145c4:	1e10      	subs	r0, r2, #0
 80145c6:	bf18      	it	ne
 80145c8:	2001      	movne	r0, #1
 80145ca:	b002      	add	sp, #8
 80145cc:	4770      	bx	lr
 80145ce:	4610      	mov	r0, r2
 80145d0:	e7fb      	b.n	80145ca <__ascii_mbtowc+0x16>
 80145d2:	f06f 0001 	mvn.w	r0, #1
 80145d6:	e7f8      	b.n	80145ca <__ascii_mbtowc+0x16>

080145d8 <memmove>:
 80145d8:	4288      	cmp	r0, r1
 80145da:	b510      	push	{r4, lr}
 80145dc:	eb01 0402 	add.w	r4, r1, r2
 80145e0:	d902      	bls.n	80145e8 <memmove+0x10>
 80145e2:	4284      	cmp	r4, r0
 80145e4:	4623      	mov	r3, r4
 80145e6:	d807      	bhi.n	80145f8 <memmove+0x20>
 80145e8:	1e43      	subs	r3, r0, #1
 80145ea:	42a1      	cmp	r1, r4
 80145ec:	d008      	beq.n	8014600 <memmove+0x28>
 80145ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80145f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80145f6:	e7f8      	b.n	80145ea <memmove+0x12>
 80145f8:	4402      	add	r2, r0
 80145fa:	4601      	mov	r1, r0
 80145fc:	428a      	cmp	r2, r1
 80145fe:	d100      	bne.n	8014602 <memmove+0x2a>
 8014600:	bd10      	pop	{r4, pc}
 8014602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801460a:	e7f7      	b.n	80145fc <memmove+0x24>

0801460c <_realloc_r>:
 801460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014610:	4680      	mov	r8, r0
 8014612:	4614      	mov	r4, r2
 8014614:	460e      	mov	r6, r1
 8014616:	b921      	cbnz	r1, 8014622 <_realloc_r+0x16>
 8014618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801461c:	4611      	mov	r1, r2
 801461e:	f7fd ba21 	b.w	8011a64 <_malloc_r>
 8014622:	b92a      	cbnz	r2, 8014630 <_realloc_r+0x24>
 8014624:	f7fd f9b4 	bl	8011990 <_free_r>
 8014628:	4625      	mov	r5, r4
 801462a:	4628      	mov	r0, r5
 801462c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014630:	f000 f842 	bl	80146b8 <_malloc_usable_size_r>
 8014634:	4284      	cmp	r4, r0
 8014636:	4607      	mov	r7, r0
 8014638:	d802      	bhi.n	8014640 <_realloc_r+0x34>
 801463a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801463e:	d812      	bhi.n	8014666 <_realloc_r+0x5a>
 8014640:	4621      	mov	r1, r4
 8014642:	4640      	mov	r0, r8
 8014644:	f7fd fa0e 	bl	8011a64 <_malloc_r>
 8014648:	4605      	mov	r5, r0
 801464a:	2800      	cmp	r0, #0
 801464c:	d0ed      	beq.n	801462a <_realloc_r+0x1e>
 801464e:	42bc      	cmp	r4, r7
 8014650:	4622      	mov	r2, r4
 8014652:	4631      	mov	r1, r6
 8014654:	bf28      	it	cs
 8014656:	463a      	movcs	r2, r7
 8014658:	f7fd f984 	bl	8011964 <memcpy>
 801465c:	4631      	mov	r1, r6
 801465e:	4640      	mov	r0, r8
 8014660:	f7fd f996 	bl	8011990 <_free_r>
 8014664:	e7e1      	b.n	801462a <_realloc_r+0x1e>
 8014666:	4635      	mov	r5, r6
 8014668:	e7df      	b.n	801462a <_realloc_r+0x1e>
	...

0801466c <_read_r>:
 801466c:	b538      	push	{r3, r4, r5, lr}
 801466e:	4d07      	ldr	r5, [pc, #28]	; (801468c <_read_r+0x20>)
 8014670:	4604      	mov	r4, r0
 8014672:	4608      	mov	r0, r1
 8014674:	4611      	mov	r1, r2
 8014676:	2200      	movs	r2, #0
 8014678:	602a      	str	r2, [r5, #0]
 801467a:	461a      	mov	r2, r3
 801467c:	f7ed fd79 	bl	8002172 <_read>
 8014680:	1c43      	adds	r3, r0, #1
 8014682:	d102      	bne.n	801468a <_read_r+0x1e>
 8014684:	682b      	ldr	r3, [r5, #0]
 8014686:	b103      	cbz	r3, 801468a <_read_r+0x1e>
 8014688:	6023      	str	r3, [r4, #0]
 801468a:	bd38      	pop	{r3, r4, r5, pc}
 801468c:	200020c8 	.word	0x200020c8

08014690 <__ascii_wctomb>:
 8014690:	4603      	mov	r3, r0
 8014692:	4608      	mov	r0, r1
 8014694:	b141      	cbz	r1, 80146a8 <__ascii_wctomb+0x18>
 8014696:	2aff      	cmp	r2, #255	; 0xff
 8014698:	d904      	bls.n	80146a4 <__ascii_wctomb+0x14>
 801469a:	228a      	movs	r2, #138	; 0x8a
 801469c:	601a      	str	r2, [r3, #0]
 801469e:	f04f 30ff 	mov.w	r0, #4294967295
 80146a2:	4770      	bx	lr
 80146a4:	700a      	strb	r2, [r1, #0]
 80146a6:	2001      	movs	r0, #1
 80146a8:	4770      	bx	lr

080146aa <abort>:
 80146aa:	b508      	push	{r3, lr}
 80146ac:	2006      	movs	r0, #6
 80146ae:	f000 f833 	bl	8014718 <raise>
 80146b2:	2001      	movs	r0, #1
 80146b4:	f7ed fd53 	bl	800215e <_exit>

080146b8 <_malloc_usable_size_r>:
 80146b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146bc:	1f18      	subs	r0, r3, #4
 80146be:	2b00      	cmp	r3, #0
 80146c0:	bfbc      	itt	lt
 80146c2:	580b      	ldrlt	r3, [r1, r0]
 80146c4:	18c0      	addlt	r0, r0, r3
 80146c6:	4770      	bx	lr

080146c8 <_raise_r>:
 80146c8:	291f      	cmp	r1, #31
 80146ca:	b538      	push	{r3, r4, r5, lr}
 80146cc:	4604      	mov	r4, r0
 80146ce:	460d      	mov	r5, r1
 80146d0:	d904      	bls.n	80146dc <_raise_r+0x14>
 80146d2:	2316      	movs	r3, #22
 80146d4:	6003      	str	r3, [r0, #0]
 80146d6:	f04f 30ff 	mov.w	r0, #4294967295
 80146da:	bd38      	pop	{r3, r4, r5, pc}
 80146dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80146de:	b112      	cbz	r2, 80146e6 <_raise_r+0x1e>
 80146e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146e4:	b94b      	cbnz	r3, 80146fa <_raise_r+0x32>
 80146e6:	4620      	mov	r0, r4
 80146e8:	f000 f830 	bl	801474c <_getpid_r>
 80146ec:	462a      	mov	r2, r5
 80146ee:	4601      	mov	r1, r0
 80146f0:	4620      	mov	r0, r4
 80146f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146f6:	f000 b817 	b.w	8014728 <_kill_r>
 80146fa:	2b01      	cmp	r3, #1
 80146fc:	d00a      	beq.n	8014714 <_raise_r+0x4c>
 80146fe:	1c59      	adds	r1, r3, #1
 8014700:	d103      	bne.n	801470a <_raise_r+0x42>
 8014702:	2316      	movs	r3, #22
 8014704:	6003      	str	r3, [r0, #0]
 8014706:	2001      	movs	r0, #1
 8014708:	e7e7      	b.n	80146da <_raise_r+0x12>
 801470a:	2400      	movs	r4, #0
 801470c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014710:	4628      	mov	r0, r5
 8014712:	4798      	blx	r3
 8014714:	2000      	movs	r0, #0
 8014716:	e7e0      	b.n	80146da <_raise_r+0x12>

08014718 <raise>:
 8014718:	4b02      	ldr	r3, [pc, #8]	; (8014724 <raise+0xc>)
 801471a:	4601      	mov	r1, r0
 801471c:	6818      	ldr	r0, [r3, #0]
 801471e:	f7ff bfd3 	b.w	80146c8 <_raise_r>
 8014722:	bf00      	nop
 8014724:	20000284 	.word	0x20000284

08014728 <_kill_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4d07      	ldr	r5, [pc, #28]	; (8014748 <_kill_r+0x20>)
 801472c:	2300      	movs	r3, #0
 801472e:	4604      	mov	r4, r0
 8014730:	4608      	mov	r0, r1
 8014732:	4611      	mov	r1, r2
 8014734:	602b      	str	r3, [r5, #0]
 8014736:	f7ed fd02 	bl	800213e <_kill>
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	d102      	bne.n	8014744 <_kill_r+0x1c>
 801473e:	682b      	ldr	r3, [r5, #0]
 8014740:	b103      	cbz	r3, 8014744 <_kill_r+0x1c>
 8014742:	6023      	str	r3, [r4, #0]
 8014744:	bd38      	pop	{r3, r4, r5, pc}
 8014746:	bf00      	nop
 8014748:	200020c8 	.word	0x200020c8

0801474c <_getpid_r>:
 801474c:	f7ed bcf0 	b.w	8002130 <_getpid>

08014750 <floor>:
 8014750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014754:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8014758:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801475c:	2e13      	cmp	r6, #19
 801475e:	4602      	mov	r2, r0
 8014760:	460b      	mov	r3, r1
 8014762:	4607      	mov	r7, r0
 8014764:	460c      	mov	r4, r1
 8014766:	4605      	mov	r5, r0
 8014768:	dc33      	bgt.n	80147d2 <floor+0x82>
 801476a:	2e00      	cmp	r6, #0
 801476c:	da14      	bge.n	8014798 <floor+0x48>
 801476e:	a334      	add	r3, pc, #208	; (adr r3, 8014840 <floor+0xf0>)
 8014770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014774:	f7eb fd62 	bl	800023c <__adddf3>
 8014778:	2200      	movs	r2, #0
 801477a:	2300      	movs	r3, #0
 801477c:	f7ec f9a4 	bl	8000ac8 <__aeabi_dcmpgt>
 8014780:	b138      	cbz	r0, 8014792 <floor+0x42>
 8014782:	2c00      	cmp	r4, #0
 8014784:	da58      	bge.n	8014838 <floor+0xe8>
 8014786:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801478a:	431d      	orrs	r5, r3
 801478c:	d001      	beq.n	8014792 <floor+0x42>
 801478e:	4c2e      	ldr	r4, [pc, #184]	; (8014848 <floor+0xf8>)
 8014790:	2500      	movs	r5, #0
 8014792:	4623      	mov	r3, r4
 8014794:	462f      	mov	r7, r5
 8014796:	e025      	b.n	80147e4 <floor+0x94>
 8014798:	4a2c      	ldr	r2, [pc, #176]	; (801484c <floor+0xfc>)
 801479a:	fa42 f806 	asr.w	r8, r2, r6
 801479e:	ea01 0208 	and.w	r2, r1, r8
 80147a2:	4302      	orrs	r2, r0
 80147a4:	d01e      	beq.n	80147e4 <floor+0x94>
 80147a6:	a326      	add	r3, pc, #152	; (adr r3, 8014840 <floor+0xf0>)
 80147a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ac:	f7eb fd46 	bl	800023c <__adddf3>
 80147b0:	2200      	movs	r2, #0
 80147b2:	2300      	movs	r3, #0
 80147b4:	f7ec f988 	bl	8000ac8 <__aeabi_dcmpgt>
 80147b8:	2800      	cmp	r0, #0
 80147ba:	d0ea      	beq.n	8014792 <floor+0x42>
 80147bc:	2c00      	cmp	r4, #0
 80147be:	bfbe      	ittt	lt
 80147c0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80147c4:	fa43 f606 	asrlt.w	r6, r3, r6
 80147c8:	19a4      	addlt	r4, r4, r6
 80147ca:	ea24 0408 	bic.w	r4, r4, r8
 80147ce:	2500      	movs	r5, #0
 80147d0:	e7df      	b.n	8014792 <floor+0x42>
 80147d2:	2e33      	cmp	r6, #51	; 0x33
 80147d4:	dd0a      	ble.n	80147ec <floor+0x9c>
 80147d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80147da:	d103      	bne.n	80147e4 <floor+0x94>
 80147dc:	f7eb fd2e 	bl	800023c <__adddf3>
 80147e0:	4607      	mov	r7, r0
 80147e2:	460b      	mov	r3, r1
 80147e4:	4638      	mov	r0, r7
 80147e6:	4619      	mov	r1, r3
 80147e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147ec:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80147f0:	f04f 32ff 	mov.w	r2, #4294967295
 80147f4:	fa22 f808 	lsr.w	r8, r2, r8
 80147f8:	ea18 0f00 	tst.w	r8, r0
 80147fc:	d0f2      	beq.n	80147e4 <floor+0x94>
 80147fe:	a310      	add	r3, pc, #64	; (adr r3, 8014840 <floor+0xf0>)
 8014800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014804:	f7eb fd1a 	bl	800023c <__adddf3>
 8014808:	2200      	movs	r2, #0
 801480a:	2300      	movs	r3, #0
 801480c:	f7ec f95c 	bl	8000ac8 <__aeabi_dcmpgt>
 8014810:	2800      	cmp	r0, #0
 8014812:	d0be      	beq.n	8014792 <floor+0x42>
 8014814:	2c00      	cmp	r4, #0
 8014816:	da02      	bge.n	801481e <floor+0xce>
 8014818:	2e14      	cmp	r6, #20
 801481a:	d103      	bne.n	8014824 <floor+0xd4>
 801481c:	3401      	adds	r4, #1
 801481e:	ea25 0508 	bic.w	r5, r5, r8
 8014822:	e7b6      	b.n	8014792 <floor+0x42>
 8014824:	2301      	movs	r3, #1
 8014826:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801482a:	fa03 f606 	lsl.w	r6, r3, r6
 801482e:	4435      	add	r5, r6
 8014830:	42bd      	cmp	r5, r7
 8014832:	bf38      	it	cc
 8014834:	18e4      	addcc	r4, r4, r3
 8014836:	e7f2      	b.n	801481e <floor+0xce>
 8014838:	2500      	movs	r5, #0
 801483a:	462c      	mov	r4, r5
 801483c:	e7a9      	b.n	8014792 <floor+0x42>
 801483e:	bf00      	nop
 8014840:	8800759c 	.word	0x8800759c
 8014844:	7e37e43c 	.word	0x7e37e43c
 8014848:	bff00000 	.word	0xbff00000
 801484c:	000fffff 	.word	0x000fffff

08014850 <_init>:
 8014850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014852:	bf00      	nop
 8014854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014856:	bc08      	pop	{r3}
 8014858:	469e      	mov	lr, r3
 801485a:	4770      	bx	lr

0801485c <_fini>:
 801485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801485e:	bf00      	nop
 8014860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014862:	bc08      	pop	{r3}
 8014864:	469e      	mov	lr, r3
 8014866:	4770      	bx	lr
